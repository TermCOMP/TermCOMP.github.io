MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/YkOvY.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could not be shown:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 407 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 26 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 15 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 10 ms]
        (17) IRSwT
        (18) IRSwTToQDPProof [SOUND, 3 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) JBCTerminationSCC
        (23) SCCToIRSProof [SOUND, 34 ms]
        (24) IRSwT
        (25) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (26) IRSwT
        (27) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
        (28) IRSwT
        (29) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (30) IRSwT
        (31) TempFilterProof [SOUND, 6 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (34) YES
    (35) JBCTerminationSCC
        (36) SCCToIRSProof [SOUND, 31 ms]
        (37) IRSwT
        (38) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (39) IRSwT
        (40) IRSwTTerminationDigraphProof [EQUIVALENT, 20 ms]
        (41) IRSwT
        (42) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (43) IRSwT
        (44) IRSwTChainingProof [EQUIVALENT, 0 ms]
        (45) IRSwT
        (46) IRSwTTerminationDigraphProof [EQUIVALENT, 38 ms]
        (47) IRSwT
        (48) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (49) IRSwT
        (50) IRSwTChainingProof [EQUIVALENT, 0 ms]
        (51) IRSwT
        (52) IRSwTTerminationDigraphProof [EQUIVALENT, 106 ms]
        (53) AND
            (54) IRSwT
                (55) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (56) IRSwT
                (57) TempFilterProof [SOUND, 479 ms]
                (58) IRSwT
                (59) IRSwTTerminationDigraphProof [EQUIVALENT, 67 ms]
                (60) IRSwT
                (61) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (62) IRSwT
            (63) IRSwT
                (64) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (65) IRSwT
                (66) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (67) IRSwT
                (68) TempFilterProof [SOUND, 6 ms]
                (69) IntTRS
                (70) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
                (71) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}


public class SortCount{

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();

    l = IntList.sort(0,l);

  }

}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }

  public static boolean member(int n, IntList l) {
    while (l != null) {
      if (l.value == n) return true;
      else l =l.next;
    }

    return false;

  }

  public static int max(IntList l) {
    int m = 0;
    while (l !=null) {
      if (l.value > m) m = l.value;
      l = l.next;
    }
    return m;
  }


  public static IntList sort(int n, IntList l) {
    IntList res =null;
    while (max(l) >= n) {
      if (member(n,l)) res = new IntList(n,res);
      n++;
    }
    return res;
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}


public class SortCount{

  public static void main(String[] args) {
    Random.args = args;
    IntList l = IntList.createIntList();

    l = IntList.sort(0,l);

  }

}

class IntList {
  int value;
  IntList next;

  public IntList(int value, IntList next) {
    this.value = value;
    this.next = next;
  }

  public static IntList createIntList() {

    int i = Random.random();
    IntList l = null;

    while (i > 0) {
      l = new IntList(Random.random(), l);
      i--;
    }

    return l;
  }

  public static boolean member(int n, IntList l) {
    while (l != null) {
      if (l.value == n) return true;
      else l =l.next;
    }

    return false;

  }

  public static int max(IntList l) {
    int m = 0;
    while (l !=null) {
      if (l.value > m) m = l.value;
      l = l.next;
    }
    return m;
  }


  public static IntList sort(int n, IntList l) {
    IntList res =null;
    while (max(l) >= n) {
      if (member(n,l)) res = new IntList(n,res);
      n++;
    }
    return res;
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
SortCount.main([Ljava/lang/String;)V: Graph of 111 nodes with 1 SCC.



IntList.createIntList()LIntList;: Graph of 187 nodes with 1 SCC.



IntList.member(ILIntList;)Z: Graph of 23 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 3 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: IntList.member(ILIntList;)Z
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*IntList: [value, next]
*Marker field analysis yielded the following relations that could be markers:
*IntList.value != i506 (Introduced counter i859)
*IntList.value != i531 (Introduced counter i860)
----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 14 IRulesP rules:
f9125_0_member_NULL(EOS(STATIC_9125), i506, i506, java.lang.Object(o651sub), java.lang.Object(o651sub), i859, i860) -> f9132_0_member_NULL(EOS(STATIC_9132), i506, i506, java.lang.Object(o651sub), java.lang.Object(o651sub), i859, i860) :|: TRUE
f9132_0_member_NULL(EOS(STATIC_9132), i506, i506, java.lang.Object(o651sub), java.lang.Object(o651sub), i859, i860) -> f9138_0_member_Load(EOS(STATIC_9138), i506, i506, java.lang.Object(o651sub), i859, i860) :|: TRUE
f9138_0_member_Load(EOS(STATIC_9138), i506, i506, java.lang.Object(o651sub), i859, i860) -> f9142_0_member_FieldAccess(EOS(STATIC_9142), i506, i506, java.lang.Object(o651sub), java.lang.Object(o651sub), i859, i860) :|: TRUE
f9142_0_member_FieldAccess(EOS(STATIC_9142), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), java.lang.Object(IntList(EOC, i531, o657)), i859, i860) -> f9151_0_member_FieldAccess(EOS(STATIC_9151), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), java.lang.Object(IntList(EOC, i531, o657)), i859, i860) :|: TRUE
f9151_0_member_FieldAccess(EOS(STATIC_9151), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), java.lang.Object(IntList(EOC, i531, o657)), i859, i860) -> f9160_0_member_Load(EOS(STATIC_9160), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i531, i859, i860) :|: TRUE
f9160_0_member_Load(EOS(STATIC_9160), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i531, i859, i860) -> f9192_0_member_NE(EOS(STATIC_9192), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i531, i506, i859, i860) :|: TRUE
f9192_0_member_NE(EOS(STATIC_9192), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i531, i506, i859, i860) -> f9224_0_member_NE(EOS(STATIC_9224), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i531, i506, i859, i860) :|: !(i531 = i506)
f9224_0_member_NE(EOS(STATIC_9224), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i531, i506, i859, i860) -> f9230_0_member_Load(EOS(STATIC_9230), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i859, i860) :|: !(i531 = i506)
f9230_0_member_Load(EOS(STATIC_9230), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i859, i860) -> f9235_0_member_FieldAccess(EOS(STATIC_9235), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i859, i860) :|: TRUE
f9235_0_member_FieldAccess(EOS(STATIC_9235), i506, i506, java.lang.Object(IntList(EOC, i531, o657)), i859, i860) -> f9239_0_member_Store(EOS(STATIC_9239), i506, i506, o657, i859, i860) :|: TRUE
f9239_0_member_Store(EOS(STATIC_9239), i506, i506, o657, i859, i860) -> f9261_0_member_JMP(EOS(STATIC_9261), i506, i506, o657, i859, i860) :|: TRUE
f9261_0_member_JMP(EOS(STATIC_9261), i506, i506, o657, i859, i860) -> f9273_0_member_Load(EOS(STATIC_9273), i506, i506, o657, i859, i860) :|: TRUE
f9273_0_member_Load(EOS(STATIC_9273), i506, i506, o657, i859, i860) -> f9117_0_member_Load(EOS(STATIC_9117), i506, i506, o657, i859, i860) :|: TRUE
f9117_0_member_Load(EOS(STATIC_9117), i506, i506, o640, i859, i860) -> f9125_0_member_NULL(EOS(STATIC_9125), i506, i506, o640, o640, i859, i860) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f9125_0_member_NULL(EOS(STATIC_9125), i506:0, i506:0, java.lang.Object(IntList(EOC, i531:0, o657:0)), java.lang.Object(IntList(EOC, i531:0, o657:0)), i859:0, i860:0) -> f9125_0_member_NULL(EOS(STATIC_9125), i506:0, i506:0, o657:0, o657:0, i859:0, i860:0) :|: i531:0 < i506:0
f9125_0_member_NULL(EOS(STATIC_9125), i506:0, i506:0, java.lang.Object(IntList(EOC, i531:0, o657:0)), java.lang.Object(IntList(EOC, i531:0, o657:0)), i859:0, i860:0) -> f9125_0_member_NULL(EOS(STATIC_9125), i506:0, i506:0, o657:0, o657:0, i859:0, i860:0) :|: i531:0 > i506:0
Filtered constant ground arguments:
   f9125_0_member_NULL(x1, x2, x3, x4, x5, x6, x7) -> f9125_0_member_NULL(x2, x3, x4, x5, x6, x7)
   EOS(x1) -> EOS
   IntList(x1, x2, x3) -> IntList(x2, x3)
Filtered duplicate arguments:
   f9125_0_member_NULL(x1, x2, x3, x4, x5, x6) -> f9125_0_member_NULL(x2, x4, x5, x6)
Filtered unneeded arguments:
   f9125_0_member_NULL(x1, x2, x3, x4) -> f9125_0_member_NULL(x1, x2)
Finished conversion. Obtained 2 rules.P rules:
f9125_0_member_NULL(i506:0, java.lang.Object(IntList(i531:0, o657:0))) -> f9125_0_member_NULL(i506:0, o657:0) :|: i531:0 < i506:0
f9125_0_member_NULL(i506:0, java.lang.Object(IntList(i531:0, o657:0))) -> f9125_0_member_NULL(i506:0, o657:0) :|: i531:0 > i506:0

----------------------------------------

(9)
Obligation:
Rules:
f9125_0_member_NULL(i506:0, java.lang.Object(IntList(i531:0, o657:0))) -> f9125_0_member_NULL(i506:0, o657:0) :|: i531:0 < i506:0
f9125_0_member_NULL(x, java.lang.Object(IntList(x1, x2))) -> f9125_0_member_NULL(x, x2) :|: x1 > x

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f9125_0_member_NULL(i506:0, java.lang.Object(IntList(i531:0, o657:0))) -> f9125_0_member_NULL(i506:0, o657:0) :|: i531:0 < i506:0
f9125_0_member_NULL(x, java.lang.Object(IntList(x1, x2))) -> f9125_0_member_NULL(x, x2) :|: x1 > x

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f9125_0_member_NULL(i506:0, java.lang.Object(IntList(i531:0, o657:0))) -> f9125_0_member_NULL(i506:0, o657:0) :|: i531:0 < i506:0
(2) f9125_0_member_NULL(x, java.lang.Object(IntList(x1, x2))) -> f9125_0_member_NULL(x, x2) :|: x1 > x

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f9125_0_member_NULL(i506:0, java.lang.Object(IntList(i531:0, o657:0))) -> f9125_0_member_NULL(i506:0, o657:0) :|: i531:0 < i506:0
(2) f9125_0_member_NULL(x, java.lang.Object(IntList(x1, x2))) -> f9125_0_member_NULL(x, x2) :|: x1 > x

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f9125_0_member_NULL(i506:0:0, java.lang.Object(IntList(i531:0:0, o657:0:0))) -> f9125_0_member_NULL(i506:0:0, o657:0:0) :|: i531:0:0 < i506:0:0
f9125_0_member_NULL(x:0, java.lang.Object(IntList(x1:0, x2:0))) -> f9125_0_member_NULL(x:0, x2:0) :|: x:0 < x1:0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f9125_0_member_NULL(INTEGER, VARIABLE)
java.lang.Object(VARIABLE)
IntList(INTEGER, VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(17)
Obligation:
Rules:
f9125_0_member_NULL(java.lang.Object(IntList(o657:0:0))) -> f9125_0_member_NULL(o657:0:0)

----------------------------------------

(18) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f9125_0_member_NULL(java.lang.Object(IntList(o657:0:0))) -> f9125_0_member_NULL(o657:0:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f9125_0_member_NULL(java.lang.Object(IntList(o657:0:0))) -> f9125_0_member_NULL(o657:0:0)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: IntList.createIntList()LIntList;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*java.lang.String: [count]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(23) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 39 IRulesP rules:
f3826_0_createIntList_LE(EOS(STATIC_3826(java.lang.Object(ARRAY(i4)))), i241, i241) -> f3837_0_createIntList_LE(EOS(STATIC_3837(java.lang.Object(ARRAY(i4)))), i241, i241) :|: TRUE
f3837_0_createIntList_LE(EOS(STATIC_3837(java.lang.Object(ARRAY(i4)))), i241, i241) -> f3852_0_createIntList_New(EOS(STATIC_3852(java.lang.Object(ARRAY(i4)))), i241) :|: i241 > 0
f3852_0_createIntList_New(EOS(STATIC_3852(java.lang.Object(ARRAY(i4)))), i241) -> f3869_0_createIntList_Duplicate(EOS(STATIC_3869(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f3869_0_createIntList_Duplicate(EOS(STATIC_3869(java.lang.Object(ARRAY(i4)))), i241) -> f3917_0_createIntList_InvokeMethod(EOS(STATIC_3917(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f3917_0_createIntList_InvokeMethod(EOS(STATIC_3917(java.lang.Object(ARRAY(i4)))), i241) -> f3955_0_random_FieldAccess(EOS(STATIC_3955(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f3955_0_random_FieldAccess(EOS(STATIC_3955(java.lang.Object(ARRAY(i4)))), i241) -> f4070_0_random_FieldAccess(EOS(STATIC_4070(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(ARRAY(i4))) :|: TRUE
f4070_0_random_FieldAccess(EOS(STATIC_4070(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(ARRAY(i4))) -> f4088_0_random_ArrayAccess(EOS(STATIC_4088(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(ARRAY(i4))) :|: TRUE
f4088_0_random_ArrayAccess(EOS(STATIC_4088(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(ARRAY(i4))) -> f4097_0_random_ArrayAccess(EOS(STATIC_4097(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(ARRAY(i4))) :|: TRUE
f4097_0_random_ArrayAccess(EOS(STATIC_4097(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(ARRAY(i4))) -> f4101_0_random_Store(EOS(STATIC_4101(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4101_0_random_Store(EOS(STATIC_4101(java.lang.Object(ARRAY(i4)))), i241, o241) -> f4105_0_random_FieldAccess(EOS(STATIC_4105(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4105_0_random_FieldAccess(EOS(STATIC_4105(java.lang.Object(ARRAY(i4)))), i241, o241) -> f4108_0_random_ConstantStackPush(EOS(STATIC_4108(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4108_0_random_ConstantStackPush(EOS(STATIC_4108(java.lang.Object(ARRAY(i4)))), i241, o241) -> f4121_0_random_IntArithmetic(EOS(STATIC_4121(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4121_0_random_IntArithmetic(EOS(STATIC_4121(java.lang.Object(ARRAY(i4)))), i241, o241) -> f4142_0_random_FieldAccess(EOS(STATIC_4142(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4142_0_random_FieldAccess(EOS(STATIC_4142(java.lang.Object(ARRAY(i4)))), i241, o241) -> f4158_0_random_Load(EOS(STATIC_4158(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4158_0_random_Load(EOS(STATIC_4158(java.lang.Object(ARRAY(i4)))), i241, o241) -> f4167_0_random_InvokeMethod(EOS(STATIC_4167(java.lang.Object(ARRAY(i4)))), i241, o241) :|: TRUE
f4167_0_random_InvokeMethod(EOS(STATIC_4167(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o246sub)) -> f4172_0_random_InvokeMethod(EOS(STATIC_4172(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o246sub)) :|: TRUE
f4172_0_random_InvokeMethod(EOS(STATIC_4172(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o249sub)) -> f4185_0_random_InvokeMethod(EOS(STATIC_4185(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o249sub)) :|: TRUE
f4185_0_random_InvokeMethod(EOS(STATIC_4185(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o249sub)) -> f4195_0_length_Load(EOS(STATIC_4195(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o249sub)) :|: TRUE
f4195_0_length_Load(EOS(STATIC_4195(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o249sub)) -> f4224_0_length_FieldAccess(EOS(STATIC_4224(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(o249sub)) :|: TRUE
f4224_0_length_FieldAccess(EOS(STATIC_4224(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(java.lang.String(EOC, i291))) -> f4230_0_length_FieldAccess(EOS(STATIC_4230(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(java.lang.String(EOC, i291))) :|: TRUE
f4230_0_length_FieldAccess(EOS(STATIC_4230(java.lang.Object(ARRAY(i4)))), i241, java.lang.Object(java.lang.String(EOC, i291))) -> f4235_0_length_Return(EOS(STATIC_4235(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4235_0_length_Return(EOS(STATIC_4235(java.lang.Object(ARRAY(i4)))), i241) -> f4245_0_random_Return(EOS(STATIC_4245(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4245_0_random_Return(EOS(STATIC_4245(java.lang.Object(ARRAY(i4)))), i241) -> f4257_0_createIntList_Load(EOS(STATIC_4257(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4257_0_createIntList_Load(EOS(STATIC_4257(java.lang.Object(ARRAY(i4)))), i241) -> f4264_0_createIntList_InvokeMethod(EOS(STATIC_4264(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4264_0_createIntList_InvokeMethod(EOS(STATIC_4264(java.lang.Object(ARRAY(i4)))), i241) -> f4277_0__init__Load(EOS(STATIC_4277(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4277_0__init__Load(EOS(STATIC_4277(java.lang.Object(ARRAY(i4)))), i241) -> f4299_0__init__InvokeMethod(EOS(STATIC_4299(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4299_0__init__InvokeMethod(EOS(STATIC_4299(java.lang.Object(ARRAY(i4)))), i241) -> f4311_0__init__Load(EOS(STATIC_4311(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4311_0__init__Load(EOS(STATIC_4311(java.lang.Object(ARRAY(i4)))), i241) -> f4328_0__init__Load(EOS(STATIC_4328(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4328_0__init__Load(EOS(STATIC_4328(java.lang.Object(ARRAY(i4)))), i241) -> f4362_0__init__FieldAccess(EOS(STATIC_4362(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4362_0__init__FieldAccess(EOS(STATIC_4362(java.lang.Object(ARRAY(i4)))), i241) -> f4371_0__init__Load(EOS(STATIC_4371(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4371_0__init__Load(EOS(STATIC_4371(java.lang.Object(ARRAY(i4)))), i241) -> f4387_0__init__Load(EOS(STATIC_4387(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4387_0__init__Load(EOS(STATIC_4387(java.lang.Object(ARRAY(i4)))), i241) -> f4404_0__init__FieldAccess(EOS(STATIC_4404(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4404_0__init__FieldAccess(EOS(STATIC_4404(java.lang.Object(ARRAY(i4)))), i241) -> f4430_0__init__Return(EOS(STATIC_4430(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4430_0__init__Return(EOS(STATIC_4430(java.lang.Object(ARRAY(i4)))), i241) -> f4442_0_createIntList_Store(EOS(STATIC_4442(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4442_0_createIntList_Store(EOS(STATIC_4442(java.lang.Object(ARRAY(i4)))), i241) -> f4448_0_createIntList_Inc(EOS(STATIC_4448(java.lang.Object(ARRAY(i4)))), i241) :|: TRUE
f4448_0_createIntList_Inc(EOS(STATIC_4448(java.lang.Object(ARRAY(i4)))), i241) -> f4471_0_createIntList_JMP(EOS(STATIC_4471(java.lang.Object(ARRAY(i4)))), i241 + -1) :|: TRUE
f4471_0_createIntList_JMP(EOS(STATIC_4471(java.lang.Object(ARRAY(i4)))), i308) -> f4671_0_createIntList_Load(EOS(STATIC_4671(java.lang.Object(ARRAY(i4)))), i308) :|: TRUE
f4671_0_createIntList_Load(EOS(STATIC_4671(java.lang.Object(ARRAY(i4)))), i308) -> f3685_0_createIntList_Load(EOS(STATIC_3685(java.lang.Object(ARRAY(i4)))), i308) :|: TRUE
f3685_0_createIntList_Load(EOS(STATIC_3685(java.lang.Object(ARRAY(i4)))), i216) -> f3826_0_createIntList_LE(EOS(STATIC_3826(java.lang.Object(ARRAY(i4)))), i216, i216) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f3826_0_createIntList_LE(EOS(STATIC_3826(java.lang.Object(ARRAY(i4:0)))), i241:0, i241:0) -> f3826_0_createIntList_LE(EOS(STATIC_3826(java.lang.Object(ARRAY(i4:0)))), i241:0 - 1, i241:0 - 1) :|: i241:0 > 0
Filtered duplicate arguments:
   f3826_0_createIntList_LE(x1, x2, x3) -> f3826_0_createIntList_LE(x1, x3)
Filtered unneeded arguments:
   f3826_0_createIntList_LE(x1, x2) -> f3826_0_createIntList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f3826_0_createIntList_LE(i241:0) -> f3826_0_createIntList_LE(i241:0 - 1) :|: i241:0 > 0

----------------------------------------

(24)
Obligation:
Rules:
f3826_0_createIntList_LE(i241:0) -> f3826_0_createIntList_LE(i241:0 - 1) :|: i241:0 > 0

----------------------------------------

(25) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(26)
Obligation:
Rules:
f3826_0_createIntList_LE(i241:0) -> f3826_0_createIntList_LE(arith) :|: i241:0 > 0 && arith = i241:0 - 1

----------------------------------------

(27) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3826_0_createIntList_LE(i241:0) -> f3826_0_createIntList_LE(arith) :|: i241:0 > 0 && arith = i241:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(28)
Obligation:

Termination digraph:
Nodes:
(1) f3826_0_createIntList_LE(i241:0) -> f3826_0_createIntList_LE(arith) :|: i241:0 > 0 && arith = i241:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(29) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(30)
Obligation:
Rules:
f3826_0_createIntList_LE(i241:0:0) -> f3826_0_createIntList_LE(i241:0:0 - 1) :|: i241:0:0 > 0

----------------------------------------

(31) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3826_0_createIntList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(32)
Obligation:
Rules:
f3826_0_createIntList_LE(i241:0:0) -> f3826_0_createIntList_LE(c) :|: c = i241:0:0 - 1 && i241:0:0 > 0

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f3826_0_createIntList_LE(x)] = x

The following rules are decreasing:
f3826_0_createIntList_LE(i241:0:0) -> f3826_0_createIntList_LE(c) :|: c = i241:0:0 - 1 && i241:0:0 > 0
The following rules are bounded:
f3826_0_createIntList_LE(i241:0:0) -> f3826_0_createIntList_LE(c) :|: c = i241:0:0 - 1 && i241:0:0 > 0

----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: SortCount.main([Ljava/lang/String;)V
SCC calls the following helper methods: IntList.member(ILIntList;)Z
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*IntList: [value, next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(36) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 68 IRulesP rules:
f11235_0_max_NULL(EOS(STATIC_11235), i810, o964, o965, java.lang.Object(o978sub), i809, java.lang.Object(o978sub)) -> f11239_0_max_NULL(EOS(STATIC_11239), i810, o964, o965, java.lang.Object(o978sub), i809, java.lang.Object(o978sub)) :|: TRUE
f11235_0_max_NULL(EOS(STATIC_11235), i810, o964, o965, NULL, i809, NULL) -> f11240_0_max_NULL(EOS(STATIC_11240), i810, o964, o965, NULL, i809, NULL) :|: TRUE
f11239_0_max_NULL(EOS(STATIC_11239), i810, o964, o965, java.lang.Object(o978sub), i809, java.lang.Object(o978sub)) -> f11242_0_max_Load(EOS(STATIC_11242), i810, o964, o965, java.lang.Object(o978sub), i809) :|: TRUE
f11242_0_max_Load(EOS(STATIC_11242), i810, o964, o965, java.lang.Object(o978sub), i809) -> f11246_0_max_FieldAccess(EOS(STATIC_11246), i810, o964, o965, java.lang.Object(o978sub), i809, java.lang.Object(o978sub)) :|: TRUE
f11246_0_max_FieldAccess(EOS(STATIC_11246), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, java.lang.Object(IntList(EOC, i821, o980))) -> f11254_0_max_FieldAccess(EOS(STATIC_11254), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, java.lang.Object(IntList(EOC, i821, o980))) :|: TRUE
f11254_0_max_FieldAccess(EOS(STATIC_11254), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, java.lang.Object(IntList(EOC, i821, o980))) -> f11258_0_max_Load(EOS(STATIC_11258), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821) :|: TRUE
f11258_0_max_Load(EOS(STATIC_11258), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821) -> f11261_0_max_LE(EOS(STATIC_11261), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) :|: TRUE
f11261_0_max_LE(EOS(STATIC_11261), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) -> f11281_0_max_LE(EOS(STATIC_11281), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) :|: i821 <= i809
f11261_0_max_LE(EOS(STATIC_11261), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) -> f11282_0_max_LE(EOS(STATIC_11282), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) :|: i821 > i809
f11281_0_max_LE(EOS(STATIC_11281), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) -> f11288_0_max_Load(EOS(STATIC_11288), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809) :|: i821 <= i809
f11288_0_max_Load(EOS(STATIC_11288), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809) -> f11292_0_max_FieldAccess(EOS(STATIC_11292), i810, o964, o965, i809, java.lang.Object(IntList(EOC, i821, o980))) :|: TRUE
f11292_0_max_FieldAccess(EOS(STATIC_11292), i810, o964, o965, i809, java.lang.Object(IntList(EOC, i821, o980))) -> f11298_0_max_Store(EOS(STATIC_11298), i810, o964, o965, i809, o980) :|: TRUE
f11298_0_max_Store(EOS(STATIC_11298), i810, o964, o965, i809, o980) -> f11305_0_max_JMP(EOS(STATIC_11305), i810, o964, o965, o980, i809) :|: TRUE
f11305_0_max_JMP(EOS(STATIC_11305), i810, o964, o965, o980, i809) -> f11352_0_max_Load(EOS(STATIC_11352), i810, o964, o965, o980, i809) :|: TRUE
f11352_0_max_Load(EOS(STATIC_11352), i810, o964, o965, o980, i809) -> f11225_0_max_Load(EOS(STATIC_11225), i810, o964, o965, o980, i809) :|: TRUE
f11225_0_max_Load(EOS(STATIC_11225), i810, o964, o965, o963, i809) -> f11235_0_max_NULL(EOS(STATIC_11235), i810, o964, o965, o963, i809, o963) :|: TRUE
f11282_0_max_LE(EOS(STATIC_11282), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i809, i821, i809) -> f11289_0_max_Load(EOS(STATIC_11289), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980))) :|: i821 > i809
f11289_0_max_Load(EOS(STATIC_11289), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980))) -> f11293_0_max_FieldAccess(EOS(STATIC_11293), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), java.lang.Object(IntList(EOC, i821, o980))) :|: TRUE
f11293_0_max_FieldAccess(EOS(STATIC_11293), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), java.lang.Object(IntList(EOC, i821, o980))) -> f11300_0_max_Store(EOS(STATIC_11300), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i821) :|: TRUE
f11300_0_max_Store(EOS(STATIC_11300), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i821) -> f11312_0_max_Load(EOS(STATIC_11312), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i821) :|: TRUE
f11312_0_max_Load(EOS(STATIC_11312), i810, o964, o965, java.lang.Object(IntList(EOC, i821, o980)), i821) -> f11353_0_max_FieldAccess(EOS(STATIC_11353), i810, o964, o965, i821, java.lang.Object(IntList(EOC, i821, o980))) :|: TRUE
f11353_0_max_FieldAccess(EOS(STATIC_11353), i810, o964, o965, i821, java.lang.Object(IntList(EOC, i821, o980))) -> f11359_0_max_Store(EOS(STATIC_11359), i810, o964, o965, i821, o980) :|: TRUE
f11359_0_max_Store(EOS(STATIC_11359), i810, o964, o965, i821, o980) -> f11362_0_max_JMP(EOS(STATIC_11362), i810, o964, o965, o980, i821) :|: TRUE
f11362_0_max_JMP(EOS(STATIC_11362), i810, o964, o965, o980, i821) -> f11418_0_max_Load(EOS(STATIC_11418), i810, o964, o965, o980, i821) :|: TRUE
f11418_0_max_Load(EOS(STATIC_11418), i810, o964, o965, o980, i821) -> f11225_0_max_Load(EOS(STATIC_11225), i810, o964, o965, o980, i821) :|: TRUE
f11240_0_max_NULL(EOS(STATIC_11240), i810, o964, o965, NULL, i809, NULL) -> f11244_0_max_Load(EOS(STATIC_11244), i810, o964, o965, i809) :|: TRUE
f11244_0_max_Load(EOS(STATIC_11244), i810, o964, o965, i809) -> f11247_0_max_Return(EOS(STATIC_11247), i810, o964, o965, i809) :|: TRUE
f11247_0_max_Return(EOS(STATIC_11247), i810, o964, o965, i809) -> f11256_0_sort_Load(EOS(STATIC_11256), i810, o964, o965, i809) :|: TRUE
f11256_0_sort_Load(EOS(STATIC_11256), i810, o964, o965, i809) -> f11260_0_sort_LT(EOS(STATIC_11260), i810, o964, o965, i809, i810) :|: TRUE
f11260_0_sort_LT(EOS(STATIC_11260), i810, o964, o965, i809, i810) -> f11275_0_sort_LT(EOS(STATIC_11275), i810, o964, o965, i809, i810) :|: i809 >= i810
f11275_0_sort_LT(EOS(STATIC_11275), i810, o964, o965, i809, i810) -> f11284_0_sort_Load(EOS(STATIC_11284), i810, o964, o965) :|: i809 >= i810
f11284_0_sort_Load(EOS(STATIC_11284), i810, o964, o965) -> f11291_0_sort_Load(EOS(STATIC_11291), i810, o964, o965, i810) :|: TRUE
f11291_0_sort_Load(EOS(STATIC_11291), i810, o964, o965, i810) -> f11296_0_sort_InvokeMethod(EOS(STATIC_11296), i810, o964, o965, i810, o964) :|: TRUE
f11296_0_sort_InvokeMethod(EOS(STATIC_11296), i810, o964, o965, i810, o964) -> f11303_0_member_Load(EOS(STATIC_11303), i810, o964, i810, o964) :|: i808 >= 1
f11296_0_sort_InvokeMethod(EOS(STATIC_11296), i810, o964, o965, i810, o964) -> f11303_1_member_Load(EOS(STATIC_11303), i810, o964, o965, i810, o964) :|: i808 >= 1
f11303_0_member_Load(EOS(STATIC_11303), i810, o964, i810, o964) -> f11818_0_member_Load(EOS(STATIC_11818), i810, o964, i810, o964) :|: TRUE
f11420_0_member_Return(EOS(STATIC_11420), i832, o1002, o965, matching1) -> f11422_0_sort_EQ(EOS(STATIC_11422), i832, o1002, o965, 0) :|: TRUE && matching1 = 0
f11422_0_sort_EQ(EOS(STATIC_11422), i832, o1002, o965, matching1) -> f11426_0_sort_Inc(EOS(STATIC_11426), i832, o1002, o965) :|: TRUE && matching1 = 0
f11426_0_sort_Inc(EOS(STATIC_11426), i832, o1002, o965) -> f11429_0_sort_JMP(EOS(STATIC_11429), i832 + 1, o1002, o965) :|: TRUE
f11429_0_sort_JMP(EOS(STATIC_11429), i842, o1002, o965) -> f11442_0_sort_Load(EOS(STATIC_11442), i842, o1002, o965) :|: TRUE
f11442_0_sort_Load(EOS(STATIC_11442), i842, o1002, o965) -> f11448_0_sort_InvokeMethod(EOS(STATIC_11448), i842, o1002, o965, o1002) :|: TRUE
f11448_0_sort_InvokeMethod(EOS(STATIC_11448), i842, o1002, o965, o1002) -> f11452_0_max_ConstantStackPush(EOS(STATIC_11452), i842, o1002, o965, o1002) :|: TRUE
f11452_0_max_ConstantStackPush(EOS(STATIC_11452), i842, o1002, o965, o1002) -> f11490_0_max_Store(EOS(STATIC_11490), i842, o1002, o965, o1002, 0) :|: TRUE
f11490_0_max_Store(EOS(STATIC_11490), i842, o1002, o965, o1002, matching1) -> f11492_0_max_Load(EOS(STATIC_11492), i842, o1002, o965, o1002, 0) :|: TRUE && matching1 = 0
f11492_0_max_Load(EOS(STATIC_11492), i842, o1002, o965, o1002, matching1) -> f11514_0_max_NULL(EOS(STATIC_11514), i842, o1002, o965, o1002, 0, o1002) :|: TRUE && matching1 = 0
f11514_0_max_NULL(EOS(STATIC_11514), i842, o1002, o965, o1002, matching1, o1002) -> f11235_0_max_NULL(EOS(STATIC_11235), i842, o1002, o965, o1002, 0, o1002) :|: TRUE && matching1 = 0
f11421_0_member_Return(EOS(STATIC_11421), i838, o1007, o965, matching1) -> f11425_0_sort_EQ(EOS(STATIC_11425), i838, o1007, o965, 1) :|: TRUE && matching1 = 1
f11425_0_sort_EQ(EOS(STATIC_11425), i838, o1007, o965, matching1) -> f11427_0_sort_New(EOS(STATIC_11427), i838, o1007, o965) :|: 1 > 0 && matching1 = 1
f11427_0_sort_New(EOS(STATIC_11427), i838, o1007, o965) -> f11432_0_sort_Duplicate(EOS(STATIC_11432), i838, o1007, o965, java.lang.Object(IntList(EOC, 0, NULL))) :|: TRUE
f11432_0_sort_Duplicate(EOS(STATIC_11432), i838, o1007, o965, java.lang.Object(IntList(EOC, matching1, NULL))) -> f11444_0_sort_Load(EOS(STATIC_11444), i838, o1007, o965, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL))) :|: TRUE && matching1 = 0
f11444_0_sort_Load(EOS(STATIC_11444), i838, o1007, o965, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL))) -> f11450_0_sort_Load(EOS(STATIC_11450), i838, o1007, o965, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), i838) :|: TRUE && matching1 = 0 && matching2 = 0
f11450_0_sort_Load(EOS(STATIC_11450), i838, o1007, o965, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), i838) -> f11454_0_sort_InvokeMethod(EOS(STATIC_11454), i838, o1007, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), i838, o965) :|: TRUE && matching1 = 0 && matching2 = 0
f11454_0_sort_InvokeMethod(EOS(STATIC_11454), i838, o1007, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), i838, o965) -> f11489_0__init__Load(EOS(STATIC_11489), i838, o1007, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), i838, o965) :|: TRUE && matching1 = 0 && matching2 = 0
f11489_0__init__Load(EOS(STATIC_11489), i838, o1007, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), i838, o965) -> f11494_0__init__InvokeMethod(EOS(STATIC_11494), i838, o1007, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), i838, o965, java.lang.Object(IntList(EOC, 0, NULL))) :|: TRUE && matching1 = 0 && matching2 = 0
f11494_0__init__InvokeMethod(EOS(STATIC_11494), i838, o1007, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), i838, o965, java.lang.Object(IntList(EOC, matching3, NULL))) -> f11515_0__init__Load(EOS(STATIC_11515), i838, o1007, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), i838, o965) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0
f11515_0__init__Load(EOS(STATIC_11515), i838, o1007, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), i838, o965) -> f11517_0__init__Load(EOS(STATIC_11517), i838, o1007, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), i838, o965, java.lang.Object(IntList(EOC, 0, NULL))) :|: TRUE && matching1 = 0 && matching2 = 0
f11517_0__init__Load(EOS(STATIC_11517), i838, o1007, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), i838, o965, java.lang.Object(IntList(EOC, matching3, NULL))) -> f11519_0__init__FieldAccess(EOS(STATIC_11519), i838, o1007, java.lang.Object(IntList(EOC, 0, NULL)), java.lang.Object(IntList(EOC, 0, NULL)), o965, java.lang.Object(IntList(EOC, 0, NULL)), i838) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0
f11519_0__init__FieldAccess(EOS(STATIC_11519), i838, o1007, java.lang.Object(IntList(EOC, matching1, NULL)), java.lang.Object(IntList(EOC, matching2, NULL)), o965, java.lang.Object(IntList(EOC, matching3, NULL)), i838) -> f11524_0__init__Load(EOS(STATIC_11524), i838, o1007, java.lang.Object(IntList(EOC, i838, NULL)), java.lang.Object(IntList(EOC, i838, NULL)), o965) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0
f11524_0__init__Load(EOS(STATIC_11524), i838, o1007, java.lang.Object(IntList(EOC, i838, NULL)), java.lang.Object(IntList(EOC, i838, NULL)), o965) -> f11526_0__init__Load(EOS(STATIC_11526), i838, o1007, java.lang.Object(IntList(EOC, i838, NULL)), o965, java.lang.Object(IntList(EOC, i838, NULL))) :|: TRUE
f11526_0__init__Load(EOS(STATIC_11526), i838, o1007, java.lang.Object(IntList(EOC, i838, NULL)), o965, java.lang.Object(IntList(EOC, i838, NULL))) -> f11528_0__init__FieldAccess(EOS(STATIC_11528), i838, o1007, java.lang.Object(IntList(EOC, i838, NULL)), java.lang.Object(IntList(EOC, i838, NULL)), o965) :|: TRUE
f11528_0__init__FieldAccess(EOS(STATIC_11528), i838, o1007, java.lang.Object(IntList(EOC, i838, NULL)), java.lang.Object(IntList(EOC, i838, NULL)), o965) -> f11529_0__init__Return(EOS(STATIC_11529), i838, o1007, java.lang.Object(IntList(EOC, i838, o965))) :|: TRUE
f11529_0__init__Return(EOS(STATIC_11529), i838, o1007, java.lang.Object(IntList(EOC, i838, o965))) -> f11530_0_sort_Store(EOS(STATIC_11530), i838, o1007, java.lang.Object(IntList(EOC, i838, o965))) :|: TRUE
f11530_0_sort_Store(EOS(STATIC_11530), i838, o1007, java.lang.Object(IntList(EOC, i838, o965))) -> f11531_0_sort_Inc(EOS(STATIC_11531), i838, o1007, java.lang.Object(IntList(EOC, i838, o965))) :|: TRUE
f11531_0_sort_Inc(EOS(STATIC_11531), i838, o1007, java.lang.Object(IntList(EOC, i838, o965))) -> f11532_0_sort_JMP(EOS(STATIC_11532), i838 + 1, o1007, java.lang.Object(IntList(EOC, i838, o965))) :|: TRUE
f11532_0_sort_JMP(EOS(STATIC_11532), i854, o1007, java.lang.Object(IntList(EOC, i838, o965))) -> f11537_0_sort_Load(EOS(STATIC_11537), i854, o1007, java.lang.Object(IntList(EOC, i838, o965))) :|: TRUE
f11537_0_sort_Load(EOS(STATIC_11537), i854, o1007, java.lang.Object(IntList(EOC, i838, o965))) -> f11442_0_sort_Load(EOS(STATIC_11442), i854, o1007, java.lang.Object(IntList(EOC, i838, o965))) :|: TRUE
f11303_1_member_Load(EOS(STATIC_11303), i832, o1002, o965, i832, o1002) -> f11420_0_member_Return(EOS(STATIC_11420), i832, o1002, o965, 0) :|: TRUE
f11303_1_member_Load(EOS(STATIC_11303), i838, o1007, o965, i838, o1007) -> f11421_0_member_Return(EOS(STATIC_11421), i838, o1007, o965, 1) :|: TRUE
Combined rules. Obtained 5 IRulesP rules:
f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, java.lang.Object(IntList(EOC, i821:0, o980:0)), i809:0, java.lang.Object(IntList(EOC, i821:0, o980:0))) -> f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, o980:0, i821:0, o980:0) :|: i821:0 > i809:0
f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, NULL, i809:0, NULL) -> f11235_0_max_NULL(EOS(STATIC_11235), i810:0 + 1, o964:0, o965:0, o964:0, 0, o964:0) :|: i810:0 <= i809:0 && i808:0 > 0
f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, NULL, i809:0, NULL) -> f11235_0_max_NULL(EOS(STATIC_11235), i810:0 + 1, o964:0, java.lang.Object(IntList(EOC, i810:0, o965:0)), o964:0, 0, o964:0) :|: i810:0 <= i809:0 && i808:0 > 0
f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, java.lang.Object(IntList(EOC, i821:0, o980:0)), i809:0, java.lang.Object(IntList(EOC, i821:0, o980:0))) -> f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, o980:0, i809:0, o980:0) :|: i821:0 <= i809:0
Removed following non-SCC rules:
f11235_0_max_NULL(EOS(STATIC_11235), i810:0, o964:0, o965:0, NULL, i809:0, NULL) -> f11818_0_member_Load(EOS(STATIC_11818), i810:0, o964:0, i810:0, o964:0) :|: i810:0 <= i809:0 && i808:0 > 0
Filtered constant ground arguments:
   f11235_0_max_NULL(x1, x2, x3, x4, x5, x6, x7) -> f11235_0_max_NULL(x2, x3, x4, x5, x6, x7)
   EOS(x1) -> EOS
   IntList(x1, x2, x3) -> IntList(x2, x3)
Filtered duplicate arguments:
   f11235_0_max_NULL(x1, x2, x3, x4, x5, x6) -> f11235_0_max_NULL(x1, x2, x3, x5, x6)
Filtered unneeded arguments:
   f11235_0_max_NULL(x1, x2, x3, x4, x5) -> f11235_0_max_NULL(x1, x2, x4, x5)
Finished conversion. Obtained 3 rules.P rules:
f11235_0_max_NULL(i810:0, o964:0, i809:0, java.lang.Object(IntList(i821:0, o980:0))) -> f11235_0_max_NULL(i810:0, o964:0, i821:0, o980:0) :|: i821:0 > i809:0
f11235_0_max_NULL(i810:0, o964:0, i809:0, NULL) -> f11235_0_max_NULL(i810:0 + 1, o964:0, 0, o964:0) :|: i810:0 <= i809:0 && i808:0 > 0
f11235_0_max_NULL(i810:0, o964:0, i809:0, java.lang.Object(IntList(i821:0, o980:0))) -> f11235_0_max_NULL(i810:0, o964:0, i809:0, o980:0) :|: i821:0 <= i809:0

----------------------------------------

(37)
Obligation:
Rules:
f11235_0_max_NULL(i810:0, o964:0, i809:0, java.lang.Object(IntList(i821:0, o980:0))) -> f11235_0_max_NULL(i810:0, o964:0, i821:0, o980:0) :|: i821:0 > i809:0
f11235_0_max_NULL(x, x1, x2, NULL) -> f11235_0_max_NULL(x + 1, x1, 0, x1) :|: x <= x2 && x3 > 0
f11235_0_max_NULL(x4, x5, x6, java.lang.Object(IntList(x7, x8))) -> f11235_0_max_NULL(x4, x5, x6, x8) :|: x7 <= x6

----------------------------------------

(38) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(39)
Obligation:
Rules:
f11235_0_max_NULL(i810:0, o964:0, i809:0, java.lang.Object(IntList(i821:0, o980:0))) -> f11235_0_max_NULL(i810:0, o964:0, i821:0, o980:0) :|: i821:0 > i809:0
f11235_0_max_NULL(x, x1, x2, NULL) -> f11235_0_max_NULL(arith, x1, 0, x1) :|: x <= x2 && x3 > 0 && arith = x + 1
f11235_0_max_NULL(x4, x5, x6, java.lang.Object(IntList(x7, x8))) -> f11235_0_max_NULL(x4, x5, x6, x8) :|: x7 <= x6

----------------------------------------

(40) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11235_0_max_NULL(i810:0, o964:0, i809:0, java.lang.Object(IntList(i821:0, o980:0))) -> f11235_0_max_NULL(i810:0, o964:0, i821:0, o980:0) :|: i821:0 > i809:0
(2) f11235_0_max_NULL(x, x1, x2, NULL) -> f11235_0_max_NULL(arith, x1, 0, x1) :|: x <= x2 && x3 > 0 && arith = x + 1
(3) f11235_0_max_NULL(x4, x5, x6, java.lang.Object(IntList(x7, x8))) -> f11235_0_max_NULL(x4, x5, x6, x8) :|: x7 <= x6

Arcs:
(1) -> (1), (2), (3)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)

This digraph is fully evaluated!
----------------------------------------

(41)
Obligation:

Termination digraph:
Nodes:
(1) f11235_0_max_NULL(i810:0, o964:0, i809:0, java.lang.Object(IntList(i821:0, o980:0))) -> f11235_0_max_NULL(i810:0, o964:0, i821:0, o980:0) :|: i821:0 > i809:0
(2) f11235_0_max_NULL(x, x1, x2, NULL) -> f11235_0_max_NULL(arith, x1, 0, x1) :|: x <= x2 && x3 > 0 && arith = x + 1
(3) f11235_0_max_NULL(x4, x5, x6, java.lang.Object(IntList(x7, x8))) -> f11235_0_max_NULL(x4, x5, x6, x8) :|: x7 <= x6

Arcs:
(1) -> (1), (2), (3)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)

This digraph is fully evaluated!

----------------------------------------

(42) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(43)
Obligation:
Rules:
f11235_0_max_NULL(x4:0, x5:0, x6:0, java.lang.Object(IntList(x7:0, x8:0))) -> f11235_0_max_NULL(x4:0, x5:0, x6:0, x8:0) :|: x7:0 <= x6:0
f11235_0_max_NULL(i810:0:0, o964:0:0, i809:0:0, java.lang.Object(IntList(i821:0:0, o980:0:0))) -> f11235_0_max_NULL(i810:0:0, o964:0:0, i821:0:0, o980:0:0) :|: i821:0:0 > i809:0:0
f11235_0_max_NULL(x:0, x1:0, x2:0, NULL) -> f11235_0_max_NULL(x:0 + 1, x1:0, 0, x1:0) :|: x:0 <= x2:0 && x3:0 > 0

----------------------------------------

(44) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(45)
Obligation:
Rules:
f11235_0_max_NULL(x, x1, x2, java.lang.Object(IntList(x3, java.lang.Object(IntList(x8, x9))))) -> f11235_0_max_NULL(x, x1, x2, x9) :|: TRUE && x3 + -1 * x2 <= 0 && x8 + -1 * x2 <= 0
f11235_0_max_NULL(i810:0:0, o964:0:0, i809:0:0, java.lang.Object(IntList(i821:0:0, o980:0:0))) -> f11235_0_max_NULL(i810:0:0, o964:0:0, i821:0:0, o980:0:0) :|: i821:0:0 > i809:0:0
f11235_0_max_NULL(x10, x11, x12, java.lang.Object(IntList(x13, java.lang.Object(IntList(x18, x19))))) -> f11235_0_max_NULL(x10, x11, x18, x19) :|: TRUE && x13 + -1 * x12 <= 0 && x18 + -1 * x12 >= 1
f11235_0_max_NULL(x:0, x1:0, x2:0, NULL) -> f11235_0_max_NULL(x:0 + 1, x1:0, 0, x1:0) :|: x:0 <= x2:0 && x3:0 > 0
f11235_0_max_NULL(x20, x21, x22, java.lang.Object(IntList(x23, NULL))) -> f11235_0_max_NULL(x20 + 1, x21, 0, x21) :|: TRUE && x23 + -1 * x22 <= 0 && x20 + -1 * x22 <= 0 && x28 >= 1

----------------------------------------

(46) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11235_0_max_NULL(x, x1, x2, java.lang.Object(IntList(x3, java.lang.Object(IntList(x8, x9))))) -> f11235_0_max_NULL(x, x1, x2, x9) :|: TRUE && x3 + -1 * x2 <= 0 && x8 + -1 * x2 <= 0
(2) f11235_0_max_NULL(i810:0:0, o964:0:0, i809:0:0, java.lang.Object(IntList(i821:0:0, o980:0:0))) -> f11235_0_max_NULL(i810:0:0, o964:0:0, i821:0:0, o980:0:0) :|: i821:0:0 > i809:0:0
(3) f11235_0_max_NULL(x10, x11, x12, java.lang.Object(IntList(x13, java.lang.Object(IntList(x18, x19))))) -> f11235_0_max_NULL(x10, x11, x18, x19) :|: TRUE && x13 + -1 * x12 <= 0 && x18 + -1 * x12 >= 1
(4) f11235_0_max_NULL(x:0, x1:0, x2:0, NULL) -> f11235_0_max_NULL(x:0 + 1, x1:0, 0, x1:0) :|: x:0 <= x2:0 && x3:0 > 0
(5) f11235_0_max_NULL(x20, x21, x22, java.lang.Object(IntList(x23, NULL))) -> f11235_0_max_NULL(x20 + 1, x21, 0, x21) :|: TRUE && x23 + -1 * x22 <= 0 && x20 + -1 * x22 <= 0 && x28 >= 1

Arcs:
(1) -> (1), (2), (3), (4), (5)
(2) -> (1), (2), (3), (4), (5)
(3) -> (1), (2), (3), (4), (5)
(4) -> (1), (2), (3), (4), (5)
(5) -> (1), (2), (3), (4), (5)

This digraph is fully evaluated!
----------------------------------------

(47)
Obligation:

Termination digraph:
Nodes:
(1) f11235_0_max_NULL(x, x1, x2, java.lang.Object(IntList(x3, java.lang.Object(IntList(x8, x9))))) -> f11235_0_max_NULL(x, x1, x2, x9) :|: TRUE && x3 + -1 * x2 <= 0 && x8 + -1 * x2 <= 0
(2) f11235_0_max_NULL(i810:0:0, o964:0:0, i809:0:0, java.lang.Object(IntList(i821:0:0, o980:0:0))) -> f11235_0_max_NULL(i810:0:0, o964:0:0, i821:0:0, o980:0:0) :|: i821:0:0 > i809:0:0
(3) f11235_0_max_NULL(x10, x11, x12, java.lang.Object(IntList(x13, java.lang.Object(IntList(x18, x19))))) -> f11235_0_max_NULL(x10, x11, x18, x19) :|: TRUE && x13 + -1 * x12 <= 0 && x18 + -1 * x12 >= 1
(4) f11235_0_max_NULL(x:0, x1:0, x2:0, NULL) -> f11235_0_max_NULL(x:0 + 1, x1:0, 0, x1:0) :|: x:0 <= x2:0 && x3:0 > 0
(5) f11235_0_max_NULL(x20, x21, x22, java.lang.Object(IntList(x23, NULL))) -> f11235_0_max_NULL(x20 + 1, x21, 0, x21) :|: TRUE && x23 + -1 * x22 <= 0 && x20 + -1 * x22 <= 0 && x28 >= 1

Arcs:
(1) -> (1), (2), (3), (4), (5)
(2) -> (1), (2), (3), (4), (5)
(3) -> (1), (2), (3), (4), (5)
(4) -> (1), (2), (3), (4), (5)
(5) -> (1), (2), (3), (4), (5)

This digraph is fully evaluated!

----------------------------------------

(48) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(49)
Obligation:
Rules:
f11235_0_max_NULL(x20:0, x21:0, x22:0, java.lang.Object(IntList(x23:0, NULL))) -> f11235_0_max_NULL(x20:0 + 1, x21:0, 0, x21:0) :|: x20:0 + -1 * x22:0 <= 0 && x23:0 + -1 * x22:0 <= 0 && x28:0 > 0
f11235_0_max_NULL(x:0, x1:0, x2:0, java.lang.Object(IntList(x3:0, java.lang.Object(IntList(x8:0, x9:0))))) -> f11235_0_max_NULL(x:0, x1:0, x2:0, x9:0) :|: x8:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0
f11235_0_max_NULL(x10:0, x11:0, x12:0, java.lang.Object(IntList(x13:0, java.lang.Object(IntList(x18:0, x19:0))))) -> f11235_0_max_NULL(x10:0, x11:0, x18:0, x19:0) :|: x18:0 + -1 * x12:0 >= 1 && x13:0 + -1 * x12:0 <= 0
f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, NULL) -> f11235_0_max_NULL(x:0:0 + 1, x1:0:0, 0, x1:0:0) :|: x:0:0 <= x2:0:0 && x3:0:0 > 0
f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i809:0:0:0, java.lang.Object(IntList(i821:0:0:0, o980:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i821:0:0:0, o980:0:0:0) :|: i821:0:0:0 > i809:0:0:0

----------------------------------------

(50) IRSwTChainingProof (EQUIVALENT)
Chaining!
----------------------------------------

(51)
Obligation:
Rules:
f11235_0_max_NULL(x, java.lang.Object(IntList(x8, NULL)), x2, java.lang.Object(IntList(x3, NULL))) -> f11235_0_max_NULL(x + 2, java.lang.Object(IntList(x8, NULL)), 0, java.lang.Object(IntList(x8, NULL))) :|: TRUE && x + -1 * x2 <= 0 && x3 + -1 * x2 <= 0 && x4 >= 1 && x <= -1 && x8 <= 0 && x9 >= 1
f11235_0_max_NULL(x:0, x1:0, x2:0, java.lang.Object(IntList(x3:0, java.lang.Object(IntList(x8:0, x9:0))))) -> f11235_0_max_NULL(x:0, x1:0, x2:0, x9:0) :|: x8:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0
f11235_0_max_NULL(x10, java.lang.Object(IntList(x18, java.lang.Object(IntList(x19, x20)))), x12, java.lang.Object(IntList(x13, NULL))) -> f11235_0_max_NULL(x10 + 1, java.lang.Object(IntList(x18, java.lang.Object(IntList(x19, x20)))), 0, x20) :|: TRUE && x10 + -1 * x12 <= 0 && x13 + -1 * x12 <= 0 && x14 >= 1 && x19 <= 0 && x18 <= 0
f11235_0_max_NULL(x10:0, x11:0, x12:0, java.lang.Object(IntList(x13:0, java.lang.Object(IntList(x18:0, x19:0))))) -> f11235_0_max_NULL(x10:0, x11:0, x18:0, x19:0) :|: x18:0 + -1 * x12:0 >= 1 && x13:0 + -1 * x12:0 <= 0
f11235_0_max_NULL(x21, java.lang.Object(IntList(x29, java.lang.Object(IntList(x30, x31)))), x23, java.lang.Object(IntList(x24, NULL))) -> f11235_0_max_NULL(x21 + 1, java.lang.Object(IntList(x29, java.lang.Object(IntList(x30, x31)))), x30, x31) :|: TRUE && x21 + -1 * x23 <= 0 && x24 + -1 * x23 <= 0 && x25 >= 1 && x30 >= 1 && x29 <= 0
f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, NULL) -> f11235_0_max_NULL(x:0:0 + 1, x1:0:0, 0, x1:0:0) :|: x:0:0 <= x2:0:0 && x3:0:0 > 0
f11235_0_max_NULL(x32, NULL, x34, java.lang.Object(IntList(x35, NULL))) -> f11235_0_max_NULL(x32 + 2, NULL, 0, NULL) :|: TRUE && x32 + -1 * x34 <= 0 && x35 + -1 * x34 <= 0 && x36 >= 1 && x32 <= -1 && x40 >= 1
f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i809:0:0:0, java.lang.Object(IntList(i821:0:0:0, o980:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i821:0:0:0, o980:0:0:0) :|: i821:0:0:0 > i809:0:0:0
f11235_0_max_NULL(x41, java.lang.Object(IntList(x49, x50)), x43, java.lang.Object(IntList(x44, NULL))) -> f11235_0_max_NULL(x41 + 1, java.lang.Object(IntList(x49, x50)), x49, x50) :|: TRUE && x41 + -1 * x43 <= 0 && x44 + -1 * x43 <= 0 && x45 >= 1 && x49 >= 1

----------------------------------------

(52) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11235_0_max_NULL(x, java.lang.Object(IntList(x8, NULL)), x2, java.lang.Object(IntList(x3, NULL))) -> f11235_0_max_NULL(x + 2, java.lang.Object(IntList(x8, NULL)), 0, java.lang.Object(IntList(x8, NULL))) :|: TRUE && x + -1 * x2 <= 0 && x3 + -1 * x2 <= 0 && x4 >= 1 && x <= -1 && x8 <= 0 && x9 >= 1
(2) f11235_0_max_NULL(x:0, x1:0, x2:0, java.lang.Object(IntList(x3:0, java.lang.Object(IntList(x8:0, x9:0))))) -> f11235_0_max_NULL(x:0, x1:0, x2:0, x9:0) :|: x8:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0
(3) f11235_0_max_NULL(x10, java.lang.Object(IntList(x18, java.lang.Object(IntList(x19, x20)))), x12, java.lang.Object(IntList(x13, NULL))) -> f11235_0_max_NULL(x10 + 1, java.lang.Object(IntList(x18, java.lang.Object(IntList(x19, x20)))), 0, x20) :|: TRUE && x10 + -1 * x12 <= 0 && x13 + -1 * x12 <= 0 && x14 >= 1 && x19 <= 0 && x18 <= 0
(4) f11235_0_max_NULL(x10:0, x11:0, x12:0, java.lang.Object(IntList(x13:0, java.lang.Object(IntList(x18:0, x19:0))))) -> f11235_0_max_NULL(x10:0, x11:0, x18:0, x19:0) :|: x18:0 + -1 * x12:0 >= 1 && x13:0 + -1 * x12:0 <= 0
(5) f11235_0_max_NULL(x21, java.lang.Object(IntList(x29, java.lang.Object(IntList(x30, x31)))), x23, java.lang.Object(IntList(x24, NULL))) -> f11235_0_max_NULL(x21 + 1, java.lang.Object(IntList(x29, java.lang.Object(IntList(x30, x31)))), x30, x31) :|: TRUE && x21 + -1 * x23 <= 0 && x24 + -1 * x23 <= 0 && x25 >= 1 && x30 >= 1 && x29 <= 0
(6) f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, NULL) -> f11235_0_max_NULL(x:0:0 + 1, x1:0:0, 0, x1:0:0) :|: x:0:0 <= x2:0:0 && x3:0:0 > 0
(7) f11235_0_max_NULL(x32, NULL, x34, java.lang.Object(IntList(x35, NULL))) -> f11235_0_max_NULL(x32 + 2, NULL, 0, NULL) :|: TRUE && x32 + -1 * x34 <= 0 && x35 + -1 * x34 <= 0 && x36 >= 1 && x32 <= -1 && x40 >= 1
(8) f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i809:0:0:0, java.lang.Object(IntList(i821:0:0:0, o980:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i821:0:0:0, o980:0:0:0) :|: i821:0:0:0 > i809:0:0:0
(9) f11235_0_max_NULL(x41, java.lang.Object(IntList(x49, x50)), x43, java.lang.Object(IntList(x44, NULL))) -> f11235_0_max_NULL(x41 + 1, java.lang.Object(IntList(x49, x50)), x49, x50) :|: TRUE && x41 + -1 * x43 <= 0 && x44 + -1 * x43 <= 0 && x45 >= 1 && x49 >= 1

Arcs:
(1) -> (1)
(2) -> (1), (2), (3), (4), (5), (6), (7), (8), (9)
(3) -> (2), (3), (4), (6), (8)
(4) -> (1), (2), (3), (4), (5), (6), (7), (8), (9)
(5) -> (2), (4), (5), (6), (8)
(6) -> (1), (2), (4), (6), (8)
(7) -> (6)
(8) -> (1), (2), (3), (4), (5), (6), (7), (8), (9)
(9) -> (2), (4), (6), (8), (9)

This digraph is fully evaluated!
----------------------------------------

(53)
Complex Obligation (AND)

----------------------------------------

(54)
Obligation:

Termination digraph:
Nodes:
(1) f11235_0_max_NULL(x:0, x1:0, x2:0, java.lang.Object(IntList(x3:0, java.lang.Object(IntList(x8:0, x9:0))))) -> f11235_0_max_NULL(x:0, x1:0, x2:0, x9:0) :|: x8:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0
(2) f11235_0_max_NULL(x10, java.lang.Object(IntList(x18, java.lang.Object(IntList(x19, x20)))), x12, java.lang.Object(IntList(x13, NULL))) -> f11235_0_max_NULL(x10 + 1, java.lang.Object(IntList(x18, java.lang.Object(IntList(x19, x20)))), 0, x20) :|: TRUE && x10 + -1 * x12 <= 0 && x13 + -1 * x12 <= 0 && x14 >= 1 && x19 <= 0 && x18 <= 0
(3) f11235_0_max_NULL(x10:0, x11:0, x12:0, java.lang.Object(IntList(x13:0, java.lang.Object(IntList(x18:0, x19:0))))) -> f11235_0_max_NULL(x10:0, x11:0, x18:0, x19:0) :|: x18:0 + -1 * x12:0 >= 1 && x13:0 + -1 * x12:0 <= 0
(4) f11235_0_max_NULL(x21, java.lang.Object(IntList(x29, java.lang.Object(IntList(x30, x31)))), x23, java.lang.Object(IntList(x24, NULL))) -> f11235_0_max_NULL(x21 + 1, java.lang.Object(IntList(x29, java.lang.Object(IntList(x30, x31)))), x30, x31) :|: TRUE && x21 + -1 * x23 <= 0 && x24 + -1 * x23 <= 0 && x25 >= 1 && x30 >= 1 && x29 <= 0
(5) f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i809:0:0:0, java.lang.Object(IntList(i821:0:0:0, o980:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0, o964:0:0:0, i821:0:0:0, o980:0:0:0) :|: i821:0:0:0 > i809:0:0:0
(6) f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, NULL) -> f11235_0_max_NULL(x:0:0 + 1, x1:0:0, 0, x1:0:0) :|: x:0:0 <= x2:0:0 && x3:0:0 > 0
(7) f11235_0_max_NULL(x41, java.lang.Object(IntList(x49, x50)), x43, java.lang.Object(IntList(x44, NULL))) -> f11235_0_max_NULL(x41 + 1, java.lang.Object(IntList(x49, x50)), x49, x50) :|: TRUE && x41 + -1 * x43 <= 0 && x44 + -1 * x43 <= 0 && x45 >= 1 && x49 >= 1
(8) f11235_0_max_NULL(x32, NULL, x34, java.lang.Object(IntList(x35, NULL))) -> f11235_0_max_NULL(x32 + 2, NULL, 0, NULL) :|: TRUE && x32 + -1 * x34 <= 0 && x35 + -1 * x34 <= 0 && x36 >= 1 && x32 <= -1 && x40 >= 1

Arcs:
(1) -> (1), (2), (3), (4), (5), (6), (7), (8)
(2) -> (1), (2), (3), (5), (6)
(3) -> (1), (2), (3), (4), (5), (6), (7), (8)
(4) -> (1), (3), (4), (5), (6)
(5) -> (1), (2), (3), (4), (5), (6), (7), (8)
(6) -> (1), (3), (5), (6)
(7) -> (1), (3), (5), (6), (7)
(8) -> (6)

This digraph is fully evaluated!

----------------------------------------

(55) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(56)
Obligation:
Rules:
f11235_0_max_NULL(x21:0, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x23:0, java.lang.Object(IntList(x24:0, NULL))) -> f11235_0_max_NULL(x21:0 + 1, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x30:0, x31:0) :|: x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0
f11235_0_max_NULL(x10:0, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), x12:0, java.lang.Object(IntList(x13:0, NULL))) -> f11235_0_max_NULL(x10:0 + 1, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), 0, x20:0) :|: x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0
f11235_0_max_NULL(x10:0:0, x11:0:0, x12:0:0, java.lang.Object(IntList(x13:0:0, java.lang.Object(IntList(x18:0:0, x19:0:0))))) -> f11235_0_max_NULL(x10:0:0, x11:0:0, x18:0:0, x19:0:0) :|: x18:0:0 + -1 * x12:0:0 >= 1 && x13:0:0 + -1 * x12:0:0 <= 0
f11235_0_max_NULL(x32:0, NULL, x34:0, java.lang.Object(IntList(x35:0, NULL))) -> f11235_0_max_NULL(x32:0 + 2, NULL, 0, NULL) :|: x32:0 < 0 && x40:0 > 0 && x36:0 > 0 && x32:0 + -1 * x34:0 <= 0 && x35:0 + -1 * x34:0 <= 0
f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, java.lang.Object(IntList(x3:0:0, java.lang.Object(IntList(x8:0:0, x9:0:0))))) -> f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, x9:0:0) :|: x8:0:0 + -1 * x2:0:0 <= 0 && x3:0:0 + -1 * x2:0:0 <= 0
f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, NULL) -> f11235_0_max_NULL(x:0:0:0 + 1, x1:0:0:0, 0, x1:0:0:0) :|: x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0
f11235_0_max_NULL(x41:0, java.lang.Object(IntList(x49:0, x50:0)), x43:0, java.lang.Object(IntList(x44:0, NULL))) -> f11235_0_max_NULL(x41:0 + 1, java.lang.Object(IntList(x49:0, x50:0)), x49:0, x50:0) :|: x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0
f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i809:0:0:0:0, java.lang.Object(IntList(i821:0:0:0:0, o980:0:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i821:0:0:0:0, o980:0:0:0:0) :|: i821:0:0:0:0 > i809:0:0:0:0

----------------------------------------

(57) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f11235_0_max_NULL(VARIABLE, VARIABLE, VARIABLE, VARIABLE)
java.lang.Object(VARIABLE)
IntList(INTEGER, VARIABLE)
NULL()
Replaced non-predefined constructor symbols by 0.The following proof was generated: 
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given IntTRS could not be shown:



- IntTRS
  - RankingReductionPairProof

Rules:
f11235_0_max_NULL(x21:0, c, x23:0, c1) -> f11235_0_max_NULL(c2, c3, x30:0, x31:0) :|: c3 = 0 && (c2 = x21:0 + 1 && (c1 = 0 && c = 0)) && (x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0)
f11235_0_max_NULL(x10:0, c4, x12:0, c5) -> f11235_0_max_NULL(c6, c7, c8, x20:0) :|: c8 = 0 && (c7 = 0 && (c6 = x10:0 + 1 && (c5 = 0 && c4 = 0))) && (x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0)
f11235_0_max_NULL(x10:0:0, x11:0:0, x12:0:0, c9) -> f11235_0_max_NULL(x10:0:0, x11:0:0, x18:0:0, x19:0:0) :|: c9 = 0 && (x18:0:0 + -1 * x12:0:0 >= 1 && x13:0:0 + -1 * x12:0:0 <= 0)
f11235_0_max_NULL(x32:0, c10, x34:0, c11) -> f11235_0_max_NULL(c12, c13, c14, c15) :|: c15 = 0 && (c14 = 0 && (c13 = 0 && (c12 = x32:0 + 2 && (c11 = 0 && c10 = 0)))) && (x32:0 < 0 && x40:0 > 0 && x36:0 > 0 && x32:0 + -1 * x34:0 <= 0 && x35:0 + -1 * x34:0 <= 0)
f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, c16) -> f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, x9:0:0) :|: c16 = 0 && (x8:0:0 + -1 * x2:0:0 <= 0 && x3:0:0 + -1 * x2:0:0 <= 0)
f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, c17) -> f11235_0_max_NULL(c18, x1:0:0:0, c19, x1:0:0:0) :|: c19 = 0 && (c18 = x:0:0:0 + 1 && c17 = 0) && (x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0)
f11235_0_max_NULL(x41:0, c20, x43:0, c21) -> f11235_0_max_NULL(c22, c23, x49:0, x50:0) :|: c23 = 0 && (c22 = x41:0 + 1 && (c21 = 0 && c20 = 0)) && (x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0)
f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i809:0:0:0:0, c24) -> f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i821:0:0:0:0, o980:0:0:0:0) :|: c24 = 0 && i821:0:0:0:0 > i809:0:0:0:0

Interpretation:
[ f11235_0_max_NULL ] = 3*f11235_0_max_NULL_2 + -2*f11235_0_max_NULL_1

The following rules are decreasing:
f11235_0_max_NULL(x21:0, c, x23:0, c1) -> f11235_0_max_NULL(c2, c3, x30:0, x31:0) :|: c3 = 0 && (c2 = x21:0 + 1 && (c1 = 0 && c = 0)) && (x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0)
f11235_0_max_NULL(x10:0, c4, x12:0, c5) -> f11235_0_max_NULL(c6, c7, c8, x20:0) :|: c8 = 0 && (c7 = 0 && (c6 = x10:0 + 1 && (c5 = 0 && c4 = 0))) && (x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0)
f11235_0_max_NULL(x32:0, c10, x34:0, c11) -> f11235_0_max_NULL(c12, c13, c14, c15) :|: c15 = 0 && (c14 = 0 && (c13 = 0 && (c12 = x32:0 + 2 && (c11 = 0 && c10 = 0)))) && (x32:0 < 0 && x40:0 > 0 && x36:0 > 0 && x32:0 + -1 * x34:0 <= 0 && x35:0 + -1 * x34:0 <= 0)
f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, c17) -> f11235_0_max_NULL(c18, x1:0:0:0, c19, x1:0:0:0) :|: c19 = 0 && (c18 = x:0:0:0 + 1 && c17 = 0) && (x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0)
f11235_0_max_NULL(x41:0, c20, x43:0, c21) -> f11235_0_max_NULL(c22, c23, x49:0, x50:0) :|: c23 = 0 && (c22 = x41:0 + 1 && (c21 = 0 && c20 = 0)) && (x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0)

The following rules are bounded:
f11235_0_max_NULL(x32:0, c10, x34:0, c11) -> f11235_0_max_NULL(c12, c13, c14, c15) :|: c15 = 0 && (c14 = 0 && (c13 = 0 && (c12 = x32:0 + 2 && (c11 = 0 && c10 = 0)))) && (x32:0 < 0 && x40:0 > 0 && x36:0 > 0 && x32:0 + -1 * x34:0 <= 0 && x35:0 + -1 * x34:0 <= 0)



- IntTRS
  - RankingReductionPairProof
    - IntTRS

Rules:
f11235_0_max_NULL(x21:0, c, x23:0, c1) -> f11235_0_max_NULL(c2, c3, x30:0, x31:0) :|: c3 = 0 && (c2 = x21:0 + 1 && (c1 = 0 && c = 0)) && (x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0)
f11235_0_max_NULL(x10:0, c4, x12:0, c5) -> f11235_0_max_NULL(c6, c7, c8, x20:0) :|: c8 = 0 && (c7 = 0 && (c6 = x10:0 + 1 && (c5 = 0 && c4 = 0))) && (x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0)
f11235_0_max_NULL(x10:0:0, x11:0:0, x12:0:0, c9) -> f11235_0_max_NULL(x10:0:0, x11:0:0, x18:0:0, x19:0:0) :|: c9 = 0 && (x18:0:0 + -1 * x12:0:0 >= 1 && x13:0:0 + -1 * x12:0:0 <= 0)
f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, c16) -> f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, x9:0:0) :|: c16 = 0 && (x8:0:0 + -1 * x2:0:0 <= 0 && x3:0:0 + -1 * x2:0:0 <= 0)
f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, c17) -> f11235_0_max_NULL(c18, x1:0:0:0, c19, x1:0:0:0) :|: c19 = 0 && (c18 = x:0:0:0 + 1 && c17 = 0) && (x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0)
f11235_0_max_NULL(x41:0, c20, x43:0, c21) -> f11235_0_max_NULL(c22, c23, x49:0, x50:0) :|: c23 = 0 && (c22 = x41:0 + 1 && (c21 = 0 && c20 = 0)) && (x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0)
f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i809:0:0:0:0, c24) -> f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i821:0:0:0:0, o980:0:0:0:0) :|: c24 = 0 && i821:0:0:0:0 > i809:0:0:0:0



----------------------------------------

(58)
Obligation:
Rules:
f11235_0_max_NULL(x21:0, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x23:0, java.lang.Object(IntList(x24:0, NULL))) -> f11235_0_max_NULL(x21:0 + 1, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x30:0, x31:0) :|: x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0
f11235_0_max_NULL(x10:0, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), x12:0, java.lang.Object(IntList(x13:0, NULL))) -> f11235_0_max_NULL(x10:0 + 1, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), 0, x20:0) :|: x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0
f11235_0_max_NULL(x10:0:0, x11:0:0, x12:0:0, java.lang.Object(IntList(x13:0:0, java.lang.Object(IntList(x18:0:0, x19:0:0))))) -> f11235_0_max_NULL(x10:0:0, x11:0:0, x18:0:0, x19:0:0) :|: x18:0:0 + -1 * x12:0:0 >= 1 && x13:0:0 + -1 * x12:0:0 <= 0
f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, java.lang.Object(IntList(x3:0:0, java.lang.Object(IntList(x8:0:0, x9:0:0))))) -> f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, x9:0:0) :|: x8:0:0 + -1 * x2:0:0 <= 0 && x3:0:0 + -1 * x2:0:0 <= 0
f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, NULL) -> f11235_0_max_NULL(x:0:0:0 + 1, x1:0:0:0, 0, x1:0:0:0) :|: x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0
f11235_0_max_NULL(x41:0, java.lang.Object(IntList(x49:0, x50:0)), x43:0, java.lang.Object(IntList(x44:0, NULL))) -> f11235_0_max_NULL(x41:0 + 1, java.lang.Object(IntList(x49:0, x50:0)), x49:0, x50:0) :|: x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0
f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i809:0:0:0:0, java.lang.Object(IntList(i821:0:0:0:0, o980:0:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i821:0:0:0:0, o980:0:0:0:0) :|: i821:0:0:0:0 > i809:0:0:0:0

----------------------------------------

(59) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11235_0_max_NULL(x21:0, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x23:0, java.lang.Object(IntList(x24:0, NULL))) -> f11235_0_max_NULL(x21:0 + 1, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x30:0, x31:0) :|: x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0
(2) f11235_0_max_NULL(x10:0, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), x12:0, java.lang.Object(IntList(x13:0, NULL))) -> f11235_0_max_NULL(x10:0 + 1, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), 0, x20:0) :|: x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0
(3) f11235_0_max_NULL(x10:0:0, x11:0:0, x12:0:0, java.lang.Object(IntList(x13:0:0, java.lang.Object(IntList(x18:0:0, x19:0:0))))) -> f11235_0_max_NULL(x10:0:0, x11:0:0, x18:0:0, x19:0:0) :|: x18:0:0 + -1 * x12:0:0 >= 1 && x13:0:0 + -1 * x12:0:0 <= 0
(4) f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, java.lang.Object(IntList(x3:0:0, java.lang.Object(IntList(x8:0:0, x9:0:0))))) -> f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, x9:0:0) :|: x8:0:0 + -1 * x2:0:0 <= 0 && x3:0:0 + -1 * x2:0:0 <= 0
(5) f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, NULL) -> f11235_0_max_NULL(x:0:0:0 + 1, x1:0:0:0, 0, x1:0:0:0) :|: x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0
(6) f11235_0_max_NULL(x41:0, java.lang.Object(IntList(x49:0, x50:0)), x43:0, java.lang.Object(IntList(x44:0, NULL))) -> f11235_0_max_NULL(x41:0 + 1, java.lang.Object(IntList(x49:0, x50:0)), x49:0, x50:0) :|: x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0
(7) f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i809:0:0:0:0, java.lang.Object(IntList(i821:0:0:0:0, o980:0:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i821:0:0:0:0, o980:0:0:0:0) :|: i821:0:0:0:0 > i809:0:0:0:0

Arcs:
(1) -> (1), (3), (4), (5), (7)
(2) -> (2), (3), (4), (5), (7)
(3) -> (1), (2), (3), (4), (5), (6), (7)
(4) -> (1), (2), (3), (4), (5), (6), (7)
(5) -> (3), (4), (5), (7)
(6) -> (3), (4), (5), (6), (7)
(7) -> (1), (2), (3), (4), (5), (6), (7)

This digraph is fully evaluated!
----------------------------------------

(60)
Obligation:

Termination digraph:
Nodes:
(1) f11235_0_max_NULL(x21:0, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x23:0, java.lang.Object(IntList(x24:0, NULL))) -> f11235_0_max_NULL(x21:0 + 1, java.lang.Object(IntList(x29:0, java.lang.Object(IntList(x30:0, x31:0)))), x30:0, x31:0) :|: x30:0 > 0 && x29:0 < 1 && x25:0 > 0 && x21:0 + -1 * x23:0 <= 0 && x24:0 + -1 * x23:0 <= 0
(2) f11235_0_max_NULL(x10:0:0, x11:0:0, x12:0:0, java.lang.Object(IntList(x13:0:0, java.lang.Object(IntList(x18:0:0, x19:0:0))))) -> f11235_0_max_NULL(x10:0:0, x11:0:0, x18:0:0, x19:0:0) :|: x18:0:0 + -1 * x12:0:0 >= 1 && x13:0:0 + -1 * x12:0:0 <= 0
(3) f11235_0_max_NULL(x10:0, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), x12:0, java.lang.Object(IntList(x13:0, NULL))) -> f11235_0_max_NULL(x10:0 + 1, java.lang.Object(IntList(x18:0, java.lang.Object(IntList(x19:0, x20:0)))), 0, x20:0) :|: x19:0 < 1 && x18:0 < 1 && x14:0 > 0 && x10:0 + -1 * x12:0 <= 0 && x13:0 + -1 * x12:0 <= 0
(4) f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, java.lang.Object(IntList(x3:0:0, java.lang.Object(IntList(x8:0:0, x9:0:0))))) -> f11235_0_max_NULL(x:0:0, x1:0:0, x2:0:0, x9:0:0) :|: x8:0:0 + -1 * x2:0:0 <= 0 && x3:0:0 + -1 * x2:0:0 <= 0
(5) f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, NULL) -> f11235_0_max_NULL(x:0:0:0 + 1, x1:0:0:0, 0, x1:0:0:0) :|: x:0:0:0 <= x2:0:0:0 && x3:0:0:0 > 0
(6) f11235_0_max_NULL(x41:0, java.lang.Object(IntList(x49:0, x50:0)), x43:0, java.lang.Object(IntList(x44:0, NULL))) -> f11235_0_max_NULL(x41:0 + 1, java.lang.Object(IntList(x49:0, x50:0)), x49:0, x50:0) :|: x45:0 > 0 && x49:0 > 0 && x41:0 + -1 * x43:0 <= 0 && x44:0 + -1 * x43:0 <= 0
(7) f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i809:0:0:0:0, java.lang.Object(IntList(i821:0:0:0:0, o980:0:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0:0, o964:0:0:0:0, i821:0:0:0:0, o980:0:0:0:0) :|: i821:0:0:0:0 > i809:0:0:0:0

Arcs:
(1) -> (1), (2), (4), (5), (7)
(2) -> (1), (2), (3), (4), (5), (6), (7)
(3) -> (2), (3), (4), (5), (7)
(4) -> (1), (2), (3), (4), (5), (6), (7)
(5) -> (2), (4), (5), (7)
(6) -> (2), (4), (5), (6), (7)
(7) -> (1), (2), (3), (4), (5), (6), (7)

This digraph is fully evaluated!

----------------------------------------

(61) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(62)
Obligation:
Rules:
f11235_0_max_NULL(x41:0:0, java.lang.Object(IntList(x49:0:0, x50:0:0)), x43:0:0, java.lang.Object(IntList(x44:0:0, NULL))) -> f11235_0_max_NULL(x41:0:0 + 1, java.lang.Object(IntList(x49:0:0, x50:0:0)), x49:0:0, x50:0:0) :|: x41:0:0 + -1 * x43:0:0 <= 0 && x44:0:0 + -1 * x43:0:0 <= 0 && x49:0:0 > 0 && x45:0:0 > 0
f11235_0_max_NULL(x10:0:0:0, x11:0:0:0, x12:0:0:0, java.lang.Object(IntList(x13:0:0:0, java.lang.Object(IntList(x18:0:0:0, x19:0:0:0))))) -> f11235_0_max_NULL(x10:0:0:0, x11:0:0:0, x18:0:0:0, x19:0:0:0) :|: x18:0:0:0 + -1 * x12:0:0:0 >= 1 && x13:0:0:0 + -1 * x12:0:0:0 <= 0
f11235_0_max_NULL(x10:0:0, java.lang.Object(IntList(x18:0:0, java.lang.Object(IntList(x19:0:0, x20:0:0)))), x12:0:0, java.lang.Object(IntList(x13:0:0, NULL))) -> f11235_0_max_NULL(x10:0:0 + 1, java.lang.Object(IntList(x18:0:0, java.lang.Object(IntList(x19:0:0, x20:0:0)))), 0, x20:0:0) :|: x10:0:0 + -1 * x12:0:0 <= 0 && x13:0:0 + -1 * x12:0:0 <= 0 && x14:0:0 > 0 && x18:0:0 < 1 && x19:0:0 < 1
f11235_0_max_NULL(x21:0:0, java.lang.Object(IntList(x29:0:0, java.lang.Object(IntList(x30:0:0, x31:0:0)))), x23:0:0, java.lang.Object(IntList(x24:0:0, NULL))) -> f11235_0_max_NULL(x21:0:0 + 1, java.lang.Object(IntList(x29:0:0, java.lang.Object(IntList(x30:0:0, x31:0:0)))), x30:0:0, x31:0:0) :|: x21:0:0 + -1 * x23:0:0 <= 0 && x24:0:0 + -1 * x23:0:0 <= 0 && x25:0:0 > 0 && x29:0:0 < 1 && x30:0:0 > 0
f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, java.lang.Object(IntList(x3:0:0:0, java.lang.Object(IntList(x8:0:0:0, x9:0:0:0))))) -> f11235_0_max_NULL(x:0:0:0, x1:0:0:0, x2:0:0:0, x9:0:0:0) :|: x8:0:0:0 + -1 * x2:0:0:0 <= 0 && x3:0:0:0 + -1 * x2:0:0:0 <= 0
f11235_0_max_NULL(x:0:0:0:0, x1:0:0:0:0, x2:0:0:0:0, NULL) -> f11235_0_max_NULL(x:0:0:0:0 + 1, x1:0:0:0:0, 0, x1:0:0:0:0) :|: x:0:0:0:0 <= x2:0:0:0:0 && x3:0:0:0:0 > 0
f11235_0_max_NULL(i810:0:0:0:0:0, o964:0:0:0:0:0, i809:0:0:0:0:0, java.lang.Object(IntList(i821:0:0:0:0:0, o980:0:0:0:0:0))) -> f11235_0_max_NULL(i810:0:0:0:0:0, o964:0:0:0:0:0, i821:0:0:0:0:0, o980:0:0:0:0:0) :|: i821:0:0:0:0:0 > i809:0:0:0:0:0

----------------------------------------

(63)
Obligation:

Termination digraph:
Nodes:
(1) f11235_0_max_NULL(x, java.lang.Object(IntList(x8, NULL)), x2, java.lang.Object(IntList(x3, NULL))) -> f11235_0_max_NULL(x + 2, java.lang.Object(IntList(x8, NULL)), 0, java.lang.Object(IntList(x8, NULL))) :|: TRUE && x + -1 * x2 <= 0 && x3 + -1 * x2 <= 0 && x4 >= 1 && x <= -1 && x8 <= 0 && x9 >= 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(64) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(65)
Obligation:
Rules:
f11235_0_max_NULL(x:0, java.lang.Object(IntList(x8:0, NULL)), x2:0, java.lang.Object(IntList(x3:0, NULL))) -> f11235_0_max_NULL(x:0 + 2, java.lang.Object(IntList(x8:0, NULL)), 0, java.lang.Object(IntList(x8:0, NULL))) :|: x8:0 < 1 && x9:0 > 0 && x:0 < 0 && x4:0 > 0 && x:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0

----------------------------------------

(66) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   IntList(x1, x2) -> IntList(x1)

----------------------------------------

(67)
Obligation:
Rules:
f11235_0_max_NULL(x:0, java.lang.Object(IntList(x8:0)), x2:0, java.lang.Object(IntList(x3:0))) -> f11235_0_max_NULL(x:0 + 2, java.lang.Object(IntList(x8:0)), 0, java.lang.Object(IntList(x8:0))) :|: x8:0 < 1 && x9:0 > 0 && x:0 < 0 && x4:0 > 0 && x:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0

----------------------------------------

(68) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f11235_0_max_NULL(INTEGER, VARIABLE, VARIABLE, VARIABLE)
java.lang.Object(VARIABLE)
IntList(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(69)
Obligation:
Rules:
f11235_0_max_NULL(x:0, c, x2:0, c1) -> f11235_0_max_NULL(c2, c3, c4, c5) :|: c5 = 0 && (c4 = 0 && (c3 = 0 && (c2 = x:0 + 2 && (c1 = 0 && c = 0)))) && (x8:0 < 1 && x9:0 > 0 && x:0 < 0 && x4:0 > 0 && x:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0)

----------------------------------------

(70) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f11235_0_max_NULL(x, x1, x2, x3)] = -1 - x + c1*x1 + c3*x3

The following rules are decreasing:
f11235_0_max_NULL(x:0, c, x2:0, c1) -> f11235_0_max_NULL(c2, c3, c4, c5) :|: c5 = 0 && (c4 = 0 && (c3 = 0 && (c2 = x:0 + 2 && (c1 = 0 && c = 0)))) && (x8:0 < 1 && x9:0 > 0 && x:0 < 0 && x4:0 > 0 && x:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0)
The following rules are bounded:
f11235_0_max_NULL(x:0, c, x2:0, c1) -> f11235_0_max_NULL(c2, c3, c4, c5) :|: c5 = 0 && (c4 = 0 && (c3 = 0 && (c2 = x:0 + 2 && (c1 = 0 && c = 0)))) && (x8:0 < 1 && x9:0 > 0 && x:0 < 0 && x4:0 > 0 && x:0 + -1 * x2:0 <= 0 && x3:0 + -1 * x2:0 <= 0)

----------------------------------------

(71)
YES
