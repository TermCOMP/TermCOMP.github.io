YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/yZdC6.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 225 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 39 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 23 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class MinusMin{

  public static int min (int x, int y) {

    if (x < y) return x;
    else return y;
  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    int res = 0;



    while (min(x-1,y) == y) {

      y++;
      res++;

    }


  }

}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class MinusMin{

  public static int min (int x, int y) {

    if (x < y) return x;
    else return y;
  }


  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    int res = 0;



    while (min(x-1,y) == y) {

      y++;
      res++;

    }


  }

}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
MinusMin.main([Ljava/lang/String;)V: Graph of 194 nodes with 1 SCC.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: MinusMin.main([Ljava/lang/String;)V
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f644_0_main_ConstantStackPush(EOS(STATIC_644), i19, i86, i19) -> f645_0_main_IntArithmetic(EOS(STATIC_645), i19, i86, i19, 1) :|: TRUE
f645_0_main_IntArithmetic(EOS(STATIC_645), i19, i86, i19, matching1) -> f646_0_main_Load(EOS(STATIC_646), i19, i86, i19 - 1) :|: i19 >= 0 && matching1 = 1
f646_0_main_Load(EOS(STATIC_646), i19, i86, i92) -> f647_0_main_InvokeMethod(EOS(STATIC_647), i19, i86, i92, i86) :|: TRUE
f647_0_main_InvokeMethod(EOS(STATIC_647), i19, i86, i92, i86) -> f648_0_min_Load(EOS(STATIC_648), i19, i86, i92, i86) :|: TRUE
f648_0_min_Load(EOS(STATIC_648), i19, i86, i92, i86) -> f649_0_min_Load(EOS(STATIC_649), i19, i86, i92, i86, i92) :|: TRUE
f649_0_min_Load(EOS(STATIC_649), i19, i86, i92, i86, i92) -> f650_0_min_GE(EOS(STATIC_650), i19, i86, i92, i86, i92, i86) :|: TRUE
f650_0_min_GE(EOS(STATIC_650), i19, i86, i92, i86, i92, i86) -> f658_0_min_GE(EOS(STATIC_658), i19, i86, i92, i86, i92, i86) :|: i92 >= i86
f658_0_min_GE(EOS(STATIC_658), i19, i86, i92, i86, i92, i86) -> f666_0_min_Load(EOS(STATIC_666), i19, i86, i86) :|: i92 >= i86
f666_0_min_Load(EOS(STATIC_666), i19, i86, i86) -> f668_0_min_Return(EOS(STATIC_668), i19, i86, i86) :|: TRUE
f668_0_min_Return(EOS(STATIC_668), i19, i86, i86) -> f670_0_main_Load(EOS(STATIC_670), i19, i86, i86) :|: TRUE
f670_0_main_Load(EOS(STATIC_670), i19, i86, i86) -> f675_0_main_NE(EOS(STATIC_675), i19, i86, i86, i86) :|: TRUE
f675_0_main_NE(EOS(STATIC_675), i19, i86, i86, i86) -> f698_0_main_Inc(EOS(STATIC_698), i19, i86) :|: TRUE
f698_0_main_Inc(EOS(STATIC_698), i19, i86) -> f703_0_main_Inc(EOS(STATIC_703), i19, i86 + 1) :|: TRUE
f703_0_main_Inc(EOS(STATIC_703), i19, i99) -> f712_0_main_JMP(EOS(STATIC_712), i19, i99) :|: TRUE
f712_0_main_JMP(EOS(STATIC_712), i19, i99) -> f728_0_main_Load(EOS(STATIC_728), i19, i99) :|: TRUE
f728_0_main_Load(EOS(STATIC_728), i19, i99) -> f642_0_main_Load(EOS(STATIC_642), i19, i99) :|: TRUE
f642_0_main_Load(EOS(STATIC_642), i19, i86) -> f644_0_main_ConstantStackPush(EOS(STATIC_644), i19, i86, i19) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f644_0_main_ConstantStackPush(EOS(STATIC_644), i19:0, i86:0, i19:0) -> f644_0_main_ConstantStackPush(EOS(STATIC_644), i19:0, i86:0 + 1, i19:0) :|: i19:0 > -1 && i86:0 <= i19:0 - 1
Filtered constant ground arguments:
   f644_0_main_ConstantStackPush(x1, x2, x3, x4) -> f644_0_main_ConstantStackPush(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f644_0_main_ConstantStackPush(x1, x2, x3) -> f644_0_main_ConstantStackPush(x2, x3)
Finished conversion. Obtained 1 rules.P rules:
f644_0_main_ConstantStackPush(i86:0, i19:0) -> f644_0_main_ConstantStackPush(i86:0 + 1, i19:0) :|: i19:0 > -1 && i86:0 <= i19:0 - 1

----------------------------------------

(8)
Obligation:
Rules:
f644_0_main_ConstantStackPush(i86:0, i19:0) -> f644_0_main_ConstantStackPush(i86:0 + 1, i19:0) :|: i19:0 > -1 && i86:0 <= i19:0 - 1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f644_0_main_ConstantStackPush(i86:0, i19:0) -> f644_0_main_ConstantStackPush(arith, i19:0) :|: i19:0 > -1 && i86:0 <= i19:0 - 1 && arith = i86:0 + 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f644_0_main_ConstantStackPush(i86:0, i19:0) -> f644_0_main_ConstantStackPush(arith, i19:0) :|: i19:0 > -1 && i86:0 <= i19:0 - 1 && arith = i86:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f644_0_main_ConstantStackPush(i86:0, i19:0) -> f644_0_main_ConstantStackPush(arith, i19:0) :|: i19:0 > -1 && i86:0 <= i19:0 - 1 && arith = i86:0 + 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f644_0_main_ConstantStackPush(i86:0:0, i19:0:0) -> f644_0_main_ConstantStackPush(i86:0:0 + 1, i19:0:0) :|: i19:0:0 > -1 && i86:0:0 <= i19:0:0 - 1

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f644_0_main_ConstantStackPush(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f644_0_main_ConstantStackPush(i86:0:0, i19:0:0) -> f644_0_main_ConstantStackPush(c, i19:0:0) :|: c = i86:0:0 + 1 && (i19:0:0 > -1 && i86:0:0 <= i19:0:0 - 1)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f644_0_main_ConstantStackPush(x, x1)] = -x + x1

The following rules are decreasing:
f644_0_main_ConstantStackPush(i86:0:0, i19:0:0) -> f644_0_main_ConstantStackPush(c, i19:0:0) :|: c = i86:0:0 + 1 && (i19:0:0 > -1 && i86:0:0 <= i19:0:0 - 1)
The following rules are bounded:
f644_0_main_ConstantStackPush(i86:0:0, i19:0:0) -> f644_0_main_ConstantStackPush(c, i19:0:0) :|: c = i86:0:0 + 1 && (i19:0:0 > -1 && i86:0:0 <= i19:0:0 - 1)

----------------------------------------

(18)
YES
