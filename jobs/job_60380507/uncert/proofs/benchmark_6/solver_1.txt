MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/MuKmJ.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

q()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(2) IRSwT
    (3) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (4) IRSwT
    (5) IntTRSCompressionProof [EQUIVALENT, 10 ms]
    (6) IRSwT
    (7) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (8) IRSwT
    (9) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
    (10) IRSwT
    (11) FilterProof [EQUIVALENT, 0 ms]
    (12) IntTRS
    (13) IntTRSNonPeriodicNontermProof [COMPLETE, 3 ms]
    (14) NO
(15) PrologToTRSTransformerProof [SOUND, 0 ms]
(16) QTRS
    (17) QTRSRRRProof [EQUIVALENT, 17 ms]
    (18) QTRS
    (19) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (20) QTRS
    (21) DependencyPairsProof [EQUIVALENT, 0 ms]
    (22) QDP
    (23) UsableRulesProof [EQUIVALENT, 1 ms]
    (24) QDP
    (25) QReductionProof [EQUIVALENT, 0 ms]
    (26) QDP
(27) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(28) TRIPLES
    (29) TriplesToPiDPProof [SOUND, 0 ms]
    (30) PiDP
    (31) DependencyGraphProof [EQUIVALENT, 0 ms]
    (32) PiDP
    (33) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (34) QDP


----------------------------------------

(0)
Obligation:
Clauses:

q :- p(!).
p(X) :- ','(X, failure(a)).
p(X) :- p(X).
failure(b).


Query: q()
----------------------------------------

(1) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q)",
                "(p (!))"
            ],
            [
                "(p X)",
                "(',' X (failure (a)))"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (call (!)) (failure (a)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_3) (failure (a)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(failure (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(failure (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p (!))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p (!))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 17,
                "label": "ONLY EVAL with clause\nq :- p(!).\nand substitution"
            },
            {
                "from": 17,
                "to": 19,
                "label": "CASE"
            },
            {
                "from": 19,
                "to": 21,
                "label": "PARALLEL"
            },
            {
                "from": 19,
                "to": 22,
                "label": "PARALLEL"
            },
            {
                "from": 21,
                "to": 25,
                "label": "ONLY EVAL with clause\np(X7) :- ','(call(X7), failure(a)).\nand substitutionX7 -> !"
            },
            {
                "from": 22,
                "to": 35,
                "label": "ONLY EVAL with clause\np(X11) :- p(X11).\nand substitutionX11 -> !"
            },
            {
                "from": 25,
                "to": 26,
                "label": "CALL"
            },
            {
                "from": 26,
                "to": 27,
                "label": "CUT"
            },
            {
                "from": 27,
                "to": 28,
                "label": "CASE"
            },
            {
                "from": 28,
                "to": 30,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 35,
                "to": 17,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Rules:
f19_in -> f21_in :|: TRUE
f21_out -> f19_out :|: TRUE
f19_in -> f22_in :|: TRUE
f22_out -> f19_out :|: TRUE
f17_in -> f19_in :|: TRUE
f19_out -> f17_out :|: TRUE
f35_in -> f17_in :|: TRUE
f17_out -> f35_out :|: TRUE
f35_out -> f22_out :|: TRUE
f22_in -> f35_in :|: TRUE
f3_in -> f6_in :|: TRUE
f6_out -> f3_out :|: TRUE
f6_in -> f17_in :|: TRUE
f17_out -> f6_out :|: TRUE
Start term: f3_in

----------------------------------------

(3) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f19_in -> f22_in :|: TRUE
f17_in -> f19_in :|: TRUE
f35_in -> f17_in :|: TRUE
f22_in -> f35_in :|: TRUE


----------------------------------------

(4)
Obligation:
Rules:
f19_in -> f22_in :|: TRUE
f17_in -> f19_in :|: TRUE
f35_in -> f17_in :|: TRUE
f22_in -> f35_in :|: TRUE

----------------------------------------

(5) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(6)
Obligation:
Rules:
f35_in -> f35_in :|: TRUE

----------------------------------------

(7) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(8)
Obligation:
Rules:
f35_in -> f35_in :|: TRUE

----------------------------------------

(9) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f35_in -> f35_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(10)
Obligation:

Termination digraph:
Nodes:
(1) f35_in -> f35_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(11) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f35_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(12)
Obligation:
Rules:
f35_in -> f35_in :|: TRUE

----------------------------------------

(13) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(14)
NO

----------------------------------------

(15) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q)",
                "(p (!))"
            ],
            [
                "(p X)",
                "(',' X (failure (a)))"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(failure (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (call (!)) (failure (a)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p (!))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p (!))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_3) (failure (a)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(failure (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 9,
                "label": "ONLY EVAL with clause\nq :- p(!).\nand substitution"
            },
            {
                "from": 9,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 23,
                "label": "PARALLEL"
            },
            {
                "from": 20,
                "to": 24,
                "label": "PARALLEL"
            },
            {
                "from": 23,
                "to": 29,
                "label": "ONLY EVAL with clause\np(X7) :- ','(call(X7), failure(a)).\nand substitutionX7 -> !"
            },
            {
                "from": 24,
                "to": 36,
                "label": "ONLY EVAL with clause\np(X11) :- p(X11).\nand substitutionX11 -> !"
            },
            {
                "from": 29,
                "to": 31,
                "label": "CALL"
            },
            {
                "from": 31,
                "to": 32,
                "label": "CUT"
            },
            {
                "from": 32,
                "to": 33,
                "label": "CASE"
            },
            {
                "from": 33,
                "to": 34,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 36,
                "to": 9,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(16)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f9_in)
   U1(f9_out1) -> f1_out1
   f9_in -> U2(f9_in)
   U2(f9_out1) -> f9_out1

Q is empty.

----------------------------------------

(17) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(f1_in) = 1
   POL(f1_out1) = 0
   POL(f9_in) = 0
   POL(f9_out1) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f1_in -> U1(f9_in)
   U1(f9_out1) -> f1_out1
   U2(f9_out1) -> f9_out1




----------------------------------------

(18)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f9_in -> U2(f9_in)

Q is empty.

----------------------------------------

(19) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(20)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f9_in -> U2(f9_in)

The set Q consists of the following terms:

   f9_in


----------------------------------------

(21) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F9_IN -> F9_IN

The TRS R consists of the following rules:

   f9_in -> U2(f9_in)

The set Q consists of the following terms:

   f9_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F9_IN -> F9_IN

R is empty.
The set Q consists of the following terms:

   f9_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f9_in


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F9_IN -> F9_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q)",
                "(p (!))"
            ],
            [
                "(p X)",
                "(',' X (failure (a)))"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (call (!)) (failure (a)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_3) (failure (a)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(failure (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(failure (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p (!))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p (!))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 7,
                "label": "ONLY EVAL with clause\nq :- p(!).\nand substitution"
            },
            {
                "from": 7,
                "to": 8,
                "label": "CASE"
            },
            {
                "from": 8,
                "to": 10,
                "label": "PARALLEL"
            },
            {
                "from": 8,
                "to": 11,
                "label": "PARALLEL"
            },
            {
                "from": 10,
                "to": 12,
                "label": "ONLY EVAL with clause\np(X5) :- ','(call(X5), failure(a)).\nand substitutionX5 -> !"
            },
            {
                "from": 11,
                "to": 18,
                "label": "ONLY EVAL with clause\np(X9) :- p(X9).\nand substitutionX9 -> !"
            },
            {
                "from": 12,
                "to": 13,
                "label": "CALL"
            },
            {
                "from": 13,
                "to": 14,
                "label": "CUT"
            },
            {
                "from": 14,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 16,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 18,
                "to": 7,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(28)
Obligation:
Triples:

pA :- pA.
qB :- pA.

Clauses:

pcA :- pcA.

Afs:

qB  =  qB


----------------------------------------

(29) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   QB_IN_ -> U2_^1(pA_in_)
   QB_IN_ -> PA_IN_
   PA_IN_ -> U1_^1(pA_in_)
   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QB_IN_ -> U2_^1(pA_in_)
   QB_IN_ -> PA_IN_
   PA_IN_ -> U1_^1(pA_in_)
   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> PA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.