MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/o28jo.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToTRSTransformerProof [SOUND, 0 ms]
(4) QTRS
    (5) QTRSRRRProof [EQUIVALENT, 13 ms]
    (6) QTRS
    (7) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (8) QTRS
    (9) DependencyPairsProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) UsableRulesProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) QReductionProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) NonTerminationLoopProof [COMPLETE, 0 ms]
    (16) NO
(17) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(18) TRIPLES
    (19) TriplesToPiDPProof [SOUND, 6 ms]
    (20) PiDP
    (21) DependencyGraphProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) PiDPToQDPProof [SOUND, 0 ms]
    (24) QDP
    (25) NonTerminationLoopProof [COMPLETE, 0 ms]
    (26) NO


----------------------------------------

(0)
Obligation:
Clauses:

p(X) :- ','(no(letter(X)), q(X)).
q(x) :- p(X1).
letter(x).
no(X) :- ','(X, ','(!, failure(a))).
no(X2).
failure(b).


Query: p(a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

p(X) :- ','(no(letter(X)), q(X)).
q(x) :- p(X1).
letter(x).
no(X) :- ','(X, failure(a)).
no(X2).
failure(b).


Query: p(a)
----------------------------------------

(3) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(',' (no (letter X)) (q X))"
            ],
            [
                "(q (x))",
                "(p X1)"
            ],
            [
                "(letter (x))",
                null
            ],
            [
                "(no X)",
                "(',' X (',' (!) (failure (a))))"
            ],
            [
                "(no X2)",
                null
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (call (letter T11)) (',' (!_2) (failure (a)))) (q T11))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "45": {
                "goal": [{
                    "clause": 1,
                    "scope": 6,
                    "term": "(q T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (letter T11) (',' (',' (!_2) (failure (a))) (q T11)))"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(',' (no (letter T6)) (q T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "46": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(',' (letter T11) (',' (',' (!_2) (failure (a))) (q T11)))"
                    },
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (!_2) (failure (a))) (q (x)))"
                    },
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (failure (a)) (q (x)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (no (letter T6)) (q T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(',' (failure (a)) (q (x)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T6)) (q T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 9,
                "label": "ONLY EVAL with clause\np(X6) :- ','(no(letter(X6)), q(X6)).\nand substitutionT1 -> T6,\nX6 -> T6,\nT5 -> T6"
            },
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 11,
                "label": "ONLY EVAL with clause\nno(X10) :- ','(call(X10), ','(!_2, failure(a))).\nand substitutionT6 -> T11,\nX10 -> letter(T11),\nT10 -> T11"
            },
            {
                "from": 11,
                "to": 13,
                "label": "CALL"
            },
            {
                "from": 13,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 16,
                "label": "EVAL with clause\nletter(x).\nand substitutionT11 -> x"
            },
            {
                "from": 15,
                "to": 17,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 16,
                "to": 19,
                "label": "CUT"
            },
            {
                "from": 17,
                "to": 23,
                "label": "FAILURE"
            },
            {
                "from": 19,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 21,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 23,
                "to": 24,
                "label": "FAILURE"
            },
            {
                "from": 24,
                "to": 27,
                "label": "ONLY EVAL with clause\nno(X15).\nand substitutionT6 -> T16,\nX15 -> letter(T16),\nT15 -> T16"
            },
            {
                "from": 27,
                "to": 45,
                "label": "CASE"
            },
            {
                "from": 45,
                "to": 46,
                "label": "EVAL with clause\nq(x) :- p(X18).\nand substitutionT16 -> x"
            },
            {
                "from": 45,
                "to": 48,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 46,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> X18"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)
   U1(f2_out1(X18)) -> f2_out1(x)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(f2_in) = 0
   POL(f2_out1(x_1)) = 1 + 2*x_1
   POL(x) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f2_out1(X18)) -> f2_out1(x)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

Q is empty.

----------------------------------------

(7) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in


----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F2_IN evaluates to  t =F2_IN

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F2_IN to F2_IN.




----------------------------------------

(16)
NO

----------------------------------------

(17) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(',' (no (letter X)) (q X))"
            ],
            [
                "(q (x))",
                "(p X1)"
            ],
            [
                "(letter (x))",
                null
            ],
            [
                "(no X)",
                "(',' X (',' (!) (failure (a))))"
            ],
            [
                "(no X2)",
                null
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (!_2) (failure (a))) (q (x)))"
                    },
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (call (letter T9)) (',' (!_2) (failure (a)))) (q T9))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (letter T9) (',' (',' (!_2) (failure (a))) (q T9)))"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (failure (a)) (q (x)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(',' (failure (a)) (q (x)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(',' (letter T9) (',' (',' (!_2) (failure (a))) (q T9)))"
                    },
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (no (letter T4)) (q T4))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (no (letter T4)) (q T4))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [{
                    "clause": 1,
                    "scope": 6,
                    "term": "(q T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(',' (no (letter T4)) (q T4))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "53": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p X15)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 7,
                "label": "ONLY EVAL with clause\np(X4) :- ','(no(letter(X4)), q(X4)).\nand substitutionT1 -> T4,\nX4 -> T4,\nT3 -> T4"
            },
            {
                "from": 7,
                "to": 8,
                "label": "CASE"
            },
            {
                "from": 8,
                "to": 12,
                "label": "ONLY EVAL with clause\nno(X7) :- ','(call(X7), ','(!_2, failure(a))).\nand substitutionT4 -> T9,\nX7 -> letter(T9),\nT8 -> T9"
            },
            {
                "from": 12,
                "to": 14,
                "label": "CALL"
            },
            {
                "from": 14,
                "to": 18,
                "label": "CASE"
            },
            {
                "from": 18,
                "to": 22,
                "label": "EVAL with clause\nletter(x).\nand substitutionT9 -> x"
            },
            {
                "from": 18,
                "to": 25,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 22,
                "to": 26,
                "label": "CUT"
            },
            {
                "from": 25,
                "to": 30,
                "label": "FAILURE"
            },
            {
                "from": 26,
                "to": 28,
                "label": "CASE"
            },
            {
                "from": 28,
                "to": 29,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 30,
                "to": 31,
                "label": "FAILURE"
            },
            {
                "from": 31,
                "to": 32,
                "label": "ONLY EVAL with clause\nno(X12).\nand substitutionT4 -> T14,\nX12 -> letter(T14),\nT13 -> T14"
            },
            {
                "from": 32,
                "to": 52,
                "label": "CASE"
            },
            {
                "from": 52,
                "to": 53,
                "label": "EVAL with clause\nq(x) :- p(X15).\nand substitutionT14 -> x"
            },
            {
                "from": 52,
                "to": 54,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 53,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> X15"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(18)
Obligation:
Triples:

pA(x) :- pA(X1).

Clauses:

pcA(x) :- pcA(X1).

Afs:

pA(x1)  =  pA


----------------------------------------

(19) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pA_in_1: (f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(x) -> U1_A(pA_in_a(X1))
   PA_IN_A(x) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

x  =  x

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1)  =  U1_A(x1)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(x) -> U1_A(pA_in_a(X1))
   PA_IN_A(x) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

x  =  x

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1)  =  U1_A(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(x) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
x  =  x

PA_IN_A(x1)  =  PA_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_A -> PA_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = PA_IN_A evaluates to  t =PA_IN_A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from PA_IN_A to PA_IN_A.




----------------------------------------

(26)
NO
