YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lb5SY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

shuffle(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 6 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

shuffle(A, [], A) :- !.
shuffle([], B, B) :- !.
shuffle(.(A, RestA), B, .(A, Shuffled)) :- shuffle(RestA, B, Shuffled).
shuffle(A, .(B, RestB), .(B, Shuffled)) :- shuffle(A, RestB, Shuffled).


Query: shuffle(g,g,a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

shuffle(A, [], A).
shuffle([], B, B).
shuffle(.(A, RestA), B, .(A, Shuffled)) :- shuffle(RestA, B, Shuffled).
shuffle(A, .(B, RestB), .(B, Shuffled)) :- shuffle(A, RestB, Shuffled).


Query: shuffle(g,g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

shuffle_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   shuffle_in_gga(A, [], A) -> shuffle_out_gga(A, [], A)
   shuffle_in_gga([], B, B) -> shuffle_out_gga([], B, B)
   shuffle_in_gga(.(A, RestA), B, .(A, Shuffled)) -> U1_gga(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   shuffle_in_gga(A, .(B, RestB), .(B, Shuffled)) -> U2_gga(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   U2_gga(A, B, RestB, Shuffled, shuffle_out_gga(A, RestB, Shuffled)) -> shuffle_out_gga(A, .(B, RestB), .(B, Shuffled))
   U1_gga(A, RestA, B, Shuffled, shuffle_out_gga(RestA, B, Shuffled)) -> shuffle_out_gga(.(A, RestA), B, .(A, Shuffled))

The argument filtering Pi contains the following mapping:
shuffle_in_gga(x1, x2, x3)  =  shuffle_in_gga(x1, x2)

[]  =  []

shuffle_out_gga(x1, x2, x3)  =  shuffle_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x2, x3, x5)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   shuffle_in_gga(A, [], A) -> shuffle_out_gga(A, [], A)
   shuffle_in_gga([], B, B) -> shuffle_out_gga([], B, B)
   shuffle_in_gga(.(A, RestA), B, .(A, Shuffled)) -> U1_gga(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   shuffle_in_gga(A, .(B, RestB), .(B, Shuffled)) -> U2_gga(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   U2_gga(A, B, RestB, Shuffled, shuffle_out_gga(A, RestB, Shuffled)) -> shuffle_out_gga(A, .(B, RestB), .(B, Shuffled))
   U1_gga(A, RestA, B, Shuffled, shuffle_out_gga(RestA, B, Shuffled)) -> shuffle_out_gga(.(A, RestA), B, .(A, Shuffled))

The argument filtering Pi contains the following mapping:
shuffle_in_gga(x1, x2, x3)  =  shuffle_in_gga(x1, x2)

[]  =  []

shuffle_out_gga(x1, x2, x3)  =  shuffle_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x2, x3, x5)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SHUFFLE_IN_GGA(.(A, RestA), B, .(A, Shuffled)) -> U1_GGA(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   SHUFFLE_IN_GGA(.(A, RestA), B, .(A, Shuffled)) -> SHUFFLE_IN_GGA(RestA, B, Shuffled)
   SHUFFLE_IN_GGA(A, .(B, RestB), .(B, Shuffled)) -> U2_GGA(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   SHUFFLE_IN_GGA(A, .(B, RestB), .(B, Shuffled)) -> SHUFFLE_IN_GGA(A, RestB, Shuffled)

The TRS R consists of the following rules:

   shuffle_in_gga(A, [], A) -> shuffle_out_gga(A, [], A)
   shuffle_in_gga([], B, B) -> shuffle_out_gga([], B, B)
   shuffle_in_gga(.(A, RestA), B, .(A, Shuffled)) -> U1_gga(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   shuffle_in_gga(A, .(B, RestB), .(B, Shuffled)) -> U2_gga(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   U2_gga(A, B, RestB, Shuffled, shuffle_out_gga(A, RestB, Shuffled)) -> shuffle_out_gga(A, .(B, RestB), .(B, Shuffled))
   U1_gga(A, RestA, B, Shuffled, shuffle_out_gga(RestA, B, Shuffled)) -> shuffle_out_gga(.(A, RestA), B, .(A, Shuffled))

The argument filtering Pi contains the following mapping:
shuffle_in_gga(x1, x2, x3)  =  shuffle_in_gga(x1, x2)

[]  =  []

shuffle_out_gga(x1, x2, x3)  =  shuffle_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x2, x3, x5)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

SHUFFLE_IN_GGA(x1, x2, x3)  =  SHUFFLE_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x2, x3, x5)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SHUFFLE_IN_GGA(.(A, RestA), B, .(A, Shuffled)) -> U1_GGA(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   SHUFFLE_IN_GGA(.(A, RestA), B, .(A, Shuffled)) -> SHUFFLE_IN_GGA(RestA, B, Shuffled)
   SHUFFLE_IN_GGA(A, .(B, RestB), .(B, Shuffled)) -> U2_GGA(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   SHUFFLE_IN_GGA(A, .(B, RestB), .(B, Shuffled)) -> SHUFFLE_IN_GGA(A, RestB, Shuffled)

The TRS R consists of the following rules:

   shuffle_in_gga(A, [], A) -> shuffle_out_gga(A, [], A)
   shuffle_in_gga([], B, B) -> shuffle_out_gga([], B, B)
   shuffle_in_gga(.(A, RestA), B, .(A, Shuffled)) -> U1_gga(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   shuffle_in_gga(A, .(B, RestB), .(B, Shuffled)) -> U2_gga(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   U2_gga(A, B, RestB, Shuffled, shuffle_out_gga(A, RestB, Shuffled)) -> shuffle_out_gga(A, .(B, RestB), .(B, Shuffled))
   U1_gga(A, RestA, B, Shuffled, shuffle_out_gga(RestA, B, Shuffled)) -> shuffle_out_gga(.(A, RestA), B, .(A, Shuffled))

The argument filtering Pi contains the following mapping:
shuffle_in_gga(x1, x2, x3)  =  shuffle_in_gga(x1, x2)

[]  =  []

shuffle_out_gga(x1, x2, x3)  =  shuffle_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x2, x3, x5)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

SHUFFLE_IN_GGA(x1, x2, x3)  =  SHUFFLE_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x2, x3, x5)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SHUFFLE_IN_GGA(A, .(B, RestB), .(B, Shuffled)) -> SHUFFLE_IN_GGA(A, RestB, Shuffled)
   SHUFFLE_IN_GGA(.(A, RestA), B, .(A, Shuffled)) -> SHUFFLE_IN_GGA(RestA, B, Shuffled)

The TRS R consists of the following rules:

   shuffle_in_gga(A, [], A) -> shuffle_out_gga(A, [], A)
   shuffle_in_gga([], B, B) -> shuffle_out_gga([], B, B)
   shuffle_in_gga(.(A, RestA), B, .(A, Shuffled)) -> U1_gga(A, RestA, B, Shuffled, shuffle_in_gga(RestA, B, Shuffled))
   shuffle_in_gga(A, .(B, RestB), .(B, Shuffled)) -> U2_gga(A, B, RestB, Shuffled, shuffle_in_gga(A, RestB, Shuffled))
   U2_gga(A, B, RestB, Shuffled, shuffle_out_gga(A, RestB, Shuffled)) -> shuffle_out_gga(A, .(B, RestB), .(B, Shuffled))
   U1_gga(A, RestA, B, Shuffled, shuffle_out_gga(RestA, B, Shuffled)) -> shuffle_out_gga(.(A, RestA), B, .(A, Shuffled))

The argument filtering Pi contains the following mapping:
shuffle_in_gga(x1, x2, x3)  =  shuffle_in_gga(x1, x2)

[]  =  []

shuffle_out_gga(x1, x2, x3)  =  shuffle_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x2, x3, x5)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

SHUFFLE_IN_GGA(x1, x2, x3)  =  SHUFFLE_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SHUFFLE_IN_GGA(A, .(B, RestB), .(B, Shuffled)) -> SHUFFLE_IN_GGA(A, RestB, Shuffled)
   SHUFFLE_IN_GGA(.(A, RestA), B, .(A, Shuffled)) -> SHUFFLE_IN_GGA(RestA, B, Shuffled)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SHUFFLE_IN_GGA(x1, x2, x3)  =  SHUFFLE_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFFLE_IN_GGA(A, .(B, RestB)) -> SHUFFLE_IN_GGA(A, RestB)
   SHUFFLE_IN_GGA(.(A, RestA), B) -> SHUFFLE_IN_GGA(RestA, B)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SHUFFLE_IN_GGA(A, .(B, RestB)) -> SHUFFLE_IN_GGA(A, RestB)
The graph contains the following edges 1 >= 1, 2 > 2


*SHUFFLE_IN_GGA(.(A, RestA), B) -> SHUFFLE_IN_GGA(RestA, B)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(14)
YES
