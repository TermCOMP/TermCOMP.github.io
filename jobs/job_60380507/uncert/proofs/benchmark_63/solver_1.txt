YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0WsGy.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

duplicate(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 19 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

duplicate([], L) :- ','(!, eq(L, [])).
duplicate(X, .(H, .(H, Z))) :- ','(head(X, H), ','(tail(X, T), duplicate(T, Z))).
head([], X1).
head(.(H, X2), H).
tail([], []).
tail(.(X3, T), T).
eq(X, X).


Query: duplicate(g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(duplicate ([]) L)",
                "(',' (!) (eq L ([])))"
            ],
            [
                "(duplicate X (. H (. H Z)))",
                "(',' (head X H) (',' (tail X T) (duplicate T Z)))"
            ],
            [
                "(head ([]) X1)",
                null
            ],
            [
                "(head (. H X2) H)",
                null
            ],
            [
                "(tail ([]) ([]))",
                null
            ],
            [
                "(tail (. X3 T) T)",
                null
            ],
            [
                "(eq X X)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "193": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(',' (head T12 T15) (',' (tail T12 X15) (duplicate X15 T16)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(duplicate T12 T2)",
                        "(duplicate ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [
                        "X5",
                        "X15"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "120": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (head T12 T15) (',' (tail T12 X15) (duplicate X15 T16)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(duplicate T12 T2)",
                        "(duplicate ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [
                        "X5",
                        "X15"
                    ],
                    "exprvars": []
                }
            },
            "187": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(duplicate T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "189": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(',' (head T12 T15) (',' (tail T12 X15) (duplicate X15 T16)))"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(',' (head T12 T15) (',' (tail T12 X15) (duplicate X15 T16)))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(duplicate T12 T2)",
                        "(duplicate ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [
                        "X5",
                        "X15"
                    ],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(duplicate T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(duplicate T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "223": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(duplicate T32 T24)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T32"],
                    "free": [],
                    "exprvars": []
                }
            },
            "103": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(duplicate T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(duplicate T1 T2)",
                        "(duplicate ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "213": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(',' (tail (. T22 T23) X15) (duplicate X15 T24))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "105": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(eq T5 ([]))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_1) (eq T5 ([])))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(duplicate ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "117": {
                "goal": [{
                    "clause": 6,
                    "scope": 2,
                    "term": "(eq T5 ([]))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "118": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "206": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail (. T22 T23) X15) (duplicate X15 T24))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "207": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "209": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(',' (tail (. T22 T23) X15) (duplicate X15 T24))"
                    },
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(',' (tail (. T22 T23) X15) (duplicate X15 T24))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": ["X15"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 7,
                "label": "EVAL with clause\nduplicate([], X5) :- ','(!_1, eq(X5, [])).\nand substitutionT1 -> [],\nT2 -> T5,\nX5 -> T5,\nT4 -> T5"
            },
            {
                "from": 3,
                "to": 103,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 7,
                "to": 105,
                "label": "CUT"
            },
            {
                "from": 103,
                "to": 186,
                "label": "EVAL with clause\nduplicate(X12, .(X13, .(X13, X14))) :- ','(head(X12, X13), ','(tail(X12, X15), duplicate(X15, X14))).\nand substitutionT1 -> T12,\nX12 -> T12,\nX13 -> T15,\nX14 -> T16,\nT2 -> .(T15, .(T15, T16)),\nT13 -> T15,\nT14 -> T16"
            },
            {
                "from": 103,
                "to": 187,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 105,
                "to": 117,
                "label": "CASE"
            },
            {
                "from": 117,
                "to": 118,
                "label": "EVAL with clause\neq(X8, X8).\nand substitutionT5 -> [],\nX8 -> [],\nT8 -> []"
            },
            {
                "from": 117,
                "to": 119,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 118,
                "to": 120,
                "label": "SUCCESS"
            },
            {
                "from": 186,
                "to": 189,
                "label": "CASE"
            },
            {
                "from": 189,
                "to": 193,
                "label": "BACKTRACK\nfor clause: head([], X1)\nwith clash: (duplicate(T12, T2), duplicate([], X5))"
            },
            {
                "from": 193,
                "to": 206,
                "label": "EVAL with clause\nhead(.(X21, X22), X21).\nand substitutionX21 -> T22,\nX22 -> T23,\nT12 -> .(T22, T23),\nT15 -> T22,\nT16 -> T24"
            },
            {
                "from": 193,
                "to": 207,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 206,
                "to": 209,
                "label": "CASE"
            },
            {
                "from": 209,
                "to": 213,
                "label": "BACKTRACK\nfor clause: tail([], [])because of non-unification"
            },
            {
                "from": 213,
                "to": 223,
                "label": "ONLY EVAL with clause\ntail(.(X29, X30), X30).\nand substitutionT22 -> T31,\nX29 -> T31,\nT23 -> T32,\nX30 -> T32,\nX15 -> T32"
            },
            {
                "from": 223,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T32\nT2 -> T24"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

duplicateA(.(X1, X2), .(X1, .(X1, X3))) :- duplicateA(X2, X3).

Clauses:

duplicatecA([], []).
duplicatecA(.(X1, X2), .(X1, .(X1, X3))) :- duplicatecA(X2, X3).

Afs:

duplicateA(x1, x2)  =  duplicateA(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

duplicateA_in_2: (b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   DUPLICATEA_IN_GA(.(X1, X2), .(X1, .(X1, X3))) -> U1_GA(X1, X2, X3, duplicateA_in_ga(X2, X3))
   DUPLICATEA_IN_GA(.(X1, X2), .(X1, .(X1, X3))) -> DUPLICATEA_IN_GA(X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
duplicateA_in_ga(x1, x2)  =  duplicateA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

DUPLICATEA_IN_GA(x1, x2)  =  DUPLICATEA_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DUPLICATEA_IN_GA(.(X1, X2), .(X1, .(X1, X3))) -> U1_GA(X1, X2, X3, duplicateA_in_ga(X2, X3))
   DUPLICATEA_IN_GA(.(X1, X2), .(X1, .(X1, X3))) -> DUPLICATEA_IN_GA(X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
duplicateA_in_ga(x1, x2)  =  duplicateA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

DUPLICATEA_IN_GA(x1, x2)  =  DUPLICATEA_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DUPLICATEA_IN_GA(.(X1, X2), .(X1, .(X1, X3))) -> DUPLICATEA_IN_GA(X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

DUPLICATEA_IN_GA(x1, x2)  =  DUPLICATEA_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DUPLICATEA_IN_GA(.(X1, X2)) -> DUPLICATEA_IN_GA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DUPLICATEA_IN_GA(.(X1, X2)) -> DUPLICATEA_IN_GA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
