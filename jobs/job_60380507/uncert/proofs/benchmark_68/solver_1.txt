YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Nzvmi.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

fold(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

fold(X, [], Z) :- ','(!, eq(X, Z)).
fold(X, Y, Z) :- ','(head(Y, H), ','(tail(Y, T), ','(myop(X, H, V), fold(V, T, Z)))).
myop(a, b, c).
head([], X1).
head(.(H, X2), H).
tail([], []).
tail(.(X3, T), T).
eq(X, X).


Query: fold(g,g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 4,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(fold X ([]) Z)",
                "(',' (!) (eq X Z))"
            ],
            [
                "(fold X Y Z)",
                "(',' (head Y H) (',' (tail Y T) (',' (myop X H V) (fold V T Z))))"
            ],
            [
                "(myop (a) (b) (c))",
                null
            ],
            [
                "(head ([]) X1)",
                null
            ],
            [
                "(head (. H X2) H)",
                null
            ],
            [
                "(tail ([]) ([]))",
                null
            ],
            [
                "(tail (. X3 T) T)",
                null
            ],
            [
                "(eq X X)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "34": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(fold T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(fold T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "142": {
                "goal": [{
                    "clause": 7,
                    "scope": 2,
                    "term": "(eq T6 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "164": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(',' (head T16 X17) (',' (tail T16 X18) (',' (myop T15 X17 X19) (fold X19 X18 T18))))"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(',' (head T16 X17) (',' (tail T16 X18) (',' (myop T15 X17 X19) (fold X19 X18 T18))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(fold T15 T16 T3)",
                        "(fold X6 ([]) X7)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [
                        "X6",
                        "X7",
                        "X17",
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "144": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "145": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "310": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "135": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_1) (eq T6 T8))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(fold T6 ([]) T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "146": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(fold T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "137": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(fold T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(fold T1 T2 T3)",
                        "(fold X6 ([]) X7)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "159": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (head T16 X17) (',' (tail T16 X18) (',' (myop T15 X17 X19) (fold X19 X18 T18))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(fold T15 T16 T3)",
                        "(fold X6 ([]) X7)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [
                        "X6",
                        "X7",
                        "X17",
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "302": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(',' (head T16 X17) (',' (tail T16 X18) (',' (myop T15 X17 X19) (fold X19 X18 T18))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(fold T15 T16 T3)",
                        "(fold X6 ([]) X7)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [
                        "X6",
                        "X7",
                        "X17",
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "138": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(eq T6 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "303": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail (. T23 T24) X18) (',' (myop T15 T23 X19) (fold X19 X18 T18)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T23",
                        "T24"
                    ],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "304": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "305": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(',' (tail (. T23 T24) X18) (',' (myop T15 T23 X19) (fold X19 X18 T18)))"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(',' (tail (. T23 T24) X18) (',' (myop T15 T23 X19) (fold X19 X18 T18)))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T23",
                        "T24"
                    ],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "306": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(',' (tail (. T23 T24) X18) (',' (myop T15 T23 X19) (fold X19 X18 T18)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T23",
                        "T24"
                    ],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "307": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (myop T15 T31 X19) (fold X19 T32 T18))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T31",
                        "T32"
                    ],
                    "free": ["X19"],
                    "exprvars": []
                }
            },
            "308": {
                "goal": [{
                    "clause": 2,
                    "scope": 5,
                    "term": "(',' (myop T15 T31 X19) (fold X19 T32 T18))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T31",
                        "T32"
                    ],
                    "free": ["X19"],
                    "exprvars": []
                }
            },
            "309": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(fold (c) T32 T18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T32"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 4,
                "to": 34,
                "label": "CASE"
            },
            {
                "from": 34,
                "to": 135,
                "label": "EVAL with clause\nfold(X6, [], X7) :- ','(!_1, eq(X6, X7)).\nand substitutionT1 -> T6,\nX6 -> T6,\nT2 -> [],\nT3 -> T8,\nX7 -> T8,\nT7 -> T8"
            },
            {
                "from": 34,
                "to": 137,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 135,
                "to": 138,
                "label": "CUT"
            },
            {
                "from": 137,
                "to": 159,
                "label": "ONLY EVAL with clause\nfold(X14, X15, X16) :- ','(head(X15, X17), ','(tail(X15, X18), ','(myop(X14, X17, X19), fold(X19, X18, X16)))).\nand substitutionT1 -> T15,\nX14 -> T15,\nT2 -> T16,\nX15 -> T16,\nT3 -> T18,\nX16 -> T18,\nT17 -> T18"
            },
            {
                "from": 138,
                "to": 142,
                "label": "CASE"
            },
            {
                "from": 142,
                "to": 144,
                "label": "EVAL with clause\neq(X10, X10).\nand substitutionT6 -> T11,\nX10 -> T11,\nT8 -> T11"
            },
            {
                "from": 142,
                "to": 145,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 144,
                "to": 146,
                "label": "SUCCESS"
            },
            {
                "from": 159,
                "to": 164,
                "label": "CASE"
            },
            {
                "from": 164,
                "to": 302,
                "label": "BACKTRACK\nfor clause: head([], X1)\nwith clash: (fold(T15, T16, T3), fold(X6, [], X7))"
            },
            {
                "from": 302,
                "to": 303,
                "label": "EVAL with clause\nhead(.(X26, X27), X26).\nand substitutionX26 -> T23,\nX27 -> T24,\nT16 -> .(T23, T24),\nX17 -> T23"
            },
            {
                "from": 302,
                "to": 304,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 303,
                "to": 305,
                "label": "CASE"
            },
            {
                "from": 305,
                "to": 306,
                "label": "BACKTRACK\nfor clause: tail([], [])because of non-unification"
            },
            {
                "from": 306,
                "to": 307,
                "label": "ONLY EVAL with clause\ntail(.(X38, X39), X39).\nand substitutionT23 -> T31,\nX38 -> T31,\nT24 -> T32,\nX39 -> T32,\nX18 -> T32"
            },
            {
                "from": 307,
                "to": 308,
                "label": "CASE"
            },
            {
                "from": 308,
                "to": 309,
                "label": "EVAL with clause\nmyop(a, b, c).\nand substitutionT15 -> a,\nT31 -> b,\nX19 -> c"
            },
            {
                "from": 308,
                "to": 310,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 309,
                "to": 4,
                "label": "INSTANCE with matching:\nT1 -> c\nT2 -> T32\nT3 -> T18"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

foldA(a, .(b, X1), X2) :- foldA(c, X1, X2).

Clauses:

foldcA(X1, [], X1).
foldcA(a, .(b, X1), X2) :- foldcA(c, X1, X2).

Afs:

foldA(x1, x2, x3)  =  foldA(x1, x2)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

foldA_in_3: (b,b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   FOLDA_IN_GGA(a, .(b, X1), X2) -> U1_GGA(X1, X2, foldA_in_gga(c, X1, X2))
   FOLDA_IN_GGA(a, .(b, X1), X2) -> FOLDA_IN_GGA(c, X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
foldA_in_gga(x1, x2, x3)  =  foldA_in_gga(x1, x2)

a  =  a

.(x1, x2)  =  .(x1, x2)

b  =  b

c  =  c

FOLDA_IN_GGA(x1, x2, x3)  =  FOLDA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x1, x3)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FOLDA_IN_GGA(a, .(b, X1), X2) -> U1_GGA(X1, X2, foldA_in_gga(c, X1, X2))
   FOLDA_IN_GGA(a, .(b, X1), X2) -> FOLDA_IN_GGA(c, X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
foldA_in_gga(x1, x2, x3)  =  foldA_in_gga'(x1, x2)

a  =  a

.(x1, x2)  =  .(x1, x2)

b  =  b

c  =  c

FOLDA_IN_GGA(x1, x2, x3)  =  FOLDA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(6)
TRUE
