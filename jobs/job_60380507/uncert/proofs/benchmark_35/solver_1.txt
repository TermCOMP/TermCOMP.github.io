MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/zpExm.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

thief(g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (12) QDP
    (13) PrologToPiTRSProof [SOUND, 0 ms]
    (14) PiTRS
        (15) DependencyPairsProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (22) QDP
(23) PrologToTRSTransformerProof [SOUND, 0 ms]
(24) QTRS
    (25) DependencyPairsProof [EQUIVALENT, 0 ms]
    (26) QDP
    (27) DependencyGraphProof [EQUIVALENT, 0 ms]
    (28) QDP
    (29) UsableRulesProof [EQUIVALENT, 0 ms]
    (30) QDP
(31) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(32) TRIPLES
    (33) TriplesToPiDPProof [SOUND, 0 ms]
    (34) PiDP
    (35) DependencyGraphProof [EQUIVALENT, 0 ms]
    (36) PiDP
    (37) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (38) QDP
(39) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(40) IRSwT
    (41) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (42) IRSwT
    (43) IntTRSCompressionProof [EQUIVALENT, 15 ms]
    (44) IRSwT
    (45) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (46) IRSwT
    (47) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (48) IRSwT
    (49) FilterProof [EQUIVALENT, 0 ms]
    (50) IntTRS
    (51) IntTRSNonPeriodicNontermProof [COMPLETE, 2 ms]
    (52) NO


----------------------------------------

(0)
Obligation:
Clauses:

thief(john).
thief(X) :- ','(thief(X), !).


Query: thief(g)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

thief(john).
thief(X) :- thief(X).


Query: thief(g)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

thief_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

Pi is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> U1_G(X, thief_in_g(X))
   THIEF_IN_G(X) -> THIEF_IN_G(X)

The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> U1_G(X, thief_in_g(X))
   THIEF_IN_G(X) -> THIEF_IN_G(X)

The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> THIEF_IN_G(X)

The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> THIEF_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> THIEF_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

thief_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

The argument filtering Pi contains the following mapping:
thief_in_g(x1)  =  thief_in_g(x1)

john  =  john

thief_out_g(x1)  =  thief_out_g

U1_g(x1, x2)  =  U1_g(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

The argument filtering Pi contains the following mapping:
thief_in_g(x1)  =  thief_in_g(x1)

john  =  john

thief_out_g(x1)  =  thief_out_g

U1_g(x1, x2)  =  U1_g(x2)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> U1_G(X, thief_in_g(X))
   THIEF_IN_G(X) -> THIEF_IN_G(X)

The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

The argument filtering Pi contains the following mapping:
thief_in_g(x1)  =  thief_in_g(x1)

john  =  john

thief_out_g(x1)  =  thief_out_g

U1_g(x1, x2)  =  U1_g(x2)

THIEF_IN_G(x1)  =  THIEF_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> U1_G(X, thief_in_g(X))
   THIEF_IN_G(X) -> THIEF_IN_G(X)

The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

The argument filtering Pi contains the following mapping:
thief_in_g(x1)  =  thief_in_g(x1)

john  =  john

thief_out_g(x1)  =  thief_out_g

U1_g(x1, x2)  =  U1_g(x2)

THIEF_IN_G(x1)  =  THIEF_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> THIEF_IN_G(X)

The TRS R consists of the following rules:

   thief_in_g(john) -> thief_out_g(john)
   thief_in_g(X) -> U1_g(X, thief_in_g(X))
   U1_g(X, thief_out_g(X)) -> thief_out_g(X)

The argument filtering Pi contains the following mapping:
thief_in_g(x1)  =  thief_in_g(x1)

john  =  john

thief_out_g(x1)  =  thief_out_g

U1_g(x1, x2)  =  U1_g(x2)

THIEF_IN_G(x1)  =  THIEF_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> THIEF_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   THIEF_IN_G(X) -> THIEF_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(thief (john))",
                null
            ],
            [
                "(thief X)",
                "(',' (thief X) (!))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(thief (john))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "55": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "66": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(thief T1)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T1)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "56": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "67": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "57": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "58": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (thief T5) (!_1))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T5)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(thief T5)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T5)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(thief T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(thief T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(thief T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(thief (john))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "53": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (thief (john)) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 11,
                "label": "EVAL with clause\nthief(john).\nand substitutionT1 -> john"
            },
            {
                "from": 6,
                "to": 12,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 52,
                "label": "SUCCESS"
            },
            {
                "from": 12,
                "to": 58,
                "label": "ONLY EVAL with clause\nthief(X7) :- ','(thief(X7), !_1).\nand substitutionT1 -> T5,\nX7 -> T5"
            },
            {
                "from": 52,
                "to": 53,
                "label": "ONLY EVAL with clause\nthief(X3) :- ','(thief(X3), !_1).\nand substitutionX3 -> john"
            },
            {
                "from": 53,
                "to": 54,
                "label": "CASE"
            },
            {
                "from": 54,
                "to": 55,
                "label": "ONLY EVAL with clause\nthief(john).\nand substitution"
            },
            {
                "from": 55,
                "to": 56,
                "label": "CUT"
            },
            {
                "from": 56,
                "to": 57,
                "label": "SUCCESS"
            },
            {
                "from": 58,
                "to": 59,
                "label": "SPLIT 1"
            },
            {
                "from": 58,
                "to": 60,
                "label": "SPLIT 2\nnew knowledge:\nT5 is ground"
            },
            {
                "from": 59,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T5"
            },
            {
                "from": 60,
                "to": 66,
                "label": "CUT"
            },
            {
                "from": 66,
                "to": 67,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(24)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in(john) -> f2_out1
   f2_in(T5) -> U1(f58_in(T5), T5)
   U1(f58_out1, T5) -> f2_out1
   f60_in -> f60_out1
   f58_in(T5) -> U2(f2_in(T5), T5)
   U2(f2_out1, T5) -> U3(f60_in, T5)
   U3(f60_out1, T5) -> f58_out1

Q is empty.

----------------------------------------

(25) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T5) -> U1^1(f58_in(T5), T5)
   F2_IN(T5) -> F58_IN(T5)
   F58_IN(T5) -> U2^1(f2_in(T5), T5)
   F58_IN(T5) -> F2_IN(T5)
   U2^1(f2_out1, T5) -> U3^1(f60_in, T5)
   U2^1(f2_out1, T5) -> F60_IN

The TRS R consists of the following rules:

   f2_in(john) -> f2_out1
   f2_in(T5) -> U1(f58_in(T5), T5)
   U1(f58_out1, T5) -> f2_out1
   f60_in -> f60_out1
   f58_in(T5) -> U2(f2_in(T5), T5)
   U2(f2_out1, T5) -> U3(f60_in, T5)
   U3(f60_out1, T5) -> f58_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T5) -> F58_IN(T5)
   F58_IN(T5) -> F2_IN(T5)

The TRS R consists of the following rules:

   f2_in(john) -> f2_out1
   f2_in(T5) -> U1(f58_in(T5), T5)
   U1(f58_out1, T5) -> f2_out1
   f60_in -> f60_out1
   f58_in(T5) -> U2(f2_in(T5), T5)
   U2(f2_out1, T5) -> U3(f60_in, T5)
   U3(f60_out1, T5) -> f58_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T5) -> F58_IN(T5)
   F58_IN(T5) -> F2_IN(T5)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(thief (john))",
                null
            ],
            [
                "(thief X)",
                "(',' (thief X) (!))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (',' (thief T7) (!_3)) (!_1))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T7)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T7"],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(thief (john))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(thief T1)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T1)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (thief (john)) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(thief T7)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T7)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T7"],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "49": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_3) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(thief (john))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(thief T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(thief T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(thief T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (thief T3) (!_1))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T3)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "63": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(',' (thief T3) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(',' (thief T3) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(thief T3)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "64": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(',' (thief T3) (!_1))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T3)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "65": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 13,
                "label": "EVAL with clause\nthief(john).\nand substitutionT1 -> john"
            },
            {
                "from": 3,
                "to": 14,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 18,
                "label": "SUCCESS"
            },
            {
                "from": 14,
                "to": 30,
                "label": "ONLY EVAL with clause\nthief(X4) :- ','(thief(X4), !_1).\nand substitutionT1 -> T3,\nX4 -> T3"
            },
            {
                "from": 18,
                "to": 25,
                "label": "ONLY EVAL with clause\nthief(X2) :- ','(thief(X2), !_1).\nand substitutionX2 -> john"
            },
            {
                "from": 25,
                "to": 26,
                "label": "CASE"
            },
            {
                "from": 26,
                "to": 27,
                "label": "ONLY EVAL with clause\nthief(john).\nand substitution"
            },
            {
                "from": 27,
                "to": 28,
                "label": "CUT"
            },
            {
                "from": 28,
                "to": 29,
                "label": "SUCCESS"
            },
            {
                "from": 30,
                "to": 31,
                "label": "CASE"
            },
            {
                "from": 31,
                "to": 32,
                "label": "BACKTRACK\nfor clause: thief(john)\nwith clash: (thief(T3), thief(john))"
            },
            {
                "from": 32,
                "to": 33,
                "label": "ONLY EVAL with clause\nthief(X8) :- ','(thief(X8), !_3).\nand substitutionT3 -> T7,\nX8 -> T7"
            },
            {
                "from": 33,
                "to": 48,
                "label": "SPLIT 1"
            },
            {
                "from": 33,
                "to": 49,
                "label": "SPLIT 2\nnew knowledge:\nT7 is ground"
            },
            {
                "from": 48,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T7"
            },
            {
                "from": 49,
                "to": 63,
                "label": "CUT"
            },
            {
                "from": 63,
                "to": 64,
                "label": "CUT"
            },
            {
                "from": 64,
                "to": 65,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(32)
Obligation:
Triples:

thiefA(X1) :- thiefA(X1).

Clauses:

thiefcA(john).
thiefcA(john).
thiefcA(X1) :- thiefcA(X1).

Afs:

thiefA(x1)  =  thiefA(x1)


----------------------------------------

(33) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

thiefA_in_1: (b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   THIEFA_IN_G(X1) -> U1_G(X1, thiefA_in_g(X1))
   THIEFA_IN_G(X1) -> THIEFA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEFA_IN_G(X1) -> U1_G(X1, thiefA_in_g(X1))
   THIEFA_IN_G(X1) -> THIEFA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   THIEFA_IN_G(X1) -> THIEFA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   THIEFA_IN_G(X1) -> THIEFA_IN_G(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(39) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 4,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(thief (john))",
                null
            ],
            [
                "(thief X)",
                "(',' (thief X) (!))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "77": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(thief T5)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T5)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "68": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(thief (john))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "79": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "69": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(thief T1)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T1)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "4": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(thief T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(thief T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(thief T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "80": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "70": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(thief (john))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "71": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (thief (john)) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (thief (john)) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "74": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "75": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "76": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (thief T5) (!_1))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(thief T5)",
                        "(thief (john))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 4,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 68,
                "label": "EVAL with clause\nthief(john).\nand substitutionT1 -> john"
            },
            {
                "from": 5,
                "to": 69,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 68,
                "to": 70,
                "label": "SUCCESS"
            },
            {
                "from": 69,
                "to": 76,
                "label": "ONLY EVAL with clause\nthief(X7) :- ','(thief(X7), !_1).\nand substitutionT1 -> T5,\nX7 -> T5"
            },
            {
                "from": 70,
                "to": 71,
                "label": "ONLY EVAL with clause\nthief(X3) :- ','(thief(X3), !_1).\nand substitutionX3 -> john"
            },
            {
                "from": 71,
                "to": 72,
                "label": "CASE"
            },
            {
                "from": 72,
                "to": 73,
                "label": "ONLY EVAL with clause\nthief(john).\nand substitution"
            },
            {
                "from": 73,
                "to": 74,
                "label": "CUT"
            },
            {
                "from": 74,
                "to": 75,
                "label": "SUCCESS"
            },
            {
                "from": 76,
                "to": 77,
                "label": "SPLIT 1"
            },
            {
                "from": 76,
                "to": 78,
                "label": "SPLIT 2\nnew knowledge:\nT5 is ground"
            },
            {
                "from": 77,
                "to": 4,
                "label": "INSTANCE with matching:\nT1 -> T5"
            },
            {
                "from": 78,
                "to": 79,
                "label": "CUT"
            },
            {
                "from": 79,
                "to": 80,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(40)
Obligation:
Rules:
f78_in -> f79_in :|: TRUE
f79_out -> f78_out :|: TRUE
f5_out(T1) -> f4_out(T1) :|: TRUE
f4_in(x) -> f5_in(x) :|: TRUE
f76_in(T5) -> f77_in(T5) :|: TRUE
f77_out(x1) -> f78_in :|: TRUE
f78_out -> f76_out(x2) :|: TRUE
f69_in(x3) -> f76_in(x3) :|: TRUE
f76_out(x4) -> f69_out(x4) :|: TRUE
f4_out(x5) -> f77_out(x5) :|: TRUE
f77_in(x6) -> f4_in(x6) :|: TRUE
f79_in -> f79_out :|: TRUE
f5_in(x7) -> f69_in(x7) :|: TRUE
f5_in(john) -> f68_in :|: TRUE
f69_out(x8) -> f5_out(x8) :|: TRUE
f68_out -> f5_out(john) :|: TRUE
Start term: f4_in(T1)

----------------------------------------

(41) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f4_in(x) -> f5_in(x) :|: TRUE
f76_in(T5) -> f77_in(T5) :|: TRUE
f69_in(x3) -> f76_in(x3) :|: TRUE
f77_in(x6) -> f4_in(x6) :|: TRUE
f5_in(x7) -> f69_in(x7) :|: TRUE


----------------------------------------

(42)
Obligation:
Rules:
f4_in(x) -> f5_in(x) :|: TRUE
f76_in(T5) -> f77_in(T5) :|: TRUE
f69_in(x3) -> f76_in(x3) :|: TRUE
f77_in(x6) -> f4_in(x6) :|: TRUE
f5_in(x7) -> f69_in(x7) :|: TRUE

----------------------------------------

(43) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(44)
Obligation:
Rules:
f69_in(x3:0) -> f69_in(x3:0) :|: TRUE

----------------------------------------

(45) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(46)
Obligation:
Rules:
f69_in(x3:0) -> f69_in(x3:0) :|: TRUE

----------------------------------------

(47) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f69_in(x3:0) -> f69_in(x3:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(48)
Obligation:

Termination digraph:
Nodes:
(1) f69_in(x3:0) -> f69_in(x3:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(49) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f69_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(50)
Obligation:
Rules:
f69_in(x3:0) -> f69_in(x3:0) :|: TRUE

----------------------------------------

(51) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x3:0) -> f(1, x3:0) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(52)
NO
