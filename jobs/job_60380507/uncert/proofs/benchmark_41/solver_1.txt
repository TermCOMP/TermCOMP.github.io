MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/yl0wU.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

app(g,a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [SOUND, 0 ms]
        (12) QDP
        (13) TransformationProof [SOUND, 0 ms]
        (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) TransformationProof [SOUND, 0 ms]
        (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 4 ms]
        (26) QDP
        (27) DependencyGraphProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) TransformationProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) NonTerminationLoopProof [COMPLETE, 0 ms]
        (32) NO
    (33) PrologToPiTRSProof [SOUND, 0 ms]
    (34) PiTRS
        (35) DependencyPairsProof [EQUIVALENT, 0 ms]
        (36) PiDP
        (37) DependencyGraphProof [EQUIVALENT, 0 ms]
        (38) PiDP
        (39) UsableRulesProof [EQUIVALENT, 0 ms]
        (40) PiDP
        (41) PiDPToQDPProof [SOUND, 0 ms]
        (42) QDP
        (43) UsableRulesReductionPairsProof [EQUIVALENT, 21 ms]
        (44) QDP
(45) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(46) TRIPLES
    (47) TriplesToPiDPProof [SOUND, 0 ms]
    (48) PiDP
    (49) DependencyGraphProof [EQUIVALENT, 0 ms]
    (50) AND
        (51) PiDP
            (52) PiDPToQDPProof [SOUND, 0 ms]
            (53) QDP
            (54) NonTerminationLoopProof [COMPLETE, 0 ms]
            (55) NO
        (56) PiDP
            (57) PiDPToQDPProof [SOUND, 0 ms]
            (58) QDP
            (59) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (60) YES
(61) PrologToTRSTransformerProof [SOUND, 0 ms]
(62) QTRS
    (63) QTRSRRRProof [EQUIVALENT, 25 ms]
    (64) QTRS
    (65) QTRSRRRProof [EQUIVALENT, 5 ms]
    (66) QTRS
    (67) QTRSRRRProof [EQUIVALENT, 2 ms]
    (68) QTRS
    (69) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (70) QTRS
    (71) DependencyPairsProof [EQUIVALENT, 0 ms]
    (72) QDP
    (73) UsableRulesProof [EQUIVALENT, 0 ms]
    (74) QDP
    (75) QReductionProof [EQUIVALENT, 0 ms]
    (76) QDP
    (77) NonTerminationLoopProof [COMPLETE, 0 ms]
    (78) NO
(79) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(80) IRSwT
    (81) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (82) IRSwT
    (83) IntTRSCompressionProof [EQUIVALENT, 18 ms]
    (84) IRSwT
    (85) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (86) IRSwT
    (87) IRSwTTerminationDigraphProof [EQUIVALENT, 5 ms]
    (88) AND
        (89) IRSwT
            (90) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
            (91) IRSwT
            (92) TempFilterProof [SOUND, 2 ms]
            (93) IRSwT
            (94) IRSwTToQDPProof [SOUND, 0 ms]
            (95) QDP
            (96) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (97) YES
        (98) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

app([], L, L) :- !.
app(X, Y, .(H, Z)) :- ','(head(X, H), ','(tail(X, T), app(T, Y, Z))).
head([], X1).
head(.(X, X2), X).
tail([], []).
tail(.(X3, Xs), Xs).


Query: app(g,a,a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

app([], L, L).
app(X, Y, .(H, Z)) :- ','(head(X, H), ','(tail(X, T), app(T, Y, Z))).
head([], X1).
head(.(X, X2), X).
tail([], []).
tail(.(X3, Xs), Xs).


Query: app(g,a,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

app_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x1, x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x1, x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x6)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))
   APP_IN_GAA(X, Y, .(H, Z)) -> HEAD_IN_GA(X, H)
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> TAIL_IN_GA(X, T)
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> U3_GAA(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)

The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x1, x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x6)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

HEAD_IN_GA(x1, x2)  =  HEAD_IN_GA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x5)

TAIL_IN_GA(x1, x2)  =  TAIL_IN_GA(x1)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x1, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))
   APP_IN_GAA(X, Y, .(H, Z)) -> HEAD_IN_GA(X, H)
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> TAIL_IN_GA(X, T)
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> U3_GAA(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)

The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x1, x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x6)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

HEAD_IN_GA(x1, x2)  =  HEAD_IN_GA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x5)

TAIL_IN_GA(x1, x2)  =  TAIL_IN_GA(x1)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x1, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)
   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))

The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x1, x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x6)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)
   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))

The TRS R consists of the following rules:

   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)

The argument filtering Pi contains the following mapping:
[]  =  []

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x1, x2)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, head_out_ga(X)) -> U2_GAA(X, tail_in_ga(X))
   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X))

The TRS R consists of the following rules:

   tail_in_ga([]) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs)) -> tail_out_ga(.(X3, Xs), Xs)
   head_in_ga([]) -> head_out_ga([])
   head_in_ga(.(X, X2)) -> head_out_ga(.(X, X2))

The set Q consists of the following terms:

   tail_in_ga(x0)
   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U1_GAA(X, head_out_ga(X)) -> U2_GAA(X, tail_in_ga(X)) at position [1] we obtained the following new rules [LPAR04]:

   (U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], [])),U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], [])))
   (U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1)),U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1)))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X))
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))

The TRS R consists of the following rules:

   tail_in_ga([]) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs)) -> tail_out_ga(.(X3, Xs), Xs)
   head_in_ga([]) -> head_out_ga([])
   head_in_ga(.(X, X2)) -> head_out_ga(.(X, X2))

The set Q consists of the following terms:

   tail_in_ga(x0)
   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X))
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))

The TRS R consists of the following rules:

   head_in_ga([]) -> head_out_ga([])
   head_in_ga(.(X, X2)) -> head_out_ga(.(X, X2))

The set Q consists of the following terms:

   tail_in_ga(x0)
   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   tail_in_ga(x0)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X))
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))

The TRS R consists of the following rules:

   head_in_ga([]) -> head_out_ga([])
   head_in_ga(.(X, X2)) -> head_out_ga(.(X, X2))

The set Q consists of the following terms:

   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X)) at position [1] we obtained the following new rules [LPAR04]:

   (APP_IN_GAA([]) -> U1_GAA([], head_out_ga([])),APP_IN_GAA([]) -> U1_GAA([], head_out_ga([])))
   (APP_IN_GAA(.(x0, x1)) -> U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))),APP_IN_GAA(.(x0, x1)) -> U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))
   APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
   APP_IN_GAA(.(x0, x1)) -> U1_GAA(.(x0, x1), head_out_ga(.(x0, x1)))

The TRS R consists of the following rules:

   head_in_ga([]) -> head_out_ga([])
   head_in_ga(.(X, X2)) -> head_out_ga(.(X, X2))

The set Q consists of the following terms:

   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))
   APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
   APP_IN_GAA(.(x0, x1)) -> U1_GAA(.(x0, x1), head_out_ga(.(x0, x1)))

R is empty.
The set Q consists of the following terms:

   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   head_in_ga(x0)


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))
   APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
   APP_IN_GAA(.(x0, x1)) -> U1_GAA(.(x0, x1), head_out_ga(.(x0, x1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U1_GAA(.(x0, x1), head_out_ga(.(x0, x1))) -> U2_GAA(.(x0, x1), tail_out_ga(.(x0, x1), x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
U2_GAA(x1, x2)  =  x2

tail_out_ga(x1, x2)  =  x2

APP_IN_GAA(x1)  =  x1

U1_GAA(x1, x2)  =  x2

head_out_ga(x1)  =  x1

[]  =  []

.(x1, x2)  =  .(x2)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   []=1
   ._1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
   APP_IN_GAA(.(x0, x1)) -> U1_GAA(.(x0, x1), head_out_ga(.(x0, x1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GAA(X, tail_out_ga(X, T)) -> APP_IN_GAA(T) we obtained the following new rules [LPAR04]:

   (U2_GAA([], tail_out_ga([], [])) -> APP_IN_GAA([]),U2_GAA([], tail_out_ga([], [])) -> APP_IN_GAA([]))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
   U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
   U2_GAA([], tail_out_ga([], [])) -> APP_IN_GAA([])

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U1_GAA([], head_out_ga([])) evaluates to  t =U1_GAA([], head_out_ga([]))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], []))
with rule U1_GAA([], head_out_ga([])) -> U2_GAA([], tail_out_ga([], [])) at position [] and matcher [ ]

U2_GAA([], tail_out_ga([], [])) -> APP_IN_GAA([])
with rule U2_GAA([], tail_out_ga([], [])) -> APP_IN_GAA([]) at position [] and matcher [ ]

APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))
with rule APP_IN_GAA([]) -> U1_GAA([], head_out_ga([]))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(32)
NO

----------------------------------------

(33) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

app_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(34)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x6)



----------------------------------------

(35) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))
   APP_IN_GAA(X, Y, .(H, Z)) -> HEAD_IN_GA(X, H)
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> TAIL_IN_GA(X, T)
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> U3_GAA(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)

The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x6)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

HEAD_IN_GA(x1, x2)  =  HEAD_IN_GA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)

TAIL_IN_GA(x1, x2)  =  TAIL_IN_GA(x1)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))
   APP_IN_GAA(X, Y, .(H, Z)) -> HEAD_IN_GA(X, H)
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> TAIL_IN_GA(X, T)
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> U3_GAA(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)

The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x6)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

HEAD_IN_GA(x1, x2)  =  HEAD_IN_GA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)

TAIL_IN_GA(x1, x2)  =  TAIL_IN_GA(x1)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)
   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))

The TRS R consists of the following rules:

   app_in_gaa([], L, L) -> app_out_gaa([], L, L)
   app_in_gaa(X, Y, .(H, Z)) -> U1_gaa(X, Y, H, Z, head_in_ga(X, H))
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)
   U1_gaa(X, Y, H, Z, head_out_ga(X, H)) -> U2_gaa(X, Y, H, Z, tail_in_ga(X, T))
   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   U2_gaa(X, Y, H, Z, tail_out_ga(X, T)) -> U3_gaa(X, Y, H, Z, T, app_in_gaa(T, Y, Z))
   U3_gaa(X, Y, H, Z, T, app_out_gaa(T, Y, Z)) -> app_out_gaa(X, Y, .(H, Z))

The argument filtering Pi contains the following mapping:
app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga

.(x1, x2)  =  .(x1, x2)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x2)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x6)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, Y, H, Z, head_out_ga(X, H)) -> U2_GAA(X, Y, H, Z, tail_in_ga(X, T))
   U2_GAA(X, Y, H, Z, tail_out_ga(X, T)) -> APP_IN_GAA(T, Y, Z)
   APP_IN_GAA(X, Y, .(H, Z)) -> U1_GAA(X, Y, H, Z, head_in_ga(X, H))

The TRS R consists of the following rules:

   tail_in_ga([], []) -> tail_out_ga([], [])
   tail_in_ga(.(X3, Xs), Xs) -> tail_out_ga(.(X3, Xs), Xs)
   head_in_ga([], X1) -> head_out_ga([], X1)
   head_in_ga(.(X, X2), X) -> head_out_ga(.(X, X2), X)

The argument filtering Pi contains the following mapping:
[]  =  []

head_in_ga(x1, x2)  =  head_in_ga(x1)

head_out_ga(x1, x2)  =  head_out_ga

.(x1, x2)  =  .(x1, x2)

tail_in_ga(x1, x2)  =  tail_in_ga(x1)

tail_out_ga(x1, x2)  =  tail_out_ga(x2)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, head_out_ga) -> U2_GAA(tail_in_ga(X))
   U2_GAA(tail_out_ga(T)) -> APP_IN_GAA(T)
   APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X))

The TRS R consists of the following rules:

   tail_in_ga([]) -> tail_out_ga([])
   tail_in_ga(.(X3, Xs)) -> tail_out_ga(Xs)
   head_in_ga([]) -> head_out_ga
   head_in_ga(.(X, X2)) -> head_out_ga

The set Q consists of the following terms:

   tail_in_ga(x0)
   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   tail_in_ga(.(X3, Xs)) -> tail_out_ga(Xs)
   head_in_ga(.(X, X2)) -> head_out_ga
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + 2*x_2
   POL(APP_IN_GAA(x_1)) = 2*x_1
   POL(U1_GAA(x_1, x_2)) = x_1 + x_2
   POL(U2_GAA(x_1)) = x_1
   POL([]) = 0
   POL(head_in_ga(x_1)) = x_1
   POL(head_out_ga) = 0
   POL(tail_in_ga(x_1)) = x_1
   POL(tail_out_ga(x_1)) = 2*x_1


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, head_out_ga) -> U2_GAA(tail_in_ga(X))
   U2_GAA(tail_out_ga(T)) -> APP_IN_GAA(T)
   APP_IN_GAA(X) -> U1_GAA(X, head_in_ga(X))

The TRS R consists of the following rules:

   head_in_ga([]) -> head_out_ga
   tail_in_ga([]) -> tail_out_ga([])

The set Q consists of the following terms:

   tail_in_ga(x0)
   head_in_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(app ([]) L L)",
                "(!)"
            ],
            [
                "(app X Y (. H Z))",
                "(',' (head X H) (',' (tail X T) (app T Y Z)))"
            ],
            [
                "(head ([]) X1)",
                null
            ],
            [
                "(head (. X X2) X)",
                null
            ],
            [
                "(tail ([]) ([]))",
                null
            ],
            [
                "(tail (. X3 Xs) Xs)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "29": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(app ([]) T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "191": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (head T10 T14) (',' (tail T10 X14) (app X14 T15 T16)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T10 T2 T3)",
                        "(app ([]) X5 X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [
                        "X5",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "192": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (head T10 T14) (',' (tail T10 X14) (app X14 T15 T16)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T10 T2 T3)",
                        "(app ([]) X5 X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [
                        "X5",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "193": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail ([]) X14) (app X14 T22 T23))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "194": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "195": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(',' (tail ([]) X14) (app X14 T22 T23))"
                    },
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(',' (tail ([]) X14) (app X14 T22 T23))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "196": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(',' (tail ([]) X14) (app X14 T22 T23))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "197": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(',' (tail ([]) X14) (app X14 T22 T23))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "230": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "198": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app ([]) T22 T23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "155": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (head T10 T14) (',' (tail T10 X14) (app X14 T15 T16)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T10 T2 T3)",
                        "(app ([]) X5 X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [
                        "X5",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T43 T34 T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T43"],
                    "free": [],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "233": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail (. T32 T33) X14) (app X14 T34 T35))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33"
                    ],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "157": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (head T10 T14) (',' (tail T10 X14) (app X14 T15 T16)))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (head T10 T14) (',' (tail T10 X14) (app X14 T15 T16)))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(app T10 T2 T3)",
                        "(app ([]) X5 X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [
                        "X5",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(app T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(app T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "235": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "236": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(',' (tail (. T32 T33) X14) (app X14 T34 T35))"
                    },
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(',' (tail (. T32 T33) X14) (app X14 T34 T35))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33"
                    ],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "238": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(',' (tail (. T32 T33) X14) (app X14 T34 T35))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33"
                    ],
                    "free": ["X14"],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(app T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T1 T2 T3)",
                        "(app ([]) X5 X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 19,
                "label": "EVAL with clause\napp([], X5, X5) :- !_1.\nand substitutionT1 -> [],\nT2 -> T5,\nX5 -> T5,\nT3 -> T5"
            },
            {
                "from": 4,
                "to": 20,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 21,
                "label": "CUT"
            },
            {
                "from": 20,
                "to": 155,
                "label": "EVAL with clause\napp(X10, X11, .(X12, X13)) :- ','(head(X10, X12), ','(tail(X10, X14), app(X14, X11, X13))).\nand substitutionT1 -> T10,\nX10 -> T10,\nT2 -> T15,\nX11 -> T15,\nX12 -> T14,\nX13 -> T16,\nT3 -> .(T14, T16),\nT12 -> T14,\nT11 -> T15,\nT13 -> T16"
            },
            {
                "from": 20,
                "to": 156,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 21,
                "to": 29,
                "label": "SUCCESS"
            },
            {
                "from": 155,
                "to": 157,
                "label": "CASE"
            },
            {
                "from": 157,
                "to": 191,
                "label": "PARALLEL"
            },
            {
                "from": 157,
                "to": 192,
                "label": "PARALLEL"
            },
            {
                "from": 191,
                "to": 193,
                "label": "EVAL with clause\nhead([], X19).\nand substitutionT10 -> [],\nT14 -> T21,\nX19 -> T21,\nT15 -> T22,\nT16 -> T23"
            },
            {
                "from": 191,
                "to": 194,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 192,
                "to": 233,
                "label": "EVAL with clause\nhead(.(X30, X31), X30).\nand substitutionX30 -> T32,\nX31 -> T33,\nT10 -> .(T32, T33),\nT14 -> T32,\nT15 -> T34,\nT16 -> T35"
            },
            {
                "from": 192,
                "to": 235,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 193,
                "to": 195,
                "label": "CASE"
            },
            {
                "from": 195,
                "to": 196,
                "label": "PARALLEL"
            },
            {
                "from": 195,
                "to": 197,
                "label": "PARALLEL"
            },
            {
                "from": 196,
                "to": 198,
                "label": "ONLY EVAL with clause\ntail([], []).\nand substitutionX14 -> []"
            },
            {
                "from": 197,
                "to": 230,
                "label": "BACKTRACK\nfor clause: tail(.(X3, Xs), Xs)because of non-unification"
            },
            {
                "from": 198,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> []\nT2 -> T22\nT3 -> T23"
            },
            {
                "from": 233,
                "to": 236,
                "label": "CASE"
            },
            {
                "from": 236,
                "to": 238,
                "label": "BACKTRACK\nfor clause: tail([], [])because of non-unification"
            },
            {
                "from": 238,
                "to": 243,
                "label": "ONLY EVAL with clause\ntail(.(X38, X39), X39).\nand substitutionT32 -> T42,\nX38 -> T42,\nT33 -> T43,\nX39 -> T43,\nX14 -> T43"
            },
            {
                "from": 243,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T43\nT2 -> T34\nT3 -> T35"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(46)
Obligation:
Triples:

appA([], X1, .(X2, X3)) :- appA([], X1, X3).
appA(.(X1, X2), X3, .(X1, X4)) :- appA(X2, X3, X4).

Clauses:

appcA([], X1, X1).
appcA([], X1, .(X2, X3)) :- appcA([], X1, X3).
appcA(.(X1, X2), X3, .(X1, X4)) :- appcA(X2, X3, X4).

Afs:

appA(x1, x2, x3)  =  appA(x1)


----------------------------------------

(47) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

appA_in_3: (b,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA([], X1, .(X2, X3)) -> U1_GAA(X1, X2, X3, appA_in_gaa([], X1, X3))
   APPA_IN_GAA([], X1, .(X2, X3)) -> APPA_IN_GAA([], X1, X3)
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> U2_GAA(X1, X2, X3, X4, appA_in_gaa(X2, X3, X4))
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_GAA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
appA_in_gaa(x1, x2, x3)  =  appA_in_gaa(x1)

[]  =  []

.(x1, x2)  =  .(x2)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x4)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(48)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA([], X1, .(X2, X3)) -> U1_GAA(X1, X2, X3, appA_in_gaa([], X1, X3))
   APPA_IN_GAA([], X1, .(X2, X3)) -> APPA_IN_GAA([], X1, X3)
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> U2_GAA(X1, X2, X3, X4, appA_in_gaa(X2, X3, X4))
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_GAA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
appA_in_gaa(x1, x2, x3)  =  appA_in_gaa(x1)

[]  =  []

.(x1, x2)  =  .(x2)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x4)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(49) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(50)
Complex Obligation (AND)

----------------------------------------

(51)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA([], X1, .(X2, X3)) -> APPA_IN_GAA([], X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(52) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA([]) -> APPA_IN_GAA([])

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = APPA_IN_GAA([]) evaluates to  t =APPA_IN_GAA([])

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from APPA_IN_GAA([]) to APPA_IN_GAA([]).




----------------------------------------

(55)
NO

----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_GAA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA(.(X2)) -> APPA_IN_GAA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPA_IN_GAA(.(X2)) -> APPA_IN_GAA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(60)
YES

----------------------------------------

(61) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(app ([]) L L)",
                "(!)"
            ],
            [
                "(app X Y (. H Z))",
                "(',' (head X H) (',' (tail X T) (app T Y Z)))"
            ],
            [
                "(head ([]) X1)",
                null
            ],
            [
                "(head (. X X2) X)",
                null
            ],
            [
                "(tail ([]) ([]))",
                null
            ],
            [
                "(tail (. X3 Xs) Xs)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "220": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "221": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "254": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "211": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(app ([]) T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "222": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                    },
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "255": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(app T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T1 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X6"],
                    "exprvars": []
                }
            },
            "223": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "256": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                    },
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "213": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "224": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "257": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(app T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(app T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "214": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "225": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app ([]) T28 T29)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "258": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T49 T40 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T49"],
                    "free": [],
                    "exprvars": []
                }
            },
            "215": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "248": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "216": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "217": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "218": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "219": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 211,
                "label": "EVAL with clause\napp([], X6, X6) :- !_1.\nand substitutionT1 -> [],\nT2 -> T6,\nX6 -> T6,\nT3 -> T6"
            },
            {
                "from": 5,
                "to": 212,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 211,
                "to": 213,
                "label": "CUT"
            },
            {
                "from": 212,
                "to": 215,
                "label": "EVAL with clause\napp(X16, X17, .(X18, X19)) :- ','(head(X16, X18), ','(tail(X16, X20), app(X20, X17, X19))).\nand substitutionT1 -> T15,\nX16 -> T15,\nT2 -> T20,\nX17 -> T20,\nX18 -> T19,\nX19 -> T21,\nT3 -> .(T19, T21),\nT17 -> T19,\nT16 -> T20,\nT18 -> T21"
            },
            {
                "from": 212,
                "to": 216,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 213,
                "to": 214,
                "label": "SUCCESS"
            },
            {
                "from": 215,
                "to": 217,
                "label": "CASE"
            },
            {
                "from": 217,
                "to": 218,
                "label": "PARALLEL"
            },
            {
                "from": 217,
                "to": 219,
                "label": "PARALLEL"
            },
            {
                "from": 218,
                "to": 220,
                "label": "EVAL with clause\nhead([], X26).\nand substitutionT15 -> [],\nT19 -> T27,\nX26 -> T27,\nT20 -> T28,\nT21 -> T29"
            },
            {
                "from": 218,
                "to": 221,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 219,
                "to": 254,
                "label": "EVAL with clause\nhead(.(X37, X38), X37).\nand substitutionX37 -> T38,\nX38 -> T39,\nT15 -> .(T38, T39),\nT19 -> T38,\nT20 -> T40,\nT21 -> T41"
            },
            {
                "from": 219,
                "to": 255,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 220,
                "to": 222,
                "label": "CASE"
            },
            {
                "from": 222,
                "to": 223,
                "label": "PARALLEL"
            },
            {
                "from": 222,
                "to": 224,
                "label": "PARALLEL"
            },
            {
                "from": 223,
                "to": 225,
                "label": "ONLY EVAL with clause\ntail([], []).\nand substitutionX20 -> []"
            },
            {
                "from": 224,
                "to": 248,
                "label": "BACKTRACK\nfor clause: tail(.(X3, Xs), Xs)because of non-unification"
            },
            {
                "from": 225,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> []\nT2 -> T28\nT3 -> T29"
            },
            {
                "from": 254,
                "to": 256,
                "label": "CASE"
            },
            {
                "from": 256,
                "to": 257,
                "label": "BACKTRACK\nfor clause: tail([], [])because of non-unification"
            },
            {
                "from": 257,
                "to": 258,
                "label": "ONLY EVAL with clause\ntail(.(X45, X46), X46).\nand substitutionT38 -> T48,\nX45 -> T48,\nT39 -> T49,\nX46 -> T49,\nX20 -> T49"
            },
            {
                "from": 258,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T49\nT2 -> T40\nT3 -> T41"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(62)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in([]) -> f2_out1
   f2_in([]) -> U1(f2_in([]), [])
   U1(f2_out1, []) -> f2_out1
   f2_in(.(T48, T49)) -> U2(f2_in(T49), .(T48, T49))
   U2(f2_out1, .(T48, T49)) -> f2_out1

Q is empty.

----------------------------------------

(63) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U1(x_1, x_2)) = x_1 + 2*x_2
   POL(U2(x_1, x_2)) = x_1 + x_2
   POL([]) = 0
   POL(f2_in(x_1)) = 2 + 2*x_1
   POL(f2_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in([]) -> f2_out1




----------------------------------------

(64)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in([]) -> U1(f2_in([]), [])
   U1(f2_out1, []) -> f2_out1
   f2_in(.(T48, T49)) -> U2(f2_in(T49), .(T48, T49))
   U2(f2_out1, .(T48, T49)) -> f2_out1

Q is empty.

----------------------------------------

(65) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(U1(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U2(x_1, x_2)) = x_1 + x_2
   POL([]) = 0
   POL(f2_in(x_1)) = 2*x_1
   POL(f2_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in(.(T48, T49)) -> U2(f2_in(T49), .(T48, T49))
   U2(f2_out1, .(T48, T49)) -> f2_out1




----------------------------------------

(66)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in([]) -> U1(f2_in([]), [])
   U1(f2_out1, []) -> f2_out1

Q is empty.

----------------------------------------

(67) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = 2*x_1 + x_2
   POL([]) = 0
   POL(f2_in(x_1)) = 2*x_1
   POL(f2_out1) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f2_out1, []) -> f2_out1




----------------------------------------

(68)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in([]) -> U1(f2_in([]), [])

Q is empty.

----------------------------------------

(69) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(70)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in([]) -> U1(f2_in([]), [])

The set Q consists of the following terms:

   f2_in([])


----------------------------------------

(71) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN([]) -> F2_IN([])

The TRS R consists of the following rules:

   f2_in([]) -> U1(f2_in([]), [])

The set Q consists of the following terms:

   f2_in([])

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN([]) -> F2_IN([])

R is empty.
The set Q consists of the following terms:

   f2_in([])

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(75) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in([])


----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN([]) -> F2_IN([])

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F2_IN([]) evaluates to  t =F2_IN([])

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F2_IN([]) to F2_IN([]).




----------------------------------------

(78)
NO

----------------------------------------

(79) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(app ([]) L L)",
                "(!)"
            ],
            [
                "(app X Y (. H Z))",
                "(',' (head X H) (',' (tail X T) (app T Y Z)))"
            ],
            [
                "(head ([]) X1)",
                null
            ],
            [
                "(head (. X X2) X)",
                null
            ],
            [
                "(tail ([]) ([]))",
                null
            ],
            [
                "(tail (. X3 Xs) Xs)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "250": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "240": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "251": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                    },
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "252": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "231": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                    },
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "253": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T49 T40 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T49"],
                    "free": [],
                    "exprvars": []
                }
            },
            "232": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "234": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(',' (tail ([]) X20) (app X20 T28 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "158": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(app T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(app T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "246": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app ([]) T28 T29)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "247": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "226": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(app ([]) T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "237": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "227": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(app T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T1 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X6"],
                    "exprvars": []
                }
            },
            "249": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail (. T38 T39) X20) (app X20 T40 T41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "228": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "239": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (head T15 T19) (',' (tail T15 X20) (app X20 T20 T21)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(app T15 T2 T3)",
                        "(app ([]) X6 X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [
                        "X6",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "229": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 158,
                "label": "CASE"
            },
            {
                "from": 158,
                "to": 226,
                "label": "EVAL with clause\napp([], X6, X6) :- !_1.\nand substitutionT1 -> [],\nT2 -> T6,\nX6 -> T6,\nT3 -> T6"
            },
            {
                "from": 158,
                "to": 227,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 226,
                "to": 228,
                "label": "CUT"
            },
            {
                "from": 227,
                "to": 231,
                "label": "EVAL with clause\napp(X16, X17, .(X18, X19)) :- ','(head(X16, X18), ','(tail(X16, X20), app(X20, X17, X19))).\nand substitutionT1 -> T15,\nX16 -> T15,\nT2 -> T20,\nX17 -> T20,\nX18 -> T19,\nX19 -> T21,\nT3 -> .(T19, T21),\nT17 -> T19,\nT16 -> T20,\nT18 -> T21"
            },
            {
                "from": 227,
                "to": 232,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 228,
                "to": 229,
                "label": "SUCCESS"
            },
            {
                "from": 231,
                "to": 234,
                "label": "CASE"
            },
            {
                "from": 234,
                "to": 237,
                "label": "PARALLEL"
            },
            {
                "from": 234,
                "to": 239,
                "label": "PARALLEL"
            },
            {
                "from": 237,
                "to": 240,
                "label": "EVAL with clause\nhead([], X26).\nand substitutionT15 -> [],\nT19 -> T27,\nX26 -> T27,\nT20 -> T28,\nT21 -> T29"
            },
            {
                "from": 237,
                "to": 241,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 239,
                "to": 249,
                "label": "EVAL with clause\nhead(.(X37, X38), X37).\nand substitutionX37 -> T38,\nX38 -> T39,\nT15 -> .(T38, T39),\nT19 -> T38,\nT20 -> T40,\nT21 -> T41"
            },
            {
                "from": 239,
                "to": 250,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 240,
                "to": 242,
                "label": "CASE"
            },
            {
                "from": 242,
                "to": 244,
                "label": "PARALLEL"
            },
            {
                "from": 242,
                "to": 245,
                "label": "PARALLEL"
            },
            {
                "from": 244,
                "to": 246,
                "label": "ONLY EVAL with clause\ntail([], []).\nand substitutionX20 -> []"
            },
            {
                "from": 245,
                "to": 247,
                "label": "BACKTRACK\nfor clause: tail(.(X3, Xs), Xs)because of non-unification"
            },
            {
                "from": 246,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> []\nT2 -> T28\nT3 -> T29"
            },
            {
                "from": 249,
                "to": 251,
                "label": "CASE"
            },
            {
                "from": 251,
                "to": 252,
                "label": "BACKTRACK\nfor clause: tail([], [])because of non-unification"
            },
            {
                "from": 252,
                "to": 253,
                "label": "ONLY EVAL with clause\ntail(.(X45, X46), X46).\nand substitutionT38 -> T48,\nX45 -> T48,\nT39 -> T49,\nX46 -> T49,\nX20 -> T49"
            },
            {
                "from": 253,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T49\nT2 -> T40\nT3 -> T41"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(80)
Obligation:
Rules:
f232_out -> f227_out(T1) :|: TRUE
f227_in(x) -> f232_in :|: TRUE
f231_out(T15) -> f227_out(T15) :|: TRUE
f227_in(x1) -> f231_in(x1) :|: TRUE
f234_out(x2) -> f231_out(x2) :|: TRUE
f231_in(x3) -> f234_in(x3) :|: TRUE
f234_in(x4) -> f239_in(x4) :|: TRUE
f239_out(x5) -> f234_out(x5) :|: TRUE
f237_out(x6) -> f234_out(x6) :|: TRUE
f234_in(x7) -> f237_in(x7) :|: TRUE
f226_out -> f158_out([]) :|: TRUE
f227_out(x8) -> f158_out(x8) :|: TRUE
f158_in([]) -> f226_in :|: TRUE
f158_in(x9) -> f227_in(x9) :|: TRUE
f3_in(x10) -> f158_in(x10) :|: TRUE
f158_out(x11) -> f3_out(x11) :|: TRUE
f251_out(T38, T39) -> f249_out(T38, T39) :|: TRUE
f249_in(x12, x13) -> f251_in(x12, x13) :|: TRUE
f240_in -> f242_in :|: TRUE
f242_out -> f240_out :|: TRUE
f249_out(x14, x15) -> f239_out(.(x14, x15)) :|: TRUE
f239_in(x16) -> f250_in :|: TRUE
f239_in(.(x17, x18)) -> f249_in(x17, x18) :|: TRUE
f250_out -> f239_out(x19) :|: TRUE
f237_in([]) -> f240_in :|: TRUE
f241_out -> f237_out(x20) :|: TRUE
f240_out -> f237_out([]) :|: TRUE
f237_in(x21) -> f241_in :|: TRUE
f252_out(x22, x23) -> f251_out(x22, x23) :|: TRUE
f251_in(x24, x25) -> f252_in(x24, x25) :|: TRUE
f242_in -> f245_in :|: TRUE
f242_in -> f244_in :|: TRUE
f244_out -> f242_out :|: TRUE
f245_out -> f242_out :|: TRUE
f253_out(T49) -> f252_out(T48, T49) :|: TRUE
f252_in(x26, x27) -> f253_in(x27) :|: TRUE
f253_in(x28) -> f3_in(x28) :|: TRUE
f3_out(x29) -> f253_out(x29) :|: TRUE
f244_in -> f246_in :|: TRUE
f246_out -> f244_out :|: TRUE
f3_out([]) -> f246_out :|: TRUE
f246_in -> f3_in([]) :|: TRUE
Start term: f3_in(T1)

----------------------------------------

(81) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f227_in(x1) -> f231_in(x1) :|: TRUE
f231_in(x3) -> f234_in(x3) :|: TRUE
f234_in(x4) -> f239_in(x4) :|: TRUE
f234_in(x7) -> f237_in(x7) :|: TRUE
f158_in(x9) -> f227_in(x9) :|: TRUE
f3_in(x10) -> f158_in(x10) :|: TRUE
f249_in(x12, x13) -> f251_in(x12, x13) :|: TRUE
f240_in -> f242_in :|: TRUE
f239_in(.(x17, x18)) -> f249_in(x17, x18) :|: TRUE
f237_in([]) -> f240_in :|: TRUE
f251_in(x24, x25) -> f252_in(x24, x25) :|: TRUE
f242_in -> f244_in :|: TRUE
f252_in(x26, x27) -> f253_in(x27) :|: TRUE
f253_in(x28) -> f3_in(x28) :|: TRUE
f244_in -> f246_in :|: TRUE
f246_in -> f3_in([]) :|: TRUE


----------------------------------------

(82)
Obligation:
Rules:
f227_in(x1) -> f231_in(x1) :|: TRUE
f231_in(x3) -> f234_in(x3) :|: TRUE
f234_in(x4) -> f239_in(x4) :|: TRUE
f234_in(x7) -> f237_in(x7) :|: TRUE
f158_in(x9) -> f227_in(x9) :|: TRUE
f3_in(x10) -> f158_in(x10) :|: TRUE
f249_in(x12, x13) -> f251_in(x12, x13) :|: TRUE
f240_in -> f242_in :|: TRUE
f239_in(.(x17, x18)) -> f249_in(x17, x18) :|: TRUE
f237_in([]) -> f240_in :|: TRUE
f251_in(x24, x25) -> f252_in(x24, x25) :|: TRUE
f242_in -> f244_in :|: TRUE
f252_in(x26, x27) -> f253_in(x27) :|: TRUE
f253_in(x28) -> f3_in(x28) :|: TRUE
f244_in -> f246_in :|: TRUE
f246_in -> f3_in([]) :|: TRUE

----------------------------------------

(83) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(84)
Obligation:
Rules:
f3_in(.(x17:0, x18:0)) -> f3_in(x18:0) :|: TRUE
f3_in([]) -> f3_in([]) :|: TRUE

----------------------------------------

(85) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(86)
Obligation:
Rules:
f3_in(.(x17:0, x18:0)) -> f3_in(x18:0) :|: TRUE
f3_in([]) -> f3_in([]) :|: TRUE

----------------------------------------

(87) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3_in(.(x17:0, x18:0)) -> f3_in(x18:0) :|: TRUE
(2) f3_in([]) -> f3_in([]) :|: TRUE

Arcs:
(1) -> (1), (2)
(2) -> (2)

This digraph is fully evaluated!
----------------------------------------

(88)
Complex Obligation (AND)

----------------------------------------

(89)
Obligation:

Termination digraph:
Nodes:
(1) f3_in(.(x17:0, x18:0)) -> f3_in(x18:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(90) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(91)
Obligation:
Rules:
f3_in(.(x18:0)) -> f3_in(x18:0) :|: TRUE

----------------------------------------

(92) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(93)
Obligation:
Rules:
f3_in(.(x18:0)) -> f3_in(x18:0)

----------------------------------------

(94) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f3_in(.(x18:0)) -> f3_in(x18:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(96) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f3_in(.(x18:0)) -> f3_in(x18:0)
The graph contains the following edges 1 > 1


----------------------------------------

(97)
YES

----------------------------------------

(98)
Obligation:

Termination digraph:
Nodes:
(1) f3_in([]) -> f3_in([]) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
