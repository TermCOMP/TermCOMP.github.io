MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/8sh7h.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [SOUND, 0 ms]
        (12) QDP
    (13) PrologToPiTRSProof [SOUND, 0 ms]
    (14) PiTRS
        (15) DependencyPairsProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) PiDPToQDPProof [SOUND, 0 ms]
        (22) QDP
(23) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(24) IRSwT
    (25) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (26) IRSwT
    (27) IntTRSCompressionProof [EQUIVALENT, 24 ms]
    (28) IRSwT
    (29) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (30) IRSwT
    (31) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (32) IRSwT
    (33) FilterProof [EQUIVALENT, 0 ms]
    (34) IntTRS
    (35) IntTRSNonPeriodicNontermProof [COMPLETE, 4 ms]
    (36) NO
(37) PrologToTRSTransformerProof [SOUND, 0 ms]
(38) QTRS
    (39) QTRSRRRProof [EQUIVALENT, 25 ms]
    (40) QTRS
    (41) QTRSRRRProof [EQUIVALENT, 2 ms]
    (42) QTRS
    (43) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (44) QTRS
    (45) DependencyPairsProof [EQUIVALENT, 0 ms]
    (46) QDP
    (47) UsableRulesProof [EQUIVALENT, 0 ms]
    (48) QDP
    (49) QReductionProof [EQUIVALENT, 0 ms]
    (50) QDP
(51) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(52) TRIPLES
    (53) TriplesToPiDPProof [SOUND, 0 ms]
    (54) PiDP
    (55) DependencyGraphProof [EQUIVALENT, 0 ms]
    (56) PiDP
    (57) PiDPToQDPProof [SOUND, 0 ms]
    (58) QDP


----------------------------------------

(0)
Obligation:
Clauses:

p(X) :- q(X).
p(X) :- p(X).
q(X) :- !.


Query: p(a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

p(X) :- q(X).
p(X) :- p(X).
q(X).


Query: p(a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_a(X))
   P_IN_A(X) -> Q_IN_A(X)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_A(x1)  =  Q_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_a(X))
   P_IN_A(X) -> Q_IN_A(X)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_A(x1)  =  Q_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_A -> P_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_a(X))
   P_IN_A(X) -> Q_IN_A(X)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_A(x1)  =  Q_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_a(X))
   P_IN_A(X) -> Q_IN_A(X)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_A(x1)  =  Q_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_a(X))
   q_in_a(X) -> q_out_a(X)
   U1_a(X, q_out_a(X)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_a(x1)  =  q_in_a

q_out_a(x1)  =  q_out_a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_A -> P_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(q X)"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(q X)",
                "(!)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(q T9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "22": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 9,
                "label": "PARALLEL"
            },
            {
                "from": 8,
                "to": 10,
                "label": "ONLY EVAL with clause\np(X5) :- q(X5).\nand substitutionT1 -> T9,\nX5 -> T9,\nT8 -> T9"
            },
            {
                "from": 9,
                "to": 22,
                "label": "ONLY EVAL with clause\np(X12) :- p(X12).\nand substitutionT1 -> T18,\nX12 -> T18,\nT17 -> T18"
            },
            {
                "from": 10,
                "to": 11,
                "label": "CASE"
            },
            {
                "from": 11,
                "to": 12,
                "label": "ONLY EVAL with clause\nq(X8) :- !_2.\nand substitutionT9 -> T12,\nX8 -> T12"
            },
            {
                "from": 12,
                "to": 13,
                "label": "CUT"
            },
            {
                "from": 13,
                "to": 20,
                "label": "SUCCESS"
            },
            {
                "from": 22,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T18"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(24)
Obligation:
Rules:
f5_in -> f8_in :|: TRUE
f8_out -> f5_out :|: TRUE
f5_in -> f9_in :|: TRUE
f9_out -> f5_out :|: TRUE
f22_out -> f9_out :|: TRUE
f9_in -> f22_in :|: TRUE
f1_out -> f22_out :|: TRUE
f22_in -> f1_in :|: TRUE
f5_out -> f1_out :|: TRUE
f1_in -> f5_in :|: TRUE
Start term: f1_in

----------------------------------------

(25) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f5_in -> f9_in :|: TRUE
f9_in -> f22_in :|: TRUE
f22_in -> f1_in :|: TRUE
f1_in -> f5_in :|: TRUE


----------------------------------------

(26)
Obligation:
Rules:
f5_in -> f9_in :|: TRUE
f9_in -> f22_in :|: TRUE
f22_in -> f1_in :|: TRUE
f1_in -> f5_in :|: TRUE

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f5_in -> f5_in :|: TRUE

----------------------------------------

(29) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(30)
Obligation:
Rules:
f5_in -> f5_in :|: TRUE

----------------------------------------

(31) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5_in -> f5_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(32)
Obligation:

Termination digraph:
Nodes:
(1) f5_in -> f5_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(33) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f5_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(34)
Obligation:
Rules:
f5_in -> f5_in :|: TRUE

----------------------------------------

(35) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(36)
NO

----------------------------------------

(37) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(q X)"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(q X)",
                "(!)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "23": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(q T9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 2,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 6,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 14,
                "label": "ONLY EVAL with clause\np(X5) :- q(X5).\nand substitutionT1 -> T9,\nX5 -> T9,\nT8 -> T9"
            },
            {
                "from": 7,
                "to": 24,
                "label": "ONLY EVAL with clause\np(X12) :- p(X12).\nand substitutionT1 -> T18,\nX12 -> T18,\nT17 -> T18"
            },
            {
                "from": 14,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 17,
                "label": "ONLY EVAL with clause\nq(X8) :- !_2.\nand substitutionT9 -> T12,\nX8 -> T12"
            },
            {
                "from": 17,
                "to": 18,
                "label": "CUT"
            },
            {
                "from": 18,
                "to": 23,
                "label": "SUCCESS"
            },
            {
                "from": 24,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T18"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(38)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> f2_out1
   f2_in -> U1(f2_in)
   U1(f2_out1) -> f2_out1

Q is empty.

----------------------------------------

(39) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = x_1
   POL(f2_in) = 2
   POL(f2_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in -> f2_out1




----------------------------------------

(40)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)
   U1(f2_out1) -> f2_out1

Q is empty.

----------------------------------------

(41) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(f2_in) = 0
   POL(f2_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f2_out1) -> f2_out1




----------------------------------------

(42)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

Q is empty.

----------------------------------------

(43) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(44)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in


----------------------------------------

(45) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(q X)"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(q X)",
                "(!)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(q T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(q T4)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "31": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_2)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 25,
                "label": "CASE"
            },
            {
                "from": 25,
                "to": 26,
                "label": "ONLY EVAL with clause\np(X2) :- q(X2).\nand substitutionT1 -> T4,\nX2 -> T4,\nT3 -> T4"
            },
            {
                "from": 26,
                "to": 27,
                "label": "CASE"
            },
            {
                "from": 27,
                "to": 31,
                "label": "ONLY EVAL with clause\nq(X5) :- !_2.\nand substitutionT4 -> T7,\nX5 -> T7"
            },
            {
                "from": 31,
                "to": 32,
                "label": "CUT"
            },
            {
                "from": 32,
                "to": 33,
                "label": "SUCCESS"
            },
            {
                "from": 33,
                "to": 37,
                "label": "ONLY EVAL with clause\np(X9) :- p(X9).\nand substitutionT1 -> T13,\nX9 -> T13,\nT12 -> T13"
            },
            {
                "from": 37,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T13"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(52)
Obligation:
Triples:

pA(X1) :- pA(X1).

Clauses:

pcA(X1).
pcA(X1) :- pcA(X1).

Afs:

pA(x1)  =  pA


----------------------------------------

(53) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pA_in_1: (f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(X1) -> U1_A(X1, pA_in_a(X1))
   PA_IN_A(X1) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1, x2)  =  U1_A(x2)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(54)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(X1) -> U1_A(X1, pA_in_a(X1))
   PA_IN_A(X1) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1, x2)  =  U1_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(55) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(X1) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
PA_IN_A(x1)  =  PA_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_A -> PA_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.