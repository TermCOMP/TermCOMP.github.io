YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SG2Qv.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

len(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

len([], X) :- ','(!, eq(X, 0)).
len(Xs, s(N)) :- ','(tail(Xs, Ys), len(Ys, N)).
tail([], []).
tail(.(X, Xs), Xs).
eq(X, X).


Query: len(g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 21,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(len ([]) X)",
                "(',' (!) (eq X (0)))"
            ],
            [
                "(len Xs (s N))",
                "(',' (tail Xs Ys) (len Ys N))"
            ],
            [
                "(tail ([]) ([]))",
                null
            ],
            [
                "(tail (. X Xs) Xs)",
                null
            ],
            [
                "(eq X X)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(len T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(len T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (tail T11 X10) (len X10 T13))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(len T11 T2)",
                        "(len ([]) X2)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T11"],
                    "free": [
                        "X2",
                        "X10"
                    ],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_1) (eq T5 (0)))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(len ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(len T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(len T1 T2)",
                        "(len ([]) X2)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(',' (tail T11 X10) (len X10 T13))"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(',' (tail T11 X10) (len X10 T13))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(len T11 T2)",
                        "(len ([]) X2)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T11"],
                    "free": [
                        "X2",
                        "X10"
                    ],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(eq T5 (0))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(',' (tail T11 X10) (len X10 T13))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(len T11 T2)",
                        "(len ([]) X2)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T11"],
                    "free": [
                        "X2",
                        "X10"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "40": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(len T19 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T19"],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(eq T5 (0))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(len T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 21,
                "to": 23,
                "label": "CASE"
            },
            {
                "from": 23,
                "to": 25,
                "label": "EVAL with clause\nlen([], X2) :- ','(!_1, eq(X2, 0)).\nand substitutionT1 -> [],\nT2 -> T5,\nX2 -> T5,\nT4 -> T5"
            },
            {
                "from": 23,
                "to": 27,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 25,
                "to": 28,
                "label": "CUT"
            },
            {
                "from": 27,
                "to": 34,
                "label": "EVAL with clause\nlen(X8, s(X9)) :- ','(tail(X8, X10), len(X10, X9)).\nand substitutionT1 -> T11,\nX8 -> T11,\nX9 -> T13,\nT2 -> s(T13),\nT12 -> T13"
            },
            {
                "from": 27,
                "to": 35,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 28,
                "to": 30,
                "label": "CASE"
            },
            {
                "from": 30,
                "to": 31,
                "label": "EVAL with clause\neq(X5, X5).\nand substitutionT5 -> 0,\nX5 -> 0,\nT8 -> 0"
            },
            {
                "from": 30,
                "to": 32,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 31,
                "to": 33,
                "label": "SUCCESS"
            },
            {
                "from": 34,
                "to": 38,
                "label": "CASE"
            },
            {
                "from": 38,
                "to": 39,
                "label": "BACKTRACK\nfor clause: tail([], [])\nwith clash: (len(T11, T2), len([], X2))"
            },
            {
                "from": 39,
                "to": 40,
                "label": "EVAL with clause\ntail(.(X15, X16), X16).\nand substitutionX15 -> T18,\nX16 -> T19,\nT11 -> .(T18, T19),\nX10 -> T19"
            },
            {
                "from": 39,
                "to": 41,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 40,
                "to": 21,
                "label": "INSTANCE with matching:\nT1 -> T19\nT2 -> T13"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

lenA(.(X1, X2), s(X3)) :- lenA(X2, X3).

Clauses:

lencA([], 0).
lencA(.(X1, X2), s(X3)) :- lencA(X2, X3).

Afs:

lenA(x1, x2)  =  lenA(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

lenA_in_2: (b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   LENA_IN_GA(.(X1, X2), s(X3)) -> U1_GA(X1, X2, X3, lenA_in_ga(X2, X3))
   LENA_IN_GA(.(X1, X2), s(X3)) -> LENA_IN_GA(X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
lenA_in_ga(x1, x2)  =  lenA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

LENA_IN_GA(x1, x2)  =  LENA_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LENA_IN_GA(.(X1, X2), s(X3)) -> U1_GA(X1, X2, X3, lenA_in_ga(X2, X3))
   LENA_IN_GA(.(X1, X2), s(X3)) -> LENA_IN_GA(X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
lenA_in_ga(x1, x2)  =  lenA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

LENA_IN_GA(x1, x2)  =  LENA_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LENA_IN_GA(.(X1, X2), s(X3)) -> LENA_IN_GA(X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

LENA_IN_GA(x1, x2)  =  LENA_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENA_IN_GA(.(X1, X2)) -> LENA_IN_GA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENA_IN_GA(.(X1, X2)) -> LENA_IN_GA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
