MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/GkbTc.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

q()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) NonTerminationLoopProof [COMPLETE, 0 ms]
        (14) NO
    (15) PrologToPiTRSProof [SOUND, 0 ms]
    (16) PiTRS
        (17) DependencyPairsProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) PiDP
        (23) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) NonTerminationLoopProof [COMPLETE, 0 ms]
        (26) NO
(27) PrologToTRSTransformerProof [SOUND, 0 ms]
(28) QTRS
    (29) QTRSRRRProof [EQUIVALENT, 20 ms]
    (30) QTRS
    (31) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (32) QTRS
    (33) DependencyPairsProof [EQUIVALENT, 0 ms]
    (34) QDP
    (35) UsableRulesProof [EQUIVALENT, 0 ms]
    (36) QDP
    (37) QReductionProof [EQUIVALENT, 0 ms]
    (38) QDP
(39) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(40) TRIPLES
    (41) TriplesToPiDPProof [SOUND, 0 ms]
    (42) PiDP
    (43) DependencyGraphProof [EQUIVALENT, 0 ms]
    (44) PiDP
    (45) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (46) QDP
(47) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(48) IRSwT
    (49) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (50) IRSwT
    (51) IntTRSCompressionProof [EQUIVALENT, 9 ms]
    (52) IRSwT
    (53) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (54) IRSwT
    (55) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (56) IRSwT
    (57) FilterProof [EQUIVALENT, 0 ms]
    (58) IntTRS
    (59) IntTRSPeriodicNontermProof [COMPLETE, 2 ms]
    (60) NO


----------------------------------------

(0)
Obligation:
Clauses:

q :- p(X, X).
p(a, b) :- !.
p(a, a) :- p(a, a).


Query: q()
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

q :- p(X, X).
p(a, b).
p(a, a) :- p(a, a).


Query: q()
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_2: (f,f) (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg(x1, x2)

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg(x1, x2)

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_ -> U1_^1(p_in_aa(X, X))
   Q_IN_ -> P_IN_AA(X, X)
   P_IN_AA(a, a) -> U2_AA(p_in_gg(a, a))
   P_IN_AA(a, a) -> P_IN_GG(a, a)
   P_IN_GG(a, a) -> U2_GG(p_in_gg(a, a))
   P_IN_GG(a, a) -> P_IN_GG(a, a)

The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg(x1, x2)

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_

Q_IN_  =  Q_IN_

U1_^1(x1)  =  U1_^1(x1)

P_IN_AA(x1, x2)  =  P_IN_AA

U2_AA(x1)  =  U2_AA(x1)

P_IN_GG(x1, x2)  =  P_IN_GG(x1, x2)

U2_GG(x1)  =  U2_GG(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_ -> U1_^1(p_in_aa(X, X))
   Q_IN_ -> P_IN_AA(X, X)
   P_IN_AA(a, a) -> U2_AA(p_in_gg(a, a))
   P_IN_AA(a, a) -> P_IN_GG(a, a)
   P_IN_GG(a, a) -> U2_GG(p_in_gg(a, a))
   P_IN_GG(a, a) -> P_IN_GG(a, a)

The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg(x1, x2)

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_

Q_IN_  =  Q_IN_

U1_^1(x1)  =  U1_^1(x1)

P_IN_AA(x1, x2)  =  P_IN_AA

U2_AA(x1)  =  U2_AA(x1)

P_IN_GG(x1, x2)  =  P_IN_GG(x1, x2)

U2_GG(x1)  =  U2_GG(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GG(a, a) -> P_IN_GG(a, a)

The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg(x1, x2)

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_

P_IN_GG(x1, x2)  =  P_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GG(a, a) -> P_IN_GG(a, a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GG(a, a) -> P_IN_GG(a, a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_GG(a, a) evaluates to  t =P_IN_GG(a, a)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_GG(a, a) to P_IN_GG(a, a).




----------------------------------------

(14)
NO

----------------------------------------

(15) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_2: (f,f) (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(16)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_



----------------------------------------

(17) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_ -> U1_^1(p_in_aa(X, X))
   Q_IN_ -> P_IN_AA(X, X)
   P_IN_AA(a, a) -> U2_AA(p_in_gg(a, a))
   P_IN_AA(a, a) -> P_IN_GG(a, a)
   P_IN_GG(a, a) -> U2_GG(p_in_gg(a, a))
   P_IN_GG(a, a) -> P_IN_GG(a, a)

The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_

Q_IN_  =  Q_IN_

U1_^1(x1)  =  U1_^1(x1)

P_IN_AA(x1, x2)  =  P_IN_AA

U2_AA(x1)  =  U2_AA(x1)

P_IN_GG(x1, x2)  =  P_IN_GG(x1, x2)

U2_GG(x1)  =  U2_GG(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_ -> U1_^1(p_in_aa(X, X))
   Q_IN_ -> P_IN_AA(X, X)
   P_IN_AA(a, a) -> U2_AA(p_in_gg(a, a))
   P_IN_AA(a, a) -> P_IN_GG(a, a)
   P_IN_GG(a, a) -> U2_GG(p_in_gg(a, a))
   P_IN_GG(a, a) -> P_IN_GG(a, a)

The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_

Q_IN_  =  Q_IN_

U1_^1(x1)  =  U1_^1(x1)

P_IN_AA(x1, x2)  =  P_IN_AA

U2_AA(x1)  =  U2_AA(x1)

P_IN_GG(x1, x2)  =  P_IN_GG(x1, x2)

U2_GG(x1)  =  U2_GG(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GG(a, a) -> P_IN_GG(a, a)

The TRS R consists of the following rules:

   q_in_ -> U1_(p_in_aa(X, X))
   p_in_aa(a, b) -> p_out_aa(a, b)
   p_in_aa(a, a) -> U2_aa(p_in_gg(a, a))
   p_in_gg(a, b) -> p_out_gg(a, b)
   p_in_gg(a, a) -> U2_gg(p_in_gg(a, a))
   U2_gg(p_out_gg(a, a)) -> p_out_gg(a, a)
   U2_aa(p_out_gg(a, a)) -> p_out_aa(a, a)
   U1_(p_out_aa(X, X)) -> q_out_

The argument filtering Pi contains the following mapping:
q_in_  =  q_in_

U1_(x1)  =  U1_(x1)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa(x1, x2)

U2_aa(x1)  =  U2_aa(x1)

p_in_gg(x1, x2)  =  p_in_gg(x1, x2)

a  =  a

b  =  b

p_out_gg(x1, x2)  =  p_out_gg

U2_gg(x1)  =  U2_gg(x1)

q_out_  =  q_out_

P_IN_GG(x1, x2)  =  P_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GG(a, a) -> P_IN_GG(a, a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GG(a, a) -> P_IN_GG(a, a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_GG(a, a) evaluates to  t =P_IN_GG(a, a)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_GG(a, a) to P_IN_GG(a, a).




----------------------------------------

(26)
NO

----------------------------------------

(27) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q)",
                "(p X X)"
            ],
            [
                "(p (a) (b))",
                "(!)"
            ],
            [
                "(p (a) (a))",
                "(p (a) (a))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "12": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p X2 X2)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p X2 X2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p X2 X2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p X2 X2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(p (a) (a))"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(p (a) (a))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 7,
                "label": "ONLY EVAL with clause\nq :- p(X2, X2).\nand substitution"
            },
            {
                "from": 7,
                "to": 12,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 13,
                "label": "BACKTRACK\nfor clause: p(a, b) :- !because of non-unification"
            },
            {
                "from": 13,
                "to": 16,
                "label": "ONLY EVAL with clause\np(a, a) :- p(a, a).\nand substitutionX2 -> a"
            },
            {
                "from": 16,
                "to": 18,
                "label": "CASE"
            },
            {
                "from": 18,
                "to": 20,
                "label": "BACKTRACK\nfor clause: p(a, b) :- !because of non-unification"
            },
            {
                "from": 20,
                "to": 21,
                "label": "ONLY EVAL with clause\np(a, a) :- p(a, a).\nand substitution"
            },
            {
                "from": 21,
                "to": 16,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(28)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f16_in)
   U1(f16_out1) -> f2_out1
   f16_in -> U2(f16_in)
   U2(f16_out1) -> f16_out1

Q is empty.

----------------------------------------

(29) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(f16_in) = 0
   POL(f16_out1) = 2
   POL(f2_in) = 1
   POL(f2_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in -> U1(f16_in)
   U1(f16_out1) -> f2_out1
   U2(f16_out1) -> f16_out1




----------------------------------------

(30)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f16_in -> U2(f16_in)

Q is empty.

----------------------------------------

(31) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(32)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f16_in -> U2(f16_in)

The set Q consists of the following terms:

   f16_in


----------------------------------------

(33) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F16_IN -> F16_IN

The TRS R consists of the following rules:

   f16_in -> U2(f16_in)

The set Q consists of the following terms:

   f16_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F16_IN -> F16_IN

R is empty.
The set Q consists of the following terms:

   f16_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f16_in


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F16_IN -> F16_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q)",
                "(p X X)"
            ],
            [
                "(p (a) (b))",
                "(!)"
            ],
            [
                "(p (a) (a))",
                "(p (a) (a))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p X1 X1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X1"],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(p (a) (a))"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(p (a) (a))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p X1 X1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X1"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p X1 X1)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p X1 X1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X1"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 9,
                "label": "ONLY EVAL with clause\nq :- p(X1, X1).\nand substitution"
            },
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 11,
                "label": "BACKTRACK\nfor clause: p(a, b) :- !because of non-unification"
            },
            {
                "from": 11,
                "to": 14,
                "label": "ONLY EVAL with clause\np(a, a) :- p(a, a).\nand substitutionX1 -> a"
            },
            {
                "from": 14,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 17,
                "label": "BACKTRACK\nfor clause: p(a, b) :- !because of non-unification"
            },
            {
                "from": 17,
                "to": 19,
                "label": "ONLY EVAL with clause\np(a, a) :- p(a, a).\nand substitution"
            },
            {
                "from": 19,
                "to": 14,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(40)
Obligation:
Triples:

pA :- pA.
qB :- pA.

Clauses:

pcA :- pcA.

Afs:

qB  =  qB


----------------------------------------

(41) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   QB_IN_ -> U2_^1(pA_in_)
   QB_IN_ -> PA_IN_
   PA_IN_ -> U1_^1(pA_in_)
   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QB_IN_ -> U2_^1(pA_in_)
   QB_IN_ -> PA_IN_
   PA_IN_ -> U1_^1(pA_in_)
   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> PA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q)",
                "(p X X)"
            ],
            [
                "(p (a) (b))",
                "(!)"
            ],
            [
                "(p (a) (a))",
                "(p (a) (a))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p X2 X2)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p X2 X2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p X2 X2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(p (a) (a))"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(p (a) (a))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a) (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p X2 X2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 1,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 8,
                "label": "ONLY EVAL with clause\nq :- p(X2, X2).\nand substitution"
            },
            {
                "from": 8,
                "to": 22,
                "label": "CASE"
            },
            {
                "from": 22,
                "to": 23,
                "label": "BACKTRACK\nfor clause: p(a, b) :- !because of non-unification"
            },
            {
                "from": 23,
                "to": 24,
                "label": "ONLY EVAL with clause\np(a, a) :- p(a, a).\nand substitutionX2 -> a"
            },
            {
                "from": 24,
                "to": 25,
                "label": "CASE"
            },
            {
                "from": 25,
                "to": 26,
                "label": "BACKTRACK\nfor clause: p(a, b) :- !because of non-unification"
            },
            {
                "from": 26,
                "to": 27,
                "label": "ONLY EVAL with clause\np(a, a) :- p(a, a).\nand substitution"
            },
            {
                "from": 27,
                "to": 24,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(48)
Obligation:
Rules:
f25_out -> f24_out :|: TRUE
f24_in -> f25_in :|: TRUE
f27_in -> f24_in :|: TRUE
f24_out -> f27_out :|: TRUE
f25_in -> f26_in :|: TRUE
f26_out -> f25_out :|: TRUE
f26_in -> f27_in :|: TRUE
f27_out -> f26_out :|: TRUE
f6_out -> f1_out :|: TRUE
f1_in -> f6_in :|: TRUE
f8_out -> f6_out :|: TRUE
f6_in -> f8_in :|: TRUE
f8_in -> f22_in :|: TRUE
f22_out -> f8_out :|: TRUE
f23_out -> f22_out :|: TRUE
f22_in -> f23_in :|: TRUE
f24_out -> f23_out :|: TRUE
f23_in -> f24_in :|: TRUE
Start term: f1_in

----------------------------------------

(49) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f24_in -> f25_in :|: TRUE
f27_in -> f24_in :|: TRUE
f25_in -> f26_in :|: TRUE
f26_in -> f27_in :|: TRUE


----------------------------------------

(50)
Obligation:
Rules:
f24_in -> f25_in :|: TRUE
f27_in -> f24_in :|: TRUE
f25_in -> f26_in :|: TRUE
f26_in -> f27_in :|: TRUE

----------------------------------------

(51) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(52)
Obligation:
Rules:
f27_in -> f27_in :|: TRUE

----------------------------------------

(53) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(54)
Obligation:
Rules:
f27_in -> f27_in :|: TRUE

----------------------------------------

(55) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f27_in -> f27_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(56)
Obligation:

Termination digraph:
Nodes:
(1) f27_in -> f27_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(57) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f27_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(58)
Obligation:
Rules:
f27_in -> f27_in :|: TRUE

----------------------------------------

(59) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(60)
NO
