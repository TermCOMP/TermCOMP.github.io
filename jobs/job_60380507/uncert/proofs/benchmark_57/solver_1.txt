MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/3pEiB.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (12) QDP
    (13) PrologToPiTRSProof [SOUND, 0 ms]
    (14) PiTRS
        (15) DependencyPairsProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (22) QDP
(23) PrologToTRSTransformerProof [SOUND, 0 ms]
(24) QTRS
    (25) QTRSRRRProof [EQUIVALENT, 34 ms]
    (26) QTRS
    (27) QTRSRRRProof [EQUIVALENT, 4 ms]
    (28) QTRS
    (29) QTRSRRRProof [EQUIVALENT, 0 ms]
    (30) QTRS
    (31) QTRSRRRProof [EQUIVALENT, 2 ms]
    (32) QTRS
    (33) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (34) QTRS
    (35) DependencyPairsProof [EQUIVALENT, 0 ms]
    (36) QDP
    (37) UsableRulesProof [EQUIVALENT, 0 ms]
    (38) QDP
    (39) QReductionProof [EQUIVALENT, 0 ms]
    (40) QDP
(41) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(42) TRIPLES
    (43) TriplesToPiDPProof [SOUND, 0 ms]
    (44) PiDP
    (45) DependencyGraphProof [EQUIVALENT, 0 ms]
    (46) PiDP
    (47) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (48) QDP
(49) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(50) IRSwT
    (51) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (52) IRSwT
    (53) IntTRSCompressionProof [EQUIVALENT, 8 ms]
    (54) IRSwT
    (55) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (56) IRSwT
    (57) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (58) IRSwT
    (59) FilterProof [EQUIVALENT, 1 ms]
    (60) IntTRS
    (61) IntTRSPeriodicNontermProof [COMPLETE, 4 ms]
    (62) NO


----------------------------------------

(0)
Obligation:
Clauses:

p :- r.
r :- ','(!, q).
r :- q.
q.
q :- r.


Query: p()
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

p :- r.
r :- q.
r :- q.
q.
q :- r.


Query: p()
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(r_in_)
   P_IN_ -> R_IN_
   R_IN_ -> U2_^1(q_in_)
   R_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(r_in_)
   Q_IN_ -> R_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(r_in_)
   P_IN_ -> R_IN_
   R_IN_ -> U2_^1(q_in_)
   R_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(r_in_)
   Q_IN_ -> R_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   R_IN_ -> Q_IN_
   Q_IN_ -> R_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   R_IN_ -> Q_IN_
   Q_IN_ -> R_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   R_IN_ -> Q_IN_
   Q_IN_ -> R_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.

----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(r_in_)
   P_IN_ -> R_IN_
   R_IN_ -> U2_^1(q_in_)
   R_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(r_in_)
   Q_IN_ -> R_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(r_in_)
   P_IN_ -> R_IN_
   R_IN_ -> U2_^1(q_in_)
   R_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(r_in_)
   Q_IN_ -> R_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   R_IN_ -> Q_IN_
   Q_IN_ -> R_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(r_in_)
   r_in_ -> U2_(q_in_)
   q_in_ -> q_out_
   q_in_ -> U3_(r_in_)
   U3_(r_out_) -> q_out_
   U2_(q_out_) -> r_out_
   U1_(r_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   R_IN_ -> Q_IN_
   Q_IN_ -> R_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   R_IN_ -> Q_IN_
   Q_IN_ -> R_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(r)"
            ],
            [
                "(r)",
                "(',' (!) (q))"
            ],
            [
                "(r)",
                "(q)"
            ],
            [
                "(q)",
                null
            ],
            [
                "(q)",
                "(r)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(r)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_2) (q))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(q)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(q)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 12,
                "label": "ONLY EVAL with clause\np :- r.\nand substitution"
            },
            {
                "from": 12,
                "to": 29,
                "label": "CASE"
            },
            {
                "from": 29,
                "to": 30,
                "label": "ONLY EVAL with clause\nr :- ','(!_2, q).\nand substitution"
            },
            {
                "from": 30,
                "to": 31,
                "label": "CUT"
            },
            {
                "from": 31,
                "to": 32,
                "label": "CASE"
            },
            {
                "from": 32,
                "to": 33,
                "label": "PARALLEL"
            },
            {
                "from": 32,
                "to": 34,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 35,
                "label": "ONLY EVAL with clause\nq.\nand substitution"
            },
            {
                "from": 34,
                "to": 37,
                "label": "ONLY EVAL with clause\nq :- r.\nand substitution"
            },
            {
                "from": 35,
                "to": 36,
                "label": "SUCCESS"
            },
            {
                "from": 37,
                "to": 12,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(24)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f12_in)
   U1(f12_out1) -> f1_out1
   f12_in -> f12_out1
   f12_in -> U2(f12_in)
   U2(f12_out1) -> f12_out1

Q is empty.

----------------------------------------

(25) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(f12_in) = 0
   POL(f12_out1) = 0
   POL(f1_in) = 2
   POL(f1_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f1_in -> U1(f12_in)




----------------------------------------

(26)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   U1(f12_out1) -> f1_out1
   f12_in -> f12_out1
   f12_in -> U2(f12_in)
   U2(f12_out1) -> f12_out1

Q is empty.

----------------------------------------

(27) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2 + 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(f12_in) = 0
   POL(f12_out1) = 0
   POL(f1_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f12_out1) -> f1_out1




----------------------------------------

(28)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f12_in -> f12_out1
   f12_in -> U2(f12_in)
   U2(f12_out1) -> f12_out1

Q is empty.

----------------------------------------

(29) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = x_1
   POL(f12_in) = 2
   POL(f12_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f12_in -> f12_out1




----------------------------------------

(30)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f12_in -> U2(f12_in)
   U2(f12_out1) -> f12_out1

Q is empty.

----------------------------------------

(31) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(f12_in) = 0
   POL(f12_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U2(f12_out1) -> f12_out1




----------------------------------------

(32)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f12_in -> U2(f12_in)

Q is empty.

----------------------------------------

(33) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(34)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f12_in -> U2(f12_in)

The set Q consists of the following terms:

   f12_in


----------------------------------------

(35) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F12_IN -> F12_IN

The TRS R consists of the following rules:

   f12_in -> U2(f12_in)

The set Q consists of the following terms:

   f12_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F12_IN -> F12_IN

R is empty.
The set Q consists of the following terms:

   f12_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f12_in


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F12_IN -> F12_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 5,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(r)"
            ],
            [
                "(r)",
                "(',' (!) (q))"
            ],
            [
                "(r)",
                "(q)"
            ],
            [
                "(q)",
                null
            ],
            [
                "(q)",
                "(r)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "55": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "56": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "57": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(r)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_2) (q))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(q)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(q)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "53": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 5,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "ONLY EVAL with clause\np :- r.\nand substitution"
            },
            {
                "from": 7,
                "to": 8,
                "label": "CASE"
            },
            {
                "from": 8,
                "to": 9,
                "label": "ONLY EVAL with clause\nr :- ','(!_2, q).\nand substitution"
            },
            {
                "from": 9,
                "to": 10,
                "label": "CUT"
            },
            {
                "from": 10,
                "to": 52,
                "label": "CASE"
            },
            {
                "from": 52,
                "to": 53,
                "label": "PARALLEL"
            },
            {
                "from": 52,
                "to": 54,
                "label": "PARALLEL"
            },
            {
                "from": 53,
                "to": 55,
                "label": "ONLY EVAL with clause\nq.\nand substitution"
            },
            {
                "from": 54,
                "to": 57,
                "label": "ONLY EVAL with clause\nq :- r.\nand substitution"
            },
            {
                "from": 55,
                "to": 56,
                "label": "SUCCESS"
            },
            {
                "from": 57,
                "to": 7,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(42)
Obligation:
Triples:

rA :- rA.
pB :- rA.

Clauses:

rcA.
rcA :- rcA.

Afs:

pB  =  pB


----------------------------------------

(43) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_ -> U2_^1(rA_in_)
   PB_IN_ -> RA_IN_
   RA_IN_ -> U1_^1(rA_in_)
   RA_IN_ -> RA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_ -> U2_^1(rA_in_)
   PB_IN_ -> RA_IN_
   RA_IN_ -> U1_^1(rA_in_)
   RA_IN_ -> RA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(46)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   RA_IN_ -> RA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(47) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RA_IN_ -> RA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(r)"
            ],
            [
                "(r)",
                "(',' (!) (q))"
            ],
            [
                "(r)",
                "(q)"
            ],
            [
                "(q)",
                null
            ],
            [
                "(q)",
                "(r)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "58": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(r)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_2) (q))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "61": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(q)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(q)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "62": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "63": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(q)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "64": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "86": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "65": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 23,
                "label": "ONLY EVAL with clause\np :- r.\nand substitution"
            },
            {
                "from": 23,
                "to": 58,
                "label": "CASE"
            },
            {
                "from": 58,
                "to": 59,
                "label": "ONLY EVAL with clause\nr :- ','(!_2, q).\nand substitution"
            },
            {
                "from": 59,
                "to": 60,
                "label": "CUT"
            },
            {
                "from": 60,
                "to": 61,
                "label": "CASE"
            },
            {
                "from": 61,
                "to": 62,
                "label": "PARALLEL"
            },
            {
                "from": 61,
                "to": 63,
                "label": "PARALLEL"
            },
            {
                "from": 62,
                "to": 64,
                "label": "ONLY EVAL with clause\nq.\nand substitution"
            },
            {
                "from": 63,
                "to": 86,
                "label": "ONLY EVAL with clause\nq :- r.\nand substitution"
            },
            {
                "from": 64,
                "to": 65,
                "label": "SUCCESS"
            },
            {
                "from": 86,
                "to": 23,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(50)
Obligation:
Rules:
f58_out -> f23_out :|: TRUE
f23_in -> f58_in :|: TRUE
f63_in -> f86_in :|: TRUE
f86_out -> f63_out :|: TRUE
f62_out -> f61_out :|: TRUE
f63_out -> f61_out :|: TRUE
f61_in -> f62_in :|: TRUE
f61_in -> f63_in :|: TRUE
f59_in -> f60_in :|: TRUE
f60_out -> f59_out :|: TRUE
f61_out -> f60_out :|: TRUE
f60_in -> f61_in :|: TRUE
f59_out -> f58_out :|: TRUE
f58_in -> f59_in :|: TRUE
f23_out -> f86_out :|: TRUE
f86_in -> f23_in :|: TRUE
f4_out -> f3_out :|: TRUE
f3_in -> f4_in :|: TRUE
f23_out -> f4_out :|: TRUE
f4_in -> f23_in :|: TRUE
Start term: f3_in

----------------------------------------

(51) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f23_in -> f58_in :|: TRUE
f63_in -> f86_in :|: TRUE
f61_in -> f63_in :|: TRUE
f59_in -> f60_in :|: TRUE
f60_in -> f61_in :|: TRUE
f58_in -> f59_in :|: TRUE
f86_in -> f23_in :|: TRUE


----------------------------------------

(52)
Obligation:
Rules:
f23_in -> f58_in :|: TRUE
f63_in -> f86_in :|: TRUE
f61_in -> f63_in :|: TRUE
f59_in -> f60_in :|: TRUE
f60_in -> f61_in :|: TRUE
f58_in -> f59_in :|: TRUE
f86_in -> f23_in :|: TRUE

----------------------------------------

(53) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(54)
Obligation:
Rules:
f23_in -> f23_in :|: TRUE

----------------------------------------

(55) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(56)
Obligation:
Rules:
f23_in -> f23_in :|: TRUE

----------------------------------------

(57) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f23_in -> f23_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(58)
Obligation:

Termination digraph:
Nodes:
(1) f23_in -> f23_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(59) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f23_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(60)
Obligation:
Rules:
f23_in -> f23_in :|: TRUE

----------------------------------------

(61) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(62)
NO
