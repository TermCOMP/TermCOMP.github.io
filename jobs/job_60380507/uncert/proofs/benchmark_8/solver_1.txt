MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/Nrmls.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (12) QDP
    (13) PrologToPiTRSProof [SOUND, 0 ms]
    (14) PiTRS
        (15) DependencyPairsProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (22) QDP
(23) PrologToTRSTransformerProof [SOUND, 0 ms]
(24) QTRS
    (25) QTRSRRRProof [EQUIVALENT, 19 ms]
    (26) QTRS
    (27) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (28) QTRS
    (29) DependencyPairsProof [EQUIVALENT, 0 ms]
    (30) QDP
    (31) UsableRulesProof [EQUIVALENT, 0 ms]
    (32) QDP
    (33) QReductionProof [EQUIVALENT, 0 ms]
    (34) QDP
    (35) NonTerminationLoopProof [COMPLETE, 0 ms]
    (36) NO
(37) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(38) TRIPLES
    (39) TriplesToPiDPProof [SOUND, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) PiDP
    (43) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (44) QDP


----------------------------------------

(0)
Obligation:
Clauses:

p :- ','(q, !).
p :- p.
q :- ','(!, failure(a)).
q.
failure(b).


Query: p()
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

p :- q.
p :- p.
q :- failure(a).
q.
failure(b).


Query: p()
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

Pi is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(q_in_)
   P_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(failure_in_g(a))
   Q_IN_ -> FAILURE_IN_G(a)
   P_IN_ -> U2_^1(p_in_)
   P_IN_ -> P_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(q_in_)
   P_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(failure_in_g(a))
   Q_IN_ -> FAILURE_IN_G(a)
   P_IN_ -> U2_^1(p_in_)
   P_IN_ -> P_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> P_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> P_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_ -> P_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

The argument filtering Pi contains the following mapping:
p_in_  =  p_in_

U1_(x1)  =  U1_(x1)

q_in_  =  q_in_

U3_(x1)  =  U3_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

q_out_  =  q_out_

p_out_  =  p_out_

U2_(x1)  =  U2_(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

The argument filtering Pi contains the following mapping:
p_in_  =  p_in_

U1_(x1)  =  U1_(x1)

q_in_  =  q_in_

U3_(x1)  =  U3_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

q_out_  =  q_out_

p_out_  =  p_out_

U2_(x1)  =  U2_(x1)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(q_in_)
   P_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(failure_in_g(a))
   Q_IN_ -> FAILURE_IN_G(a)
   P_IN_ -> U2_^1(p_in_)
   P_IN_ -> P_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

The argument filtering Pi contains the following mapping:
p_in_  =  p_in_

U1_(x1)  =  U1_(x1)

q_in_  =  q_in_

U3_(x1)  =  U3_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

q_out_  =  q_out_

p_out_  =  p_out_

U2_(x1)  =  U2_(x1)

P_IN_  =  P_IN_

U1_^1(x1)  =  U1_^1(x1)

Q_IN_  =  Q_IN_

U3_^1(x1)  =  U3_^1'(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U2_^1(x1)  =  U2_^1(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> U1_^1(q_in_)
   P_IN_ -> Q_IN_
   Q_IN_ -> U3_^1(failure_in_g(a))
   Q_IN_ -> FAILURE_IN_G(a)
   P_IN_ -> U2_^1(p_in_)
   P_IN_ -> P_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

The argument filtering Pi contains the following mapping:
p_in_  =  p_in_

U1_(x1)  =  U1_(x1)

q_in_  =  q_in_

U3_(x1)  =  U3_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

q_out_  =  q_out_

p_out_  =  p_out_

U2_(x1)  =  U2_(x1)

P_IN_  =  P_IN_

U1_^1(x1)  =  U1_^1(x1)

Q_IN_  =  Q_IN_

U3_^1(x1)  =  U3_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U2_^1(x1)  =  U2_^1(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> P_IN_

The TRS R consists of the following rules:

   p_in_ -> U1_(q_in_)
   q_in_ -> U3_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U3_(failure_out_g(a)) -> q_out_
   q_in_ -> q_out_
   U1_(q_out_) -> p_out_
   p_in_ -> U2_(p_in_)
   U2_(p_out_) -> p_out_

The argument filtering Pi contains the following mapping:
p_in_  =  p_in_

U1_(x1)  =  U1_(x1)

q_in_  =  q_in_

U3_(x1)  =  U3_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

q_out_  =  q_out_

p_out_  =  p_out_

U2_(x1)  =  U2_(x1)

P_IN_  =  P_IN_


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_ -> P_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_ -> P_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(',' (q) (!))"
            ],
            [
                "(p)",
                "(p)"
            ],
            [
                "(q)",
                "(',' (!) (failure (a)))"
            ],
            [
                "(q)",
                null
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (!_2) (failure (a))) (!_1))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (failure (a)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(',' (failure (a)) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 5,
                "label": "ONLY EVAL with clause\np :- ','(q, !_1).\nand substitution"
            },
            {
                "from": 5,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "ONLY EVAL with clause\nq :- ','(!_2, failure(a)).\nand substitution"
            },
            {
                "from": 7,
                "to": 8,
                "label": "CUT"
            },
            {
                "from": 8,
                "to": 9,
                "label": "CASE"
            },
            {
                "from": 9,
                "to": 10,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 10,
                "to": 25,
                "label": "FAILURE"
            },
            {
                "from": 25,
                "to": 26,
                "label": "ONLY EVAL with clause\np :- p.\nand substitution"
            },
            {
                "from": 26,
                "to": 2,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(24)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)
   U1(f2_out1) -> f2_out1

Q is empty.

----------------------------------------

(25) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(f2_in) = 0
   POL(f2_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f2_out1) -> f2_out1




----------------------------------------

(26)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

Q is empty.

----------------------------------------

(27) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(28)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in


----------------------------------------

(29) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F2_IN evaluates to  t =F2_IN

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F2_IN to F2_IN.




----------------------------------------

(36)
NO

----------------------------------------

(37) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(',' (q) (!))"
            ],
            [
                "(p)",
                "(p)"
            ],
            [
                "(q)",
                "(',' (!) (failure (a)))"
            ],
            [
                "(q)",
                null
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "22": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (!_2) (failure (a))) (!_1))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (q) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (failure (a)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "21": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(',' (failure (a)) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 11,
                "label": "CASE"
            },
            {
                "from": 11,
                "to": 13,
                "label": "ONLY EVAL with clause\np :- ','(q, !_1).\nand substitution"
            },
            {
                "from": 13,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 17,
                "label": "ONLY EVAL with clause\nq :- ','(!_2, failure(a)).\nand substitution"
            },
            {
                "from": 17,
                "to": 18,
                "label": "CUT"
            },
            {
                "from": 18,
                "to": 21,
                "label": "CASE"
            },
            {
                "from": 21,
                "to": 22,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 22,
                "to": 47,
                "label": "FAILURE"
            },
            {
                "from": 47,
                "to": 48,
                "label": "ONLY EVAL with clause\np :- p.\nand substitution"
            },
            {
                "from": 48,
                "to": 3,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(38)
Obligation:
Triples:

pA :- pA.

Clauses:

pcA :- pcA.

Afs:

pA  =  pA


----------------------------------------

(39) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> U1_^1(pA_in_)
   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> U1_^1(pA_in_)
   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> PA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_ -> PA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.