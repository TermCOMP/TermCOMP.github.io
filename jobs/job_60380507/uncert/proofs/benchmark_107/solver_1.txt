YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HxvF5.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

bin_tree(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 13 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

bin_tree(void).
bin_tree(T) :- ','(no(empty(T)), ','(left(T, L), ','(right(T, R), ','(bin_tree(L), bin_tree(R))))).
left(void, void).
left(tree(X1, L, X2), L).
right(void, void).
right(tree(X3, X4, R), R).
empty(void).
no(X) :- ','(X, ','(!, failure(a))).
no(X5).
failure(b).


Query: bin_tree(g)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(bin_tree (void))",
                null
            ],
            [
                "(bin_tree T)",
                "(',' (no (empty T)) (',' (left T L) (',' (right T R) (',' (bin_tree L) (bin_tree R)))))"
            ],
            [
                "(left (void) (void))",
                null
            ],
            [
                "(left (tree X1 L X2) L)",
                null
            ],
            [
                "(right (void) (void))",
                null
            ],
            [
                "(right (tree X3 X4 R) R)",
                null
            ],
            [
                "(empty (void))",
                null
            ],
            [
                "(no X)",
                "(',' X (',' (!) (failure (a))))"
            ],
            [
                "(no X5)",
                null
            ],
            [
                "(failure (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "44": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (empty T6) (',' (',' (!_6) (failure (a))) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16))))))"
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(',' (no (empty T6)) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T6)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "66": {
                "goal": [{
                    "clause": 3,
                    "scope": 9,
                    "term": "(',' (left T9 X15) (',' (right T9 X16) (',' (bin_tree X15) (bin_tree X16))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T9)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(',' (empty (void)) (',' (',' (!_2) (failure (a))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9))))))"
                    },
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 2,
                        "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 8,
                        "term": "(',' (empty T6) (',' (',' (!_6) (failure (a))) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16))))))"
                    },
                    {
                        "clause": -1,
                        "scope": 8,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(',' (no (empty T6)) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T6)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "49": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 8,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(',' (no (empty T6)) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T6)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (!_2) (failure (a))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    },
                    {
                        "clause": -1,
                        "scope": 4,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 2,
                        "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "70": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (right (tree T16 T17 T18) X16) (',' (bin_tree T17) (bin_tree X16)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T16",
                        "T17",
                        "T18"
                    ],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "71": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "50": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(',' (no (empty T6)) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T6)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 10,
                        "term": "(',' (right (tree T16 T17 T18) X16) (',' (bin_tree T17) (bin_tree X16)))"
                    },
                    {
                        "clause": 5,
                        "scope": 10,
                        "term": "(',' (right (tree T16 T17 T18) X16) (',' (bin_tree T17) (bin_tree X16)))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T16",
                        "T17",
                        "T18"
                    ],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [{
                    "clause": 5,
                    "scope": 10,
                    "term": "(',' (right (tree T16 T17 T18) X16) (',' (bin_tree T17) (bin_tree X16)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T16",
                        "T17",
                        "T18"
                    ],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (failure (a)) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": 9,
                    "scope": 5,
                    "term": "(',' (failure (a)) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "11": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(bin_tree (void))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "55": {
                "goal": [{
                    "clause": 8,
                    "scope": 6,
                    "term": "(',' (no (empty T6)) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T6)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (bin_tree T26) (bin_tree T27))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T26",
                        "T27"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(bin_tree T1)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T1)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (no (empty T3)) (',' (left T3 X15) (',' (right T3 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T3)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(bin_tree (void))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(',' (no (empty T3)) (',' (left T3 X15) (',' (right T3 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(',' (no (empty T3)) (',' (left T3 X15) (',' (right T3 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T3)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 2,
                        "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    },
                    {
                        "clause": 8,
                        "scope": 2,
                        "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (call (empty (void))) (',' (!_2) (failure (a)))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    },
                    {
                        "clause": 8,
                        "scope": 2,
                        "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(bin_tree T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(bin_tree T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(bin_tree T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (left T9 X15) (',' (right T9 X16) (',' (bin_tree X15) (bin_tree X16))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T9)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(bin_tree T26)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T26"],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (empty (void)) (',' (',' (!_2) (failure (a))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9))))))"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 8,
                        "scope": 2,
                        "term": "(',' (no (empty (void))) (',' (left (void) X8) (',' (right (void) X9) (',' (bin_tree X8) (bin_tree X9)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (',' (call (empty T6)) (',' (!_6) (failure (a)))) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(',' (no (empty T6)) (',' (left T6 X15) (',' (right T6 X16) (',' (bin_tree X15) (bin_tree X16)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T6)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "64": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 9,
                        "term": "(',' (left T9 X15) (',' (right T9 X16) (',' (bin_tree X15) (bin_tree X16))))"
                    },
                    {
                        "clause": 3,
                        "scope": 9,
                        "term": "(',' (left T9 X15) (',' (right T9 X16) (',' (bin_tree X15) (bin_tree X16))))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(bin_tree T9)",
                        "(bin_tree (void))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "86": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(bin_tree T27)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 11,
                "label": "EVAL with clause\nbin_tree(void).\nand substitutionT1 -> void"
            },
            {
                "from": 5,
                "to": 13,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 14,
                "label": "SUCCESS"
            },
            {
                "from": 13,
                "to": 35,
                "label": "ONLY EVAL with clause\nbin_tree(X14) :- ','(no(empty(X14)), ','(left(X14, X15), ','(right(X14, X16), ','(bin_tree(X15), bin_tree(X16))))).\nand substitutionT1 -> T3,\nX14 -> T3"
            },
            {
                "from": 14,
                "to": 15,
                "label": "ONLY EVAL with clause\nbin_tree(X7) :- ','(no(empty(X7)), ','(left(X7, X8), ','(right(X7, X9), ','(bin_tree(X8), bin_tree(X9))))).\nand substitutionX7 -> void"
            },
            {
                "from": 15,
                "to": 17,
                "label": "CASE"
            },
            {
                "from": 17,
                "to": 18,
                "label": "ONLY EVAL with clause\nno(X12) :- ','(call(X12), ','(!_2, failure(a))).\nand substitutionX12 -> empty(void)"
            },
            {
                "from": 18,
                "to": 20,
                "label": "CALL"
            },
            {
                "from": 20,
                "to": 25,
                "label": "CASE"
            },
            {
                "from": 25,
                "to": 29,
                "label": "ONLY EVAL with clause\nempty(void).\nand substitution"
            },
            {
                "from": 29,
                "to": 30,
                "label": "CUT"
            },
            {
                "from": 30,
                "to": 31,
                "label": "CASE"
            },
            {
                "from": 31,
                "to": 32,
                "label": "BACKTRACK\nfor clause: failure(b)because of non-unification"
            },
            {
                "from": 35,
                "to": 37,
                "label": "CASE"
            },
            {
                "from": 37,
                "to": 42,
                "label": "ONLY EVAL with clause\nno(X19) :- ','(call(X19), ','(!_6, failure(a))).\nand substitutionT3 -> T6,\nX19 -> empty(T6)"
            },
            {
                "from": 42,
                "to": 44,
                "label": "CALL"
            },
            {
                "from": 44,
                "to": 47,
                "label": "CASE"
            },
            {
                "from": 47,
                "to": 49,
                "label": "BACKTRACK\nfor clause: empty(void)\nwith clash: (bin_tree(T6), bin_tree(void))"
            },
            {
                "from": 49,
                "to": 50,
                "label": "FAILURE"
            },
            {
                "from": 50,
                "to": 55,
                "label": "FAILURE"
            },
            {
                "from": 55,
                "to": 60,
                "label": "ONLY EVAL with clause\nno(X22).\nand substitutionT6 -> T9,\nX22 -> empty(T9)"
            },
            {
                "from": 60,
                "to": 64,
                "label": "CASE"
            },
            {
                "from": 64,
                "to": 66,
                "label": "BACKTRACK\nfor clause: left(void, void)\nwith clash: (bin_tree(T9), bin_tree(void))"
            },
            {
                "from": 66,
                "to": 70,
                "label": "EVAL with clause\nleft(tree(X29, X30, X31), X30).\nand substitutionX29 -> T16,\nX30 -> T17,\nX31 -> T18,\nT9 -> tree(T16, T17, T18),\nX15 -> T17"
            },
            {
                "from": 66,
                "to": 71,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 70,
                "to": 72,
                "label": "CASE"
            },
            {
                "from": 72,
                "to": 73,
                "label": "BACKTRACK\nfor clause: right(void, void)because of non-unification"
            },
            {
                "from": 73,
                "to": 78,
                "label": "ONLY EVAL with clause\nright(tree(X38, X39, X40), X40).\nand substitutionT16 -> T25,\nX38 -> T25,\nT17 -> T26,\nX39 -> T26,\nT18 -> T27,\nX40 -> T27,\nX16 -> T27"
            },
            {
                "from": 78,
                "to": 85,
                "label": "SPLIT 1"
            },
            {
                "from": 78,
                "to": 86,
                "label": "SPLIT 2\nnew knowledge:\nT26 is ground"
            },
            {
                "from": 85,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T26"
            },
            {
                "from": 86,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T27"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

bin_treeA(tree(X1, X2, X3)) :- bin_treeA(X2).
bin_treeA(tree(X1, X2, X3)) :- ','(bin_treecA(X2), bin_treeA(X3)).

Clauses:

bin_treecA(void).
bin_treecA(tree(X1, X2, X3)) :- ','(bin_treecA(X2), bin_treecA(X3)).

Afs:

bin_treeA(x1)  =  bin_treeA(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

bin_treeA_in_1: (b)

bin_treecA_in_1: (b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U1_G(X1, X2, X3, bin_treeA_in_g(X2))
   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> BIN_TREEA_IN_G(X2)
   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U2_G(X1, X2, X3, bin_treecA_in_g(X2))
   U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> U3_G(X1, X2, X3, bin_treeA_in_g(X3))
   U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> BIN_TREEA_IN_G(X3)

The TRS R consists of the following rules:

   bin_treecA_in_g(void) -> bin_treecA_out_g(void)
   bin_treecA_in_g(tree(X1, X2, X3)) -> U5_g(X1, X2, X3, bin_treecA_in_g(X2))
   U5_g(X1, X2, X3, bin_treecA_out_g(X2)) -> U6_g(X1, X2, X3, bin_treecA_in_g(X3))
   U6_g(X1, X2, X3, bin_treecA_out_g(X3)) -> bin_treecA_out_g(tree(X1, X2, X3))

Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U1_G(X1, X2, X3, bin_treeA_in_g(X2))
   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> BIN_TREEA_IN_G(X2)
   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U2_G(X1, X2, X3, bin_treecA_in_g(X2))
   U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> U3_G(X1, X2, X3, bin_treeA_in_g(X3))
   U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> BIN_TREEA_IN_G(X3)

The TRS R consists of the following rules:

   bin_treecA_in_g(void) -> bin_treecA_out_g(void)
   bin_treecA_in_g(tree(X1, X2, X3)) -> U5_g(X1, X2, X3, bin_treecA_in_g(X2))
   U5_g(X1, X2, X3, bin_treecA_out_g(X2)) -> U6_g(X1, X2, X3, bin_treecA_in_g(X3))
   U6_g(X1, X2, X3, bin_treecA_out_g(X3)) -> bin_treecA_out_g(tree(X1, X2, X3))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U2_G(X1, X2, X3, bin_treecA_in_g(X2))
   U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> BIN_TREEA_IN_G(X3)
   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> BIN_TREEA_IN_G(X2)

The TRS R consists of the following rules:

   bin_treecA_in_g(void) -> bin_treecA_out_g(void)
   bin_treecA_in_g(tree(X1, X2, X3)) -> U5_g(X1, X2, X3, bin_treecA_in_g(X2))
   U5_g(X1, X2, X3, bin_treecA_out_g(X2)) -> U6_g(X1, X2, X3, bin_treecA_in_g(X3))
   U6_g(X1, X2, X3, bin_treecA_out_g(X3)) -> bin_treecA_out_g(tree(X1, X2, X3))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U2_G(X1, X2, X3, bin_treecA_in_g(X2))
   U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> BIN_TREEA_IN_G(X3)
   BIN_TREEA_IN_G(tree(X1, X2, X3)) -> BIN_TREEA_IN_G(X2)

The TRS R consists of the following rules:

   bin_treecA_in_g(void) -> bin_treecA_out_g(void)
   bin_treecA_in_g(tree(X1, X2, X3)) -> U5_g(X1, X2, X3, bin_treecA_in_g(X2))
   U5_g(X1, X2, X3, bin_treecA_out_g(X2)) -> U6_g(X1, X2, X3, bin_treecA_in_g(X3))
   U6_g(X1, X2, X3, bin_treecA_out_g(X3)) -> bin_treecA_out_g(tree(X1, X2, X3))

The set Q consists of the following terms:

   bin_treecA_in_g(x0)
   U5_g(x0, x1, x2, x3)
   U6_g(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U2_G(X1, X2, X3, bin_treecA_out_g(X2)) -> BIN_TREEA_IN_G(X3)
The graph contains the following edges 3 >= 1


*BIN_TREEA_IN_G(tree(X1, X2, X3)) -> BIN_TREEA_IN_G(X2)
The graph contains the following edges 1 > 1


*BIN_TREEA_IN_G(tree(X1, X2, X3)) -> U2_G(X1, X2, X3, bin_treecA_in_g(X2))
The graph contains the following edges 1 > 1, 1 > 2, 1 > 3


----------------------------------------

(10)
YES
