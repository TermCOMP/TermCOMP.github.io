MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/Yxpkk.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

q(a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [SOUND, 0 ms]
        (12) QDP
    (13) PrologToPiTRSProof [SOUND, 0 ms]
    (14) PiTRS
        (15) DependencyPairsProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) PiDPToQDPProof [SOUND, 0 ms]
        (22) QDP
(23) PrologToTRSTransformerProof [SOUND, 0 ms]
(24) QTRS
    (25) QTRSRRRProof [EQUIVALENT, 43 ms]
    (26) QTRS
    (27) QTRSRRRProof [EQUIVALENT, 7 ms]
    (28) QTRS
    (29) QTRSRRRProof [EQUIVALENT, 0 ms]
    (30) QTRS
    (31) QTRSRRRProof [EQUIVALENT, 0 ms]
    (32) QTRS
    (33) QTRSRRRProof [EQUIVALENT, 2 ms]
    (34) QTRS
    (35) QTRSRRRProof [EQUIVALENT, 0 ms]
    (36) QTRS
    (37) QTRSRRRProof [EQUIVALENT, 2 ms]
    (38) QTRS
(39) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(40) TRIPLES
    (41) TriplesToPiDPProof [SOUND, 0 ms]
    (42) PiDP
    (43) DependencyGraphProof [EQUIVALENT, 0 ms]
    (44) PiDP
    (45) PiDPToQDPProof [SOUND, 0 ms]
    (46) QDP
(47) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(48) IRSwT
    (49) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (50) IRSwT
    (51) IntTRSCompressionProof [EQUIVALENT, 17 ms]
    (52) IRSwT
    (53) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (54) IRSwT
    (55) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
    (56) IRSwT
    (57) FilterProof [EQUIVALENT, 0 ms]
    (58) IntTRS
    (59) IntTRSNonPeriodicNontermProof [COMPLETE, 5 ms]
    (60) NO


----------------------------------------

(0)
Obligation:
Clauses:

q(X) :- ','(p(X), !).
p(0).
p(s(X)) :- p(X).


Query: q(a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

q(X) :- p(X).
p(0).
p(s(X)) :- p(X).


Query: q(a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_1: (f)

p_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_A(X) -> U1_A(X, p_in_a(X))
   Q_IN_A(X) -> P_IN_A(X)
   P_IN_A(s(X)) -> U2_A(X, p_in_a(X))
   P_IN_A(s(X)) -> P_IN_A(X)

The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)

Q_IN_A(x1)  =  Q_IN_A

U1_A(x1, x2)  =  U1_A(x2)

P_IN_A(x1)  =  P_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_A(X) -> U1_A(X, p_in_a(X))
   Q_IN_A(X) -> P_IN_A(X)
   P_IN_A(s(X)) -> U2_A(X, p_in_a(X))
   P_IN_A(s(X)) -> P_IN_A(X)

The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)

Q_IN_A(x1)  =  Q_IN_A

U1_A(x1, x2)  =  U1_A(x2)

P_IN_A(x1)  =  P_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(s(X)) -> P_IN_A(X)

The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(s(X)) -> P_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_A -> P_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_1: (f)

p_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_A(X) -> U1_A(X, p_in_a(X))
   Q_IN_A(X) -> P_IN_A(X)
   P_IN_A(s(X)) -> U2_A(X, p_in_a(X))
   P_IN_A(s(X)) -> P_IN_A(X)

The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)

Q_IN_A(x1)  =  Q_IN_A

U1_A(x1, x2)  =  U1_A(x2)

P_IN_A(x1)  =  P_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_A(X) -> U1_A(X, p_in_a(X))
   Q_IN_A(X) -> P_IN_A(X)
   P_IN_A(s(X)) -> U2_A(X, p_in_a(X))
   P_IN_A(s(X)) -> P_IN_A(X)

The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)

Q_IN_A(x1)  =  Q_IN_A

U1_A(x1, x2)  =  U1_A(x2)

P_IN_A(x1)  =  P_IN_A

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(s(X)) -> P_IN_A(X)

The TRS R consists of the following rules:

   q_in_a(X) -> U1_a(X, p_in_a(X))
   p_in_a(0) -> p_out_a(0)
   p_in_a(s(X)) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(s(X))
   U1_a(X, p_out_a(X)) -> q_out_a(X)

The argument filtering Pi contains the following mapping:
q_in_a(x1)  =  q_in_a

U1_a(x1, x2)  =  U1_a(x2)

p_in_a(x1)  =  p_in_a

p_out_a(x1)  =  p_out_a(x1)

U2_a(x1, x2)  =  U2_a(x2)

q_out_a(x1)  =  q_out_a(x1)

s(x1)  =  s(x1)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(s(X)) -> P_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_A -> P_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q X)",
                "(',' (p X) (!))"
            ],
            [
                "(p (0))",
                null
            ],
            [
                "(p (s X))",
                "(p X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p T6)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p T6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "89": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (p T6) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "87": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 12,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 25,
                "label": "ONLY EVAL with clause\nq(X3) :- ','(p(X3), !_1).\nand substitutionT1 -> T6,\nX3 -> T6,\nT5 -> T6"
            },
            {
                "from": 25,
                "to": 29,
                "label": "SPLIT 1"
            },
            {
                "from": 25,
                "to": 30,
                "label": "SPLIT 2\nnew knowledge:\nT6 is ground"
            },
            {
                "from": 29,
                "to": 33,
                "label": "CASE"
            },
            {
                "from": 30,
                "to": 87,
                "label": "CUT"
            },
            {
                "from": 33,
                "to": 35,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 37,
                "label": "PARALLEL"
            },
            {
                "from": 35,
                "to": 39,
                "label": "EVAL with clause\np(0).\nand substitutionT6 -> 0"
            },
            {
                "from": 35,
                "to": 40,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 37,
                "to": 42,
                "label": "EVAL with clause\np(s(X6)) :- p(X6).\nand substitutionX6 -> T10,\nT6 -> s(T10),\nT9 -> T10"
            },
            {
                "from": 37,
                "to": 43,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 39,
                "to": 41,
                "label": "SUCCESS"
            },
            {
                "from": 42,
                "to": 29,
                "label": "INSTANCE with matching:\nT6 -> T10"
            },
            {
                "from": 87,
                "to": 89,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(24)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f25_in)
   U1(f25_out1(T6)) -> f2_out1(T6)
   f29_in -> f29_out1(0)
   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))
   f30_in -> f30_out1
   f25_in -> U3(f29_in)
   U3(f29_out1(T6)) -> U4(f30_in, T6)
   U4(f30_out1, T6) -> f25_out1(T6)

Q is empty.

----------------------------------------

(25) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U1(x_1)) = 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = 2*x_1
   POL(U4(x_1, x_2)) = x_1 + 2*x_2
   POL(f25_in) = 0
   POL(f25_out1(x_1)) = x_1
   POL(f29_in) = 0
   POL(f29_out1(x_1)) = x_1
   POL(f2_in) = 1
   POL(f2_out1(x_1)) = 2*x_1
   POL(f30_in) = 0
   POL(f30_out1) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in -> U1(f25_in)




----------------------------------------

(26)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   U1(f25_out1(T6)) -> f2_out1(T6)
   f29_in -> f29_out1(0)
   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))
   f30_in -> f30_out1
   f25_in -> U3(f29_in)
   U3(f29_out1(T6)) -> U4(f30_in, T6)
   U4(f30_out1, T6) -> f25_out1(T6)

Q is empty.

----------------------------------------

(27) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U1(x_1)) = x_1
   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = x_1
   POL(U4(x_1, x_2)) = x_1 + 2*x_2
   POL(f25_in) = 2
   POL(f25_out1(x_1)) = 2*x_1
   POL(f29_in) = 0
   POL(f29_out1(x_1)) = 2*x_1
   POL(f2_out1(x_1)) = 2*x_1
   POL(f30_in) = 0
   POL(f30_out1) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f25_in -> U3(f29_in)




----------------------------------------

(28)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   U1(f25_out1(T6)) -> f2_out1(T6)
   f29_in -> f29_out1(0)
   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))
   f30_in -> f30_out1
   U3(f29_out1(T6)) -> U4(f30_in, T6)
   U4(f30_out1, T6) -> f25_out1(T6)

Q is empty.

----------------------------------------

(29) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U1(x_1)) = 2 + 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = x_1
   POL(U4(x_1, x_2)) = x_1 + x_2
   POL(f25_out1(x_1)) = x_1
   POL(f29_in) = 0
   POL(f29_out1(x_1)) = x_1
   POL(f2_out1(x_1)) = 2*x_1
   POL(f30_in) = 0
   POL(f30_out1) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f25_out1(T6)) -> f2_out1(T6)




----------------------------------------

(30)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f29_in -> f29_out1(0)
   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))
   f30_in -> f30_out1
   U3(f29_out1(T6)) -> U4(f30_in, T6)
   U4(f30_out1, T6) -> f25_out1(T6)

Q is empty.

----------------------------------------

(31) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U2(x_1)) = x_1
   POL(U3(x_1)) = 1 + 2*x_1
   POL(U4(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(f25_out1(x_1)) = 1 + 2*x_1
   POL(f29_in) = 2
   POL(f29_out1(x_1)) = 2 + 2*x_1
   POL(f30_in) = 0
   POL(f30_out1) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U3(f29_out1(T6)) -> U4(f30_in, T6)
   U4(f30_out1, T6) -> f25_out1(T6)




----------------------------------------

(32)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f29_in -> f29_out1(0)
   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))
   f30_in -> f30_out1

Q is empty.

----------------------------------------

(33) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U2(x_1)) = 2*x_1
   POL(f29_in) = 0
   POL(f29_out1(x_1)) = 2*x_1
   POL(f30_in) = 1
   POL(f30_out1) = 0
   POL(s(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f30_in -> f30_out1




----------------------------------------

(34)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f29_in -> f29_out1(0)
   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))

Q is empty.

----------------------------------------

(35) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U2(x_1)) = x_1
   POL(f29_in) = 1
   POL(f29_out1(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f29_in -> f29_out1(0)




----------------------------------------

(36)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f29_in -> U2(f29_in)
   U2(f29_out1(T10)) -> f29_out1(s(T10))

Q is empty.

----------------------------------------

(37) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(f29_in) = 0
   POL(f29_out1(x_1)) = 2 + x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U2(f29_out1(T10)) -> f29_out1(s(T10))




----------------------------------------

(38)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f29_in -> U2(f29_in)

Q is empty.

----------------------------------------

(39) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q X)",
                "(',' (p X) (!))"
            ],
            [
                "(p (0))",
                null
            ],
            [
                "(p (s X))",
                "(p X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "22": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (p T4) (!_1))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(p T4)",
                        "(p (0))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (p T8) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (p T4) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (p T4) (!_1))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (p T4) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_1)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (p T4) (!_1))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 11,
                "label": "CASE"
            },
            {
                "from": 11,
                "to": 19,
                "label": "ONLY EVAL with clause\nq(X2) :- ','(p(X2), !_1).\nand substitutionT1 -> T4,\nX2 -> T4,\nT3 -> T4"
            },
            {
                "from": 19,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 21,
                "label": "EVAL with clause\np(0).\nand substitutionT4 -> 0"
            },
            {
                "from": 20,
                "to": 22,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 21,
                "to": 23,
                "label": "CUT"
            },
            {
                "from": 22,
                "to": 26,
                "label": "EVAL with clause\np(s(X5)) :- p(X5).\nand substitutionX5 -> T8,\nT4 -> s(T8),\nT7 -> T8"
            },
            {
                "from": 22,
                "to": 27,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 23,
                "to": 24,
                "label": "SUCCESS"
            },
            {
                "from": 26,
                "to": 19,
                "label": "INSTANCE with matching:\nT4 -> T8"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(40)
Obligation:
Triples:

pA(s(X1)) :- pA(X1).
qB(X1) :- pA(X1).

Clauses:

qcA(0).
qcA(s(X1)) :- qcA(X1).

Afs:

qB(x1)  =  qB


----------------------------------------

(41) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

qB_in_1: (f)

pA_in_1: (f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   QB_IN_A(X1) -> U2_A(X1, pA_in_a(X1))
   QB_IN_A(X1) -> PA_IN_A(X1)
   PA_IN_A(s(X1)) -> U1_A(X1, pA_in_a(X1))
   PA_IN_A(s(X1)) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

s(x1)  =  s(x1)

QB_IN_A(x1)  =  QB_IN_A

U2_A(x1, x2)  =  U2_A(x2)

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1, x2)  =  U1_A(x2)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QB_IN_A(X1) -> U2_A(X1, pA_in_a(X1))
   QB_IN_A(X1) -> PA_IN_A(X1)
   PA_IN_A(s(X1)) -> U1_A(X1, pA_in_a(X1))
   PA_IN_A(s(X1)) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

s(x1)  =  s(x1)

QB_IN_A(x1)  =  QB_IN_A

U2_A(x1, x2)  =  U2_A(x2)

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1, x2)  =  U1_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(s(X1)) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

PA_IN_A(x1)  =  PA_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_A -> PA_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(q X)",
                "(',' (p X) (!))"
            ],
            [
                "(p (0))",
                null
            ],
            [
                "(p (s X))",
                "(p X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "34": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p T6)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(p T6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(p T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (p T6) (!_1))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(q T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "61": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "83": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "62": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "84": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "63": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "64": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "65": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 28,
                "label": "ONLY EVAL with clause\nq(X3) :- ','(p(X3), !_1).\nand substitutionT1 -> T6,\nX3 -> T6,\nT5 -> T6"
            },
            {
                "from": 28,
                "to": 31,
                "label": "SPLIT 1"
            },
            {
                "from": 28,
                "to": 32,
                "label": "SPLIT 2\nnew knowledge:\nT6 is ground"
            },
            {
                "from": 31,
                "to": 34,
                "label": "CASE"
            },
            {
                "from": 32,
                "to": 83,
                "label": "CUT"
            },
            {
                "from": 34,
                "to": 36,
                "label": "PARALLEL"
            },
            {
                "from": 34,
                "to": 38,
                "label": "PARALLEL"
            },
            {
                "from": 36,
                "to": 61,
                "label": "EVAL with clause\np(0).\nand substitutionT6 -> 0"
            },
            {
                "from": 36,
                "to": 62,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 38,
                "to": 64,
                "label": "EVAL with clause\np(s(X6)) :- p(X6).\nand substitutionX6 -> T10,\nT6 -> s(T10),\nT9 -> T10"
            },
            {
                "from": 38,
                "to": 65,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 61,
                "to": 63,
                "label": "SUCCESS"
            },
            {
                "from": 64,
                "to": 31,
                "label": "INSTANCE with matching:\nT6 -> T10"
            },
            {
                "from": 83,
                "to": 84,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(48)
Obligation:
Rules:
f34_in -> f36_in :|: TRUE
f36_out -> f34_out :|: TRUE
f34_in -> f38_in :|: TRUE
f38_out -> f34_out :|: TRUE
f34_out -> f31_out :|: TRUE
f31_in -> f34_in :|: TRUE
f65_out -> f38_out :|: TRUE
f64_out -> f38_out :|: TRUE
f38_in -> f65_in :|: TRUE
f38_in -> f64_in :|: TRUE
f64_in -> f31_in :|: TRUE
f31_out -> f64_out :|: TRUE
f5_out -> f1_out :|: TRUE
f1_in -> f5_in :|: TRUE
f5_in -> f28_in :|: TRUE
f28_out -> f5_out :|: TRUE
f32_out -> f28_out :|: TRUE
f28_in -> f31_in :|: TRUE
f31_out -> f32_in :|: TRUE
Start term: f1_in

----------------------------------------

(49) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f34_in -> f38_in :|: TRUE
f31_in -> f34_in :|: TRUE
f38_in -> f64_in :|: TRUE
f64_in -> f31_in :|: TRUE


----------------------------------------

(50)
Obligation:
Rules:
f34_in -> f38_in :|: TRUE
f31_in -> f34_in :|: TRUE
f38_in -> f64_in :|: TRUE
f64_in -> f31_in :|: TRUE

----------------------------------------

(51) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(52)
Obligation:
Rules:
f31_in -> f31_in :|: TRUE

----------------------------------------

(53) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(54)
Obligation:
Rules:
f31_in -> f31_in :|: TRUE

----------------------------------------

(55) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f31_in -> f31_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(56)
Obligation:

Termination digraph:
Nodes:
(1) f31_in -> f31_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(57) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f31_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(58)
Obligation:
Rules:
f31_in -> f31_in :|: TRUE

----------------------------------------

(59) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(60)
NO
