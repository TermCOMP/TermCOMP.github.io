MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/uEHTq.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 0 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) UsableRulesProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) PiDPToQDPProof [SOUND, 0 ms]
        (12) QDP
        (13) NonTerminationLoopProof [COMPLETE, 0 ms]
        (14) NO
    (15) PrologToPiTRSProof [SOUND, 0 ms]
    (16) PiTRS
        (17) DependencyPairsProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) PiDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) PiDP
        (23) PiDPToQDPProof [SOUND, 0 ms]
        (24) QDP
        (25) NonTerminationLoopProof [COMPLETE, 0 ms]
        (26) NO
(27) PrologToTRSTransformerProof [SOUND, 0 ms]
(28) QTRS
    (29) QTRSRRRProof [EQUIVALENT, 29 ms]
    (30) QTRS
    (31) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (32) QTRS
    (33) DependencyPairsProof [EQUIVALENT, 0 ms]
    (34) QDP
    (35) UsableRulesProof [EQUIVALENT, 0 ms]
    (36) QDP
    (37) QReductionProof [EQUIVALENT, 0 ms]
    (38) QDP
    (39) NonTerminationLoopProof [COMPLETE, 0 ms]
    (40) NO
(41) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(42) TRIPLES
    (43) TriplesToPiDPProof [SOUND, 0 ms]
    (44) PiDP
    (45) DependencyGraphProof [EQUIVALENT, 0 ms]
    (46) PiDP
    (47) PiDPToQDPProof [SOUND, 0 ms]
    (48) QDP
    (49) NonTerminationLoopProof [COMPLETE, 0 ms]
    (50) NO


----------------------------------------

(0)
Obligation:
Clauses:

p(X) :- ','(q(a), !).
p(X) :- p(X).
q(b).


Query: p(a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

p(X) :- q(a).
p(X) :- p(X).
q(b).


Query: p(a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g(x1)

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g(x1)

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_g(a))
   P_IN_A(X) -> Q_IN_G(a)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g(x1)

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_G(x1)  =  Q_IN_G(x1)

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_g(a))
   P_IN_A(X) -> Q_IN_G(a)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g(x1)

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_G(x1)  =  Q_IN_G(x1)

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g(x1)

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_A -> P_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_A evaluates to  t =P_IN_A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_A to P_IN_A.




----------------------------------------

(14)
NO

----------------------------------------

(15) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(16)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)



----------------------------------------

(17) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_g(a))
   P_IN_A(X) -> Q_IN_G(a)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_G(x1)  =  Q_IN_G(x1)

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> U1_A(X, q_in_g(a))
   P_IN_A(X) -> Q_IN_G(a)
   P_IN_A(X) -> U2_A(X, p_in_a(X))
   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A

U1_A(x1, x2)  =  U1_A(x2)

Q_IN_G(x1)  =  Q_IN_G(x1)

U2_A(x1, x2)  =  U2_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

The TRS R consists of the following rules:

   p_in_a(X) -> U1_a(X, q_in_g(a))
   q_in_g(b) -> q_out_g(b)
   U1_a(X, q_out_g(a)) -> p_out_a(X)
   p_in_a(X) -> U2_a(X, p_in_a(X))
   U2_a(X, p_out_a(X)) -> p_out_a(X)

The argument filtering Pi contains the following mapping:
p_in_a(x1)  =  p_in_a

U1_a(x1, x2)  =  U1_a(x2)

q_in_g(x1)  =  q_in_g(x1)

b  =  b

q_out_g(x1)  =  q_out_g

a  =  a

p_out_a(x1)  =  p_out_a

U2_a(x1, x2)  =  U2_a(x2)

P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_A(X) -> P_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
P_IN_A(x1)  =  P_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_A -> P_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_A evaluates to  t =P_IN_A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_A to P_IN_A.




----------------------------------------

(26)
NO

----------------------------------------

(27) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(',' (q (a)) (!))"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(q (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "23": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (q (a)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (q (a)) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 13,
                "label": "ONLY EVAL with clause\np(X3) :- ','(q(a), !_1).\nand substitutionT1 -> T4,\nX3 -> T4"
            },
            {
                "from": 13,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 21,
                "label": "BACKTRACK\nfor clause: q(b)because of non-unification"
            },
            {
                "from": 21,
                "to": 23,
                "label": "FAILURE"
            },
            {
                "from": 23,
                "to": 27,
                "label": "ONLY EVAL with clause\np(X7) :- p(X7).\nand substitutionT1 -> T10,\nX7 -> T10,\nT9 -> T10"
            },
            {
                "from": 27,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T10"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(28)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)
   U1(f2_out1) -> f2_out1

Q is empty.

----------------------------------------

(29) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(f2_in) = 0
   POL(f2_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f2_out1) -> f2_out1




----------------------------------------

(30)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

Q is empty.

----------------------------------------

(31) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(32)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in


----------------------------------------

(33) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

The TRS R consists of the following rules:

   f2_in -> U1(f2_in)

The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
The set Q consists of the following terms:

   f2_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN -> F2_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F2_IN evaluates to  t =F2_IN

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F2_IN to F2_IN.




----------------------------------------

(40)
NO

----------------------------------------

(41) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X)",
                "(',' (q (a)) (!))"
            ],
            [
                "(p X)",
                "(p X)"
            ],
            [
                "(q (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "89": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (q (a)) (!_1))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "49": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (q (a)) (!_1))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "90": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "91": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "92": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 49,
                "label": "ONLY EVAL with clause\np(X2) :- ','(q(a), !_1).\nand substitutionT1 -> T3,\nX2 -> T3"
            },
            {
                "from": 49,
                "to": 89,
                "label": "CASE"
            },
            {
                "from": 89,
                "to": 90,
                "label": "BACKTRACK\nfor clause: q(b)because of non-unification"
            },
            {
                "from": 90,
                "to": 91,
                "label": "FAILURE"
            },
            {
                "from": 91,
                "to": 92,
                "label": "ONLY EVAL with clause\np(X6) :- p(X6).\nand substitutionT1 -> T9,\nX6 -> T9,\nT8 -> T9"
            },
            {
                "from": 92,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T9"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(42)
Obligation:
Triples:

pA(X1) :- pA(X1).

Clauses:

pcA(X1) :- pcA(X1).

Afs:

pA(x1)  =  pA


----------------------------------------

(43) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pA_in_1: (f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(X1) -> U1_A(X1, pA_in_a(X1))
   PA_IN_A(X1) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1, x2)  =  U1_A(x2)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(X1) -> U1_A(X1, pA_in_a(X1))
   PA_IN_A(X1) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_a(x1)  =  pA_in_a

PA_IN_A(x1)  =  PA_IN_A

U1_A(x1, x2)  =  U1_A(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(46)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_A(X1) -> PA_IN_A(X1)

R is empty.
The argument filtering Pi contains the following mapping:
PA_IN_A(x1)  =  PA_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(47) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_A -> PA_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = PA_IN_A evaluates to  t =PA_IN_A

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from PA_IN_A to PA_IN_A.




----------------------------------------

(50)
NO
