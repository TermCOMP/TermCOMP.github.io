YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/UAZFp.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) NonInfProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), x, round(s(y)))
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

The TRS R 2 is 
   f(true, x, y) -> f(gt(x, y), x, round(s(y)))

The signature Sigma is {f_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), x, round(s(y)))
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), x, round(s(y)))
   F(true, x, y) -> GT(x, y)
   F(true, x, y) -> ROUND(s(y))
   ROUND(s(s(x))) -> ROUND(x)
   GT(s(u), s(v)) -> GT(u, v)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), x, round(s(y)))
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(u), s(v)) -> GT(u, v)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), x, round(s(y)))
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(u), s(v)) -> GT(u, v)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(u), s(v)) -> GT(u, v)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(u), s(v)) -> GT(u, v)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ROUND(s(s(x))) -> ROUND(x)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), x, round(s(y)))
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ROUND(s(s(x))) -> ROUND(x)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ROUND(s(s(x))) -> ROUND(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ROUND(s(s(x))) -> ROUND(x)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), x, round(s(y)))

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), x, round(s(y)))
   round(0) -> 0
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)

The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), x, round(s(y)))

The TRS R consists of the following rules:

   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   round(0) -> 0

The set Q consists of the following terms:

   f(true, x0, x1)
   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), x, round(s(y)))

The TRS R consists of the following rules:

   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   round(0) -> 0

The set Q consists of the following terms:

   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair F(true, x, y) -> F(gt(x, y), x, round(s(y))) the following chains were created:
*We consider the chain F(true, x0, x1) -> F(gt(x0, x1), x0, round(s(x1))), F(true, x2, x3) -> F(gt(x2, x3), x2, round(s(x3))) which results in the following constraint:

(1)    (F(gt(x0, x1), x0, round(s(x1)))=F(true, x2, x3)  ==>  F(true, x0, x1)_>=_F(gt(x0, x1), x0, round(s(x1))))



We simplified constraint (1) using rules (I), (II), (IV) which results in the following new constraint:

(2)    (gt(x0, x1)=true  ==>  F(true, x0, x1)_>=_F(gt(x0, x1), x0, round(s(x1))))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on gt(x0, x1)=true which results in the following new constraints:

(3)    (true=true  ==>  F(true, s(x5), 0)_>=_F(gt(s(x5), 0), s(x5), round(s(0))))

(4)    (gt(x7, x6)=true & (gt(x7, x6)=true  ==>  F(true, x7, x6)_>=_F(gt(x7, x6), x7, round(s(x6))))  ==>  F(true, s(x7), s(x6))_>=_F(gt(s(x7), s(x6)), s(x7), round(s(s(x6)))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (F(true, s(x5), 0)_>=_F(gt(s(x5), 0), s(x5), round(s(0))))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (gt(x7, x6)=true  ==>  F(true, x7, x6)_>=_F(gt(x7, x6), x7, round(s(x6)))) with sigma = [ ] which results in the following new constraint:

(6)    (F(true, x7, x6)_>=_F(gt(x7, x6), x7, round(s(x6)))  ==>  F(true, s(x7), s(x6))_>=_F(gt(s(x7), s(x6)), s(x7), round(s(s(x6)))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*F(true, x, y) -> F(gt(x, y), x, round(s(y)))

*(F(true, s(x5), 0)_>=_F(gt(s(x5), 0), s(x5), round(s(0))))


*(F(true, x7, x6)_>=_F(gt(x7, x6), x7, round(s(x6)))  ==>  F(true, s(x7), s(x6))_>=_F(gt(s(x7), s(x6)), s(x7), round(s(s(x6)))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(F(x_1, x_2, x_3)) = -1 - x_1 + x_2 - x_3
   POL(c) = -1
   POL(false) = 0
   POL(gt(x_1, x_2)) = 0
   POL(round(x_1)) = x_1
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   F(true, x, y) -> F(gt(x, y), x, round(s(y)))
The following pairs are in P_bound:
   F(true, x, y) -> F(gt(x, y), x, round(s(y)))
The following rules are usable:
   false -> gt(0, v)
   true -> gt(s(u), 0)
   gt(u, v) -> gt(s(u), s(v))
   s(s(0)) -> round(s(0))
   s(s(round(x))) -> round(s(s(x)))
   0 -> round(0)

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gt(0, v) -> false
   gt(s(u), 0) -> true
   gt(s(u), s(v)) -> gt(u, v)
   round(s(0)) -> s(s(0))
   round(s(s(x))) -> s(s(round(x)))
   round(0) -> 0

The set Q consists of the following terms:

   round(0)
   round(s(0))
   round(s(s(x0)))
   gt(0, x0)
   gt(s(x0), 0)
   gt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
