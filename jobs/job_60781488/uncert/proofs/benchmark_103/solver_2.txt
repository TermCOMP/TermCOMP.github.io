YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ga46O.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 18 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(flatten, app(app(node, x), xs)) -> app(app(cons, x), app(concat, app(app(map, flatten), xs)))
   app(concat, nil) -> nil
   app(concat, app(app(cons, x), xs)) -> app(app(append, x), app(concat, xs))
   app(app(append, nil), xs) -> xs
   app(app(append, app(app(cons, x), xs)), ys) -> app(app(cons, x), app(app(append, xs), ys))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(flatten, app(app(node, x), xs)) -> app(app(cons, x), app(concat, app(app(map, flatten), xs)))
   app(concat, nil) -> nil
   app(concat, app(app(cons, x), xs)) -> app(app(append, x), app(concat, xs))
   app(app(append, nil), xs) -> xs
   app(app(append, app(app(cons, x), xs)), ys) -> app(app(cons, x), app(app(append, xs), ys))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(flatten, app(app(node, x), xs)) -> APP(app(cons, x), app(concat, app(app(map, flatten), xs)))
   APP(flatten, app(app(node, x), xs)) -> APP(cons, x)
   APP(flatten, app(app(node, x), xs)) -> APP(concat, app(app(map, flatten), xs))
   APP(flatten, app(app(node, x), xs)) -> APP(app(map, flatten), xs)
   APP(flatten, app(app(node, x), xs)) -> APP(map, flatten)
   APP(concat, app(app(cons, x), xs)) -> APP(app(append, x), app(concat, xs))
   APP(concat, app(app(cons, x), xs)) -> APP(append, x)
   APP(concat, app(app(cons, x), xs)) -> APP(concat, xs)
   APP(app(append, app(app(cons, x), xs)), ys) -> APP(app(cons, x), app(app(append, xs), ys))
   APP(app(append, app(app(cons, x), xs)), ys) -> APP(app(append, xs), ys)
   APP(app(append, app(app(cons, x), xs)), ys) -> APP(append, xs)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(flatten, app(app(node, x), xs)) -> app(app(cons, x), app(concat, app(app(map, flatten), xs)))
   app(concat, nil) -> nil
   app(concat, app(app(cons, x), xs)) -> app(app(append, x), app(concat, xs))
   app(app(append, nil), xs) -> xs
   app(app(append, app(app(cons, x), xs)), ys) -> app(app(cons, x), app(app(append, xs), ys))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(append, app(app(cons, x), xs)), ys) -> APP(app(append, xs), ys)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(flatten, app(app(node, x), xs)) -> app(app(cons, x), app(concat, app(app(map, flatten), xs)))
   app(concat, nil) -> nil
   app(concat, app(app(cons, x), xs)) -> app(app(append, x), app(concat, xs))
   app(app(append, nil), xs) -> xs
   app(app(append, app(app(cons, x), xs)), ys) -> app(app(cons, x), app(app(append, xs), ys))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(append, app(app(cons, x), xs)), ys) -> APP(app(append, xs), ys)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(x, xs), ys) -> append1(xs, ys)

R is empty.
The set Q consists of the following terms:

   map(x0, nil)
   map(x0, cons(x1, x2))
   flatten(node(x0, x1))
   concat(nil)
   concat(cons(x0, x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   flatten(node(x0, x1))
   concat(nil)
   concat(cons(x0, x1))
   append(nil, x0)
   append(cons(x0, x1), x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(x, xs), ys) -> append1(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*append1(cons(x, xs), ys) -> append1(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(concat, app(app(cons, x), xs)) -> APP(concat, xs)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(flatten, app(app(node, x), xs)) -> app(app(cons, x), app(concat, app(app(map, flatten), xs)))
   app(concat, nil) -> nil
   app(concat, app(app(cons, x), xs)) -> app(app(append, x), app(concat, xs))
   app(app(append, nil), xs) -> xs
   app(app(append, app(app(cons, x), xs)), ys) -> app(app(cons, x), app(app(append, xs), ys))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(concat, app(app(cons, x), xs)) -> APP(concat, xs)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   concat1(cons(x, xs)) -> concat1(xs)

R is empty.
The set Q consists of the following terms:

   map(x0, nil)
   map(x0, cons(x1, x2))
   flatten(node(x0, x1))
   concat(nil)
   concat(cons(x0, x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   flatten(node(x0, x1))
   concat(nil)
   concat(cons(x0, x1))
   append(nil, x0)
   append(cons(x0, x1), x2)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   concat1(cons(x, xs)) -> concat1(xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*concat1(cons(x, xs)) -> concat1(xs)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(flatten, app(app(node, x), xs)) -> APP(app(map, flatten), xs)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(flatten, app(app(node, x), xs)) -> app(app(cons, x), app(concat, app(app(map, flatten), xs)))
   app(concat, nil) -> nil
   app(concat, app(app(cons, x), xs)) -> app(app(append, x), app(concat, xs))
   app(app(append, nil), xs) -> xs
   app(app(append, app(app(cons, x), xs)), ys) -> app(app(cons, x), app(app(append, xs), ys))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(flatten, app(app(node, x), xs)) -> APP(app(map, flatten), xs)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(flatten, app(app(node, x0), x1))
   app(concat, nil)
   app(concat, app(app(cons, x0), x1))
   app(app(append, nil), x0)
   app(app(append, app(app(cons, x0), x1)), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(flatten, app(app(node, x), xs)) -> APP(app(map, flatten), xs)
The graph contains the following edges 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES
