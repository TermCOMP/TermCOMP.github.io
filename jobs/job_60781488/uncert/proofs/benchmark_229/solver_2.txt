YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/R2RFE.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) NonInfProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)
   TIMES(s(x), y) -> PLUS(y, times(x, y))
   TIMES(s(x), y) -> TIMES(x, y)
   PLUS(s(x), y) -> PLUS(x, y)
   FAC(x) -> LOOP(x, s(0), s(0))
   LOOP(x, c, y) -> IF(lt(x, c), x, c, y)
   LOOP(x, c, y) -> LT(x, c)
   IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))
   IF(false, x, c, y) -> TIMES(y, s(c))

The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(x), s(y)) -> LT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, c, y) -> IF(lt(x, c), x, c, y)
   IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))

The TRS R consists of the following rules:

   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   fac(x) -> loop(x, s(0), s(0))
   loop(x, c, y) -> if(lt(x, c), x, c, y)
   if(false, x, c, y) -> loop(x, s(c), times(y, s(c)))
   if(true, x, c, y) -> y

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, c, y) -> IF(lt(x, c), x, c, y)
   IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)
   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fac(x0)
   loop(x0, x1, x2)
   if(false, x0, x1, x2)
   if(true, x0, x1, x2)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, c, y) -> IF(lt(x, c), x, c, y)
   IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair LOOP(x, c, y) -> IF(lt(x, c), x, c, y) the following chains were created:
*We consider the chain IF(false, x3, x4, x5) -> LOOP(x3, s(x4), times(x5, s(x4))), LOOP(x6, x7, x8) -> IF(lt(x6, x7), x6, x7, x8) which results in the following constraint:

(1)    (LOOP(x3, s(x4), times(x5, s(x4)))=LOOP(x6, x7, x8)  ==>  LOOP(x6, x7, x8)_>=_IF(lt(x6, x7), x6, x7, x8))



We simplified constraint (1) using rules (I), (II), (III), (IV), (VII) which results in the following new constraint:

(2)    (LOOP(x3, s(x4), x8)_>=_IF(lt(x3, s(x4)), x3, s(x4), x8))








For Pair IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c))) the following chains were created:
*We consider the chain LOOP(x9, x10, x11) -> IF(lt(x9, x10), x9, x10, x11), IF(false, x12, x13, x14) -> LOOP(x12, s(x13), times(x14, s(x13))) which results in the following constraint:

(1)    (IF(lt(x9, x10), x9, x10, x11)=IF(false, x12, x13, x14)  ==>  IF(false, x12, x13, x14)_>=_LOOP(x12, s(x13), times(x14, s(x13))))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (lt(x9, x10)=false  ==>  IF(false, x9, x10, x11)_>=_LOOP(x9, s(x10), times(x11, s(x10))))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on lt(x9, x10)=false which results in the following new constraints:

(3)    (false=false  ==>  IF(false, x20, 0, x11)_>=_LOOP(x20, s(0), times(x11, s(0))))

(4)    (lt(x22, x21)=false & (\/x23:lt(x22, x21)=false  ==>  IF(false, x22, x21, x23)_>=_LOOP(x22, s(x21), times(x23, s(x21))))  ==>  IF(false, s(x22), s(x21), x11)_>=_LOOP(s(x22), s(s(x21)), times(x11, s(s(x21)))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(false, x20, 0, x11)_>=_LOOP(x20, s(0), times(x11, s(0))))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x23:lt(x22, x21)=false  ==>  IF(false, x22, x21, x23)_>=_LOOP(x22, s(x21), times(x23, s(x21)))) with sigma = [x23 / x11] which results in the following new constraint:

(6)    (IF(false, x22, x21, x11)_>=_LOOP(x22, s(x21), times(x11, s(x21)))  ==>  IF(false, s(x22), s(x21), x11)_>=_LOOP(s(x22), s(s(x21)), times(x11, s(s(x21)))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*LOOP(x, c, y) -> IF(lt(x, c), x, c, y)

*(LOOP(x3, s(x4), x8)_>=_IF(lt(x3, s(x4)), x3, s(x4), x8))




*IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))

*(IF(false, x20, 0, x11)_>=_LOOP(x20, s(0), times(x11, s(0))))


*(IF(false, x22, x21, x11)_>=_LOOP(x22, s(x21), times(x11, s(x21)))  ==>  IF(false, s(x22), s(x21), x11)_>=_LOOP(s(x22), s(s(x21)), times(x11, s(s(x21)))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3, x_4)) = -1 - x_1 + x_2 - x_3
   POL(LOOP(x_1, x_2, x_3)) = -1 + x_1 - x_2
   POL(c) = -2
   POL(false) = 0
   POL(lt(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = 1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(times(x_1, x_2)) = x_1
   POL(true) = 0


The following pairs  are in P_>:
   IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))
The following pairs are in P_bound:
   IF(false, x, c, y) -> LOOP(x, s(c), times(y, s(c)))
The following rules are usable:
   true -> lt(0, s(x))
   false -> lt(x, 0)
   lt(x, y) -> lt(s(x), s(y))

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, c, y) -> IF(lt(x, c), x, c, y)

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(x)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(36)
TRUE
