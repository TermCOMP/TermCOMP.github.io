NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/YbNB4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 33 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) UsableRulesProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) UsableRulesProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) MRRProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) MNOCProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) TransformationProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) UsableRulesProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QReductionProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) TransformationProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) UsableRulesProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) QReductionProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) TransformationProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) NonTerminationLoopProof [COMPLETE, 0 ms]
        (50) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   and(tt, X) -> activate(X)
   length(nil) -> 0
   length(cons(N, L)) -> s(length(activate(L)))
   take(0, IL) -> nil
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(length(x_1)) = x_1
   POL(n__take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   and(tt, X) -> activate(X)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(nil) -> 0
   length(cons(N, L)) -> s(length(activate(L)))
   take(0, IL) -> nil
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(length(x_1)) = 1 + x_1
   POL(n__take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   length(nil) -> 0




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   take(0, IL) -> nil
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(length(x_1)) = x_1
   POL(n__take(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(0, IL) -> nil




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
   ACTIVATE(n__zeros) -> ZEROS
   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   take(X1, X2) -> n__take(X1, X2)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
The following rules are removed from R:

   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(TAKE(x_1, x_2)) = 2*x_1 + x_2
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(n__take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__zeros) = 0
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zeros) = 0


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   take(X1, X2) -> n__take(X1, X2)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   take(X1, X2) -> n__take(X1, X2)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
The graph contains the following edges 1 > 1


*ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
   take(X1, X2) -> n__take(X1, X2)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   take(s(M), cons(N, IL)) -> cons(N, n__take(M, activate(IL)))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(LENGTH(x_1)) = x_1
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(n__take(x_1, x_2)) = x_1 + x_2
   POL(n__zeros) = 0
   POL(s(x_1)) = 2 + 2*x_1
   POL(take(x_1, x_2)) = x_1 + x_2
   POL(zeros) = 0


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   take(X1, X2) -> n__take(X1, X2)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(LENGTH(x_1)) = 2*x_1
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(n__take(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(n__zeros) = 0
   POL(take(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(zeros) = 0


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(X) -> X
   take(X1, X2) -> n__take(X1, X2)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   activate(X) -> X
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   activate(X) -> X
   zeros -> n__zeros

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(LENGTH(x_1)) = 2*x_1
   POL(activate(x_1)) = 1 + x_1
   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(n__zeros) = 0
   POL(zeros) = 1


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   zeros -> cons(0, n__zeros)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   activate(n__zeros)
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LENGTH(cons(N, L)) -> LENGTH(activate(L)) at position [0] we obtained the following new rules [LPAR04]:

   (LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros),LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros)

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   activate(n__zeros)
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   activate(n__zeros)
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   activate(n__zeros)


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros)),LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros))

R is empty.
The set Q consists of the following terms:

   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   zeros


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros)) we obtained the following new rules [LPAR04]:

   (LENGTH(cons(0, n__zeros)) -> LENGTH(cons(0, n__zeros)),LENGTH(cons(0, n__zeros)) -> LENGTH(cons(0, n__zeros)))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(0, n__zeros)) -> LENGTH(cons(0, n__zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = LENGTH(cons(0, n__zeros)) evaluates to  t =LENGTH(cons(0, n__zeros))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from LENGTH(cons(0, n__zeros)) to LENGTH(cons(0, n__zeros)).




----------------------------------------

(50)
NO
