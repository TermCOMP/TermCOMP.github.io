YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/IqNko.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 8 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) UsableRulesReductionPairsProof [EQUIVALENT, 15 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) TRUE
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) ATransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, x), y)
   APP(app(minus, app(s, x)), app(s, y)) -> APP(minus, x)
   APP(app(quot, app(s, x)), app(s, y)) -> APP(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   APP(app(quot, app(s, x)), app(s, y)) -> APP(app(quot, app(app(minus, x), y)), app(s, y))
   APP(app(quot, app(s, x)), app(s, y)) -> APP(quot, app(app(minus, x), y))
   APP(app(quot, app(s, x)), app(s, y)) -> APP(app(minus, x), y)
   APP(app(quot, app(s, x)), app(s, y)) -> APP(minus, x)
   APP(app(plus, app(s, x)), y) -> APP(s, app(app(plus, x), y))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(s, x)), y) -> APP(plus, x)
   APP(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> APP(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   APP(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> APP(plus, app(app(minus, y), app(s, app(s, z))))
   APP(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> APP(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   APP(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> APP(plus, app(app(plus, y), app(s, app(s, z))))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 18 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> APP(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> APP(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> APP(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> APP(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(minus, x), 0) -> x

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesReductionPairsProof (EQUIVALENT)
First, we A-transformed [FROCOS05] the QDP-Problem.
Then we obtain the following A-transformed DP problem.

The pairs P are: 

   plus1(minus(x, s(0)), minus(y, s(s(z)))) -> plus1(minus(y, s(s(z))), minus(x, s(0)))
   plus1(s(x), y) -> plus1(x, y)
   plus1(plus(x, s(0)), plus(y, s(s(z)))) -> plus1(plus(y, s(s(z))), plus(x, s(0)))

and the Q and R are:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(minus(x, s(0)), minus(y, s(s(z)))) -> plus(minus(y, s(s(z))), minus(x, s(0)))
   plus(plus(x, s(0)), plus(y, s(s(z)))) -> plus(plus(y, s(s(z))), plus(x, s(0)))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

Q is empty.

By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(minus, x), 0) -> x
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(minus(x_1, x_2)) = x_1 + 2*x_2
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(plus1(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus1(minus(x, s(0)), minus(y, s(s(z)))) -> plus1(minus(y, s(s(z))), minus(x, s(0)))
   plus1(s(x), y) -> plus1(x, y)
   plus1(plus(x, s(0)), plus(y, s(s(z)))) -> plus1(plus(y, s(s(z))), plus(x, s(0)))

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(minus(x, s(0)), minus(y, s(s(z)))) -> plus(minus(y, s(s(z))), minus(x, s(0)))
   plus(plus(x, s(0)), plus(y, s(s(z)))) -> plus(plus(y, s(s(z))), plus(x, s(0)))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   minus(x, 0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(minus(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(plus1(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus1(minus(x, s(0)), minus(y, s(s(z)))) -> plus1(minus(y, s(s(z))), minus(x, s(0)))
   plus1(s(x), y) -> plus1(x, y)
   plus1(plus(x, s(0)), plus(y, s(s(z)))) -> plus1(plus(y, s(s(z))), plus(x, s(0)))

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(minus(x, s(0)), minus(y, s(s(z)))) -> plus(minus(y, s(s(z))), minus(x, s(0)))
   plus(plus(x, s(0)), plus(y, s(s(z)))) -> plus(plus(y, s(s(z))), plus(x, s(0)))
   minus(s(x), s(y)) -> minus(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   plus(0, y) -> y

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(minus(x_1, x_2)) = 2*x_1 + x_2
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(plus1(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus1(minus(x, s(0)), minus(y, s(s(z)))) -> plus1(minus(y, s(s(z))), minus(x, s(0)))
   plus1(s(x), y) -> plus1(x, y)
   plus1(plus(x, s(0)), plus(y, s(s(z)))) -> plus1(plus(y, s(s(z))), plus(x, s(0)))

The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))
   plus(minus(x, s(0)), minus(y, s(s(z)))) -> plus(minus(y, s(s(z))), minus(x, s(0)))
   plus(plus(x, s(0)), plus(y, s(s(z)))) -> plus(plus(y, s(s(z))), plus(x, s(0)))
   minus(s(x), s(y)) -> minus(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   plus1(s(x), y) -> plus1(x, y)

Strictly oriented rules of the TRS R:

   plus(s(x), y) -> s(plus(x, y))
   minus(s(x), s(y)) -> minus(x, y)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(minus(x_1, x_2)) = x_1 + x_2
   POL(plus(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(plus1(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 1 + x_1


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus1(minus(x, s(0)), minus(y, s(s(z)))) -> plus1(minus(y, s(s(z))), minus(x, s(0)))
   plus1(plus(x, s(0)), plus(y, s(s(z)))) -> plus1(plus(y, s(s(z))), plus(x, s(0)))

The TRS R consists of the following rules:

   plus(minus(x, s(0)), minus(y, s(s(z)))) -> plus(minus(y, s(s(z))), minus(x, s(0)))
   plus(plus(x, s(0)), plus(y, s(s(z)))) -> plus(plus(y, s(s(z))), plus(x, s(0)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(17)
TRUE

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, x), y)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, x), y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*minus(s(x), s(y)) -> minus(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(quot, app(s, x)), app(s, y)) -> APP(app(quot, app(app(minus, x), y)), app(s, y))

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06]. Here, we combined the reduction pair processor with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   quot1(s(x), s(y)) -> quot1(minus(x, y), s(y))

 The a-transformed usable rules are 

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)




The following pairs can be oriented strictly and are deleted.

   APP(app(quot, app(s, x)), app(s, y)) -> APP(app(quot, app(app(minus, x), y)), app(s, y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
quot1(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)


----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(app(quot, 0), app(s, y)) -> 0
   app(app(quot, app(s, x)), app(s, y)) -> app(s, app(app(quot, app(app(minus, x), y)), app(s, y)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(app(minus, x), app(s, 0))), app(app(minus, y), app(s, app(s, z)))) -> app(app(plus, app(app(minus, y), app(s, app(s, z)))), app(app(minus, x), app(s, 0)))
   app(app(plus, app(app(plus, x), app(s, 0))), app(app(plus, y), app(s, app(s, z)))) -> app(app(plus, app(app(plus, y), app(s, app(s, z)))), app(app(plus, x), app(s, 0)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(32)
YES
