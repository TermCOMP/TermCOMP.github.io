YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ix5Or.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 13 ms]
(2) QTRS
(3) RisEmptyProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   +(x, 0) -> x
   +(0, x) -> x
   +(s(x), s(y)) -> s(s(+(x, y)))
   *(x, 0) -> 0
   *(0, x) -> 0
   *(s(x), s(y)) -> s(+(*(x, y), +(x, y)))
   sum(nil) -> 0
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> s(0)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
+/2(YES,YES)
0/0)
s/1(YES)
*/2(YES,YES)
sum/1(YES)
nil/0)
cons/2(YES,YES)
prod/1)YES(

Quasi precedence:
[sum_1, cons_2] > [0, *_2] > +_2 > s_1
nil > [0, *_2] > +_2 > s_1


Status:
+_2: multiset status
0: multiset status
s_1: multiset status
*_2: [2,1]
sum_1: multiset status
nil: multiset status
cons_2: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   +(x, 0) -> x
   +(0, x) -> x
   +(s(x), s(y)) -> s(s(+(x, y)))
   *(x, 0) -> 0
   *(0, x) -> 0
   *(s(x), s(y)) -> s(+(*(x, y), +(x, y)))
   sum(nil) -> 0
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> s(0)
   prod(cons(x, l)) -> *(x, prod(l))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(3) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(4)
YES
