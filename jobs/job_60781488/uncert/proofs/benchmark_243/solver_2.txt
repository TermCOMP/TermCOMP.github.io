YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DJsLU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 4 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) NonInfProof [EQUIVALENT, 52 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   head(cons(x, l)) -> x
   head(nil) -> undefined
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   reverse(l) -> rev(0, l, nil, l)
   rev(x, l, accu, orig) -> if(lt(x, length(orig)), x, l, accu, orig)
   if(true, x, l, accu, orig) -> rev(s(x), tail(l), cons(head(l), accu), orig)
   if(false, x, l, accu, orig) -> accu

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   head(cons(x, l)) -> x
   head(nil) -> undefined
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   reverse(l) -> rev(0, l, nil, l)
   rev(x, l, accu, orig) -> if(lt(x, length(orig)), x, l, accu, orig)
   if(true, x, l, accu, orig) -> rev(s(x), tail(l), cons(head(l), accu), orig)
   if(false, x, l, accu, orig) -> accu

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, l)) -> LENGTH(l)
   LT(s(x), s(y)) -> LT(x, y)
   REVERSE(l) -> REV(0, l, nil, l)
   REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig)
   REV(x, l, accu, orig) -> LT(x, length(orig))
   REV(x, l, accu, orig) -> LENGTH(orig)
   IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)
   IF(true, x, l, accu, orig) -> TAIL(l)
   IF(true, x, l, accu, orig) -> HEAD(l)

The TRS R consists of the following rules:

   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   head(cons(x, l)) -> x
   head(nil) -> undefined
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   reverse(l) -> rev(0, l, nil, l)
   rev(x, l, accu, orig) -> if(lt(x, length(orig)), x, l, accu, orig)
   if(true, x, l, accu, orig) -> rev(s(x), tail(l), cons(head(l), accu), orig)
   if(false, x, l, accu, orig) -> accu

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

The TRS R consists of the following rules:

   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   head(cons(x, l)) -> x
   head(nil) -> undefined
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   reverse(l) -> rev(0, l, nil, l)
   rev(x, l, accu, orig) -> if(lt(x, length(orig)), x, l, accu, orig)
   if(true, x, l, accu, orig) -> rev(s(x), tail(l), cons(head(l), accu), orig)
   if(false, x, l, accu, orig) -> accu

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(x), s(y)) -> LT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, l)) -> LENGTH(l)

The TRS R consists of the following rules:

   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   head(cons(x, l)) -> x
   head(nil) -> undefined
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   reverse(l) -> rev(0, l, nil, l)
   rev(x, l, accu, orig) -> if(lt(x, length(orig)), x, l, accu, orig)
   if(true, x, l, accu, orig) -> rev(s(x), tail(l), cons(head(l), accu), orig)
   if(false, x, l, accu, orig) -> accu

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, l)) -> LENGTH(l)

R is empty.
The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, l)) -> LENGTH(l)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(cons(x, l)) -> LENGTH(l)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig)
   IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)

The TRS R consists of the following rules:

   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   head(cons(x, l)) -> x
   head(nil) -> undefined
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   reverse(l) -> rev(0, l, nil, l)
   rev(x, l, accu, orig) -> if(lt(x, length(orig)), x, l, accu, orig)
   if(true, x, l, accu, orig) -> rev(s(x), tail(l), cons(head(l), accu), orig)
   if(false, x, l, accu, orig) -> accu

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig)
   IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)

The TRS R consists of the following rules:

   tail(nil) -> nil
   tail(cons(x, l)) -> l
   head(cons(x, l)) -> x
   head(nil) -> undefined
   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))
   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   reverse(x0)
   rev(x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig)
   IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)

The TRS R consists of the following rules:

   tail(nil) -> nil
   tail(cons(x, l)) -> l
   head(cons(x, l)) -> x
   head(nil) -> undefined
   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig) the following chains were created:
*We consider the chain IF(true, x4, x5, x6, x7) -> REV(s(x4), tail(x5), cons(head(x5), x6), x7), REV(x8, x9, x10, x11) -> IF(lt(x8, length(x11)), x8, x9, x10, x11) which results in the following constraint:

(1)    (REV(s(x4), tail(x5), cons(head(x5), x6), x7)=REV(x8, x9, x10, x11)  ==>  REV(x8, x9, x10, x11)_>=_IF(lt(x8, length(x11)), x8, x9, x10, x11))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (REV(s(x4), x9, x10, x7)_>=_IF(lt(s(x4), length(x7)), s(x4), x9, x10, x7))








For Pair IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig) the following chains were created:
*We consider the chain REV(x12, x13, x14, x15) -> IF(lt(x12, length(x15)), x12, x13, x14, x15), IF(true, x16, x17, x18, x19) -> REV(s(x16), tail(x17), cons(head(x17), x18), x19) which results in the following constraint:

(1)    (IF(lt(x12, length(x15)), x12, x13, x14, x15)=IF(true, x16, x17, x18, x19)  ==>  IF(true, x16, x17, x18, x19)_>=_REV(s(x16), tail(x17), cons(head(x17), x18), x19))



We simplified constraint (1) using rules (I), (II), (III), (VII) which results in the following new constraint:

(2)    (length(x15)=x24 & lt(x12, x24)=true  ==>  IF(true, x12, x13, x14, x15)_>=_REV(s(x12), tail(x13), cons(head(x13), x14), x15))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on lt(x12, x24)=true which results in the following new constraints:

(3)    (true=true & length(x15)=s(x26)  ==>  IF(true, 0, x13, x14, x15)_>=_REV(s(0), tail(x13), cons(head(x13), x14), x15))

(4)    (lt(x28, x27)=true & length(x15)=s(x27) & (\/x29,x30,x31:lt(x28, x27)=true & length(x29)=x27  ==>  IF(true, x28, x30, x31, x29)_>=_REV(s(x28), tail(x30), cons(head(x30), x31), x29))  ==>  IF(true, s(x28), x13, x14, x15)_>=_REV(s(s(x28)), tail(x13), cons(head(x13), x14), x15))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (length(x15)=s(x26)  ==>  IF(true, 0, x13, x14, x15)_>=_REV(s(0), tail(x13), cons(head(x13), x14), x15))



We simplified constraint (4) using rule (V) (with possible (I) afterwards) using induction on length(x15)=s(x27) which results in the following new constraint:

(6)    (s(length(x37))=s(x27) & lt(x28, x27)=true & (\/x29,x30,x31:lt(x28, x27)=true & length(x29)=x27  ==>  IF(true, x28, x30, x31, x29)_>=_REV(s(x28), tail(x30), cons(head(x30), x31), x29)) & (\/x39,x40,x41,x42,x43,x44,x45:length(x37)=s(x39) & lt(x40, x39)=true & (\/x41,x42,x43:lt(x40, x39)=true & length(x41)=x39  ==>  IF(true, x40, x42, x43, x41)_>=_REV(s(x40), tail(x42), cons(head(x42), x43), x41))  ==>  IF(true, s(x40), x44, x45, x37)_>=_REV(s(s(x40)), tail(x44), cons(head(x44), x45), x37))  ==>  IF(true, s(x28), x13, x14, cons(x38, x37))_>=_REV(s(s(x28)), tail(x13), cons(head(x13), x14), cons(x38, x37)))



We simplified constraint (5) using rule (V) (with possible (I) afterwards) using induction on length(x15)=s(x26) which results in the following new constraint:

(7)    (s(length(x32))=s(x26) & (\/x34,x35,x36:length(x32)=s(x34)  ==>  IF(true, 0, x35, x36, x32)_>=_REV(s(0), tail(x35), cons(head(x35), x36), x32))  ==>  IF(true, 0, x13, x14, cons(x33, x32))_>=_REV(s(0), tail(x13), cons(head(x13), x14), cons(x33, x32)))



We simplified constraint (7) using rules (I), (II), (IV) which results in the following new constraint:

(8)    (IF(true, 0, x13, x14, cons(x33, x32))_>=_REV(s(0), tail(x13), cons(head(x13), x14), cons(x33, x32)))



We simplified constraint (6) using rules (I), (II) which results in the following new constraint:

(9)    (length(x37)=x27 & lt(x28, x27)=true & (\/x29,x30,x31:lt(x28, x27)=true & length(x29)=x27  ==>  IF(true, x28, x30, x31, x29)_>=_REV(s(x28), tail(x30), cons(head(x30), x31), x29)) & (\/x39,x40,x41,x42,x43,x44,x45:length(x37)=s(x39) & lt(x40, x39)=true & (\/x41,x42,x43:lt(x40, x39)=true & length(x41)=x39  ==>  IF(true, x40, x42, x43, x41)_>=_REV(s(x40), tail(x42), cons(head(x42), x43), x41))  ==>  IF(true, s(x40), x44, x45, x37)_>=_REV(s(s(x40)), tail(x44), cons(head(x44), x45), x37))  ==>  IF(true, s(x28), x13, x14, cons(x38, x37))_>=_REV(s(s(x28)), tail(x13), cons(head(x13), x14), cons(x38, x37)))



We simplified constraint (9) using rule (VI) where we applied the induction hypothesis (\/x29,x30,x31:lt(x28, x27)=true & length(x29)=x27  ==>  IF(true, x28, x30, x31, x29)_>=_REV(s(x28), tail(x30), cons(head(x30), x31), x29)) with sigma = [x29 / x37, x30 / x13, x31 / x14] which results in the following new constraint:

(10)    (IF(true, x28, x13, x14, x37)_>=_REV(s(x28), tail(x13), cons(head(x13), x14), x37) & (\/x39,x40,x41,x42,x43,x44,x45:length(x37)=s(x39) & lt(x40, x39)=true & (\/x41,x42,x43:lt(x40, x39)=true & length(x41)=x39  ==>  IF(true, x40, x42, x43, x41)_>=_REV(s(x40), tail(x42), cons(head(x42), x43), x41))  ==>  IF(true, s(x40), x44, x45, x37)_>=_REV(s(s(x40)), tail(x44), cons(head(x44), x45), x37))  ==>  IF(true, s(x28), x13, x14, cons(x38, x37))_>=_REV(s(s(x28)), tail(x13), cons(head(x13), x14), cons(x38, x37)))



We simplified constraint (10) using rule (IV) which results in the following new constraint:

(11)    (IF(true, x28, x13, x14, x37)_>=_REV(s(x28), tail(x13), cons(head(x13), x14), x37)  ==>  IF(true, s(x28), x13, x14, cons(x38, x37))_>=_REV(s(s(x28)), tail(x13), cons(head(x13), x14), cons(x38, x37)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig)

*(REV(s(x4), x9, x10, x7)_>=_IF(lt(s(x4), length(x7)), s(x4), x9, x10, x7))




*IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)

*(IF(true, 0, x13, x14, cons(x33, x32))_>=_REV(s(0), tail(x13), cons(head(x13), x14), cons(x33, x32)))


*(IF(true, x28, x13, x14, x37)_>=_REV(s(x28), tail(x13), cons(head(x13), x14), x37)  ==>  IF(true, s(x28), x13, x14, cons(x38, x37))_>=_REV(s(s(x28)), tail(x13), cons(head(x13), x14), cons(x38, x37)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3, x_4, x_5)) = -x_1 - x_2 + x_3 + x_5
   POL(REV(x_1, x_2, x_3, x_4)) = -x_1 + x_2 + x_4
   POL(c) = -1
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(false) = 0
   POL(head(x_1)) = 0
   POL(length(x_1)) = 0
   POL(lt(x_1, x_2)) = 0
   POL(nil) = 1
   POL(s(x_1)) = 1 + x_1
   POL(tail(x_1)) = x_1
   POL(true) = 0
   POL(undefined) = 0


The following pairs  are in P_>:
   IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)
The following pairs are in P_bound:
   IF(true, x, l, accu, orig) -> REV(s(x), tail(l), cons(head(l), accu), orig)
The following rules are usable:
   false -> lt(x, 0)
   true -> lt(0, s(y))
   lt(x, y) -> lt(s(x), s(y))
   tail(nil) -> nil
   tail(cons(x, l)) -> l

----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(x, l, accu, orig) -> IF(lt(x, length(orig)), x, l, accu, orig)

The TRS R consists of the following rules:

   tail(nil) -> nil
   tail(cons(x, l)) -> l
   head(cons(x, l)) -> x
   head(nil) -> undefined
   length(nil) -> 0
   length(cons(x, l)) -> s(length(l))
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   length(nil)
   length(cons(x0, x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   head(cons(x0, x1))
   head(nil)
   tail(nil)
   tail(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(29)
TRUE
