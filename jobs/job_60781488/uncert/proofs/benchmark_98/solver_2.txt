YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/T4pWO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 13 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) MRRProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) TRUE
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) ATransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) PisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), y)), app(s, y)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), y)), app(s, y)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   APP(app(minus, app(s, x)), app(s, y)) -> APP(minus, app(p, app(s, x)))
   APP(app(minus, app(s, x)), app(s, y)) -> APP(p, app(s, x))
   APP(app(minus, app(s, x)), app(s, y)) -> APP(p, app(s, y))
   APP(app(div, app(s, x)), app(s, y)) -> APP(s, app(app(div, app(app(minus, x), y)), app(s, y)))
   APP(app(div, app(s, x)), app(s, y)) -> APP(app(div, app(app(minus, x), y)), app(s, y))
   APP(app(div, app(s, x)), app(s, y)) -> APP(div, app(app(minus, x), y))
   APP(app(div, app(s, x)), app(s, y)) -> APP(app(minus, x), y)
   APP(app(div, app(s, x)), app(s, y)) -> APP(minus, x)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), y)), app(s, y)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), y)), app(s, y)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus1(s(x), s(y)) -> minus1(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   map(x0, nil)
   map(x0, cons(x1, x2))
   minus(x0, 0)
   minus(s(x0), s(x1))
   p(s(x0))
   div(0, s(x0))
   div(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(0, s(x0))
   div(s(x0), s(x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus1(s(x), s(y)) -> minus1(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   p(s(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(minus1(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus1(s(x), s(y)) -> minus1(p(s(x)), p(s(y)))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(17)
TRUE

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(div, app(s, x)), app(s, y)) -> APP(app(div, app(app(minus, x), y)), app(s, y))

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), y)), app(s, y)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(div, app(s, x)), app(s, y)) -> APP(app(div, app(app(minus, x), y)), app(s, y))

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   div1(s(x), s(y)) -> div1(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   p(s(x)) -> x

The set Q consists of the following terms:

   map(x0, nil)
   map(x0, cons(x1, x2))
   minus(x0, 0)
   minus(s(x0), s(x1))
   p(s(x0))
   div(0, s(x0))
   div(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   div(0, s(x0))
   div(s(x0), s(x1))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   div1(s(x), s(y)) -> div1(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   p(s(x)) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   div1(s(x), s(y)) -> div1(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
div1(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

p(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   p(s(x)) -> x


----------------------------------------

(26)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))
   p(s(x)) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), y)), app(s, y)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(minus, x0), 0)
   app(app(minus, app(s, x0)), app(s, x1))
   app(p, app(s, x0))
   app(app(div, 0), app(s, x0))
   app(app(div, app(s, x0)), app(s, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(33)
YES
