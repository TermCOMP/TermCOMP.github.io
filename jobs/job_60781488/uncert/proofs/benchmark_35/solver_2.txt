YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oqpnB.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) UsableRulesReductionPairsProof [EQUIVALENT, 2 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (36) YES
    (37) QDP
        (38) UsableRulesProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QReductionProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) MRRProof [EQUIVALENT, 3 ms]
        (43) QDP
        (44) PisEmptyProof [EQUIVALENT, 0 ms]
        (45) YES
    (46) QDP
        (47) UsableRulesProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) QReductionProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (52) YES
    (53) QDP
        (54) UsableRulesProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) QReductionProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) QDPOrderProof [EQUIVALENT, 0 ms]
        (59) QDP
        (60) PisEmptyProof [EQUIVALENT, 0 ms]
        (61) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))

The TRS R 2 is 
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The signature Sigma is {less_leaves_2, false, true}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
   QUOT(s(x), s(y)) -> MINUS(x, y)
   APP(add(n, x), y) -> APP(x, y)
   REVERSE(add(n, x)) -> APP(reverse(x), add(n, nil))
   REVERSE(add(n, x)) -> REVERSE(x)
   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))
   SHUFFLE(add(n, x)) -> REVERSE(x)
   CONCAT(cons(u, v), y) -> CONCAT(v, y)
   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))
   LESS_LEAVES(cons(u, v), cons(w, z)) -> CONCAT(u, v)
   LESS_LEAVES(cons(u, v), cons(w, z)) -> CONCAT(w, z)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 7 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(cons(u, v), y) -> CONCAT(v, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(cons(u, v), y) -> CONCAT(v, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(cons(u, v), y) -> CONCAT(v, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONCAT(cons(u, v), y) -> CONCAT(v, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

The TRS R consists of the following rules:

   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))

The TRS R consists of the following rules:

   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))

The set Q consists of the following terms:

   concat(leaf, x0)
   concat(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   LESS_LEAVES(cons(u, v), cons(w, z)) -> LESS_LEAVES(concat(u, v), concat(w, z))
The following rules are removed from R:

   concat(leaf, y) -> y
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(LESS_LEAVES(x_1, x_2)) = x_1 + x_2
   POL(concat(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(leaf) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   concat(cons(u, v), y) -> cons(u, concat(v, y))

The set Q consists of the following terms:

   concat(leaf, x0)
   concat(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(add(n, x), y) -> APP(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(add(n, x)) -> REVERSE(x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(add(n, x)) -> REVERSE(x)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(add(n, x)) -> REVERSE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REVERSE(add(n, x)) -> REVERSE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))

The TRS R consists of the following rules:

   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))

The TRS R consists of the following rules:

   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))

The set Q consists of the following terms:

   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   SHUFFLE(add(n, x)) -> SHUFFLE(reverse(x))


Used ordering: Polynomial interpretation [POLO]:

   POL(SHUFFLE(x_1)) = x_1
   POL(add(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1


----------------------------------------

(43)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))

The set Q consists of the following terms:

   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(52)
YES

----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))
   concat(leaf, y) -> y
   concat(cons(u, v), y) -> cons(u, concat(v, y))
   less_leaves(x, leaf) -> false
   less_leaves(leaf, cons(w, z)) -> true
   less_leaves(cons(u, v), cons(w, z)) -> less_leaves(concat(u, v), concat(w, z))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(nil)
   shuffle(add(x0, x1))
   concat(leaf, x0)
   concat(cons(x0, x1), x2)
   less_leaves(x0, leaf)
   less_leaves(leaf, cons(x0, x1))
   less_leaves(cons(x0, x1), cons(x2, x3))


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(59)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(61)
YES
