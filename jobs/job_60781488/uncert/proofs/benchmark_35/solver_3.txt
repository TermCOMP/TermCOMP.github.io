YES

Problem 1: 

(VAR vu95NonEmpty n u v w x y z)
(RULES
app(add(n,x),y) -> add(n,app(x,y))
app(nil,y) -> y
concat(cons(u,v),y) -> cons(u,concat(v,y))
concat(leaf,y) -> y
lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
lessu95leaves(leaf,cons(w,z)) -> ftrue
lessu95leaves(x,leaf) -> ffalse
minus(s(x),s(y)) -> minus(x,y)
minus(x,num0) -> x
quot(num0,s(y)) -> num0
quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
reverse(add(n,x)) -> app(reverse(x),add(n,nil))
reverse(nil) -> nil
shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
shuffle(nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 CONCAT(cons(u,v),y) -> CONCAT(v,y)
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> CONCAT(u,v)
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> CONCAT(w,z)
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> LESSU95LEAVES(concat(u,v),concat(w,z))
 MINUS(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
 REVERSE(add(n,x)) -> APP(reverse(x),add(n,nil))
 REVERSE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 CONCAT(cons(u,v),y) -> CONCAT(v,y)
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> CONCAT(u,v)
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> CONCAT(w,z)
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> LESSU95LEAVES(concat(u,v),concat(w,z))
 MINUS(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
 REVERSE(add(n,x)) -> APP(reverse(x),add(n,nil))
 REVERSE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(s(x),s(y)) -> MINUS(x,y)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 CONCAT(cons(u,v),y) -> CONCAT(v,y)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> LESSU95LEAVES(concat(u,v),concat(w,z))
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 REVERSE(add(n,x)) -> REVERSE(x)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil


The problem is decomposed in 7 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MINUS(s(x),s(y)) -> MINUS(x,y)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Projection:
 pi(MINUS) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
-> Usable rules:
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[concat](X1,X2) = 0
[lessu95leaves](X1,X2) = 0
[minus](X1,X2) = 2.X1
[quot](X1,X2) = 0
[reverse](X) = 0
[shuffle](X) = 0
[num0] = 0
[add](X1,X2) = 0
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[leaf] = 0
[nil] = 0
[s](X) = 2.X + 2
[ftrue] = 0
[APP](X1,X2) = 0
[CONCAT](X1,X2) = 0
[LESSU95LEAVES](X1,X2) = 0
[MINUS](X1,X2) = 0
[QUOT](X1,X2) = 2.X1
[REVERSE](X) = 0
[SHUFFLE](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 CONCAT(cons(u,v),y) -> CONCAT(v,y)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Projection:
 pi(CONCAT) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Reduction Pairs Processor:
-> Pairs:
 LESSU95LEAVES(cons(u,v),cons(w,z)) -> LESSU95LEAVES(concat(u,v),concat(w,z))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
-> Usable rules:
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 0
[concat](X1,X2) = 2.X1 + X2
[lessu95leaves](X1,X2) = 0
[minus](X1,X2) = 0
[quot](X1,X2) = 0
[reverse](X) = 0
[shuffle](X) = 0
[num0] = 0
[add](X1,X2) = 0
[cons](X1,X2) = 2.X1 + X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[leaf] = 0
[nil] = 0
[s](X) = 0
[ftrue] = 0
[APP](X1,X2) = 0
[CONCAT](X1,X2) = 0
[LESSU95LEAVES](X1,X2) = 2.X1 + X2
[MINUS](X1,X2) = 0
[QUOT](X1,X2) = 0
[REVERSE](X) = 0
[SHUFFLE](X) = 0

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Projection:
 pi(APP) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 REVERSE(add(n,x)) -> REVERSE(x)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Projection:
 pi(REVERSE) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Reduction Pairs Processor:
-> Pairs:
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
-> Usable rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = X1 + X2
[concat](X1,X2) = 0
[lessu95leaves](X1,X2) = 0
[minus](X1,X2) = 0
[quot](X1,X2) = 0
[reverse](X) = X
[shuffle](X) = 0
[num0] = 0
[add](X1,X2) = X1 + X2 + 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[leaf] = 0
[nil] = 0
[s](X) = 0
[ftrue] = 0
[APP](X1,X2) = 0
[CONCAT](X1,X2) = 0
[LESSU95LEAVES](X1,X2) = 0
[MINUS](X1,X2) = 0
[QUOT](X1,X2) = 0
[REVERSE](X) = 0
[SHUFFLE](X) = X

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 concat(cons(u,v),y) -> cons(u,concat(v,y))
 concat(leaf,y) -> y
 lessu95leaves(cons(u,v),cons(w,z)) -> lessu95leaves(concat(u,v),concat(w,z))
 lessu95leaves(leaf,cons(w,z)) -> ftrue
 lessu95leaves(x,leaf) -> ffalse
 minus(s(x),s(y)) -> minus(x,y)
 minus(x,num0) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
