YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
half(num0) -> num0
half(s(num0)) -> num0
half(s(s(x))) -> s(half(x))
if(ffalse,x,y) -> log2(half(x),y)
if(ftrue,x,s(y)) -> y
inc(num0) -> num0
inc(s(x)) -> s(inc(x))
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
log(x) -> log2(x,num0)
log2(x,y) -> if(le(x,s(num0)),x,inc(y))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
 IF(ffalse,x,y) -> HALF(x)
 IF(ffalse,x,y) -> LOG2(half(x),y)
 INC(s(x)) -> INC(x)
 LE(s(x),s(y)) -> LE(x,y)
 LOG(x) -> LOG2(x,num0)
 LOG2(x,y) -> IF(le(x,s(num0)),x,inc(y))
 LOG2(x,y) -> INC(y)
 LOG2(x,y) -> LE(x,s(num0))
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))

Problem 1: 

SCC Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
 IF(ffalse,x,y) -> HALF(x)
 IF(ffalse,x,y) -> LOG2(half(x),y)
 INC(s(x)) -> INC(x)
 LE(s(x),s(y)) -> LE(x,y)
 LOG(x) -> LOG2(x,num0)
 LOG2(x,y) -> IF(le(x,s(num0)),x,inc(y))
 LOG2(x,y) -> INC(y)
 LOG2(x,y) -> LE(x,s(num0))
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->->Cycle:
->->-> Pairs:
 INC(s(x)) -> INC(x)
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->->Cycle:
->->-> Pairs:
 HALF(s(s(x))) -> HALF(x)
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->->Cycle:
->->-> Pairs:
 IF(ffalse,x,y) -> LOG2(half(x),y)
 LOG2(x,y) -> IF(le(x,s(num0)),x,inc(y))
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))


The problem is decomposed in 4 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Projection:
 pi(LE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 INC(s(x)) -> INC(x)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Projection:
 pi(INC) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Projection:
 pi(HALF) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Reduction Pairs Processor:
-> Pairs:
 IF(ffalse,x,y) -> LOG2(half(x),y)
 LOG2(x,y) -> IF(le(x,s(num0)),x,inc(y))
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
-> Usable rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[half](X) = 1/2.X
[if](X1,X2,X3) = 0
[inc](X) = 2.X + 1
[le](X1,X2) = 1/2.X1
[log](X) = 0
[log2](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 1/2
[s](X) = 2.X + 2
[ftrue] = 0
[HALF](X) = 0
[IF](X1,X2,X3) = 2.X1 + X2
[INC](X) = 0
[LE](X1,X2) = 0
[LOG](X) = 0
[LOG2](X1,X2) = 2.X1 + 1/2

Problem 1.4: 

SCC Processor:
-> Pairs:
 LOG2(x,y) -> IF(le(x,s(num0)),x,inc(y))
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,y) -> log2(half(x),y)
 if(ftrue,x,s(y)) -> y
 inc(num0) -> num0
 inc(s(x)) -> s(inc(x))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(x) -> log2(x,num0)
 log2(x,y) -> if(le(x,s(num0)),x,inc(y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
