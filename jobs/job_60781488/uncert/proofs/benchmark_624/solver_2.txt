YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eRODU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) TransformationProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) TransformationProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) TransformationProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) DependencyGraphProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) UsableRulesProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) TransformationProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) UsableRulesProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) QReductionProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) TransformationProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) TransformationProof [EQUIVALENT, 0 ms]
        (56) QDP
        (57) TransformationProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) TransformationProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) DependencyGraphProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) MRRProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) PisEmptyProof [EQUIVALENT, 0 ms]
        (66) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   half(0) -> 0
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError

The TRS R 2 is 
   f -> g
   f -> h

The signature Sigma is {f, g, h}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)
   LE(s(x), s(y)) -> LE(x, y)
   INC(s(x)) -> INC(x)
   LOGARITHM(x) -> LOGITER(x, 0)
   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   LOGITER(x, y) -> LE(s(0), x)
   LOGITER(x, y) -> LE(s(s(0)), x)
   LOGITER(x, y) -> HALF(x)
   LOGITER(x, y) -> INC(y)
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

R is empty.
The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INC(s(x)) -> INC(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(x))) -> HALF(x)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   logarithm(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)
   f -> g
   f -> h

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   logarithm(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)
   f


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), half(x), inc(y))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), half(x), inc(y)) at position [0] we obtained the following new rules [LPAR04]:

   (LOGITER(0, y1) -> IF(false, le(s(s(0)), 0), half(0), inc(y1)),LOGITER(0, y1) -> IF(false, le(s(s(0)), 0), half(0), inc(y1)))
   (LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), half(s(x1)), inc(y1)),LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), half(s(x1)), inc(y1)))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(0, y1) -> IF(false, le(s(s(0)), 0), half(0), inc(y1))
   LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), half(s(x1)), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), half(s(x1)), inc(y1))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), half(s(x1)), inc(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), half(s(x1)), inc(y1)),LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), half(s(x1)), inc(y1)))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), half(s(x1)), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), half(s(x1)), inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), half(s(x1)), inc(y1)),LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), half(s(x1)), inc(y1)))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), half(s(x1)), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), half(s(x1)), inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (LOGITER(s(0), y1) -> IF(true, false, half(s(0)), inc(y1)),LOGITER(s(0), y1) -> IF(true, false, half(s(0)), inc(y1)))
   (LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), half(s(s(x1))), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), half(s(s(x1))), inc(y1)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(0), y1) -> IF(true, false, half(s(0)), inc(y1))
   LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), half(s(s(x1))), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), half(s(s(x1))), inc(y1))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   le(0, y) -> true

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), half(s(s(x1))), inc(y1))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), half(s(s(x1))), inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(x1)), y1) -> IF(true, true, half(s(s(x1))), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, true, half(s(s(x1))), inc(y1)))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, half(s(s(x1))), inc(y1))

The TRS R consists of the following rules:

   le(0, y) -> true
   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, half(s(s(x1))), inc(y1))

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, half(s(s(x1))), inc(y1))

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, true, half(s(s(x1))), inc(y1)) at position [2] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(x1)), y1) -> IF(true, true, s(half(x1)), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, true, s(half(x1)), inc(y1)))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, s(half(x1)), inc(y1))

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF(true, true, x, y) -> LOGITER(x, y) we obtained the following new rules [LPAR04]:

   (IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1),IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, true, s(half(x1)), inc(y1))
   IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1)

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1) we obtained the following new rules [LPAR04]:

   (IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1),IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, true, s(half(x1)), inc(y1))
   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, true, s(half(x1)), inc(y1)) at position [2,0] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(s(s(x0)))), y1) -> IF(true, true, s(s(half(x0))), inc(y1)),LOGITER(s(s(s(s(x0)))), y1) -> IF(true, true, s(s(half(x0))), inc(y1)))
   (LOGITER(s(s(0)), y1) -> IF(true, true, s(0), inc(y1)),LOGITER(s(s(0)), y1) -> IF(true, true, s(0), inc(y1)))
   (LOGITER(s(s(s(0))), y1) -> IF(true, true, s(0), inc(y1)),LOGITER(s(s(s(0))), y1) -> IF(true, true, s(0), inc(y1)))


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)
   LOGITER(s(s(s(s(x0)))), y1) -> IF(true, true, s(s(half(x0))), inc(y1))
   LOGITER(s(s(0)), y1) -> IF(true, true, s(0), inc(y1))
   LOGITER(s(s(s(0))), y1) -> IF(true, true, s(0), inc(y1))

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(s(s(x0)))), y1) -> IF(true, true, s(s(half(x0))), inc(y1))
   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   LOGITER(s(s(s(s(x0)))), y1) -> IF(true, true, s(s(half(x0))), inc(y1))
   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)

Strictly oriented rules of the TRS R:

   half(s(s(x))) -> s(half(x))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   half(0) -> 0
   half(s(0)) -> 0

Used ordering: Knuth-Bendix order [KBO] with precedence:half_1 > true > IF_4 > LOGITER_2 > 0 > inc_1 > s_1

and weight map:

   0=1
   true=10
   half_1=0
   s_1=2
   inc_1=3
   LOGITER_2=20
   IF_4=0

The variable weight is 1

----------------------------------------

(64)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   half(0)
   half(s(0))
   half(s(s(x0)))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(66)
YES
