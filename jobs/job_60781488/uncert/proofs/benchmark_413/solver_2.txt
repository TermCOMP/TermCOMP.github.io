NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/JmD7u.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) MNOCProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) NonLoopProof [COMPLETE, 28 ms]
        (32) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The TRS R 2 is 
   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))

The signature Sigma is {while_2}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   WHILE(true, s(s(s(i)))) -> WHILE(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   WHILE(true, s(s(s(i)))) -> GT(s(s(s(i))), s(0))
   WHILE(true, s(s(s(i)))) -> F(s(s(s(i))))
   F(i) -> IF(neq(i, s(s(0))), i)
   F(i) -> NEQ(i, s(s(0)))
   GT(s(x), s(y)) -> GT(x, y)
   IF(true, i) -> PLUS(i, s(0))
   NEQ(s(x), s(y)) -> NEQ(x, y)
   PLUS(s(x), y) -> PLUS(x, s(y))

The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, s(y))

The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, s(y))

R is empty.
The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, s(y))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, s(y))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

R is empty.
The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*NEQ(s(x), s(y)) -> NEQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   WHILE(true, s(s(s(i)))) -> WHILE(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))

The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

The set Q consists of the following terms:

   while(true, s(s(s(x0))))
   f(x0)
   gt(s(x0), s(x1))
   gt(s(x0), 0)
   gt(0, 0)
   gt(0, s(x0))
   if(true, x0)
   if(false, x0)
   neq(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   plus(s(x0), x1)
   plus(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   WHILE(true, s(s(s(i)))) -> WHILE(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))

The TRS R consists of the following rules:

   while(true, s(s(s(i)))) -> while(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))
   f(i) -> if(neq(i, s(s(0))), i)
   gt(s(x), s(y)) -> gt(x, y)
   gt(s(x), 0) -> true
   gt(0, 0) -> false
   gt(0, s(y)) -> false
   if(true, i) -> plus(i, s(0))
   if(false, i) -> i
   neq(s(x), s(y)) -> neq(x, y)
   neq(0, 0) -> false
   neq(0, s(y)) -> true
   neq(s(x), 0) -> true
   plus(s(x), y) -> plus(x, s(y))
   plus(0, y) -> y

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [ ] on the rule
WHILE(true, s(s(s(s(zr0)))))[zr0 / s(zr0)]^n[zr0 / 0] -> WHILE(true, s(s(s(s(s(zr0))))))[zr0 / s(zr0)]^n[zr0 / 0]
This rule is correct for the QDP as the following derivation shows:

WHILE(true, s(s(s(s(zr0)))))[zr0 / s(zr0)]^n[zr0 / 0] -> WHILE(true, s(s(s(s(s(zr0))))))[zr0 / s(zr0)]^n[zr0 / 0]
    by Equivalence by Domain Renaming of the lhs with [zl0 / zr0]
    intermediate steps: Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
    WHILE(true, s(s(s(s(zl1)))))[zr1 / s(zr1), zl1 / s(zl1)]^n[zr1 / 0, zl1 / 0] -> WHILE(true, s(s(s(s(s(zr1))))))[zr1 / s(zr1), zl1 / s(zl1)]^n[zr1 / 0, zl1 / 0]
        by Narrowing at position: [1]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
        WHILE(true, s(s(s(s(zs1)))))[zt1 / s(zt1), zs1 / s(zs1)]^n[zt1 / 0, zs1 / y1] -> WHILE(true, plus(y1, s(s(s(s(s(zt1)))))))[zt1 / s(zt1), zs1 / s(zs1)]^n[zt1 / 0, zs1 / y1]
            by Narrowing at position: [1]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
            WHILE(true, s(s(s(i))))[ ]^n[ ] -> WHILE(true, plus(i, s(s(s(s(0))))))[ ]^n[ ]
                by Rewrite t with the rewrite sequence <Pos,Rule>: [([0],gt(s(x), s(y)) -> gt(x, y)), ([0],gt(s(x), 0) -> true), ([1],f(i) -> if(neq(i, s(s(0))), i)), ([1,0],neq(s(x), s(y)) -> neq(x, y)), ([1,0],neq(s(x), s(y)) -> neq(x, y)), ([1,0],neq(s(x), 0) -> true), ([1],if(true, i) -> plus(i, s(0))), ([1],plus(s(x), y) -> plus(x, s(y))), ([1],plus(s(x), y) -> plus(x, s(y))), ([1],plus(s(x), y) -> plus(x, s(y)))]
                WHILE(true, s(s(s(i))))[ ]^n[ ] -> WHILE(gt(s(s(s(i))), s(0)), f(s(s(s(i)))))[ ]^n[ ]
                    by Rule from TRS P

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv Smu (rhs) - Instantiation - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
            plus(s(x), y)[x / s(x)]^n[ ] -> plus(x, s(y))[y / s(y)]^n[ ]
                by PatternCreation I with delta: [ ], theta: [y / s(y)], sigma: [x / s(x)]
                plus(s(x), y)[ ]^n[ ] -> plus(x, s(y))[ ]^n[ ]
                    by Rule from TRS R

        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
        plus(0, y)[ ]^n[ ] -> y[ ]^n[ ]
            by Rule from TRS R
----------------------------------------

(32)
NO
