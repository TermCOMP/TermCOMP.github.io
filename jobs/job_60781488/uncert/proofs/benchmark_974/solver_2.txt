YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VRNBE.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 33 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 1 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 20 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 4 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   h(X) -> c(n__d(X))
   f(X) -> n__f(X)
   g(X) -> n__g(X)
   d(X) -> n__d(X)
   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(activate(x_1)) = x_1
   POL(c(x_1)) = x_1
   POL(d(x_1)) = x_1
   POL(f(x_1)) = x_1
   POL(g(x_1)) = x_1
   POL(h(x_1)) = 1 + x_1
   POL(n__d(x_1)) = x_1
   POL(n__f(x_1)) = x_1
   POL(n__g(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   h(X) -> c(n__d(X))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   f(X) -> n__f(X)
   g(X) -> n__g(X)
   d(X) -> n__d(X)
   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(f(X)) -> C(n__f(n__g(n__f(X))))
   C(X) -> D(activate(X))
   C(X) -> ACTIVATE(X)
   ACTIVATE(n__f(X)) -> F(activate(X))
   ACTIVATE(n__f(X)) -> ACTIVATE(X)
   ACTIVATE(n__g(X)) -> G(X)
   ACTIVATE(n__d(X)) -> D(X)

The TRS R consists of the following rules:

   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   f(X) -> n__f(X)
   g(X) -> n__g(X)
   d(X) -> n__d(X)
   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(X) -> ACTIVATE(X)
   ACTIVATE(n__f(X)) -> F(activate(X))
   F(f(X)) -> C(n__f(n__g(n__f(X))))
   ACTIVATE(n__f(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   f(X) -> n__f(X)
   g(X) -> n__g(X)
   d(X) -> n__d(X)
   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ACTIVATE(n__f(X)) -> ACTIVATE(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(ACTIVATE(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(F(x_1)) = 1 + 2*x_1
   POL(activate(x_1)) = x_1
   POL(c(x_1)) = x_1
   POL(d(x_1)) = x_1
   POL(f(x_1)) = 1 + 2*x_1
   POL(g(x_1)) = x_1
   POL(n__d(x_1)) = x_1
   POL(n__f(x_1)) = 1 + 2*x_1
   POL(n__g(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(X) -> ACTIVATE(X)
   ACTIVATE(n__f(X)) -> F(activate(X))
   F(f(X)) -> C(n__f(n__g(n__f(X))))

The TRS R consists of the following rules:

   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   f(X) -> n__f(X)
   g(X) -> n__g(X)
   d(X) -> n__d(X)
   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__f(X)) -> F(activate(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(ACTIVATE(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(F(x_1)) = x_1
   POL(activate(x_1)) = x_1
   POL(c(x_1)) = 0
   POL(d(x_1)) = 0
   POL(f(x_1)) = 1 + x_1
   POL(g(x_1)) = 0
   POL(n__d(x_1)) = 0
   POL(n__f(x_1)) = 1 + x_1
   POL(n__g(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X
   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   d(X) -> n__d(X)
   f(X) -> n__f(X)
   g(X) -> n__g(X)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(X) -> ACTIVATE(X)
   F(f(X)) -> C(n__f(n__g(n__f(X))))

The TRS R consists of the following rules:

   f(f(X)) -> c(n__f(n__g(n__f(X))))
   c(X) -> d(activate(X))
   f(X) -> n__f(X)
   g(X) -> n__g(X)
   d(X) -> n__d(X)
   activate(n__f(X)) -> f(activate(X))
   activate(n__g(X)) -> g(X)
   activate(n__d(X)) -> d(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(12)
TRUE
