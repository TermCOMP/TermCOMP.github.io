YES

Problem 1: 

(VAR vu95NonEmpty m n)
(RULES
BIT0(num0) -> num0
EVEN(BIT0(n)) -> T
EVEN(NUMERAL(n)) -> EVEN(n)
EVEN(num0) -> T
EVEN(BIT1(n)) -> F
NUMERAL(num0) -> num0
ODD(BIT0(n)) -> F
ODD(NUMERAL(n)) -> ODD(n)
ODD(num0) -> F
ODD(BIT1(n)) -> T
PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
PRE(num0) -> num0
PRE(BIT1(n)) -> BIT0(n)
SUC(BIT0(n)) -> BIT1(n)
SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
SUC(num0) -> BIT1(num0)
SUC(BIT1(n)) -> BIT0(SUC(n))
eq(BIT0(m),BIT0(n)) -> eq(m,n)
eq(BIT0(m),BIT1(n)) -> F
eq(BIT0(n),num0) -> eq(n,num0)
eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
eq(num0,BIT0(n)) -> eq(num0,n)
eq(num0,num0) -> T
eq(num0,BIT1(n)) -> F
eq(BIT1(m),BIT0(n)) -> F
eq(BIT1(m),BIT1(n)) -> eq(m,n)
eq(BIT1(n),num0) -> F
exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
exp(BIT0(m),num0) -> BIT1(num0)
exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
exp(num0,num0) -> BIT1(num0)
exp(num0,BIT1(n)) -> num0
exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
exp(BIT1(m),num0) -> BIT1(num0)
exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
ge(BIT0(n),BIT0(m)) -> ge(n,m)
ge(BIT0(n),num0) -> T
ge(BIT0(n),BIT1(m)) -> gt(n,m)
ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
ge(num0,BIT0(n)) -> ge(num0,n)
ge(num0,num0) -> T
ge(num0,BIT1(n)) -> F
ge(BIT1(n),BIT0(m)) -> ge(n,m)
ge(BIT1(n),num0) -> T
ge(BIT1(n),BIT1(m)) -> ge(n,m)
gt(BIT0(n),BIT0(m)) -> gt(n,m)
gt(BIT0(n),num0) -> gt(n,num0)
gt(BIT0(n),BIT1(m)) -> gt(n,m)
gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
gt(num0,BIT0(n)) -> F
gt(num0,num0) -> F
gt(num0,BIT1(n)) -> F
gt(BIT1(n),BIT0(m)) -> ge(n,m)
gt(BIT1(n),num0) -> T
gt(BIT1(n),BIT1(m)) -> gt(n,m)
le(BIT0(m),BIT0(n)) -> le(m,n)
le(BIT0(m),BIT1(n)) -> le(m,n)
le(BIT0(n),num0) -> le(n,num0)
le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
le(num0,BIT0(n)) -> T
le(num0,num0) -> T
le(num0,BIT1(n)) -> T
le(BIT1(m),BIT0(n)) -> lt(m,n)
le(BIT1(m),BIT1(n)) -> le(m,n)
le(BIT1(n),num0) -> F
lt(BIT0(m),BIT0(n)) -> lt(m,n)
lt(BIT0(m),BIT1(n)) -> le(m,n)
lt(BIT0(n),num0) -> F
lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
lt(num0,BIT0(n)) -> lt(num0,n)
lt(num0,num0) -> F
lt(num0,BIT1(n)) -> T
lt(BIT1(m),BIT0(n)) -> lt(m,n)
lt(BIT1(m),BIT1(n)) -> lt(m,n)
lt(BIT1(n),num0) -> F
minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
minus(BIT0(n),num0) -> BIT0(n)
minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
minus(num0,BIT0(n)) -> num0
minus(num0,num0) -> num0
minus(num0,BIT1(n)) -> num0
minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
minus(BIT1(n),num0) -> BIT1(n)
mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
mult(BIT0(n),num0) -> num0
mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
mult(num0,BIT0(n)) -> num0
mult(num0,num0) -> num0
mult(num0,BIT1(n)) -> num0
mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
mult(BIT1(n),num0) -> num0
plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
plus(BIT0(n),num0) -> BIT0(n)
plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
plus(num0,BIT0(n)) -> BIT0(n)
plus(num0,num0) -> num0
plus(num0,BIT1(n)) -> BIT1(n)
plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
plus(BIT1(n),num0) -> BIT1(n)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 EVENSharp(NUMERAL(n)) -> EVENSharp(n)
 ODDSharp(NUMERAL(n)) -> ODDSharp(n)
 PRESharp(BIT0(n)) -> PRESharp(n)
 PRESharp(BIT0(n)) -> EQ(n,num0)
 PRESharp(NUMERAL(n)) -> NUMERALSharp(PRE(n))
 PRESharp(NUMERAL(n)) -> PRESharp(n)
 PRESharp(BIT1(n)) -> BIT0Sharp(n)
 SUCSharp(NUMERAL(n)) -> NUMERALSharp(SUC(n))
 SUCSharp(NUMERAL(n)) -> SUCSharp(n)
 SUCSharp(BIT1(n)) -> BIT0Sharp(SUC(n))
 SUCSharp(BIT1(n)) -> SUCSharp(n)
 EQ(BIT0(m),BIT0(n)) -> EQ(m,n)
 EQ(BIT0(n),num0) -> EQ(n,num0)
 EQ(NUMERAL(m),NUMERAL(n)) -> EQ(m,n)
 EQ(num0,BIT0(n)) -> EQ(num0,n)
 EQ(BIT1(m),BIT1(n)) -> EQ(m,n)
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT0(n)) -> MULT(exp(BIT0(m),n),exp(BIT0(m),n))
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> MULT(BIT0(m),exp(BIT0(m),n))
 EXP(BIT0(m),BIT1(n)) -> MULT(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 EXP(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(exp(m,n))
 EXP(NUMERAL(m),NUMERAL(n)) -> EXP(m,n)
 EXP(num0,BIT0(n)) -> EXP(num0,n)
 EXP(num0,BIT0(n)) -> MULT(exp(num0,n),exp(num0,n))
 EXP(BIT1(m),BIT0(n)) -> EXP(BIT1(m),n)
 EXP(BIT1(m),BIT0(n)) -> MULT(exp(BIT1(m),n),exp(BIT1(m),n))
 EXP(BIT1(m),BIT1(n)) -> EXP(BIT1(m),n)
 EXP(BIT1(m),BIT1(n)) -> MULT(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 EXP(BIT1(m),BIT1(n)) -> MULT(BIT1(m),exp(BIT1(m),n))
 GE(BIT0(n),BIT0(m)) -> GE(n,m)
 GE(BIT0(n),BIT1(m)) -> GT(n,m)
 GE(NUMERAL(n),NUMERAL(m)) -> GE(n,m)
 GE(num0,BIT0(n)) -> GE(num0,n)
 GE(BIT1(n),BIT0(m)) -> GE(n,m)
 GE(BIT1(n),BIT1(m)) -> GE(n,m)
 GT(BIT0(n),BIT0(m)) -> GT(n,m)
 GT(BIT0(n),num0) -> GT(n,num0)
 GT(BIT0(n),BIT1(m)) -> GT(n,m)
 GT(NUMERAL(n),NUMERAL(m)) -> GT(n,m)
 GT(BIT1(n),BIT0(m)) -> GE(n,m)
 GT(BIT1(n),BIT1(m)) -> GT(n,m)
 LE(BIT0(m),BIT0(n)) -> LE(m,n)
 LE(BIT0(m),BIT1(n)) -> LE(m,n)
 LE(BIT0(n),num0) -> LE(n,num0)
 LE(NUMERAL(m),NUMERAL(n)) -> LE(m,n)
 LE(BIT1(m),BIT0(n)) -> LT(m,n)
 LE(BIT1(m),BIT1(n)) -> LE(m,n)
 LT(BIT0(m),BIT0(n)) -> LT(m,n)
 LT(BIT0(m),BIT1(n)) -> LE(m,n)
 LT(NUMERAL(m),NUMERAL(n)) -> LT(m,n)
 LT(num0,BIT0(n)) -> LT(num0,n)
 LT(BIT1(m),BIT0(n)) -> LT(m,n)
 LT(BIT1(m),BIT1(n)) -> LT(m,n)
 MINUS(BIT0(m),BIT0(n)) -> BIT0Sharp(minus(m,n))
 MINUS(BIT0(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT0(m),BIT1(n)) -> BIT0Sharp(minus(m,n))
 MINUS(BIT0(m),BIT1(n)) -> PRESharp(BIT0(minus(m,n)))
 MINUS(BIT0(m),BIT1(n)) -> MINUS(m,n)
 MINUS(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(minus(m,n))
 MINUS(NUMERAL(m),NUMERAL(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT0(n)) -> LE(n,m)
 MINUS(BIT1(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT1(n)) -> BIT0Sharp(minus(m,n))
 MINUS(BIT1(m),BIT1(n)) -> MINUS(m,n)
 MULT(BIT0(m),BIT0(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT0(m),BIT0(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT0(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT0(m),BIT1(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT0(m),BIT1(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT0(m),BIT1(n)) -> MULT(m,n)
 MULT(BIT0(m),BIT1(n)) -> PLUS(BIT0(m),BIT0(BIT0(mult(m,n))))
 MULT(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(mult(m,n))
 MULT(NUMERAL(m),NUMERAL(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT0(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT1(m),BIT0(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT1(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT0(n)) -> PLUS(BIT0(n),BIT0(BIT0(mult(m,n))))
 MULT(BIT1(m),BIT1(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT1(m),BIT1(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT1(m),BIT1(n)) -> BIT0Sharp(n)
 MULT(BIT1(m),BIT1(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT1(n)) -> PLUS(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 MULT(BIT1(m),BIT1(n)) -> PLUS(BIT1(m),BIT0(n))
 PLUS(BIT0(m),BIT0(n)) -> BIT0Sharp(plus(m,n))
 PLUS(BIT0(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT0(m),BIT1(n)) -> PLUS(m,n)
 PLUS(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(plus(m,n))
 PLUS(NUMERAL(m),NUMERAL(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT1(n)) -> BIT0Sharp(SUC(plus(m,n)))
 PLUS(BIT1(m),BIT1(n)) -> SUCSharp(plus(m,n))
 PLUS(BIT1(m),BIT1(n)) -> PLUS(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)

Problem 1: 

SCC Processor:
-> Pairs:
 EVENSharp(NUMERAL(n)) -> EVENSharp(n)
 ODDSharp(NUMERAL(n)) -> ODDSharp(n)
 PRESharp(BIT0(n)) -> PRESharp(n)
 PRESharp(BIT0(n)) -> EQ(n,num0)
 PRESharp(NUMERAL(n)) -> NUMERALSharp(PRE(n))
 PRESharp(NUMERAL(n)) -> PRESharp(n)
 PRESharp(BIT1(n)) -> BIT0Sharp(n)
 SUCSharp(NUMERAL(n)) -> NUMERALSharp(SUC(n))
 SUCSharp(NUMERAL(n)) -> SUCSharp(n)
 SUCSharp(BIT1(n)) -> BIT0Sharp(SUC(n))
 SUCSharp(BIT1(n)) -> SUCSharp(n)
 EQ(BIT0(m),BIT0(n)) -> EQ(m,n)
 EQ(BIT0(n),num0) -> EQ(n,num0)
 EQ(NUMERAL(m),NUMERAL(n)) -> EQ(m,n)
 EQ(num0,BIT0(n)) -> EQ(num0,n)
 EQ(BIT1(m),BIT1(n)) -> EQ(m,n)
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT0(n)) -> MULT(exp(BIT0(m),n),exp(BIT0(m),n))
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> MULT(BIT0(m),exp(BIT0(m),n))
 EXP(BIT0(m),BIT1(n)) -> MULT(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 EXP(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(exp(m,n))
 EXP(NUMERAL(m),NUMERAL(n)) -> EXP(m,n)
 EXP(num0,BIT0(n)) -> EXP(num0,n)
 EXP(num0,BIT0(n)) -> MULT(exp(num0,n),exp(num0,n))
 EXP(BIT1(m),BIT0(n)) -> EXP(BIT1(m),n)
 EXP(BIT1(m),BIT0(n)) -> MULT(exp(BIT1(m),n),exp(BIT1(m),n))
 EXP(BIT1(m),BIT1(n)) -> EXP(BIT1(m),n)
 EXP(BIT1(m),BIT1(n)) -> MULT(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 EXP(BIT1(m),BIT1(n)) -> MULT(BIT1(m),exp(BIT1(m),n))
 GE(BIT0(n),BIT0(m)) -> GE(n,m)
 GE(BIT0(n),BIT1(m)) -> GT(n,m)
 GE(NUMERAL(n),NUMERAL(m)) -> GE(n,m)
 GE(num0,BIT0(n)) -> GE(num0,n)
 GE(BIT1(n),BIT0(m)) -> GE(n,m)
 GE(BIT1(n),BIT1(m)) -> GE(n,m)
 GT(BIT0(n),BIT0(m)) -> GT(n,m)
 GT(BIT0(n),num0) -> GT(n,num0)
 GT(BIT0(n),BIT1(m)) -> GT(n,m)
 GT(NUMERAL(n),NUMERAL(m)) -> GT(n,m)
 GT(BIT1(n),BIT0(m)) -> GE(n,m)
 GT(BIT1(n),BIT1(m)) -> GT(n,m)
 LE(BIT0(m),BIT0(n)) -> LE(m,n)
 LE(BIT0(m),BIT1(n)) -> LE(m,n)
 LE(BIT0(n),num0) -> LE(n,num0)
 LE(NUMERAL(m),NUMERAL(n)) -> LE(m,n)
 LE(BIT1(m),BIT0(n)) -> LT(m,n)
 LE(BIT1(m),BIT1(n)) -> LE(m,n)
 LT(BIT0(m),BIT0(n)) -> LT(m,n)
 LT(BIT0(m),BIT1(n)) -> LE(m,n)
 LT(NUMERAL(m),NUMERAL(n)) -> LT(m,n)
 LT(num0,BIT0(n)) -> LT(num0,n)
 LT(BIT1(m),BIT0(n)) -> LT(m,n)
 LT(BIT1(m),BIT1(n)) -> LT(m,n)
 MINUS(BIT0(m),BIT0(n)) -> BIT0Sharp(minus(m,n))
 MINUS(BIT0(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT0(m),BIT1(n)) -> BIT0Sharp(minus(m,n))
 MINUS(BIT0(m),BIT1(n)) -> PRESharp(BIT0(minus(m,n)))
 MINUS(BIT0(m),BIT1(n)) -> MINUS(m,n)
 MINUS(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(minus(m,n))
 MINUS(NUMERAL(m),NUMERAL(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT0(n)) -> LE(n,m)
 MINUS(BIT1(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT1(n)) -> BIT0Sharp(minus(m,n))
 MINUS(BIT1(m),BIT1(n)) -> MINUS(m,n)
 MULT(BIT0(m),BIT0(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT0(m),BIT0(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT0(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT0(m),BIT1(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT0(m),BIT1(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT0(m),BIT1(n)) -> MULT(m,n)
 MULT(BIT0(m),BIT1(n)) -> PLUS(BIT0(m),BIT0(BIT0(mult(m,n))))
 MULT(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(mult(m,n))
 MULT(NUMERAL(m),NUMERAL(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT0(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT1(m),BIT0(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT1(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT0(n)) -> PLUS(BIT0(n),BIT0(BIT0(mult(m,n))))
 MULT(BIT1(m),BIT1(n)) -> BIT0Sharp(BIT0(mult(m,n)))
 MULT(BIT1(m),BIT1(n)) -> BIT0Sharp(mult(m,n))
 MULT(BIT1(m),BIT1(n)) -> BIT0Sharp(n)
 MULT(BIT1(m),BIT1(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT1(n)) -> PLUS(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 MULT(BIT1(m),BIT1(n)) -> PLUS(BIT1(m),BIT0(n))
 PLUS(BIT0(m),BIT0(n)) -> BIT0Sharp(plus(m,n))
 PLUS(BIT0(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT0(m),BIT1(n)) -> PLUS(m,n)
 PLUS(NUMERAL(m),NUMERAL(n)) -> NUMERALSharp(plus(m,n))
 PLUS(NUMERAL(m),NUMERAL(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT1(n)) -> BIT0Sharp(SUC(plus(m,n)))
 PLUS(BIT1(m),BIT1(n)) -> SUCSharp(plus(m,n))
 PLUS(BIT1(m),BIT1(n)) -> PLUS(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LT(num0,BIT0(n)) -> LT(num0,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 LE(BIT0(n),num0) -> LE(n,num0)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 LE(BIT0(m),BIT0(n)) -> LE(m,n)
 LE(BIT0(m),BIT1(n)) -> LE(m,n)
 LE(NUMERAL(m),NUMERAL(n)) -> LE(m,n)
 LE(BIT1(m),BIT0(n)) -> LT(m,n)
 LE(BIT1(m),BIT1(n)) -> LE(m,n)
 LT(BIT0(m),BIT0(n)) -> LT(m,n)
 LT(BIT0(m),BIT1(n)) -> LE(m,n)
 LT(NUMERAL(m),NUMERAL(n)) -> LT(m,n)
 LT(BIT1(m),BIT0(n)) -> LT(m,n)
 LT(BIT1(m),BIT1(n)) -> LT(m,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 GT(BIT0(n),num0) -> GT(n,num0)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 GE(num0,BIT0(n)) -> GE(num0,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 GE(BIT0(n),BIT0(m)) -> GE(n,m)
 GE(BIT0(n),BIT1(m)) -> GT(n,m)
 GE(NUMERAL(n),NUMERAL(m)) -> GE(n,m)
 GE(BIT1(n),BIT0(m)) -> GE(n,m)
 GE(BIT1(n),BIT1(m)) -> GE(n,m)
 GT(BIT0(n),BIT0(m)) -> GT(n,m)
 GT(BIT0(n),BIT1(m)) -> GT(n,m)
 GT(NUMERAL(n),NUMERAL(m)) -> GT(n,m)
 GT(BIT1(n),BIT0(m)) -> GE(n,m)
 GT(BIT1(n),BIT1(m)) -> GT(n,m)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EQ(num0,BIT0(n)) -> EQ(num0,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EQ(BIT0(n),num0) -> EQ(n,num0)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EQ(BIT0(m),BIT0(n)) -> EQ(m,n)
 EQ(NUMERAL(m),NUMERAL(n)) -> EQ(m,n)
 EQ(BIT1(m),BIT1(n)) -> EQ(m,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 SUCSharp(NUMERAL(n)) -> SUCSharp(n)
 SUCSharp(BIT1(n)) -> SUCSharp(n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 PLUS(BIT0(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT0(m),BIT1(n)) -> PLUS(m,n)
 PLUS(NUMERAL(m),NUMERAL(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT1(n)) -> PLUS(m,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 MULT(BIT0(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT0(m),BIT1(n)) -> MULT(m,n)
 MULT(NUMERAL(m),NUMERAL(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT1(n)) -> MULT(m,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EXP(num0,BIT0(n)) -> EXP(num0,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EXP(BIT1(m),BIT0(n)) -> EXP(BIT1(m),n)
 EXP(BIT1(m),BIT1(n)) -> EXP(BIT1(m),n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
 EXP(NUMERAL(m),NUMERAL(n)) -> EXP(m,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 PRESharp(BIT0(n)) -> PRESharp(n)
 PRESharp(NUMERAL(n)) -> PRESharp(n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 MINUS(BIT0(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT0(m),BIT1(n)) -> MINUS(m,n)
 MINUS(NUMERAL(m),NUMERAL(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT1(n)) -> MINUS(m,n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 ODDSharp(NUMERAL(n)) -> ODDSharp(n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->->Cycle:
->->-> Pairs:
 EVENSharp(NUMERAL(n)) -> EVENSharp(n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)


The problem is decomposed in 19 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LT(num0,BIT0(n)) -> LT(num0,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(LT) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LE(BIT0(n),num0) -> LE(n,num0)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(LE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 LE(BIT0(m),BIT0(n)) -> LE(m,n)
 LE(BIT0(m),BIT1(n)) -> LE(m,n)
 LE(NUMERAL(m),NUMERAL(n)) -> LE(m,n)
 LE(BIT1(m),BIT0(n)) -> LT(m,n)
 LE(BIT1(m),BIT1(n)) -> LE(m,n)
 LT(BIT0(m),BIT0(n)) -> LT(m,n)
 LT(BIT0(m),BIT1(n)) -> LE(m,n)
 LT(NUMERAL(m),NUMERAL(n)) -> LT(m,n)
 LT(BIT1(m),BIT0(n)) -> LT(m,n)
 LT(BIT1(m),BIT1(n)) -> LT(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(LE) = 1
 pi(LT) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 GT(BIT0(n),num0) -> GT(n,num0)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(GT) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 GE(num0,BIT0(n)) -> GE(num0,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(GE) = 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 GE(BIT0(n),BIT0(m)) -> GE(n,m)
 GE(BIT0(n),BIT1(m)) -> GT(n,m)
 GE(NUMERAL(n),NUMERAL(m)) -> GE(n,m)
 GE(BIT1(n),BIT0(m)) -> GE(n,m)
 GE(BIT1(n),BIT1(m)) -> GE(n,m)
 GT(BIT0(n),BIT0(m)) -> GT(n,m)
 GT(BIT0(n),BIT1(m)) -> GT(n,m)
 GT(NUMERAL(n),NUMERAL(m)) -> GT(n,m)
 GT(BIT1(n),BIT0(m)) -> GE(n,m)
 GT(BIT1(n),BIT1(m)) -> GT(n,m)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(GE) = 1
 pi(GT) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 EQ(num0,BIT0(n)) -> EQ(num0,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EQ) = 2

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Subterm Processor:
-> Pairs:
 EQ(BIT0(n),num0) -> EQ(n,num0)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EQ) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Subterm Processor:
-> Pairs:
 EQ(BIT0(m),BIT0(n)) -> EQ(m,n)
 EQ(NUMERAL(m),NUMERAL(n)) -> EQ(m,n)
 EQ(BIT1(m),BIT1(n)) -> EQ(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EQ) = 1

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.10: 

Subterm Processor:
-> Pairs:
 SUCSharp(NUMERAL(n)) -> SUCSharp(n)
 SUCSharp(BIT1(n)) -> SUCSharp(n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(SUCSharp) = 1

Problem 1.10: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.11: 

Subterm Processor:
-> Pairs:
 PLUS(BIT0(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT0(m),BIT1(n)) -> PLUS(m,n)
 PLUS(NUMERAL(m),NUMERAL(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT0(n)) -> PLUS(m,n)
 PLUS(BIT1(m),BIT1(n)) -> PLUS(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(PLUS) = 1

Problem 1.11: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.12: 

Subterm Processor:
-> Pairs:
 MULT(BIT0(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT0(m),BIT1(n)) -> MULT(m,n)
 MULT(NUMERAL(m),NUMERAL(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT0(n)) -> MULT(m,n)
 MULT(BIT1(m),BIT1(n)) -> MULT(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(MULT) = 1

Problem 1.12: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.13: 

Subterm Processor:
-> Pairs:
 EXP(num0,BIT0(n)) -> EXP(num0,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EXP) = 2

Problem 1.13: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.14: 

Subterm Processor:
-> Pairs:
 EXP(BIT1(m),BIT0(n)) -> EXP(BIT1(m),n)
 EXP(BIT1(m),BIT1(n)) -> EXP(BIT1(m),n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EXP) = 2

Problem 1.14: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.15: 

Subterm Processor:
-> Pairs:
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
 EXP(NUMERAL(m),NUMERAL(n)) -> EXP(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EXP) = 1

Problem 1.15: 

SCC Processor:
-> Pairs:
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
->->-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)

Problem 1.15: 

Subterm Processor:
-> Pairs:
 EXP(BIT0(m),BIT0(n)) -> EXP(BIT0(m),n)
 EXP(BIT0(m),BIT1(n)) -> EXP(BIT0(m),n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EXP) = 2

Problem 1.15: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.16: 

Subterm Processor:
-> Pairs:
 PRESharp(BIT0(n)) -> PRESharp(n)
 PRESharp(NUMERAL(n)) -> PRESharp(n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(PRESharp) = 1

Problem 1.16: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.17: 

Subterm Processor:
-> Pairs:
 MINUS(BIT0(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT0(m),BIT1(n)) -> MINUS(m,n)
 MINUS(NUMERAL(m),NUMERAL(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT0(n)) -> MINUS(m,n)
 MINUS(BIT1(m),BIT1(n)) -> MINUS(m,n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(MINUS) = 1

Problem 1.17: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.18: 

Subterm Processor:
-> Pairs:
 ODDSharp(NUMERAL(n)) -> ODDSharp(n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(ODDSharp) = 1

Problem 1.18: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.19: 

Subterm Processor:
-> Pairs:
 EVENSharp(NUMERAL(n)) -> EVENSharp(n)
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Projection:
 pi(EVENSharp) = 1

Problem 1.19: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 BIT0(num0) -> num0
 EVEN(BIT0(n)) -> T
 EVEN(NUMERAL(n)) -> EVEN(n)
 EVEN(num0) -> T
 EVEN(BIT1(n)) -> F
 NUMERAL(num0) -> num0
 ODD(BIT0(n)) -> F
 ODD(NUMERAL(n)) -> ODD(n)
 ODD(num0) -> F
 ODD(BIT1(n)) -> T
 PRE(BIT0(n)) -> if(eq(n,num0),num0,BIT1(PRE(n)))
 PRE(NUMERAL(n)) -> NUMERAL(PRE(n))
 PRE(num0) -> num0
 PRE(BIT1(n)) -> BIT0(n)
 SUC(BIT0(n)) -> BIT1(n)
 SUC(NUMERAL(n)) -> NUMERAL(SUC(n))
 SUC(num0) -> BIT1(num0)
 SUC(BIT1(n)) -> BIT0(SUC(n))
 eq(BIT0(m),BIT0(n)) -> eq(m,n)
 eq(BIT0(m),BIT1(n)) -> F
 eq(BIT0(n),num0) -> eq(n,num0)
 eq(NUMERAL(m),NUMERAL(n)) -> eq(m,n)
 eq(num0,BIT0(n)) -> eq(num0,n)
 eq(num0,num0) -> T
 eq(num0,BIT1(n)) -> F
 eq(BIT1(m),BIT0(n)) -> F
 eq(BIT1(m),BIT1(n)) -> eq(m,n)
 eq(BIT1(n),num0) -> F
 exp(BIT0(m),BIT0(n)) -> mult(exp(BIT0(m),n),exp(BIT0(m),n))
 exp(BIT0(m),num0) -> BIT1(num0)
 exp(BIT0(m),BIT1(n)) -> mult(mult(BIT0(m),exp(BIT0(m),n)),exp(BIT0(m),n))
 exp(NUMERAL(m),NUMERAL(n)) -> NUMERAL(exp(m,n))
 exp(num0,BIT0(n)) -> mult(exp(num0,n),exp(num0,n))
 exp(num0,num0) -> BIT1(num0)
 exp(num0,BIT1(n)) -> num0
 exp(BIT1(m),BIT0(n)) -> mult(exp(BIT1(m),n),exp(BIT1(m),n))
 exp(BIT1(m),num0) -> BIT1(num0)
 exp(BIT1(m),BIT1(n)) -> mult(mult(BIT1(m),exp(BIT1(m),n)),exp(BIT1(m),n))
 ge(BIT0(n),BIT0(m)) -> ge(n,m)
 ge(BIT0(n),num0) -> T
 ge(BIT0(n),BIT1(m)) -> gt(n,m)
 ge(NUMERAL(n),NUMERAL(m)) -> ge(n,m)
 ge(num0,BIT0(n)) -> ge(num0,n)
 ge(num0,num0) -> T
 ge(num0,BIT1(n)) -> F
 ge(BIT1(n),BIT0(m)) -> ge(n,m)
 ge(BIT1(n),num0) -> T
 ge(BIT1(n),BIT1(m)) -> ge(n,m)
 gt(BIT0(n),BIT0(m)) -> gt(n,m)
 gt(BIT0(n),num0) -> gt(n,num0)
 gt(BIT0(n),BIT1(m)) -> gt(n,m)
 gt(NUMERAL(n),NUMERAL(m)) -> gt(n,m)
 gt(num0,BIT0(n)) -> F
 gt(num0,num0) -> F
 gt(num0,BIT1(n)) -> F
 gt(BIT1(n),BIT0(m)) -> ge(n,m)
 gt(BIT1(n),num0) -> T
 gt(BIT1(n),BIT1(m)) -> gt(n,m)
 le(BIT0(m),BIT0(n)) -> le(m,n)
 le(BIT0(m),BIT1(n)) -> le(m,n)
 le(BIT0(n),num0) -> le(n,num0)
 le(NUMERAL(m),NUMERAL(n)) -> le(m,n)
 le(num0,BIT0(n)) -> T
 le(num0,num0) -> T
 le(num0,BIT1(n)) -> T
 le(BIT1(m),BIT0(n)) -> lt(m,n)
 le(BIT1(m),BIT1(n)) -> le(m,n)
 le(BIT1(n),num0) -> F
 lt(BIT0(m),BIT0(n)) -> lt(m,n)
 lt(BIT0(m),BIT1(n)) -> le(m,n)
 lt(BIT0(n),num0) -> F
 lt(NUMERAL(m),NUMERAL(n)) -> lt(m,n)
 lt(num0,BIT0(n)) -> lt(num0,n)
 lt(num0,num0) -> F
 lt(num0,BIT1(n)) -> T
 lt(BIT1(m),BIT0(n)) -> lt(m,n)
 lt(BIT1(m),BIT1(n)) -> lt(m,n)
 lt(BIT1(n),num0) -> F
 minus(BIT0(m),BIT0(n)) -> BIT0(minus(m,n))
 minus(BIT0(m),BIT1(n)) -> PRE(BIT0(minus(m,n)))
 minus(BIT0(n),num0) -> BIT0(n)
 minus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(minus(m,n))
 minus(num0,BIT0(n)) -> num0
 minus(num0,num0) -> num0
 minus(num0,BIT1(n)) -> num0
 minus(BIT1(m),BIT0(n)) -> if(le(n,m),BIT1(minus(m,n)),num0)
 minus(BIT1(m),BIT1(n)) -> BIT0(minus(m,n))
 minus(BIT1(n),num0) -> BIT1(n)
 mult(BIT0(m),BIT0(n)) -> BIT0(BIT0(mult(m,n)))
 mult(BIT0(m),BIT1(n)) -> plus(BIT0(m),BIT0(BIT0(mult(m,n))))
 mult(BIT0(n),num0) -> num0
 mult(NUMERAL(m),NUMERAL(n)) -> NUMERAL(mult(m,n))
 mult(num0,BIT0(n)) -> num0
 mult(num0,num0) -> num0
 mult(num0,BIT1(n)) -> num0
 mult(BIT1(m),BIT0(n)) -> plus(BIT0(n),BIT0(BIT0(mult(m,n))))
 mult(BIT1(m),BIT1(n)) -> plus(plus(BIT1(m),BIT0(n)),BIT0(BIT0(mult(m,n))))
 mult(BIT1(n),num0) -> num0
 plus(BIT0(m),BIT0(n)) -> BIT0(plus(m,n))
 plus(BIT0(m),BIT1(n)) -> BIT1(plus(m,n))
 plus(BIT0(n),num0) -> BIT0(n)
 plus(NUMERAL(m),NUMERAL(n)) -> NUMERAL(plus(m,n))
 plus(num0,BIT0(n)) -> BIT0(n)
 plus(num0,num0) -> num0
 plus(num0,BIT1(n)) -> BIT1(n)
 plus(BIT1(m),BIT0(n)) -> BIT1(plus(m,n))
 plus(BIT1(m),BIT1(n)) -> BIT0(SUC(plus(m,n)))
 plus(BIT1(n),num0) -> BIT1(n)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
