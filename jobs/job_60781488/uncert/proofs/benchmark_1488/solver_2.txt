YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/V7rA4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) DependencyGraphProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MNOCProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) ATransformationProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QReductionProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) MNOCProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) ATransformationProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))
   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, x)) -> F(a, f(a, f(a, x)))
   F(a, f(b, x)) -> F(a, f(a, x))
   F(a, f(b, x)) -> F(a, x)
   F(b, f(a, x)) -> F(b, f(b, f(b, x)))
   F(b, f(a, x)) -> F(b, f(b, x))
   F(b, f(a, x)) -> F(b, x)

The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))
   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(b, f(a, x)) -> F(b, f(b, x))
   F(b, f(a, x)) -> F(b, f(b, f(b, x)))
   F(b, f(a, x)) -> F(b, x)

The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))
   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(b, f(a, x)) -> F(b, f(b, x))
   F(b, f(a, x)) -> F(b, f(b, f(b, x)))
   F(b, f(a, x)) -> F(b, x)

The TRS R consists of the following rules:

   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(b, f(a, x)) -> F(b, x)

The TRS R consists of the following rules:

   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(b, f(a, x)) -> F(b, x)

The TRS R consists of the following rules:

   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

The set Q consists of the following terms:

   f(b, f(a, x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(b, f(a, x)) -> F(b, x)

R is empty.
The set Q consists of the following terms:

   f(b, f(a, x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   b1(a(x)) -> b1(x)

R is empty.
The set Q consists of the following terms:

   b(a(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   b(a(x0))


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   b1(a(x)) -> b1(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*b1(a(x)) -> b1(x)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, x)) -> F(a, f(a, x))
   F(a, f(b, x)) -> F(a, f(a, f(a, x)))
   F(a, f(b, x)) -> F(a, x)

The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))
   f(b, f(a, x)) -> f(b, f(b, f(b, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, x)) -> F(a, f(a, x))
   F(a, f(b, x)) -> F(a, f(a, f(a, x)))
   F(a, f(b, x)) -> F(a, x)

The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, x)) -> F(a, x)

The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, x)) -> F(a, x)

The TRS R consists of the following rules:

   f(a, f(b, x)) -> f(a, f(a, f(a, x)))

The set Q consists of the following terms:

   f(a, f(b, x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, x)) -> F(a, x)

R is empty.
The set Q consists of the following terms:

   f(a, f(b, x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   a1(b(x)) -> a1(x)

R is empty.
The set Q consists of the following terms:

   a(b(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a(b(x0))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   a1(b(x)) -> a1(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*a1(b(x)) -> a1(x)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES
