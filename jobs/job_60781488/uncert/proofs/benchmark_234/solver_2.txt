YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/z6jCz.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) TransformationProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) DependencyGraphProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) TransformationProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) TransformationProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) TransformationProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) TransformationProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) TransformationProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) TransformationProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) TransformationProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) NonInfProof [EQUIVALENT, 58 ms]
        (56) AND
            (57) QDP
                (58) DependencyGraphProof [EQUIVALENT, 0 ms]
                (59) TRUE
            (60) QDP
                (61) DependencyGraphProof [EQUIVALENT, 0 ms]
                (62) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)
   PLUS(s(x), y) -> PLUS(x, y)
   TIMES(s(x), y) -> PLUS(y, times(x, y))
   TIMES(s(x), y) -> TIMES(x, y)
   LOG(s(x), s(s(b))) -> LOOP(s(x), s(s(b)), s(0), 0)
   LOOP(x, s(s(b)), s(y), z) -> IF(le(x, s(y)), x, s(s(b)), s(y), z)
   LOOP(x, s(s(b)), s(y), z) -> LE(x, s(y))
   IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z))
   IF(false, x, b, y, z) -> TIMES(b, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, s(s(b)), s(y), z) -> IF(le(x, s(y)), x, s(s(b)), s(y), z)
   IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   log(x, 0) -> baseError
   log(x, s(0)) -> baseError
   log(0, s(s(b))) -> logZeroError
   log(s(x), s(s(b))) -> loop(s(x), s(s(b)), s(0), 0)
   loop(x, s(s(b)), s(y), z) -> if(le(x, s(y)), x, s(s(b)), s(y), z)
   if(true, x, b, y, z) -> z
   if(false, x, b, y, z) -> loop(x, b, times(b, y), s(z))

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, s(s(b)), s(y), z) -> IF(le(x, s(y)), x, s(s(b)), s(y), z)
   IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   log(x0, 0)
   log(x0, s(0))
   log(0, s(s(x0)))
   log(s(x0), s(s(x1)))
   loop(x0, s(s(x1)), s(x2), x3)
   if(true, x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, s(s(b)), s(y), z) -> IF(le(x, s(y)), x, s(s(b)), s(y), z)
   IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOOP(x, s(s(b)), s(y), z) -> IF(le(x, s(y)), x, s(s(b)), s(y), z) at position [0] we obtained the following new rules [LPAR04]:

   (LOOP(0, s(s(y1)), s(y2), y3) -> IF(true, 0, s(s(y1)), s(y2), y3),LOOP(0, s(s(y1)), s(y2), y3) -> IF(true, 0, s(s(y1)), s(y2), y3))
   (LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3),LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z))
   LOOP(0, s(s(y1)), s(y2), y3) -> IF(true, 0, s(s(y1)), s(y2), y3)
   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)
   IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(false, x, b, y, z) -> LOOP(x, b, times(b, y), s(z)) at position [2] we obtained the following new rules [LPAR04]:

   (IF(false, y0, 0, x0, y3) -> LOOP(y0, 0, 0, s(y3)),IF(false, y0, 0, x0, y3) -> LOOP(y0, 0, 0, s(y3)))
   (IF(false, y0, s(x0), x1, y3) -> LOOP(y0, s(x0), plus(x1, times(x0, x1)), s(y3)),IF(false, y0, s(x0), x1, y3) -> LOOP(y0, s(x0), plus(x1, times(x0, x1)), s(y3)))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)
   IF(false, y0, 0, x0, y3) -> LOOP(y0, 0, 0, s(y3))
   IF(false, y0, s(x0), x1, y3) -> LOOP(y0, s(x0), plus(x1, times(x0, x1)), s(y3))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, y0, s(x0), x1, y3) -> LOOP(y0, s(x0), plus(x1, times(x0, x1)), s(y3))
   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF(false, y0, s(x0), x1, y3) -> LOOP(y0, s(x0), plus(x1, times(x0, x1)), s(y3)) we obtained the following new rules [LPAR04]:

   (IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), plus(s(z2), times(s(z1), s(z2))), s(z3)),IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), plus(s(z2), times(s(z1), s(z2))), s(z3)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)
   IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), plus(s(z2), times(s(z1), s(z2))), s(z3))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), plus(s(z2), times(s(z1), s(z2))), s(z3)) at position [2] we obtained the following new rules [LPAR04]:

   (IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, times(s(z1), s(z2)))), s(z3)),IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, times(s(z1), s(z2)))), s(z3)))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)
   IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, times(s(z1), s(z2)))), s(z3))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, times(s(z1), s(z2)))), s(z3)) at position [2,0,1] we obtained the following new rules [LPAR04]:

   (IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, plus(s(z2), times(z1, s(z2))))), s(z3)),IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, plus(s(z2), times(z1, s(z2))))), s(z3)))


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)
   IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, plus(s(z2), times(z1, s(z2))))), s(z3))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, plus(s(z2), times(z1, s(z2))))), s(z3)) at position [2,0,1] we obtained the following new rules [LPAR04]:

   (IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(z3)),IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(z3)))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3)
   IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(z3))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule LOOP(s(x0), s(s(y1)), s(x1), y3) -> IF(le(x0, x1), s(x0), s(s(y1)), s(x1), y3) we obtained the following new rules [LPAR04]:

   (LOOP(s(z0), s(s(z1)), s(y_2), s(z3)) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(z3)),LOOP(s(z0), s(s(z1)), s(y_2), s(z3)) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(z3)))


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(z3))
   LOOP(s(z0), s(s(z1)), s(y_2), s(z3)) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(z3))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF(false, s(z0), s(s(z1)), s(z2), z3) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(z3)) we obtained the following new rules [LPAR04]:

   (IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3))),IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3))))


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(z0), s(s(z1)), s(y_2), s(z3)) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(z3))
   IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3)))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule LOOP(s(z0), s(s(z1)), s(y_2), s(z3)) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(z3)) we obtained the following new rules [LPAR04]:

   (LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3))),LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3))))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3)))
   LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3)))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3))) the following chains were created:
*We consider the chain LOOP(s(x4), s(s(x5)), s(x6), s(s(x7))) -> IF(le(x4, x6), s(x4), s(s(x5)), s(x6), s(s(x7))), IF(false, s(x8), s(s(x9)), s(x10), s(x11)) -> LOOP(s(x8), s(s(x9)), s(plus(x10, s(plus(x10, times(x9, s(x10)))))), s(s(x11))) which results in the following constraint:

(1)    (IF(le(x4, x6), s(x4), s(s(x5)), s(x6), s(s(x7)))=IF(false, s(x8), s(s(x9)), s(x10), s(x11))  ==>  IF(false, s(x8), s(s(x9)), s(x10), s(x11))_>=_LOOP(s(x8), s(s(x9)), s(plus(x10, s(plus(x10, times(x9, s(x10)))))), s(s(x11))))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (le(x4, x6)=false  ==>  IF(false, s(x4), s(s(x5)), s(x6), s(s(x7)))_>=_LOOP(s(x4), s(s(x5)), s(plus(x6, s(plus(x6, times(x5, s(x6)))))), s(s(s(x7)))))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on le(x4, x6)=false which results in the following new constraints:

(3)    (le(x26, x25)=false & (\/x27,x28:le(x26, x25)=false  ==>  IF(false, s(x26), s(s(x27)), s(x25), s(s(x28)))_>=_LOOP(s(x26), s(s(x27)), s(plus(x25, s(plus(x25, times(x27, s(x25)))))), s(s(s(x28)))))  ==>  IF(false, s(s(x26)), s(s(x5)), s(s(x25)), s(s(x7)))_>=_LOOP(s(s(x26)), s(s(x5)), s(plus(s(x25), s(plus(s(x25), times(x5, s(s(x25))))))), s(s(s(x7)))))

(4)    (false=false  ==>  IF(false, s(s(x29)), s(s(x5)), s(0), s(s(x7)))_>=_LOOP(s(s(x29)), s(s(x5)), s(plus(0, s(plus(0, times(x5, s(0)))))), s(s(s(x7)))))



We simplified constraint (3) using rule (VI) where we applied the induction hypothesis (\/x27,x28:le(x26, x25)=false  ==>  IF(false, s(x26), s(s(x27)), s(x25), s(s(x28)))_>=_LOOP(s(x26), s(s(x27)), s(plus(x25, s(plus(x25, times(x27, s(x25)))))), s(s(s(x28))))) with sigma = [x27 / x5, x28 / x7] which results in the following new constraint:

(5)    (IF(false, s(x26), s(s(x5)), s(x25), s(s(x7)))_>=_LOOP(s(x26), s(s(x5)), s(plus(x25, s(plus(x25, times(x5, s(x25)))))), s(s(s(x7))))  ==>  IF(false, s(s(x26)), s(s(x5)), s(s(x25)), s(s(x7)))_>=_LOOP(s(s(x26)), s(s(x5)), s(plus(s(x25), s(plus(s(x25), times(x5, s(s(x25))))))), s(s(s(x7)))))



We simplified constraint (4) using rules (I), (II) which results in the following new constraint:

(6)    (IF(false, s(s(x29)), s(s(x5)), s(0), s(s(x7)))_>=_LOOP(s(s(x29)), s(s(x5)), s(plus(0, s(plus(0, times(x5, s(0)))))), s(s(s(x7)))))








For Pair LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3))) the following chains were created:
*We consider the chain IF(false, s(x12), s(s(x13)), s(x14), s(x15)) -> LOOP(s(x12), s(s(x13)), s(plus(x14, s(plus(x14, times(x13, s(x14)))))), s(s(x15))), LOOP(s(x16), s(s(x17)), s(x18), s(s(x19))) -> IF(le(x16, x18), s(x16), s(s(x17)), s(x18), s(s(x19))) which results in the following constraint:

(1)    (LOOP(s(x12), s(s(x13)), s(plus(x14, s(plus(x14, times(x13, s(x14)))))), s(s(x15)))=LOOP(s(x16), s(s(x17)), s(x18), s(s(x19)))  ==>  LOOP(s(x16), s(s(x17)), s(x18), s(s(x19)))_>=_IF(le(x16, x18), s(x16), s(s(x17)), s(x18), s(s(x19))))



We simplified constraint (1) using rules (I), (II), (III), (IV), (VII) which results in the following new constraint:

(2)    (LOOP(s(x12), s(s(x13)), s(x18), s(s(x15)))_>=_IF(le(x12, x18), s(x12), s(s(x13)), s(x18), s(s(x15))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3)))

*(IF(false, s(x26), s(s(x5)), s(x25), s(s(x7)))_>=_LOOP(s(x26), s(s(x5)), s(plus(x25, s(plus(x25, times(x5, s(x25)))))), s(s(s(x7))))  ==>  IF(false, s(s(x26)), s(s(x5)), s(s(x25)), s(s(x7)))_>=_LOOP(s(s(x26)), s(s(x5)), s(plus(s(x25), s(plus(s(x25), times(x5, s(s(x25))))))), s(s(s(x7)))))


*(IF(false, s(s(x29)), s(s(x5)), s(0), s(s(x7)))_>=_LOOP(s(s(x29)), s(s(x5)), s(plus(0, s(plus(0, times(x5, s(0)))))), s(s(s(x7)))))




*LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3)))

*(LOOP(s(x12), s(s(x13)), s(x18), s(s(x15)))_>=_IF(le(x12, x18), s(x12), s(s(x13)), s(x18), s(s(x15))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3, x_4, x_5)) = -1 - x_1 + x_2 + x_3 - x_4
   POL(LOOP(x_1, x_2, x_3, x_4)) = x_1 + x_2 - x_3
   POL(c) = -1
   POL(false) = 0
   POL(le(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(times(x_1, x_2)) = 0
   POL(true) = 0


The following pairs  are in P_>:
   LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3)))
The following pairs are in P_bound:
   IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3)))
The following rules are usable:
   0 -> times(0, y)
   plus(y, times(x, y)) -> times(s(x), y)
   y -> plus(0, y)
   s(plus(x, y)) -> plus(s(x), y)
   true -> le(0, y)
   le(x, y) -> le(s(x), s(y))
   false -> le(s(x), 0)

----------------------------------------

(56)
Complex Obligation (AND)

----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, s(z0), s(s(z1)), s(z2), s(z3)) -> LOOP(s(z0), s(s(z1)), s(plus(z2, s(plus(z2, times(z1, s(z2)))))), s(s(z3)))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(59)
TRUE

----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(s(z0), s(s(z1)), s(y_2), s(s(z3))) -> IF(le(z0, y_2), s(z0), s(s(z1)), s(y_2), s(s(z3)))

The TRS R consists of the following rules:

   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   le(s(x), 0) -> false

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(62)
TRUE
