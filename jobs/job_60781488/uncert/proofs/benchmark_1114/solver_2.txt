YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/E4fw9.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 8 ms]
(2) QTRS
(3) RisEmptyProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, n__fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   fib1(X1, X2) -> n__fib1(X1, X2)
   activate(n__fib1(X1, X2)) -> fib1(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Quasi precedence:
[fib_1, 0] > sel_2 > activate_1 > fib1_2 > cons_2 > n__fib1_2
[fib_1, 0] > sel_2 > activate_1 > fib1_2 > add_2 > s_1 > n__fib1_2


Status:
fib_1: [1]
sel_2: [1,2]
fib1_2: multiset status
s_1: multiset status
0: multiset status
cons_2: multiset status
n__fib1_2: multiset status
add_2: multiset status
activate_1: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, n__fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   fib1(X1, X2) -> n__fib1(X1, X2)
   activate(n__fib1(X1, X2)) -> fib1(X1, X2)
   activate(X) -> X




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(3) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(4)
YES
