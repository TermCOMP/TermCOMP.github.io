YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
gcd(num0,y) -> y
gcd(s(x),num0) -> s(x)
gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
minus(x,num0) -> x
minus(x,s(y)) -> pred(minus(x,y))
pred(s(x)) -> x
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 GCD(s(x),s(y)) -> IFU95GCD(le(y,x),s(x),s(y))
 GCD(s(x),s(y)) -> LE(y,x)
 IFU95GCD(ffalse,s(x),s(y)) -> GCD(minus(y,x),s(x))
 IFU95GCD(ffalse,s(x),s(y)) -> MINUS(y,x)
 IFU95GCD(ftrue,s(x),s(y)) -> GCD(minus(x,y),s(y))
 IFU95GCD(ftrue,s(x),s(y)) -> MINUS(x,y)
 LE(s(x),s(y)) -> LE(x,y)
 MINUS(x,s(y)) -> MINUS(x,y)
 MINUS(x,s(y)) -> PRED(minus(x,y))
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x

Problem 1: 

SCC Processor:
-> Pairs:
 GCD(s(x),s(y)) -> IFU95GCD(le(y,x),s(x),s(y))
 GCD(s(x),s(y)) -> LE(y,x)
 IFU95GCD(ffalse,s(x),s(y)) -> GCD(minus(y,x),s(x))
 IFU95GCD(ffalse,s(x),s(y)) -> MINUS(y,x)
 IFU95GCD(ftrue,s(x),s(y)) -> GCD(minus(x,y),s(y))
 IFU95GCD(ftrue,s(x),s(y)) -> MINUS(x,y)
 LE(s(x),s(y)) -> LE(x,y)
 MINUS(x,s(y)) -> MINUS(x,y)
 MINUS(x,s(y)) -> PRED(minus(x,y))
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(x,s(y)) -> MINUS(x,y)
->->-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
->->-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->->Cycle:
->->-> Pairs:
 GCD(s(x),s(y)) -> IFU95GCD(le(y,x),s(x),s(y))
 IFU95GCD(ffalse,s(x),s(y)) -> GCD(minus(y,x),s(x))
 IFU95GCD(ftrue,s(x),s(y)) -> GCD(minus(x,y),s(y))
->->-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MINUS(x,s(y)) -> MINUS(x,y)
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Projection:
 pi(MINUS) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Projection:
 pi(LE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 GCD(s(x),s(y)) -> IFU95GCD(le(y,x),s(x),s(y))
 IFU95GCD(ffalse,s(x),s(y)) -> GCD(minus(y,x),s(x))
 IFU95GCD(ftrue,s(x),s(y)) -> GCD(minus(x,y),s(y))
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
-> Usable rules:
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[gcd](X1,X2) = 0
[ifu95gcd](X1,X2,X3) = 0
[le](X1,X2) = 0
[minus](X1,X2) = 2.X1 + 1
[pred](X) = X
[num0] = 1
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 2
[ftrue] = 0
[GCD](X1,X2) = X1 + X2 + 2
[IFU95GCD](X1,X2,X3) = 2.X1 + X2 + X3 + 1
[LE](X1,X2) = 0
[MINUS](X1,X2) = 0
[PRED](X) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 IFU95GCD(ffalse,s(x),s(y)) -> GCD(minus(y,x),s(x))
 IFU95GCD(ftrue,s(x),s(y)) -> GCD(minus(x,y),s(y))
-> Rules:
 gcd(num0,y) -> y
 gcd(s(x),num0) -> s(x)
 gcd(s(x),s(y)) -> ifu95gcd(le(y,x),s(x),s(y))
 ifu95gcd(ffalse,s(x),s(y)) -> gcd(minus(y,x),s(x))
 ifu95gcd(ftrue,s(x),s(y)) -> gcd(minus(x,y),s(y))
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
