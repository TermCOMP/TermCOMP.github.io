YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/o7FNu.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QReductionProof [EQUIVALENT, 0 ms]
(10) QDP
(11) UsableRulesReductionPairsProof [EQUIVALENT, 10 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   del(.(x, .(y, z))) -> f(=(x, y), x, y, z)
   f(true, x, y, z) -> del(.(y, z))
   f(false, x, y, z) -> .(x, del(.(y, z)))
   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   del(.(x, .(y, z))) -> f(=(x, y), x, y, z)
   f(true, x, y, z) -> del(.(y, z))
   f(false, x, y, z) -> .(x, del(.(y, z)))
   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))

The set Q consists of the following terms:

   del(.(x0, .(x1, x2)))
   f(true, x0, x1, x2)
   f(false, x0, x1, x2)
   =(nil, nil)
   =(.(x0, x1), nil)
   =(nil, .(x0, x1))
   =(.(x0, x1), .(u, v))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DEL(.(x, .(y, z))) -> F(=(x, y), x, y, z)
   DEL(.(x, .(y, z))) -> =^1(x, y)
   F(true, x, y, z) -> DEL(.(y, z))
   F(false, x, y, z) -> DEL(.(y, z))
   =^1(.(x, y), .(u, v)) -> =^1(x, u)
   =^1(.(x, y), .(u, v)) -> =^1(y, v)

The TRS R consists of the following rules:

   del(.(x, .(y, z))) -> f(=(x, y), x, y, z)
   f(true, x, y, z) -> del(.(y, z))
   f(false, x, y, z) -> .(x, del(.(y, z)))
   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))

The set Q consists of the following terms:

   del(.(x0, .(x1, x2)))
   f(true, x0, x1, x2)
   f(false, x0, x1, x2)
   =(nil, nil)
   =(.(x0, x1), nil)
   =(nil, .(x0, x1))
   =(.(x0, x1), .(u, v))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y, z) -> DEL(.(y, z))
   DEL(.(x, .(y, z))) -> F(=(x, y), x, y, z)
   F(false, x, y, z) -> DEL(.(y, z))

The TRS R consists of the following rules:

   del(.(x, .(y, z))) -> f(=(x, y), x, y, z)
   f(true, x, y, z) -> del(.(y, z))
   f(false, x, y, z) -> .(x, del(.(y, z)))
   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))

The set Q consists of the following terms:

   del(.(x0, .(x1, x2)))
   f(true, x0, x1, x2)
   f(false, x0, x1, x2)
   =(nil, nil)
   =(.(x0, x1), nil)
   =(nil, .(x0, x1))
   =(.(x0, x1), .(u, v))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y, z) -> DEL(.(y, z))
   DEL(.(x, .(y, z))) -> F(=(x, y), x, y, z)
   F(false, x, y, z) -> DEL(.(y, z))

The TRS R consists of the following rules:

   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))

The set Q consists of the following terms:

   del(.(x0, .(x1, x2)))
   f(true, x0, x1, x2)
   f(false, x0, x1, x2)
   =(nil, nil)
   =(.(x0, x1), nil)
   =(nil, .(x0, x1))
   =(.(x0, x1), .(u, v))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   del(.(x0, .(x1, x2)))
   f(true, x0, x1, x2)
   f(false, x0, x1, x2)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y, z) -> DEL(.(y, z))
   DEL(.(x, .(y, z))) -> F(=(x, y), x, y, z)
   F(false, x, y, z) -> DEL(.(y, z))

The TRS R consists of the following rules:

   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))

The set Q consists of the following terms:

   =(nil, nil)
   =(.(x0, x1), nil)
   =(nil, .(x0, x1))
   =(.(x0, x1), .(u, v))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   DEL(.(x, .(y, z))) -> F(=(x, y), x, y, z)
The following rules are removed from R:

   =(nil, nil) -> true
   =(.(x, y), nil) -> false
   =(nil, .(y, z)) -> false
   =(.(x, y), .(u, v)) -> and(=(x, u), =(y, v))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(=(x_1, x_2)) = x_1 + 2*x_2
   POL(DEL(x_1)) = x_1
   POL(F(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + 2*x_3 + 2*x_4
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(false) = 1
   POL(nil) = 1
   POL(true) = 1
   POL(u) = 2
   POL(v) = 0


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y, z) -> DEL(.(y, z))
   F(false, x, y, z) -> DEL(.(y, z))

R is empty.
The set Q consists of the following terms:

   =(nil, nil)
   =(.(x0, x1), nil)
   =(nil, .(x0, x1))
   =(.(x0, x1), .(u, v))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(14)
TRUE
