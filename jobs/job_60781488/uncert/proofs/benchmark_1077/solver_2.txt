YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vHF6F.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 45 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) MRRProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPOrderProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) DependencyGraphProof [EQUIVALENT, 0 ms]
        (25) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   mark(false) -> active(false)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(active(x_1)) = x_1
   POL(c) = 0
   POL(f(x_1)) = x_1
   POL(false) = 1
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(if(false, X, Y)) -> mark(Y)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   mark(false) -> active(false)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(active(x_1)) = x_1
   POL(c) = 0
   POL(f(x_1)) = 2*x_1
   POL(false) = 1
   POL(if(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(mark(x_1)) = 2*x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(false) -> active(false)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(f(X)) -> MARK(if(X, c, f(true)))
   ACTIVE(f(X)) -> IF(X, c, f(true))
   ACTIVE(f(X)) -> F(true)
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(f(X)) -> ACTIVE(f(mark(X)))
   MARK(f(X)) -> F(mark(X))
   MARK(f(X)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), mark(X2), X3))
   MARK(if(X1, X2, X3)) -> IF(mark(X1), mark(X2), X3)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X2)
   MARK(c) -> ACTIVE(c)
   MARK(true) -> ACTIVE(true)
   F(mark(X)) -> F(X)
   F(active(X)) -> F(X)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 6 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*IF(active(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, active(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(X1, X2, active(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(active(X)) -> F(X)
   F(mark(X)) -> F(X)

The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(active(X)) -> F(X)
   F(mark(X)) -> F(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(active(X)) -> F(X)
The graph contains the following edges 1 > 1


*F(mark(X)) -> F(X)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X)) -> ACTIVE(f(mark(X)))
   ACTIVE(f(X)) -> MARK(if(X, c, f(true)))
   MARK(f(X)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), mark(X2), X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X2)

The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(f(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(active(x_1)) = x_1
   POL(c) = 0
   POL(f(x_1)) = 1 + 2*x_1
   POL(if(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(true) = 0


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X)) -> ACTIVE(f(mark(X)))
   ACTIVE(f(X)) -> MARK(if(X, c, f(true)))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), mark(X2), X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X2)

The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(f(X)) -> MARK(if(X, c, f(true)))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

f(x1)  =  f(x1)

ACTIVE(x1)  =  x1

mark(x1)  =  x1

if(x1, x2, x3)  =  if(x1, x2)

c  =  c

true  =  true

active(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   true=1
   c=2
   f_1=4
   if_2=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(f(X)) -> active(f(mark(X)))
   active(f(X)) -> mark(if(X, c, f(true)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   active(if(true, X, Y)) -> mark(X)
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(active(X)) -> f(X)
   f(mark(X)) -> f(X)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X)) -> ACTIVE(f(mark(X)))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), mark(X2), X3))

The TRS R consists of the following rules:

   active(f(X)) -> mark(if(X, c, f(true)))
   active(if(true, X, Y)) -> mark(X)
   mark(f(X)) -> active(f(mark(X)))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), mark(X2), X3))
   mark(c) -> active(c)
   mark(true) -> active(true)
   f(mark(X)) -> f(X)
   f(active(X)) -> f(X)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(25)
TRUE
