YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zDDIy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) MRRProof [EQUIVALENT, 0 ms]
(6) QDP
(7) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(a, f(a, x)) -> f(c, f(b, x))
   f(b, f(b, x)) -> f(a, f(c, x))
   f(c, f(c, x)) -> f(b, f(a, x))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(a, x)) -> F(c, f(b, x))
   F(a, f(a, x)) -> F(b, x)
   F(b, f(b, x)) -> F(a, f(c, x))
   F(b, f(b, x)) -> F(c, x)
   F(c, f(c, x)) -> F(b, f(a, x))
   F(c, f(c, x)) -> F(a, x)

The TRS R consists of the following rules:

   f(a, f(a, x)) -> f(c, f(b, x))
   f(b, f(b, x)) -> f(a, f(c, x))
   f(c, f(c, x)) -> f(b, f(a, x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) UsableRulesReductionPairsProof (EQUIVALENT)
First, we A-transformed [FROCOS05] the QDP-Problem.
Then we obtain the following A-transformed DP problem.

The pairs P are: 

   a1(a(x)) -> c1(b(x))
   a1(a(x)) -> b1(x)
   b1(b(x)) -> a1(c(x))
   b1(b(x)) -> c1(x)
   c1(c(x)) -> b1(a(x))
   c1(c(x)) -> a1(x)

and the Q and R are:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c(c(x)) -> b(a(x))
   b(b(x)) -> a(c(x))
   a(a(x)) -> c(b(x))

Q is empty.

By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   f(a, f(a, x)) -> f(c, f(b, x))
   f(b, f(b, x)) -> f(a, f(c, x))
   f(c, f(c, x)) -> f(b, f(a, x))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(a(x_1)) = 2*x_1
   POL(a1(x_1)) = 2*x_1
   POL(b(x_1)) = 2*x_1
   POL(b1(x_1)) = 2*x_1
   POL(c(x_1)) = 2*x_1
   POL(c1(x_1)) = 2*x_1


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   a1(a(x)) -> c1(b(x))
   a1(a(x)) -> b1(x)
   b1(b(x)) -> a1(c(x))
   b1(b(x)) -> c1(x)
   c1(c(x)) -> b1(a(x))
   c1(c(x)) -> a1(x)

The TRS R consists of the following rules:

   c(c(x)) -> b(a(x))
   b(b(x)) -> a(c(x))
   a(a(x)) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   a1(a(x)) -> b1(x)
   b1(b(x)) -> c1(x)
   c1(c(x)) -> a1(x)


Used ordering: Polynomial interpretation [POLO]:

   POL(a(x_1)) = 1 + 2*x_1
   POL(a1(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(b1(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + 2*x_1
   POL(c1(x_1)) = 1 + x_1


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   a1(a(x)) -> c1(b(x))
   b1(b(x)) -> a1(c(x))
   c1(c(x)) -> b1(a(x))

The TRS R consists of the following rules:

   c(c(x)) -> b(a(x))
   b(b(x)) -> a(c(x))
   a(a(x)) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 1. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   a1(a(x)) -> c1(b(x))
   b1(b(x)) -> a1(c(x))
   c1(c(x)) -> b1(a(x))

To find matches we regarded all rules of R and P:

   c(c(x)) -> b(a(x))
   b(b(x)) -> a(c(x))
   a(a(x)) -> c(b(x))
   a1(a(x)) -> c1(b(x))
   b1(b(x)) -> a1(c(x))
   c1(c(x)) -> b1(a(x))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
63, 64, 65, 66, 67, 68, 69, 70

Node 63 is start node and node 64 is final node.

Those nodes are connected through the following edges:

* 63 to 65 labelled c1_1(0)* 63 to 66 labelled a1_1(0)* 63 to 67 labelled b1_1(0)* 64 to 64 labelled #_1(0)* 65 to 64 labelled b_1(0)* 65 to 68 labelled a_1(1)* 66 to 64 labelled c_1(0)* 66 to 69 labelled b_1(1)* 67 to 64 labelled a_1(0)* 67 to 70 labelled c_1(1)* 68 to 64 labelled c_1(1)* 68 to 69 labelled b_1(1)* 69 to 64 labelled a_1(1)* 69 to 70 labelled c_1(1)* 70 to 64 labelled b_1(1)* 70 to 68 labelled a_1(1)


----------------------------------------

(8)
YES
