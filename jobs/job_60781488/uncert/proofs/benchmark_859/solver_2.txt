NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/uak9n.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) MNOCProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) MNOCProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) MNOCProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QReductionProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (31) YES
    (32) QDP
        (33) MNOCProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QReductionProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (40) YES
    (41) QDP
        (42) MNOCProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) UsableRulesProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QReductionProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (49) YES
    (50) QDP
        (51) MNOCProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) UsableRulesProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) QReductionProof [EQUIVALENT, 0 ms]
        (56) QDP
        (57) TransformationProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) TransformationProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) NonTerminationLoopProof [COMPLETE, 0 ms]
        (62) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> SQR(N)
   TERMS(N) -> TERMS(s(N))
   SQR(s(X)) -> ADD(sqr(X), dbl(X))
   SQR(s(X)) -> SQR(X)
   SQR(s(X)) -> DBL(X)
   DBL(s(X)) -> DBL(X)
   ADD(s(X), Y) -> ADD(X, Y)
   FIRST(s(X), cons(Y, Z)) -> FIRST(X, Z)
   HALF(s(s(X))) -> HALF(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(X))) -> HALF(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(X))) -> HALF(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(X))) -> HALF(X)

R is empty.
The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(X))) -> HALF(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(X))) -> HALF(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> FIRST(X, Z)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> FIRST(X, Z)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> FIRST(X, Z)

R is empty.
The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> FIRST(X, Z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FIRST(s(X), cons(Y, Z)) -> FIRST(X, Z)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

R is empty.
The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(s(X), Y) -> ADD(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

R is empty.
The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DBL(s(X)) -> DBL(X)
The graph contains the following edges 1 > 1


----------------------------------------

(40)
YES

----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(X)

R is empty.
The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SQR(s(X)) -> SQR(X)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> TERMS(s(N))

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> TERMS(s(N))

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, first(X, Z))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X

The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> TERMS(s(N))

R is empty.
The set Q consists of the following terms:

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   terms(x0)
   sqr(0)
   sqr(s(x0))
   dbl(0)
   dbl(s(x0))
   add(0, x0)
   add(s(x0), x1)
   first(0, x0)
   first(s(x0), cons(x1, x2))
   half(0)
   half(s(0))
   half(s(s(x0)))
   half(dbl(x0))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> TERMS(s(N))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule TERMS(N) -> TERMS(s(N)) we obtained the following new rules [LPAR04]:

   (TERMS(s(z0)) -> TERMS(s(s(z0))),TERMS(s(z0)) -> TERMS(s(s(z0))))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(s(z0)) -> TERMS(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule TERMS(s(z0)) -> TERMS(s(s(z0))) we obtained the following new rules [LPAR04]:

   (TERMS(s(s(z0))) -> TERMS(s(s(s(z0)))),TERMS(s(s(z0))) -> TERMS(s(s(s(z0)))))


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(s(s(z0))) -> TERMS(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = TERMS(s(s(z0))) evaluates to  t =TERMS(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from TERMS(s(s(z0))) to TERMS(s(s(s(z0)))).




----------------------------------------

(62)
NO
