NO

Problem 1: 

(VAR vu95NonEmpty N X Y Z)
(RULES
add(num0,X) -> X
add(s(X),Y) -> s(add(X,Y))
dbl(num0) -> num0
dbl(s(X)) -> s(s(dbl(X)))
first(num0,X) -> nil
first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
half(dbl(X)) -> X
half(num0) -> num0
half(s(num0)) -> num0
half(s(s(X))) -> s(half(X))
sqr(num0) -> num0
sqr(s(X)) -> s(add(sqr(X),dbl(X)))
terms(N) -> cons(recip(sqr(N)),terms(s(N)))
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ADD(s(X),Y) -> ADD(X,Y)
 DBL(s(X)) -> DBL(X)
 FIRST(s(X),cons(Y,Z)) -> FIRST(X,Z)
 HALF(s(s(X))) -> HALF(X)
 SQR(s(X)) -> ADD(sqr(X),dbl(X))
 SQR(s(X)) -> DBL(X)
 SQR(s(X)) -> SQR(X)
 TERMS(N) -> SQR(N)
 TERMS(N) -> TERMS(s(N))
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 half(dbl(X)) -> X
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(X))) -> s(half(X))
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)),terms(s(N)))

Problem 1: 

Infiniteness Processor:
-> Pairs:
 ADD(s(X),Y) -> ADD(X,Y)
 DBL(s(X)) -> DBL(X)
 FIRST(s(X),cons(Y,Z)) -> FIRST(X,Z)
 HALF(s(s(X))) -> HALF(X)
 SQR(s(X)) -> ADD(sqr(X),dbl(X))
 SQR(s(X)) -> DBL(X)
 SQR(s(X)) -> SQR(X)
 TERMS(N) -> SQR(N)
 TERMS(N) -> TERMS(s(N))
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 half(dbl(X)) -> X
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(X))) -> s(half(X))
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)),terms(s(N)))
-> Pairs in cycle:
 TERMS(N) -> TERMS(s(N))

The problem is infinite.
