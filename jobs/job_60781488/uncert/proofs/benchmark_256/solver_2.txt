YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/48Ama.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 36 ms]
        (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 17 ms]
        (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) QDP
        (28) QDPOrderProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) PisEmptyProof [EQUIVALENT, 0 ms]
        (31) YES
    (32) QDP
        (33) UsableRulesProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (36) YES
    (37) QDP
        (38) UsableRulesProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) QDP
        (43) QDPOrderProof [EQUIVALENT, 25 ms]
        (44) QDP
        (45) PisEmptyProof [EQUIVALENT, 0 ms]
        (46) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(s(x), s(y)) -> IF(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   G(s(x), s(y)) -> AND(f(s(x)), f(s(y)))
   G(s(x), s(y)) -> F(s(x))
   G(s(x), s(y)) -> F(s(y))
   G(s(x), s(y)) -> T(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0)))))
   G(s(x), s(y)) -> G(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))
   G(s(x), s(y)) -> K(minus(m(x, y), n(x, y)), s(s(0)))
   G(s(x), s(y)) -> MINUS(m(x, y), n(x, y))
   G(s(x), s(y)) -> M(x, y)
   G(s(x), s(y)) -> N(x, y)
   G(s(x), s(y)) -> K(n(s(x), s(y)), s(s(0)))
   G(s(x), s(y)) -> N(s(x), s(y))
   G(s(x), s(y)) -> G(minus(m(x, y), n(x, y)), n(s(x), s(y)))
   N(s(x), s(y)) -> N(x, y)
   M(s(x), s(y)) -> M(x, y)
   K(s(x), s(y)) -> K(minus(x, y), s(y))
   K(s(x), s(y)) -> MINUS(x, y)
   T(x) -> P(x, x)
   P(s(x), s(y)) -> P(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   P(s(x), s(y)) -> IF(gt(x, y), x, y)
   P(s(x), s(y)) -> GT(x, y)
   P(s(x), s(y)) -> IF(not(gt(x, y)), id(x), id(y))
   P(s(x), s(y)) -> NOT(gt(x, y))
   P(s(x), s(y)) -> ID(x)
   P(s(x), s(y)) -> ID(y)
   P(s(x), x) -> P(if(gt(x, x), id(x), id(x)), s(x))
   P(s(x), x) -> IF(gt(x, x), id(x), id(x))
   P(s(x), x) -> GT(x, x)
   P(s(x), x) -> ID(x)
   P(id(x), s(y)) -> P(x, if(gt(s(y), y), y, s(y)))
   P(id(x), s(y)) -> IF(gt(s(y), y), y, s(y))
   P(id(x), s(y)) -> GT(s(y), y)
   MINUS(s(x), s(y)) -> MINUS(x, y)
   NOT(x) -> IF(x, false, true)
   F(s(x)) -> H(x)
   H(s(x)) -> F(x)
   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 8 SCCs with 25 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(s(x)) -> F(x)
   F(s(x)) -> H(x)

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(s(x)) -> F(x)
   F(s(x)) -> H(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(s(x)) -> H(x)
The graph contains the following edges 1 > 1


*H(s(x)) -> F(x)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(x), x) -> P(if(gt(x, x), id(x), id(x)), s(x))
   P(s(x), s(y)) -> P(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   P(id(x), s(y)) -> P(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P(s(x), x) -> P(if(gt(x, x), id(x), id(x)), s(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(P(x_1, x_2)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[0A]] 	 +  	[[4A]] 	* 	x_1
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(gt(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(id(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(not(x_1)) =  	[[1A]] 	 +  	[[4A]] 	* 	x_1
>>>

   <<<
 POL(0) =  	[[1A]]
>>>

   <<<
 POL(true) =  	[[0A]]
>>>

   <<<
 POL(false) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(x), s(y)) -> P(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   P(id(x), s(y)) -> P(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P(s(x), s(y)) -> P(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(P(x_1, x_2)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[0A]] 	 +  	[[2A]] 	* 	x_1
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(gt(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(not(x_1)) =  	[[4A]] 	 +  	[[2A]] 	* 	x_1
>>>

   <<<
 POL(id(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(true) =  	[[0A]]
>>>

   <<<
 POL(false) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(id(x), s(y)) -> P(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P(id(x), s(y)) -> P(x, if(gt(s(y), y), y, s(y)))
The graph contains the following edges 1 > 1


----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   K(s(x), s(y)) -> K(minus(x, y), s(y))

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   K(s(x), s(y)) -> K(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
K(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(29)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M(s(x), s(y)) -> M(x, y)

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   M(s(x), s(y)) -> M(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*M(s(x), s(y)) -> M(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N(s(x), s(y)) -> N(x, y)

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N(s(x), s(y)) -> N(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*N(s(x), s(y)) -> N(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(s(x), s(y)) -> G(minus(m(x, y), n(x, y)), n(s(x), s(y)))
   G(s(x), s(y)) -> G(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))

The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   G(s(x), s(y)) -> G(minus(m(x, y), n(x, y)), n(s(x), s(y)))
   G(s(x), s(y)) -> G(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( G_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 2}
POL( minus_2(x_1, x_2) ) = x_1
POL( m_2(x_1, x_2) ) = x_1 + x_2
POL( 0 ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( n_2(x_1, x_2) ) = x_1
POL( k_2(x_1, x_2) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))


----------------------------------------

(44)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   g(s(x), s(y)) -> if(and(f(s(x)), f(s(y))), t(g(k(minus(m(x, y), n(x, y)), s(s(0))), k(n(s(x), s(y)), s(s(0))))), g(minus(m(x, y), n(x, y)), n(s(x), s(y))))
   n(0, y) -> 0
   n(x, 0) -> 0
   n(s(x), s(y)) -> s(n(x, y))
   m(0, y) -> y
   m(x, 0) -> x
   m(s(x), s(y)) -> s(m(x, y))
   k(0, s(y)) -> 0
   k(s(x), s(y)) -> s(k(minus(x, y), s(y)))
   t(x) -> p(x, x)
   p(s(x), s(y)) -> s(s(p(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   p(s(x), x) -> p(if(gt(x, x), id(x), id(x)), s(x))
   p(0, y) -> y
   p(id(x), s(y)) -> s(p(x, if(gt(s(y), y), y, s(y))))
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   and(x, false) -> false
   and(true, true) -> true
   f(0) -> true
   f(s(x)) -> h(x)
   h(0) -> false
   h(s(x)) -> f(x)
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(46)
YES
