YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/yGHx3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesReductionPairsProof [EQUIVALENT, 10 ms]
        (12) QDP
        (13) QDPOrderProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) DependencyGraphProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(s(x)) -> f(id_inc(c(x, x)))
   f(c(s(x), y)) -> g(c(x, y))
   g(c(s(x), y)) -> g(c(y, x))
   g(c(x, s(y))) -> g(c(y, x))
   g(c(x, x)) -> f(x)
   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(x)) -> F(id_inc(c(x, x)))
   F(s(x)) -> ID_INC(c(x, x))
   F(c(s(x), y)) -> G(c(x, y))
   G(c(s(x), y)) -> G(c(y, x))
   G(c(x, s(y))) -> G(c(y, x))
   G(c(x, x)) -> F(x)
   ID_INC(c(x, y)) -> ID_INC(x)
   ID_INC(c(x, y)) -> ID_INC(y)
   ID_INC(s(x)) -> ID_INC(x)

The TRS R consists of the following rules:

   f(s(x)) -> f(id_inc(c(x, x)))
   f(c(s(x), y)) -> g(c(x, y))
   g(c(s(x), y)) -> g(c(y, x))
   g(c(x, s(y))) -> g(c(y, x))
   g(c(x, x)) -> f(x)
   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ID_INC(c(x, y)) -> ID_INC(y)
   ID_INC(c(x, y)) -> ID_INC(x)
   ID_INC(s(x)) -> ID_INC(x)

The TRS R consists of the following rules:

   f(s(x)) -> f(id_inc(c(x, x)))
   f(c(s(x), y)) -> g(c(x, y))
   g(c(s(x), y)) -> g(c(y, x))
   g(c(x, s(y))) -> g(c(y, x))
   g(c(x, x)) -> f(x)
   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ID_INC(c(x, y)) -> ID_INC(y)
   ID_INC(c(x, y)) -> ID_INC(x)
   ID_INC(s(x)) -> ID_INC(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ID_INC(c(x, y)) -> ID_INC(y)
The graph contains the following edges 1 > 1


*ID_INC(c(x, y)) -> ID_INC(x)
The graph contains the following edges 1 > 1


*ID_INC(s(x)) -> ID_INC(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> G(c(x, y))
   G(c(s(x), y)) -> G(c(y, x))
   G(c(x, s(y))) -> G(c(y, x))
   G(c(x, x)) -> F(x)
   F(s(x)) -> F(id_inc(c(x, x)))

The TRS R consists of the following rules:

   f(s(x)) -> f(id_inc(c(x, x)))
   f(c(s(x), y)) -> g(c(x, y))
   g(c(s(x), y)) -> g(c(y, x))
   g(c(x, s(y))) -> g(c(y, x))
   g(c(x, x)) -> f(x)
   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   f(s(x)) -> f(id_inc(c(x, x)))
   f(c(s(x), y)) -> g(c(x, y))
   g(c(s(x), y)) -> g(c(y, x))
   g(c(x, s(y))) -> g(c(y, x))
   g(c(x, x)) -> f(x)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(F(x_1)) = 2*x_1
   POL(G(x_1)) = x_1
   POL(c(x_1, x_2)) = x_1 + x_2
   POL(id_inc(x_1)) = x_1
   POL(s(x_1)) = 2*x_1


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> G(c(x, y))
   G(c(s(x), y)) -> G(c(y, x))
   G(c(x, s(y))) -> G(c(y, x))
   G(c(x, x)) -> F(x)
   F(s(x)) -> F(id_inc(c(x, x)))

The TRS R consists of the following rules:

   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   G(c(s(x), y)) -> G(c(y, x))
   G(c(x, s(y))) -> G(c(y, x))
   G(c(x, x)) -> F(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = 0
   POL(F(x_1)) = [2]x_1
   POL(G(x_1)) = [1/4] + [2]x_1
   POL(c(x_1, x_2)) = [1/2]x_1 + [1/2]x_2
   POL(id_inc(x_1)) = [1/4] + x_1
   POL(s(x_1)) = [1/4] + x_1
The value of delta used in the strict ordering is 1/4.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(c(s(x), y)) -> G(c(x, y))
   F(s(x)) -> F(id_inc(c(x, x)))

The TRS R consists of the following rules:

   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(x)) -> F(id_inc(c(x, x)))

The TRS R consists of the following rules:

   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(s(x)) -> F(id_inc(c(x, x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
F(x1)  =  x1

s(x1)  =  s

id_inc(x1)  =  id_inc

c(x1, x2)  =  c


Knuth-Bendix order [KBO] with precedence:s > id_inc > c

and weight map:

   s=1
   id_inc=1
   c=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   id_inc(c(x, y)) -> c(id_inc(x), id_inc(y))
   id_inc(s(x)) -> s(id_inc(x))
   id_inc(0) -> 0
   id_inc(0) -> s(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
