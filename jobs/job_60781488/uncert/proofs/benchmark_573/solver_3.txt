YES

Problem 1: 

(VAR vu95NonEmpty L X Y)
(RULES
rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
rev(nil) -> nil
rev1(num0,nil) -> num0
rev1(s(X),nil) -> s(X)
rev1(X,cons(Y,L)) -> rev1(Y,L)
rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
rev2(X,nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 REV(cons(X,L)) -> REV1(X,L)
 REV(cons(X,L)) -> REV2(X,L)
 REV1(X,cons(Y,L)) -> REV1(Y,L)
 REV2(X,cons(Y,L)) -> REV(rev2(Y,L))
 REV2(X,cons(Y,L)) -> REV(cons(X,rev(rev2(Y,L))))
 REV2(X,cons(Y,L)) -> REV2(Y,L)
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 REV(cons(X,L)) -> REV1(X,L)
 REV(cons(X,L)) -> REV2(X,L)
 REV1(X,cons(Y,L)) -> REV1(Y,L)
 REV2(X,cons(Y,L)) -> REV(rev2(Y,L))
 REV2(X,cons(Y,L)) -> REV(cons(X,rev(rev2(Y,L))))
 REV2(X,cons(Y,L)) -> REV2(Y,L)
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REV1(X,cons(Y,L)) -> REV1(Y,L)
->->-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->->Cycle:
->->-> Pairs:
 REV(cons(X,L)) -> REV2(X,L)
 REV2(X,cons(Y,L)) -> REV(rev2(Y,L))
 REV2(X,cons(Y,L)) -> REV(cons(X,rev(rev2(Y,L))))
 REV2(X,cons(Y,L)) -> REV2(Y,L)
->->-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 REV1(X,cons(Y,L)) -> REV1(Y,L)
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Projection:
 pi(REV1) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 REV(cons(X,L)) -> REV2(X,L)
 REV2(X,cons(Y,L)) -> REV(rev2(Y,L))
 REV2(X,cons(Y,L)) -> REV(cons(X,rev(rev2(Y,L))))
 REV2(X,cons(Y,L)) -> REV2(Y,L)
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
-> Usable rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[rev](X) = X
[rev1](X1,X2) = 2.X2
[rev2](X1,X2) = X2
[num0] = 1
[cons](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 2
[s](X) = 1
[REV](X) = X + 1
[REV1](X1,X2) = 0
[REV2](X1,X2) = X2 + 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 REV2(X,cons(Y,L)) -> REV(rev2(Y,L))
 REV2(X,cons(Y,L)) -> REV(cons(X,rev(rev2(Y,L))))
 REV2(X,cons(Y,L)) -> REV2(Y,L)
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REV2(X,cons(Y,L)) -> REV2(Y,L)
->->-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil

Problem 1.2: 

Subterm Processor:
-> Pairs:
 REV2(X,cons(Y,L)) -> REV2(Y,L)
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Projection:
 pi(REV2) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 rev(cons(X,L)) -> cons(rev1(X,L),rev2(X,L))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(X),nil) -> s(X)
 rev1(X,cons(Y,L)) -> rev1(Y,L)
 rev2(X,cons(Y,L)) -> rev(cons(X,rev(rev2(Y,L))))
 rev2(X,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
