YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SOSNM.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPOrderProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   PLUS(s(x), y) -> PLUS(x, y)
   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(x, 0, s(z)) -> PLUS(z, s(0))

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)

The TRS R consists of the following rules:

   quot(0, s(y), s(z)) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   quot(x, 0, s(z)) -> s(quot(x, plus(z, s(0)), s(z)))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   plus(0, x0)
   plus(s(x0), x1)
   quot(x0, 0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0), s(x1))
   quot(s(x0), s(x1), x2)
   quot(x0, 0, s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2, x3)  =  x1

s(x1)  =  s(x1)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(x, 0, s(z)) -> QUOT(x, plus(z, s(0)), s(z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2, x3)  =  x2

0  =  0

plus(x1, x2)  =  x2

s(x1)  =  s


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=1
   0=2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
