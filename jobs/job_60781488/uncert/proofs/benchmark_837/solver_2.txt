NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Zbs0f.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) TransformationProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) TransformationProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) NonTerminationLoopProof [COMPLETE, 0 ms]
        (28) NO
    (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (38) YES
    (39) QDP
        (40) UsableRulesProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (43) YES
    (44) QDP
        (45) UsableRulesProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (48) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)
   DBLS(cons(X, Y)) -> DBL(X)
   DBLS(cons(X, Y)) -> DBLS(Y)
   SEL(s(X), cons(Y, Z)) -> SEL(X, Z)
   INDX(cons(X, Y), Z) -> SEL(X, Z)
   INDX(cons(X, Y), Z) -> INDX(Y, Z)
   FROM(X) -> FROM(s(X))
   DBL1(s(X)) -> DBL1(X)
   SEL1(s(X), cons(Y, Z)) -> SEL1(X, Z)
   QUOTE(s(X)) -> QUOTE(X)
   QUOTE(dbl(X)) -> DBL1(X)
   QUOTE(sel(X, Y)) -> SEL1(X, Y)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 8 SCCs with 4 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL1(s(X), cons(Y, Z)) -> SEL1(X, Z)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL1(s(X), cons(Y, Z)) -> SEL1(X, Z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SEL1(s(X), cons(Y, Z)) -> SEL1(X, Z)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL1(s(X)) -> DBL1(X)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL1(s(X)) -> DBL1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DBL1(s(X)) -> DBL1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOTE(s(X)) -> QUOTE(X)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOTE(s(X)) -> QUOTE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*QUOTE(s(X)) -> QUOTE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FROM(X) -> FROM(s(X)) we obtained the following new rules [LPAR04]:

   (FROM(s(z0)) -> FROM(s(s(z0))),FROM(s(z0)) -> FROM(s(s(z0))))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(s(z0)) -> FROM(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FROM(s(z0)) -> FROM(s(s(z0))) we obtained the following new rules [LPAR04]:

   (FROM(s(s(z0))) -> FROM(s(s(s(z0)))),FROM(s(s(z0))) -> FROM(s(s(s(z0)))))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(s(s(z0))) -> FROM(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FROM(s(s(z0))) evaluates to  t =FROM(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FROM(s(s(z0))) to FROM(s(s(s(z0)))).




----------------------------------------

(28)
NO

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(X), cons(Y, Z)) -> SEL(X, Z)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(X), cons(Y, Z)) -> SEL(X, Z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SEL(s(X), cons(Y, Z)) -> SEL(X, Z)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INDX(cons(X, Y), Z) -> INDX(Y, Z)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INDX(cons(X, Y), Z) -> INDX(Y, Z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INDX(cons(X, Y), Z) -> INDX(Y, Z)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DBL(s(X)) -> DBL(X)
The graph contains the following edges 1 > 1


----------------------------------------

(43)
YES

----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBLS(cons(X, Y)) -> DBLS(Y)

The TRS R consists of the following rules:

   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   dbls(nil) -> nil
   dbls(cons(X, Y)) -> cons(dbl(X), dbls(Y))
   sel(0, cons(X, Y)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, Z)
   indx(nil, X) -> nil
   indx(cons(X, Y), Z) -> cons(sel(X, Z), indx(Y, Z))
   from(X) -> cons(X, from(s(X)))
   dbl1(0) -> 01
   dbl1(s(X)) -> s1(s1(dbl1(X)))
   sel1(0, cons(X, Y)) -> X
   sel1(s(X), cons(Y, Z)) -> sel1(X, Z)
   quote(0) -> 01
   quote(s(X)) -> s1(quote(X))
   quote(dbl(X)) -> dbl1(X)
   quote(sel(X, Y)) -> sel1(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBLS(cons(X, Y)) -> DBLS(Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DBLS(cons(X, Y)) -> DBLS(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(48)
YES
