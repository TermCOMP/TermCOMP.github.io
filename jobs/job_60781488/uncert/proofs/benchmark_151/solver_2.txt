YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/011i7.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) MNOCProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) MNOCProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) MNOCProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QReductionProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (31) YES
    (32) QDP
        (33) MNOCProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QReductionProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) MRRProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPOrderProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) PisEmptyProof [EQUIVALENT, 0 ms]
        (44) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)
   TIMES(s(x), y) -> PLUS(times(x, y), y)
   TIMES(s(x), y) -> TIMES(x, y)
   P(s(s(x))) -> P(s(x))
   FAC(s(x)) -> TIMES(fac(p(s(x))), s(x))
   FAC(s(x)) -> FAC(p(s(x)))
   FAC(s(x)) -> P(s(x))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))

R is empty.
The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P(s(s(x))) -> P(s(x))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(x, s(y)) -> PLUS(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FAC(s(x)) -> FAC(p(s(x)))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FAC(s(x)) -> FAC(p(s(x)))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   times(0, y) -> 0
   times(x, 0) -> 0
   times(s(x), y) -> plus(times(x, y), y)
   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0
   fac(s(x)) -> times(fac(p(s(x))), s(x))

The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FAC(s(x)) -> FAC(p(s(x)))

The TRS R consists of the following rules:

   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0

The set Q consists of the following terms:

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   p(s(s(x0)))
   p(s(0))
   fac(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(x0, 0)
   plus(x0, s(x1))
   times(0, x0)
   times(x0, 0)
   times(s(x0), x1)
   fac(s(x0))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FAC(s(x)) -> FAC(p(s(x)))

The TRS R consists of the following rules:

   p(s(s(x))) -> s(p(s(x)))
   p(s(0)) -> 0

The set Q consists of the following terms:

   p(s(s(x0)))
   p(s(0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   p(s(0)) -> 0

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(FAC(x_1)) = x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2*x_1


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FAC(s(x)) -> FAC(p(s(x)))

The TRS R consists of the following rules:

   p(s(s(x))) -> s(p(s(x)))

The set Q consists of the following terms:

   p(s(s(x0)))
   p(s(0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   FAC(s(x)) -> FAC(p(s(x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( FAC_1(x_1) ) = x_1
POL( p_1(x_1) ) = max{0, x_1 - 2}
POL( s_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   p(s(s(x))) -> s(p(s(x)))


----------------------------------------

(42)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   p(s(s(x))) -> s(p(s(x)))

The set Q consists of the following terms:

   p(s(s(x0)))
   p(s(0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(44)
YES
