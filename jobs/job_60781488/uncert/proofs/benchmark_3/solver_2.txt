YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/orp92.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 1 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   reach(x, y, empty, h) -> false
   reach(x, y, edge(u, v, i), h) -> if_reach_1(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_1(true, x, y, edge(u, v, i), h) -> if_reach_2(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_2(true, x, y, edge(u, v, i), h) -> true
   if_reach_2(false, x, y, edge(u, v, i), h) -> or(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   if_reach_1(false, x, y, edge(u, v, i), h) -> reach(x, y, i, edge(u, v, h))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   reach(x, y, empty, h) -> false
   reach(x, y, edge(u, v, i), h) -> if_reach_1(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_1(true, x, y, edge(u, v, i), h) -> if_reach_2(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_2(true, x, y, edge(u, v, i), h) -> true
   if_reach_2(false, x, y, edge(u, v, i), h) -> or(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   if_reach_1(false, x, y, edge(u, v, i), h) -> reach(x, y, i, edge(u, v, h))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)
   UNION(edge(x, y, i), h) -> UNION(i, h)
   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)
   REACH(x, y, edge(u, v, i), h) -> EQ(x, u)
   IF_REACH_1(true, x, y, edge(u, v, i), h) -> IF_REACH_2(eq(y, v), x, y, edge(u, v, i), h)
   IF_REACH_1(true, x, y, edge(u, v, i), h) -> EQ(y, v)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> OR(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(v, y, union(i, h), empty)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> UNION(i, h)
   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   reach(x, y, empty, h) -> false
   reach(x, y, edge(u, v, i), h) -> if_reach_1(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_1(true, x, y, edge(u, v, i), h) -> if_reach_2(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_2(true, x, y, edge(u, v, i), h) -> true
   if_reach_2(false, x, y, edge(u, v, i), h) -> or(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   if_reach_1(false, x, y, edge(u, v, i), h) -> reach(x, y, i, edge(u, v, h))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UNION(edge(x, y, i), h) -> UNION(i, h)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   reach(x, y, empty, h) -> false
   reach(x, y, edge(u, v, i), h) -> if_reach_1(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_1(true, x, y, edge(u, v, i), h) -> if_reach_2(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_2(true, x, y, edge(u, v, i), h) -> true
   if_reach_2(false, x, y, edge(u, v, i), h) -> or(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   if_reach_1(false, x, y, edge(u, v, i), h) -> reach(x, y, i, edge(u, v, h))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UNION(edge(x, y, i), h) -> UNION(i, h)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UNION(edge(x, y, i), h) -> UNION(i, h)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*UNION(edge(x, y, i), h) -> UNION(i, h)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   reach(x, y, empty, h) -> false
   reach(x, y, edge(u, v, i), h) -> if_reach_1(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_1(true, x, y, edge(u, v, i), h) -> if_reach_2(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_2(true, x, y, edge(u, v, i), h) -> true
   if_reach_2(false, x, y, edge(u, v, i), h) -> or(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   if_reach_1(false, x, y, edge(u, v, i), h) -> reach(x, y, i, edge(u, v, h))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)
   IF_REACH_1(true, x, y, edge(u, v, i), h) -> IF_REACH_2(eq(y, v), x, y, edge(u, v, i), h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(v, y, union(i, h), empty)
   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   reach(x, y, empty, h) -> false
   reach(x, y, edge(u, v, i), h) -> if_reach_1(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_1(true, x, y, edge(u, v, i), h) -> if_reach_2(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_2(true, x, y, edge(u, v, i), h) -> true
   if_reach_2(false, x, y, edge(u, v, i), h) -> or(reach(x, y, i, h), reach(v, y, union(i, h), empty))
   if_reach_1(false, x, y, edge(u, v, i), h) -> reach(x, y, i, edge(u, v, h))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)
   IF_REACH_1(true, x, y, edge(u, v, i), h) -> IF_REACH_2(eq(y, v), x, y, edge(u, v, i), h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(v, y, union(i, h), empty)
   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   or(true, x0)
   or(false, x0)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)
   IF_REACH_1(true, x, y, edge(u, v, i), h) -> IF_REACH_2(eq(y, v), x, y, edge(u, v, i), h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(v, y, union(i, h), empty)
   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_REACH_1(true, x, y, edge(u, v, i), h) -> IF_REACH_2(eq(y, v), x, y, edge(u, v, i), h)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( IF_REACH_1_5(x_1, ..., x_5) ) = max{0, 2x_3 + x_4 + x_5 - 1}
POL( IF_REACH_2_5(x_1, ..., x_5) ) = max{0, 2x_3 + x_4 + x_5 - 2}
POL( eq_2(x_1, x_2) ) = 0
POL( 0 ) = 0
POL( true ) = 2
POL( s_1(x_1) ) = 2x_1
POL( false ) = 0
POL( REACH_4(x_1, ..., x_4) ) = max{0, 2x_2 + x_3 + x_4 - 1}
POL( union_2(x_1, x_2) ) = x_1 + x_2
POL( empty ) = 0
POL( edge_3(x_1, ..., x_3) ) = x_3 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, h)
   IF_REACH_2(false, x, y, edge(u, v, i), h) -> REACH(v, y, union(i, h), empty)
   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))
   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))
   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   union(empty, x0)
   union(edge(x0, x1, x2), x3)


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))
   REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REACH(x, y, edge(u, v, i), h) -> IF_REACH_1(eq(x, u), x, y, edge(u, v, i), h)
The graph contains the following edges 1 >= 2, 2 >= 3, 3 >= 4, 4 >= 5


*IF_REACH_1(false, x, y, edge(u, v, i), h) -> REACH(x, y, i, edge(u, v, h))
The graph contains the following edges 2 >= 1, 3 >= 2, 4 > 3


----------------------------------------

(35)
YES
