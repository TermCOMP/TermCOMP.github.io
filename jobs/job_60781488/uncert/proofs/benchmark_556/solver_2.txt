YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9LSqP.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 1 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPOrderProof [EQUIVALENT, 16 ms]
        (34) QDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(X), s(Y)) -> LT(X, Y)
   APPEND(add(N, X), Y) -> APPEND(X, Y)
   SPLIT(N, add(M, Y)) -> F_1(split(N, Y), N, M, Y)
   SPLIT(N, add(M, Y)) -> SPLIT(N, Y)
   F_1(pair(X, Z), N, M, Y) -> F_2(lt(N, M), N, M, Y, X, Z)
   F_1(pair(X, Z), N, M, Y) -> LT(N, M)
   QSORT(add(N, X)) -> F_3(split(N, X), N, X)
   QSORT(add(N, X)) -> SPLIT(N, X)
   F_3(pair(Y, Z), N, X) -> APPEND(qsort(Y), add(X, qsort(Z)))
   F_3(pair(Y, Z), N, X) -> QSORT(Y)
   F_3(pair(Y, Z), N, X) -> QSORT(Z)

The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(add(N, X), Y) -> APPEND(X, Y)

The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(add(N, X), Y) -> APPEND(X, Y)

R is empty.
The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(add(N, X), Y) -> APPEND(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND(add(N, X), Y) -> APPEND(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(X), s(Y)) -> LT(X, Y)

The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(X), s(Y)) -> LT(X, Y)

R is empty.
The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(X), s(Y)) -> LT(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(X), s(Y)) -> LT(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(N, add(M, Y)) -> SPLIT(N, Y)

The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(N, add(M, Y)) -> SPLIT(N, Y)

R is empty.
The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT(N, add(M, Y)) -> SPLIT(N, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT(N, add(M, Y)) -> SPLIT(N, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QSORT(add(N, X)) -> F_3(split(N, X), N, X)
   F_3(pair(Y, Z), N, X) -> QSORT(Y)
   F_3(pair(Y, Z), N, X) -> QSORT(Z)

The TRS R consists of the following rules:

   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   append(nil, Y) -> Y
   append(add(N, X), Y) -> add(N, append(X, Y))
   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)
   qsort(nil) -> nil
   qsort(add(N, X)) -> f_3(split(N, X), N, X)
   f_3(pair(Y, Z), N, X) -> append(qsort(Y), add(X, qsort(Z)))

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QSORT(add(N, X)) -> F_3(split(N, X), N, X)
   F_3(pair(Y, Z), N, X) -> QSORT(Y)
   F_3(pair(Y, Z), N, X) -> QSORT(Z)

The TRS R consists of the following rules:

   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   append(nil, x0)
   append(add(x0, x1), x2)
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   append(nil, x0)
   append(add(x0, x1), x2)
   qsort(nil)
   qsort(add(x0, x1))
   f_3(pair(x0, x1), x2, x3)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QSORT(add(N, X)) -> F_3(split(N, X), N, X)
   F_3(pair(Y, Z), N, X) -> QSORT(Y)
   F_3(pair(Y, Z), N, X) -> QSORT(Z)

The TRS R consists of the following rules:

   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QSORT(add(N, X)) -> F_3(split(N, X), N, X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( F_3_3(x_1, ..., x_3) ) = 2x_1 + 2
POL( split_2(x_1, x_2) ) = x_2
POL( nil ) = 0
POL( pair_2(x_1, x_2) ) = max{0, x_1 + x_2 - 1}
POL( add_2(x_1, x_2) ) = x_2 + 2
POL( f_1_4(x_1, ..., x_4) ) = x_1 + 2
POL( f_2_6(x_1, ..., x_6) ) = x_1 + x_5 + x_6
POL( lt_2(x_1, x_2) ) = 1
POL( 0 ) = 0
POL( s_1(x_1) ) = 2x_1
POL( true ) = 1
POL( false ) = 1
POL( QSORT_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F_3(pair(Y, Z), N, X) -> QSORT(Y)
   F_3(pair(Y, Z), N, X) -> QSORT(Z)

The TRS R consists of the following rules:

   split(N, nil) -> pair(nil, nil)
   split(N, add(M, Y)) -> f_1(split(N, Y), N, M, Y)
   f_1(pair(X, Z), N, M, Y) -> f_2(lt(N, M), N, M, Y, X, Z)
   lt(0, s(X)) -> true
   lt(s(X), 0) -> false
   lt(s(X), s(Y)) -> lt(X, Y)
   f_2(true, N, M, Y, X, Z) -> pair(X, add(M, Z))
   f_2(false, N, M, Y, X, Z) -> pair(add(M, X), Z)

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(s(x0), 0)
   lt(s(x0), s(x1))
   split(x0, nil)
   split(x0, add(x1, x2))
   f_1(pair(x0, x1), x2, x3, x4)
   f_2(true, x0, x1, x2, x3, x4)
   f_2(false, x0, x1, x2, x3, x4)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(36)
TRUE
