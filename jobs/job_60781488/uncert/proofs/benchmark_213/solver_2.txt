YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1yD6c.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 12 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   last(x, l) -> if(empty(l), x, l)
   if(true, x, l) -> x
   if(false, x, l) -> last(head(l), tail(l))
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   last(x, l) -> if(empty(l), x, l)
   if(true, x, l) -> x
   if(false, x, l) -> last(head(l), tail(l))
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(cons(x, l)) -> REV2(x, l)
   LAST(x, l) -> IF(empty(l), x, l)
   LAST(x, l) -> EMPTY(l)
   IF(false, x, l) -> LAST(head(l), tail(l))
   IF(false, x, l) -> HEAD(l)
   IF(false, x, l) -> TAIL(l)
   REV2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))
   REV2(x, cons(y, l)) -> REV2(y, l)

The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   last(x, l) -> if(empty(l), x, l)
   if(true, x, l) -> x
   if(false, x, l) -> last(head(l), tail(l))
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, l) -> LAST(head(l), tail(l))
   LAST(x, l) -> IF(empty(l), x, l)

The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   last(x, l) -> if(empty(l), x, l)
   if(true, x, l) -> x
   if(false, x, l) -> last(head(l), tail(l))
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, l) -> LAST(head(l), tail(l))
   LAST(x, l) -> IF(empty(l), x, l)

The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, l) -> LAST(head(l), tail(l))
   LAST(x, l) -> IF(empty(l), x, l)

The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF(false, x, l) -> LAST(head(l), tail(l))
   LAST(x, l) -> IF(empty(l), x, l)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(IF(x_1, x_2, x_3)) = [2]x_1 + [2]x_3
   POL(LAST(x_1, x_2)) = [1/2] + [4]x_2
   POL(cons(x_1, x_2)) = [1] + [1/4]x_1 + [4]x_2
   POL(empty(x_1)) = x_1
   POL(false) = [1]
   POL(head(x_1)) = 0
   POL(nil) = 0
   POL(tail(x_1)) = [1/4]x_1
   POL(true) = 0
The value of delta used in the strict ordering is 1/2.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   tail(nil) -> nil
   tail(cons(x, l)) -> l
   empty(nil) -> true
   empty(cons(x, l)) -> false


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))
   REV(cons(x, l)) -> REV2(x, l)
   REV2(x, cons(y, l)) -> REV2(y, l)

The TRS R consists of the following rules:

   empty(nil) -> true
   empty(cons(x, l)) -> false
   head(cons(x, l)) -> x
   tail(nil) -> nil
   tail(cons(x, l)) -> l
   rev(nil) -> nil
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))
   last(x, l) -> if(empty(l), x, l)
   if(true, x, l) -> x
   if(false, x, l) -> last(head(l), tail(l))
   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))
   REV(cons(x, l)) -> REV2(x, l)
   REV2(x, cons(y, l)) -> REV2(y, l)

The TRS R consists of the following rules:

   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))

The set Q consists of the following terms:

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   rev(nil)
   rev(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   empty(nil)
   empty(cons(x0, x1))
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   last(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))
   REV(cons(x, l)) -> REV2(x, l)
   REV2(x, cons(y, l)) -> REV2(y, l)

The TRS R consists of the following rules:

   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))

The set Q consists of the following terms:

   rev(nil)
   rev(cons(x0, x1))
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REV(cons(x, l)) -> REV2(x, l)
   REV2(x, cons(y, l)) -> REV2(y, l)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
REV2(x1, x2)  =  x2

cons(x1, x2)  =  cons(x2)

REV(x1)  =  x1

rev2(x1, x2)  =  x2

nil  =  nil

rev(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   cons_1=1
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(x, cons(y, l)) -> REV(cons(x, rev2(y, l)))

The TRS R consists of the following rules:

   rev2(x, nil) -> nil
   rev2(x, cons(y, l)) -> rev(cons(x, rev2(y, l)))
   rev(cons(x, l)) -> cons(rev1(x, l), rev2(x, l))

The set Q consists of the following terms:

   rev(nil)
   rev(cons(x0, x1))
   rev2(x0, nil)
   rev2(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE
