YES

Problem 1: 

(VAR vu95NonEmpty l x y)
(RULES
empty(cons(x,l)) -> ffalse
empty(nil) -> ftrue
head(cons(x,l)) -> x
if(ffalse,x,l) -> last(head(l),tail(l))
if(ftrue,x,l) -> x
last(x,l) -> if(empty(l),x,l)
rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
rev(nil) -> nil
rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
rev2(x,nil) -> nil
tail(cons(x,l)) -> l
tail(nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IF(ffalse,x,l) -> HEAD(l)
 IF(ffalse,x,l) -> LAST(head(l),tail(l))
 IF(ffalse,x,l) -> TAIL(l)
 LAST(x,l) -> EMPTY(l)
 LAST(x,l) -> IF(empty(l),x,l)
 REV(cons(x,l)) -> REV2(x,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 IF(ffalse,x,l) -> HEAD(l)
 IF(ffalse,x,l) -> LAST(head(l),tail(l))
 IF(ffalse,x,l) -> TAIL(l)
 LAST(x,l) -> EMPTY(l)
 LAST(x,l) -> IF(empty(l),x,l)
 REV(cons(x,l)) -> REV2(x,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REV(cons(x,l)) -> REV2(x,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
->->-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->->Cycle:
->->-> Pairs:
 IF(ffalse,x,l) -> LAST(head(l),tail(l))
 LAST(x,l) -> IF(empty(l),x,l)
->->-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Reduction Pairs Processor:
-> Pairs:
 REV(cons(x,l)) -> REV2(x,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
-> Usable rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[empty](X) = 0
[head](X) = 0
[if](X1,X2,X3) = 0
[last](X1,X2) = 0
[rev](X) = X
[rev2](X1,X2) = X2
[tail](X) = 0
[cons](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[rev1](X1,X2) = X2 + 2
[ftrue] = 0
[EMPTY](X) = 0
[HEAD](X) = 0
[IF](X1,X2,X3) = 0
[LAST](X1,X2) = 0
[REV](X) = X + 2
[REV2](X1,X2) = 2.X2 + 1
[TAIL](X) = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REV2(x,cons(y,l)) -> REV2(y,l)
->->-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil

Problem 1.1: 

Subterm Processor:
-> Pairs:
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->Projection:
 pi(REV2) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 IF(ffalse,x,l) -> LAST(head(l),tail(l))
 LAST(x,l) -> IF(empty(l),x,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
-> Usable rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[empty](X) = 2.X
[head](X) = X
[if](X1,X2,X3) = 0
[last](X1,X2) = 0
[rev](X) = 0
[rev2](X1,X2) = 0
[tail](X) = 1/2.X
[cons](X1,X2) = X1 + 2.X2 + 1/2
[fSNonEmpty] = 0
[ffalse] = 1/2
[nil] = 0
[rev1](X1,X2) = 0
[ftrue] = 0
[EMPTY](X) = 0
[HEAD](X) = 0
[IF](X1,X2,X3) = 1/2.X1 + X3 + 2
[LAST](X1,X2) = 2.X2 + 2
[REV](X) = 0
[REV2](X1,X2) = 0
[TAIL](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 LAST(x,l) -> IF(empty(l),x,l)
-> Rules:
 empty(cons(x,l)) -> ffalse
 empty(nil) -> ftrue
 head(cons(x,l)) -> x
 if(ffalse,x,l) -> last(head(l),tail(l))
 if(ftrue,x,l) -> x
 last(x,l) -> if(empty(l),x,l)
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
 tail(cons(x,l)) -> l
 tail(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
