YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
ifu95minus(ftrue,s(x),y) -> num0
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
log(s(num0)) -> num0
log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
minus(num0,y) -> num0
minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
quot(num0,s(y)) -> num0
quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IFU95MINUS(ffalse,s(x),y) -> MINUS(x,y)
 LE(s(x),s(y)) -> LE(x,y)
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
 LOG(s(s(x))) -> QUOT(x,s(s(num0)))
 MINUS(s(x),y) -> IFU95MINUS(le(s(x),y),s(x),y)
 MINUS(s(x),y) -> LE(s(x),y)
 QUOT(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))

Problem 1: 

SCC Processor:
-> Pairs:
 IFU95MINUS(ffalse,s(x),y) -> MINUS(x,y)
 LE(s(x),s(y)) -> LE(x,y)
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
 LOG(s(s(x))) -> QUOT(x,s(s(num0)))
 MINUS(s(x),y) -> IFU95MINUS(le(s(x),y),s(x),y)
 MINUS(s(x),y) -> LE(s(x),y)
 QUOT(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
->->-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->->Cycle:
->->-> Pairs:
 IFU95MINUS(ffalse,s(x),y) -> MINUS(x,y)
 MINUS(s(x),y) -> IFU95MINUS(le(s(x),y),s(x),y)
->->-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->->Cycle:
->->-> Pairs:
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
->->-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->->Cycle:
->->-> Pairs:
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
->->-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))


The problem is decomposed in 4 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Projection:
 pi(LE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 IFU95MINUS(ffalse,s(x),y) -> MINUS(x,y)
 MINUS(s(x),y) -> IFU95MINUS(le(s(x),y),s(x),y)
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Projection:
 pi(IFU95MINUS) = 2
 pi(MINUS) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 MINUS(s(x),y) -> IFU95MINUS(le(s(x),y),s(x),y)
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
-> Usable rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[ifu95minus](X1,X2,X3) = 2.X2 + 1
[le](X1,X2) = 2.X2 + 2
[log](X) = 0
[minus](X1,X2) = 2.X1 + 1
[quot](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[s](X) = 2.X + 2
[ftrue] = 1
[IFU95MINUS](X1,X2,X3) = 0
[LE](X1,X2) = 0
[LOG](X) = 0
[MINUS](X1,X2) = 0
[QUOT](X1,X2) = X1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Reduction Pairs Processor:
-> Pairs:
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
-> Usable rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[ifu95minus](X1,X2,X3) = X2
[le](X1,X2) = 2.X1 + 2
[log](X) = 0
[minus](X1,X2) = X1
[quot](X1,X2) = 2.X1
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[s](X) = 2.X + 2
[ftrue] = 2
[IFU95MINUS](X1,X2,X3) = 0
[LE](X1,X2) = 0
[LOG](X) = 2.X
[MINUS](X1,X2) = 0
[QUOT](X1,X2) = 0

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 ifu95minus(ffalse,s(x),y) -> s(minus(x,y))
 ifu95minus(ftrue,s(x),y) -> num0
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(num0,y) -> num0
 minus(s(x),y) -> ifu95minus(le(s(x),y),s(x),y)
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
