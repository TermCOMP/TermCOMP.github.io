YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eqtZO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) MNOCProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) ATransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE
    (23) QDP
        (24) QDPApplicativeOrderProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) PisEmptyProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   APP(app(minus, app(s, x)), app(s, y)) -> APP(minus, app(p, app(s, x)))
   APP(app(minus, app(s, x)), app(s, y)) -> APP(p, app(s, x))
   APP(app(minus, app(s, x)), app(s, y)) -> APP(p, app(s, y))
   APP(app(div, app(s, x)), app(s, y)) -> APP(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   APP(app(div, app(s, x)), app(s, y)) -> APP(app(div, app(app(minus, x), app(id, y))), app(s, y))
   APP(app(div, app(s, x)), app(s, y)) -> APP(div, app(app(minus, x), app(id, y)))
   APP(app(div, app(s, x)), app(s, y)) -> APP(app(minus, x), app(id, y))
   APP(app(div, app(s, x)), app(s, y)) -> APP(minus, x)
   APP(app(div, app(s, x)), app(s, y)) -> APP(id, y)
   APP(id, x) -> APP(s, app(s, app(s, x)))
   APP(id, x) -> APP(s, app(s, x))
   APP(id, x) -> APP(s, x)
   APP(id, app(p, x)) -> APP(id, app(s, app(id, x)))
   APP(id, app(p, x)) -> APP(s, app(id, x))
   APP(id, app(p, x)) -> APP(id, x)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 15 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(id, app(p, x)) -> APP(id, x)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(id, app(p, x)) -> APP(id, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   id(p(x)) -> id(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*id(p(x)) -> id(x)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, app(p, app(s, x))), app(p, app(s, y)))

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x

The set Q consists of the following terms:

   app(p, app(s, x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   p(s(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(minus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(22)
TRUE

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(div, app(s, x)), app(s, y)) -> APP(app(div, app(app(minus, x), app(id, y))), app(s, y))

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPApplicativeOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04].Here, we combined the reduction pair processor [LPAR04,JAR06] with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   (div1(s(x), s(y)),div1(minus(x, id(y)), s(y)))

 The a-transformed usable rules are 

   p(s(x)) -> x
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(p(s(x)), p(s(y)))




The following pairs can be oriented strictly and are deleted.

   APP(app(div, app(s, x)), app(s, y)) -> APP(app(div, app(app(minus, x), app(id, y))), app(s, y))
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( p_1(x_1) ) = max{0, x_1 - 2}
POL( s_1(x_1) ) = 2x_1 + 2
POL( id_1(x_1) ) = max{0, -2}
POL( minus_2(x_1, x_2) ) = 2x_1 + 1
POL( 0 ) = 2
POL( div1_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(p, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))


----------------------------------------

(25)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, app(p, app(s, x))), app(p, app(s, y)))
   app(p, app(s, x)) -> x
   app(app(div, 0), app(s, y)) -> 0
   app(app(div, app(s, x)), app(s, y)) -> app(s, app(app(div, app(app(minus, x), app(id, y))), app(s, y)))
   app(id, x) -> x
   app(id, x) -> app(s, app(s, app(s, x)))
   app(id, app(p, x)) -> app(id, app(s, app(id, x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(32)
YES
