NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/yt669.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 10 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) MNOCProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) NonLoopProof [COMPLETE, 4935 ms]
        (32) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The TRS R 2 is 
   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))

The signature Sigma is {f_2}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, xs) -> F(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   F(true, xs) -> EQ(s(length(xs)), length(cons(a, xs)))
   F(true, xs) -> LENGTH(xs)
   F(true, xs) -> LENGTH(cons(a, xs))
   F(true, xs) -> APPEND(cons(b, nil), xs)
   LENGTH(cons(x, xs)) -> LENGTH(xs)
   EQ(s(x), s(y)) -> EQ(x, y)
   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

R is empty.
The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND(cons(x, xs), ys) -> APPEND(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, xs)) -> LENGTH(xs)

The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, xs)) -> LENGTH(xs)

R is empty.
The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(x, xs)) -> LENGTH(xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(cons(x, xs)) -> LENGTH(xs)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, xs) -> F(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))

The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   f(true, x0)
   length(nil)
   length(cons(x0, x1))
   eq(0, 0)
   eq(s(x0), 0)
   eq(0, s(x0))
   eq(s(x0), s(x1))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, xs) -> F(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))

The TRS R consists of the following rules:

   f(true, xs) -> f(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))
   length(nil) -> 0
   length(cons(x, xs)) -> s(length(xs))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [ ] on the rule
F(true, cons(b, zr1))[zr1 / cons(b, zr1)]^n[zr1 / nil] -> F(true, cons(b, cons(b, zr1)))[zr1 / cons(b, zr1)]^n[zr1 / nil]
This rule is correct for the QDP as the following derivation shows:

F(true, cons(b, zr1))[zr1 / cons(b, zr1)]^n[zr1 / nil] -> F(true, cons(b, cons(b, zr1)))[zr1 / cons(b, zr1)]^n[zr1 / nil]
    by Equivalence by Domain Renaming of the lhs with [zl0 / zr1]
    intermediate steps: Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
    F(true, cons(x1, zl1))[zl1 / cons(x1, zl1)]^n[zl1 / nil] -> F(true, cons(b, cons(x1, zr1)))[zr1 / cons(x1, zr1)]^n[zr1 / nil]
        by Rewrite t with the rewrite sequence <Pos,Rule>: [([0,1],length(nil) -> 0), ([0],eq(0, 0) -> true), ([1],append(cons(x, xs), ys) -> cons(x, append(xs, ys))), ([1,1],append(nil, ys) -> ys)]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs)
        F(true, cons(x1, zl1))[zr1 / cons(x1, zr1), zl1 / cons(x1, zl1)]^n[zr1 / nil, zl1 / nil] -> F(eq(0, length(nil)), append(cons(b, nil), cons(x1, zr1)))[zr1 / cons(x1, zr1), zl1 / cons(x1, zl1)]^n[zr1 / nil, zl1 / nil]
            by Narrowing at position: [0,0]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv Smu (rhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            F(true, cons(x1, zl1))[zr2 / s(zr2), zr3 / cons(x1, zr3), zr5 / s(zr5), zl1 / cons(x1, zl1)]^n[zr2 / length(x0), zr3 / x0, zr5 / length(x0), y1 / length(x0), y0 / length(x0), zl1 / x0] -> F(eq(y1, y0), append(cons(b, nil), cons(x1, zr3)))[zr2 / s(zr2), zr3 / cons(x1, zr3), zr5 / s(zr5), zl1 / cons(x1, zl1)]^n[zr2 / length(x0), zr3 / x0, zr5 / length(x0), y1 / length(x0), y0 / length(x0), zl1 / x0]
                by Narrowing at position: [0]
                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
                F(true, cons(x1, zl1))[zr2 / s(zr2), zr3 / cons(x1, zr3), zt1 / s(zt1), zl1 / cons(x1, zl1)]^n[zr2 / length(y1), zr3 / y1, zt1 / length(y1), zl1 / y1, x0 / y1] -> F(eq(s(s(zr2)), s(s(zt1))), append(cons(b, nil), cons(x1, zr3)))[zr2 / s(zr2), zr3 / cons(x1, zr3), zt1 / s(zt1), zl1 / cons(x1, zl1)]^n[zr2 / length(y1), zr3 / y1, zt1 / length(y1), zl1 / y1, x0 / y1]
                    by Narrowing at position: [0,1,0]
                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
                    F(true, cons(x1, zl1))[zr2 / s(zr2), zr3 / cons(x1, zr3), zl1 / cons(x1, zl1)]^n[zr2 / length(x0), zr3 / x0, zl1 / x0] -> F(eq(s(s(zr2)), s(length(cons(x1, zr3)))), append(cons(b, nil), cons(x1, zr3)))[zr2 / s(zr2), zr3 / cons(x1, zr3), zl1 / cons(x1, zl1)]^n[zr2 / length(x0), zr3 / x0, zl1 / x0]
                        by Narrowing at position: [0,1]
                        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (lhs)
                        F(true, cons(y0, zs1))[zt1 / s(zt1), zs1 / cons(y0, zs1)]^n[zt1 / length(y1), zs1 / y1] -> F(eq(s(s(zt1)), length(cons(a, cons(y0, zs1)))), append(cons(b, nil), cons(y0, zs1)))[zt1 / s(zt1), zs1 / cons(y0, zs1)]^n[zt1 / length(y1), zs1 / y1]
                            by Narrowing at position: [0,0,0]
                            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
                            F(true, xs)[ ]^n[ ] -> F(eq(s(length(xs)), length(cons(a, xs))), append(cons(b, nil), xs))[ ]^n[ ]
                                by Rule from TRS P

                            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs)
                            length(cons(x, xs))[xs / cons(x, xs)]^n[ ] -> s(z)[xs / cons(x, xs), z / s(z)]^n[z / length(xs)]
                                by PatternCreation II with pi: [0], sigma: [xs / cons(x, xs)]
                                length(cons(x, xs))[ ]^n[ ] -> s(length(xs))[ ]^n[ ]
                                    by Rule from TRS R

                        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation - Instantiation - Instantiation
                        length(cons(x, xs))[ ]^n[ ] -> s(length(xs))[ ]^n[ ]
                            by Rule from TRS R

                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (lhs) - Instantiation - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs)
                    length(cons(x, xs))[xs / cons(x, xs)]^n[ ] -> s(z)[xs / cons(x, xs), z / s(z)]^n[z / length(xs)]
                        by PatternCreation II with pi: [0], sigma: [xs / cons(x, xs)]
                        length(cons(x, xs))[ ]^n[ ] -> s(length(xs))[ ]^n[ ]
                            by Rule from TRS R

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (lhs) - Equiv DR (lhs) - Expand Sigma - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
                eq(s(x), s(y))[x / s(x), y / s(y)]^n[ ] -> eq(x, y)[ ]^n[ ]
                    by PatternCreation I with delta: [ ], theta: [ ], sigma: [x / s(x), y / s(y)]
                    eq(s(x), s(y))[ ]^n[ ] -> eq(x, y)[ ]^n[ ]
                        by Rule from TRS R

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            length(nil)[ ]^n[ ] -> 0[ ]^n[ ]
                by Rule from TRS R
----------------------------------------

(32)
NO
