YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YNa5T.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPOrderProof [EQUIVALENT, 48 ms]
        (41) QDP
        (42) UsableRulesProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) QReductionProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QDPOrderProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) PisEmptyProof [EQUIVALENT, 0 ms]
        (49) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)
   APP(cons(N, L), Y) -> APP(L, Y)
   LOW(N, cons(M, L)) -> IFLOW(le(M, N), N, cons(M, L))
   LOW(N, cons(M, L)) -> LE(M, N)
   IFLOW(true, N, cons(M, L)) -> LOW(N, L)
   IFLOW(false, N, cons(M, L)) -> LOW(N, L)
   HIGH(N, cons(M, L)) -> IFHIGH(le(M, N), N, cons(M, L))
   HIGH(N, cons(M, L)) -> LE(M, N)
   IFHIGH(true, N, cons(M, L)) -> HIGH(N, L)
   IFHIGH(false, N, cons(M, L)) -> HIGH(N, L)
   QUICKSORT(cons(N, L)) -> APP(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))
   QUICKSORT(cons(N, L)) -> QUICKSORT(low(N, L))
   QUICKSORT(cons(N, L)) -> LOW(N, L)
   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))
   QUICKSORT(cons(N, L)) -> HIGH(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(N, L), Y) -> APP(L, Y)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(N, L), Y) -> APP(L, Y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(N, L), Y) -> APP(L, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(N, L), Y) -> APP(L, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(X), s(Y)) -> LE(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH(N, cons(M, L)) -> IFHIGH(le(M, N), N, cons(M, L))
   IFHIGH(true, N, cons(M, L)) -> HIGH(N, L)
   IFHIGH(false, N, cons(M, L)) -> HIGH(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH(N, cons(M, L)) -> IFHIGH(le(M, N), N, cons(M, L))
   IFHIGH(true, N, cons(M, L)) -> HIGH(N, L)
   IFHIGH(false, N, cons(M, L)) -> HIGH(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH(N, cons(M, L)) -> IFHIGH(le(M, N), N, cons(M, L))
   IFHIGH(true, N, cons(M, L)) -> HIGH(N, L)
   IFHIGH(false, N, cons(M, L)) -> HIGH(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HIGH(N, cons(M, L)) -> IFHIGH(le(M, N), N, cons(M, L))
The graph contains the following edges 1 >= 2, 2 >= 3


*IFHIGH(true, N, cons(M, L)) -> HIGH(N, L)
The graph contains the following edges 2 >= 1, 3 > 2


*IFHIGH(false, N, cons(M, L)) -> HIGH(N, L)
The graph contains the following edges 2 >= 1, 3 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOW(N, cons(M, L)) -> IFLOW(le(M, N), N, cons(M, L))
   IFLOW(true, N, cons(M, L)) -> LOW(N, L)
   IFLOW(false, N, cons(M, L)) -> LOW(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOW(N, cons(M, L)) -> IFLOW(le(M, N), N, cons(M, L))
   IFLOW(true, N, cons(M, L)) -> LOW(N, L)
   IFLOW(false, N, cons(M, L)) -> LOW(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOW(N, cons(M, L)) -> IFLOW(le(M, N), N, cons(M, L))
   IFLOW(true, N, cons(M, L)) -> LOW(N, L)
   IFLOW(false, N, cons(M, L)) -> LOW(N, L)

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LOW(N, cons(M, L)) -> IFLOW(le(M, N), N, cons(M, L))
The graph contains the following edges 1 >= 2, 2 >= 3


*IFLOW(true, N, cons(M, L)) -> LOW(N, L)
The graph contains the following edges 2 >= 1, 3 > 2


*IFLOW(false, N, cons(M, L)) -> LOW(N, L)
The graph contains the following edges 2 >= 1, 3 > 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))
   QUICKSORT(cons(N, L)) -> QUICKSORT(low(N, L))

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   app(nil, Y) -> Y
   app(cons(N, L), Y) -> cons(N, app(L, Y))
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))
   quicksort(nil) -> nil
   quicksort(cons(N, L)) -> app(quicksort(low(N, L)), cons(N, quicksort(high(N, L))))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))
   QUICKSORT(cons(N, L)) -> QUICKSORT(low(N, L))

The TRS R consists of the following rules:

   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(cons(x0, x1), x2)
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))
   quicksort(nil)
   quicksort(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(nil, x0)
   app(cons(x0, x1), x2)
   quicksort(nil)
   quicksort(cons(x0, x1))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))
   QUICKSORT(cons(N, L)) -> QUICKSORT(low(N, L))

The TRS R consists of the following rules:

   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUICKSORT(cons(N, L)) -> QUICKSORT(low(N, L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUICKSORT(x1)  =  QUICKSORT(x1)

cons(x1, x2)  =  cons(x2)

high(x1, x2)  =  high(x2)

low(x1, x2)  =  x2

nil  =  nil

ifhigh(x1, x2, x3)  =  ifhigh(x3)

le(x1, x2)  =  x2

true  =  true

iflow(x1, x2, x3)  =  x3

false  =  false

0  =  0

s(x1)  =  s


Recursive path order with status [RPO].
Quasi-Precedence: [QUICKSORT_1, cons_1, high_1, nil, ifhigh_1, false]

Status: QUICKSORT_1: [1]
cons_1: multiset status
high_1: multiset status
nil: multiset status
ifhigh_1: multiset status
true: multiset status
false: multiset status
0: multiset status
s: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))

The TRS R consists of the following rules:

   low(N, nil) -> nil
   low(N, cons(M, L)) -> iflow(le(M, N), N, cons(M, L))
   iflow(false, N, cons(M, L)) -> low(N, L)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   iflow(true, N, cons(M, L)) -> cons(M, low(N, L))
   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))

The TRS R consists of the following rules:

   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   low(x0, nil)
   low(x0, cons(x1, x2))
   iflow(true, x0, cons(x1, x2))
   iflow(false, x0, cons(x1, x2))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))

The TRS R consists of the following rules:

   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUICKSORT(cons(N, L)) -> QUICKSORT(high(N, L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUICKSORT(x1)  =  x1

cons(x1, x2)  =  cons(x2)

high(x1, x2)  =  x2

nil  =  nil

ifhigh(x1, x2, x3)  =  x3


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   cons_1=1
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))


----------------------------------------

(47)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   high(N, nil) -> nil
   high(N, cons(M, L)) -> ifhigh(le(M, N), N, cons(M, L))
   ifhigh(true, N, cons(M, L)) -> high(N, L)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   ifhigh(false, N, cons(M, L)) -> cons(M, high(N, L))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   high(x0, nil)
   high(x0, cons(x1, x2))
   ifhigh(true, x0, cons(x1, x2))
   ifhigh(false, x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(49)
YES
