NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Rvh3j.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) MNOCProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) NonTerminationLoopProof [COMPLETE, 0 ms]
        (29) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, XS)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, XS)

The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIB(N) -> SEL(N, fib1(s(0), s(0)))
   FIB(N) -> FIB1(s(0), s(0))
   FIB1(X, Y) -> FIB1(Y, add(X, Y))
   FIB1(X, Y) -> ADD(X, Y)
   ADD(s(X), Y) -> ADD(X, Y)
   SEL(s(N), cons(X, XS)) -> SEL(N, XS)

The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, XS)

The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(N), cons(X, XS)) -> SEL(N, XS)

The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, XS)

The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(N), cons(X, XS)) -> SEL(N, XS)

R is empty.
The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(N), cons(X, XS)) -> SEL(N, XS)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SEL(s(N), cons(X, XS)) -> SEL(N, XS)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, XS)

The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

R is empty.
The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(s(X), Y) -> ADD(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIB1(X, Y) -> FIB1(Y, add(X, Y))

The TRS R consists of the following rules:

   fib(N) -> sel(N, fib1(s(0), s(0)))
   fib1(X, Y) -> cons(X, fib1(Y, add(X, Y)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, XS)

The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIB1(X, Y) -> FIB1(Y, add(X, Y))

The TRS R consists of the following rules:

   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))

The set Q consists of the following terms:

   fib(x0)
   fib1(x0, x1)
   add(0, x0)
   add(s(x0), x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fib(x0)
   fib1(x0, x1)
   sel(0, cons(x0, x1))
   sel(s(x0), cons(x1, x2))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIB1(X, Y) -> FIB1(Y, add(X, Y))

The TRS R consists of the following rules:

   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))

The set Q consists of the following terms:

   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIB1(X, Y) -> FIB1(Y, add(X, Y))

The TRS R consists of the following rules:

   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FIB1(X, Y) evaluates to  t =FIB1(Y, add(X, Y))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [X / Y, Y / add(X, Y)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FIB1(X, Y) to FIB1(Y, add(X, Y)).




----------------------------------------

(29)
NO
