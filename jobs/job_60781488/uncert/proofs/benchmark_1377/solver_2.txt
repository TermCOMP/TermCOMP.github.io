YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VC0YS.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 21 ms]
        (12) QDP
        (13) DependencyGraphProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U12(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt, N) -> mark(N)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNat(X) -> isNat(X)
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__plus(X1, X2) -> plus(X1, X2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U11(tt, V2) -> A__U12(a__isNat(V2))
   A__U11(tt, V2) -> A__ISNAT(V2)
   A__U31(tt, N) -> MARK(N)
   A__U41(tt, M, N) -> A__U42(a__isNat(N), M, N)
   A__U41(tt, M, N) -> A__ISNAT(N)
   A__U42(tt, M, N) -> A__PLUS(mark(N), mark(M))
   A__U42(tt, M, N) -> MARK(N)
   A__U42(tt, M, N) -> MARK(M)
   A__ISNAT(plus(V1, V2)) -> A__U11(a__isNat(V1), V2)
   A__ISNAT(plus(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNat(V1))
   A__ISNAT(s(V1)) -> A__ISNAT(V1)
   A__PLUS(N, 0) -> A__U31(a__isNat(N), N)
   A__PLUS(N, 0) -> A__ISNAT(N)
   A__PLUS(N, s(M)) -> A__U41(a__isNat(M), M, N)
   A__PLUS(N, s(M)) -> A__ISNAT(M)
   MARK(U11(X1, X2)) -> A__U11(mark(X1), X2)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> A__U12(mark(X))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(U21(X)) -> A__U21(mark(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2, X3)) -> A__U42(mark(X1), X2, X3)
   MARK(U42(X1, X2, X3)) -> MARK(X1)
   MARK(plus(X1, X2)) -> A__PLUS(mark(X1), mark(X2))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U12(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt, N) -> mark(N)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNat(X) -> isNat(X)
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__plus(X1, X2) -> plus(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 9 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U11(tt, V2) -> A__ISNAT(V2)
   A__ISNAT(plus(V1, V2)) -> A__U11(a__isNat(V1), V2)
   A__ISNAT(plus(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(s(V1)) -> A__ISNAT(V1)

The TRS R consists of the following rules:

   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U12(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt, N) -> mark(N)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNat(X) -> isNat(X)
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__plus(X1, X2) -> plus(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U11(tt, V2) -> A__ISNAT(V2)
   A__ISNAT(plus(V1, V2)) -> A__U11(a__isNat(V1), V2)
   A__ISNAT(plus(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(s(V1)) -> A__ISNAT(V1)

The TRS R consists of the following rules:

   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNat(X) -> isNat(X)
   a__U21(tt) -> tt
   a__U21(X) -> U21(X)
   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(tt) -> tt
   a__U12(X) -> U12(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A__ISNAT(plus(V1, V2)) -> A__U11(a__isNat(V1), V2)
The graph contains the following edges 1 > 2


*A__U11(tt, V2) -> A__ISNAT(V2)
The graph contains the following edges 2 >= 1


*A__ISNAT(plus(V1, V2)) -> A__ISNAT(V1)
The graph contains the following edges 1 > 1


*A__ISNAT(s(V1)) -> A__ISNAT(V1)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, N) -> MARK(N)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__U41(tt, M, N) -> A__U42(a__isNat(N), M, N)
   A__U42(tt, M, N) -> A__PLUS(mark(N), mark(M))
   A__PLUS(N, 0) -> A__U31(a__isNat(N), N)
   A__PLUS(N, s(M)) -> A__U41(a__isNat(M), M, N)
   A__U42(tt, M, N) -> MARK(N)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2, X3)) -> A__U42(mark(X1), X2, X3)
   A__U42(tt, M, N) -> MARK(M)
   MARK(U42(X1, X2, X3)) -> MARK(X1)
   MARK(plus(X1, X2)) -> A__PLUS(mark(X1), mark(X2))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U12(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt, N) -> mark(N)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNat(X) -> isNat(X)
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__plus(X1, X2) -> plus(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U31(X1, X2)) -> A__U31(mark(X1), X2)
   A__U31(tt, N) -> MARK(N)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U41(X1, X2, X3)) -> A__U41(mark(X1), X2, X3)
   A__PLUS(N, s(M)) -> A__U41(a__isNat(M), M, N)
   MARK(U41(X1, X2, X3)) -> MARK(X1)
   MARK(U42(X1, X2, X3)) -> A__U42(mark(X1), X2, X3)
   MARK(U42(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__PLUS_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( A__U31_2(x_1, x_2) ) = 2x_2 + 2
POL( A__U41_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( A__U42_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( mark_1(x_1) ) = x_1
POL( U11_2(x_1, x_2) ) = 2x_1
POL( a__U11_2(x_1, x_2) ) = 2x_1
POL( U12_1(x_1) ) = 2x_1
POL( a__U12_1(x_1) ) = 2x_1
POL( isNat_1(x_1) ) = 0
POL( a__isNat_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1
POL( a__U21_1(x_1) ) = 2x_1
POL( U31_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( a__U31_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( tt ) = 0
POL( plus_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__plus_2(x_1, x_2) ) = x_1 + 2x_2
POL( 0 ) = 1
POL( U41_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + x_3 + 2
POL( a__U41_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + x_3 + 2
POL( U42_3(x_1, ..., x_3) ) = x_1 + 2x_2 + x_3 + 2
POL( a__U42_3(x_1, ..., x_3) ) = x_1 + 2x_2 + x_3 + 2
POL( s_1(x_1) ) = x_1 + 2
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   a__U31(tt, N) -> mark(N)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNat(X) -> isNat(X)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__plus(X1, X2) -> plus(X1, X2)
   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(tt) -> tt
   a__U12(X) -> U12(X)
   a__U21(tt) -> tt
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   A__U41(tt, M, N) -> A__U42(a__isNat(N), M, N)
   A__U42(tt, M, N) -> A__PLUS(mark(N), mark(M))
   A__PLUS(N, 0) -> A__U31(a__isNat(N), N)
   A__U42(tt, M, N) -> MARK(N)
   A__U42(tt, M, N) -> MARK(M)
   MARK(plus(X1, X2)) -> A__PLUS(mark(X1), mark(X2))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U12(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt, N) -> mark(N)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNat(X) -> isNat(X)
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__plus(X1, X2) -> plus(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 6 less nodes.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X)) -> MARK(X)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U21(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__U11(tt, V2) -> a__U12(a__isNat(V2))
   a__U12(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt, N) -> mark(N)
   a__U41(tt, M, N) -> a__U42(a__isNat(N), M, N)
   a__U42(tt, M, N) -> s(a__plus(mark(N), mark(M)))
   a__isNat(0) -> tt
   a__isNat(plus(V1, V2)) -> a__U11(a__isNat(V1), V2)
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__plus(N, 0) -> a__U31(a__isNat(N), N)
   a__plus(N, s(M)) -> a__U41(a__isNat(M), M, N)
   mark(U11(X1, X2)) -> a__U11(mark(X1), X2)
   mark(U12(X)) -> a__U12(mark(X))
   mark(isNat(X)) -> a__isNat(X)
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X1, X2)) -> a__U31(mark(X1), X2)
   mark(U41(X1, X2, X3)) -> a__U41(mark(X1), X2, X3)
   mark(U42(X1, X2, X3)) -> a__U42(mark(X1), X2, X3)
   mark(plus(X1, X2)) -> a__plus(mark(X1), mark(X2))
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__U11(X1, X2) -> U11(X1, X2)
   a__U12(X) -> U12(X)
   a__isNat(X) -> isNat(X)
   a__U21(X) -> U21(X)
   a__U31(X1, X2) -> U31(X1, X2)
   a__U41(X1, X2, X3) -> U41(X1, X2, X3)
   a__U42(X1, X2, X3) -> U42(X1, X2, X3)
   a__plus(X1, X2) -> plus(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U12(X)) -> MARK(X)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U21(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U12(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U11(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(U21(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(plus(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(plus(X1, X2)) -> MARK(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES
