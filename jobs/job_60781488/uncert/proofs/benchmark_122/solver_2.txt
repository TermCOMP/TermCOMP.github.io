YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/f75tX.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 4 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 14 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> app(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> app(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x0)), x1)), x2)), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(:, app(app(:, x), z))
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, x), z)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(:, x)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, app(app(:, x), y)), z)), u)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(:, app(app(:, app(app(:, x), y)), z))
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, x), y)), z)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(:, app(app(:, x), y))
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> app(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x0)), x1)), x2)), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 14 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, x), z)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, app(app(:, x), y)), z)), u)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, x), y)), z)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, x), y)

The TRS R consists of the following rules:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> app(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x0)), x1)), x2)), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, x), z)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, app(app(:, x), y)), z)), u)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, app(app(:, x), y)), z)
   APP(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> APP(app(:, x), y)

The TRS R consists of the following rules:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> app(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))

The set Q consists of the following terms:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x0)), x1)), x2)), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   :1(:(:(:(C, x), y), z), u) -> :1(x, z)
   :1(:(:(:(C, x), y), z), u) -> :1(:(x, z), :(:(:(x, y), z), u))
   :1(:(:(:(C, x), y), z), u) -> :1(:(:(x, y), z), u)
   :1(:(:(:(C, x), y), z), u) -> :1(:(x, y), z)
   :1(:(:(:(C, x), y), z), u) -> :1(x, y)

The TRS R consists of the following rules:

   :(:(:(:(C, x), y), z), u) -> :(:(x, z), :(:(:(x, y), z), u))

The set Q consists of the following terms:

   :(:(:(:(C, x0), x1), x2), x3)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   :1(:(:(:(C, x), y), z), u) -> :1(x, z)
   :1(:(:(:(C, x), y), z), u) -> :1(:(x, z), :(:(:(x, y), z), u))
   :1(:(:(:(C, x), y), z), u) -> :1(:(:(x, y), z), u)
   :1(:(:(:(C, x), y), z), u) -> :1(:(x, y), z)
   :1(:(:(:(C, x), y), z), u) -> :1(x, y)

The TRS R consists of the following rules:

   :(:(:(:(C, x), y), z), u) -> :(:(x, z), :(:(:(x, y), z), u))

The set Q consists of the following terms:

   :(:(:(:(C, x0), x1), x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   :1(:(:(:(C, x), y), z), u) -> :1(x, z)
   :1(:(:(:(C, x), y), z), u) -> :1(:(x, z), :(:(:(x, y), z), u))
   :1(:(:(:(C, x), y), z), u) -> :1(:(:(x, y), z), u)
   :1(:(:(:(C, x), y), z), u) -> :1(:(x, y), z)
   :1(:(:(:(C, x), y), z), u) -> :1(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
:1(x1, x2)  =  :1(x1)

:(x1, x2)  =  :(x1, x2)

C  =  C


Recursive path order with status [RPO].
Quasi-Precedence: C > :_2 > :1_1

Status: :1_1: multiset status
:_2: [1,2]
C: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   :(:(:(:(C, x), y), z), u) -> :(:(x, z), :(:(:(x, y), z), u))


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   :(:(:(:(C, x), y), z), u) -> :(:(x, z), :(:(:(x, y), z), u))

The set Q consists of the following terms:

   :(:(:(:(C, x0), x1), x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x)), y)), z)), u) -> app(app(:, app(app(:, x), z)), app(app(:, app(app(:, app(app(:, x), y)), z)), u))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x0)), x1)), x2)), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

R is empty.
The set Q consists of the following terms:

   app(app(:, app(app(:, app(app(:, app(app(:, C), x0)), x1)), x2)), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(22)
YES
