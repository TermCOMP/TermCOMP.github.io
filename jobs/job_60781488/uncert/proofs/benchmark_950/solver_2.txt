NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/uVMdM.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 31 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) NonTerminationLoopProof [COMPLETE, 0 ms]
        (18) NO
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) NonTerminationLoopProof [COMPLETE, 0 ms]
        (23) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   head(cons(X, XS)) -> X
   tail(cons(X, XS)) -> activate(XS)
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 2*x_1
   POL(incr(x_1)) = 2*x_1
   POL(n__incr(x_1)) = x_1
   POL(nats) = 0
   POL(odds) = 0
   POL(pairs) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   tail(cons(X, XS)) -> activate(XS)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   head(cons(X, XS)) -> X
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 1 + 2*x_1
   POL(incr(x_1)) = 2*x_1
   POL(n__incr(x_1)) = x_1
   POL(nats) = 0
   POL(odds) = 0
   POL(pairs) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   head(cons(X, XS)) -> X




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NATS -> NATS
   PAIRS -> ODDS
   ODDS -> INCR(pairs)
   ODDS -> PAIRS
   INCR(cons(X, XS)) -> ACTIVATE(XS)
   ACTIVATE(n__incr(X)) -> INCR(X)

The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 1 less node.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__incr(X)) -> INCR(X)
   INCR(cons(X, XS)) -> ACTIVATE(XS)

The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__incr(X)) -> INCR(X)
   INCR(cons(X, XS)) -> ACTIVATE(XS)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INCR(cons(X, XS)) -> ACTIVATE(XS)
The graph contains the following edges 1 > 1


*ACTIVATE(n__incr(X)) -> INCR(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ODDS -> PAIRS
   PAIRS -> ODDS

The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ODDS -> PAIRS
   PAIRS -> ODDS

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = PAIRS evaluates to  t =PAIRS

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

PAIRS -> ODDS
with rule PAIRS -> ODDS at position [] and matcher [ ]

ODDS -> PAIRS
with rule ODDS -> PAIRS

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(18)
NO

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NATS -> NATS

The TRS R consists of the following rules:

   nats -> cons(0, n__incr(nats))
   pairs -> cons(0, n__incr(odds))
   odds -> incr(pairs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   activate(n__incr(X)) -> incr(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NATS -> NATS

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = NATS evaluates to  t =NATS

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from NATS to NATS.




----------------------------------------

(23)
NO
