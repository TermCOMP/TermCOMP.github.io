YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/83F4m.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) ATransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPOrderProof [EQUIVALENT, 1 ms]
        (33) QDP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES
    (36) QDP
        (37) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (38) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, x)), app(s, y)) -> APP(app(le, x), y)
   APP(app(le, app(s, x)), app(s, y)) -> APP(le, x)
   APP(app(minus, x), app(s, y)) -> APP(pred, app(app(minus, x), y))
   APP(app(minus, x), app(s, y)) -> APP(app(minus, x), y)
   APP(app(gcd, app(s, x)), app(s, y)) -> APP(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   APP(app(gcd, app(s, x)), app(s, y)) -> APP(app(if_gcd, app(app(le, y), x)), app(s, x))
   APP(app(gcd, app(s, x)), app(s, y)) -> APP(if_gcd, app(app(le, y), x))
   APP(app(gcd, app(s, x)), app(s, y)) -> APP(app(le, y), x)
   APP(app(gcd, app(s, x)), app(s, y)) -> APP(le, y)
   APP(app(app(if_gcd, true), app(s, x)), app(s, y)) -> APP(app(gcd, app(app(minus, x), y)), app(s, y))
   APP(app(app(if_gcd, true), app(s, x)), app(s, y)) -> APP(gcd, app(app(minus, x), y))
   APP(app(app(if_gcd, true), app(s, x)), app(s, y)) -> APP(app(minus, x), y)
   APP(app(app(if_gcd, true), app(s, x)), app(s, y)) -> APP(minus, x)
   APP(app(app(if_gcd, false), app(s, x)), app(s, y)) -> APP(app(gcd, app(app(minus, y), x)), app(s, x))
   APP(app(app(if_gcd, false), app(s, x)), app(s, y)) -> APP(gcd, app(app(minus, y), x))
   APP(app(app(if_gcd, false), app(s, x)), app(s, y)) -> APP(app(minus, y), x)
   APP(app(app(if_gcd, false), app(s, x)), app(s, y)) -> APP(minus, y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 21 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, x), app(s, y)) -> APP(app(minus, x), y)

The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, x), app(s, y)) -> APP(app(minus, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus1(x, s(y)) -> minus1(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if_gcd(true, s(x0), s(x1))
   if_gcd(false, s(x0), s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if_gcd(true, s(x0), s(x1))
   if_gcd(false, s(x0), s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus1(x, s(y)) -> minus1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*minus1(x, s(y)) -> minus1(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, x)), app(s, y)) -> APP(app(le, x), y)

The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, x)), app(s, y)) -> APP(app(le, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(x), s(y)) -> le1(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if_gcd(true, s(x0), s(x1))
   if_gcd(false, s(x0), s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if_gcd(true, s(x0), s(x1))
   if_gcd(false, s(x0), s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(x), s(y)) -> le1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*le1(s(x), s(y)) -> le1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(gcd, app(s, x)), app(s, y)) -> APP(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   APP(app(app(if_gcd, true), app(s, x)), app(s, y)) -> APP(app(gcd, app(app(minus, x), y)), app(s, y))
   APP(app(app(if_gcd, false), app(s, x)), app(s, y)) -> APP(app(gcd, app(app(minus, y), x)), app(s, x))

The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(gcd, app(s, x)), app(s, y)) -> APP(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   APP(app(app(if_gcd, true), app(s, x)), app(s, y)) -> APP(app(gcd, app(app(minus, x), y)), app(s, y))
   APP(app(app(if_gcd, false), app(s, x)), app(s, y)) -> APP(app(gcd, app(app(minus, y), x)), app(s, x))

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(pred, app(s, x)) -> x
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   gcd1(s(x), s(y)) -> if_gcd1(le(y, x), s(x), s(y))
   if_gcd1(true, s(x), s(y)) -> gcd1(minus(x, y), s(y))
   if_gcd1(false, s(x), s(y)) -> gcd1(minus(y, x), s(x))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(x, s(y)) -> pred(minus(x, y))
   pred(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if_gcd(true, s(x0), s(x1))
   if_gcd(false, s(x0), s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if_gcd(true, s(x0), s(x1))
   if_gcd(false, s(x0), s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   gcd1(s(x), s(y)) -> if_gcd1(le(y, x), s(x), s(y))
   if_gcd1(true, s(x), s(y)) -> gcd1(minus(x, y), s(y))
   if_gcd1(false, s(x), s(y)) -> gcd1(minus(y, x), s(x))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(x, s(y)) -> pred(minus(x, y))
   pred(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   gcd1(s(x), s(y)) -> if_gcd1(le(y, x), s(x), s(y))
   if_gcd1(true, s(x), s(y)) -> gcd1(minus(x, y), s(y))
   if_gcd1(false, s(x), s(y)) -> gcd1(minus(y, x), s(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
gcd1(x1, x2)  =  gcd1(x1, x2)

s(x1)  =  s(x1)

if_gcd1(x1, x2, x3)  =  if_gcd1(x2, x3)

minus(x1, x2)  =  x1

pred(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=2
   dummyConstant=1
   gcd1_2=2
   if_gcd1_2=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(x, s(y)) -> pred(minus(x, y))
   pred(s(x)) -> x


----------------------------------------

(33)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(x, s(y)) -> pred(minus(x, y))
   pred(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   pred(s(x0))
   minus(x0, 0)
   minus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(pred, app(s, x)) -> x
   app(app(minus, x), 0) -> x
   app(app(minus, x), app(s, y)) -> app(pred, app(app(minus, x), y))
   app(app(gcd, 0), y) -> y
   app(app(gcd, app(s, x)), 0) -> app(s, x)
   app(app(gcd, app(s, x)), app(s, y)) -> app(app(app(if_gcd, app(app(le, y), x)), app(s, x)), app(s, y))
   app(app(app(if_gcd, true), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, x), y)), app(s, y))
   app(app(app(if_gcd, false), app(s, x)), app(s, y)) -> app(app(gcd, app(app(minus, y), x)), app(s, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(pred, app(s, x0))
   app(app(minus, x0), 0)
   app(app(minus, x0), app(s, x1))
   app(app(gcd, 0), x0)
   app(app(gcd, app(s, x0)), 0)
   app(app(gcd, app(s, x0)), app(s, x1))
   app(app(app(if_gcd, true), app(s, x0)), app(s, x1))
   app(app(app(if_gcd, false), app(s, x0)), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(38)
YES
