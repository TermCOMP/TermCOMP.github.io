YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y Z)
(RULES
activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
activate(nu95u95from(X)) -> from(activate(X))
activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
activate(nu95u95len(X)) -> len(activate(X))
activate(nu95u95s(X)) -> s(X)
activate(X) -> X
add(s(X),Y) -> s(nu95u95add(activate(X),Y))
add(num0,X) -> X
add(X1,X2) -> nu95u95add(X1,X2)
from(X) -> cons(X,nu95u95from(nu95u95s(X)))
from(X) -> nu95u95from(X)
fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
fst(num0,Z) -> nil
fst(X1,X2) -> nu95u95fst(X1,X2)
len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
len(nil) -> num0
len(X) -> nu95u95len(X)
s(X) -> nu95u95s(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95from(X)) -> FROM(activate(X))
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ACTIVATE(nu95u95s(X)) -> S(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> S(nu95u95add(activate(X),Y))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> S(nu95u95len(activate(Z)))
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95from(X)) -> FROM(activate(X))
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ACTIVATE(nu95u95s(X)) -> S(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> S(nu95u95add(activate(X),Y))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> S(nu95u95len(activate(Z)))
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 1
[len](X) = 2.X
[s](X) = X
[num0] = 2
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95from](X) = X + 2
[nu95u95fst](X1,X2) = 2.X1 + 2.X2 + 1
[nu95u95len](X) = 2.X
[nu95u95s](X) = X
[nil] = 2
[ACTIVATE](X) = 2.X
[ADD](X1,X2) = 2.X1 + 2.X2 + 2
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2
[LEN](X) = 2.X
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2
[len](X) = 2.X + 2
[s](X) = X
[num0] = 2
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95from](X) = 2.X + 2
[nu95u95fst](X1,X2) = 2.X1 + 2.X2
[nu95u95len](X) = 2.X + 2
[nu95u95s](X) = X
[nil] = 0
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 2.X1 + 2.X2 + 2
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2 + 2
[LEN](X) = 2.X + 2
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(activate(X1),activate(X2))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = X1 + 2.X2 + 2
[from](X) = X
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X + 1
[s](X) = X
[num0] = 1
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = X1 + 2.X2 + 2
[nu95u95from](X) = X
[nu95u95fst](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95len](X) = 2.X + 1
[nu95u95s](X) = X
[nil] = 1
[ACTIVATE](X) = 2.X
[ADD](X1,X2) = 2.X1 + 2.X2 + 2
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2
[LEN](X) = 2.X + 1
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[from](X) = 2.X + 1
[fst](X1,X2) = X1 + 2.X2 + 2
[len](X) = 2.X + 1
[s](X) = X
[num0] = 0
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95from](X) = 2.X + 1
[nu95u95fst](X1,X2) = X1 + 2.X2 + 2
[nu95u95len](X) = 2.X + 1
[nu95u95s](X) = X
[nil] = 2
[ACTIVATE](X) = 2.X
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2
[LEN](X) = 2.X + 2
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = 2.X1 + 2.X2
[from](X) = 2.X + 1
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X + 1
[s](X) = X
[num0] = 1
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X1 + 2.X2
[nu95u95from](X) = 2.X + 1
[nu95u95fst](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95len](X) = 2.X + 1
[nu95u95s](X) = X
[nil] = 2
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2 + 2
[LEN](X) = 2.X + 2
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = 2.X1 + X2 + 2
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + X2 + 2
[len](X) = 2.X
[s](X) = X
[num0] = 2
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X1 + X2 + 2
[nu95u95from](X) = 2.X + 2
[nu95u95fst](X1,X2) = 2.X1 + X2 + 2
[nu95u95len](X) = 2.X
[nu95u95s](X) = X
[nil] = 1
[ACTIVATE](X) = 2.X
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2
[LEN](X) = 2.X
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(activate(X1),activate(X2))
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = X
[add](X1,X2) = 2.X2 + 2
[from](X) = 2.X + 1
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X + 2
[s](X) = X
[num0] = 2
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X2 + 2
[nu95u95from](X) = 2.X + 1
[nu95u95fst](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95len](X) = 2.X + 2
[nu95u95s](X) = X
[nil] = 2
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2 + 2
[LEN](X) = 2.X + 2
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95len(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = 2.X + 1
[add](X1,X2) = X1 + X2 + 1
[from](X) = 2
[fst](X1,X2) = 2
[len](X) = 2.X + 2
[s](X) = 2
[num0] = 2
[cons](X1,X2) = X2 + 1
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = X1 + X2 + 1
[nu95u95from](X) = 1
[nu95u95fst](X1,X2) = 1
[nu95u95len](X) = 2.X + 2
[nu95u95s](X) = 2
[nil] = 1
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 2.X + 2
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95len(X)) -> LEN(activate(X))
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = 2.X + 1
[add](X1,X2) = X1 + 2.X2 + 2
[from](X) = X
[fst](X1,X2) = 2
[len](X) = 2.X + 2
[s](X) = 1
[num0] = 1
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = X1 + 2.X2 + 2
[nu95u95from](X) = X
[nu95u95fst](X1,X2) = 1
[nu95u95len](X) = 2.X + 2
[nu95u95s](X) = 0
[nil] = 2
[ACTIVATE](X) = 2.X
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 2.X + 1
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(activate(X1),activate(X2))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95fst(X1,X2)) -> fst(activate(X1),activate(X2))
 activate(nu95u95len(X)) -> len(activate(X))
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(num0,X) -> X
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(num0,Z) -> nil
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
