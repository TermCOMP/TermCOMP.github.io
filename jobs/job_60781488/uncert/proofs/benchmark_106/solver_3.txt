YES

Problem 1: 

(VAR vu95NonEmpty f x xs)
(RULES
app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
app(app(map,f),nil) -> nil
app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(app(map,app(treemap,f)),xs)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(node,app(f,x))
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(f,x)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(app(map,app(treemap,f)),xs)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(node,app(f,x))
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(f,x)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(app(map,app(treemap,f)),xs)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(f,x)
->->-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))

Problem 1: 

Subterm Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(app(map,app(treemap,f)),xs)
 APP(app(treemap,f),app(app(node,x),xs)) -> APP(f,x)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
->Projection:
 pi(APP) = 2

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(treemap,f),app(app(node,x),xs)) -> app(app(node,app(f,x)),app(app(map,app(treemap,f)),xs))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
