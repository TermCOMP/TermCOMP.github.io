YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hrCXi.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   *(0, x) -> 0
   *(x, 0) -> 0
   *(O(x), y) -> O(*(x, y))
   *(I(x), y) -> +(O(*(x, y)), y)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), O(y)) -> O^1(+(x, y))
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> O^1(+(+(x, y), I(0)))
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)
   *^1(O(x), y) -> O^1(*(x, y))
   *^1(O(x), y) -> *^1(x, y)
   *^1(I(x), y) -> +^1(O(*(x, y)), y)
   *^1(I(x), y) -> O^1(*(x, y))
   *^1(I(x), y) -> *^1(x, y)
   -^1(O(x), O(y)) -> O^1(-(x, y))
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> O^1(-(x, y))
   -^1(I(x), I(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   *(0, x) -> 0
   *(x, 0) -> 0
   *(O(x), y) -> O(*(x, y))
   *(I(x), y) -> +(O(*(x, y)), y)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   *(0, x) -> 0
   *(x, 0) -> 0
   *(O(x), y) -> O(*(x, y))
   *(I(x), y) -> +(O(*(x, y)), y)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   O(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> -^1(x, y)

Strictly oriented rules of the TRS R:

   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   O(0) -> 0

Used ordering: Knuth-Bendix order [KBO] with precedence:-^1_2 > 0 > -_2 > 1 > O_1 > I_1

and weight map:

   0=1
   1=2
   O_1=5
   I_1=3
   -_2=0
   -^1_2=0

The variable weight is 1

----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   *(0, x) -> 0
   *(x, 0) -> 0
   *(O(x), y) -> O(*(x, y))
   *(I(x), y) -> +(O(*(x, y)), y)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)

The TRS R consists of the following rules:

   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   O(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)

Strictly oriented rules of the TRS R:

   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   O(0) -> 0

Used ordering: Knuth-Bendix order [KBO] with precedence:0 > +^1_2 > +_2 > I_1 > O_1

and weight map:

   0=2
   O_1=1
   I_1=3
   +_2=0
   +^1_2=0

The variable weight is 1

----------------------------------------

(16)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(I(x), y) -> *^1(x, y)
   *^1(O(x), y) -> *^1(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   *(0, x) -> 0
   *(x, 0) -> 0
   *(O(x), y) -> O(*(x, y))
   *(I(x), y) -> +(O(*(x, y)), y)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(I(x), y) -> *^1(x, y)
   *^1(O(x), y) -> *^1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**^1(I(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(O(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(23)
YES
