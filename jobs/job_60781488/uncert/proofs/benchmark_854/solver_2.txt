NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/yXWIA.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) TransformationProof [EQUIVALENT, 0 ms]
(8) QDP
(9) TransformationProof [EQUIVALENT, 0 ms]
(10) QDP
(11) NonTerminationLoopProof [COMPLETE, 0 ms]
(12) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cons(x, cons(y, z)) -> big
   inf(x) -> cons(x, inf(s(x)))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(x) -> CONS(x, inf(s(x)))
   INF(x) -> INF(s(x))

The TRS R consists of the following rules:

   cons(x, cons(y, z)) -> big
   inf(x) -> cons(x, inf(s(x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(x) -> INF(s(x))

The TRS R consists of the following rules:

   cons(x, cons(y, z)) -> big
   inf(x) -> cons(x, inf(s(x)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(x) -> INF(s(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule INF(x) -> INF(s(x)) we obtained the following new rules [LPAR04]:

   (INF(s(z0)) -> INF(s(s(z0))),INF(s(z0)) -> INF(s(s(z0))))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(s(z0)) -> INF(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule INF(s(z0)) -> INF(s(s(z0))) we obtained the following new rules [LPAR04]:

   (INF(s(s(z0))) -> INF(s(s(s(z0)))),INF(s(s(z0))) -> INF(s(s(s(z0)))))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(s(s(z0))) -> INF(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = INF(s(s(z0))) evaluates to  t =INF(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from INF(s(s(z0))) to INF(s(s(s(z0)))).




----------------------------------------

(12)
NO
