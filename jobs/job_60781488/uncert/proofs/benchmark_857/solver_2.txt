NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/rSbi8.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 9 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) QDP
(11) UsableRulesProof [EQUIVALENT, 0 ms]
(12) QDP
(13) QReductionProof [EQUIVALENT, 0 ms]
(14) QDP
(15) MNOCProof [EQUIVALENT, 0 ms]
(16) QDP
(17) NonTerminationLoopProof [COMPLETE, 0 ms]
(18) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x) -> g(f(x))
   g(f(x)) -> x
   g(x) -> a

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x) -> f(g(x))
   f(g(x)) -> x
   g(x) -> a'(x)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a'(x_1)) = x_1
   POL(f(x_1)) = 1 + x_1
   POL(g(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f(g(x)) -> x




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x) -> f(g(x))
   g(x) -> a'(x)

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   g(x) -> a'(x)

The TRS R 2 is 
   f(x) -> f(g(x))

The signature Sigma is {f_1}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x) -> f(g(x))
   g(x) -> a'(x)

The set Q consists of the following terms:

   f(x0)
   g(x0)


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(g(x))
   F(x) -> G(x)

The TRS R consists of the following rules:

   f(x) -> f(g(x))
   g(x) -> a'(x)

The set Q consists of the following terms:

   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(g(x))

The TRS R consists of the following rules:

   f(x) -> f(g(x))
   g(x) -> a'(x)

The set Q consists of the following terms:

   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(g(x))

The TRS R consists of the following rules:

   g(x) -> a'(x)

The set Q consists of the following terms:

   f(x0)
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0)


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(g(x))

The TRS R consists of the following rules:

   g(x) -> a'(x)

The set Q consists of the following terms:

   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x) -> F(g(x))

The TRS R consists of the following rules:

   g(x) -> a'(x)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F(x) evaluates to  t =F(g(x))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / g(x)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F(x) to F(g(x)).




----------------------------------------

(18)
NO
