YES

Problem 1: 

(VAR vu95NonEmpty l x)
(RULES
conv(x) -> conviter(x,cons(num0,nil))
conviter(x,l) -> if(zero(x),x,l)
half(num0) -> num0
half(s(num0)) -> num0
half(s(s(x))) -> s(half(x))
if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
if(ftrue,x,l) -> l
lastbit(num0) -> num0
lastbit(s(num0)) -> s(num0)
lastbit(s(s(x))) -> lastbit(x)
zero(num0) -> ftrue
zero(s(x)) -> ffalse
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 CONV(x) -> CONVITER(x,cons(num0,nil))
 CONVITER(x,l) -> IF(zero(x),x,l)
 CONVITER(x,l) -> ZERO(x)
 HALF(s(s(x))) -> HALF(x)
 IF(ffalse,x,l) -> CONVITER(half(x),cons(lastbit(x),l))
 IF(ffalse,x,l) -> HALF(x)
 IF(ffalse,x,l) -> LASTBIT(x)
 LASTBIT(s(s(x))) -> LASTBIT(x)
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse

Problem 1: 

SCC Processor:
-> Pairs:
 CONV(x) -> CONVITER(x,cons(num0,nil))
 CONVITER(x,l) -> IF(zero(x),x,l)
 CONVITER(x,l) -> ZERO(x)
 HALF(s(s(x))) -> HALF(x)
 IF(ffalse,x,l) -> CONVITER(half(x),cons(lastbit(x),l))
 IF(ffalse,x,l) -> HALF(x)
 IF(ffalse,x,l) -> LASTBIT(x)
 LASTBIT(s(s(x))) -> LASTBIT(x)
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LASTBIT(s(s(x))) -> LASTBIT(x)
->->-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->->Cycle:
->->-> Pairs:
 HALF(s(s(x))) -> HALF(x)
->->-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->->Cycle:
->->-> Pairs:
 CONVITER(x,l) -> IF(zero(x),x,l)
 IF(ffalse,x,l) -> CONVITER(half(x),cons(lastbit(x),l))
->->-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LASTBIT(s(s(x))) -> LASTBIT(x)
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Projection:
 pi(LASTBIT) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Projection:
 pi(HALF) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 CONVITER(x,l) -> IF(zero(x),x,l)
 IF(ffalse,x,l) -> CONVITER(half(x),cons(lastbit(x),l))
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
-> Usable rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[conv](X) = 0
[conviter](X1,X2) = 0
[half](X) = 1/2.X
[if](X1,X2,X3) = 0
[lastbit](X) = 1
[zero](X) = 1/2.X + 1/2
[num0] = 0
[cons](X1,X2) = 1/2.X1
[fSNonEmpty] = 0
[ffalse] = 1
[nil] = 0
[s](X) = 2.X + 1
[ftrue] = 0
[CONV](X) = 0
[CONVITER](X1,X2) = 2.X1 + X2 + 2
[HALF](X) = 0
[IF](X1,X2,X3) = 2.X1 + X2 + X3 + 1/2
[LASTBIT](X) = 0
[ZERO](X) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 IF(ffalse,x,l) -> CONVITER(half(x),cons(lastbit(x),l))
-> Rules:
 conv(x) -> conviter(x,cons(num0,nil))
 conviter(x,l) -> if(zero(x),x,l)
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(ffalse,x,l) -> conviter(half(x),cons(lastbit(x),l))
 if(ftrue,x,l) -> l
 lastbit(num0) -> num0
 lastbit(s(num0)) -> s(num0)
 lastbit(s(s(x))) -> lastbit(x)
 zero(num0) -> ftrue
 zero(s(x)) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
