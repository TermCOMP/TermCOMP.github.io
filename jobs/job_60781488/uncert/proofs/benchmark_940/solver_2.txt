YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2Weem.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) QDPOrderProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) DependencyGraphProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   first(0, Z) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   sel(0, cons(X, Z)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, activate(Z))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   SEL(s(X), cons(Y, Z)) -> SEL(X, activate(Z))
   SEL(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__from(X)) -> FROM(activate(X))
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   first(0, Z) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   sel(0, cons(X, Z)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, activate(Z))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   first(0, Z) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   sel(0, cons(X, Z)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, activate(Z))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVATE(x1)  =  x1

n__from(x1)  =  x1

n__s(x1)  =  x1

n__first(x1, x2)  =  n__first(x1, x2)

FIRST(x1, x2)  =  x2

activate(x1)  =  activate(x1)

cons(x1, x2)  =  x2

from(x1)  =  x1

s(x1)  =  x1

first(x1, x2)  =  first(x1, x2)

0  =  0

nil  =  nil


Knuth-Bendix order [KBO] with precedence:activate_1 > 0
activate_1 > first_2 > n__first_2
activate_1 > nil

and weight map:

   0=2
   first_2=2
   activate_1=0
   n__first_2=2
   nil=4

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   s(X) -> n__s(X)
   from(X) -> cons(X, n__from(n__s(X)))
   from(X) -> n__from(X)
   first(0, Z) -> nil
   first(X1, X2) -> n__first(X1, X2)


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   first(0, Z) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   sel(0, cons(X, Z)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, activate(Z))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   first(0, Z) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   sel(0, cons(X, Z)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, activate(Z))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*ACTIVATE(n__from(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(X), cons(Y, Z)) -> SEL(X, activate(Z))

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   first(0, Z) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   sel(0, cons(X, Z)) -> X
   sel(s(X), cons(Y, Z)) -> sel(X, activate(Z))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SEL(s(X), cons(Y, Z)) -> SEL(X, activate(Z))
The graph contains the following edges 1 > 1


----------------------------------------

(16)
YES
