YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GHL77.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 161 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 87 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 50 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 25 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 17 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QDP
        (14) UsableRulesProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (37) YES
    (38) QDP
        (39) UsableRulesProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (42) YES
    (43) QDP
        (44) UsableRulesProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (47) YES
    (48) QDP
        (49) UsableRulesProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (52) YES
    (53) QDP
        (54) UsableRulesProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (57) YES
    (58) QDP
        (59) UsableRulesProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (62) YES
    (63) QDP
        (64) UsableRulesProof [EQUIVALENT, 0 ms]
        (65) QDP
        (66) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (67) YES
    (68) QDP
        (69) UsableRulesProof [EQUIVALENT, 0 ms]
        (70) QDP
        (71) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (72) YES
    (73) QDP
        (74) UsableRulesProof [EQUIVALENT, 0 ms]
        (75) QDP
        (76) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (77) YES
    (78) QDP
        (79) UsableRulesProof [EQUIVALENT, 0 ms]
        (80) QDP
        (81) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (82) YES
    (83) QDP
        (84) UsableRulesProof [EQUIVALENT, 0 ms]
        (85) QDP
        (86) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (87) YES
    (88) QDP
        (89) MRRProof [EQUIVALENT, 68 ms]
        (90) QDP
        (91) MRRProof [EQUIVALENT, 82 ms]
        (92) QDP
        (93) MRRProof [EQUIVALENT, 44 ms]
        (94) QDP
        (95) MRRProof [EQUIVALENT, 40 ms]
        (96) QDP
        (97) QDPOrderProof [EQUIVALENT, 138 ms]
        (98) QDP
        (99) QDPOrderProof [EQUIVALENT, 169 ms]
        (100) QDP
        (101) QDPOrderProof [EQUIVALENT, 110 ms]
        (102) QDP
        (103) DependencyGraphProof [EQUIVALENT, 0 ms]
        (104) QDP
        (105) QDPOrderProof [EQUIVALENT, 131 ms]
        (106) QDP
        (107) QDPOrderProof [EQUIVALENT, 246 ms]
        (108) QDP
        (109) QDPOrderProof [EQUIVALENT, 149 ms]
        (110) QDP
        (111) QDPOrderProof [EQUIVALENT, 154 ms]
        (112) QDP
        (113) QDPOrderProof [EQUIVALENT, 89 ms]
        (114) QDP
        (115) QDPOrderProof [EQUIVALENT, 114 ms]
        (116) QDP
        (117) QDPOrderProof [EQUIVALENT, 69 ms]
        (118) QDP
        (119) QDPOrderProof [EQUIVALENT, 74 ms]
        (120) QDP
        (121) QDPOrderProof [EQUIVALENT, 104 ms]
        (122) QDP
        (123) QDPOrderProof [EQUIVALENT, 107 ms]
        (124) QDP
        (125) QDPOrderProof [EQUIVALENT, 220 ms]
        (126) QDP
        (127) QDPOrderProof [EQUIVALENT, 23 ms]
        (128) QDP
        (129) QDPOrderProof [EQUIVALENT, 55 ms]
        (130) QDP
        (131) QDPOrderProof [EQUIVALENT, 74 ms]
        (132) QDP
        (133) QDPOrderProof [EQUIVALENT, 25 ms]
        (134) QDP
        (135) QDPOrderProof [EQUIVALENT, 0 ms]
        (136) QDP
        (137) DependencyGraphProof [EQUIVALENT, 0 ms]
        (138) QDP
        (139) UsableRulesProof [EQUIVALENT, 0 ms]
        (140) QDP
        (141) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (142) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 1 + 2*x_1
   POL(isNatList(x_1)) = 2*x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 1 + x_1
   POL(U41(x_1, x_2)) = x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(U31(tt)) -> mark(tt)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = 2*x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1)) = 1 + x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = x_1 + 2*x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   active(U11(tt)) -> mark(tt)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.

----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(zeros) -> CONS(0, zeros)
   ACTIVE(U21(tt)) -> MARK(tt)
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U41(tt, V2)) -> U42^1(isNatIList(V2))
   ACTIVE(U41(tt, V2)) -> ISNATILIST(V2)
   ACTIVE(U42(tt)) -> MARK(tt)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U51(tt, V2)) -> U52^1(isNatList(V2))
   ACTIVE(U51(tt, V2)) -> ISNATLIST(V2)
   ACTIVE(U52(tt)) -> MARK(tt)
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   ACTIVE(U61(tt, L, N)) -> U62^1(isNat(N), L)
   ACTIVE(U61(tt, L, N)) -> ISNAT(N)
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   ACTIVE(U62(tt, L)) -> S(length(L))
   ACTIVE(U62(tt, L)) -> LENGTH(L)
   ACTIVE(isNat(0)) -> MARK(tt)
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(s(V1))) -> U21^1(isNat(V1))
   ACTIVE(isNat(s(V1))) -> ISNAT(V1)
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatIList(cons(V1, V2))) -> U41^1(isNat(V1), V2)
   ACTIVE(isNatIList(cons(V1, V2))) -> ISNAT(V1)
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> U51^1(isNat(V1), V2)
   ACTIVE(isNatList(cons(V1, V2))) -> ISNAT(V1)
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   ACTIVE(length(cons(N, L))) -> U61^1(isNatList(L), L, N)
   ACTIVE(length(cons(N, L))) -> ISNATLIST(L)
   MARK(zeros) -> ACTIVE(zeros)
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> CONS(mark(X1), X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(0) -> ACTIVE(0)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U11(X)) -> U11^1(mark(X))
   MARK(U11(X)) -> MARK(X)
   MARK(tt) -> ACTIVE(tt)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> U21^1(mark(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U31(X)) -> U31^1(mark(X))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> U41^1(mark(X1), X2)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   MARK(U42(X)) -> U42^1(mark(X))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> U51^1(mark(X1), X2)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> U52^1(mark(X))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> U61^1(mark(X1), X2, X3)
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(U62(X1, X2)) -> U62^1(mark(X1), X2)
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(nil) -> ACTIVE(nil)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   U11^1(mark(X)) -> U11^1(X)
   U11^1(active(X)) -> U11^1(X)
   U21^1(mark(X)) -> U21^1(X)
   U21^1(active(X)) -> U21^1(X)
   U31^1(mark(X)) -> U31^1(X)
   U31^1(active(X)) -> U31^1(X)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)
   U42^1(mark(X)) -> U42^1(X)
   U42^1(active(X)) -> U42^1(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)
   ISNATILIST(active(X)) -> ISNATILIST(X)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)
   U52^1(mark(X)) -> U52^1(X)
   U52^1(active(X)) -> U52^1(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)
   ISNATLIST(active(X)) -> ISNATLIST(X)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)
   ISNAT(mark(X)) -> ISNAT(X)
   ISNAT(active(X)) -> ISNAT(X)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   LENGTH(mark(X)) -> LENGTH(X)
   LENGTH(active(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 16 SCCs with 36 less nodes.
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(active(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


*LENGTH(mark(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(active(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


*ISNAT(mark(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(X1, mark(X2)) -> U62^1(X1, X2)
   U62^1(mark(X1), X2) -> U62^1(X1, X2)
   U62^1(active(X1), X2) -> U62^1(X1, X2)
   U62^1(X1, active(X2)) -> U62^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U62^1(X1, mark(X2)) -> U62^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U62^1(mark(X1), X2) -> U62^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U62^1(active(X1), X2) -> U62^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U62^1(X1, active(X2)) -> U62^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
   U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
   U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
   U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U61^1(X1, mark(X2), X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U61^1(mark(X1), X2, X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U61^1(X1, X2, mark(X3)) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U61^1(active(X1), X2, X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U61^1(X1, active(X2), X3) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U61^1(X1, X2, active(X3)) -> U61^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(37)
YES

----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATLIST(active(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


*ISNATLIST(mark(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(42)
YES

----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U52^1(active(X)) -> U52^1(X)
The graph contains the following edges 1 > 1


*U52^1(mark(X)) -> U52^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U51^1(X1, mark(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U51^1(mark(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(active(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(X1, active(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(52)
YES

----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATILIST(active(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


*ISNATILIST(mark(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(57)
YES

----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U42^1(active(X)) -> U42^1(X)
The graph contains the following edges 1 > 1


*U42^1(mark(X)) -> U42^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(62)
YES

----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U41^1(X1, mark(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U41^1(mark(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(active(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(X1, active(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U31^1(active(X)) -> U31^1(X)
The graph contains the following edges 1 > 1


*U31^1(mark(X)) -> U31^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(72)
YES

----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U21^1(active(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


*U21^1(mark(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(77)
YES

----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U11^1(active(X)) -> U11^1(X)
The graph contains the following edges 1 > 1


*U11^1(mark(X)) -> U11^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(82)
YES

----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(84) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(86) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(87)
YES

----------------------------------------

(88)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(89) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U11(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 1 + x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 2*x_1 + x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1 + 2*x_2
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(91) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U31(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 2 + 2*x_1
   POL(U41(x_1, x_2)) = x_1 + 2*x_2
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_1 + x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U41(X1, X2)) -> MARK(X1)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = 2*x_1
   POL(U41(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2 + x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(94)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(95) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(U61(X1, X2, X3)) -> MARK(X1)
   MARK(U62(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1)) = 2*x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U42(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = x_1 + 2*x_2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + 2*x_3
   POL(U62(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U11_1(x_1) ) = max{0, -2}
POL( U21_1(x_1) ) = max{0, -2}
POL( U31_1(x_1) ) = 1
POL( U41_2(x_1, x_2) ) = 2
POL( U42_1(x_1) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U52_1(x_1) ) = 0
POL( U61_3(x_1, ..., x_3) ) = 2
POL( U62_2(x_1, x_2) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 0
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 0
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)


----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(99) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( MARK_1(x_1) ) = 1
POL( U42_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 1
POL( active_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U61_3(x_1, ..., x_3) ) = 1
POL( isNatList_1(x_1) ) = 1
POL( U41_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = 1
POL( U62_2(x_1, x_2) ) = 1
POL( length_1(x_1) ) = 1
POL( U21_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 1
POL( s_1(x_1) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( zeros ) = 1
POL( 0 ) = 0
POL( tt ) = 0
POL( U11_1(x_1) ) = 2
POL( U31_1(x_1) ) = 0
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(zeros) -> ACTIVE(zeros)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( active_1(x_1) ) = 2x_1
POL( mark_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = x_1 + 1
POL( U51_2(x_1, x_2) ) = 2x_1 + 1
POL( U61_3(x_1, ..., x_3) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( cons_2(x_1, x_2) ) = 2x_1 + 1
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 1
POL( U11_1(x_1) ) = x_1 + 1
POL( U31_1(x_1) ) = x_1 + 2
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)


----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U21(X)) -> MARK(X)
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(103) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(105) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2x_1 + 1
POL( U61_3(x_1, ..., x_3) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + 2
POL( active_1(x_1) ) = x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 1
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = x_1 + 2
POL( U52_1(x_1) ) = x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 2
POL( s_1(x_1) ) = 2x_1 + 1
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(107) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U51(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = x_1 + 2
POL( U61_3(x_1, ..., x_3) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( active_1(x_1) ) = x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 2
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = 2x_1
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = 2x_1
POL( nil ) = 1
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)


----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(109) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 0
POL( U61_3(x_1, ..., x_3) ) = 2x_1
POL( U62_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 0
POL( active_1(x_1) ) = x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 1
POL( U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 2
POL( U11_1(x_1) ) = 2
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1
POL( isNat_1(x_1) ) = x_1 + 2
POL( U31_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1 + 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U62(tt, L)) -> mark(s(length(L)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(U21(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(isNat(0)) -> mark(tt)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)


----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(111) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U21(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_3(x_1, ..., x_3) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = 2x_2 + 2
POL( active_1(x_1) ) = x_1
POL( zeros ) = 0
POL( 0 ) = 1
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = x_1 + 1
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)


----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(113) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(length(cons(N, L))) -> MARK(U61(isNatList(L), L, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = 1
POL( U61_3(x_1, ..., x_3) ) = 0
POL( U62_2(x_1, x_2) ) = 0
POL( mark_1(x_1) ) = 1
POL( cons_2(x_1, x_2) ) = 2
POL( active_1(x_1) ) = 0
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 1
POL( U52_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 2
POL( s_1(x_1) ) = 2x_1
POL( length_1(x_1) ) = max{0, 2x_1 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(115) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U61(X1, X2, X3)) -> ACTIVE(U61(mark(X1), X2, X3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 0
POL( U61_3(x_1, ..., x_3) ) = x_2 + 2x_3 + 2
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = x_1 + 1
POL( active_1(x_1) ) = 2x_1 + 2
POL( zeros ) = 2
POL( 0 ) = 1
POL( tt ) = 1
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, 2x_1 - 2}
POL( U52_1(x_1) ) = x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = max{0, x_1 - 2}
POL( s_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(116)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(117) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U61(tt, L, N)) -> MARK(U62(isNat(N), L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = 1
POL( mark_1(x_1) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 1
POL( U21_1(x_1) ) = max{0, 2x_1 - 2}
POL( U61_3(x_1, ..., x_3) ) = 2x_1 + x_2 + 2
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = max{0, x_1 - 2}
POL( s_1(x_1) ) = 0
POL( length_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)


----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(119) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNat(X)) -> ACTIVE(isNat(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1 + 2
POL( cons_2(x_1, x_2) ) = x_2 + 2
POL( active_1(x_1) ) = x_1
POL( zeros ) = 1
POL( 0 ) = 1
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, x_1 - 2}
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1 + 2
POL( U61_3(x_1, ..., x_3) ) = max{0, x_2 + 2x_3 - 2}
POL( isNat_1(x_1) ) = 2
POL( U31_1(x_1) ) = 1
POL( s_1(x_1) ) = x_1
POL( length_1(x_1) ) = max{0, -2}
POL( nil ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(120)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(121) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U62(X1, X2)) -> ACTIVE(U62(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 0
POL( U62_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2
POL( active_1(x_1) ) = 2x_1 + 1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, x_1 - 1}
POL( U61_3(x_1, ..., x_3) ) = 2x_1 + 2
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 0
POL( s_1(x_1) ) = 0
POL( length_1(x_1) ) = x_1 + 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(122)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(123) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U62(tt, L)) -> MARK(s(length(L)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = 1
POL( cons_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = 2
POL( isNatIList_1(x_1) ) = 1
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2
POL( U61_3(x_1, ..., x_3) ) = max{0, x_1 + x_2 - 2}
POL( U62_2(x_1, x_2) ) = 2x_1 + 2
POL( isNat_1(x_1) ) = 2x_1
POL( U31_1(x_1) ) = x_1 + 1
POL( s_1(x_1) ) = 2
POL( length_1(x_1) ) = 0
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(125) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2x_2 + 2
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = x_2 + 2
POL( active_1(x_1) ) = x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 2x_1 + 1
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, -2}
POL( U61_3(x_1, ..., x_3) ) = max{0, -2}
POL( U62_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(127) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2
POL( active_1(x_1) ) = 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, x_1 - 2}
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = 2
POL( U61_3(x_1, ..., x_3) ) = 2
POL( U62_2(x_1, x_2) ) = 2
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 2
POL( s_1(x_1) ) = 2
POL( length_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(129) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = x_2 + 2
POL( U51_2(x_1, x_2) ) = 0
POL( mark_1(x_1) ) = 2x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( active_1(x_1) ) = 2x_1
POL( zeros ) = 1
POL( 0 ) = 1
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 2
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, -2}
POL( U61_3(x_1, ..., x_3) ) = x_2 + 2x_3
POL( U62_2(x_1, x_2) ) = max{0, x_1 - 1}
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( length_1(x_1) ) = 2x_1 + 2
POL( nil ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(130)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(131) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( MARK_1(x_1) ) = max{0, -2}
POL( U42_1(x_1) ) = 2
POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U51_2(x_1, x_2) ) = 1
POL( active_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = 2
POL( isNatIList_1(x_1) ) = 0
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( U41_2(x_1, x_2) ) = 2
POL( tt ) = 0
POL( U11_1(x_1) ) = 2
POL( U21_1(x_1) ) = max{0, 2x_1 - 2}
POL( U61_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( U62_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( isNat_1(x_1) ) = 0
POL( U31_1(x_1) ) = 1
POL( s_1(x_1) ) = 0
POL( length_1(x_1) ) = 1
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(132)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(133) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

U42(x1)  =  x1

ACTIVE(x1)  =  x1

U51(x1, x2)  =  x2

U52(x1)  =  x1

isNatList(x1)  =  x1

cons(x1, x2)  =  cons(x2)

active(x1)  =  x1

mark(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(134)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(135) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

U42(x1)  =  x1

ACTIVE(x1)  =  x1

U51(x1, x2)  =  U51

U52(x1)  =  x1

isNatList(x1)  =  isNatList

active(x1)  =  x1

mark(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:U51 > isNatList

and weight map:

   isNatList=1
   U51=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)


----------------------------------------

(136)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(137) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U52(X)) -> MARK(X)
   MARK(U42(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U21(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, L, N)) -> mark(U62(isNat(N), L))
   active(U62(tt, L)) -> mark(s(length(L)))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(length(cons(N, L))) -> mark(U61(isNatList(L), L, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2, X3)) -> active(U61(mark(X1), X2, X3))
   mark(U62(X1, X2)) -> active(U62(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(nil) -> active(nil)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, mark(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, mark(X3)) -> U61(X1, X2, X3)
   U61(active(X1), X2, X3) -> U61(X1, X2, X3)
   U61(X1, active(X2), X3) -> U61(X1, X2, X3)
   U61(X1, X2, active(X3)) -> U61(X1, X2, X3)
   U62(mark(X1), X2) -> U62(X1, X2)
   U62(X1, mark(X2)) -> U62(X1, X2)
   U62(active(X1), X2) -> U62(X1, X2)
   U62(X1, active(X2)) -> U62(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(139) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(140)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U52(X)) -> MARK(X)
   MARK(U42(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(141) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U52(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U42(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(142)
YES
