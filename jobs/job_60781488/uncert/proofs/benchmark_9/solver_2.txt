YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ogX2x.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) PisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   DOUBLE(s(x)) -> DOUBLE(x)
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), y) -> PLUS(x, s(y))
   PLUS(s(x), y) -> PLUS(minus(x, y), double(y))
   PLUS(s(x), y) -> MINUS(x, y)
   PLUS(s(x), y) -> DOUBLE(y)
   PLUS(s(plus(x, y)), z) -> PLUS(plus(x, y), z)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOUBLE(s(x)) -> DOUBLE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, s(y))
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), y) -> PLUS(minus(x, y), double(y))
   PLUS(s(plus(x, y)), z) -> PLUS(plus(x, y), z)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), y) -> PLUS(x, s(y))
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), y) -> PLUS(minus(x, y), double(y))
   PLUS(s(plus(x, y)), z) -> PLUS(plus(x, y), z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
PLUS(x1, x2)  =  PLUS(x1)

s(x1)  =  s(x1)

minus(x1, x2)  =  x1

double(x1)  =  double(x1)

plus(x1, x2)  =  plus(x1, x2)

0  =  0


Recursive path order with status [RPO].
Quasi-Precedence: plus_2 > [double_1, 0] > [PLUS_1, s_1]

Status: PLUS_1: multiset status
s_1: multiset status
double_1: multiset status
plus_2: [1,2]
0: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))


----------------------------------------

(17)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> plus(x, s(y))
   plus(s(x), y) -> s(plus(minus(x, y), double(y)))
   plus(s(plus(x, y)), z) -> s(plus(plus(x, y), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(19)
YES
