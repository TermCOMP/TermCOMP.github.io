YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AdVaE.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 5 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) TRUE
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (36) YES
    (37) QDP
        (38) UsableRulesProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QReductionProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (43) YES
    (44) QDP
        (45) UsableRulesProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) QReductionProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) QDPOrderProof [EQUIVALENT, 25 ms]
        (50) QDP
        (51) UsableRulesProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QReductionProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (56) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)
   LE(s(x), s(y)) -> LE(x, y)
   APP(add(n, x), y) -> APP(x, y)
   MIN(add(n, add(m, x))) -> IF_MIN(le(n, m), add(n, add(m, x)))
   MIN(add(n, add(m, x))) -> LE(n, m)
   IF_MIN(true, add(n, add(m, x))) -> MIN(add(n, x))
   IF_MIN(false, add(n, add(m, x))) -> MIN(add(m, x))
   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   RM(n, add(m, x)) -> EQ(n, m)
   IF_RM(true, n, add(m, x)) -> RM(n, x)
   IF_RM(false, n, add(m, x)) -> RM(n, x)
   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   MINSORT(add(n, x), y) -> EQ(n, min(add(n, x)))
   MINSORT(add(n, x), y) -> MIN(add(n, x))
   IF_MINSORT(true, add(n, x), y) -> MINSORT(app(rm(n, x), y), nil)
   IF_MINSORT(true, add(n, x), y) -> APP(rm(n, x), y)
   IF_MINSORT(true, add(n, x), y) -> RM(n, x)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(add(n, x), y) -> APP(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(add(n, add(m, x))) -> IF_MIN(le(n, m), add(n, add(m, x)))
   IF_MIN(true, add(n, add(m, x))) -> MIN(add(n, x))
   IF_MIN(false, add(n, add(m, x))) -> MIN(add(m, x))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(add(n, add(m, x))) -> IF_MIN(le(n, m), add(n, add(m, x)))
   IF_MIN(true, add(n, add(m, x))) -> MIN(add(n, x))
   IF_MIN(false, add(n, add(m, x))) -> MIN(add(m, x))

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(add(n, add(m, x))) -> IF_MIN(le(n, m), add(n, add(m, x)))
   IF_MIN(true, add(n, add(m, x))) -> MIN(add(n, x))
   IF_MIN(false, add(n, add(m, x))) -> MIN(add(m, x))

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_MIN(true, add(n, add(m, x))) -> MIN(add(n, x))
   IF_MIN(false, add(n, add(m, x))) -> MIN(add(m, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MIN(x1)  =  x1

add(x1, x2)  =  add(x2)

IF_MIN(x1, x2)  =  x2


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   add_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(add(n, add(m, x))) -> IF_MIN(le(n, m), add(n, add(m, x)))

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(29)
TRUE

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   IF_RM(true, n, add(m, x)) -> RM(n, x)
   IF_RM(false, n, add(m, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   IF_RM(true, n, add(m, x)) -> RM(n, x)
   IF_RM(false, n, add(m, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
   IF_RM(true, n, add(m, x)) -> RM(n, x)
   IF_RM(false, n, add(m, x)) -> RM(n, x)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*RM(n, add(m, x)) -> IF_RM(eq(n, m), n, add(m, x))
The graph contains the following edges 1 >= 2, 2 >= 3


*IF_RM(true, n, add(m, x)) -> RM(n, x)
The graph contains the following edges 2 >= 1, 3 > 2


*IF_RM(false, n, add(m, x)) -> RM(n, x)
The graph contains the following edges 2 >= 1, 3 > 2


----------------------------------------

(43)
YES

----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINSORT(true, add(n, x), y) -> MINSORT(app(rm(n, x), y), nil)
   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))
   minsort(nil, nil) -> nil
   minsort(add(n, x), y) -> if_minsort(eq(n, min(add(n, x))), add(n, x), y)
   if_minsort(true, add(n, x), y) -> add(n, minsort(app(rm(n, x), y), nil))
   if_minsort(false, add(n, x), y) -> minsort(x, add(n, y))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINSORT(true, add(n, x), y) -> MINSORT(app(rm(n, x), y), nil)
   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))
   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minsort(nil, nil)
   minsort(add(x0, x1), x2)
   if_minsort(true, add(x0, x1), x2)
   if_minsort(false, add(x0, x1), x2)


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MINSORT(true, add(n, x), y) -> MINSORT(app(rm(n, x), y), nil)
   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_MINSORT(true, add(n, x), y) -> MINSORT(app(rm(n, x), y), nil)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( MINSORT_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( app_2(x_1, x_2) ) = x_1 + x_2
POL( rm_2(x_1, x_2) ) = x_2
POL( nil ) = 0
POL( add_2(x_1, x_2) ) = x_2 + 2
POL( if_rm_3(x_1, ..., x_3) ) = 2x_1 + x_3
POL( eq_2(x_1, x_2) ) = max{0, -2}
POL( true ) = 0
POL( IF_MINSORT_3(x_1, ..., x_3) ) = max{0, 2x_2 + 2x_3 - 2}
POL( min_1(x_1) ) = max{0, -2}
POL( if_min_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( le_2(x_1, x_2) ) = 0
POL( false ) = 0
POL( 0 ) = 0
POL( s_1(x_1) ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   rm(n, nil) -> nil
   rm(n, add(m, x)) -> if_rm(eq(n, m), n, add(m, x))
   if_rm(true, n, add(m, x)) -> rm(n, x)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   if_rm(false, n, add(m, x)) -> add(m, rm(n, x))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(nil, x0)
   app(add(x0, x1), x2)
   rm(x0, nil)
   rm(x0, add(x1, x2))
   if_rm(true, x0, add(x1, x2))
   if_rm(false, x0, add(x1, x2))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
   IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))

The TRS R consists of the following rules:

   min(add(n, nil)) -> n
   min(add(n, add(m, x))) -> if_min(le(n, m), add(n, add(m, x)))
   if_min(true, add(n, add(m, x))) -> min(add(n, x))
   if_min(false, add(n, add(m, x))) -> min(add(m, x))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(add(x0, nil))
   min(add(x0, add(x1, x2)))
   if_min(true, add(x0, add(x1, x2)))
   if_min(false, add(x0, add(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF_MINSORT(false, add(n, x), y) -> MINSORT(x, add(n, y))
The graph contains the following edges 2 > 1


*MINSORT(add(n, x), y) -> IF_MINSORT(eq(n, min(add(n, x))), add(n, x), y)
The graph contains the following edges 1 >= 2, 2 >= 3


----------------------------------------

(56)
YES
