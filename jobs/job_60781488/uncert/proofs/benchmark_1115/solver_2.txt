YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/px2DY.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [EQUIVALENT, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 24 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) CSRRRRProof [EQUIVALENT, 0 ms]
(10) CSR
(11) RisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(filter(cons(X, Y), 0, M)) -> mark(cons(0, filter(Y, M, M)))
   active(filter(cons(X, Y), s(N), M)) -> mark(cons(X, filter(Y, N, M)))
   active(sieve(cons(0, Y))) -> mark(cons(0, sieve(Y)))
   active(sieve(cons(s(N), Y))) -> mark(cons(s(N), sieve(filter(Y, N, N))))
   active(nats(N)) -> mark(cons(N, nats(s(N))))
   active(zprimes) -> mark(sieve(nats(s(s(0)))))
   active(filter(X1, X2, X3)) -> filter(active(X1), X2, X3)
   active(filter(X1, X2, X3)) -> filter(X1, active(X2), X3)
   active(filter(X1, X2, X3)) -> filter(X1, X2, active(X3))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(s(X)) -> s(active(X))
   active(sieve(X)) -> sieve(active(X))
   active(nats(X)) -> nats(active(X))
   filter(mark(X1), X2, X3) -> mark(filter(X1, X2, X3))
   filter(X1, mark(X2), X3) -> mark(filter(X1, X2, X3))
   filter(X1, X2, mark(X3)) -> mark(filter(X1, X2, X3))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   s(mark(X)) -> mark(s(X))
   sieve(mark(X)) -> mark(sieve(X))
   nats(mark(X)) -> mark(nats(X))
   proper(filter(X1, X2, X3)) -> filter(proper(X1), proper(X2), proper(X3))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(s(X)) -> s(proper(X))
   proper(sieve(X)) -> sieve(proper(X))
   proper(nats(X)) -> nats(proper(X))
   proper(zprimes) -> ok(zprimes)
   filter(ok(X1), ok(X2), ok(X3)) -> ok(filter(X1, X2, X3))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   s(ok(X)) -> ok(s(X))
   sieve(ok(X)) -> ok(sieve(X))
   nats(ok(X)) -> ok(nats(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.

----------------------------------------

(1) QTRSToCSRProof (EQUIVALENT)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(filter(cons(X, Y), 0, M)) -> mark(cons(0, filter(Y, M, M)))
   active(filter(cons(X, Y), s(N), M)) -> mark(cons(X, filter(Y, N, M)))
   active(sieve(cons(0, Y))) -> mark(cons(0, sieve(Y)))
   active(sieve(cons(s(N), Y))) -> mark(cons(s(N), sieve(filter(Y, N, N))))
   active(nats(N)) -> mark(cons(N, nats(s(N))))
   active(zprimes) -> mark(sieve(nats(s(s(0)))))
   active(filter(X1, X2, X3)) -> filter(active(X1), X2, X3)
   active(filter(X1, X2, X3)) -> filter(X1, active(X2), X3)
   active(filter(X1, X2, X3)) -> filter(X1, X2, active(X3))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(s(X)) -> s(active(X))
   active(sieve(X)) -> sieve(active(X))
   active(nats(X)) -> nats(active(X))
   filter(mark(X1), X2, X3) -> mark(filter(X1, X2, X3))
   filter(X1, mark(X2), X3) -> mark(filter(X1, X2, X3))
   filter(X1, X2, mark(X3)) -> mark(filter(X1, X2, X3))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   s(mark(X)) -> mark(s(X))
   sieve(mark(X)) -> mark(sieve(X))
   nats(mark(X)) -> mark(nats(X))
   proper(filter(X1, X2, X3)) -> filter(proper(X1), proper(X2), proper(X3))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(s(X)) -> s(proper(X))
   proper(sieve(X)) -> sieve(proper(X))
   proper(nats(X)) -> nats(proper(X))
   proper(zprimes) -> ok(zprimes)
   filter(ok(X1), ok(X2), ok(X3)) -> ok(filter(X1, X2, X3))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   s(ok(X)) -> ok(s(X))
   sieve(ok(X)) -> ok(sieve(X))
   nats(ok(X)) -> ok(nats(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.
Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

filter: {1, 2, 3}
cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set
The QTRS contained all rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is complete (and sound).
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   filter(cons(X, Y), s(N), M) -> cons(X, filter(Y, N, M))
   sieve(cons(0, Y)) -> cons(0, sieve(Y))
   sieve(cons(s(N), Y)) -> cons(s(N), sieve(filter(Y, N, N)))
   nats(N) -> cons(N, nats(s(N)))
   zprimes -> sieve(nats(s(s(0))))

The replacement map contains the following entries:

filter: {1, 2, 3}
cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   filter(cons(X, Y), s(N), M) -> cons(X, filter(Y, N, M))
   sieve(cons(0, Y)) -> cons(0, sieve(Y))
   sieve(cons(s(N), Y)) -> cons(s(N), sieve(filter(Y, N, N)))
   nats(N) -> cons(N, nats(s(N)))
   zprimes -> sieve(nats(s(s(0))))

The replacement map contains the following entries:

filter: {1, 2, 3}
cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(cons(x_1, x_2)) = x_1
   POL(filter(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(nats(x_1)) = x_1
   POL(s(x_1)) = x_1
   POL(sieve(x_1)) = 1 + x_1
   POL(zprimes) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   sieve(cons(0, Y)) -> cons(0, sieve(Y))
   sieve(cons(s(N), Y)) -> cons(s(N), sieve(filter(Y, N, N)))




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   filter(cons(X, Y), s(N), M) -> cons(X, filter(Y, N, M))
   nats(N) -> cons(N, nats(s(N)))
   zprimes -> sieve(nats(s(s(0))))

The replacement map contains the following entries:

filter: {1, 2, 3}
cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   filter(cons(X, Y), s(N), M) -> cons(X, filter(Y, N, M))
   nats(N) -> cons(N, nats(s(N)))
   zprimes -> sieve(nats(s(s(0))))

The replacement map contains the following entries:

filter: {1, 2, 3}
cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(cons(x_1, x_2)) = 1 + x_1
   POL(filter(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL(nats(x_1)) = 1 + x_1
   POL(s(x_1)) = x_1
   POL(sieve(x_1)) = x_1
   POL(zprimes) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   filter(cons(X, Y), s(N), M) -> cons(X, filter(Y, N, M))




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   nats(N) -> cons(N, nats(s(N)))
   zprimes -> sieve(nats(s(s(0))))

The replacement map contains the following entries:

cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   nats(N) -> cons(N, nats(s(N)))
   zprimes -> sieve(nats(s(s(0))))

The replacement map contains the following entries:

cons: {1}
0: empty set
s: {1}
sieve: {1}
nats: {1}
zprimes: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(cons(x_1, x_2)) = x_1
   POL(nats(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(sieve(x_1)) = 2*x_1
   POL(zprimes) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   zprimes -> sieve(nats(s(s(0))))




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   nats(N) -> cons(N, nats(s(N)))

The replacement map contains the following entries:

cons: {1}
s: {1}
nats: {1}

----------------------------------------

(9) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   nats(N) -> cons(N, nats(s(N)))

The replacement map contains the following entries:

cons: {1}
s: {1}
nats: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(cons(x_1, x_2)) = x_1
   POL(nats(x_1)) = 1 + 2*x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   nats(N) -> cons(N, nats(s(N)))




----------------------------------------

(10)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(11) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(12)
YES
