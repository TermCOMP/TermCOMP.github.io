NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ioq8c.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 17 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) NonTerminationLoopProof [COMPLETE, 0 ms]
(12) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(g(a)) -> f(s(g(b)))
   f(f(x)) -> b
   g(x) -> f(g(x))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a'(g(f(x))) -> b'(g(s(f(x))))
   f(f(x)) -> b'(x)
   g(x) -> g(f(x))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a'(x_1)) = 1 + x_1
   POL(b'(x_1)) = x_1
   POL(f(x_1)) = x_1
   POL(g(x_1)) = x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a'(g(f(x))) -> b'(g(s(f(x))))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(f(x)) -> b'(x)
   g(x) -> g(f(x))

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(f(x))
   G(x) -> F(x)

The TRS R consists of the following rules:

   f(f(x)) -> b'(x)
   g(x) -> g(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(f(x))

The TRS R consists of the following rules:

   f(f(x)) -> b'(x)
   g(x) -> g(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(x) -> G(f(x))

The TRS R consists of the following rules:

   f(f(x)) -> b'(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = G(x) evaluates to  t =G(f(x))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / f(x)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from G(x) to G(f(x)).




----------------------------------------

(12)
NO
