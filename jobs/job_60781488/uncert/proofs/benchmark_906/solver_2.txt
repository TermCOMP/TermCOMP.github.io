YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3KX2f.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 21 ms]
(6) QDP
(7) QDPOrderProof [EQUIVALENT, 14 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 16 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) UsableRulesProof [EQUIVALENT, 0 ms]
(14) QDP
(15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(true, X) -> ACTIVATE(X)
   IF(true, X, Y) -> ACTIVATE(X)
   IF(false, X, Y) -> ACTIVATE(Y)
   ADD(0, X) -> ACTIVATE(X)
   ADD(s(X), Y) -> S(n__add(activate(X), activate(Y)))
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   FROM(X) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(activate(X1), X2)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__from(X)) -> FROM(X)
   ACTIVATE(n__s(X)) -> S(X)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__add(X1, X2)) -> ADD(activate(X1), X2)
   ADD(0, X) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__from(X)) -> FROM(X)
   FROM(X) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ADD(0, X) -> ACTIVATE(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ACTIVATE(x_1)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__add(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[2A]] 	* 	x_2
>>>

   <<<
 POL(ADD(x_1, x_2)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2
>>>

   <<<
 POL(activate(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(n__first(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(FIRST(x_1, x_2)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(n__from(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(FROM(x_1)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(add(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[2A]] 	* 	x_2
>>>

   <<<
 POL(first(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(from(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(nil) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   add(0, X) -> activate(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   add(X1, X2) -> n__add(X1, X2)
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   s(X) -> n__s(X)


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__add(X1, X2)) -> ADD(activate(X1), X2)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__from(X)) -> FROM(X)
   FROM(X) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__from(X)) -> FROM(X)
   FROM(X) -> ACTIVATE(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = [2]
   POL(ACTIVATE(x_1)) = [1/4] + [2]x_1
   POL(ADD(x_1, x_2)) = [1/4] + [4]x_1 + [2]x_2
   POL(FIRST(x_1, x_2)) = [1/4] + [4]x_1 + [4]x_2
   POL(FROM(x_1)) = [1/2] + [2]x_1
   POL(activate(x_1)) = x_1
   POL(add(x_1, x_2)) = [2]x_1 + x_2
   POL(cons(x_1, x_2)) = [1/2]x_1 + [1/2]x_2
   POL(first(x_1, x_2)) = [2]x_1 + [2]x_2
   POL(from(x_1)) = [1/4] + x_1
   POL(n__add(x_1, x_2)) = [2]x_1 + x_2
   POL(n__first(x_1, x_2)) = [2]x_1 + [2]x_2
   POL(n__from(x_1)) = [1/4] + x_1
   POL(n__s(x_1)) = [1/2]x_1
   POL(nil) = [1/4]
   POL(s(x_1)) = [1/2]x_1
The value of delta used in the strict ordering is 1/4.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   add(0, X) -> activate(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   add(X1, X2) -> n__add(X1, X2)
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   s(X) -> n__s(X)


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__add(X1, X2)) -> ADD(activate(X1), X2)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = [1/2]
   POL(ACTIVATE(x_1)) = [1/4]x_1
   POL(ADD(x_1, x_2)) = [1/2]x_1 + [1/4]x_2
   POL(FIRST(x_1, x_2)) = [1/2]x_1 + [1/2]x_2
   POL(activate(x_1)) = x_1
   POL(add(x_1, x_2)) = [2]x_1 + x_2
   POL(cons(x_1, x_2)) = [1/2]x_1 + [1/2]x_2
   POL(first(x_1, x_2)) = [2]x_1 + [4]x_2
   POL(from(x_1)) = [1/2] + [2]x_1
   POL(n__add(x_1, x_2)) = [2]x_1 + x_2
   POL(n__first(x_1, x_2)) = [2]x_1 + [4]x_2
   POL(n__from(x_1)) = [1/2] + [2]x_1
   POL(n__s(x_1)) = [1/4] + x_1
   POL(nil) = [1]
   POL(s(x_1)) = [1/4] + x_1
The value of delta used in the strict ordering is 1/8.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   add(0, X) -> activate(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   add(X1, X2) -> n__add(X1, X2)
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   s(X) -> n__s(X)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__add(X1, X2)) -> ADD(activate(X1), X2)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(activate(X1), X2)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
The graph contains the following edges 1 > 1


*ACTIVATE(n__add(X1, X2)) -> ACTIVATE(X1)
The graph contains the following edges 1 > 1


*ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(16)
YES
