YES

Problem 1: 

(VAR vu95NonEmpty n x y z)
(RULES
app(add(n,x),y) -> add(n,app(x,y))
app(nil,y) -> y
head(add(n,x)) -> n
if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
if(ftrue,x,y,z) -> y
null(add(n,x)) -> ffalse
null(nil) -> ftrue
reverse(add(n,x)) -> app(reverse(x),add(n,nil))
reverse(nil) -> nil
shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
shuffle(x) -> shuff(x,nil)
tail(add(n,x)) -> x
tail(nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 IF(ffalse,x,y,z) -> REVERSE(tail(x))
 IF(ffalse,x,y,z) -> SHUFF(reverse(tail(x)),z)
 IF(ffalse,x,y,z) -> TAIL(x)
 REVERSE(add(n,x)) -> APP(reverse(x),add(n,nil))
 REVERSE(add(n,x)) -> REVERSE(x)
 SHUFF(x,y) -> APP(y,add(head(x),nil))
 SHUFF(x,y) -> HEAD(x)
 SHUFF(x,y) -> IF(null(x),x,y,app(y,add(head(x),nil)))
 SHUFF(x,y) -> NULL(x)
 SHUFFLE(x) -> SHUFF(x,nil)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 IF(ffalse,x,y,z) -> REVERSE(tail(x))
 IF(ffalse,x,y,z) -> SHUFF(reverse(tail(x)),z)
 IF(ffalse,x,y,z) -> TAIL(x)
 REVERSE(add(n,x)) -> APP(reverse(x),add(n,nil))
 REVERSE(add(n,x)) -> REVERSE(x)
 SHUFF(x,y) -> APP(y,add(head(x),nil))
 SHUFF(x,y) -> HEAD(x)
 SHUFF(x,y) -> IF(null(x),x,y,app(y,add(head(x),nil)))
 SHUFF(x,y) -> NULL(x)
 SHUFFLE(x) -> SHUFF(x,nil)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->->Cycle:
->->-> Pairs:
 REVERSE(add(n,x)) -> REVERSE(x)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->->Cycle:
->->-> Pairs:
 IF(ffalse,x,y,z) -> SHUFF(reverse(tail(x)),z)
 SHUFF(x,y) -> IF(null(x),x,y,app(y,add(head(x),nil)))
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Projection:
 pi(APP) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 REVERSE(add(n,x)) -> REVERSE(x)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Projection:
 pi(REVERSE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 IF(ffalse,x,y,z) -> SHUFF(reverse(tail(x)),z)
 SHUFF(x,y) -> IF(null(x),x,y,app(y,add(head(x),nil)))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
-> Usable rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Interpretation type:
 Simple mixed
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 2.X1.X2 + X1 + X2
[head](X) = 1/2.X.X + 2.X + 1
[if](X1,X2,X3,X4) = 0
[null](X) = X + 1/2
[reverse](X) = X
[shuff](X1,X2) = 0
[shuffle](X) = 0
[tail](X) = 1/2.X
[add](X1,X2) = X1.X2 + 1/2.X1 + 2.X2 + 1/2
[fSNonEmpty] = 0
[ffalse] = 1
[nil] = 0
[ftrue] = 1/2
[APP](X1,X2) = 0
[HEAD](X) = 0
[IF](X1,X2,X3,X4) = X1 + X2 + 1/2
[NULL](X) = 0
[REVERSE](X) = 0
[SHUFF](X1,X2) = 2.X1 + 1
[SHUFFLE](X) = 0
[TAIL](X) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 SHUFF(x,y) -> IF(null(x),x,y,app(y,add(head(x),nil)))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 head(add(n,x)) -> n
 if(ffalse,x,y,z) -> shuff(reverse(tail(x)),z)
 if(ftrue,x,y,z) -> y
 null(add(n,x)) -> ffalse
 null(nil) -> ftrue
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuff(x,y) -> if(null(x),x,y,app(y,add(head(x),nil)))
 shuffle(x) -> shuff(x,nil)
 tail(add(n,x)) -> x
 tail(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
