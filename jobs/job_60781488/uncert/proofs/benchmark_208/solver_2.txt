YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hmKGq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) TransformationProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) TransformationProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) DependencyGraphProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) UsableRulesProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QReductionProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPOrderProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) PisEmptyProof [EQUIVALENT, 0 ms]
        (51) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   tail(add(n, x)) -> x
   tail(nil) -> nil
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(x) -> shuff(x, nil)
   shuff(x, y) -> if(null(x), x, y, app(y, add(head(x), nil)))
   if(true, x, y, z) -> y
   if(false, x, y, z) -> shuff(reverse(tail(x)), z)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   tail(add(n, x)) -> x
   tail(nil) -> nil
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(x) -> shuff(x, nil)
   shuff(x, y) -> if(null(x), x, y, app(y, add(head(x), nil)))
   if(true, x, y, z) -> y
   if(false, x, y, z) -> shuff(reverse(tail(x)), z)

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)
   REVERSE(add(n, x)) -> APP(reverse(x), add(n, nil))
   REVERSE(add(n, x)) -> REVERSE(x)
   SHUFFLE(x) -> SHUFF(x, nil)
   SHUFF(x, y) -> IF(null(x), x, y, app(y, add(head(x), nil)))
   SHUFF(x, y) -> NULL(x)
   SHUFF(x, y) -> APP(y, add(head(x), nil))
   SHUFF(x, y) -> HEAD(x)
   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   IF(false, x, y, z) -> REVERSE(tail(x))
   IF(false, x, y, z) -> TAIL(x)

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   tail(add(n, x)) -> x
   tail(nil) -> nil
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(x) -> shuff(x, nil)
   shuff(x, y) -> if(null(x), x, y, app(y, add(head(x), nil)))
   if(true, x, y, z) -> y
   if(false, x, y, z) -> shuff(reverse(tail(x)), z)

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   tail(add(n, x)) -> x
   tail(nil) -> nil
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(x) -> shuff(x, nil)
   shuff(x, y) -> if(null(x), x, y, app(y, add(head(x), nil)))
   if(true, x, y, z) -> y
   if(false, x, y, z) -> shuff(reverse(tail(x)), z)

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(add(n, x), y) -> APP(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(add(n, x)) -> REVERSE(x)

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   tail(add(n, x)) -> x
   tail(nil) -> nil
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(x) -> shuff(x, nil)
   shuff(x, y) -> if(null(x), x, y, app(y, add(head(x), nil)))
   if(true, x, y, z) -> y
   if(false, x, y, z) -> shuff(reverse(tail(x)), z)

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(add(n, x)) -> REVERSE(x)

R is empty.
The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE(add(n, x)) -> REVERSE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REVERSE(add(n, x)) -> REVERSE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(x, y) -> IF(null(x), x, y, app(y, add(head(x), nil)))

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   tail(add(n, x)) -> x
   tail(nil) -> nil
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(x) -> shuff(x, nil)
   shuff(x, y) -> if(null(x), x, y, app(y, add(head(x), nil)))
   if(true, x, y, z) -> y
   if(false, x, y, z) -> shuff(reverse(tail(x)), z)

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(x, y) -> IF(null(x), x, y, app(y, add(head(x), nil)))

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))
   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   shuffle(x0)
   shuff(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(x, y) -> IF(null(x), x, y, app(y, add(head(x), nil)))

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule SHUFF(x, y) -> IF(null(x), x, y, app(y, add(head(x), nil))) at position [0] we obtained the following new rules [LPAR04]:

   (SHUFF(nil, y1) -> IF(true, nil, y1, app(y1, add(head(nil), nil))),SHUFF(nil, y1) -> IF(true, nil, y1, app(y1, add(head(nil), nil))))
   (SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil))),SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil))))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(nil, y1) -> IF(true, nil, y1, app(y1, add(head(nil), nil)))
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil)))

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil)))
   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)

The TRS R consists of the following rules:

   null(nil) -> true
   null(add(n, x)) -> false
   head(add(n, x)) -> n
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil)))
   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)

The TRS R consists of the following rules:

   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   head(add(n, x)) -> n

The set Q consists of the following terms:

   null(nil)
   null(add(x0, x1))
   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   null(nil)
   null(add(x0, x1))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil)))
   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)

The TRS R consists of the following rules:

   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   head(add(n, x)) -> n

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(head(add(x0, x1)), nil))) at position [3,1,0] we obtained the following new rules [LPAR04]:

   (SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil))),SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil))))


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))

The TRS R consists of the following rules:

   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   head(add(n, x)) -> n

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))

The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   head(add(x0, x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   head(add(x0, x1))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))

The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(false, x, y, z) -> SHUFF(reverse(tail(x)), z) at position [0] we obtained the following new rules [LPAR04]:

   (IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2),IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2))
   (IF(false, nil, y1, y2) -> SHUFF(reverse(nil), y2),IF(false, nil, y1, y2) -> SHUFF(reverse(nil), y2))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))
   IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2)
   IF(false, nil, y1, y2) -> SHUFF(reverse(nil), y2)

The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))

The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   tail(add(n, x)) -> x
   tail(nil) -> nil
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))

The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   tail(add(x0, x1))
   tail(nil)
   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   tail(add(x0, x1))
   tail(nil)


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))

The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF(false, add(x0, x1), y1, y2) -> SHUFF(reverse(x1), y2)
   SHUFF(add(x0, x1), y1) -> IF(false, add(x0, x1), y1, app(y1, add(x0, nil)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( SHUFF_2(x_1, x_2) ) = 2x_1 + 1
POL( reverse_1(x_1) ) = x_1
POL( nil ) = 0
POL( add_2(x_1, x_2) ) = x_2 + 2
POL( app_2(x_1, x_2) ) = x_1 + x_2
POL( IF_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_2 - 2}
POL( false ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))


----------------------------------------

(49)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

The set Q consists of the following terms:

   app(nil, x0)
   app(add(x0, x1), x2)
   reverse(nil)
   reverse(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(51)
YES
