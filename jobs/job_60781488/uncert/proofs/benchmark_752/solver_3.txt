YES

Problem 1: 

(VAR vu95NonEmpty x y z)
(RULES
purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
purge(nil) -> nil
remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
remove(x,nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 PURGE(u46(x,y)) -> PURGE(remove(x,y))
 PURGE(u46(x,y)) -> REMOVE(x,y)
 REMOVE(x,u46(y,z)) -> REMOVE(x,z)
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 PURGE(u46(x,y)) -> PURGE(remove(x,y))
 PURGE(u46(x,y)) -> REMOVE(x,y)
 REMOVE(x,u46(y,z)) -> REMOVE(x,z)
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REMOVE(x,u46(y,z)) -> REMOVE(x,z)
->->-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
->->Cycle:
->->-> Pairs:
 PURGE(u46(x,y)) -> PURGE(remove(x,y))
->->-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 REMOVE(x,u46(y,z)) -> REMOVE(x,z)
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
->Projection:
 pi(REMOVE) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 PURGE(u46(x,y)) -> PURGE(remove(x,y))
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
-> Usable rules:
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[purge](X) = 0
[remove](X1,X2) = X1 + 2.X2 + 1
[u46](X1,X2) = 2.X1 + 2.X2 + 2
[u61](X1,X2) = 2.X2
[fSNonEmpty] = 0
[if](X1,X2,X3) = 2.X1 + X2 + 1
[nil] = 1
[PURGE](X) = 2.X
[REMOVE](X1,X2) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 purge(u46(x,y)) -> u46(x,purge(remove(x,y)))
 purge(nil) -> nil
 remove(x,u46(y,z)) -> if(u61(x,y),remove(x,z),u46(y,remove(x,z)))
 remove(x,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
