YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Y5H1v.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, true), x), y) -> y
   app(app(takeWhile, p), nil) -> nil
   app(app(takeWhile, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(takeWhile, p), xs))), nil)
   app(app(dropWhile, p), nil) -> nil
   app(app(dropWhile, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(dropWhile, p), xs)), app(app(cons, x), xs))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(app(if, app(p, x)), app(app(cons, x), app(app(takeWhile, p), xs))), nil)
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(if, app(p, x)), app(app(cons, x), app(app(takeWhile, p), xs)))
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(if, app(p, x))
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(cons, x), app(app(takeWhile, p), xs))
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(takeWhile, p), xs)
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(app(app(if, app(p, x)), app(app(dropWhile, p), xs)), app(app(cons, x), xs))
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(app(if, app(p, x)), app(app(dropWhile, p), xs))
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(if, app(p, x))
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(app(dropWhile, p), xs)

The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, true), x), y) -> y
   app(app(takeWhile, p), nil) -> nil
   app(app(takeWhile, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(takeWhile, p), xs))), nil)
   app(app(dropWhile, p), nil) -> nil
   app(app(dropWhile, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(dropWhile, p), xs)), app(app(cons, x), xs))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 7 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(takeWhile, p), xs)
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(app(dropWhile, p), xs)

The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, true), x), y) -> y
   app(app(takeWhile, p), nil) -> nil
   app(app(takeWhile, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(takeWhile, p), xs))), nil)
   app(app(dropWhile, p), nil) -> nil
   app(app(dropWhile, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(dropWhile, p), xs)), app(app(cons, x), xs))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(takeWhile, p), xs)
   APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(app(dropWhile, p), xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(p, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(dropWhile, p), app(app(cons, x), xs)) -> APP(app(dropWhile, p), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(p, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(takeWhile, p), app(app(cons, x), xs)) -> APP(app(takeWhile, p), xs)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(8)
YES
