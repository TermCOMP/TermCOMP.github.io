YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/l9eCu.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) TransformationProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QDPQMonotonicMRRProof [EQUIVALENT, 5 ms]
        (38) QDP
        (39) QDPQMonotonicMRRProof [EQUIVALENT, 4 ms]
        (40) QDP
        (41) NonInfProof [EQUIVALENT, 257 ms]
        (42) AND
            (43) QDP
                (44) DependencyGraphProof [EQUIVALENT, 0 ms]
                (45) QDP
                (46) UsableRulesProof [EQUIVALENT, 0 ms]
                (47) QDP
                (48) QReductionProof [EQUIVALENT, 0 ms]
                (49) QDP
                (50) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (51) YES
            (52) QDP
                (53) DependencyGraphProof [EQUIVALENT, 0 ms]
                (54) QDP
                (55) UsableRulesProof [EQUIVALENT, 0 ms]
                (56) QDP
                (57) QReductionProof [EQUIVALENT, 0 ms]
                (58) QDP
                (59) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (60) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)
   SIZE(edge(x, y, i)) -> SIZE(i)
   LE(s(x), s(y)) -> LE(x, y)
   REACHABLE(x, y, i) -> REACH(x, y, 0, i, i)
   REACH(x, y, c, i, j) -> IF1(eq(x, y), x, y, c, i, j)
   REACH(x, y, c, i, j) -> EQ(x, y)
   IF1(false, x, y, c, i, j) -> IF2(le(c, size(j)), x, y, c, i, j)
   IF1(false, x, y, c, i, j) -> LE(c, size(j))
   IF1(false, x, y, c, i, j) -> SIZE(j)
   IF2(true, x, y, c, edge(u, v, i), j) -> OR(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))
   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> AND(eq(x, u), reach(v, y, s(c), j, j))
   IF2(true, x, y, c, edge(u, v, i), j) -> EQ(x, u)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SIZE(edge(x, y, i)) -> SIZE(i)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SIZE(edge(x, y, i)) -> SIZE(i)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SIZE(edge(x, y, i)) -> SIZE(i)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SIZE(edge(x, y, i)) -> SIZE(i)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, c, i, j) -> IF1(eq(x, y), x, y, c, i, j)
   IF1(false, x, y, c, i, j) -> IF2(le(c, size(j)), x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   or(true, y) -> true
   or(false, y) -> y
   and(true, y) -> y
   and(false, y) -> false
   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   reachable(x, y, i) -> reach(x, y, 0, i, i)
   reach(x, y, c, i, j) -> if1(eq(x, y), x, y, c, i, j)
   if1(true, x, y, c, i, j) -> true
   if1(false, x, y, c, i, j) -> if2(le(c, size(j)), x, y, c, i, j)
   if2(false, x, y, c, i, j) -> false
   if2(true, x, y, c, empty, j) -> false
   if2(true, x, y, c, edge(u, v, i), j) -> or(if2(true, x, y, c, i, j), and(eq(x, u), reach(v, y, s(c), j, j)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, c, i, j) -> IF1(eq(x, y), x, y, c, i, j)
   IF1(false, x, y, c, i, j) -> IF2(le(c, size(j)), x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   or(true, x0)
   or(false, x0)
   and(true, x0)
   and(false, x0)
   reachable(x0, x1, x2)
   reach(x0, x1, x2, x3, x4)
   if1(true, x0, x1, x2, x3, x4)
   if1(false, x0, x1, x2, x3, x4)
   if2(false, x0, x1, x2, x3, x4)
   if2(true, x0, x1, x2, empty, x3)
   if2(true, x0, x1, x2, edge(x3, x4, x5), x6)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH(x, y, c, i, j) -> IF1(eq(x, y), x, y, c, i, j)
   IF1(false, x, y, c, i, j) -> IF2(le(c, size(j)), x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH(x, y, c, i, j) -> IF1(eq(x, y), x, y, c, i, j) we obtained the following new rules [LPAR04]:

   (REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6),REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF1(false, x, y, c, i, j) -> IF2(le(c, size(j)), x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)
   REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF1(false, x, y, c, i, j) -> IF2(le(c, size(j)), x, y, c, i, j) we obtained the following new rules [LPAR04]:

   (IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3),IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)
   REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)
   IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   eq(0, 0) -> true

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF1(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_1 + 2*x_3
   POL(IF2(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + 2*x_3
   POL(REACH(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2
   POL(edge(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(empty) = 2
   POL(eq(x_1, x_2)) = 1
   POL(false) = 1
   POL(le(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(size(x_1)) = 2
   POL(true) = 0


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)
   REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)
   IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   le(s(x), 0) -> false

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF1(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_3 + 2*x_4
   POL(IF2(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + 2*x_1 + 2*x_3
   POL(REACH(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_3
   POL(edge(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(empty) = 2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(le(x_1, x_2)) = 1
   POL(s(x_1)) = 2
   POL(size(x_1)) = 2
   POL(true) = 1


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)
   REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)
   IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j) the following chains were created:
*We consider the chain IF2(true, x0, x1, x2, edge(x3, x4, x5), x6) -> IF2(true, x0, x1, x2, x5, x6), IF2(true, x7, x8, x9, edge(x10, x11, x12), x13) -> IF2(true, x7, x8, x9, x12, x13) which results in the following constraint:

(1)    (IF2(true, x0, x1, x2, x5, x6)=IF2(true, x7, x8, x9, edge(x10, x11, x12), x13)  ==>  IF2(true, x0, x1, x2, edge(x3, x4, x5), x6)_>=_IF2(true, x0, x1, x2, x5, x6))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (IF2(true, x0, x1, x2, edge(x3, x4, edge(x10, x11, x12)), x6)_>=_IF2(true, x0, x1, x2, edge(x10, x11, x12), x6))




*We consider the chain IF2(true, x14, x15, x16, edge(x17, x18, x19), x20) -> IF2(true, x14, x15, x16, x19, x20), IF2(true, x21, x22, x23, edge(x24, x25, x26), x27) -> REACH(x25, x22, s(x23), x27, x27) which results in the following constraint:

(1)    (IF2(true, x14, x15, x16, x19, x20)=IF2(true, x21, x22, x23, edge(x24, x25, x26), x27)  ==>  IF2(true, x14, x15, x16, edge(x17, x18, x19), x20)_>=_IF2(true, x14, x15, x16, x19, x20))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (IF2(true, x14, x15, x16, edge(x17, x18, edge(x24, x25, x26)), x20)_>=_IF2(true, x14, x15, x16, edge(x24, x25, x26), x20))








For Pair IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j) the following chains were created:
*We consider the chain IF2(true, x56, x57, x58, edge(x59, x60, x61), x62) -> REACH(x60, x57, s(x58), x62, x62), REACH(x63, x64, s(x65), x66, x66) -> IF1(eq(x63, x64), x63, x64, s(x65), x66, x66) which results in the following constraint:

(1)    (REACH(x60, x57, s(x58), x62, x62)=REACH(x63, x64, s(x65), x66, x66)  ==>  IF2(true, x56, x57, x58, edge(x59, x60, x61), x62)_>=_REACH(x60, x57, s(x58), x62, x62))



We simplified constraint (1) using rules (I), (II), (IV) which results in the following new constraint:

(2)    (IF2(true, x56, x57, x58, edge(x59, x60, x61), x62)_>=_REACH(x60, x57, s(x58), x62, x62))








For Pair REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6) the following chains were created:
*We consider the chain REACH(x86, x87, s(x88), x89, x89) -> IF1(eq(x86, x87), x86, x87, s(x88), x89, x89), IF1(false, x90, x91, s(x92), x93, x93) -> IF2(le(s(x92), size(x93)), x90, x91, s(x92), x93, x93) which results in the following constraint:

(1)    (IF1(eq(x86, x87), x86, x87, s(x88), x89, x89)=IF1(false, x90, x91, s(x92), x93, x93)  ==>  REACH(x86, x87, s(x88), x89, x89)_>=_IF1(eq(x86, x87), x86, x87, s(x88), x89, x89))



We simplified constraint (1) using rules (I), (II), (IV) which results in the following new constraint:

(2)    (eq(x86, x87)=false  ==>  REACH(x86, x87, s(x88), x89, x89)_>=_IF1(eq(x86, x87), x86, x87, s(x88), x89, x89))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on eq(x86, x87)=false which results in the following new constraints:

(3)    (false=false  ==>  REACH(0, s(x124), s(x88), x89, x89)_>=_IF1(eq(0, s(x124)), 0, s(x124), s(x88), x89, x89))

(4)    (false=false  ==>  REACH(s(x125), 0, s(x88), x89, x89)_>=_IF1(eq(s(x125), 0), s(x125), 0, s(x88), x89, x89))

(5)    (eq(x127, x126)=false & (\/x128,x129:eq(x127, x126)=false  ==>  REACH(x127, x126, s(x128), x129, x129)_>=_IF1(eq(x127, x126), x127, x126, s(x128), x129, x129))  ==>  REACH(s(x127), s(x126), s(x88), x89, x89)_>=_IF1(eq(s(x127), s(x126)), s(x127), s(x126), s(x88), x89, x89))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(6)    (REACH(0, s(x124), s(x88), x89, x89)_>=_IF1(eq(0, s(x124)), 0, s(x124), s(x88), x89, x89))



We simplified constraint (4) using rules (I), (II) which results in the following new constraint:

(7)    (REACH(s(x125), 0, s(x88), x89, x89)_>=_IF1(eq(s(x125), 0), s(x125), 0, s(x88), x89, x89))



We simplified constraint (5) using rule (VI) where we applied the induction hypothesis (\/x128,x129:eq(x127, x126)=false  ==>  REACH(x127, x126, s(x128), x129, x129)_>=_IF1(eq(x127, x126), x127, x126, s(x128), x129, x129)) with sigma = [x128 / x88, x129 / x89] which results in the following new constraint:

(8)    (REACH(x127, x126, s(x88), x89, x89)_>=_IF1(eq(x127, x126), x127, x126, s(x88), x89, x89)  ==>  REACH(s(x127), s(x126), s(x88), x89, x89)_>=_IF1(eq(s(x127), s(x126)), s(x127), s(x126), s(x88), x89, x89))








For Pair IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3) the following chains were created:
*We consider the chain IF1(false, x94, x95, s(x96), x97, x97) -> IF2(le(s(x96), size(x97)), x94, x95, s(x96), x97, x97), IF2(true, x98, x99, x100, edge(x101, x102, x103), x104) -> IF2(true, x98, x99, x100, x103, x104) which results in the following constraint:

(1)    (IF2(le(s(x96), size(x97)), x94, x95, s(x96), x97, x97)=IF2(true, x98, x99, x100, edge(x101, x102, x103), x104)  ==>  IF1(false, x94, x95, s(x96), x97, x97)_>=_IF2(le(s(x96), size(x97)), x94, x95, s(x96), x97, x97))



We simplified constraint (1) using rules (I), (II), (III), (IV), (VII) which results in the following new constraint:

(2)    (s(x96)=x130 & edge(x101, x102, x103)=x132 & size(x132)=x131 & le(x130, x131)=true  ==>  IF1(false, x94, x95, s(x96), edge(x101, x102, x103), edge(x101, x102, x103))_>=_IF2(le(s(x96), size(edge(x101, x102, x103))), x94, x95, s(x96), edge(x101, x102, x103), edge(x101, x102, x103)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on le(x130, x131)=true which results in the following new constraints:

(3)    (true=true & s(x96)=0 & edge(x101, x102, x103)=x132 & size(x132)=x133  ==>  IF1(false, x94, x95, s(x96), edge(x101, x102, x103), edge(x101, x102, x103))_>=_IF2(le(s(x96), size(edge(x101, x102, x103))), x94, x95, s(x96), edge(x101, x102, x103), edge(x101, x102, x103)))

(4)    (le(x135, x134)=true & s(x96)=s(x135) & edge(x101, x102, x103)=x132 & size(x132)=s(x134) & (\/x136,x137,x138,x139,x140,x141,x142:le(x135, x134)=true & s(x136)=x135 & edge(x137, x138, x139)=x140 & size(x140)=x134  ==>  IF1(false, x141, x142, s(x136), edge(x137, x138, x139), edge(x137, x138, x139))_>=_IF2(le(s(x136), size(edge(x137, x138, x139))), x141, x142, s(x136), edge(x137, x138, x139), edge(x137, x138, x139)))  ==>  IF1(false, x94, x95, s(x96), edge(x101, x102, x103), edge(x101, x102, x103))_>=_IF2(le(s(x96), size(edge(x101, x102, x103))), x94, x95, s(x96), edge(x101, x102, x103), edge(x101, x102, x103)))



We solved constraint (3) using rules (I), (II).We simplified constraint (4) using rules (I), (II), (III) which results in the following new constraint:

(5)    (le(x135, x134)=true & edge(x101, x102, x103)=x132 & size(x132)=s(x134) & (\/x136,x137,x138,x139,x140,x141,x142:le(x135, x134)=true & s(x136)=x135 & edge(x137, x138, x139)=x140 & size(x140)=x134  ==>  IF1(false, x141, x142, s(x136), edge(x137, x138, x139), edge(x137, x138, x139))_>=_IF2(le(s(x136), size(edge(x137, x138, x139))), x141, x142, s(x136), edge(x137, x138, x139), edge(x137, x138, x139)))  ==>  IF1(false, x94, x95, s(x135), edge(x101, x102, x103), edge(x101, x102, x103))_>=_IF2(le(s(x135), size(edge(x101, x102, x103))), x94, x95, s(x135), edge(x101, x102, x103), edge(x101, x102, x103)))



We simplified constraint (5) using rule (V) (with possible (I) afterwards) using induction on size(x132)=s(x134) which results in the following new constraint:

(6)    (s(size(x143))=s(x134) & le(x135, x134)=true & edge(x101, x102, x103)=edge(x145, x144, x143) & (\/x136,x137,x138,x139,x140,x141,x142:le(x135, x134)=true & s(x136)=x135 & edge(x137, x138, x139)=x140 & size(x140)=x134  ==>  IF1(false, x141, x142, s(x136), edge(x137, x138, x139), edge(x137, x138, x139))_>=_IF2(le(s(x136), size(edge(x137, x138, x139))), x141, x142, s(x136), edge(x137, x138, x139), edge(x137, x138, x139))) & (\/x146,x147,x148,x149,x150,x151,x152,x153,x154,x155,x156,x157,x158,x159:size(x143)=s(x146) & le(x147, x146)=true & edge(x148, x149, x150)=x143 & (\/x151,x152,x153,x154,x155,x156,x157:le(x147, x146)=true & s(x151)=x147 & edge(x152, x153, x154)=x155 & size(x155)=x146  ==>  IF1(false, x156, x157, s(x151), edge(x152, x153, x154), edge(x152, x153, x154))_>=_IF2(le(s(x151), size(edge(x152, x153, x154))), x156, x157, s(x151), edge(x152, x153, x154), edge(x152, x153, x154)))  ==>  IF1(false, x158, x159, s(x147), edge(x148, x149, x150), edge(x148, x149, x150))_>=_IF2(le(s(x147), size(edge(x148, x149, x150))), x158, x159, s(x147), edge(x148, x149, x150), edge(x148, x149, x150)))  ==>  IF1(false, x94, x95, s(x135), edge(x101, x102, x103), edge(x101, x102, x103))_>=_IF2(le(s(x135), size(edge(x101, x102, x103))), x94, x95, s(x135), edge(x101, x102, x103), edge(x101, x102, x103)))



We simplified constraint (6) using rules (I), (II), (III), (IV) which results in the following new constraint:

(7)    (size(x143)=x134 & le(x135, x134)=true  ==>  IF1(false, x94, x95, s(x135), edge(x101, x102, x143), edge(x101, x102, x143))_>=_IF2(le(s(x135), size(edge(x101, x102, x143))), x94, x95, s(x135), edge(x101, x102, x143), edge(x101, x102, x143)))



We simplified constraint (7) using rule (V) (with possible (I) afterwards) using induction on le(x135, x134)=true which results in the following new constraints:

(8)    (true=true & size(x143)=x160  ==>  IF1(false, x94, x95, s(0), edge(x101, x102, x143), edge(x101, x102, x143))_>=_IF2(le(s(0), size(edge(x101, x102, x143))), x94, x95, s(0), edge(x101, x102, x143), edge(x101, x102, x143)))

(9)    (le(x162, x161)=true & size(x143)=s(x161) & (\/x163,x164,x165,x166,x167:le(x162, x161)=true & size(x163)=x161  ==>  IF1(false, x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))_>=_IF2(le(s(x162), size(edge(x166, x167, x163))), x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163)))  ==>  IF1(false, x94, x95, s(s(x162)), edge(x101, x102, x143), edge(x101, x102, x143))_>=_IF2(le(s(s(x162)), size(edge(x101, x102, x143))), x94, x95, s(s(x162)), edge(x101, x102, x143), edge(x101, x102, x143)))



We simplified constraint (8) using rules (I), (II), (IV) which results in the following new constraint:

(10)    (IF1(false, x94, x95, s(0), edge(x101, x102, x143), edge(x101, x102, x143))_>=_IF2(le(s(0), size(edge(x101, x102, x143))), x94, x95, s(0), edge(x101, x102, x143), edge(x101, x102, x143)))



We simplified constraint (9) using rule (V) (with possible (I) afterwards) using induction on size(x143)=s(x161) which results in the following new constraint:

(11)    (s(size(x168))=s(x161) & le(x162, x161)=true & (\/x163,x164,x165,x166,x167:le(x162, x161)=true & size(x163)=x161  ==>  IF1(false, x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))_>=_IF2(le(s(x162), size(edge(x166, x167, x163))), x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))) & (\/x171,x172,x173,x174,x175,x176,x177,x178,x179,x180,x181:size(x168)=s(x171) & le(x172, x171)=true & (\/x173,x174,x175,x176,x177:le(x172, x171)=true & size(x173)=x171  ==>  IF1(false, x174, x175, s(x172), edge(x176, x177, x173), edge(x176, x177, x173))_>=_IF2(le(s(x172), size(edge(x176, x177, x173))), x174, x175, s(x172), edge(x176, x177, x173), edge(x176, x177, x173)))  ==>  IF1(false, x178, x179, s(s(x172)), edge(x180, x181, x168), edge(x180, x181, x168))_>=_IF2(le(s(s(x172)), size(edge(x180, x181, x168))), x178, x179, s(s(x172)), edge(x180, x181, x168), edge(x180, x181, x168)))  ==>  IF1(false, x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168)))_>=_IF2(le(s(s(x162)), size(edge(x101, x102, edge(x170, x169, x168)))), x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168))))



We simplified constraint (11) using rules (I), (II) which results in the following new constraint:

(12)    (size(x168)=x161 & le(x162, x161)=true & (\/x163,x164,x165,x166,x167:le(x162, x161)=true & size(x163)=x161  ==>  IF1(false, x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))_>=_IF2(le(s(x162), size(edge(x166, x167, x163))), x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))) & (\/x171,x172,x173,x174,x175,x176,x177,x178,x179,x180,x181:size(x168)=s(x171) & le(x172, x171)=true & (\/x173,x174,x175,x176,x177:le(x172, x171)=true & size(x173)=x171  ==>  IF1(false, x174, x175, s(x172), edge(x176, x177, x173), edge(x176, x177, x173))_>=_IF2(le(s(x172), size(edge(x176, x177, x173))), x174, x175, s(x172), edge(x176, x177, x173), edge(x176, x177, x173)))  ==>  IF1(false, x178, x179, s(s(x172)), edge(x180, x181, x168), edge(x180, x181, x168))_>=_IF2(le(s(s(x172)), size(edge(x180, x181, x168))), x178, x179, s(s(x172)), edge(x180, x181, x168), edge(x180, x181, x168)))  ==>  IF1(false, x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168)))_>=_IF2(le(s(s(x162)), size(edge(x101, x102, edge(x170, x169, x168)))), x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168))))



We simplified constraint (12) using rule (VI) where we applied the induction hypothesis (\/x163,x164,x165,x166,x167:le(x162, x161)=true & size(x163)=x161  ==>  IF1(false, x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))_>=_IF2(le(s(x162), size(edge(x166, x167, x163))), x164, x165, s(x162), edge(x166, x167, x163), edge(x166, x167, x163))) with sigma = [x163 / x168, x164 / x94, x165 / x95, x166 / x101, x167 / x102] which results in the following new constraint:

(13)    (IF1(false, x94, x95, s(x162), edge(x101, x102, x168), edge(x101, x102, x168))_>=_IF2(le(s(x162), size(edge(x101, x102, x168))), x94, x95, s(x162), edge(x101, x102, x168), edge(x101, x102, x168)) & (\/x171,x172,x173,x174,x175,x176,x177,x178,x179,x180,x181:size(x168)=s(x171) & le(x172, x171)=true & (\/x173,x174,x175,x176,x177:le(x172, x171)=true & size(x173)=x171  ==>  IF1(false, x174, x175, s(x172), edge(x176, x177, x173), edge(x176, x177, x173))_>=_IF2(le(s(x172), size(edge(x176, x177, x173))), x174, x175, s(x172), edge(x176, x177, x173), edge(x176, x177, x173)))  ==>  IF1(false, x178, x179, s(s(x172)), edge(x180, x181, x168), edge(x180, x181, x168))_>=_IF2(le(s(s(x172)), size(edge(x180, x181, x168))), x178, x179, s(s(x172)), edge(x180, x181, x168), edge(x180, x181, x168)))  ==>  IF1(false, x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168)))_>=_IF2(le(s(s(x162)), size(edge(x101, x102, edge(x170, x169, x168)))), x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168))))



We simplified constraint (13) using rule (IV) which results in the following new constraint:

(14)    (IF1(false, x94, x95, s(x162), edge(x101, x102, x168), edge(x101, x102, x168))_>=_IF2(le(s(x162), size(edge(x101, x102, x168))), x94, x95, s(x162), edge(x101, x102, x168), edge(x101, x102, x168))  ==>  IF1(false, x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168)))_>=_IF2(le(s(s(x162)), size(edge(x101, x102, edge(x170, x169, x168)))), x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168))))




*We consider the chain IF1(false, x105, x106, s(x107), x108, x108) -> IF2(le(s(x107), size(x108)), x105, x106, s(x107), x108, x108), IF2(true, x109, x110, x111, edge(x112, x113, x114), x115) -> REACH(x113, x110, s(x111), x115, x115) which results in the following constraint:

(1)    (IF2(le(s(x107), size(x108)), x105, x106, s(x107), x108, x108)=IF2(true, x109, x110, x111, edge(x112, x113, x114), x115)  ==>  IF1(false, x105, x106, s(x107), x108, x108)_>=_IF2(le(s(x107), size(x108)), x105, x106, s(x107), x108, x108))



We simplified constraint (1) using rules (I), (II), (III), (IV), (VII) which results in the following new constraint:

(2)    (s(x107)=x182 & edge(x112, x113, x114)=x184 & size(x184)=x183 & le(x182, x183)=true  ==>  IF1(false, x105, x106, s(x107), edge(x112, x113, x114), edge(x112, x113, x114))_>=_IF2(le(s(x107), size(edge(x112, x113, x114))), x105, x106, s(x107), edge(x112, x113, x114), edge(x112, x113, x114)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on le(x182, x183)=true which results in the following new constraints:

(3)    (true=true & s(x107)=0 & edge(x112, x113, x114)=x184 & size(x184)=x185  ==>  IF1(false, x105, x106, s(x107), edge(x112, x113, x114), edge(x112, x113, x114))_>=_IF2(le(s(x107), size(edge(x112, x113, x114))), x105, x106, s(x107), edge(x112, x113, x114), edge(x112, x113, x114)))

(4)    (le(x187, x186)=true & s(x107)=s(x187) & edge(x112, x113, x114)=x184 & size(x184)=s(x186) & (\/x188,x189,x190,x191,x192,x193,x194:le(x187, x186)=true & s(x188)=x187 & edge(x189, x190, x191)=x192 & size(x192)=x186  ==>  IF1(false, x193, x194, s(x188), edge(x189, x190, x191), edge(x189, x190, x191))_>=_IF2(le(s(x188), size(edge(x189, x190, x191))), x193, x194, s(x188), edge(x189, x190, x191), edge(x189, x190, x191)))  ==>  IF1(false, x105, x106, s(x107), edge(x112, x113, x114), edge(x112, x113, x114))_>=_IF2(le(s(x107), size(edge(x112, x113, x114))), x105, x106, s(x107), edge(x112, x113, x114), edge(x112, x113, x114)))



We solved constraint (3) using rules (I), (II).We simplified constraint (4) using rules (I), (II), (III) which results in the following new constraint:

(5)    (le(x187, x186)=true & edge(x112, x113, x114)=x184 & size(x184)=s(x186) & (\/x188,x189,x190,x191,x192,x193,x194:le(x187, x186)=true & s(x188)=x187 & edge(x189, x190, x191)=x192 & size(x192)=x186  ==>  IF1(false, x193, x194, s(x188), edge(x189, x190, x191), edge(x189, x190, x191))_>=_IF2(le(s(x188), size(edge(x189, x190, x191))), x193, x194, s(x188), edge(x189, x190, x191), edge(x189, x190, x191)))  ==>  IF1(false, x105, x106, s(x187), edge(x112, x113, x114), edge(x112, x113, x114))_>=_IF2(le(s(x187), size(edge(x112, x113, x114))), x105, x106, s(x187), edge(x112, x113, x114), edge(x112, x113, x114)))



We simplified constraint (5) using rule (V) (with possible (I) afterwards) using induction on size(x184)=s(x186) which results in the following new constraint:

(6)    (s(size(x195))=s(x186) & le(x187, x186)=true & edge(x112, x113, x114)=edge(x197, x196, x195) & (\/x188,x189,x190,x191,x192,x193,x194:le(x187, x186)=true & s(x188)=x187 & edge(x189, x190, x191)=x192 & size(x192)=x186  ==>  IF1(false, x193, x194, s(x188), edge(x189, x190, x191), edge(x189, x190, x191))_>=_IF2(le(s(x188), size(edge(x189, x190, x191))), x193, x194, s(x188), edge(x189, x190, x191), edge(x189, x190, x191))) & (\/x198,x199,x200,x201,x202,x203,x204,x205,x206,x207,x208,x209,x210,x211:size(x195)=s(x198) & le(x199, x198)=true & edge(x200, x201, x202)=x195 & (\/x203,x204,x205,x206,x207,x208,x209:le(x199, x198)=true & s(x203)=x199 & edge(x204, x205, x206)=x207 & size(x207)=x198  ==>  IF1(false, x208, x209, s(x203), edge(x204, x205, x206), edge(x204, x205, x206))_>=_IF2(le(s(x203), size(edge(x204, x205, x206))), x208, x209, s(x203), edge(x204, x205, x206), edge(x204, x205, x206)))  ==>  IF1(false, x210, x211, s(x199), edge(x200, x201, x202), edge(x200, x201, x202))_>=_IF2(le(s(x199), size(edge(x200, x201, x202))), x210, x211, s(x199), edge(x200, x201, x202), edge(x200, x201, x202)))  ==>  IF1(false, x105, x106, s(x187), edge(x112, x113, x114), edge(x112, x113, x114))_>=_IF2(le(s(x187), size(edge(x112, x113, x114))), x105, x106, s(x187), edge(x112, x113, x114), edge(x112, x113, x114)))



We simplified constraint (6) using rules (I), (II), (III), (IV) which results in the following new constraint:

(7)    (size(x195)=x186 & le(x187, x186)=true  ==>  IF1(false, x105, x106, s(x187), edge(x112, x113, x195), edge(x112, x113, x195))_>=_IF2(le(s(x187), size(edge(x112, x113, x195))), x105, x106, s(x187), edge(x112, x113, x195), edge(x112, x113, x195)))



We simplified constraint (7) using rule (V) (with possible (I) afterwards) using induction on le(x187, x186)=true which results in the following new constraints:

(8)    (true=true & size(x195)=x212  ==>  IF1(false, x105, x106, s(0), edge(x112, x113, x195), edge(x112, x113, x195))_>=_IF2(le(s(0), size(edge(x112, x113, x195))), x105, x106, s(0), edge(x112, x113, x195), edge(x112, x113, x195)))

(9)    (le(x214, x213)=true & size(x195)=s(x213) & (\/x215,x216,x217,x218,x219:le(x214, x213)=true & size(x215)=x213  ==>  IF1(false, x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))_>=_IF2(le(s(x214), size(edge(x218, x219, x215))), x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215)))  ==>  IF1(false, x105, x106, s(s(x214)), edge(x112, x113, x195), edge(x112, x113, x195))_>=_IF2(le(s(s(x214)), size(edge(x112, x113, x195))), x105, x106, s(s(x214)), edge(x112, x113, x195), edge(x112, x113, x195)))



We simplified constraint (8) using rules (I), (II), (IV) which results in the following new constraint:

(10)    (IF1(false, x105, x106, s(0), edge(x112, x113, x195), edge(x112, x113, x195))_>=_IF2(le(s(0), size(edge(x112, x113, x195))), x105, x106, s(0), edge(x112, x113, x195), edge(x112, x113, x195)))



We simplified constraint (9) using rule (V) (with possible (I) afterwards) using induction on size(x195)=s(x213) which results in the following new constraint:

(11)    (s(size(x220))=s(x213) & le(x214, x213)=true & (\/x215,x216,x217,x218,x219:le(x214, x213)=true & size(x215)=x213  ==>  IF1(false, x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))_>=_IF2(le(s(x214), size(edge(x218, x219, x215))), x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))) & (\/x223,x224,x225,x226,x227,x228,x229,x230,x231,x232,x233:size(x220)=s(x223) & le(x224, x223)=true & (\/x225,x226,x227,x228,x229:le(x224, x223)=true & size(x225)=x223  ==>  IF1(false, x226, x227, s(x224), edge(x228, x229, x225), edge(x228, x229, x225))_>=_IF2(le(s(x224), size(edge(x228, x229, x225))), x226, x227, s(x224), edge(x228, x229, x225), edge(x228, x229, x225)))  ==>  IF1(false, x230, x231, s(s(x224)), edge(x232, x233, x220), edge(x232, x233, x220))_>=_IF2(le(s(s(x224)), size(edge(x232, x233, x220))), x230, x231, s(s(x224)), edge(x232, x233, x220), edge(x232, x233, x220)))  ==>  IF1(false, x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220)))_>=_IF2(le(s(s(x214)), size(edge(x112, x113, edge(x222, x221, x220)))), x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220))))



We simplified constraint (11) using rules (I), (II) which results in the following new constraint:

(12)    (size(x220)=x213 & le(x214, x213)=true & (\/x215,x216,x217,x218,x219:le(x214, x213)=true & size(x215)=x213  ==>  IF1(false, x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))_>=_IF2(le(s(x214), size(edge(x218, x219, x215))), x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))) & (\/x223,x224,x225,x226,x227,x228,x229,x230,x231,x232,x233:size(x220)=s(x223) & le(x224, x223)=true & (\/x225,x226,x227,x228,x229:le(x224, x223)=true & size(x225)=x223  ==>  IF1(false, x226, x227, s(x224), edge(x228, x229, x225), edge(x228, x229, x225))_>=_IF2(le(s(x224), size(edge(x228, x229, x225))), x226, x227, s(x224), edge(x228, x229, x225), edge(x228, x229, x225)))  ==>  IF1(false, x230, x231, s(s(x224)), edge(x232, x233, x220), edge(x232, x233, x220))_>=_IF2(le(s(s(x224)), size(edge(x232, x233, x220))), x230, x231, s(s(x224)), edge(x232, x233, x220), edge(x232, x233, x220)))  ==>  IF1(false, x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220)))_>=_IF2(le(s(s(x214)), size(edge(x112, x113, edge(x222, x221, x220)))), x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220))))



We simplified constraint (12) using rule (VI) where we applied the induction hypothesis (\/x215,x216,x217,x218,x219:le(x214, x213)=true & size(x215)=x213  ==>  IF1(false, x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))_>=_IF2(le(s(x214), size(edge(x218, x219, x215))), x216, x217, s(x214), edge(x218, x219, x215), edge(x218, x219, x215))) with sigma = [x215 / x220, x216 / x105, x217 / x106, x218 / x112, x219 / x113] which results in the following new constraint:

(13)    (IF1(false, x105, x106, s(x214), edge(x112, x113, x220), edge(x112, x113, x220))_>=_IF2(le(s(x214), size(edge(x112, x113, x220))), x105, x106, s(x214), edge(x112, x113, x220), edge(x112, x113, x220)) & (\/x223,x224,x225,x226,x227,x228,x229,x230,x231,x232,x233:size(x220)=s(x223) & le(x224, x223)=true & (\/x225,x226,x227,x228,x229:le(x224, x223)=true & size(x225)=x223  ==>  IF1(false, x226, x227, s(x224), edge(x228, x229, x225), edge(x228, x229, x225))_>=_IF2(le(s(x224), size(edge(x228, x229, x225))), x226, x227, s(x224), edge(x228, x229, x225), edge(x228, x229, x225)))  ==>  IF1(false, x230, x231, s(s(x224)), edge(x232, x233, x220), edge(x232, x233, x220))_>=_IF2(le(s(s(x224)), size(edge(x232, x233, x220))), x230, x231, s(s(x224)), edge(x232, x233, x220), edge(x232, x233, x220)))  ==>  IF1(false, x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220)))_>=_IF2(le(s(s(x214)), size(edge(x112, x113, edge(x222, x221, x220)))), x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220))))



We simplified constraint (13) using rule (IV) which results in the following new constraint:

(14)    (IF1(false, x105, x106, s(x214), edge(x112, x113, x220), edge(x112, x113, x220))_>=_IF2(le(s(x214), size(edge(x112, x113, x220))), x105, x106, s(x214), edge(x112, x113, x220), edge(x112, x113, x220))  ==>  IF1(false, x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220)))_>=_IF2(le(s(s(x214)), size(edge(x112, x113, edge(x222, x221, x220)))), x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

*(IF2(true, x0, x1, x2, edge(x3, x4, edge(x10, x11, x12)), x6)_>=_IF2(true, x0, x1, x2, edge(x10, x11, x12), x6))


*(IF2(true, x14, x15, x16, edge(x17, x18, edge(x24, x25, x26)), x20)_>=_IF2(true, x14, x15, x16, edge(x24, x25, x26), x20))




*IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)

*(IF2(true, x56, x57, x58, edge(x59, x60, x61), x62)_>=_REACH(x60, x57, s(x58), x62, x62))




*REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)

*(REACH(0, s(x124), s(x88), x89, x89)_>=_IF1(eq(0, s(x124)), 0, s(x124), s(x88), x89, x89))


*(REACH(s(x125), 0, s(x88), x89, x89)_>=_IF1(eq(s(x125), 0), s(x125), 0, s(x88), x89, x89))


*(REACH(x127, x126, s(x88), x89, x89)_>=_IF1(eq(x127, x126), x127, x126, s(x88), x89, x89)  ==>  REACH(s(x127), s(x126), s(x88), x89, x89)_>=_IF1(eq(s(x127), s(x126)), s(x127), s(x126), s(x88), x89, x89))




*IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3)

*(IF1(false, x94, x95, s(0), edge(x101, x102, x143), edge(x101, x102, x143))_>=_IF2(le(s(0), size(edge(x101, x102, x143))), x94, x95, s(0), edge(x101, x102, x143), edge(x101, x102, x143)))


*(IF1(false, x94, x95, s(x162), edge(x101, x102, x168), edge(x101, x102, x168))_>=_IF2(le(s(x162), size(edge(x101, x102, x168))), x94, x95, s(x162), edge(x101, x102, x168), edge(x101, x102, x168))  ==>  IF1(false, x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168)))_>=_IF2(le(s(s(x162)), size(edge(x101, x102, edge(x170, x169, x168)))), x94, x95, s(s(x162)), edge(x101, x102, edge(x170, x169, x168)), edge(x101, x102, edge(x170, x169, x168))))


*(IF1(false, x105, x106, s(0), edge(x112, x113, x195), edge(x112, x113, x195))_>=_IF2(le(s(0), size(edge(x112, x113, x195))), x105, x106, s(0), edge(x112, x113, x195), edge(x112, x113, x195)))


*(IF1(false, x105, x106, s(x214), edge(x112, x113, x220), edge(x112, x113, x220))_>=_IF2(le(s(x214), size(edge(x112, x113, x220))), x105, x106, s(x214), edge(x112, x113, x220), edge(x112, x113, x220))  ==>  IF1(false, x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220)))_>=_IF2(le(s(s(x214)), size(edge(x112, x113, edge(x222, x221, x220)))), x105, x106, s(s(x214)), edge(x112, x113, edge(x222, x221, x220)), edge(x112, x113, edge(x222, x221, x220))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IF1(x_1, x_2, x_3, x_4, x_5, x_6)) = -1 - x_1 - x_4 + x_5
   POL(IF2(x_1, x_2, x_3, x_4, x_5, x_6)) = -1 - x_1 - x_4 + x_6
   POL(REACH(x_1, x_2, x_3, x_4, x_5)) = -1 - x_3 + x_4
   POL(c) = -2
   POL(edge(x_1, x_2, x_3)) = 1 + x_3
   POL(empty) = 1
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(le(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(size(x_1)) = 0
   POL(true) = 0


The following pairs  are in P_>:
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)
The following pairs are in P_bound:
   IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3)
The following rules are usable:
   false -> eq(0, s(x))
   false -> eq(s(x), 0)
   eq(x, y) -> eq(s(x), s(y))
   le(x, y) -> le(s(x), s(y))
   true -> le(0, y)

----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)
   IF1(false, z0, z1, s(z2), z3, z3) -> IF2(le(s(z2), size(z3)), z0, z1, s(z2), z3, z3)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 > 5, 6 >= 6


----------------------------------------

(51)
YES

----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
   IF2(true, x, y, c, edge(u, v, i), j) -> REACH(v, y, s(c), j, j)
   REACH(z4, z1, s(z2), z6, z6) -> IF1(eq(z4, z1), z4, z1, s(z2), z6, z6)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

The TRS R consists of the following rules:

   size(empty) -> 0
   size(edge(x, y, i)) -> s(size(i))
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   size(empty)
   size(edge(x0, x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF2(true, x, y, c, edge(u, v, i), j) -> IF2(true, x, y, c, i, j)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 > 5, 6 >= 6


----------------------------------------

(60)
YES
