YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Rh6b7.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) RFCMatchBoundsTRSProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(n__f(n__a)) -> f(n__g(f(n__a)))
   f(X) -> n__f(X)
   a -> n__a
   g(X) -> n__g(X)
   activate(n__f(X)) -> f(X)
   activate(n__a) -> a
   activate(n__g(X)) -> g(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   n__a'(n__f(f(x))) -> n__a'(f(n__g(f(x))))
   f(X) -> n__f(X)
   a'(x) -> n__a'(x)
   g(X) -> n__g(X)
   n__f(activate(X)) -> f(X)
   n__a'(activate(x)) -> a'(x)
   n__g(activate(X)) -> g(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(3) RFCMatchBoundsTRSProof (EQUIVALENT)
Termination of the TRS R could be shown with a Match Bound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies Q-termination of R.
The following rules were used to construct the certificate:

   n__a'(n__f(f(x))) -> n__a'(f(n__g(f(x))))
   f(X) -> n__f(X)
   a'(x) -> n__a'(x)
   g(X) -> n__g(X)
   n__f(activate(X)) -> f(X)
   n__a'(activate(x)) -> a'(x)
   n__g(activate(X)) -> g(X)
   activate(X) -> X

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
3, 4, 5, 6, 7, 8, 9, 10

Node 3 is start node and node 4 is final node.

Those nodes are connected through the following edges:

* 3 to 5 labelled n__a'_1(0)* 3 to 4 labelled n__f_1(0), n__a'_1(0), n__g_1(0), f_1(0), a'_1(0), g_1(0), activate_1(0), n__f_1(1), n__a'_1(1), n__g_1(1), f_1(1), a'_1(1), g_1(1), activate_1(1), n__f_1(2), n__a'_1(2), n__g_1(2)* 3 to 8 labelled n__a'_1(1)* 4 to 4 labelled #_1(0)* 5 to 6 labelled f_1(0), n__f_1(1)* 6 to 7 labelled n__g_1(0)* 7 to 4 labelled f_1(0), n__f_1(1), f_1(1), n__f_1(2)* 8 to 9 labelled f_1(1), n__f_1(2)* 9 to 10 labelled n__g_1(1)* 10 to 4 labelled f_1(1), n__f_1(2)


----------------------------------------

(4)
YES
