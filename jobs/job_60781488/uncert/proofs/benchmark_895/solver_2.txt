NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/1cTja.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) TransformationProof [EQUIVALENT, 0 ms]
(8) QDP
(9) TransformationProof [EQUIVALENT, 0 ms]
(10) QDP
(11) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
(12) QDP
(13) TransformationProof [EQUIVALENT, 0 ms]
(14) QDP
(15) NonTerminationLoopProof [COMPLETE, 0 ms]
(16) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   h(X) -> g(X, X)
   g(a, X) -> f(b, activate(X))
   f(X, X) -> h(a)
   a -> b
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(X) -> G(X, X)
   G(a, X) -> F(b, activate(X))
   G(a, X) -> ACTIVATE(X)
   F(X, X) -> H(a)
   F(X, X) -> A

The TRS R consists of the following rules:

   h(X) -> g(X, X)
   g(a, X) -> f(b, activate(X))
   f(X, X) -> h(a)
   a -> b
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(a, X) -> F(b, activate(X))
   F(X, X) -> H(a)
   H(X) -> G(X, X)

The TRS R consists of the following rules:

   h(X) -> g(X, X)
   g(a, X) -> f(b, activate(X))
   f(X, X) -> h(a)
   a -> b
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   h(X) -> g(X, X)
   g(a, X) -> f(b, activate(X))
   f(X, X) -> h(a)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = 2*x_1 + x_2
   POL(G(x_1, x_2)) = x_1 + x_2
   POL(H(x_1)) = 2*x_1
   POL(a) = 0
   POL(activate(x_1)) = x_1
   POL(b) = 0


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(a, X) -> F(b, activate(X))
   F(X, X) -> H(a)
   H(X) -> G(X, X)

The TRS R consists of the following rules:

   a -> b
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule G(a, X) -> F(b, activate(X)) at position [] we obtained the following new rules [LPAR04]:

   (G(a, x0) -> F(b, x0),G(a, x0) -> F(b, x0))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, X) -> H(a)
   H(X) -> G(X, X)
   G(a, x0) -> F(b, x0)

The TRS R consists of the following rules:

   a -> b
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(X, X) -> H(a) we obtained the following new rules [LPAR04]:

   (F(b, b) -> H(a),F(b, b) -> H(a))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(X) -> G(X, X)
   G(a, x0) -> F(b, x0)
   F(b, b) -> H(a)

The TRS R consists of the following rules:

   a -> b
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   activate(X) -> X
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = 2*x_1 + x_2
   POL(G(x_1, x_2)) = x_1 + x_2
   POL(H(x_1)) = 2*x_1
   POL(a) = 0
   POL(b) = 0


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(X) -> G(X, X)
   G(a, x0) -> F(b, x0)
   F(b, b) -> H(a)

The TRS R consists of the following rules:

   a -> b

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule H(X) -> G(X, X) we obtained the following new rules [LPAR04]:

   (H(a) -> G(a, a),H(a) -> G(a, a))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(a, x0) -> F(b, x0)
   F(b, b) -> H(a)
   H(a) -> G(a, a)

The TRS R consists of the following rules:

   a -> b

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(b, a) evaluates to  t =F(b, a)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F(b, a) -> F(b, b)
with rule a -> b at position [1] and matcher [ ]

F(b, b) -> H(a)
with rule F(b, b) -> H(a) at position [] and matcher [ ]

H(a) -> G(a, a)
with rule H(a) -> G(a, a) at position [] and matcher [ ]

G(a, a) -> F(b, a)
with rule G(a, x0) -> F(b, x0)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(16)
NO
