YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6gQoA.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 18 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) ATransformationProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) ATransformationProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QReductionProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) TransformationProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) TransformationProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) TransformationProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPOrderProof [EQUIVALENT, 629 ms]
        (41) QDP
        (42) UsableRulesProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (45) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   inc -> app(map, app(app(curry, plus), app(s, 0)))
   double -> app(map, app(app(curry, times), app(s, app(s, 0))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   inc -> app(map, app(app(curry, plus), app(s, 0)))
   double -> app(map, app(app(curry, times), app(s, app(s, 0))))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(s, x)), y) -> APP(s, app(app(plus, x), y))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(s, x)), y) -> APP(plus, x)
   APP(app(times, app(s, x)), y) -> APP(app(plus, app(app(times, x), y)), y)
   APP(app(times, app(s, x)), y) -> APP(plus, app(app(times, x), y))
   APP(app(times, app(s, x)), y) -> APP(app(times, x), y)
   APP(app(times, app(s, x)), y) -> APP(times, x)
   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(app(curry, g), x), y) -> APP(g, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   INC -> APP(map, app(app(curry, plus), app(s, 0)))
   INC -> APP(app(curry, plus), app(s, 0))
   INC -> APP(curry, plus)
   INC -> APP(s, 0)
   DOUBLE -> APP(map, app(app(curry, times), app(s, app(s, 0))))
   DOUBLE -> APP(app(curry, times), app(s, app(s, 0)))
   DOUBLE -> APP(curry, times)
   DOUBLE -> APP(s, app(s, 0))
   DOUBLE -> APP(s, 0)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   inc -> app(map, app(app(curry, plus), app(s, 0)))
   double -> app(map, app(app(curry, times), app(s, app(s, 0))))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 16 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   inc -> app(map, app(app(curry, plus), app(s, 0)))
   double -> app(map, app(app(curry, times), app(s, app(s, 0))))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inc
   double


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus1(s(x), y) -> plus1(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   curry(x0, x1, x2)
   map(x0, nil)
   map(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   curry(x0, x1, x2)
   map(x0, nil)
   map(x0, cons(x1, x2))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus1(s(x), y) -> plus1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*plus1(s(x), y) -> plus1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(times, app(s, x)), y) -> APP(app(times, x), y)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   inc -> app(map, app(app(curry, plus), app(s, 0)))
   double -> app(map, app(app(curry, times), app(s, app(s, 0))))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(times, app(s, x)), y) -> APP(app(times, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inc
   double


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(times, app(s, x)), y) -> APP(app(times, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   times1(s(x), y) -> times1(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   curry(x0, x1, x2)
   map(x0, nil)
   map(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   curry(x0, x1, x2)
   map(x0, nil)
   map(x0, cons(x1, x2))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   times1(s(x), y) -> times1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*times1(s(x), y) -> times1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(curry, g), x), y) -> APP(g, x)
   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   inc -> app(map, app(app(curry, plus), app(s, 0)))
   double -> app(map, app(app(curry, times), app(s, app(s, 0))))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(curry, g), x), y) -> APP(g, x)
   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   inc
   double

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   inc
   double


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(curry, g), x), y) -> APP(g, x)
   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule APP(app(app(curry, g), x), y) -> APP(g, x) we obtained the following new rules [LPAR04]:

   (APP(app(app(curry, app(app(curry, y_0), y_1)), x1), x2) -> APP(app(app(curry, y_0), y_1), x1),APP(app(app(curry, app(app(curry, y_0), y_1)), x1), x2) -> APP(app(app(curry, y_0), y_1), x1))
   (APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x2) -> APP(app(map, y_0), app(app(cons, y_1), y_2)),APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x2) -> APP(app(map, y_0), app(app(cons, y_1), y_2)))


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(app(curry, app(app(curry, y_0), y_1)), x1), x2) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x2) -> APP(app(map, y_0), app(app(cons, y_1), y_2))

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x) we obtained the following new rules [LPAR04]:

   (APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), x2)) -> APP(app(app(curry, y_0), y_1), x1),APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), x2)) -> APP(app(app(curry, y_0), y_1), x1))
   (APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), x2)) -> APP(app(map, y_0), app(app(cons, y_1), y_2)),APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), x2)) -> APP(app(map, y_0), app(app(cons, y_1), y_2)))
   (APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), x2)) -> APP(app(app(curry, app(app(curry, y_0), y_1)), y_2), x1),APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), x2)) -> APP(app(app(curry, app(app(curry, y_0), y_1)), y_2), x1))
   (APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), x2)) -> APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x1),APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), x2)) -> APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x1))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(app(curry, app(app(curry, y_0), y_1)), x1), x2) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x2) -> APP(app(map, y_0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), x2)) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), x2)) -> APP(app(map, y_0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), x2)) -> APP(app(app(curry, app(app(curry, y_0), y_1)), y_2), x1)
   APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), x2)) -> APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x1)

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs) we obtained the following new rules [LPAR04]:

   (APP(app(map, x0), app(app(cons, x1), app(app(cons, y_1), y_2))) -> APP(app(map, x0), app(app(cons, y_1), y_2)),APP(app(map, x0), app(app(cons, x1), app(app(cons, y_1), y_2))) -> APP(app(map, x0), app(app(cons, y_1), y_2)))
   (APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), app(app(cons, y_2), y_3))) -> APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, y_2), y_3)),APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), app(app(cons, y_2), y_3))) -> APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, y_2), y_3)))
   (APP(app(map, app(map, y_0)), app(app(cons, x1), app(app(cons, app(app(cons, y_1), y_2)), y_3))) -> APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), y_3)),APP(app(map, app(map, y_0)), app(app(cons, x1), app(app(cons, app(app(cons, y_1), y_2)), y_3))) -> APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), y_3)))
   (APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, y_3), y_4)),APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, y_3), y_4)))
   (APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, y_3), y_4)),APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, y_3), y_4)))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(app(curry, app(app(curry, y_0), y_1)), x1), x2) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x2) -> APP(app(map, y_0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), x2)) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), x2)) -> APP(app(map, y_0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), x2)) -> APP(app(app(curry, app(app(curry, y_0), y_1)), y_2), x1)
   APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), x2)) -> APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x1)
   APP(app(map, x0), app(app(cons, x1), app(app(cons, y_1), y_2))) -> APP(app(map, x0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), app(app(cons, y_2), y_3))) -> APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, y_2), y_3))
   APP(app(map, app(map, y_0)), app(app(cons, x1), app(app(cons, app(app(cons, y_1), y_2)), y_3))) -> APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), y_3))
   APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, y_3), y_4))
   APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, y_3), y_4))

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   APP(app(app(curry, g), x), y) -> APP(app(g, x), y)
   APP(app(app(curry, app(app(curry, y_0), y_1)), x1), x2) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x2) -> APP(app(map, y_0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), x2)) -> APP(app(app(curry, y_0), y_1), x1)
   APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), x2)) -> APP(app(map, y_0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), x2)) -> APP(app(app(curry, app(app(curry, y_0), y_1)), y_2), x1)
   APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), x2)) -> APP(app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2)), x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = x_1
   POL(app(x_1, x_2)) = 1 + x_1 + x_1*x_2
   POL(cons) = 0
   POL(curry) = 1
   POL(map) = 1
   POL(nil) = 1
   POL(plus) = 0
   POL(s) = 0
   POL(times) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, x0), app(app(cons, x1), app(app(cons, y_1), y_2))) -> APP(app(map, x0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), app(app(cons, y_2), y_3))) -> APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, y_2), y_3))
   APP(app(map, app(map, y_0)), app(app(cons, x1), app(app(cons, app(app(cons, y_1), y_2)), y_3))) -> APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), y_3))
   APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, y_3), y_4))
   APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, y_3), y_4))

The TRS R consists of the following rules:

   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(times, 0), y) -> 0
   app(app(times, app(s, x)), y) -> app(app(plus, app(app(times, x), y)), y)
   app(app(app(curry, g), x), y) -> app(app(g, x), y)
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, x0), app(app(cons, x1), app(app(cons, y_1), y_2))) -> APP(app(map, x0), app(app(cons, y_1), y_2))
   APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), app(app(cons, y_2), y_3))) -> APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, y_2), y_3))
   APP(app(map, app(map, y_0)), app(app(cons, x1), app(app(cons, app(app(cons, y_1), y_2)), y_3))) -> APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), y_3))
   APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, y_3), y_4))
   APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, y_3), y_4))

R is empty.
The set Q consists of the following terms:

   app(app(plus, 0), x0)
   app(app(plus, app(s, x0)), x1)
   app(app(times, 0), x0)
   app(app(times, app(s, x0)), x1)
   app(app(app(curry, x0), x1), x2)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(map, app(map, y_0)), app(app(cons, x1), app(app(cons, app(app(cons, y_1), y_2)), y_3))) -> APP(app(map, app(map, y_0)), app(app(cons, app(app(cons, y_1), y_2)), y_3))
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, x0), app(app(cons, x1), app(app(cons, y_1), y_2))) -> APP(app(map, x0), app(app(cons, y_1), y_2))
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(map, y_0)), app(app(cons, y_1), y_2))), app(app(cons, y_3), y_4))
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, x1), app(app(cons, y_2), y_3))) -> APP(app(map, app(app(curry, y_0), y_1)), app(app(cons, y_2), y_3))
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, x1), app(app(cons, y_3), y_4))) -> APP(app(map, app(app(curry, app(app(curry, y_0), y_1)), y_2)), app(app(cons, y_3), y_4))
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(45)
YES
