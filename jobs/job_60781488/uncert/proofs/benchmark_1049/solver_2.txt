YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZROAW.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) MNOCProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) MNOCProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) QDPOrderProof [EQUIVALENT, 16 ms]
        (25) QDP
        (26) PisEmptyProof [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   geq(X, n__0) -> true
   geq(n__0, n__s(Y)) -> false
   geq(n__s(X), n__s(Y)) -> geq(activate(X), activate(Y))
   div(0, n__s(Y)) -> 0
   div(s(X), n__s(Y)) -> if(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   0 -> n__0
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(n__0, Y) -> 0^1
   MINUS(n__s(X), n__s(Y)) -> MINUS(activate(X), activate(Y))
   MINUS(n__s(X), n__s(Y)) -> ACTIVATE(X)
   MINUS(n__s(X), n__s(Y)) -> ACTIVATE(Y)
   GEQ(n__s(X), n__s(Y)) -> GEQ(activate(X), activate(Y))
   GEQ(n__s(X), n__s(Y)) -> ACTIVATE(X)
   GEQ(n__s(X), n__s(Y)) -> ACTIVATE(Y)
   DIV(s(X), n__s(Y)) -> IF(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   DIV(s(X), n__s(Y)) -> GEQ(X, activate(Y))
   DIV(s(X), n__s(Y)) -> ACTIVATE(Y)
   DIV(s(X), n__s(Y)) -> DIV(minus(X, activate(Y)), n__s(activate(Y)))
   DIV(s(X), n__s(Y)) -> MINUS(X, activate(Y))
   IF(true, X, Y) -> ACTIVATE(X)
   IF(false, X, Y) -> ACTIVATE(Y)
   ACTIVATE(n__0) -> 0^1
   ACTIVATE(n__s(X)) -> S(X)

The TRS R consists of the following rules:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   geq(X, n__0) -> true
   geq(n__0, n__s(Y)) -> false
   geq(n__s(X), n__s(Y)) -> geq(activate(X), activate(Y))
   div(0, n__s(Y)) -> 0
   div(s(X), n__s(Y)) -> if(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   0 -> n__0
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 13 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(n__s(X), n__s(Y)) -> GEQ(activate(X), activate(Y))

The TRS R consists of the following rules:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   geq(X, n__0) -> true
   geq(n__0, n__s(Y)) -> false
   geq(n__s(X), n__s(Y)) -> geq(activate(X), activate(Y))
   div(0, n__s(Y)) -> 0
   div(s(X), n__s(Y)) -> if(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   0 -> n__0
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(n__s(X), n__s(Y)) -> GEQ(activate(X), activate(Y))

The TRS R consists of the following rules:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   s(X) -> n__s(X)
   0 -> n__0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(n__s(X), n__s(Y)) -> GEQ(activate(X), activate(Y))

The TRS R consists of the following rules:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   s(X) -> n__s(X)
   0 -> n__0

The set Q consists of the following terms:

   activate(x0)
   s(x0)
   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   GEQ(n__s(X), n__s(Y)) -> GEQ(activate(X), activate(Y))

Strictly oriented rules of the TRS R:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   s(X) -> n__s(X)
   0 -> n__0

Used ordering: Knuth-Bendix order [KBO] with precedence:GEQ_2 > s_1 > n__s_1 > 0 > activate_1 > n__0

and weight map:

   n__0=1
   0=1
   activate_1=1
   n__s_1=1
   s_1=1
   GEQ_2=0

The variable weight is 1

----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   activate(x0)
   s(x0)
   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(n__s(X), n__s(Y)) -> MINUS(activate(X), activate(Y))

The TRS R consists of the following rules:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   geq(X, n__0) -> true
   geq(n__0, n__s(Y)) -> false
   geq(n__s(X), n__s(Y)) -> geq(activate(X), activate(Y))
   div(0, n__s(Y)) -> 0
   div(s(X), n__s(Y)) -> if(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   0 -> n__0
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(n__s(X), n__s(Y)) -> MINUS(activate(X), activate(Y))

The TRS R consists of the following rules:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   s(X) -> n__s(X)
   0 -> n__0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(n__s(X), n__s(Y)) -> MINUS(activate(X), activate(Y))

The TRS R consists of the following rules:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   s(X) -> n__s(X)
   0 -> n__0

The set Q consists of the following terms:

   activate(x0)
   s(x0)
   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(n__s(X), n__s(Y)) -> MINUS(activate(X), activate(Y))

Strictly oriented rules of the TRS R:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   s(X) -> n__s(X)
   0 -> n__0

Used ordering: Knuth-Bendix order [KBO] with precedence:MINUS_2 > s_1 > n__s_1 > 0 > activate_1 > n__0

and weight map:

   n__0=1
   0=1
   activate_1=1
   n__s_1=1
   s_1=1
   MINUS_2=0

The variable weight is 1

----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   activate(x0)
   s(x0)
   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(X), n__s(Y)) -> DIV(minus(X, activate(Y)), n__s(activate(Y)))

The TRS R consists of the following rules:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   geq(X, n__0) -> true
   geq(n__0, n__s(Y)) -> false
   geq(n__s(X), n__s(Y)) -> geq(activate(X), activate(Y))
   div(0, n__s(Y)) -> 0
   div(s(X), n__s(Y)) -> if(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   0 -> n__0
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DIV(s(X), n__s(Y)) -> DIV(minus(X, activate(Y)), n__s(activate(Y)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
DIV(x1, x2)  =  x1

s(x1)  =  s

minus(x1, x2)  =  minus

0  =  0

n__0  =  n__0


Knuth-Bendix order [KBO] with precedence:s > minus > 0 > n__0

and weight map:

   s=1
   0=1
   minus=1
   n__0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   0 -> n__0


----------------------------------------

(25)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(n__0, Y) -> 0
   minus(n__s(X), n__s(Y)) -> minus(activate(X), activate(Y))
   geq(X, n__0) -> true
   geq(n__0, n__s(Y)) -> false
   geq(n__s(X), n__s(Y)) -> geq(activate(X), activate(Y))
   div(0, n__s(Y)) -> 0
   div(s(X), n__s(Y)) -> if(geq(X, activate(Y)), n__s(div(minus(X, activate(Y)), n__s(activate(Y)))), n__0)
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   0 -> n__0
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(27)
YES
