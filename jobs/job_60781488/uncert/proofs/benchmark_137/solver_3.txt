YES

Problem 1: 

(VAR vu95NonEmpty fun x xs y)
(RULES
app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
app(app(filter,fun),nil) -> nil
app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
app(app(map,fun),nil) -> nil
app(f,app(s,x)) -> app(f,x)
app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
app(g,app(app(cons,num0),y)) -> app(g,y)
app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(f,app(s,x)) -> APP(f,x)
 APP(g,app(app(cons,num0),y)) -> APP(g,y)
 APP(h,app(app(cons,x),y)) -> APP(g,app(app(cons,x),y))
 APP(h,app(app(cons,x),y)) -> APP(h,app(g,app(app(cons,x),y)))
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(f,app(s,x)) -> APP(f,x)
 APP(g,app(app(cons,num0),y)) -> APP(g,y)
 APP(h,app(app(cons,x),y)) -> APP(g,app(app(cons,x),y))
 APP(h,app(app(cons,x),y)) -> APP(h,app(g,app(app(cons,x),y)))
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(g,app(app(cons,num0),y)) -> APP(g,y)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->->Cycle:
->->-> Pairs:
 APP(h,app(app(cons,x),y)) -> APP(h,app(g,app(app(cons,x),y)))
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->->Cycle:
->->-> Pairs:
 APP(f,app(s,x)) -> APP(f,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->->Cycle:
->->-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))


The problem is decomposed in 4 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(g,app(app(cons,num0),y)) -> APP(g,y)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 APP(h,app(app(cons,x),y)) -> APP(h,app(g,app(app(cons,x),y)))
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
-> Usable rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = X1 + 1
[num0] = 0
[cons] = 2
[f] = 0
[fSNonEmpty] = 0
[ffalse] = 2
[filter] = 2
[filter2] = 0
[g] = 2
[h] = 0
[map] = 2
[nil] = 2
[s] = 2
[ftrue] = 1
[APP](X1,X2) = X2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Projection:
 pi(APP) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Projection:
 pi(APP) = 2

Problem 1.4: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(g,app(app(cons,app(s,x)),y)) -> app(s,x)
 app(g,app(app(cons,num0),y)) -> app(g,y)
 app(h,app(app(cons,x),y)) -> app(h,app(g,app(app(cons,x),y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
