YES

Problem 1: 

(VAR vu95NonEmpty k m n x)
(RULES
eq(num0,num0) -> ftrue
eq(num0,s(m)) -> ffalse
eq(s(n),num0) -> ffalse
eq(s(n),s(m)) -> eq(n,m)
ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
le(num0,m) -> ftrue
le(s(n),num0) -> ffalse
le(s(n),s(m)) -> le(n,m)
min(cons(num0,nil)) -> num0
min(cons(s(n),nil)) -> s(n)
min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
replace(n,m,nil) -> nil
sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
sort(nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 EQ(s(n),s(m)) -> EQ(n,m)
 IFU95MIN(ffalse,cons(n,cons(m,x))) -> MIN(cons(m,x))
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 IFU95REPLACE(ffalse,n,m,cons(k,x)) -> REPLACE(n,m,x)
 LE(s(n),s(m)) -> LE(n,m)
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
 MIN(cons(n,cons(m,x))) -> LE(n,m)
 REPLACE(n,m,cons(k,x)) -> EQ(n,k)
 REPLACE(n,m,cons(k,x)) -> IFU95REPLACE(eq(n,k),n,m,cons(k,x))
 SORT(cons(n,x)) -> MIN(cons(n,x))
 SORT(cons(n,x)) -> REPLACE(min(cons(n,x)),n,x)
 SORT(cons(n,x)) -> SORT(replace(min(cons(n,x)),n,x))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 EQ(s(n),s(m)) -> EQ(n,m)
 IFU95MIN(ffalse,cons(n,cons(m,x))) -> MIN(cons(m,x))
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 IFU95REPLACE(ffalse,n,m,cons(k,x)) -> REPLACE(n,m,x)
 LE(s(n),s(m)) -> LE(n,m)
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
 MIN(cons(n,cons(m,x))) -> LE(n,m)
 REPLACE(n,m,cons(k,x)) -> EQ(n,k)
 REPLACE(n,m,cons(k,x)) -> IFU95REPLACE(eq(n,k),n,m,cons(k,x))
 SORT(cons(n,x)) -> MIN(cons(n,x))
 SORT(cons(n,x)) -> REPLACE(min(cons(n,x)),n,x)
 SORT(cons(n,x)) -> SORT(replace(min(cons(n,x)),n,x))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(n),s(m)) -> LE(n,m)
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->->Cycle:
->->-> Pairs:
 IFU95MIN(ffalse,cons(n,cons(m,x))) -> MIN(cons(m,x))
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->->Cycle:
->->-> Pairs:
 EQ(s(n),s(m)) -> EQ(n,m)
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->->Cycle:
->->-> Pairs:
 IFU95REPLACE(ffalse,n,m,cons(k,x)) -> REPLACE(n,m,x)
 REPLACE(n,m,cons(k,x)) -> IFU95REPLACE(eq(n,k),n,m,cons(k,x))
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->->Cycle:
->->-> Pairs:
 SORT(cons(n,x)) -> SORT(replace(min(cons(n,x)),n,x))
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil


The problem is decomposed in 5 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LE(s(n),s(m)) -> LE(n,m)
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Projection:
 pi(LE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 IFU95MIN(ffalse,cons(n,cons(m,x))) -> MIN(cons(m,x))
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
-> Usable rules:
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[eq](X1,X2) = 0
[ifu95min](X1,X2) = 0
[ifu95replace](X1,X2,X3,X4) = 0
[le](X1,X2) = 1
[min](X) = 0
[replace](X1,X2,X3) = 0
[sort](X) = 0
[num0] = 2
[cons](X1,X2) = X2 + 2
[fSNonEmpty] = 0
[ffalse] = 1
[nil] = 0
[s](X) = X + 1
[ftrue] = 1
[EQ](X1,X2) = 0
[IFU95MIN](X1,X2) = 2.X1 + 2.X2
[IFU95REPLACE](X1,X2,X3,X4) = 0
[LE](X1,X2) = 0
[MIN](X) = 2.X + 2
[REPLACE](X1,X2,X3) = 0
[SORT](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 IFU95MIN(ftrue,cons(n,cons(m,x))) -> MIN(cons(n,x))
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
-> Usable rules:
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[eq](X1,X2) = 0
[ifu95min](X1,X2) = 0
[ifu95replace](X1,X2,X3,X4) = 0
[le](X1,X2) = 2
[min](X) = 0
[replace](X1,X2,X3) = 0
[sort](X) = 0
[num0] = 0
[cons](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[s](X) = 2.X + 2
[ftrue] = 2
[EQ](X1,X2) = 0
[IFU95MIN](X1,X2) = 2.X1 + X2 + 2
[IFU95REPLACE](X1,X2,X3,X4) = 0
[LE](X1,X2) = 0
[MIN](X) = 2.X + 2
[REPLACE](X1,X2,X3) = 0
[SORT](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 MIN(cons(n,cons(m,x))) -> IFU95MIN(le(n,m),cons(n,cons(m,x)))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 EQ(s(n),s(m)) -> EQ(n,m)
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Projection:
 pi(EQ) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 IFU95REPLACE(ffalse,n,m,cons(k,x)) -> REPLACE(n,m,x)
 REPLACE(n,m,cons(k,x)) -> IFU95REPLACE(eq(n,k),n,m,cons(k,x))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Projection:
 pi(IFU95REPLACE) = 4
 pi(REPLACE) = 3

Problem 1.4: 

SCC Processor:
-> Pairs:
 REPLACE(n,m,cons(k,x)) -> IFU95REPLACE(eq(n,k),n,m,cons(k,x))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Reduction Pairs Processor:
-> Pairs:
 SORT(cons(n,x)) -> SORT(replace(min(cons(n,x)),n,x))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
-> Usable rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[eq](X1,X2) = 0
[ifu95min](X1,X2) = 2.X1 + X2 + 1
[ifu95replace](X1,X2,X3,X4) = 2.X1 + 2.X4
[le](X1,X2) = 1
[min](X) = 2.X + 2
[replace](X1,X2,X3) = 2.X3
[sort](X) = 0
[num0] = 0
[cons](X1,X2) = 2.X2 + 1
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 2
[s](X) = 0
[ftrue] = 0
[EQ](X1,X2) = 0
[IFU95MIN](X1,X2) = 0
[IFU95REPLACE](X1,X2,X3,X4) = 0
[LE](X1,X2) = 0
[MIN](X) = 0
[REPLACE](X1,X2,X3) = 0
[SORT](X) = 2.X

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(m)) -> ffalse
 eq(s(n),num0) -> ffalse
 eq(s(n),s(m)) -> eq(n,m)
 ifu95min(ffalse,cons(n,cons(m,x))) -> min(cons(m,x))
 ifu95min(ftrue,cons(n,cons(m,x))) -> min(cons(n,x))
 ifu95replace(ffalse,n,m,cons(k,x)) -> cons(k,replace(n,m,x))
 ifu95replace(ftrue,n,m,cons(k,x)) -> cons(m,x)
 le(num0,m) -> ftrue
 le(s(n),num0) -> ffalse
 le(s(n),s(m)) -> le(n,m)
 min(cons(num0,nil)) -> num0
 min(cons(s(n),nil)) -> s(n)
 min(cons(n,cons(m,x))) -> ifu95min(le(n,m),cons(n,cons(m,x)))
 replace(n,m,cons(k,x)) -> ifu95replace(eq(n,k),n,m,cons(k,x))
 replace(n,m,nil) -> nil
 sort(cons(n,x)) -> cons(min(cons(n,x)),sort(replace(min(cons(n,x)),n,x)))
 sort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
