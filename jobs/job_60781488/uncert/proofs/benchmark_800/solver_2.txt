NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/s0Q4V.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) TransformationProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) NonTerminationLoopProof [COMPLETE, 0 ms]
        (14) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(g(x), s(0), y) -> f(y, y, g(x))
   g(s(x)) -> s(g(x))
   g(0) -> 0

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(g(x), s(0), y) -> F(y, y, g(x))
   G(s(x)) -> G(x)

The TRS R consists of the following rules:

   f(g(x), s(0), y) -> f(y, y, g(x))
   g(s(x)) -> s(g(x))
   g(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(s(x)) -> G(x)

The TRS R consists of the following rules:

   f(g(x), s(0), y) -> f(y, y, g(x))
   g(s(x)) -> s(g(x))
   g(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(s(x)) -> G(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*G(s(x)) -> G(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(g(x), s(0), y) -> F(y, y, g(x))

The TRS R consists of the following rules:

   f(g(x), s(0), y) -> f(y, y, g(x))
   g(s(x)) -> s(g(x))
   g(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule F(g(x), s(0), y) -> F(y, y, g(x)) we obtained the following new rules [LPAR04]:

   (F(g(x0), s(0), g(y_0)) -> F(g(y_0), g(y_0), g(x0)),F(g(x0), s(0), g(y_0)) -> F(g(y_0), g(y_0), g(x0)))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(g(x0), s(0), g(y_0)) -> F(g(y_0), g(y_0), g(x0))

The TRS R consists of the following rules:

   f(g(x), s(0), y) -> f(y, y, g(x))
   g(s(x)) -> s(g(x))
   g(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(g(x0), g(s(0)), g(y_0)) evaluates to  t =F(g(y_0), g(y_0), g(x0))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [x0 / s(0), y_0 / s(0)]

--------------------------------------------------------------------------------
Rewriting sequence

F(g(s(0)), g(s(0)), g(s(0))) -> F(g(s(0)), s(g(0)), g(s(0)))
with rule g(s(x)) -> s(g(x)) at position [1] and matcher [x / 0]

F(g(s(0)), s(g(0)), g(s(0))) -> F(g(s(0)), s(0), g(s(0)))
with rule g(0) -> 0 at position [1,0] and matcher [ ]

F(g(s(0)), s(0), g(s(0))) -> F(g(s(0)), g(s(0)), g(s(0)))
with rule F(g(x0), s(0), g(y_0)) -> F(g(y_0), g(y_0), g(x0))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(14)
NO
