YES

Problem 1: 

(VAR vu95NonEmpty N X X1 X2 XS)
(RULES
num2nd(cons(X,XS)) -> head(activate(XS))
activate(nu95u95from(X)) -> from(activate(X))
activate(nu95u95s(X)) -> s(activate(X))
activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
activate(X) -> X
from(X) -> cons(X,nu95u95from(nu95u95s(X)))
from(X) -> nu95u95from(X)
head(cons(X,XS)) -> X
s(X) -> nu95u95s(X)
sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
sel(num0,cons(X,XS)) -> X
take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
take(num0,XS) -> nil
take(X1,X2) -> nu95u95take(X1,X2)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 NUM2ND(cons(X,XS)) -> ACTIVATE(XS)
 NUM2ND(cons(X,XS)) -> HEAD(activate(XS))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95from(X)) -> FROM(activate(X))
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95s(X)) -> S(activate(X))
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 SEL(s(N),cons(X,XS)) -> ACTIVATE(XS)
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)

Problem 1: 

SCC Processor:
-> Pairs:
 NUM2ND(cons(X,XS)) -> ACTIVATE(XS)
 NUM2ND(cons(X,XS)) -> HEAD(activate(XS))
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95from(X)) -> FROM(activate(X))
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95s(X)) -> S(activate(X))
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 SEL(s(N),cons(X,XS)) -> ACTIVATE(XS)
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->->Cycle:
->->-> Pairs:
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95from(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
-> Usable rules:
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 s(X) -> nu95u95s(X)
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[num2nd](X) = 0
[activate](X) = X
[from](X) = X + 2
[head](X) = 0
[s](X) = X
[sel](X1,X2) = 0
[take](X1,X2) = 2.X1 + 2.X2 + 1
[num0] = 2
[cons](X1,X2) = X2
[fSNonEmpty] = 0
[nu95u95from](X) = X + 2
[nu95u95s](X) = X
[nu95u95take](X1,X2) = 2.X1 + 2.X2 + 1
[nil] = 2
[NUM2ND](X) = 0
[ACTIVATE](X) = 2.X + 2
[FROM](X) = 0
[HEAD](X) = 0
[S](X) = 0
[SEL](X1,X2) = 0
[TAKE](X1,X2) = X1 + 2.X2 + 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)

Problem 1.1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95s(X)) -> ACTIVATE(X)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
-> Usable rules:
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 s(X) -> nu95u95s(X)
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[num2nd](X) = 0
[activate](X) = X
[from](X) = 0
[head](X) = 0
[s](X) = 2.X + 2
[sel](X1,X2) = 0
[take](X1,X2) = 2.X1 + 2.X2 + 1
[num0] = 1
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[nu95u95from](X) = 0
[nu95u95s](X) = 2.X + 2
[nu95u95take](X1,X2) = 2.X1 + 2.X2 + 1
[nil] = 2
[NUM2ND](X) = 0
[ACTIVATE](X) = 2.X + 2
[FROM](X) = 0
[HEAD](X) = 0
[S](X) = 0
[SEL](X1,X2) = 0
[TAKE](X1,X2) = 2.X2 + 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)

Problem 1.1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
-> Usable rules:
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 s(X) -> nu95u95s(X)
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[num2nd](X) = 0
[activate](X) = X
[from](X) = 0
[head](X) = 0
[s](X) = 2.X + 1
[sel](X1,X2) = 0
[take](X1,X2) = 2.X1 + X2 + 1
[num0] = 0
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[nu95u95from](X) = 0
[nu95u95s](X) = 2.X + 1
[nu95u95take](X1,X2) = 2.X1 + X2 + 1
[nil] = 1
[NUM2ND](X) = 0
[ACTIVATE](X) = 2.X + 2
[FROM](X) = 0
[HEAD](X) = 0
[S](X) = 0
[SEL](X1,X2) = 0
[TAKE](X1,X2) = 2.X1 + 2.X2 + 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)

Problem 1.1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
-> Usable rules:
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 s(X) -> nu95u95s(X)
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[num2nd](X) = 0
[activate](X) = X
[from](X) = 0
[head](X) = 0
[s](X) = 2.X + 1
[sel](X1,X2) = 0
[take](X1,X2) = 2.X1 + 2.X2 + 1
[num0] = 2
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[nu95u95from](X) = 0
[nu95u95s](X) = 2.X + 1
[nu95u95take](X1,X2) = 2.X1 + 2.X2 + 1
[nil] = 2
[NUM2ND](X) = 0
[ACTIVATE](X) = X + 1
[FROM](X) = 0
[HEAD](X) = 0
[S](X) = 0
[SEL](X1,X2) = 0
[TAKE](X1,X2) = 2.X1 + 2.X2 + 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)

Problem 1.1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(activate(X1),activate(X2))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
-> Usable rules:
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 s(X) -> nu95u95s(X)
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[num2nd](X) = 0
[activate](X) = X
[from](X) = 0
[head](X) = 0
[s](X) = 2.X + 2
[sel](X1,X2) = 0
[take](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 2
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[nu95u95from](X) = 0
[nu95u95s](X) = 2.X + 2
[nu95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[nil] = 1
[NUM2ND](X) = 0
[ACTIVATE](X) = 2.X + 1
[FROM](X) = 0
[HEAD](X) = 0
[S](X) = 0
[SEL](X1,X2) = 0
[TAKE](X1,X2) = X1 + X2

Problem 1.1: 

SCC Processor:
-> Pairs:
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Projection:
 pi(SEL) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(activate(X))
 activate(nu95u95s(X)) -> s(activate(X))
 activate(nu95u95take(X1,X2)) -> take(activate(X1),activate(X2))
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(nu95u95s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 s(X) -> nu95u95s(X)
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 sel(num0,cons(X,XS)) -> X
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(num0,XS) -> nil
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
