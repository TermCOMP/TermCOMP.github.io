YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
log(s(num0)) -> num0
log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
minus(x,num0) -> x
minus(x,s(y)) -> pred(minus(x,y))
pred(s(x)) -> x
quot(num0,s(y)) -> num0
quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
 LOG(s(s(x))) -> QUOT(x,s(s(num0)))
 MINUS(x,s(y)) -> MINUS(x,y)
 MINUS(x,s(y)) -> PRED(minus(x,y))
 QUOT(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))

Problem 1: 

SCC Processor:
-> Pairs:
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
 LOG(s(s(x))) -> QUOT(x,s(s(num0)))
 MINUS(x,s(y)) -> MINUS(x,y)
 MINUS(x,s(y)) -> PRED(minus(x,y))
 QUOT(s(x),s(y)) -> MINUS(x,y)
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(x,s(y)) -> MINUS(x,y)
->->-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->->Cycle:
->->-> Pairs:
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
->->-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->->Cycle:
->->-> Pairs:
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
->->-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MINUS(x,s(y)) -> MINUS(x,y)
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Projection:
 pi(MINUS) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 QUOT(s(x),s(y)) -> QUOT(minus(x,y),s(y))
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
-> Usable rules:
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[log](X) = 0
[minus](X1,X2) = X1
[pred](X) = X
[quot](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[s](X) = 2.X + 1
[LOG](X) = 0
[MINUS](X1,X2) = 0
[PRED](X) = 0
[QUOT](X1,X2) = X1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 LOG(s(s(x))) -> LOG(s(quot(x,s(s(num0)))))
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
-> Usable rules:
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[log](X) = 0
[minus](X1,X2) = X1
[pred](X) = X
[quot](X1,X2) = 2.X1 + 1
[num0] = 2
[fSNonEmpty] = 0
[s](X) = 2.X + 2
[LOG](X) = 2.X
[MINUS](X1,X2) = 0
[PRED](X) = 0
[QUOT](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 log(s(num0)) -> num0
 log(s(s(x))) -> s(log(s(quot(x,s(s(num0))))))
 minus(x,num0) -> x
 minus(x,s(y)) -> pred(minus(x,y))
 pred(s(x)) -> x
 quot(num0,s(y)) -> num0
 quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
