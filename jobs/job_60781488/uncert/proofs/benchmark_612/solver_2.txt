YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zfFWy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) TransformationProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QDPOrderProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) PisEmptyProof [EQUIVALENT, 0 ms]
        (42) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIVISION(x, y) -> DIV(x, y, 0)
   DIV(x, y, z) -> IF(lt(x, y), x, y, inc(z))
   DIV(x, y, z) -> LT(x, y)
   DIV(x, y, z) -> INC(z)
   IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z)
   IF(false, x, s(y), z) -> MINUS(x, s(y))
   MINUS(s(x), s(y)) -> MINUS(x, y)
   LT(s(x), s(y)) -> LT(x, y)
   INC(s(x)) -> INC(x)

The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

R is empty.
The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INC(s(x)) -> INC(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(x), s(y)) -> LT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z)
   DIV(x, y, z) -> IF(lt(x, y), x, y, inc(z))

The TRS R consists of the following rules:

   division(x, y) -> div(x, y, 0)
   div(x, y, z) -> if(lt(x, y), x, y, inc(z))
   if(true, x, y, z) -> z
   if(false, x, s(y), z) -> div(minus(x, s(y)), s(y), z)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z)
   DIV(x, y, z) -> IF(lt(x, y), x, y, inc(z))

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)
   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   division(x0, x1)
   div(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, s(x1), x2)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z)
   DIV(x, y, z) -> IF(lt(x, y), x, y, inc(z))

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule DIV(x, y, z) -> IF(lt(x, y), x, y, inc(z)) at position [0] we obtained the following new rules [LPAR04]:

   (DIV(x0, 0, y2) -> IF(false, x0, 0, inc(y2)),DIV(x0, 0, y2) -> IF(false, x0, 0, inc(y2)))
   (DIV(0, s(x0), y2) -> IF(true, 0, s(x0), inc(y2)),DIV(0, s(x0), y2) -> IF(true, 0, s(x0), inc(y2)))
   (DIV(s(x0), s(x1), y2) -> IF(lt(x0, x1), s(x0), s(x1), inc(y2)),DIV(s(x0), s(x1), y2) -> IF(lt(x0, x1), s(x0), s(x1), inc(y2)))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z)
   DIV(x0, 0, y2) -> IF(false, x0, 0, inc(y2))
   DIV(0, s(x0), y2) -> IF(true, 0, s(x0), inc(y2))
   DIV(s(x0), s(x1), y2) -> IF(lt(x0, x1), s(x0), s(x1), inc(y2))

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(x1), y2) -> IF(lt(x0, x1), s(x0), s(x1), inc(y2))
   IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z)

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(false, x, s(y), z) -> DIV(minus(x, s(y)), s(y), z) at position [0] we obtained the following new rules [LPAR04]:

   (IF(false, s(x0), s(x1), y2) -> DIV(minus(x0, x1), s(x1), y2),IF(false, s(x0), s(x1), y2) -> DIV(minus(x0, x1), s(x1), y2))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(x1), y2) -> IF(lt(x0, x1), s(x0), s(x1), inc(y2))
   IF(false, s(x0), s(x1), y2) -> DIV(minus(x0, x1), s(x1), y2)

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DIV(s(x0), s(x1), y2) -> IF(lt(x0, x1), s(x0), s(x1), inc(y2))
   IF(false, s(x0), s(x1), y2) -> DIV(minus(x0, x1), s(x1), y2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( IF_4(x_1, ..., x_4) ) = max{0, 2x_1 + x_2 + 2x_3 - 2}
POL( lt_2(x_1, x_2) ) = x_1
POL( 0 ) = 0
POL( false ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( true ) = 0
POL( inc_1(x_1) ) = 0
POL( DIV_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( minus_2(x_1, x_2) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x


----------------------------------------

(40)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   inc(0) -> s(0)
   inc(s(x)) -> s(inc(x))
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   inc(0)
   inc(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(42)
YES
