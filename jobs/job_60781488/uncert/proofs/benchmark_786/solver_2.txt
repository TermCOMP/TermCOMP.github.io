NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Tn0jU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) TransformationProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) NonTerminationLoopProof [COMPLETE, 0 ms]
        (18) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(s(0), g(x)) -> f(x, g(x))
   g(s(x)) -> g(x)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(0), g(x)) -> F(x, g(x))
   G(s(x)) -> G(x)

The TRS R consists of the following rules:

   f(s(0), g(x)) -> f(x, g(x))
   g(s(x)) -> g(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(s(x)) -> G(x)

The TRS R consists of the following rules:

   f(s(0), g(x)) -> f(x, g(x))
   g(s(x)) -> g(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(s(x)) -> G(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*G(s(x)) -> G(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(0), g(x)) -> F(x, g(x))

The TRS R consists of the following rules:

   f(s(0), g(x)) -> f(x, g(x))
   g(s(x)) -> g(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule F(s(0), g(x)) -> F(x, g(x)) we obtained the following new rules [LPAR04]:

   (F(s(0), g(s(0))) -> F(s(0), g(s(0))),F(s(0), g(s(0))) -> F(s(0), g(s(0))))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(0), g(s(0))) -> F(s(0), g(s(0)))

The TRS R consists of the following rules:

   f(s(0), g(x)) -> f(x, g(x))
   g(s(x)) -> g(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(0), g(s(0))) -> F(s(0), g(s(0)))

The TRS R consists of the following rules:

   g(s(x)) -> g(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   g(s(x)) -> g(x)

Used ordering: Knuth-Bendix order [KBO] with precedence:s_1 > 0 > F_2 > g_1

and weight map:

   0=1
   g_1=1
   s_1=0
   F_2=0

The variable weight is 1

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(0), g(s(0))) -> F(s(0), g(s(0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F(s(0), g(s(0))) evaluates to  t =F(s(0), g(s(0)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F(s(0), g(s(0))) to F(s(0), g(s(0))).




----------------------------------------

(18)
NO
