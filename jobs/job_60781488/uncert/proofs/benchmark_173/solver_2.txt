YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xKs0J.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) QDP
        (43) UsableRulesProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) QReductionProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (48) YES
    (49) QDP
        (50) UsableRulesProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) QReductionProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (55) YES
    (56) QDP
        (57) UsableRulesProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) QReductionProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (62) YES
    (63) QDP
        (64) UsableRulesProof [EQUIVALENT, 0 ms]
        (65) QDP
        (66) QReductionProof [EQUIVALENT, 0 ms]
        (67) QDP
        (68) TransformationProof [EQUIVALENT, 0 ms]
        (69) QDP
        (70) DependencyGraphProof [EQUIVALENT, 0 ms]
        (71) QDP
        (72) TransformationProof [EQUIVALENT, 0 ms]
        (73) QDP
        (74) DependencyGraphProof [EQUIVALENT, 0 ms]
        (75) QDP
        (76) TransformationProof [EQUIVALENT, 0 ms]
        (77) QDP
        (78) TransformationProof [EQUIVALENT, 0 ms]
        (79) QDP
        (80) TransformationProof [EQUIVALENT, 0 ms]
        (81) QDP
        (82) TransformationProof [EQUIVALENT, 0 ms]
        (83) QDP
        (84) DependencyGraphProof [EQUIVALENT, 0 ms]
        (85) QDP
        (86) TransformationProof [EQUIVALENT, 0 ms]
        (87) QDP
        (88) TransformationProof [EQUIVALENT, 0 ms]
        (89) QDP
        (90) TransformationProof [EQUIVALENT, 0 ms]
        (91) QDP
        (92) TransformationProof [EQUIVALENT, 0 ms]
        (93) QDP
        (94) DependencyGraphProof [EQUIVALENT, 0 ms]
        (95) AND
            (96) QDP
                (97) TransformationProof [EQUIVALENT, 0 ms]
                (98) QDP
                (99) TransformationProof [EQUIVALENT, 0 ms]
                (100) QDP
                (101) QDPOrderProof [EQUIVALENT, 49 ms]
                (102) QDP
                (103) PisEmptyProof [EQUIVALENT, 0 ms]
                (104) YES
            (105) QDP
                (106) UsableRulesProof [EQUIVALENT, 0 ms]
                (107) QDP
                (108) TransformationProof [EQUIVALENT, 0 ms]
                (109) QDP
                (110) TransformationProof [EQUIVALENT, 0 ms]
                (111) QDP
                (112) MRRProof [EQUIVALENT, 0 ms]
                (113) QDP
                (114) DependencyGraphProof [EQUIVALENT, 0 ms]
                (115) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), 0) -> GE(x, 0)
   GE(0, s(s(x))) -> GE(0, s(x))
   GE(s(x), s(y)) -> GE(x, y)
   MINUS(0, s(x)) -> MINUS(0, x)
   MINUS(s(x), 0) -> MINUS(x, 0)
   MINUS(s(x), s(y)) -> MINUS(x, y)
   PLUS(0, s(x)) -> PLUS(0, x)
   PLUS(s(x), y) -> PLUS(x, y)
   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   DIV(x, y) -> GE(y, s(0))
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IFY(true, x, y) -> GE(x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)
   IF(true, x, y) -> MINUS(x, y)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 9 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(0, s(x)) -> PLUS(0, x)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(0, s(x)) -> PLUS(0, x)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(0, s(x)) -> PLUS(0, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(0, s(x)) -> PLUS(0, x)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), 0) -> MINUS(x, 0)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), 0) -> MINUS(x, 0)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), 0) -> MINUS(x, 0)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), 0) -> MINUS(x, 0)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(0, s(x)) -> MINUS(0, x)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(0, s(x)) -> MINUS(0, x)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(0, s(x)) -> MINUS(0, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(0, s(x)) -> MINUS(0, x)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0, s(s(x))) -> GE(0, s(x))

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0, s(s(x))) -> GE(0, s(x))

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0, s(s(x))) -> GE(0, s(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(0, s(s(x))) -> GE(0, s(x))
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(48)
YES

----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), 0) -> GE(x, 0)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), 0) -> GE(x, 0)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), 0) -> GE(x, 0)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(x), 0) -> GE(x, 0)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(55)
YES

----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(x), s(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(62)
YES

----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   plus(0, 0) -> 0
   plus(0, s(x)) -> s(plus(0, x))
   plus(s(x), y) -> s(plus(x, y))
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))
   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, 0)
   plus(0, s(x0))
   plus(s(x0), x1)
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule DIV(x, y) -> IFY(ge(y, s(0)), x, y) at position [0] we obtained the following new rules [LPAR04]:

   (DIV(y0, 0) -> IFY(false, y0, 0),DIV(y0, 0) -> IFY(false, y0, 0))
   (DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0)),DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0)))


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)
   DIV(y0, 0) -> IFY(false, y0, 0)
   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(70) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> DIV(minus(x, y), y)
   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))
   IFY(true, x, y) -> IF(ge(x, y), x, y)

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(72) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IFY(true, x, y) -> IF(ge(x, y), x, y) at position [0] we obtained the following new rules [LPAR04]:

   (IFY(true, 0, 0) -> IF(true, 0, 0),IFY(true, 0, 0) -> IF(true, 0, 0))
   (IFY(true, s(x0), 0) -> IF(ge(x0, 0), s(x0), 0),IFY(true, s(x0), 0) -> IF(ge(x0, 0), s(x0), 0))
   (IFY(true, 0, s(0)) -> IF(false, 0, s(0)),IFY(true, 0, s(0)) -> IF(false, 0, s(0)))
   (IFY(true, 0, s(s(x0))) -> IF(ge(0, s(x0)), 0, s(s(x0))),IFY(true, 0, s(s(x0))) -> IF(ge(0, s(x0)), 0, s(s(x0))))
   (IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1)),IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1)))


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> DIV(minus(x, y), y)
   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))
   IFY(true, 0, 0) -> IF(true, 0, 0)
   IFY(true, s(x0), 0) -> IF(ge(x0, 0), s(x0), 0)
   IFY(true, 0, s(0)) -> IF(false, 0, s(0))
   IFY(true, 0, s(s(x0))) -> IF(ge(0, s(x0)), 0, s(s(x0)))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF(true, x, y) -> DIV(minus(x, y), y) we obtained the following new rules [LPAR04]:

   (IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1)),IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1)))


----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1)) at position [0] we obtained the following new rules [LPAR04]:

   (IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1)),IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1)))


----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0)) we obtained the following new rules [LPAR04]:

   (DIV(s(y_1), s(x1)) -> IFY(ge(x1, 0), s(y_1), s(x1)),DIV(s(y_1), s(x1)) -> IFY(ge(x1, 0), s(y_1), s(x1)))


----------------------------------------

(81)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1))
   DIV(s(y_1), s(x1)) -> IFY(ge(x1, 0), s(y_1), s(x1))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(82) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1)) at position [0] we obtained the following new rules [LPAR04]:

   (IF(true, s(0), s(0)) -> DIV(0, s(0)),IF(true, s(0), s(0)) -> DIV(0, s(0)))
   (IF(true, s(0), s(s(x0))) -> DIV(minus(0, x0), s(s(x0))),IF(true, s(0), s(s(x0))) -> DIV(minus(0, x0), s(s(x0))))
   (IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0)),IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0)))
   (IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1))),IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1))))


----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   DIV(s(y_1), s(x1)) -> IFY(ge(x1, 0), s(y_1), s(x1))
   IF(true, s(0), s(0)) -> DIV(0, s(0))
   IF(true, s(0), s(s(x0))) -> DIV(minus(0, x0), s(s(x0)))
   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(84) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   DIV(s(y_1), s(x1)) -> IFY(ge(x1, 0), s(y_1), s(x1))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(86) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DIV(s(y_1), s(x1)) -> IFY(ge(x1, 0), s(y_1), s(x1)) we obtained the following new rules [LPAR04]:

   (DIV(s(y_0), s(0)) -> IFY(ge(0, 0), s(y_0), s(0)),DIV(s(y_0), s(0)) -> IFY(ge(0, 0), s(y_0), s(0)))
   (DIV(s(x0), s(s(z1))) -> IFY(ge(s(z1), 0), s(x0), s(s(z1))),DIV(s(x0), s(s(z1))) -> IFY(ge(s(z1), 0), s(x0), s(s(z1))))


----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   DIV(s(y_0), s(0)) -> IFY(ge(0, 0), s(y_0), s(0))
   DIV(s(x0), s(s(z1))) -> IFY(ge(s(z1), 0), s(x0), s(s(z1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(88) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule DIV(s(y_0), s(0)) -> IFY(ge(0, 0), s(y_0), s(0)) at position [0] we obtained the following new rules [LPAR04]:

   (DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0)),DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0)))


----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   DIV(s(x0), s(s(z1))) -> IFY(ge(s(z1), 0), s(x0), s(s(z1)))
   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(90) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule DIV(s(x0), s(s(z1))) -> IFY(ge(s(z1), 0), s(x0), s(s(z1))) at position [0] we obtained the following new rules [LPAR04]:

   (DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1))),DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1))))


----------------------------------------

(91)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(92) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1)) we obtained the following new rules [LPAR04]:

   (IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0)),IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0)))
   (IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1))),IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1))))


----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1)))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(94) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(95)
Complex Obligation (AND)

----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1)))
   IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1))) we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1))),IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1))))


----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(99) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1))) at position [0] we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1))),IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1))))


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1)))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DIV(s(x0), s(s(z1))) -> IFY(ge(z1, 0), s(x0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( IF_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( IFY_3(x_1, ..., x_3) ) = 2x_2 + 1
POL( ge_2(x_1, x_2) ) = 1
POL( 0 ) = 2
POL( true ) = 0
POL( s_1(x_1) ) = 2x_1 + 2
POL( DIV_2(x_1, x_2) ) = 2x_1 + 2
POL( minus_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( false ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)


----------------------------------------

(102)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(103) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(104)
YES

----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(0, s(x)) -> minus(0, x)
   minus(s(x), 0) -> s(minus(x, 0))
   minus(s(x), s(y)) -> minus(x, y)
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)
   ge(0, s(0)) -> false
   ge(0, s(s(x))) -> ge(0, s(x))
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(106) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(s(x), 0) -> s(minus(x, 0))
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(108) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0)) we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_1)), s(0)) -> IF(ge(s(y_1), 0), s(s(y_1)), s(0)),IFY(true, s(s(y_1)), s(0)) -> IF(ge(s(y_1), 0), s(s(y_1)), s(0)))


----------------------------------------

(109)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IFY(true, s(s(y_1)), s(0)) -> IF(ge(s(y_1), 0), s(s(y_1)), s(0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(s(x), 0) -> s(minus(x, 0))
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(110) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IFY(true, s(s(y_1)), s(0)) -> IF(ge(s(y_1), 0), s(s(y_1)), s(0)) at position [0] we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_1)), s(0)) -> IF(ge(y_1, 0), s(s(y_1)), s(0)),IFY(true, s(s(y_1)), s(0)) -> IF(ge(y_1, 0), s(s(y_1)), s(0)))


----------------------------------------

(111)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))
   IFY(true, s(s(y_1)), s(0)) -> IF(ge(y_1, 0), s(s(y_1)), s(0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(s(x), 0) -> s(minus(x, 0))
   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(112) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   IFY(true, s(s(y_1)), s(0)) -> IF(ge(y_1, 0), s(s(y_1)), s(0))

Strictly oriented rules of the TRS R:

   ge(0, 0) -> true
   ge(s(x), 0) -> ge(x, 0)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(DIV(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(IF(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(IFY(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + 2*x_3
   POL(ge(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(minus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + 2*x_1
   POL(true) = 0


----------------------------------------

(113)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(y_0), s(0)) -> IFY(true, s(y_0), s(0))
   IF(true, s(s(x0)), s(0)) -> DIV(s(minus(x0, 0)), s(0))

The TRS R consists of the following rules:

   minus(0, 0) -> 0
   minus(s(x), 0) -> s(minus(x, 0))

The set Q consists of the following terms:

   ge(0, 0)
   ge(s(x0), 0)
   ge(0, s(0))
   ge(0, s(s(x0)))
   ge(s(x0), s(x1))
   minus(0, 0)
   minus(0, s(x0))
   minus(s(x0), 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(114) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(115)
TRUE
