NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/GIlBI.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QReductionProof [EQUIVALENT, 0 ms]
(8) QDP
(9) TransformationProof [EQUIVALENT, 0 ms]
(10) QDP
(11) TransformationProof [EQUIVALENT, 0 ms]
(12) QDP
(13) NonTerminationLoopProof [COMPLETE, 0 ms]
(14) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   2nd(cons(X, cons(Y, Z))) -> Y
   from(X) -> cons(X, from(s(X)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   2nd(cons(X, cons(Y, Z))) -> Y
   from(X) -> cons(X, from(s(X)))

The set Q consists of the following terms:

   2nd(cons(x0, cons(x1, x2)))
   from(x0)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

The TRS R consists of the following rules:

   2nd(cons(X, cons(Y, Z))) -> Y
   from(X) -> cons(X, from(s(X)))

The set Q consists of the following terms:

   2nd(cons(x0, cons(x1, x2)))
   from(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

R is empty.
The set Q consists of the following terms:

   2nd(cons(x0, cons(x1, x2)))
   from(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   2nd(cons(x0, cons(x1, x2)))
   from(x0)


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FROM(X) -> FROM(s(X)) we obtained the following new rules [LPAR04]:

   (FROM(s(z0)) -> FROM(s(s(z0))),FROM(s(z0)) -> FROM(s(s(z0))))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(s(z0)) -> FROM(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FROM(s(z0)) -> FROM(s(s(z0))) we obtained the following new rules [LPAR04]:

   (FROM(s(s(z0))) -> FROM(s(s(s(z0)))),FROM(s(s(z0))) -> FROM(s(s(s(z0)))))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(s(s(z0))) -> FROM(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FROM(s(s(z0))) evaluates to  t =FROM(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FROM(s(s(z0))) to FROM(s(s(s(z0)))).




----------------------------------------

(14)
NO
