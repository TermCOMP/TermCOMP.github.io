NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/1YBff.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) NonTerminationLoopProof [COMPLETE, 0 ms]
(6) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(X) -> u(h(X), h(X), X)
   u(d, c(Y), X) -> k(Y)
   h(d) -> c(a)
   h(d) -> c(b)
   f(k(a), k(b), X) -> f(X, X, X)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(X) -> U(h(X), h(X), X)
   G(X) -> H(X)
   F(k(a), k(b), X) -> F(X, X, X)

The TRS R consists of the following rules:

   g(X) -> u(h(X), h(X), X)
   u(d, c(Y), X) -> k(Y)
   h(d) -> c(a)
   h(d) -> c(b)
   f(k(a), k(b), X) -> f(X, X, X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(k(a), k(b), X) -> F(X, X, X)

The TRS R consists of the following rules:

   g(X) -> u(h(X), h(X), X)
   u(d, c(Y), X) -> k(Y)
   h(d) -> c(a)
   h(d) -> c(b)
   f(k(a), k(b), X) -> f(X, X, X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(u(d, h(d), X'), u(d, h(d), X''), X) evaluates to  t =F(X, X, X)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [X'' / X', X / u(d, h(d), X')]

--------------------------------------------------------------------------------
Rewriting sequence

F(u(d, h(d), X'), u(d, h(d), X'), u(d, h(d), X')) -> F(u(d, h(d), X'), u(d, c(b), X'), u(d, h(d), X'))
with rule h(d) -> c(b) at position [1,1] and matcher [ ]

F(u(d, h(d), X'), u(d, c(b), X'), u(d, h(d), X')) -> F(u(d, h(d), X'), k(b), u(d, h(d), X'))
with rule u(d, c(Y), X'') -> k(Y) at position [1] and matcher [Y / b, X'' / X']

F(u(d, h(d), X'), k(b), u(d, h(d), X')) -> F(u(d, c(a), X'), k(b), u(d, h(d), X'))
with rule h(d) -> c(a) at position [0,1] and matcher [ ]

F(u(d, c(a), X'), k(b), u(d, h(d), X')) -> F(k(a), k(b), u(d, h(d), X'))
with rule u(d, c(Y), X'') -> k(Y) at position [0] and matcher [Y / a, X'' / X']

F(k(a), k(b), u(d, h(d), X')) -> F(u(d, h(d), X'), u(d, h(d), X'), u(d, h(d), X'))
with rule F(k(a), k(b), X) -> F(X, X, X)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(6)
NO
