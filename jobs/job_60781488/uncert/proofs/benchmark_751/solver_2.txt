YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FlpC4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) AAECC Innermost [EQUIVALENT, 0 ms]
(10) QTRS
(11) DependencyPairsProof [EQUIVALENT, 0 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) AND
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QReductionProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) MRRProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QReductionProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) MRRProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) PisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(nil) -> nil
   f(.(nil, y)) -> .(nil, f(y))
   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(nil) -> nil
   g(.(x, nil)) -> .(g(x), nil)
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = 2 + x_1
   POL(g(x_1)) = x_1
   POL(nil) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f(nil) -> nil




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(.(nil, y)) -> .(nil, f(y))
   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(nil) -> nil
   g(.(x, nil)) -> .(g(x), nil)
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = 2*x_1
   POL(g(x_1)) = x_1
   POL(nil) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f(.(nil, y)) -> .(nil, f(y))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(nil) -> nil
   g(.(x, nil)) -> .(g(x), nil)
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = 2*x_1
   POL(g(x_1)) = 1 + x_1
   POL(nil) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(nil) -> nil




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, nil)) -> .(g(x), nil)
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(f(x_1)) = 2*x_1
   POL(g(x_1)) = 2 + 2*x_1
   POL(nil) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(.(x, nil)) -> .(g(x), nil)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

Q is empty.

----------------------------------------

(9) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is none

The TRS R 2 is 
   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

The signature Sigma is {f_1, g_1}
----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

The set Q consists of the following terms:

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))


----------------------------------------

(11) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(.(.(x, y), z)) -> F(.(x, .(y, z)))
   G(.(x, .(y, z))) -> G(.(.(x, y), z))

The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

The set Q consists of the following terms:

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(.(x, .(y, z))) -> G(.(.(x, y), z))

The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

The set Q consists of the following terms:

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(.(x, .(y, z))) -> G(.(.(x, y), z))

R is empty.
The set Q consists of the following terms:

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(.(x, .(y, z))) -> G(.(.(x, y), z))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   G(.(x, .(y, z))) -> G(.(.(x, y), z))


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(G(x_1)) = 2*x_1


----------------------------------------

(21)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(.(.(x, y), z)) -> F(.(x, .(y, z)))

The TRS R consists of the following rules:

   f(.(.(x, y), z)) -> f(.(x, .(y, z)))
   g(.(x, .(y, z))) -> g(.(.(x, y), z))

The set Q consists of the following terms:

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(.(.(x, y), z)) -> F(.(x, .(y, z)))

R is empty.
The set Q consists of the following terms:

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(.(.(x0, x1), x2))
   g(.(x0, .(x1, x2)))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(.(.(x, y), z)) -> F(.(x, .(y, z)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   F(.(.(x, y), z)) -> F(.(x, .(y, z)))


Used ordering: Knuth-Bendix order [KBO] with precedence:._2 > F_1

and weight map:

   F_1=1
   ._2=0

The variable weight is 1

----------------------------------------

(30)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(32)
YES
