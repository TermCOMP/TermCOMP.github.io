YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HgRz7.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) TransformationProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) TransformationProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) DependencyGraphProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) TransformationProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) TransformationProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) TransformationProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) TransformationProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) TransformationProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) TransformationProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) DependencyGraphProof [EQUIVALENT, 0 ms]
        (49) AND
            (50) QDP
                (51) TransformationProof [EQUIVALENT, 0 ms]
                (52) QDP
                (53) TransformationProof [EQUIVALENT, 0 ms]
                (54) QDP
                (55) QDPOrderProof [EQUIVALENT, 6 ms]
                (56) QDP
                (57) PisEmptyProof [EQUIVALENT, 0 ms]
                (58) YES
            (59) QDP
                (60) UsableRulesProof [EQUIVALENT, 0 ms]
                (61) QDP
                (62) QReductionProof [EQUIVALENT, 0 ms]
                (63) QDP
                (64) TransformationProof [EQUIVALENT, 0 ms]
                (65) QDP
                (66) UsableRulesProof [EQUIVALENT, 0 ms]
                (67) QDP
                (68) QReductionProof [EQUIVALENT, 0 ms]
                (69) QDP
                (70) TransformationProof [EQUIVALENT, 0 ms]
                (71) QDP
                (72) TransformationProof [EQUIVALENT, 0 ms]
                (73) QDP
                (74) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (75) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)
   MINUS(s(x), s(y)) -> MINUS(x, y)
   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   DIV(x, y) -> GE(y, s(0))
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IFY(true, x, y) -> GE(x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)
   IF(true, x, y) -> MINUS(x, y)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(x), s(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   div(x, y) -> ify(ge(y, s(0)), x, y)
   ify(false, x, y) -> divByZeroError
   ify(true, x, y) -> if(ge(x, y), x, y)
   if(false, x, y) -> 0
   if(true, x, y) -> s(div(minus(x, y), y))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))
   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(x0, x1)
   ify(false, x0, x1)
   ify(true, x0, x1)
   if(false, x0, x1)
   if(true, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> IFY(ge(y, s(0)), x, y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule DIV(x, y) -> IFY(ge(y, s(0)), x, y) at position [0] we obtained the following new rules [LPAR04]:

   (DIV(y0, 0) -> IFY(false, y0, 0),DIV(y0, 0) -> IFY(false, y0, 0))
   (DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0)),DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0)))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, x, y) -> IF(ge(x, y), x, y)
   IF(true, x, y) -> DIV(minus(x, y), y)
   DIV(y0, 0) -> IFY(false, y0, 0)
   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> DIV(minus(x, y), y)
   DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0))
   IFY(true, x, y) -> IF(ge(x, y), x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule DIV(y0, s(x0)) -> IFY(ge(x0, 0), y0, s(x0)) at position [0] we obtained the following new rules [LPAR04]:

   (DIV(y0, s(x0)) -> IFY(true, y0, s(x0)),DIV(y0, s(x0)) -> IFY(true, y0, s(x0)))


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> DIV(minus(x, y), y)
   IFY(true, x, y) -> IF(ge(x, y), x, y)
   DIV(y0, s(x0)) -> IFY(true, y0, s(x0))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IFY(true, x, y) -> IF(ge(x, y), x, y) at position [0] we obtained the following new rules [LPAR04]:

   (IFY(true, x0, 0) -> IF(true, x0, 0),IFY(true, x0, 0) -> IF(true, x0, 0))
   (IFY(true, 0, s(x0)) -> IF(false, 0, s(x0)),IFY(true, 0, s(x0)) -> IF(false, 0, s(x0)))
   (IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1)),IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1)))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> DIV(minus(x, y), y)
   DIV(y0, s(x0)) -> IFY(true, y0, s(x0))
   IFY(true, x0, 0) -> IF(true, x0, 0)
   IFY(true, 0, s(x0)) -> IF(false, 0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(y0, s(x0)) -> IFY(true, y0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, x, y) -> DIV(minus(x, y), y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF(true, x, y) -> DIV(minus(x, y), y) we obtained the following new rules [LPAR04]:

   (IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1)),IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1)))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(y0, s(x0)) -> IFY(true, y0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IF(true, s(z0), s(z1)) -> DIV(minus(s(z0), s(z1)), s(z1)) at position [0] we obtained the following new rules [LPAR04]:

   (IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1)),IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1)))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(y0, s(x0)) -> IFY(true, y0, s(x0))
   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule DIV(y0, s(x0)) -> IFY(true, y0, s(x0)) we obtained the following new rules [LPAR04]:

   (DIV(s(y_0), s(x1)) -> IFY(true, s(y_0), s(x1)),DIV(s(y_0), s(x1)) -> IFY(true, s(y_0), s(x1)))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1))
   DIV(s(y_0), s(x1)) -> IFY(true, s(y_0), s(x1))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(true, s(z0), s(z1)) -> DIV(minus(z0, z1), s(z1)) at position [0] we obtained the following new rules [LPAR04]:

   (IF(true, s(x0), s(0)) -> DIV(x0, s(0)),IF(true, s(x0), s(0)) -> DIV(x0, s(0)))
   (IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1))),IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1))))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   DIV(s(y_0), s(x1)) -> IFY(true, s(y_0), s(x1))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DIV(s(y_0), s(x1)) -> IFY(true, s(y_0), s(x1)) we obtained the following new rules [LPAR04]:

   (DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0)),DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0)))
   (DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1))),DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1))))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IFY(true, s(x0), s(x1)) -> IF(ge(x0, x1), s(x0), s(x1)) we obtained the following new rules [LPAR04]:

   (IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0)),IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0)))
   (IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1))),IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1))))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(x0), s(0)) -> DIV(x0, s(0))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1)))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(49)
Complex Obligation (AND)

----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1)))
   IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IFY(true, s(z0), s(s(z1))) -> IF(ge(z0, s(z1)), s(z0), s(s(z1))) we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1))),IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1))))


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(s(y_1), s(x1)), s(s(y_1)), s(s(x1))) at position [0] we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1))),IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1))))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DIV(s(x0), s(s(z1))) -> IFY(true, s(x0), s(s(z1)))
   IF(true, s(s(x0)), s(s(x1))) -> DIV(minus(x0, x1), s(s(x1)))
   IFY(true, s(s(y_1)), s(s(x1))) -> IF(ge(y_1, x1), s(s(y_1)), s(s(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( DIV_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( minus_2(x_1, x_2) ) = x_1 + 2
POL( 0 ) = 2
POL( s_1(x_1) ) = 2x_1 + 2
POL( IF_3(x_1, ..., x_3) ) = max{0, 2x_2 + 2x_3 - 2}
POL( ge_2(x_1, x_2) ) = 2x_1
POL( true ) = 0
POL( false ) = 1
POL( IFY_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 + 2x_3 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(56)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(58)
YES

----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))

The TRS R consists of the following rules:

   ge(x, 0) -> true

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(62) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))

The TRS R consists of the following rules:

   ge(x, 0) -> true

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IFY(true, s(z0), s(0)) -> IF(ge(z0, 0), s(z0), s(0)) at position [0] we obtained the following new rules [LPAR04]:

   (IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0)),IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0)))


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))
   IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0))

The TRS R consists of the following rules:

   ge(x, 0) -> true

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))
   IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0))

R is empty.
The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IF(true, s(x0), s(0)) -> DIV(x0, s(0))
   IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(70) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IF(true, s(x0), s(0)) -> DIV(x0, s(0)) we obtained the following new rules [LPAR04]:

   (IF(true, s(s(y_0)), s(0)) -> DIV(s(y_0), s(0)),IF(true, s(s(y_0)), s(0)) -> DIV(s(y_0), s(0)))


----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0))
   IF(true, s(s(y_0)), s(0)) -> DIV(s(y_0), s(0))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(72) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IFY(true, s(z0), s(0)) -> IF(true, s(z0), s(0)) we obtained the following new rules [LPAR04]:

   (IFY(true, s(s(y_0)), s(0)) -> IF(true, s(s(y_0)), s(0)),IFY(true, s(s(y_0)), s(0)) -> IF(true, s(s(y_0)), s(0)))


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
   IF(true, s(s(y_0)), s(0)) -> DIV(s(y_0), s(0))
   IFY(true, s(s(y_0)), s(0)) -> IF(true, s(s(y_0)), s(0))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IFY(true, s(s(y_0)), s(0)) -> IF(true, s(s(y_0)), s(0))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3


*IF(true, s(s(y_0)), s(0)) -> DIV(s(y_0), s(0))
The graph contains the following edges 2 > 1, 3 >= 2


*DIV(s(x0), s(0)) -> IFY(true, s(x0), s(0))
The graph contains the following edges 1 >= 2, 2 >= 3


----------------------------------------

(75)
YES
