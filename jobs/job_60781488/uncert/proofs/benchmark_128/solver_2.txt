YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ke93M.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 4 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE
    (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(times, x), app(app(plus, y), app(s, z))) -> app(app(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))), app(app(times, x), app(s, z)))
   app(app(times, x), 0) -> 0
   app(app(times, x), app(s, y)) -> app(app(plus, app(app(times, x), y)), x)
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))), app(app(times, x), app(s, z)))
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0))))
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(plus, y), app(app(times, app(s, z)), 0))
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, app(s, z)), 0)
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(times, app(s, z))
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, x), app(s, z))
   APP(app(times, x), app(s, y)) -> APP(app(plus, app(app(times, x), y)), x)
   APP(app(times, x), app(s, y)) -> APP(plus, app(app(times, x), y))
   APP(app(times, x), app(s, y)) -> APP(app(times, x), y)
   APP(app(plus, x), app(s, y)) -> APP(s, app(app(plus, x), y))
   APP(app(plus, x), app(s, y)) -> APP(app(plus, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(times, x), app(app(plus, y), app(s, z))) -> app(app(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))), app(app(times, x), app(s, z)))
   app(app(times, x), 0) -> 0
   app(app(times, x), app(s, y)) -> app(app(plus, app(app(times, x), y)), x)
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 17 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, x), app(s, y)) -> APP(app(plus, x), y)

The TRS R consists of the following rules:

   app(app(times, x), app(app(plus, y), app(s, z))) -> app(app(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))), app(app(times, x), app(s, z)))
   app(app(times, x), 0) -> 0
   app(app(times, x), app(s, y)) -> app(app(plus, app(app(times, x), y)), x)
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, x), app(s, y)) -> APP(app(plus, x), y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   plus(x, s(y)) -> plus(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*plus(x, s(y)) -> plus(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, x), app(s, z))
   APP(app(times, x), app(s, y)) -> APP(app(times, x), y)
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))

The TRS R consists of the following rules:

   app(app(times, x), app(app(plus, y), app(s, z))) -> app(app(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))), app(app(times, x), app(s, z)))
   app(app(times, x), 0) -> 0
   app(app(times, x), app(s, y)) -> app(app(plus, app(app(times, x), y)), x)
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, x), app(s, z))
   APP(app(times, x), app(s, y)) -> APP(app(times, x), y)
   APP(app(times, x), app(app(plus, y), app(s, z))) -> APP(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))

The TRS R consists of the following rules:

   app(app(times, x), 0) -> 0
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesReductionPairsProof (EQUIVALENT)
First, we A-transformed [FROCOS05] the QDP-Problem.
Then we obtain the following A-transformed DP problem.

The pairs P are: 

   times1(x, plus(y, s(z))) -> times1(x, s(z))
   times1(x, s(y)) -> times1(x, y)
   times1(x, plus(y, s(z))) -> times1(x, plus(y, times(s(z), 0)))

and the Q and R are:
Q restricted rewrite system:
The TRS R consists of the following rules:

   times(x, 0) -> 0
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.

By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   times1(x, plus(y, s(z))) -> times1(x, s(z))
The following rules are removed from R:

   app(app(times, x), 0) -> 0
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(plus(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(times(x_1, x_2)) = x_1 + 2*x_2
   POL(times1(x_1, x_2)) = x_1 + 2*x_2


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   times1(x, s(y)) -> times1(x, y)
   times1(x, plus(y, s(z))) -> times1(x, plus(y, times(s(z), 0)))

The TRS R consists of the following rules:

   times(x, 0) -> 0
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   times1(x, s(y)) -> times1(x, y)

Strictly oriented rules of the TRS R:

   plus(x, s(y)) -> s(plus(x, y))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 2 + x_1
   POL(times(x_1, x_2)) = x_1 + x_2
   POL(times1(x_1, x_2)) = x_1 + 2*x_2


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   times1(x, plus(y, s(z))) -> times1(x, plus(y, times(s(z), 0)))

The TRS R consists of the following rules:

   times(x, 0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(20)
TRUE

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(times, x), app(app(plus, y), app(s, z))) -> app(app(plus, app(app(times, x), app(app(plus, y), app(app(times, app(s, z)), 0)))), app(app(times, x), app(s, z)))
   app(app(times, x), 0) -> 0
   app(app(times, x), app(s, y)) -> app(app(plus, app(app(times, x), y)), x)
   app(app(plus, x), 0) -> x
   app(app(plus, x), app(s, y)) -> app(s, app(app(plus, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(23)
YES
