YES

Problem 1: 

(VAR vu95NonEmpty l x y)
(RULES
rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
rev(nil) -> nil
rev1(num0,nil) -> num0
rev1(s(x),nil) -> s(x)
rev1(x,cons(y,l)) -> rev1(y,l)
rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
rev2(x,nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 REV(cons(x,l)) -> REV1(x,l)
 REV(cons(x,l)) -> REV2(x,l)
 REV1(x,cons(y,l)) -> REV1(y,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 REV(cons(x,l)) -> REV1(x,l)
 REV(cons(x,l)) -> REV2(x,l)
 REV1(x,cons(y,l)) -> REV1(y,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REV1(x,cons(y,l)) -> REV1(y,l)
->->-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->->Cycle:
->->-> Pairs:
 REV(cons(x,l)) -> REV2(x,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
->->-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 REV1(x,cons(y,l)) -> REV1(y,l)
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Projection:
 pi(REV1) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 REV(cons(x,l)) -> REV2(x,l)
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
-> Usable rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[rev](X) = X
[rev1](X1,X2) = X2 + 2
[rev2](X1,X2) = X2
[num0] = 2
[cons](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 1
[s](X) = 2
[REV](X) = 2.X
[REV1](X1,X2) = 0
[REV2](X1,X2) = 2.X2

Problem 1.2: 

SCC Processor:
-> Pairs:
 REV2(x,cons(y,l)) -> REV(cons(x,rev2(y,l)))
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 REV2(x,cons(y,l)) -> REV2(y,l)
->->-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil

Problem 1.2: 

Subterm Processor:
-> Pairs:
 REV2(x,cons(y,l)) -> REV2(y,l)
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Projection:
 pi(REV2) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 rev(cons(x,l)) -> cons(rev1(x,l),rev2(x,l))
 rev(nil) -> nil
 rev1(num0,nil) -> num0
 rev1(s(x),nil) -> s(x)
 rev1(x,cons(y,l)) -> rev1(y,l)
 rev2(x,cons(y,l)) -> rev(cons(x,rev2(y,l)))
 rev2(x,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
