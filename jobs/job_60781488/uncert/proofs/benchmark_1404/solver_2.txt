YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vQ4X4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 106 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 21 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 19 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 6 ms]
(10) QTRS
(11) QTRSRRRProof [EQUIVALENT, 0 ms]
(12) QTRS
(13) QTRSRRRProof [EQUIVALENT, 7 ms]
(14) QTRS
(15) DependencyPairsProof [EQUIVALENT, 0 ms]
(16) QDP
(17) DependencyGraphProof [EQUIVALENT, 0 ms]
(18) AND
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 1 ms]
        (33) QDP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES
    (36) QDP
        (37) UsableRulesProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) MRRProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (42) YES
    (43) QDP
        (44) UsableRulesProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (47) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   and(x, true) -> x
   and(x, false) -> false
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)
   Log(x) -> -(Log'(x), I(0))
   Val(L(x)) -> x
   Val(N(x, l, r)) -> x
   Min(L(x)) -> x
   Min(N(x, l, r)) -> Min(l)
   Max(L(x)) -> x
   Max(N(x, l, r)) -> Max(r)
   BS(L(x)) -> true
   BS(N(x, l, r)) -> and(and(ge(x, Max(l)), ge(Min(r), x)), and(BS(l), BS(r)))
   Size(L(x)) -> I(0)
   Size(N(x, l, r)) -> +(+(Size(l), Size(r)), I(1))
   WB(L(x)) -> true
   WB(N(x, l, r)) -> and(if(ge(Size(l), Size(r)), ge(I(0), -(Size(l), Size(r))), ge(I(0), -(Size(r), Size(l)))), and(WB(l), WB(r)))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + 2*x_2
   POL(-(x_1, x_2)) = x_1 + 2*x_2
   POL(0) = 0
   POL(1) = 0
   POL(BS(x_1)) = 2*x_1
   POL(I(x_1)) = 2*x_1
   POL(L(x_1)) = x_1
   POL(Log(x_1)) = 2 + x_1
   POL(Log'(x_1)) = x_1
   POL(Max(x_1)) = x_1
   POL(Min(x_1)) = 2*x_1
   POL(N(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(O(x_1)) = 2*x_1
   POL(Size(x_1)) = x_1
   POL(Val(x_1)) = 2*x_1
   POL(WB(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(l) = 0
   POL(not(x_1)) = x_1
   POL(r) = 0
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   Log(x) -> -(Log'(x), I(0))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   and(x, true) -> x
   and(x, false) -> false
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)
   Val(L(x)) -> x
   Val(N(x, l, r)) -> x
   Min(L(x)) -> x
   Min(N(x, l, r)) -> Min(l)
   Max(L(x)) -> x
   Max(N(x, l, r)) -> Max(r)
   BS(L(x)) -> true
   BS(N(x, l, r)) -> and(and(ge(x, Max(l)), ge(Min(r), x)), and(BS(l), BS(r)))
   Size(L(x)) -> I(0)
   Size(N(x, l, r)) -> +(+(Size(l), Size(r)), I(1))
   WB(L(x)) -> true
   WB(N(x, l, r)) -> and(if(ge(Size(l), Size(r)), ge(I(0), -(Size(l), Size(r))), ge(I(0), -(Size(r), Size(l)))), and(WB(l), WB(r)))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(-(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(1) = 0
   POL(BS(x_1)) = 2*x_1
   POL(I(x_1)) = 2*x_1
   POL(L(x_1)) = x_1
   POL(Log'(x_1)) = 2*x_1
   POL(Max(x_1)) = x_1
   POL(Min(x_1)) = x_1
   POL(N(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(O(x_1)) = 2*x_1
   POL(Size(x_1)) = x_1
   POL(Val(x_1)) = 1 + 2*x_1
   POL(WB(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(l) = 0
   POL(not(x_1)) = x_1
   POL(r) = 0
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   Val(L(x)) -> x
   Val(N(x, l, r)) -> x




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   and(x, true) -> x
   and(x, false) -> false
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)
   Min(L(x)) -> x
   Min(N(x, l, r)) -> Min(l)
   Max(L(x)) -> x
   Max(N(x, l, r)) -> Max(r)
   BS(L(x)) -> true
   BS(N(x, l, r)) -> and(and(ge(x, Max(l)), ge(Min(r), x)), and(BS(l), BS(r)))
   Size(L(x)) -> I(0)
   Size(N(x, l, r)) -> +(+(Size(l), Size(r)), I(1))
   WB(L(x)) -> true
   WB(N(x, l, r)) -> and(if(ge(Size(l), Size(r)), ge(I(0), -(Size(l), Size(r))), ge(I(0), -(Size(r), Size(l)))), and(WB(l), WB(r)))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + 2*x_2
   POL(-(x_1, x_2)) = x_1 + 2*x_2
   POL(0) = 0
   POL(1) = 0
   POL(BS(x_1)) = 2*x_1
   POL(I(x_1)) = 2*x_1
   POL(L(x_1)) = x_1
   POL(Log'(x_1)) = 2*x_1
   POL(Max(x_1)) = 2 + 2*x_1
   POL(Min(x_1)) = x_1
   POL(N(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_2 + x_3
   POL(O(x_1)) = 2*x_1
   POL(Size(x_1)) = 2*x_1
   POL(WB(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(l) = 0
   POL(not(x_1)) = 2*x_1
   POL(r) = 0
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   Min(N(x, l, r)) -> Min(l)
   Max(L(x)) -> x
   Max(N(x, l, r)) -> Max(r)
   BS(N(x, l, r)) -> and(and(ge(x, Max(l)), ge(Min(r), x)), and(BS(l), BS(r)))
   Size(N(x, l, r)) -> +(+(Size(l), Size(r)), I(1))
   WB(N(x, l, r)) -> and(if(ge(Size(l), Size(r)), ge(I(0), -(Size(l), Size(r))), ge(I(0), -(Size(r), Size(l)))), and(WB(l), WB(r)))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   and(x, true) -> x
   and(x, false) -> false
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)
   Min(L(x)) -> x
   BS(L(x)) -> true
   Size(L(x)) -> I(0)
   WB(L(x)) -> true

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(-(x_1, x_2)) = x_1 + 2*x_2
   POL(0) = 0
   POL(1) = 0
   POL(BS(x_1)) = 2 + 2*x_1
   POL(I(x_1)) = 2*x_1
   POL(L(x_1)) = x_1
   POL(Log'(x_1)) = 2*x_1
   POL(Min(x_1)) = x_1
   POL(O(x_1)) = 2*x_1
   POL(Size(x_1)) = x_1
   POL(WB(x_1)) = 2 + 2*x_1
   POL(and(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + 2*x_2
   POL(if(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(not(x_1)) = x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   and(x, true) -> x
   and(x, false) -> false
   BS(L(x)) -> true
   WB(L(x)) -> true




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)
   Min(L(x)) -> x
   Size(L(x)) -> I(0)

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + 2*x_2
   POL(-(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(1) = 0
   POL(I(x_1)) = 2*x_1
   POL(L(x_1)) = x_1
   POL(Log'(x_1)) = 2*x_1
   POL(Min(x_1)) = 1 + x_1
   POL(O(x_1)) = 2*x_1
   POL(Size(x_1)) = x_1
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(not(x_1)) = 2*x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   Min(L(x)) -> x




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)
   Size(L(x)) -> I(0)

Q is empty.

----------------------------------------

(11) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + 2*x_2
   POL(-(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(1) = 0
   POL(I(x_1)) = 2*x_1
   POL(L(x_1)) = 2 + x_1
   POL(Log'(x_1)) = x_1
   POL(O(x_1)) = 2*x_1
   POL(Size(x_1)) = 1 + 2*x_1
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(not(x_1)) = x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   Size(L(x)) -> I(0)




----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(0) -> 0
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.

----------------------------------------

(13) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + 2*x_2
   POL(-(x_1, x_2)) = x_1 + 2*x_2
   POL(0) = 0
   POL(1) = 0
   POL(I(x_1)) = 2*x_1
   POL(Log'(x_1)) = 2 + 2*x_1
   POL(O(x_1)) = 2*x_1
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + 2*x_2
   POL(if(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(not(x_1)) = x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   Log'(0) -> 0




----------------------------------------

(14)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.

----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), O(y)) -> O^1(+(x, y))
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> O^1(+(+(x, y), I(0)))
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)
   +^1(x, +(y, z)) -> +^1(+(x, y), z)
   +^1(x, +(y, z)) -> +^1(x, y)
   -^1(O(x), O(y)) -> O^1(-(x, y))
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> O^1(-(x, y))
   -^1(I(x), I(y)) -> -^1(x, y)
   GE(O(x), O(y)) -> GE(x, y)
   GE(O(x), I(y)) -> NOT(ge(y, x))
   GE(O(x), I(y)) -> GE(y, x)
   GE(I(x), O(y)) -> GE(x, y)
   GE(I(x), I(y)) -> GE(x, y)
   GE(0, O(x)) -> GE(0, x)
   LOG'(I(x)) -> +^1(Log'(x), I(0))
   LOG'(I(x)) -> LOG'(x)
   LOG'(O(x)) -> IF(ge(x, I(0)), +(Log'(x), I(0)), 0)
   LOG'(O(x)) -> GE(x, I(0))
   LOG'(O(x)) -> +^1(Log'(x), I(0))
   LOG'(O(x)) -> LOG'(x)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 9 less nodes.
----------------------------------------

(18)
Complex Obligation (AND)

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0, O(x)) -> GE(0, x)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0, O(x)) -> GE(0, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(0, O(x)) -> GE(0, x)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(O(x), I(y)) -> GE(y, x)
   GE(O(x), O(y)) -> GE(x, y)
   GE(I(x), O(y)) -> GE(x, y)
   GE(I(x), I(y)) -> GE(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(O(x), I(y)) -> GE(y, x)
   GE(O(x), O(y)) -> GE(x, y)
   GE(I(x), O(y)) -> GE(x, y)
   GE(I(x), I(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(O(x), I(y)) -> GE(y, x)
The graph contains the following edges 2 > 1, 1 > 2


*GE(O(x), O(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


*GE(I(x), O(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


*GE(I(x), I(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   O(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   -^1(O(x), I(y)) -> -^1(-(x, y), I(1))
   -^1(O(x), I(y)) -> -^1(x, y)
   -^1(O(x), O(y)) -> -^1(x, y)
   -^1(I(x), O(y)) -> -^1(x, y)
   -^1(I(x), I(y)) -> -^1(x, y)

Strictly oriented rules of the TRS R:

   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   O(0) -> 0

Used ordering: Knuth-Bendix order [KBO] with precedence:-^1_2 > 0 > -_2 > 1 > O_1 > I_1

and weight map:

   0=1
   1=2
   O_1=5
   I_1=3
   -_2=0
   -^1_2=0

The variable weight is 1

----------------------------------------

(33)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)
   +^1(x, +(y, z)) -> +^1(+(x, y), z)
   +^1(x, +(y, z)) -> +^1(x, y)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)
   +^1(x, +(y, z)) -> +^1(+(x, y), z)
   +^1(x, +(y, z)) -> +^1(x, y)

The TRS R consists of the following rules:

   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   O(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   +^1(O(x), I(y)) -> +^1(x, y)
   +^1(I(x), O(y)) -> +^1(x, y)
   +^1(I(x), I(y)) -> +^1(+(x, y), I(0))
   +^1(I(x), I(y)) -> +^1(x, y)


Used ordering: Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = x_1 + x_2
   POL(+^1(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(0) = 0
   POL(I(x_1)) = 2 + 2*x_1
   POL(O(x_1)) = 2*x_1


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(O(x), O(y)) -> +^1(x, y)
   +^1(x, +(y, z)) -> +^1(+(x, y), z)
   +^1(x, +(y, z)) -> +^1(x, y)

The TRS R consists of the following rules:

   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   O(0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*+^1(O(x), O(y)) -> +^1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


*+^1(x, +(y, z)) -> +^1(+(x, y), z)
The graph contains the following edges 2 > 2


*+^1(x, +(y, z)) -> +^1(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(42)
YES

----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG'(O(x)) -> LOG'(x)
   LOG'(I(x)) -> LOG'(x)

The TRS R consists of the following rules:

   O(0) -> 0
   +(0, x) -> x
   +(x, 0) -> x
   +(O(x), O(y)) -> O(+(x, y))
   +(O(x), I(y)) -> I(+(x, y))
   +(I(x), O(y)) -> I(+(x, y))
   +(I(x), I(y)) -> O(+(+(x, y), I(0)))
   +(x, +(y, z)) -> +(+(x, y), z)
   -(x, 0) -> x
   -(0, x) -> 0
   -(O(x), O(y)) -> O(-(x, y))
   -(O(x), I(y)) -> I(-(-(x, y), I(1)))
   -(I(x), O(y)) -> I(-(x, y))
   -(I(x), I(y)) -> O(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(O(x), O(y)) -> ge(x, y)
   ge(O(x), I(y)) -> not(ge(y, x))
   ge(I(x), O(y)) -> ge(x, y)
   ge(I(x), I(y)) -> ge(x, y)
   ge(x, 0) -> true
   ge(0, O(x)) -> ge(0, x)
   ge(0, I(x)) -> false
   Log'(I(x)) -> +(Log'(x), I(0))
   Log'(O(x)) -> if(ge(x, I(0)), +(Log'(x), I(0)), 0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG'(O(x)) -> LOG'(x)
   LOG'(I(x)) -> LOG'(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LOG'(O(x)) -> LOG'(x)
The graph contains the following edges 1 > 1


*LOG'(I(x)) -> LOG'(x)
The graph contains the following edges 1 > 1


----------------------------------------

(47)
YES
