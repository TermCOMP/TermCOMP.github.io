NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Tnbjq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 24 ms]
(2) QTRS
(3) AAECC Innermost [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QReductionProof [EQUIVALENT, 0 ms]
(12) QDP
(13) TransformationProof [EQUIVALENT, 0 ms]
(14) QDP
(15) TransformationProof [EQUIVALENT, 0 ms]
(16) QDP
(17) UsableRulesProof [EQUIVALENT, 0 ms]
(18) QDP
(19) QReductionProof [EQUIVALENT, 0 ms]
(20) QDP
(21) TransformationProof [EQUIVALENT, 0 ms]
(22) QDP
(23) TransformationProof [EQUIVALENT, 0 ms]
(24) QDP
(25) TransformationProof [EQUIVALENT, 0 ms]
(26) QDP
(27) TransformationProof [EQUIVALENT, 0 ms]
(28) QDP
(29) NonTerminationLoopProof [COMPLETE, 0 ms]
(30) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> f(i(x), g(g(x)))
   f(x, y) -> x
   g(x) -> i(x)
   f(x, i(x)) -> f(x, x)
   f(i(x), i(g(x))) -> a

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a) = 0
   POL(f(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(g(x_1)) = x_1
   POL(i(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f(x, y) -> x
   f(i(x), i(g(x))) -> a




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> f(i(x), g(g(x)))
   g(x) -> i(x)
   f(x, i(x)) -> f(x, x)

Q is empty.

----------------------------------------

(3) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   g(x) -> i(x)

The TRS R 2 is 
   f(x, x) -> f(i(x), g(g(x)))
   f(x, i(x)) -> f(x, x)

The signature Sigma is {f_2}
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, x) -> f(i(x), g(g(x)))
   g(x) -> i(x)
   f(x, i(x)) -> f(x, x)

The set Q consists of the following terms:

   f(x0, x0)
   g(x0)
   f(x0, i(x0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(i(x), g(g(x)))
   F(x, x) -> G(g(x))
   F(x, x) -> G(x)
   F(x, i(x)) -> F(x, x)

The TRS R consists of the following rules:

   f(x, x) -> f(i(x), g(g(x)))
   g(x) -> i(x)
   f(x, i(x)) -> f(x, x)

The set Q consists of the following terms:

   f(x0, x0)
   g(x0)
   f(x0, i(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), g(g(x)))

The TRS R consists of the following rules:

   f(x, x) -> f(i(x), g(g(x)))
   g(x) -> i(x)
   f(x, i(x)) -> f(x, x)

The set Q consists of the following terms:

   f(x0, x0)
   g(x0)
   f(x0, i(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), g(g(x)))

The TRS R consists of the following rules:

   g(x) -> i(x)

The set Q consists of the following terms:

   f(x0, x0)
   g(x0)
   f(x0, i(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(x0, x0)
   f(x0, i(x0))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), g(g(x)))

The TRS R consists of the following rules:

   g(x) -> i(x)

The set Q consists of the following terms:

   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule F(x, x) -> F(i(x), g(g(x))) at position [1] we obtained the following new rules [LPAR04]:

   (F(x, x) -> F(i(x), i(g(x))),F(x, x) -> F(i(x), i(g(x))))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), i(g(x)))

The TRS R consists of the following rules:

   g(x) -> i(x)

The set Q consists of the following terms:

   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule F(x, x) -> F(i(x), i(g(x))) at position [1,0] we obtained the following new rules [LPAR04]:

   (F(x, x) -> F(i(x), i(i(x))),F(x, x) -> F(i(x), i(i(x))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), i(i(x)))

The TRS R consists of the following rules:

   g(x) -> i(x)

The set Q consists of the following terms:

   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), i(i(x)))

R is empty.
The set Q consists of the following terms:

   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   g(x0)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, i(x)) -> F(x, x)
   F(x, x) -> F(i(x), i(i(x)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(x, i(x)) -> F(x, x) we obtained the following new rules [LPAR04]:

   (F(i(z0), i(i(z0))) -> F(i(z0), i(z0)),F(i(z0), i(i(z0))) -> F(i(z0), i(z0)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, x) -> F(i(x), i(i(x)))
   F(i(z0), i(i(z0))) -> F(i(z0), i(z0))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(x, x) -> F(i(x), i(i(x))) we obtained the following new rules [LPAR04]:

   (F(i(z0), i(z0)) -> F(i(i(z0)), i(i(i(z0)))),F(i(z0), i(z0)) -> F(i(i(z0)), i(i(i(z0)))))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(i(z0), i(i(z0))) -> F(i(z0), i(z0))
   F(i(z0), i(z0)) -> F(i(i(z0)), i(i(i(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(i(z0), i(i(z0))) -> F(i(z0), i(z0)) we obtained the following new rules [LPAR04]:

   (F(i(i(z0)), i(i(i(z0)))) -> F(i(i(z0)), i(i(z0))),F(i(i(z0)), i(i(i(z0)))) -> F(i(i(z0)), i(i(z0))))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(i(z0), i(z0)) -> F(i(i(z0)), i(i(i(z0))))
   F(i(i(z0)), i(i(i(z0)))) -> F(i(i(z0)), i(i(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(i(z0), i(z0)) -> F(i(i(z0)), i(i(i(z0)))) we obtained the following new rules [LPAR04]:

   (F(i(i(z0)), i(i(z0))) -> F(i(i(i(z0))), i(i(i(i(z0))))),F(i(i(z0)), i(i(z0))) -> F(i(i(i(z0))), i(i(i(i(z0))))))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(i(i(z0)), i(i(i(z0)))) -> F(i(i(z0)), i(i(z0)))
   F(i(i(z0)), i(i(z0))) -> F(i(i(i(z0))), i(i(i(i(z0)))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(i(i(z0')), i(i(z0'))) evaluates to  t =F(i(i(i(z0'))), i(i(i(z0'))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0' / i(z0')]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F(i(i(z0')), i(i(z0'))) -> F(i(i(i(z0'))), i(i(i(i(z0')))))
with rule F(i(i(z0'')), i(i(z0''))) -> F(i(i(i(z0''))), i(i(i(i(z0''))))) at position [] and matcher [z0'' / z0']

F(i(i(i(z0'))), i(i(i(i(z0'))))) -> F(i(i(i(z0'))), i(i(i(z0'))))
with rule F(i(i(z0)), i(i(i(z0)))) -> F(i(i(z0)), i(i(z0)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(30)
NO
