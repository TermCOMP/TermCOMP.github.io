YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y Z)
(RULES
activate(nu95u95add(X1,X2)) -> add(X1,X2)
activate(nu95u95first(X1,X2)) -> first(X1,X2)
activate(nu95u95from(X)) -> from(X)
activate(nu95u95s(X)) -> s(X)
activate(X) -> X
add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
add(num0,X) -> activate(X)
add(X1,X2) -> nu95u95add(X1,X2)
and(ffalse,Y) -> ffalse
and(ftrue,X) -> activate(X)
first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
first(num0,X) -> nil
first(X1,X2) -> nu95u95first(X1,X2)
from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
from(X) -> nu95u95from(X)
if(ffalse,X,Y) -> activate(Y)
if(ftrue,X,Y) -> activate(X)
s(X) -> nu95u95s(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ACTIVATE(nu95u95s(X)) -> S(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> ACTIVATE(Y)
 ADD(s(X),Y) -> S(nu95u95add(activate(X),activate(Y)))
 ADD(num0,X) -> ACTIVATE(X)
 AND(ftrue,X) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
 IF(ffalse,X,Y) -> ACTIVATE(Y)
 IF(ftrue,X,Y) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ACTIVATE(nu95u95s(X)) -> S(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> ACTIVATE(Y)
 ADD(s(X),Y) -> S(nu95u95add(activate(X),activate(Y)))
 ADD(num0,X) -> ACTIVATE(X)
 AND(ftrue,X) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
 IF(ffalse,X,Y) -> ACTIVATE(Y)
 IF(ftrue,X,Y) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> ACTIVATE(Y)
 ADD(num0,X) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> ACTIVATE(Y)
 ADD(num0,X) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = 0
[add](X1,X2) = 0
[and](X1,X2) = 0
[first](X1,X2) = 0
[from](X) = 0
[if](X1,X2,X3) = 0
[s](X) = 2.X
[num0] = 2
[cons](X1,X2) = 2.X1 + 2.X2
[fSNonEmpty] = 0
[ffalse] = 0
[nu95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95first](X1,X2) = 2.X1 + 2.X2
[nu95u95from](X) = 2.X + 2
[nu95u95s](X) = 0
[nil] = 0
[ftrue] = 0
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 2.X1 + 2.X2 + 2
[AND](X1,X2) = 0
[FIRST](X1,X2) = 2.X1 + 2.X2 + 2
[FROM](X) = 2.X + 2
[IF](X1,X2,X3) = 0
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 ADD(s(X),Y) -> ACTIVATE(Y)
 ADD(num0,X) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95first(X1,X2)) -> FIRST(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = 0
[add](X1,X2) = 0
[and](X1,X2) = 0
[first](X1,X2) = 0
[from](X) = 0
[if](X1,X2,X3) = 0
[s](X) = 2.X + 2
[num0] = 0
[cons](X1,X2) = 2.X1 + 2.X2 + 1
[fSNonEmpty] = 0
[ffalse] = 0
[nu95u95add](X1,X2) = 0
[nu95u95first](X1,X2) = X1 + 2.X2 + 2
[nu95u95from](X) = 2.X + 1
[nu95u95s](X) = 0
[nil] = 0
[ftrue] = 0
[ACTIVATE](X) = 2.X
[ADD](X1,X2) = 0
[AND](X1,X2) = 0
[FIRST](X1,X2) = 2.X1 + X2 + 2
[FROM](X) = 2.X
[IF](X1,X2,X3) = 0
[S](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Y)
 FIRST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 FROM(X) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 FROM(X) -> ACTIVATE(X)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)

Problem 1: 

Subterm Processor:
-> Pairs:
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 FROM(X) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
->Projection:
 pi(ACTIVATE) = 1
 pi(FROM) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 FROM(X) -> ACTIVATE(X)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95first(X1,X2)) -> first(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95s(X)) -> s(X)
 activate(X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),activate(Y)))
 add(num0,X) -> activate(X)
 add(X1,X2) -> nu95u95add(X1,X2)
 and(ffalse,Y) -> ffalse
 and(ftrue,X) -> activate(X)
 first(s(X),cons(Y,Z)) -> cons(activate(Y),nu95u95first(activate(X),activate(Z)))
 first(num0,X) -> nil
 first(X1,X2) -> nu95u95first(X1,X2)
 from(X) -> cons(activate(X),nu95u95from(nu95u95s(activate(X))))
 from(X) -> nu95u95from(X)
 if(ffalse,X,Y) -> activate(Y)
 if(ftrue,X,Y) -> activate(X)
 s(X) -> nu95u95s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
