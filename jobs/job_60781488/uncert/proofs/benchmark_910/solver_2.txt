YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AfJQb.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(true, X) -> ACTIVATE(X)
   IF(true, X, Y) -> ACTIVATE(X)
   IF(false, X, Y) -> ACTIVATE(Y)
   ADD(0, X) -> ACTIVATE(X)
   ADD(s(X), Y) -> S(n__add(activate(X), activate(Y)))
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   FROM(X) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)
   ACTIVATE(n__from(X)) -> FROM(X)
   ACTIVATE(n__s(X)) -> S(X)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ADD(0, X) -> ACTIVATE(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   ACTIVATE(n__from(X)) -> FROM(X)
   FROM(X) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)

The TRS R consists of the following rules:

   and(true, X) -> activate(X)
   and(false, Y) -> false
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   add(0, X) -> activate(X)
   add(s(X), Y) -> s(n__add(activate(X), activate(Y)))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(activate(Y), n__first(activate(X), activate(Z)))
   from(X) -> cons(activate(X), n__from(n__s(activate(X))))
   add(X1, X2) -> n__add(X1, X2)
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ADD(0, X) -> ACTIVATE(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
   ACTIVATE(n__from(X)) -> FROM(X)
   FROM(X) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ADD(s(X), Y) -> ACTIVATE(X)
   ADD(s(X), Y) -> ACTIVATE(Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 1 > 2


*FROM(X) -> ACTIVATE(X)
The graph contains the following edges 1 >= 1


*ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)
The graph contains the following edges 1 > 1, 1 > 2


*ACTIVATE(n__from(X)) -> FROM(X)
The graph contains the following edges 1 > 1


*ADD(0, X) -> ACTIVATE(X)
The graph contains the following edges 2 >= 1


*ADD(s(X), Y) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*ADD(s(X), Y) -> ACTIVATE(Y)
The graph contains the following edges 2 >= 1


*FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Y)
The graph contains the following edges 2 > 1


*FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
The graph contains the following edges 2 > 1


----------------------------------------

(8)
YES
