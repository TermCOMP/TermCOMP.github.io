YES

Problem 1: 

(VAR vu95NonEmpty x y z)
(RULES
del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
del(x,nil) -> nil
min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
min(x,nil) -> x
msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
msort(nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 DEL(x,u46(y,z)) -> DEL(x,z)
 MIN(x,u46(y,z)) -> MIN(x,z)
 MIN(x,u46(y,z)) -> MIN(y,z)
 MSORT(u46(x,y)) -> DEL(min(x,y),u46(x,y))
 MSORT(u46(x,y)) -> MIN(x,y)
 MSORT(u46(x,y)) -> MSORT(del(min(x,y),u46(x,y)))
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 DEL(x,u46(y,z)) -> DEL(x,z)
 MIN(x,u46(y,z)) -> MIN(x,z)
 MIN(x,u46(y,z)) -> MIN(y,z)
 MSORT(u46(x,y)) -> DEL(min(x,y),u46(x,y))
 MSORT(u46(x,y)) -> MIN(x,y)
 MSORT(u46(x,y)) -> MSORT(del(min(x,y),u46(x,y)))
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MIN(x,u46(y,z)) -> MIN(x,z)
 MIN(x,u46(y,z)) -> MIN(y,z)
->->-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->->Cycle:
->->-> Pairs:
 DEL(x,u46(y,z)) -> DEL(x,z)
->->-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->->Cycle:
->->-> Pairs:
 MSORT(u46(x,y)) -> MSORT(del(min(x,y),u46(x,y)))
->->-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MIN(x,u46(y,z)) -> MIN(x,z)
 MIN(x,u46(y,z)) -> MIN(y,z)
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->Projection:
 pi(MIN) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 DEL(x,u46(y,z)) -> DEL(x,z)
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->Projection:
 pi(DEL) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 MSORT(u46(x,y)) -> MSORT(del(min(x,y),u46(x,y)))
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
-> Usable rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[del](X1,X2) = 1
[min](X1,X2) = 2.X1
[msort](X) = 0
[u46](X1,X2) = 2.X2 + 2
[u60u61](X1,X2) = X1 + 2
[u61](X1,X2) = X1 + 2
[fSNonEmpty] = 0
[if](X1,X2,X3) = 0
[nil] = 1
[DEL](X1,X2) = 0
[MIN](X1,X2) = 0
[MSORT](X) = X

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 del(x,u46(y,z)) -> if(u61(x,y),z,u46(y,del(x,z)))
 del(x,nil) -> nil
 min(x,u46(y,z)) -> if(u60u61(x,y),min(x,z),min(y,z))
 min(x,nil) -> x
 msort(u46(x,y)) -> u46(min(x,y),msort(del(min(x,y),u46(x,y))))
 msort(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
