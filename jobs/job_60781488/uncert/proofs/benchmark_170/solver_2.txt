YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/huefe.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) MNOCProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) MNOCProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(s(s(x)), y) -> s(plus(x, s(y)))
   plus(x, s(s(y))) -> s(plus(s(x), y))
   plus(s(0), y) -> s(y)
   plus(0, y) -> y
   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, plus(y, ack(s(x), y)))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(s(x)), y) -> PLUS(x, s(y))
   PLUS(x, s(s(y))) -> PLUS(s(x), y)
   ACK(s(x), 0) -> ACK(x, s(0))
   ACK(s(x), s(y)) -> ACK(x, plus(y, ack(s(x), y)))
   ACK(s(x), s(y)) -> PLUS(y, ack(s(x), y))
   ACK(s(x), s(y)) -> ACK(s(x), y)

The TRS R consists of the following rules:

   plus(s(s(x)), y) -> s(plus(x, s(y)))
   plus(x, s(s(y))) -> s(plus(s(x), y))
   plus(s(0), y) -> s(y)
   plus(0, y) -> y
   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, plus(y, ack(s(x), y)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(s(y))) -> PLUS(s(x), y)
   PLUS(s(s(x)), y) -> PLUS(x, s(y))

The TRS R consists of the following rules:

   plus(s(s(x)), y) -> s(plus(x, s(y)))
   plus(x, s(s(y))) -> s(plus(s(x), y))
   plus(s(0), y) -> s(y)
   plus(0, y) -> y
   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, plus(y, ack(s(x), y)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(s(y))) -> PLUS(s(x), y)
   PLUS(s(s(x)), y) -> PLUS(x, s(y))

The TRS R consists of the following rules:

   plus(s(s(x)), y) -> s(plus(x, s(y)))
   plus(x, s(s(y))) -> s(plus(s(x), y))
   plus(s(0), y) -> s(y)
   plus(0, y) -> y
   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, plus(y, ack(s(x), y)))

The set Q consists of the following terms:

   plus(s(s(x0)), x1)
   plus(x0, s(s(x1)))
   plus(s(0), x0)
   plus(0, x0)
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(s(y))) -> PLUS(s(x), y)
   PLUS(s(s(x)), y) -> PLUS(x, s(y))

R is empty.
The set Q consists of the following terms:

   plus(s(s(x0)), x1)
   plus(x0, s(s(x1)))
   plus(s(0), x0)
   plus(0, x0)
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(s(s(x0)), x1)
   plus(x0, s(s(x1)))
   plus(s(0), x0)
   plus(0, x0)
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(s(y))) -> PLUS(s(x), y)
   PLUS(s(s(x)), y) -> PLUS(x, s(y))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   PLUS(x, s(s(y))) -> PLUS(s(x), y)
   PLUS(s(s(x)), y) -> PLUS(x, s(y))


Used ordering: Knuth-Bendix order [KBO] with precedence:PLUS_2 > s_1

and weight map:

   s_1=1
   PLUS_2=0

The variable weight is 1

----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACK(s(x), s(y)) -> ACK(x, plus(y, ack(s(x), y)))
   ACK(s(x), 0) -> ACK(x, s(0))
   ACK(s(x), s(y)) -> ACK(s(x), y)

The TRS R consists of the following rules:

   plus(s(s(x)), y) -> s(plus(x, s(y)))
   plus(x, s(s(y))) -> s(plus(s(x), y))
   plus(s(0), y) -> s(y)
   plus(0, y) -> y
   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, plus(y, ack(s(x), y)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACK(s(x), s(y)) -> ACK(x, plus(y, ack(s(x), y)))
   ACK(s(x), 0) -> ACK(x, s(0))
   ACK(s(x), s(y)) -> ACK(s(x), y)

The TRS R consists of the following rules:

   plus(s(s(x)), y) -> s(plus(x, s(y)))
   plus(x, s(s(y))) -> s(plus(s(x), y))
   plus(s(0), y) -> s(y)
   plus(0, y) -> y
   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, plus(y, ack(s(x), y)))

The set Q consists of the following terms:

   plus(s(s(x0)), x1)
   plus(x0, s(s(x1)))
   plus(s(0), x0)
   plus(0, x0)
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACK(s(x), 0) -> ACK(x, s(0))
The graph contains the following edges 1 > 1


*ACK(s(x), s(y)) -> ACK(x, plus(y, ack(s(x), y)))
The graph contains the following edges 1 > 1


*ACK(s(x), s(y)) -> ACK(s(x), y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(20)
YES
