NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/oFQcT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) MNOCProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) NonTerminationLoopProof [COMPLETE, 0 ms]
        (26) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X
   leq(0, Y) -> true
   leq(s(X), 0) -> false
   leq(s(X), s(Y)) -> leq(X, Y)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   diff(X, Y) -> if(leq(X, Y), 0, s(diff(p(X), Y)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X
   leq(0, Y) -> true
   leq(s(X), 0) -> false
   leq(s(X), s(Y)) -> leq(X, Y)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   diff(X, Y) -> if(leq(X, Y), 0, s(diff(p(X), Y)))

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(X), s(Y)) -> LEQ(X, Y)
   DIFF(X, Y) -> IF(leq(X, Y), 0, s(diff(p(X), Y)))
   DIFF(X, Y) -> LEQ(X, Y)
   DIFF(X, Y) -> DIFF(p(X), Y)
   DIFF(X, Y) -> P(X)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X
   leq(0, Y) -> true
   leq(s(X), 0) -> false
   leq(s(X), s(Y)) -> leq(X, Y)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   diff(X, Y) -> if(leq(X, Y), 0, s(diff(p(X), Y)))

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(X), s(Y)) -> LEQ(X, Y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X
   leq(0, Y) -> true
   leq(s(X), 0) -> false
   leq(s(X), s(Y)) -> leq(X, Y)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   diff(X, Y) -> if(leq(X, Y), 0, s(diff(p(X), Y)))

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(X), s(Y)) -> LEQ(X, Y)

R is empty.
The set Q consists of the following terms:

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(X), s(Y)) -> LEQ(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LEQ(s(X), s(Y)) -> LEQ(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIFF(X, Y) -> DIFF(p(X), Y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X
   leq(0, Y) -> true
   leq(s(X), 0) -> false
   leq(s(X), s(Y)) -> leq(X, Y)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   diff(X, Y) -> if(leq(X, Y), 0, s(diff(p(X), Y)))

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIFF(X, Y) -> DIFF(p(X), Y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   diff(x0, x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIFF(X, Y) -> DIFF(p(X), Y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(X)) -> X

The set Q consists of the following terms:

   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   p(s(X)) -> X
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(DIFF(x_1, x_2)) = 2*x_1 + x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIFF(X, Y) -> DIFF(p(X), Y)

The TRS R consists of the following rules:

   p(0) -> 0

The set Q consists of the following terms:

   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as they contain symbols which do neither occur in P nor in R.[THIEMANN].

   p(s(x0))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIFF(X, Y) -> DIFF(p(X), Y)

The TRS R consists of the following rules:

   p(0) -> 0

The set Q consists of the following terms:

   p(0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIFF(X, Y) -> DIFF(p(X), Y)

The TRS R consists of the following rules:

   p(0) -> 0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = DIFF(X, Y) evaluates to  t =DIFF(p(X), Y)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [X / p(X)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from DIFF(X, Y) to DIFF(p(X), Y).




----------------------------------------

(26)
NO
