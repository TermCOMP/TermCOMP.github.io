NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/edYh9.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) AAECC Innermost [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QReductionProof [EQUIVALENT, 0 ms]
(12) QDP
(13) MNOCProof [EQUIVALENT, 0 ms]
(14) QDP
(15) NonTerminationLoopProof [COMPLETE, 0 ms]
(16) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(X) -> h(X)
   c -> d
   h(d) -> g(c)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(X) -> h(X)
   c'(x) -> d'(x)
   d'(h(x)) -> c'(g(x))

Q is empty.

----------------------------------------

(3) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   g(X) -> h(X)

The TRS R 2 is 
   c'(x) -> d'(x)
   d'(h(x)) -> c'(g(x))

The signature Sigma is {c'_1, d'_1}
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(X) -> h(X)
   c'(x) -> d'(x)
   d'(h(x)) -> c'(g(x))

The set Q consists of the following terms:

   g(x0)
   c'(x0)
   d'(h(x0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> D'(x)
   D'(h(x)) -> C'(g(x))
   D'(h(x)) -> G(x)

The TRS R consists of the following rules:

   g(X) -> h(X)
   c'(x) -> d'(x)
   d'(h(x)) -> c'(g(x))

The set Q consists of the following terms:

   g(x0)
   c'(x0)
   d'(h(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(h(x)) -> C'(g(x))
   C'(x) -> D'(x)

The TRS R consists of the following rules:

   g(X) -> h(X)
   c'(x) -> d'(x)
   d'(h(x)) -> c'(g(x))

The set Q consists of the following terms:

   g(x0)
   c'(x0)
   d'(h(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(h(x)) -> C'(g(x))
   C'(x) -> D'(x)

The TRS R consists of the following rules:

   g(X) -> h(X)

The set Q consists of the following terms:

   g(x0)
   c'(x0)
   d'(h(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   c'(x0)
   d'(h(x0))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(h(x)) -> C'(g(x))
   C'(x) -> D'(x)

The TRS R consists of the following rules:

   g(X) -> h(X)

The set Q consists of the following terms:

   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D'(h(x)) -> C'(g(x))
   C'(x) -> D'(x)

The TRS R consists of the following rules:

   g(X) -> h(X)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = C'(g(X)) evaluates to  t =C'(g(X))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

C'(g(X)) -> C'(h(X))
with rule g(X') -> h(X') at position [0] and matcher [X' / X]

C'(h(X)) -> D'(h(X))
with rule C'(x') -> D'(x') at position [] and matcher [x' / h(X)]

D'(h(X)) -> C'(g(X))
with rule D'(h(x)) -> C'(g(x))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(16)
NO
