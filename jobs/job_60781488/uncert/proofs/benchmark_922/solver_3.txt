YES

Problem 1: 

(VAR vu95NonEmpty L X X1 X2 Y)
(RULES
active(eq(s(X),s(Y))) -> mark(eq(X,Y))
active(eq(num0,num0)) -> mark(ftrue)
active(eq(X,Y)) -> mark(ffalse)
active(inf(X)) -> inf(active(X))
active(inf(X)) -> mark(cons(X,inf(s(X))))
active(length(cons(X,L))) -> mark(s(length(L)))
active(length(nil)) -> mark(num0)
active(length(X)) -> length(active(X))
active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
active(take(num0,X)) -> mark(nil)
active(take(X1,X2)) -> take(active(X1),X2)
active(take(X1,X2)) -> take(X1,active(X2))
cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
inf(mark(X)) -> mark(inf(X))
inf(ok(X)) -> ok(inf(X))
length(mark(X)) -> mark(length(X))
length(ok(X)) -> ok(length(X))
proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
proper(inf(X)) -> inf(proper(X))
proper(length(X)) -> length(proper(X))
proper(s(X)) -> s(proper(X))
proper(take(X1,X2)) -> take(proper(X1),proper(X2))
proper(num0) -> ok(num0)
proper(ffalse) -> ok(ffalse)
proper(nil) -> ok(nil)
proper(ftrue) -> ok(ftrue)
s(ok(X)) -> ok(s(X))
take(mark(X1),X2) -> mark(take(X1,X2))
take(ok(X1),ok(X2)) -> ok(take(X1,X2))
take(X1,mark(X2)) -> mark(take(X1,X2))
top(mark(X)) -> top(proper(X))
top(ok(X)) -> top(active(X))
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> EQ(X,Y)
 ACTIVE(inf(X)) -> ACTIVE(X)
 ACTIVE(inf(X)) -> CONS(X,inf(s(X)))
 ACTIVE(inf(X)) -> INF(active(X))
 ACTIVE(inf(X)) -> INF(s(X))
 ACTIVE(inf(X)) -> S(X)
 ACTIVE(length(cons(X,L))) -> LENGTH(L)
 ACTIVE(length(cons(X,L))) -> S(length(L))
 ACTIVE(length(X)) -> ACTIVE(X)
 ACTIVE(length(X)) -> LENGTH(active(X))
 ACTIVE(take(s(X),cons(Y,L))) -> CONS(Y,take(X,L))
 ACTIVE(take(s(X),cons(Y,L))) -> TAKE(X,L)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
 ACTIVE(take(X1,X2)) -> TAKE(active(X1),X2)
 ACTIVE(take(X1,X2)) -> TAKE(X1,active(X2))
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 EQ(ok(X1),ok(X2)) -> EQ(X1,X2)
 INF(mark(X)) -> INF(X)
 INF(ok(X)) -> INF(X)
 LENGTH(mark(X)) -> LENGTH(X)
 LENGTH(ok(X)) -> LENGTH(X)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(eq(X1,X2)) -> EQ(proper(X1),proper(X2))
 PROPER(eq(X1,X2)) -> PROPER(X1)
 PROPER(eq(X1,X2)) -> PROPER(X2)
 PROPER(inf(X)) -> INF(proper(X))
 PROPER(inf(X)) -> PROPER(X)
 PROPER(length(X)) -> LENGTH(proper(X))
 PROPER(length(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
 PROPER(take(X1,X2)) -> TAKE(proper(X1),proper(X2))
 S(ok(X)) -> S(X)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> EQ(X,Y)
 ACTIVE(inf(X)) -> ACTIVE(X)
 ACTIVE(inf(X)) -> CONS(X,inf(s(X)))
 ACTIVE(inf(X)) -> INF(active(X))
 ACTIVE(inf(X)) -> INF(s(X))
 ACTIVE(inf(X)) -> S(X)
 ACTIVE(length(cons(X,L))) -> LENGTH(L)
 ACTIVE(length(cons(X,L))) -> S(length(L))
 ACTIVE(length(X)) -> ACTIVE(X)
 ACTIVE(length(X)) -> LENGTH(active(X))
 ACTIVE(take(s(X),cons(Y,L))) -> CONS(Y,take(X,L))
 ACTIVE(take(s(X),cons(Y,L))) -> TAKE(X,L)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
 ACTIVE(take(X1,X2)) -> TAKE(active(X1),X2)
 ACTIVE(take(X1,X2)) -> TAKE(X1,active(X2))
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 EQ(ok(X1),ok(X2)) -> EQ(X1,X2)
 INF(mark(X)) -> INF(X)
 INF(ok(X)) -> INF(X)
 LENGTH(mark(X)) -> LENGTH(X)
 LENGTH(ok(X)) -> LENGTH(X)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(eq(X1,X2)) -> EQ(proper(X1),proper(X2))
 PROPER(eq(X1,X2)) -> PROPER(X1)
 PROPER(eq(X1,X2)) -> PROPER(X2)
 PROPER(inf(X)) -> INF(proper(X))
 PROPER(inf(X)) -> PROPER(X)
 PROPER(length(X)) -> LENGTH(proper(X))
 PROPER(length(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
 PROPER(take(X1,X2)) -> TAKE(proper(X1),proper(X2))
 S(ok(X)) -> S(X)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 S(ok(X)) -> S(X)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 LENGTH(mark(X)) -> LENGTH(X)
 LENGTH(ok(X)) -> LENGTH(X)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 INF(mark(X)) -> INF(X)
 INF(ok(X)) -> INF(X)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 EQ(ok(X1),ok(X2)) -> EQ(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(eq(X1,X2)) -> PROPER(X1)
 PROPER(eq(X1,X2)) -> PROPER(X2)
 PROPER(inf(X)) -> PROPER(X)
 PROPER(length(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 ACTIVE(inf(X)) -> ACTIVE(X)
 ACTIVE(length(X)) -> ACTIVE(X)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))


The problem is decomposed in 9 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(ok(X1),ok(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(TAKE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1.1: 

Subterm Processor:
-> Pairs:
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(TAKE) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 S(ok(X)) -> S(X)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(S) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 LENGTH(mark(X)) -> LENGTH(X)
 LENGTH(ok(X)) -> LENGTH(X)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(LENGTH) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 INF(mark(X)) -> INF(X)
 INF(ok(X)) -> INF(X)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(INF) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 EQ(ok(X1),ok(X2)) -> EQ(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(EQ) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(CONS) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(eq(X1,X2)) -> PROPER(X1)
 PROPER(eq(X1,X2)) -> PROPER(X2)
 PROPER(inf(X)) -> PROPER(X)
 PROPER(length(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(take(X1,X2)) -> PROPER(X1)
 PROPER(take(X1,X2)) -> PROPER(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(PROPER) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Subterm Processor:
-> Pairs:
 ACTIVE(inf(X)) -> ACTIVE(X)
 ACTIVE(length(X)) -> ACTIVE(X)
 ACTIVE(take(X1,X2)) -> ACTIVE(X1)
 ACTIVE(take(X1,X2)) -> ACTIVE(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(ACTIVE) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 2
->Bound:
 1
->Interpretation:
 
[active](X) = [1 0;0 0].X + [0;1]
[cons](X1,X2) = [1 0;0 1].X1 + [0;1]
[eq](X1,X2) = [0 1;0 0].X1 + [0 1;0 0].X2 + [1;1]
[inf](X) = [1 0;0 0].X + [1;1]
[length](X) = [1 0;0 1].X + [1;0]
[proper](X) = [1 0;0 1].X
[s](X) = [0 0;0 1].X + [0;1]
[take](X1,X2) = [1 0;0 0].X1 + [1 0;0 0].X2 + [1;1]
[top](X) = 0
[num0] = [1;1]
[fSNonEmpty] = 0
[ffalse] = [0;1]
[mark](X) = [1 0;0 0].X + [1;1]
[nil] = [1;0]
[ok](X) = [1 0;0 1].X
[ftrue] = [1;1]
[ACTIVE](X) = 0
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[PROPER](X) = 0
[S](X) = 0
[TAKE](X1,X2) = 0
[TOP](X) = [1 0;1 0].X

Problem 1.9: 

SCC Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X + 1
[cons](X1,X2) = 2.X1 + 2
[eq](X1,X2) = X1 + X2 + 1
[inf](X) = 2.X + 1
[length](X) = 2.X + 1
[proper](X) = 0
[s](X) = 2.X + 2
[take](X1,X2) = 2.X2 + 2
[top](X) = 0
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 1
[mark](X) = 2
[nil] = 2
[ok](X) = 2.X + 2
[ftrue] = 0
[ACTIVE](X) = 0
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[PROPER](X) = 0
[S](X) = 0
[TAKE](X1,X2) = 0
[TOP](X) = X

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> inf(active(X))
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(length(X)) -> length(active(X))
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 active(take(X1,X2)) -> take(active(X1),X2)
 active(take(X1,X2)) -> take(X1,active(X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 eq(ok(X1),ok(X2)) -> ok(eq(X1,X2))
 inf(mark(X)) -> mark(inf(X))
 inf(ok(X)) -> ok(inf(X))
 length(mark(X)) -> mark(length(X))
 length(ok(X)) -> ok(length(X))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(eq(X1,X2)) -> eq(proper(X1),proper(X2))
 proper(inf(X)) -> inf(proper(X))
 proper(length(X)) -> length(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(take(X1,X2)) -> take(proper(X1),proper(X2))
 proper(num0) -> ok(num0)
 proper(ffalse) -> ok(ffalse)
 proper(nil) -> ok(nil)
 proper(ftrue) -> ok(ftrue)
 s(ok(X)) -> ok(s(X))
 take(mark(X1),X2) -> mark(take(X1,X2))
 take(ok(X1),ok(X2)) -> ok(take(X1,X2))
 take(X1,mark(X2)) -> mark(take(X1,X2))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
