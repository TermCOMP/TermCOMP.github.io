YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/aWXUq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) NonInfProof [EQUIVALENT, 21 ms]
        (27) AND
            (28) QDP
                (29) DependencyGraphProof [EQUIVALENT, 0 ms]
                (30) TRUE
            (31) QDP
                (32) DependencyGraphProof [EQUIVALENT, 0 ms]
                (33) TRUE
    (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QReductionProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QDPOrderProof [EQUIVALENT, 31 ms]
        (40) QDP
        (41) DependencyGraphProof [EQUIVALENT, 0 ms]
        (42) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)

The TRS R 2 is 
   a -> b
   a -> c

The signature Sigma is {a, b, c}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(xs) -> PRODITER(xs, s(0))
   PRODITER(xs, x) -> IFPROD(isempty(xs), xs, x)
   PRODITER(xs, x) -> ISEMPTY(xs)
   IFPROD(false, xs, x) -> PRODITER(tail(xs), times(x, head(xs)))
   IFPROD(false, xs, x) -> TAIL(xs)
   IFPROD(false, xs, x) -> TIMES(x, head(xs))
   IFPROD(false, xs, x) -> HEAD(xs)
   PLUS(s(x), y) -> PLUS(x, y)
   TIMES(x, y) -> TIMESITER(x, y, 0, 0)
   TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)
   TIMESITER(x, y, z, u) -> GE(u, x)
   IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))
   IFTIMES(false, x, y, z, u) -> PLUS(y, z)
   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 8 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(x), s(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))
   TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)

The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))
   TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))
   TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u)) the following chains were created:
*We consider the chain TIMESITER(x4, x5, x6, x7) -> IFTIMES(ge(x7, x4), x4, x5, x6, x7), IFTIMES(false, x8, x9, x10, x11) -> TIMESITER(x8, x9, plus(x9, x10), s(x11)) which results in the following constraint:

(1)    (IFTIMES(ge(x7, x4), x4, x5, x6, x7)=IFTIMES(false, x8, x9, x10, x11)  ==>  IFTIMES(false, x8, x9, x10, x11)_>=_TIMESITER(x8, x9, plus(x9, x10), s(x11)))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (ge(x7, x4)=false  ==>  IFTIMES(false, x4, x5, x6, x7)_>=_TIMESITER(x4, x5, plus(x5, x6), s(x7)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on ge(x7, x4)=false which results in the following new constraints:

(3)    (false=false  ==>  IFTIMES(false, s(x25), x5, x6, 0)_>=_TIMESITER(s(x25), x5, plus(x5, x6), s(0)))

(4)    (ge(x27, x26)=false & (\/x28,x29:ge(x27, x26)=false  ==>  IFTIMES(false, x26, x28, x29, x27)_>=_TIMESITER(x26, x28, plus(x28, x29), s(x27)))  ==>  IFTIMES(false, s(x26), x5, x6, s(x27))_>=_TIMESITER(s(x26), x5, plus(x5, x6), s(s(x27))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IFTIMES(false, s(x25), x5, x6, 0)_>=_TIMESITER(s(x25), x5, plus(x5, x6), s(0)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x28,x29:ge(x27, x26)=false  ==>  IFTIMES(false, x26, x28, x29, x27)_>=_TIMESITER(x26, x28, plus(x28, x29), s(x27))) with sigma = [x28 / x5, x29 / x6] which results in the following new constraint:

(6)    (IFTIMES(false, x26, x5, x6, x27)_>=_TIMESITER(x26, x5, plus(x5, x6), s(x27))  ==>  IFTIMES(false, s(x26), x5, x6, s(x27))_>=_TIMESITER(s(x26), x5, plus(x5, x6), s(s(x27))))








For Pair TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u) the following chains were created:
*We consider the chain IFTIMES(false, x12, x13, x14, x15) -> TIMESITER(x12, x13, plus(x13, x14), s(x15)), TIMESITER(x16, x17, x18, x19) -> IFTIMES(ge(x19, x16), x16, x17, x18, x19) which results in the following constraint:

(1)    (TIMESITER(x12, x13, plus(x13, x14), s(x15))=TIMESITER(x16, x17, x18, x19)  ==>  TIMESITER(x16, x17, x18, x19)_>=_IFTIMES(ge(x19, x16), x16, x17, x18, x19))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (TIMESITER(x12, x13, x18, s(x15))_>=_IFTIMES(ge(s(x15), x12), x12, x13, x18, s(x15)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))

*(IFTIMES(false, s(x25), x5, x6, 0)_>=_TIMESITER(s(x25), x5, plus(x5, x6), s(0)))


*(IFTIMES(false, x26, x5, x6, x27)_>=_TIMESITER(x26, x5, plus(x5, x6), s(x27))  ==>  IFTIMES(false, s(x26), x5, x6, s(x27))_>=_TIMESITER(s(x26), x5, plus(x5, x6), s(s(x27))))




*TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)

*(TIMESITER(x12, x13, x18, s(x15))_>=_IFTIMES(ge(s(x15), x12), x12, x13, x18, s(x15)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IFTIMES(x_1, x_2, x_3, x_4, x_5)) = -1 - x_1 + x_2 - x_5
   POL(TIMESITER(x_1, x_2, x_3, x_4)) = -1 + x_1 - x_4
   POL(c) = -2
   POL(false) = 1
   POL(ge(x_1, x_2)) = 1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(true) = 1


The following pairs  are in P_>:
   TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)
The following pairs are in P_bound:
   IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))
The following rules are usable:
   true -> ge(x, 0)
   false -> ge(0, s(y))
   ge(x, y) -> ge(s(x), s(y))

----------------------------------------

(27)
Complex Obligation (AND)

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFTIMES(false, x, y, z, u) -> TIMESITER(x, y, plus(y, z), s(u))

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(30)
TRUE

----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMESITER(x, y, z, u) -> IFTIMES(ge(u, x), x, y, z, u)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(33)
TRUE

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFPROD(false, xs, x) -> PRODITER(tail(xs), times(x, head(xs)))
   PRODITER(xs, x) -> IFPROD(isempty(xs), xs, x)

The TRS R consists of the following rules:

   prod(xs) -> prodIter(xs, s(0))
   prodIter(xs, x) -> ifProd(isempty(xs), xs, x)
   ifProd(true, xs, x) -> x
   ifProd(false, xs, x) -> prodIter(tail(xs), times(x, head(xs)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0, 0)
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   ifTimes(true, x, y, z, u) -> z
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   a -> b
   a -> c

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFPROD(false, xs, x) -> PRODITER(tail(xs), times(x, head(xs)))
   PRODITER(xs, x) -> IFPROD(isempty(xs), xs, x)

The TRS R consists of the following rules:

   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   head(nil) -> error
   head(cons(x, xs)) -> x
   times(x, y) -> timesIter(x, y, 0, 0)
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   ifTimes(true, x, y, z, u) -> z

The set Q consists of the following terms:

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   prod(x0)
   prodIter(x0, x1)
   ifProd(true, x0, x1)
   ifProd(false, x0, x1)
   a


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFPROD(false, xs, x) -> PRODITER(tail(xs), times(x, head(xs)))
   PRODITER(xs, x) -> IFPROD(isempty(xs), xs, x)

The TRS R consists of the following rules:

   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   head(nil) -> error
   head(cons(x, xs)) -> x
   times(x, y) -> timesIter(x, y, 0, 0)
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   ifTimes(true, x, y, z, u) -> z

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IFPROD(false, xs, x) -> PRODITER(tail(xs), times(x, head(xs)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = 0
   POL(IFPROD(x_1, x_2, x_3)) = [1/4]x_1 + [1/2]x_2
   POL(PRODITER(x_1, x_2)) = x_1
   POL(cons(x_1, x_2)) = [1/2] + [2]x_1 + [4]x_2
   POL(error) = 0
   POL(false) = [1/4]
   POL(ge(x_1, x_2)) = 0
   POL(head(x_1)) = x_1
   POL(ifTimes(x_1, x_2, x_3, x_4, x_5)) = [1] + x_2 + x_3 + x_4 + x_5
   POL(isempty(x_1)) = [1/2]x_1
   POL(nil) = 0
   POL(plus(x_1, x_2)) = [2]x_1 + [4]x_2
   POL(s(x_1)) = [1/2]
   POL(tail(x_1)) = [1/4]x_1
   POL(times(x_1, x_2)) = 0
   POL(timesIter(x_1, x_2, x_3, x_4)) = [1] + x_1 + x_2
   POL(true) = 0
The value of delta used in the strict ordering is 1/16.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PRODITER(xs, x) -> IFPROD(isempty(xs), xs, x)

The TRS R consists of the following rules:

   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   head(nil) -> error
   head(cons(x, xs)) -> x
   times(x, y) -> timesIter(x, y, 0, 0)
   ifTimes(false, x, y, z, u) -> timesIter(x, y, plus(y, z), s(u))
   timesIter(x, y, z, u) -> ifTimes(ge(u, x), x, y, z, u)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   ifTimes(true, x, y, z, u) -> z

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2, x3)
   ifTimes(true, x0, x1, x2, x3)
   ifTimes(false, x0, x1, x2, x3)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(42)
TRUE
