YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DHEVV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(minus(x)) -> x
   minus(+(x, y)) -> *(minus(minus(minus(x))), minus(minus(minus(y))))
   minus(*(x, y)) -> +(minus(minus(minus(x))), minus(minus(minus(y))))
   f(minus(x)) -> minus(minus(minus(f(x))))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(+(x, y)) -> MINUS(minus(minus(x)))
   MINUS(+(x, y)) -> MINUS(minus(x))
   MINUS(+(x, y)) -> MINUS(x)
   MINUS(+(x, y)) -> MINUS(minus(minus(y)))
   MINUS(+(x, y)) -> MINUS(minus(y))
   MINUS(+(x, y)) -> MINUS(y)
   MINUS(*(x, y)) -> MINUS(minus(minus(x)))
   MINUS(*(x, y)) -> MINUS(minus(x))
   MINUS(*(x, y)) -> MINUS(x)
   MINUS(*(x, y)) -> MINUS(minus(minus(y)))
   MINUS(*(x, y)) -> MINUS(minus(y))
   MINUS(*(x, y)) -> MINUS(y)
   F(minus(x)) -> MINUS(minus(minus(f(x))))
   F(minus(x)) -> MINUS(minus(f(x)))
   F(minus(x)) -> MINUS(f(x))
   F(minus(x)) -> F(x)

The TRS R consists of the following rules:

   minus(minus(x)) -> x
   minus(+(x, y)) -> *(minus(minus(minus(x))), minus(minus(minus(y))))
   minus(*(x, y)) -> +(minus(minus(minus(x))), minus(minus(minus(y))))
   f(minus(x)) -> minus(minus(minus(f(x))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(+(x, y)) -> MINUS(minus(x))
   MINUS(+(x, y)) -> MINUS(minus(minus(x)))
   MINUS(+(x, y)) -> MINUS(x)
   MINUS(+(x, y)) -> MINUS(minus(minus(y)))
   MINUS(+(x, y)) -> MINUS(minus(y))
   MINUS(+(x, y)) -> MINUS(y)
   MINUS(*(x, y)) -> MINUS(minus(minus(x)))
   MINUS(*(x, y)) -> MINUS(minus(x))
   MINUS(*(x, y)) -> MINUS(x)
   MINUS(*(x, y)) -> MINUS(minus(minus(y)))
   MINUS(*(x, y)) -> MINUS(minus(y))
   MINUS(*(x, y)) -> MINUS(y)

The TRS R consists of the following rules:

   minus(minus(x)) -> x
   minus(+(x, y)) -> *(minus(minus(minus(x))), minus(minus(minus(y))))
   minus(*(x, y)) -> +(minus(minus(minus(x))), minus(minus(minus(y))))
   f(minus(x)) -> minus(minus(minus(f(x))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(+(x, y)) -> MINUS(minus(x))
   MINUS(+(x, y)) -> MINUS(minus(minus(x)))
   MINUS(+(x, y)) -> MINUS(x)
   MINUS(+(x, y)) -> MINUS(minus(minus(y)))
   MINUS(+(x, y)) -> MINUS(minus(y))
   MINUS(+(x, y)) -> MINUS(y)
   MINUS(*(x, y)) -> MINUS(minus(minus(x)))
   MINUS(*(x, y)) -> MINUS(minus(x))
   MINUS(*(x, y)) -> MINUS(x)
   MINUS(*(x, y)) -> MINUS(minus(minus(y)))
   MINUS(*(x, y)) -> MINUS(minus(y))
   MINUS(*(x, y)) -> MINUS(y)

The TRS R consists of the following rules:

   minus(minus(x)) -> x
   minus(+(x, y)) -> *(minus(minus(minus(x))), minus(minus(minus(y))))
   minus(*(x, y)) -> +(minus(minus(minus(x))), minus(minus(minus(y))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MINUS(+(x, y)) -> MINUS(minus(x))
   MINUS(+(x, y)) -> MINUS(minus(minus(x)))
   MINUS(+(x, y)) -> MINUS(x)
   MINUS(+(x, y)) -> MINUS(minus(minus(y)))
   MINUS(+(x, y)) -> MINUS(minus(y))
   MINUS(+(x, y)) -> MINUS(y)
   MINUS(*(x, y)) -> MINUS(minus(minus(x)))
   MINUS(*(x, y)) -> MINUS(minus(x))
   MINUS(*(x, y)) -> MINUS(x)
   MINUS(*(x, y)) -> MINUS(minus(minus(y)))
   MINUS(*(x, y)) -> MINUS(minus(y))
   MINUS(*(x, y)) -> MINUS(y)

Strictly oriented rules of the TRS R:

   minus(minus(x)) -> x
   minus(+(x, y)) -> *(minus(minus(minus(x))), minus(minus(minus(y))))
   minus(*(x, y)) -> +(minus(minus(minus(x))), minus(minus(minus(y))))

Used ordering: Knuth-Bendix order [KBO] with precedence:minus_1 > *_2 > MINUS_1 > +_2

and weight map:

   minus_1=0
   MINUS_1=1
   +_2=0
   *_2=0

The variable weight is 1

----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(minus(x)) -> F(x)

The TRS R consists of the following rules:

   minus(minus(x)) -> x
   minus(+(x, y)) -> *(minus(minus(minus(x))), minus(minus(minus(y))))
   minus(*(x, y)) -> +(minus(minus(minus(x))), minus(minus(minus(y))))
   f(minus(x)) -> minus(minus(minus(f(x))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(minus(x)) -> F(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(minus(x)) -> F(x)
The graph contains the following edges 1 > 1


----------------------------------------

(16)
YES
