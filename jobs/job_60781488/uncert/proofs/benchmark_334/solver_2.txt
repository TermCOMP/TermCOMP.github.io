YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6pm0X.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 1 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) MNOCProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) MNOCProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 0(y)) -> 0^1(+(x, y))
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> 0^1(+(+(x, y), 1(#)))
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   *^1(0(x), y) -> 0^1(*(x, y))
   *^1(0(x), y) -> *^1(x, y)
   *^1(1(x), y) -> +^1(0(*(x, y)), y)
   *^1(1(x), y) -> 0^1(*(x, y))
   *^1(1(x), y) -> *^1(x, y)
   SUM(nil) -> 0^1(#)
   SUM(cons(x, l)) -> +^1(x, sum(l))
   SUM(cons(x, l)) -> SUM(l)
   PROD(cons(x, l)) -> *^1(x, prod(l))
   PROD(cons(x, l)) -> PROD(l)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 8 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)

The TRS R consists of the following rules:

   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   0(#) -> #

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)

Strictly oriented rules of the TRS R:

   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   0(#) -> #

Used ordering: Knuth-Bendix order [KBO] with precedence:# > +^1_2 > +_2 > 1_1 > 0_1

and weight map:

   #=2
   0_1=1
   1_1=3
   +_2=0
   +^1_2=0

The variable weight is 1

----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, l)) -> SUM(l)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, l)) -> SUM(l)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

The set Q consists of the following terms:

   0(#)
   +(x0, #)
   +(#, x0)
   +(0(x0), 0(x1))
   +(0(x0), 1(x1))
   +(1(x0), 0(x1))
   +(1(x0), 1(x1))
   *(#, x0)
   *(0(x0), x1)
   *(1(x0), x1)
   sum(nil)
   sum(cons(x0, x1))
   prod(nil)
   prod(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, l)) -> SUM(l)

R is empty.
The set Q consists of the following terms:

   0(#)
   +(x0, #)
   +(#, x0)
   +(0(x0), 0(x1))
   +(0(x0), 1(x1))
   +(1(x0), 0(x1))
   +(1(x0), 1(x1))
   *(#, x0)
   *(0(x0), x1)
   *(1(x0), x1)
   sum(nil)
   sum(cons(x0, x1))
   prod(nil)
   prod(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   0(#)
   +(x0, #)
   +(#, x0)
   +(0(x0), 0(x1))
   +(0(x0), 1(x1))
   +(1(x0), 0(x1))
   +(1(x0), 1(x1))
   *(#, x0)
   *(0(x0), x1)
   *(1(x0), x1)
   sum(nil)
   sum(cons(x0, x1))
   prod(nil)
   prod(cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, l)) -> SUM(l)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUM(cons(x, l)) -> SUM(l)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(1(x), y) -> *^1(x, y)
   *^1(0(x), y) -> *^1(x, y)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(1(x), y) -> *^1(x, y)
   *^1(0(x), y) -> *^1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**^1(1(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(0(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(cons(x, l)) -> PROD(l)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(cons(x, l)) -> PROD(l)

The TRS R consists of the following rules:

   0(#) -> #
   +(x, #) -> x
   +(#, x) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   sum(nil) -> 0(#)
   sum(cons(x, l)) -> +(x, sum(l))
   prod(nil) -> 1(#)
   prod(cons(x, l)) -> *(x, prod(l))

The set Q consists of the following terms:

   0(#)
   +(x0, #)
   +(#, x0)
   +(0(x0), 0(x1))
   +(0(x0), 1(x1))
   +(1(x0), 0(x1))
   +(1(x0), 1(x1))
   *(#, x0)
   *(0(x0), x1)
   *(1(x0), x1)
   sum(nil)
   sum(cons(x0, x1))
   prod(nil)
   prod(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(cons(x, l)) -> PROD(l)

R is empty.
The set Q consists of the following terms:

   0(#)
   +(x0, #)
   +(#, x0)
   +(0(x0), 0(x1))
   +(0(x0), 1(x1))
   +(1(x0), 0(x1))
   +(1(x0), 1(x1))
   *(#, x0)
   *(0(x0), x1)
   *(1(x0), x1)
   sum(nil)
   sum(cons(x0, x1))
   prod(nil)
   prod(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   0(#)
   +(x0, #)
   +(#, x0)
   +(0(x0), 0(x1))
   +(0(x0), 1(x1))
   +(1(x0), 0(x1))
   +(1(x0), 1(x1))
   *(#, x0)
   *(0(x0), x1)
   *(1(x0), x1)
   sum(nil)
   sum(cons(x0, x1))
   prod(nil)
   prod(cons(x0, x1))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(cons(x, l)) -> PROD(l)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PROD(cons(x, l)) -> PROD(l)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES
