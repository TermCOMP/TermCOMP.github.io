YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/OCTrn.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) QDPOrderProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPOrderProof [EQUIVALENT, 7 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) QDPOrderProof [EQUIVALENT, 6 ms]
        (38) QDP
        (39) QDPOrderProof [EQUIVALENT, 19 ms]
        (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) DependencyGraphProof [EQUIVALENT, 0 ms]
        (46) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(0, Y)) -> MARK(0)
   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   ACTIVE(minus(s(X), s(Y))) -> MINUS(X, Y)
   ACTIVE(geq(X, 0)) -> MARK(true)
   ACTIVE(geq(0, s(Y))) -> MARK(false)
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   ACTIVE(geq(s(X), s(Y))) -> GEQ(X, Y)
   ACTIVE(div(0, s(Y))) -> MARK(0)
   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   ACTIVE(div(s(X), s(Y))) -> IF(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   ACTIVE(div(s(X), s(Y))) -> GEQ(X, Y)
   ACTIVE(div(s(X), s(Y))) -> S(div(minus(X, Y), s(Y)))
   ACTIVE(div(s(X), s(Y))) -> DIV(minus(X, Y), s(Y))
   ACTIVE(div(s(X), s(Y))) -> MINUS(X, Y)
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   MARK(0) -> ACTIVE(0)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   MARK(true) -> ACTIVE(true)
   MARK(false) -> ACTIVE(false)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(div(X1, X2)) -> DIV(mark(X1), X2)
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> IF(mark(X1), X2, X3)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 17 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*IF(active(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, active(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(X1, X2, active(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(X1, mark(X2)) -> DIV(X1, X2)
   DIV(mark(X1), X2) -> DIV(X1, X2)
   DIV(active(X1), X2) -> DIV(X1, X2)
   DIV(X1, active(X2)) -> DIV(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DIV(X1, mark(X2)) -> DIV(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*DIV(mark(X1), X2) -> DIV(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*DIV(active(X1), X2) -> DIV(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*DIV(X1, active(X2)) -> DIV(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ(X1, mark(X2)) -> GEQ(X1, X2)
   GEQ(mark(X1), X2) -> GEQ(X1, X2)
   GEQ(active(X1), X2) -> GEQ(X1, X2)
   GEQ(X1, active(X2)) -> GEQ(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GEQ(X1, mark(X2)) -> GEQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*GEQ(mark(X1), X2) -> GEQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*GEQ(active(X1), X2) -> GEQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*GEQ(X1, active(X2)) -> GEQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X1, mark(X2)) -> MINUS(X1, X2)
   MINUS(mark(X1), X2) -> MINUS(X1, X2)
   MINUS(active(X1), X2) -> MINUS(X1, X2)
   MINUS(X1, active(X2)) -> MINUS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(X1, mark(X2)) -> MINUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*MINUS(mark(X1), X2) -> MINUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*MINUS(active(X1), X2) -> MINUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*MINUS(X1, active(X2)) -> MINUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(s(X)) -> MARK(X)
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> ACTIVE(s(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(active(x_1)) = 0
   POL(div(x_1, x_2)) = 1
   POL(false) = 0
   POL(geq(x_1, x_2)) = 1
   POL(if(x_1, x_2, x_3)) = 1
   POL(mark(x_1)) = 0
   POL(minus(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(s(X)) -> MARK(X)
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(s(X)) -> active(s(mark(X)))
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   active(if(true, X, Y)) -> mark(X)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(if(false, X, Y)) -> mark(Y)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(false) -> active(false)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(div(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(div(s(X), s(Y))) -> MARK(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   MARK(div(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = 1 + x_1
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(s(X)) -> active(s(mark(X)))
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   active(if(true, X, Y)) -> mark(X)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(if(false, X, Y)) -> mark(Y)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(false) -> active(false)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(div(x_1, x_2)) = 1
   POL(false) = 1
   POL(geq(x_1, x_2)) = 1
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(true) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   mark(s(X)) -> active(s(mark(X)))
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   active(if(true, X, Y)) -> mark(X)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   active(if(false, X, Y)) -> mark(Y)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(false) -> active(false)
   div(X1, mark(X2)) -> div(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   active(minus(0, Y)) -> mark(0)
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(div(0, s(Y))) -> mark(0)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(div(X1, X2)) -> ACTIVE(div(mark(X1), X2))
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 1
POL( MARK_1(x_1) ) = x_1 + 1
POL( minus_2(x_1, x_2) ) = 0
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 2x_1 + 1
POL( geq_2(x_1, x_2) ) = 0
POL( div_2(x_1, x_2) ) = 2x_2 + 1
POL( if_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 2x_3 + 2
POL( s_1(x_1) ) = 1
POL( 0 ) = 2
POL( true ) = 2
POL( false ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))

The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   mark(minus(X1, X2)) -> active(minus(X1, X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(geq(X1, X2)) -> active(geq(X1, X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(div(X1, X2)) -> active(div(mark(X1), X2))
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   div(mark(X1), X2) -> div(X1, X2)
   div(X1, mark(X2)) -> div(X1, X2)
   div(active(X1), X2) -> div(X1, X2)
   div(X1, active(X2)) -> div(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))

The TRS R consists of the following rules:

   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ACTIVE(minus(s(X), s(Y))) -> MARK(minus(X, Y))
   ACTIVE(geq(s(X), s(Y))) -> MARK(geq(X, Y))
   MARK(geq(X1, X2)) -> ACTIVE(geq(X1, X2))
The following rules are removed from R:

   geq(X1, mark(X2)) -> geq(X1, X2)
   geq(mark(X1), X2) -> geq(X1, X2)
   geq(active(X1), X2) -> geq(X1, X2)
   geq(X1, active(X2)) -> geq(X1, X2)
   minus(X1, mark(X2)) -> minus(X1, X2)
   minus(mark(X1), X2) -> minus(X1, X2)
   minus(active(X1), X2) -> minus(X1, X2)
   minus(X1, active(X2)) -> minus(X1, X2)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(active(x_1)) = 2*x_1
   POL(geq(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(mark(x_1)) = 2*x_1
   POL(minus(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(minus(X1, X2)) -> ACTIVE(minus(X1, X2))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(46)
TRUE
