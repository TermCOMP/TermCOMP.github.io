YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7pwxE.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) NonInfProof [EQUIVALENT, 0 ms]
        (27) AND
            (28) QDP
                (29) DependencyGraphProof [EQUIVALENT, 0 ms]
                (30) TRUE
            (31) QDP
                (32) DependencyGraphProof [EQUIVALENT, 0 ms]
                (33) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   fib(x) -> fibiter(x, 0, 0, s(0))
   fibiter(b, c, x, y) -> if(lt(c, b), b, c, x, y)
   if(false, b, c, x, y) -> x
   if(true, b, c, x, y) -> fibiter(b, s(c), y, plus(x, y))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   fib(x) -> fibiter(x, 0, 0, s(0))
   fibiter(b, c, x, y) -> if(lt(c, b), b, c, x, y)
   if(false, b, c, x, y) -> x
   if(true, b, c, x, y) -> fibiter(b, s(c), y, plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)
   LT(s(x), s(y)) -> LT(x, y)
   FIB(x) -> FIBITER(x, 0, 0, s(0))
   FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)
   FIBITER(b, c, x, y) -> LT(c, b)
   IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))
   IF(true, b, c, x, y) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   fib(x) -> fibiter(x, 0, 0, s(0))
   fibiter(b, c, x, y) -> if(lt(c, b), b, c, x, y)
   if(false, b, c, x, y) -> x
   if(true, b, c, x, y) -> fibiter(b, s(c), y, plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   fib(x) -> fibiter(x, 0, 0, s(0))
   fibiter(b, c, x, y) -> if(lt(c, b), b, c, x, y)
   if(false, b, c, x, y) -> x
   if(true, b, c, x, y) -> fibiter(b, s(c), y, plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(x), s(y)) -> LT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   fib(x) -> fibiter(x, 0, 0, s(0))
   fibiter(b, c, x, y) -> if(lt(c, b), b, c, x, y)
   if(false, b, c, x, y) -> x
   if(true, b, c, x, y) -> fibiter(b, s(c), y, plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))
   FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)

The TRS R consists of the following rules:

   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   fib(x) -> fibiter(x, 0, 0, s(0))
   fibiter(b, c, x, y) -> if(lt(c, b), b, c, x, y)
   if(false, b, c, x, y) -> x
   if(true, b, c, x, y) -> fibiter(b, s(c), y, plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))
   FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fib(x0)
   fibiter(x0, x1, x2, x3)
   if(false, x0, x1, x2, x3)
   if(true, x0, x1, x2, x3)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))
   FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y)) the following chains were created:
*We consider the chain FIBITER(x4, x5, x6, x7) -> IF(lt(x5, x4), x4, x5, x6, x7), IF(true, x8, x9, x10, x11) -> FIBITER(x8, s(x9), x11, plus(x10, x11)) which results in the following constraint:

(1)    (IF(lt(x5, x4), x4, x5, x6, x7)=IF(true, x8, x9, x10, x11)  ==>  IF(true, x8, x9, x10, x11)_>=_FIBITER(x8, s(x9), x11, plus(x10, x11)))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (lt(x5, x4)=true  ==>  IF(true, x4, x5, x6, x7)_>=_FIBITER(x4, s(x5), x7, plus(x6, x7)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on lt(x5, x4)=true which results in the following new constraints:

(3)    (true=true  ==>  IF(true, s(x24), 0, x6, x7)_>=_FIBITER(s(x24), s(0), x7, plus(x6, x7)))

(4)    (lt(x27, x26)=true & (\/x28,x29:lt(x27, x26)=true  ==>  IF(true, x26, x27, x28, x29)_>=_FIBITER(x26, s(x27), x29, plus(x28, x29)))  ==>  IF(true, s(x26), s(x27), x6, x7)_>=_FIBITER(s(x26), s(s(x27)), x7, plus(x6, x7)))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(true, s(x24), 0, x6, x7)_>=_FIBITER(s(x24), s(0), x7, plus(x6, x7)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x28,x29:lt(x27, x26)=true  ==>  IF(true, x26, x27, x28, x29)_>=_FIBITER(x26, s(x27), x29, plus(x28, x29))) with sigma = [x28 / x6, x29 / x7] which results in the following new constraint:

(6)    (IF(true, x26, x27, x6, x7)_>=_FIBITER(x26, s(x27), x7, plus(x6, x7))  ==>  IF(true, s(x26), s(x27), x6, x7)_>=_FIBITER(s(x26), s(s(x27)), x7, plus(x6, x7)))








For Pair FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y) the following chains were created:
*We consider the chain IF(true, x12, x13, x14, x15) -> FIBITER(x12, s(x13), x15, plus(x14, x15)), FIBITER(x16, x17, x18, x19) -> IF(lt(x17, x16), x16, x17, x18, x19) which results in the following constraint:

(1)    (FIBITER(x12, s(x13), x15, plus(x14, x15))=FIBITER(x16, x17, x18, x19)  ==>  FIBITER(x16, x17, x18, x19)_>=_IF(lt(x17, x16), x16, x17, x18, x19))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (FIBITER(x12, s(x13), x15, x19)_>=_IF(lt(s(x13), x12), x12, s(x13), x15, x19))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))

*(IF(true, s(x24), 0, x6, x7)_>=_FIBITER(s(x24), s(0), x7, plus(x6, x7)))


*(IF(true, x26, x27, x6, x7)_>=_FIBITER(x26, s(x27), x7, plus(x6, x7))  ==>  IF(true, s(x26), s(x27), x6, x7)_>=_FIBITER(s(x26), s(s(x27)), x7, plus(x6, x7)))




*FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)

*(FIBITER(x12, s(x13), x15, x19)_>=_IF(lt(s(x13), x12), x12, s(x13), x15, x19))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(FIBITER(x_1, x_2, x_3, x_4)) = -1 + x_1 - x_2
   POL(IF(x_1, x_2, x_3, x_4, x_5)) = -1 - x_1 + x_2 - x_3
   POL(c) = -2
   POL(false) = 1
   POL(lt(x_1, x_2)) = 1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(true) = 1


The following pairs  are in P_>:
   FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)
The following pairs are in P_bound:
   IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))
The following rules are usable:
   true -> lt(0, s(y))
   false -> lt(x, 0)
   lt(x, y) -> lt(s(x), s(y))

----------------------------------------

(27)
Complex Obligation (AND)

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, b, c, x, y) -> FIBITER(b, s(c), y, plus(x, y))

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(30)
TRUE

----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIBITER(b, c, x, y) -> IF(lt(c, b), b, c, x, y)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(33)
TRUE
