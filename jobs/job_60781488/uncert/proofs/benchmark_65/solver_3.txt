YES

Problem 1: 

(VAR vu95NonEmpty f x y ys)
(RULES
app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
app(app(filter,f),nil) -> nil
app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
app(app(neq,app(s,x)),num0) -> ftrue
app(app(neq,num0),app(s,y)) -> ftrue
app(app(neq,num0),num0) -> ffalse
nonzero -> app(filter,app(neq,num0))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> APP(app(cons,y),app(app(filter,f),ys))
 APP(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(filtersub,app(f,y)),f)
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(filtersub,app(f,y))
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(f,y)
 APP(app(neq,app(s,x)),app(s,y)) -> APP(app(neq,x),y)
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> APP(app(cons,y),app(app(filter,f),ys))
 APP(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(filtersub,app(f,y)),f)
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(filtersub,app(f,y))
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(f,y)
 APP(app(neq,app(s,x)),app(s,y)) -> APP(app(neq,x),y)
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(neq,app(s,x)),app(s,y)) -> APP(app(neq,x),y)
->->-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
->->Cycle:
->->-> Pairs:
 APP(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(f,y)
->->-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(app(neq,app(s,x)),app(s,y)) -> APP(app(neq,x),y)
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> APP(app(filter,f),ys)
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(f,y)
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 APP(app(filter,f),app(app(cons,y),ys)) -> APP(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
-> Rules:
 app(app(app(filtersub,ffalse),f),app(app(cons,y),ys)) -> app(app(filter,f),ys)
 app(app(app(filtersub,ftrue),f),app(app(cons,y),ys)) -> app(app(cons,y),app(app(filter,f),ys))
 app(app(filter,f),app(app(cons,y),ys)) -> app(app(app(filtersub,app(f,y)),f),app(app(cons,y),ys))
 app(app(filter,f),nil) -> nil
 app(app(neq,app(s,x)),app(s,y)) -> app(app(neq,x),y)
 app(app(neq,app(s,x)),num0) -> ftrue
 app(app(neq,num0),app(s,y)) -> ftrue
 app(app(neq,num0),num0) -> ffalse
 nonzero -> app(filter,app(neq,num0))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
