YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wfBq8.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) QDPOrderProof [EQUIVALENT, 14 ms]
        (42) QDP
        (43) QDPOrderProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) QDPOrderProof [EQUIVALENT, 13 ms]
        (46) QDP
        (47) QDPOrderProof [EQUIVALENT, 5 ms]
        (48) QDP
        (49) QDPOrderProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) UsableRulesProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (54) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(true, X)) -> MARK(X)
   ACTIVE(and(false, Y)) -> MARK(false)
   ACTIVE(if(true, X, Y)) -> MARK(X)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   ACTIVE(add(0, X)) -> MARK(X)
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   ACTIVE(add(s(X), Y)) -> S(add(X, Y))
   ACTIVE(add(s(X), Y)) -> ADD(X, Y)
   ACTIVE(first(0, X)) -> MARK(nil)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   ACTIVE(first(s(X), cons(Y, Z))) -> CONS(Y, first(X, Z))
   ACTIVE(first(s(X), cons(Y, Z))) -> FIRST(X, Z)
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
   ACTIVE(from(X)) -> CONS(X, from(s(X)))
   ACTIVE(from(X)) -> FROM(s(X))
   ACTIVE(from(X)) -> S(X)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), X2))
   MARK(and(X1, X2)) -> AND(mark(X1), X2)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(true) -> ACTIVE(true)
   MARK(false) -> ACTIVE(false)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> IF(mark(X1), X2, X3)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), X2))
   MARK(add(X1, X2)) -> ADD(mark(X1), X2)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(0) -> ACTIVE(0)
   MARK(s(X)) -> ACTIVE(s(X))
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   MARK(first(X1, X2)) -> FIRST(mark(X1), mark(X2))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(nil) -> ACTIVE(nil)
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   MARK(from(X)) -> ACTIVE(from(X))
   AND(mark(X1), X2) -> AND(X1, X2)
   AND(X1, mark(X2)) -> AND(X1, X2)
   AND(active(X1), X2) -> AND(X1, X2)
   AND(X1, active(X2)) -> AND(X1, X2)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   FIRST(mark(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, mark(X2)) -> FIRST(X1, X2)
   FIRST(active(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, active(X2)) -> FIRST(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   FROM(mark(X)) -> FROM(X)
   FROM(active(X)) -> FROM(X)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 8 SCCs with 17 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(active(X)) -> FROM(X)
   FROM(mark(X)) -> FROM(X)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(active(X)) -> FROM(X)
   FROM(mark(X)) -> FROM(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FROM(active(X)) -> FROM(X)
The graph contains the following edges 1 > 1


*FROM(mark(X)) -> FROM(X)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(X1, mark(X2)) -> FIRST(X1, X2)
   FIRST(mark(X1), X2) -> FIRST(X1, X2)
   FIRST(active(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, active(X2)) -> FIRST(X1, X2)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(X1, mark(X2)) -> FIRST(X1, X2)
   FIRST(mark(X1), X2) -> FIRST(X1, X2)
   FIRST(active(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, active(X2)) -> FIRST(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FIRST(X1, mark(X2)) -> FIRST(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*FIRST(mark(X1), X2) -> FIRST(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*FIRST(active(X1), X2) -> FIRST(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*FIRST(X1, active(X2)) -> FIRST(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(X1, mark(X2)) -> ADD(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*ADD(mark(X1), X2) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ADD(active(X1), X2) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ADD(X1, active(X2)) -> ADD(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
   IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
   IF(active(X1), X2, X3) -> IF(X1, X2, X3)
   IF(X1, active(X2), X3) -> IF(X1, X2, X3)
   IF(X1, X2, active(X3)) -> IF(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IF(X1, mark(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(mark(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, X2, mark(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*IF(active(X1), X2, X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*IF(X1, active(X2), X3) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*IF(X1, X2, active(X3)) -> IF(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(X1, mark(X2)) -> AND(X1, X2)
   AND(mark(X1), X2) -> AND(X1, X2)
   AND(active(X1), X2) -> AND(X1, X2)
   AND(X1, active(X2)) -> AND(X1, X2)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(X1, mark(X2)) -> AND(X1, X2)
   AND(mark(X1), X2) -> AND(X1, X2)
   AND(active(X1), X2) -> AND(X1, X2)
   AND(X1, active(X2)) -> AND(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*AND(X1, mark(X2)) -> AND(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*AND(mark(X1), X2) -> AND(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*AND(active(X1), X2) -> AND(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*AND(X1, active(X2)) -> AND(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), X2))
   ACTIVE(and(true, X)) -> MARK(X)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> ACTIVE(s(X))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(from(X)) -> ACTIVE(from(X))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> ACTIVE(s(X))
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(active(x_1)) = 0
   POL(add(x_1, x_2)) = 1
   POL(and(x_1, x_2)) = 1
   POL(cons(x_1, x_2)) = 0
   POL(false) = 0
   POL(first(x_1, x_2)) = 1
   POL(from(x_1)) = 1
   POL(if(x_1, x_2, x_3)) = 1
   POL(mark(x_1)) = 0
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   first(X1, mark(X2)) -> first(X1, X2)
   first(mark(X1), X2) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), X2))
   ACTIVE(and(true, X)) -> MARK(X)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(add(X1, X2)) -> MARK(X1)
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(from(X)) -> ACTIVE(from(X))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(and(true, X)) -> MARK(X)
   ACTIVE(if(true, X, Y)) -> MARK(X)
   MARK(add(X1, X2)) -> MARK(X1)
   ACTIVE(add(0, X)) -> MARK(X)
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(add(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 0
   POL(false) = 0
   POL(first(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(true) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   active(and(true, X)) -> mark(X)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   active(if(false, X, Y)) -> mark(Y)
   mark(s(X)) -> active(s(X))
   active(add(0, X)) -> mark(X)
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   mark(from(X)) -> active(from(X))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(mark(X1), X2) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   active(and(false, Y)) -> mark(false)
   active(first(0, X)) -> mark(nil)


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), X2))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), X2))
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(from(X)) -> ACTIVE(from(X))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), X2))
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(active(x_1)) = 0
   POL(add(x_1, x_2)) = 0
   POL(and(x_1, x_2)) = 0
   POL(cons(x_1, x_2)) = x_1
   POL(false) = 0
   POL(first(x_1, x_2)) = 1
   POL(from(x_1)) = 1
   POL(if(x_1, x_2, x_3)) = 1
   POL(mark(x_1)) = 0
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(mark(X1), X2) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)
   ACTIVE(if(false, X, Y)) -> MARK(Y)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(from(X)) -> ACTIVE(from(X))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(if(false, X, Y)) -> MARK(Y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(add(x_1, x_2)) = x_2
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 0
   POL(false) = 1
   POL(first(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   active(and(true, X)) -> mark(X)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   active(if(true, X, Y)) -> mark(X)
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   active(if(false, X, Y)) -> mark(Y)
   mark(s(X)) -> active(s(X))
   active(add(0, X)) -> mark(X)
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   mark(from(X)) -> active(from(X))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   first(X1, mark(X2)) -> first(X1, X2)
   first(mark(X1), X2) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(active(X)) -> from(X)
   from(mark(X)) -> from(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   active(and(false, Y)) -> mark(false)
   active(first(0, X)) -> mark(nil)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> MARK(X1)
   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(from(X)) -> ACTIVE(from(X))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(if(X1, X2, X3)) -> ACTIVE(if(mark(X1), X2, X3))
   MARK(if(X1, X2, X3)) -> MARK(X1)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(from(X)) -> ACTIVE(from(X))
   ACTIVE(from(X)) -> MARK(cons(X, from(s(X))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

and(x1, x2)  =  x1

if(x1, x2, x3)  =  if(x1)

ACTIVE(x1)  =  ACTIVE

first(x1, x2)  =  first(x1, x2)

cons(x1, x2)  =  cons

from(x1)  =  from


Knuth-Bendix order [KBO] with precedence:ACTIVE > cons

and weight map:

   ACTIVE=1
   cons=1
   first_2=1
   from=2
   if_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   active(and(true, X)) -> mark(X)
   active(and(false, Y)) -> mark(false)
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   mark(and(X1, X2)) -> active(and(mark(X1), X2))
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(if(X1, X2, X3)) -> active(if(mark(X1), X2, X3))
   mark(add(X1, X2)) -> active(add(mark(X1), X2))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(X))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(from(X)) -> active(from(X))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   if(mark(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, mark(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, mark(X3)) -> if(X1, X2, X3)
   if(active(X1), X2, X3) -> if(X1, X2, X3)
   if(X1, active(X2), X3) -> if(X1, X2, X3)
   if(X1, X2, active(X3)) -> if(X1, X2, X3)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   from(mark(X)) -> from(X)
   from(active(X)) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> MARK(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(and(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(54)
YES
