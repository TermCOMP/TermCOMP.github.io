YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rEyQP.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) QDPOrderProof [EQUIVALENT, 0 ms]
(4) QDP
(5) TransformationProof [EQUIVALENT, 0 ms]
(6) QDP
(7) SemLabProof [SOUND, 49 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(a(x0), p(x1, p(x2, x3))) -> p(x1, p(x0, p(a(x3), x3)))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(a(x0), p(x1, p(x2, x3))) -> P(x1, p(x0, p(a(x3), x3)))
   P(a(x0), p(x1, p(x2, x3))) -> P(x0, p(a(x3), x3))
   P(a(x0), p(x1, p(x2, x3))) -> P(a(x3), x3)

The TRS R consists of the following rules:

   p(a(x0), p(x1, p(x2, x3))) -> p(x1, p(x0, p(a(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P(a(x0), p(x1, p(x2, x3))) -> P(x0, p(a(x3), x3))
   P(a(x0), p(x1, p(x2, x3))) -> P(a(x3), x3)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
P(x1, x2)  =  x2

p(x1, x2)  =  p(x2)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   p_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   p(a(x0), p(x1, p(x2, x3))) -> p(x1, p(x0, p(a(x3), x3)))


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(a(x0), p(x1, p(x2, x3))) -> P(x1, p(x0, p(a(x3), x3)))

The TRS R consists of the following rules:

   p(a(x0), p(x1, p(x2, x3))) -> p(x1, p(x0, p(a(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P(a(x0), p(x1, p(x2, x3))) -> P(x1, p(x0, p(a(x3), x3))) we obtained the following new rules [LPAR04]:

   (P(a(x0), p(a(y_0), p(x2, x3))) -> P(a(y_0), p(x0, p(a(x3), x3))),P(a(x0), p(a(y_0), p(x2, x3))) -> P(a(y_0), p(x0, p(a(x3), x3))))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(a(x0), p(a(y_0), p(x2, x3))) -> P(a(y_0), p(x0, p(a(x3), x3)))

The TRS R consists of the following rules:

   p(a(x0), p(x1, p(x2, x3))) -> p(x1, p(x0, p(a(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) SemLabProof (SOUND)
We found the following model for the rules of the TRSs R and P.
Interpretation over the domain with elements from 0 to 1.
a: 1
p: 0
P: 0
By semantic labelling [SEMLAB] we obtain the following labelled QDP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P.1-0(a.0(x0), p.1-0(a.0(y_0), p.0-0(x2, x3))) -> P.1-0(a.0(y_0), p.0-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.0(y_0), p.0-1(x2, x3))) -> P.1-0(a.0(y_0), p.0-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.0(y_0), p.1-0(x2, x3))) -> P.1-0(a.0(y_0), p.0-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.0(y_0), p.1-1(x2, x3))) -> P.1-0(a.0(y_0), p.0-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.1(y_0), p.0-0(x2, x3))) -> P.1-0(a.1(y_0), p.0-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.1(y_0), p.0-1(x2, x3))) -> P.1-0(a.1(y_0), p.0-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.1(y_0), p.1-0(x2, x3))) -> P.1-0(a.1(y_0), p.0-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.0(x0), p.1-0(a.1(y_0), p.1-1(x2, x3))) -> P.1-0(a.1(y_0), p.0-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.0(y_0), p.0-0(x2, x3))) -> P.1-0(a.0(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.0(y_0), p.0-1(x2, x3))) -> P.1-0(a.0(y_0), p.1-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.0(y_0), p.1-0(x2, x3))) -> P.1-0(a.0(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.0(y_0), p.1-1(x2, x3))) -> P.1-0(a.0(y_0), p.1-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.0-0(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.0-1(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-1(a.1(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.1-0(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.1-1(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-1(a.1(x3), x3)))

The TRS R consists of the following rules:

   p.1-0(a.0(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 13 less nodes.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.1-1(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-1(a.1(x3), x3)))

The TRS R consists of the following rules:

   p.1-0(a.0(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.1-1(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-1(a.1(x3), x3)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(P.1-0(x_1, x_2)) = x_1 + x_2
   POL(a.1(x_1)) = 1 + x_1
   POL(p.1-0(x_1, x_2)) = x_1
   POL(p.1-1(x_1, x_2)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   p.1-0(a.0(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.0-0(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.1-0(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))

The TRS R consists of the following rules:

   p.1-0(a.0(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.0-0(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
   P.1-0(a.1(x0), p.1-0(a.1(y_0), p.1-0(x2, x3))) -> P.1-0(a.1(y_0), p.1-0(x0, p.1-0(a.0(x3), x3)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(P.1-0(x_1, x_2)) = x_1 + x_2
   POL(a.0(x_1)) = 0
   POL(a.1(x_1)) = 1 + x_1
   POL(p.0-0(x_1, x_2)) = x_2
   POL(p.0-1(x_1, x_2)) = x_2
   POL(p.1-0(x_1, x_2)) = x_1 + x_2
   POL(p.1-1(x_1, x_2)) = x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   p.1-0(a.0(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   p.1-0(a.0(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.0(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.0-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.0-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-0(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.0-0(x1, p.1-1(x2, x3))) -> p.0-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.0-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-0(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-0(a.0(x3), x3)))
   p.1-0(a.1(x0), p.1-0(x1, p.1-1(x2, x3))) -> p.1-0(x1, p.1-0(x0, p.1-1(a.1(x3), x3)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
