YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VQgtX.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 1 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (44) YES
    (45) QDP
        (46) UsableRulesProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (49) YES
    (50) QDP
        (51) UsableRulesProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (54) YES
    (55) QDP
        (56) UsableRulesProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (59) YES
    (60) QDP
        (61) QDPOrderProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) QDPOrderProof [EQUIVALENT, 17 ms]
        (64) QDP
        (65) QDPOrderProof [EQUIVALENT, 213 ms]
        (66) QDP
        (67) QDPOrderProof [EQUIVALENT, 166 ms]
        (68) QDP
        (69) DependencyGraphProof [EQUIVALENT, 0 ms]
        (70) QDP
        (71) QDPOrderProof [EQUIVALENT, 75 ms]
        (72) QDP
        (73) QDPOrderProof [EQUIVALENT, 112 ms]
        (74) QDP
        (75) QDPOrderProof [EQUIVALENT, 119 ms]
        (76) QDP
        (77) QDPOrderProof [EQUIVALENT, 178 ms]
        (78) QDP
        (79) QDPOrderProof [EQUIVALENT, 179 ms]
        (80) QDP
        (81) QDPOrderProof [EQUIVALENT, 206 ms]
        (82) QDP
        (83) QDPOrderProof [EQUIVALENT, 235 ms]
        (84) QDP
        (85) QDPOrderProof [EQUIVALENT, 303 ms]
        (86) QDP
        (87) QDPOrderProof [EQUIVALENT, 97 ms]
        (88) QDP
        (89) QDPOrderProof [EQUIVALENT, 88 ms]
        (90) QDP
        (91) QDPOrderProof [EQUIVALENT, 36 ms]
        (92) QDP
        (93) QDPOrderProof [EQUIVALENT, 29 ms]
        (94) QDP
        (95) QDPOrderProof [EQUIVALENT, 268 ms]
        (96) QDP
        (97) QDPOrderProof [EQUIVALENT, 107 ms]
        (98) QDP
        (99) QDPOrderProof [EQUIVALENT, 192 ms]
        (100) QDP
        (101) DependencyGraphProof [EQUIVALENT, 0 ms]
        (102) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   ACTIVE(isNatIList(IL)) -> ISNATLIST(IL)
   ACTIVE(isNat(0)) -> MARK(tt)
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   ACTIVE(isNat(s(N))) -> ISNAT(N)
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   ACTIVE(isNat(length(L))) -> ISNATLIST(L)
   ACTIVE(isNatIList(zeros)) -> MARK(tt)
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(isNatIList(cons(N, IL))) -> AND(isNat(N), isNatIList(IL))
   ACTIVE(isNatIList(cons(N, IL))) -> ISNAT(N)
   ACTIVE(isNatIList(cons(N, IL))) -> ISNATILIST(IL)
   ACTIVE(isNatList(nil)) -> MARK(tt)
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   ACTIVE(isNatList(cons(N, L))) -> AND(isNat(N), isNatList(L))
   ACTIVE(isNatList(cons(N, L))) -> ISNAT(N)
   ACTIVE(isNatList(cons(N, L))) -> ISNATLIST(L)
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(isNatList(take(N, IL))) -> AND(isNat(N), isNatIList(IL))
   ACTIVE(isNatList(take(N, IL))) -> ISNAT(N)
   ACTIVE(isNatList(take(N, IL))) -> ISNATILIST(IL)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(zeros) -> CONS(0, zeros)
   ACTIVE(take(0, IL)) -> MARK(uTake1(isNatIList(IL)))
   ACTIVE(take(0, IL)) -> UTAKE1(isNatIList(IL))
   ACTIVE(take(0, IL)) -> ISNATILIST(IL)
   ACTIVE(uTake1(tt)) -> MARK(nil)
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   ACTIVE(take(s(M), cons(N, IL))) -> UTAKE2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL)
   ACTIVE(take(s(M), cons(N, IL))) -> AND(isNat(M), and(isNat(N), isNatIList(IL)))
   ACTIVE(take(s(M), cons(N, IL))) -> ISNAT(M)
   ACTIVE(take(s(M), cons(N, IL))) -> AND(isNat(N), isNatIList(IL))
   ACTIVE(take(s(M), cons(N, IL))) -> ISNAT(N)
   ACTIVE(take(s(M), cons(N, IL))) -> ISNATILIST(IL)
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   ACTIVE(uTake2(tt, M, N, IL)) -> CONS(N, take(M, IL))
   ACTIVE(uTake2(tt, M, N, IL)) -> TAKE(M, IL)
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(length(cons(N, L))) -> ULENGTH(and(isNat(N), isNatList(L)), L)
   ACTIVE(length(cons(N, L))) -> AND(isNat(N), isNatList(L))
   ACTIVE(length(cons(N, L))) -> ISNAT(N)
   ACTIVE(length(cons(N, L))) -> ISNATLIST(L)
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))
   ACTIVE(uLength(tt, L)) -> S(length(L))
   ACTIVE(uLength(tt, L)) -> LENGTH(L)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> AND(mark(X1), mark(X2))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(tt) -> ACTIVE(tt)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(0) -> ACTIVE(0)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(zeros) -> ACTIVE(zeros)
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> CONS(mark(X1), X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(nil) -> ACTIVE(nil)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(uTake1(X)) -> ACTIVE(uTake1(mark(X)))
   MARK(uTake1(X)) -> UTAKE1(mark(X))
   MARK(uTake1(X)) -> MARK(X)
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   MARK(uTake2(X1, X2, X3, X4)) -> UTAKE2(mark(X1), X2, X3, X4)
   MARK(uTake2(X1, X2, X3, X4)) -> MARK(X1)
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   MARK(uLength(X1, X2)) -> ULENGTH(mark(X1), X2)
   MARK(uLength(X1, X2)) -> MARK(X1)
   AND(mark(X1), X2) -> AND(X1, X2)
   AND(X1, mark(X2)) -> AND(X1, X2)
   AND(active(X1), X2) -> AND(X1, X2)
   AND(X1, active(X2)) -> AND(X1, X2)
   ISNATILIST(mark(X)) -> ISNATILIST(X)
   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)
   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNAT(mark(X)) -> ISNAT(X)
   ISNAT(active(X)) -> ISNAT(X)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   LENGTH(mark(X)) -> LENGTH(X)
   LENGTH(active(X)) -> LENGTH(X)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)
   UTAKE1(mark(X)) -> UTAKE1(X)
   UTAKE1(active(X)) -> UTAKE1(X)
   UTAKE2(mark(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, mark(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, mark(X3), X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, X3, mark(X4)) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(active(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, active(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, active(X3), X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, X3, active(X4)) -> UTAKE2(X1, X2, X3, X4)
   ULENGTH(mark(X1), X2) -> ULENGTH(X1, X2)
   ULENGTH(X1, mark(X2)) -> ULENGTH(X1, X2)
   ULENGTH(active(X1), X2) -> ULENGTH(X1, X2)
   ULENGTH(X1, active(X2)) -> ULENGTH(X1, X2)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 12 SCCs with 44 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ULENGTH(X1, mark(X2)) -> ULENGTH(X1, X2)
   ULENGTH(mark(X1), X2) -> ULENGTH(X1, X2)
   ULENGTH(active(X1), X2) -> ULENGTH(X1, X2)
   ULENGTH(X1, active(X2)) -> ULENGTH(X1, X2)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ULENGTH(X1, mark(X2)) -> ULENGTH(X1, X2)
   ULENGTH(mark(X1), X2) -> ULENGTH(X1, X2)
   ULENGTH(active(X1), X2) -> ULENGTH(X1, X2)
   ULENGTH(X1, active(X2)) -> ULENGTH(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ULENGTH(X1, mark(X2)) -> ULENGTH(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*ULENGTH(mark(X1), X2) -> ULENGTH(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ULENGTH(active(X1), X2) -> ULENGTH(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ULENGTH(X1, active(X2)) -> ULENGTH(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UTAKE2(X1, mark(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(mark(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, mark(X3), X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, X3, mark(X4)) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(active(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, active(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, active(X3), X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, X3, active(X4)) -> UTAKE2(X1, X2, X3, X4)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UTAKE2(X1, mark(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(mark(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, mark(X3), X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, X3, mark(X4)) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(active(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, active(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, active(X3), X4) -> UTAKE2(X1, X2, X3, X4)
   UTAKE2(X1, X2, X3, active(X4)) -> UTAKE2(X1, X2, X3, X4)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*UTAKE2(X1, mark(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*UTAKE2(mark(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*UTAKE2(X1, X2, mark(X3), X4) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*UTAKE2(X1, X2, X3, mark(X4)) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


*UTAKE2(active(X1), X2, X3, X4) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*UTAKE2(X1, active(X2), X3, X4) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*UTAKE2(X1, X2, active(X3), X4) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*UTAKE2(X1, X2, X3, active(X4)) -> UTAKE2(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UTAKE1(active(X)) -> UTAKE1(X)
   UTAKE1(mark(X)) -> UTAKE1(X)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   UTAKE1(active(X)) -> UTAKE1(X)
   UTAKE1(mark(X)) -> UTAKE1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*UTAKE1(active(X)) -> UTAKE1(X)
The graph contains the following edges 1 > 1


*UTAKE1(mark(X)) -> UTAKE1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TAKE(X1, mark(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*TAKE(mark(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(active(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(X1, active(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(active(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


*LENGTH(mark(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(active(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


*ISNAT(mark(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATLIST(active(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


*ISNATLIST(mark(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATILIST(active(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


*ISNATILIST(mark(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(54)
YES

----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(X1, mark(X2)) -> AND(X1, X2)
   AND(mark(X1), X2) -> AND(X1, X2)
   AND(active(X1), X2) -> AND(X1, X2)
   AND(X1, active(X2)) -> AND(X1, X2)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(X1, mark(X2)) -> AND(X1, X2)
   AND(mark(X1), X2) -> AND(X1, X2)
   AND(active(X1), X2) -> AND(X1, X2)
   AND(X1, active(X2)) -> AND(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*AND(X1, mark(X2)) -> AND(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*AND(mark(X1), X2) -> AND(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*AND(active(X1), X2) -> AND(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*AND(X1, active(X2)) -> AND(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(59)
YES

----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(length(X)) -> MARK(X)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(take(0, IL)) -> MARK(uTake1(isNatIList(IL)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(uTake1(X)) -> ACTIVE(uTake1(mark(X)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   MARK(uTake1(X)) -> MARK(X)
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uTake2(X1, X2, X3, X4)) -> MARK(X1)
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   MARK(uLength(X1, X2)) -> MARK(X1)
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(uTake1(X)) -> ACTIVE(uTake1(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(active(x_1)) = 0
   POL(and(x_1, x_2)) = 1
   POL(cons(x_1, x_2)) = 0
   POL(isNat(x_1)) = 1
   POL(isNatIList(x_1)) = 1
   POL(isNatList(x_1)) = 1
   POL(length(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(nil) = 0
   POL(s(x_1)) = 0
   POL(take(x_1, x_2)) = 1
   POL(tt) = 0
   POL(uLength(x_1, x_2)) = 1
   POL(uTake1(x_1)) = 0
   POL(uTake2(x_1, x_2, x_3, x_4)) = 1
   POL(zeros) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(length(X)) -> MARK(X)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(take(0, IL)) -> MARK(uTake1(isNatIList(IL)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   MARK(uTake1(X)) -> MARK(X)
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uTake2(X1, X2, X3, X4)) -> MARK(X1)
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   MARK(uLength(X1, X2)) -> MARK(X1)
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(take(0, IL)) -> MARK(uTake1(isNatIList(IL)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(uTake2(X1, X2, X3, X4)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(active(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 0
   POL(uLength(x_1, x_2)) = x_1 + x_2
   POL(uTake1(x_1)) = x_1
   POL(uTake2(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(zeros) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(length(X)) -> MARK(X)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   MARK(uTake1(X)) -> MARK(X)
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   MARK(uLength(X1, X2)) -> MARK(X1)
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(length(X)) -> MARK(X)
   MARK(uLength(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( and_2(x_1, x_2) ) = x_1 + 2x_2
POL( length_1(x_1) ) = 2x_1 + 2
POL( take_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( uLength_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( uTake2_4(x_1, ..., x_4) ) = x_1 + 2x_2 + 2x_3 + 2x_4
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( zeros ) = 0
POL( 0 ) = 0
POL( uTake1_1(x_1) ) = x_1
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   MARK(uTake1(X)) -> MARK(X)
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   MARK(uTake1(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2x_1
POL( and_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( length_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = x_2 + 2
POL( uLength_2(x_1, x_2) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = x_3
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = x_1
POL( zeros ) = 2
POL( 0 ) = 1
POL( uTake1_1(x_1) ) = x_1 + 2
POL( nil ) = 1
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)


----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( and_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( uLength_2(x_1, x_2) ) = 2
POL( uTake2_4(x_1, ..., x_4) ) = 2
POL( mark_1(x_1) ) = 0
POL( active_1(x_1) ) = max{0, 2x_1 - 1}
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( cons_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 1}
POL( zeros ) = 2
POL( 0 ) = 0
POL( uTake1_1(x_1) ) = max{0, x_1 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(cons(X1, X2)) -> MARK(X1)
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(uTake2(X1, X2, X3, X4)) -> ACTIVE(uTake2(mark(X1), X2, X3, X4))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( and_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( length_1(x_1) ) = 0
POL( uLength_2(x_1, x_2) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = 2x_3 + 2
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = x_1 + 1
POL( zeros ) = 1
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = 2x_2
POL( uTake1_1(x_1) ) = 0
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)


----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(75) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(uTake2(tt, M, N, IL)) -> MARK(cons(N, take(M, IL)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( and_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( uLength_2(x_1, x_2) ) = 1
POL( mark_1(x_1) ) = 1
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( tt ) = 2
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( zeros ) = 2
POL( 0 ) = 2
POL( take_2(x_1, x_2) ) = max{0, 2x_2 - 1}
POL( uTake1_1(x_1) ) = x_1 + 1
POL( uTake2_4(x_1, ..., x_4) ) = 2x_1 + x_2 + 2x_3 + 2x_4 + 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatList(take(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2x_1
POL( and_2(x_1, x_2) ) = x_1 + x_2
POL( length_1(x_1) ) = 2x_1
POL( uLength_2(x_1, x_2) ) = 2x_2
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2x_1
POL( isNatList_1(x_1) ) = 2x_1
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = x_1 + x_2
POL( zeros ) = 0
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( uTake1_1(x_1) ) = 2
POL( uTake2_4(x_1, ..., x_4) ) = x_2 + x_3 + x_4 + 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNat(length(L))) -> MARK(isNatList(L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( and_2(x_1, x_2) ) = 2x_1 + x_2
POL( length_1(x_1) ) = 2x_1 + 1
POL( uLength_2(x_1, x_2) ) = 2x_2 + 1
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2x_1
POL( isNatList_1(x_1) ) = 2x_1
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( zeros ) = 0
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( uTake1_1(x_1) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = 2x_2 + 2x_3 + 2x_4
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatIList(IL)) -> MARK(isNatList(IL))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2x_1
POL( and_2(x_1, x_2) ) = x_1 + x_2
POL( length_1(x_1) ) = 2x_1
POL( uLength_2(x_1, x_2) ) = 2x_2
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2x_1 + 2
POL( isNatList_1(x_1) ) = 2x_1
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = x_1 + x_2
POL( zeros ) = 0
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( uTake1_1(x_1) ) = 0
POL( uTake2_4(x_1, ..., x_4) ) = x_2 + x_3 + x_4 + 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X1)
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(and(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ACTIVE(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[0A]]
>>>

   <<<
 POL(MARK(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatList(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(length(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(active(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(zeros) =  	[[2A]]
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(uTake1(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[1A]] 	* 	x_4
>>>

   <<<
 POL(nil) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNat(s(N))) -> MARK(isNat(N))
   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ACTIVE(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(MARK(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[-I]] 	 +  	[[2A]] 	* 	x_1
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(isNatList(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(length(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(active(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(zeros) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[1A]]
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[3A]] 	 +  	[[2A]] 	* 	x_1 	 +  	[[2A]] 	* 	x_2
>>>

   <<<
 POL(uTake1(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[4A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[3A]] 	* 	x_4
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(87) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNat(X)) -> ACTIVE(isNat(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 1}
POL( and_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 2
POL( uLength_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 0
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 1
POL( cons_2(x_1, x_2) ) = 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( uTake1_1(x_1) ) = max{0, 2x_1 - 2}
POL( uTake2_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_4 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(88)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(89) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(uLength(and(isNat(N), isNatList(L)), L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( and_2(x_1, x_2) ) = 2x_2
POL( length_1(x_1) ) = 2
POL( uLength_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( zeros ) = 0
POL( 0 ) = 2
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( uTake1_1(x_1) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(91) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(uLength(tt, L)) -> MARK(s(length(L)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( and_2(x_1, x_2) ) = 2x_2
POL( uLength_2(x_1, x_2) ) = 1
POL( mark_1(x_1) ) = x_1
POL( active_1(x_1) ) = x_1
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 1
POL( cons_2(x_1, x_2) ) = 0
POL( zeros ) = 0
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = 2
POL( uTake1_1(x_1) ) = x_1 + 2
POL( uTake2_4(x_1, ..., x_4) ) = 1
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)


----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(uLength(X1, X2)) -> ACTIVE(uLength(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 1}
POL( and_2(x_1, x_2) ) = 1
POL( uLength_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = 2
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 1
POL( isNatList_1(x_1) ) = 1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, 2x_1 - 2}
POL( length_1(x_1) ) = x_1 + 1
POL( cons_2(x_1, x_2) ) = 2x_1 + 2
POL( zeros ) = 1
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = 2x_2 + 2
POL( uTake1_1(x_1) ) = max{0, x_1 - 1}
POL( uTake2_4(x_1, ..., x_4) ) = max{0, 2x_2 + 2x_3 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(94)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(95) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatIList(cons(N, IL))) -> MARK(and(isNat(N), isNatIList(IL)))
   ACTIVE(isNatList(cons(N, L))) -> MARK(and(isNat(N), isNatList(L)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ACTIVE(x_1)) =  	[[5A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[0A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[0A]]
>>>

   <<<
 POL(MARK(x_1)) =  	[[5A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[-I]] 	 +  	[[5A]] 	* 	x_1
>>>

   <<<
 POL(isNatList(x_1)) =  	[[0A]] 	 +  	[[5A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[5A]] 	* 	x_1
>>>

   <<<
 POL(active(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(zeros) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(uTake1(x_1)) =  	[[0A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3 	 +  	[[1A]] 	* 	x_4
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(nil) =  	[[1A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( and_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( isNatList_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( take_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( uTake1_1(x_1) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = max{0, x_2 - 2}
POL( uLength_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)


----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))
   MARK(and(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(99) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(and(tt, T)) -> MARK(T)
   MARK(and(X1, X2)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ACTIVE(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[3A]]
>>>

   <<<
 POL(MARK(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(active(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[-I]] 	 +  	[[3A]] 	* 	x_1
>>>

   <<<
 POL(isNatList(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(zeros) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[2A]]
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[4A]] 	 +  	[[2A]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2
>>>

   <<<
 POL(uTake1(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[5A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3 	 +  	[[4A]] 	* 	x_4
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[2A]] 	* 	x_2
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   active(and(tt, T)) -> mark(T)
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(isNatIList(IL)) -> mark(isNatList(IL))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(N))) -> mark(isNat(N))
   mark(isNat(X)) -> active(isNat(X))
   active(isNat(length(L))) -> mark(isNatList(L))
   mark(s(X)) -> active(s(mark(X)))
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   mark(zeros) -> active(zeros)
   active(zeros) -> mark(cons(0, zeros))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   and(X1, mark(X2)) -> and(X1, X2)
   and(mark(X1), X2) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(uTake1(tt)) -> mark(nil)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(active(X)) -> uTake1(X)
   uTake1(mark(X)) -> uTake1(X)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(and(X1, X2)) -> ACTIVE(and(mark(X1), mark(X2)))

The TRS R consists of the following rules:

   active(and(tt, T)) -> mark(T)
   active(isNatIList(IL)) -> mark(isNatList(IL))
   active(isNat(0)) -> mark(tt)
   active(isNat(s(N))) -> mark(isNat(N))
   active(isNat(length(L))) -> mark(isNatList(L))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(N, L))) -> mark(and(isNat(N), isNatList(L)))
   active(isNatList(take(N, IL))) -> mark(and(isNat(N), isNatIList(IL)))
   active(zeros) -> mark(cons(0, zeros))
   active(take(0, IL)) -> mark(uTake1(isNatIList(IL)))
   active(uTake1(tt)) -> mark(nil)
   active(take(s(M), cons(N, IL))) -> mark(uTake2(and(isNat(M), and(isNat(N), isNatIList(IL))), M, N, IL))
   active(uTake2(tt, M, N, IL)) -> mark(cons(N, take(M, IL)))
   active(length(cons(N, L))) -> mark(uLength(and(isNat(N), isNatList(L)), L))
   active(uLength(tt, L)) -> mark(s(length(L)))
   mark(and(X1, X2)) -> active(and(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(isNat(X)) -> active(isNat(X))
   mark(0) -> active(0)
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(nil) -> active(nil)
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(uTake1(X)) -> active(uTake1(mark(X)))
   mark(uTake2(X1, X2, X3, X4)) -> active(uTake2(mark(X1), X2, X3, X4))
   mark(uLength(X1, X2)) -> active(uLength(mark(X1), X2))
   and(mark(X1), X2) -> and(X1, X2)
   and(X1, mark(X2)) -> and(X1, X2)
   and(active(X1), X2) -> and(X1, X2)
   and(X1, active(X2)) -> and(X1, X2)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   uTake1(mark(X)) -> uTake1(X)
   uTake1(active(X)) -> uTake1(X)
   uTake2(mark(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, mark(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, mark(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, mark(X4)) -> uTake2(X1, X2, X3, X4)
   uTake2(active(X1), X2, X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, active(X2), X3, X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, active(X3), X4) -> uTake2(X1, X2, X3, X4)
   uTake2(X1, X2, X3, active(X4)) -> uTake2(X1, X2, X3, X4)
   uLength(mark(X1), X2) -> uLength(X1, X2)
   uLength(X1, mark(X2)) -> uLength(X1, X2)
   uLength(active(X1), X2) -> uLength(X1, X2)
   uLength(X1, active(X2)) -> uLength(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(102)
TRUE
