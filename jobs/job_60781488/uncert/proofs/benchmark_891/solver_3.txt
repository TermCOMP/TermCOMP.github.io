YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y)
(RULES
active(from(X)) -> mark(cons(X,from(s(X))))
active(length(cons(X,Y))) -> mark(s(length1(Y)))
active(length(nil)) -> mark(num0)
active(length1(X)) -> mark(length(X))
cons(active(X1),X2) -> cons(X1,X2)
cons(mark(X1),X2) -> cons(X1,X2)
cons(X1,active(X2)) -> cons(X1,X2)
cons(X1,mark(X2)) -> cons(X1,X2)
from(active(X)) -> from(X)
from(mark(X)) -> from(X)
length(active(X)) -> length(X)
length(mark(X)) -> length(X)
length1(active(X)) -> length1(X)
length1(mark(X)) -> length1(X)
mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
mark(from(X)) -> active(from(mark(X)))
mark(length(X)) -> active(length(X))
mark(length1(X)) -> active(length1(X))
mark(s(X)) -> active(s(mark(X)))
mark(num0) -> active(num0)
mark(nil) -> active(nil)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(length(cons(X,Y))) -> LENGTH1(Y)
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length(cons(X,Y))) -> S(length1(Y))
 ACTIVE(length(nil)) -> MARK(num0)
 ACTIVE(length1(X)) -> LENGTH(X)
 ACTIVE(length1(X)) -> MARK(length(X))
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
 LENGTH1(active(X)) -> LENGTH1(X)
 LENGTH1(mark(X)) -> LENGTH1(X)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(length(cons(X,Y))) -> LENGTH1(Y)
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length(cons(X,Y))) -> S(length1(Y))
 ACTIVE(length(nil)) -> MARK(num0)
 ACTIVE(length1(X)) -> LENGTH(X)
 ACTIVE(length1(X)) -> MARK(length(X))
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
 LENGTH1(active(X)) -> LENGTH1(X)
 LENGTH1(mark(X)) -> LENGTH1(X)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 LENGTH1(active(X)) -> LENGTH1(X)
 LENGTH1(mark(X)) -> LENGTH1(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)


The problem is decomposed in 6 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(S) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LENGTH1(active(X)) -> LENGTH1(X)
 LENGTH1(mark(X)) -> LENGTH1(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(LENGTH1) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(LENGTH) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FROM) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(CONS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(CONS) = 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + 1
[from](X) = 2.X + 2
[length](X) = 0
[length1](X) = 0
[mark](X) = X
[s](X) = 2.X
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = 2.X
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2.X
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 0
[cons](X1,X2) = 0
[from](X) = 0
[length](X) = 2
[length1](X) = 2
[mark](X) = 0
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X1 + 1
[from](X) = 2.X + 2
[length](X) = 0
[length1](X) = 0
[mark](X) = 2.X
[s](X) = 2.X
[num0] = 0
[fSNonEmpty] = 0
[nil] = 1
[ACTIVE](X) = 2
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = X + 2
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X + 2
[cons](X1,X2) = 0
[from](X) = 0
[length](X) = 1
[length1](X) = 1
[mark](X) = 2.X + 2
[s](X) = 0
[num0] = 1
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = X + 1
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(from(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X2
[from](X) = X + 2
[length](X) = 1
[length1](X) = 1
[mark](X) = X
[s](X) = X
[num0] = 1
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2
[cons](X1,X2) = 2
[from](X) = 2
[length](X) = 2
[length1](X) = 2
[mark](X) = 2
[s](X) = 0
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length(cons(X,Y))) -> MARK(s(length1(Y)))
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X
[cons](X1,X2) = 2.X2 + 2
[from](X) = 0
[length](X) = 2.X + 2
[length1](X) = 2.X + 2
[mark](X) = 2.X
[s](X) = 2.X + 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(length1(X)) -> MARK(length(X))
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X
[cons](X1,X2) = 0
[from](X) = 0
[length](X) = 2.X + 1
[length1](X) = 2.X + 2
[mark](X) = 2.X
[s](X) = 2.X
[num0] = 0
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = 2.X
[CONS](X1,X2) = 0
[FROM](X) = 0
[LENGTH](X) = 0
[LENGTH1](X) = 0
[MARK](X) = 2.X
[S](X) = 0

Problem 1.6: 

SCC Processor:
-> Pairs:
 MARK(length(X)) -> ACTIVE(length(X))
 MARK(length1(X)) -> ACTIVE(length1(X))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Subterm Processor:
-> Pairs:
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(MARK) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(length(cons(X,Y))) -> mark(s(length1(Y)))
 active(length(nil)) -> mark(num0)
 active(length1(X)) -> mark(length(X))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 length1(active(X)) -> length1(X)
 length1(mark(X)) -> length1(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(length(X)) -> active(length(X))
 mark(length1(X)) -> active(length1(X))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
