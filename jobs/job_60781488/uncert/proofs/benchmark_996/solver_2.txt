YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/p37eO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 38 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 6 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 0 ms]
(10) QTRS
(11) RisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   fst(0, Z) -> nil
   fst(s(X), cons(Y, Z)) -> cons(Y, n__fst(activate(X), activate(Z)))
   from(X) -> cons(X, n__from(s(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   len(nil) -> 0
   len(cons(X, Z)) -> s(n__len(activate(Z)))
   fst(X1, X2) -> n__fst(X1, X2)
   from(X) -> n__from(X)
   add(X1, X2) -> n__add(X1, X2)
   len(X) -> n__len(X)
   activate(n__fst(X1, X2)) -> fst(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__len(X)) -> len(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2 + 2*x_1
   POL(add(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(from(x_1)) = 2 + 2*x_1
   POL(fst(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(len(x_1)) = 1 + 2*x_1
   POL(n__add(x_1, x_2)) = x_1 + 2*x_2
   POL(n__from(x_1)) = x_1
   POL(n__fst(x_1, x_2)) = x_1 + x_2
   POL(n__len(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   fst(0, Z) -> nil
   fst(s(X), cons(Y, Z)) -> cons(Y, n__fst(activate(X), activate(Z)))
   add(0, X) -> X
   len(nil) -> 0
   fst(X1, X2) -> n__fst(X1, X2)
   from(X) -> n__from(X)
   add(X1, X2) -> n__add(X1, X2)
   len(X) -> n__len(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__len(X)) -> len(X)
   activate(X) -> X




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(s(X)))
   add(s(X), Y) -> s(n__add(activate(X), Y))
   len(cons(X, Z)) -> s(n__len(activate(Z)))
   activate(n__fst(X1, X2)) -> fst(X1, X2)
   activate(n__from(X)) -> from(X)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(activate(x_1)) = 2*x_1
   POL(add(x_1, x_2)) = 2*x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 2 + 2*x_1
   POL(fst(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(len(x_1)) = 2*x_1
   POL(n__add(x_1, x_2)) = x_1 + x_2
   POL(n__from(x_1)) = 2 + x_1
   POL(n__fst(x_1, x_2)) = x_1 + x_2
   POL(n__len(x_1)) = x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   activate(n__from(X)) -> from(X)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(s(X)))
   add(s(X), Y) -> s(n__add(activate(X), Y))
   len(cons(X, Z)) -> s(n__len(activate(Z)))
   activate(n__fst(X1, X2)) -> fst(X1, X2)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(activate(x_1)) = x_1
   POL(add(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 2*x_1
   POL(fst(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(len(x_1)) = x_1
   POL(n__add(x_1, x_2)) = x_1 + x_2
   POL(n__from(x_1)) = x_1
   POL(n__fst(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(n__len(x_1)) = x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   activate(n__fst(X1, X2)) -> fst(X1, X2)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(s(X)))
   add(s(X), Y) -> s(n__add(activate(X), Y))
   len(cons(X, Z)) -> s(n__len(activate(Z)))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(activate(x_1)) = x_1
   POL(add(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 1 + 2*x_1
   POL(len(x_1)) = 2*x_1
   POL(n__add(x_1, x_2)) = x_1 + x_2
   POL(n__from(x_1)) = x_1
   POL(n__len(x_1)) = x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   from(X) -> cons(X, n__from(s(X)))




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   add(s(X), Y) -> s(n__add(activate(X), Y))
   len(cons(X, Z)) -> s(n__len(activate(Z)))

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:n__len_1 > cons_2 > len_1 > activate_1 > n__add_2 > add_2 > s_1

and weight map:

   s_1=1
   activate_1=1
   len_1=2
   n__len_1=1
   add_2=1
   n__add_2=0
   cons_2=0

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   add(s(X), Y) -> s(n__add(activate(X), Y))
   len(cons(X, Z)) -> s(n__len(activate(Z)))




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(11) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(12)
YES
