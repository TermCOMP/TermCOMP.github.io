YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y Z)
(RULES
activate(nu95u95add(X1,X2)) -> add(X1,X2)
activate(nu95u95from(X)) -> from(X)
activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
activate(nu95u95len(X)) -> len(X)
activate(X) -> X
add(num0,X) -> X
add(s(X),Y) -> s(nu95u95add(activate(X),Y))
add(X1,X2) -> nu95u95add(X1,X2)
from(X) -> cons(X,nu95u95from(s(X)))
from(X) -> nu95u95from(X)
fst(num0,Z) -> nil
fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
fst(X1,X2) -> nu95u95fst(X1,X2)
len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
len(nil) -> num0
len(X) -> nu95u95len(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95add(X1,X2)) -> ADD(X1,X2)
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = 0
[add](X1,X2) = 0
[from](X) = 0
[fst](X1,X2) = 0
[len](X) = 0
[num0] = 0
[cons](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[nu95u95from](X) = 0
[nu95u95fst](X1,X2) = 2.X1 + 2.X2
[nu95u95len](X) = 2.X + 2
[nil] = 0
[s](X) = 2.X
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 2.X1 + 2.X2 + 2
[FROM](X) = 0
[FST](X1,X2) = 2.X1 + 2.X2 + 2
[LEN](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 ADD(s(X),Y) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95fst(X1,X2)) -> FST(X1,X2)
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[activate](X) = 0
[add](X1,X2) = 0
[from](X) = 0
[fst](X1,X2) = 0
[len](X) = 0
[num0] = 0
[cons](X1,X2) = X2 + 2
[fSNonEmpty] = 0
[nu95u95add](X1,X2) = 0
[nu95u95from](X) = 0
[nu95u95fst](X1,X2) = X1 + X2 + 2
[nu95u95len](X) = X
[nil] = 0
[s](X) = 2.X
[ACTIVATE](X) = 2.X + 2
[ADD](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = X1 + 2.X2 + 1
[LEN](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(X)
 FST(s(X),cons(Y,Z)) -> ACTIVATE(Z)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
->->-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)

Problem 1: 

Subterm Processor:
-> Pairs:
 ACTIVATE(nu95u95len(X)) -> LEN(X)
 LEN(cons(X,Z)) -> ACTIVATE(Z)
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
->Projection:
 pi(ACTIVATE) = 1
 pi(LEN) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 activate(nu95u95add(X1,X2)) -> add(X1,X2)
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95fst(X1,X2)) -> fst(X1,X2)
 activate(nu95u95len(X)) -> len(X)
 activate(X) -> X
 add(num0,X) -> X
 add(s(X),Y) -> s(nu95u95add(activate(X),Y))
 add(X1,X2) -> nu95u95add(X1,X2)
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 fst(num0,Z) -> nil
 fst(s(X),cons(Y,Z)) -> cons(Y,nu95u95fst(activate(X),activate(Z)))
 fst(X1,X2) -> nu95u95fst(X1,X2)
 len(cons(X,Z)) -> s(nu95u95len(activate(Z)))
 len(nil) -> num0
 len(X) -> nu95u95len(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
