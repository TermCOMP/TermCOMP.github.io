YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DlODc.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 5 ms]
        (12) QDP
        (13) QDPOrderProof [EQUIVALENT, 10 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) QDP
        (18) UsableRulesProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) UsableRulesProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   DOUBLE(s(x)) -> DOUBLE(x)
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(s(x), s(y)) -> IF(gt(x, y), x, y)
   PLUS(s(x), s(y)) -> GT(x, y)
   PLUS(s(x), s(y)) -> IF(not(gt(x, y)), id(x), id(y))
   PLUS(s(x), s(y)) -> NOT(gt(x, y))
   PLUS(s(x), s(y)) -> ID(x)
   PLUS(s(x), s(y)) -> ID(y)
   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), x) -> IF(gt(x, x), id(x), id(x))
   PLUS(s(x), x) -> GT(x, x)
   PLUS(s(x), x) -> ID(x)
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))
   PLUS(id(x), s(y)) -> IF(gt(s(y), y), y, s(y))
   PLUS(id(x), s(y)) -> GT(s(y), y)
   NOT(x) -> IF(x, false, true)
   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 12 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(PLUS(x_1, x_2)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[0A]] 	 +  	[[4A]] 	* 	x_1
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(gt(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(id(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(not(x_1)) =  	[[1A]] 	 +  	[[4A]] 	* 	x_1
>>>

   <<<
 POL(zero) =  	[[1A]]
>>>

   <<<
 POL(true) =  	[[0A]]
>>>

   <<<
 POL(false) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(PLUS(x_1, x_2)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[0A]] 	 +  	[[2A]] 	* 	x_1
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(gt(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(not(x_1)) =  	[[4A]] 	 +  	[[2A]] 	* 	x_1
>>>

   <<<
 POL(id(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(zero) =  	[[0A]]
>>>

   <<<
 POL(true) =  	[[0A]]
>>>

   <<<
 POL(false) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   if(true, x, y) -> x
   if(false, x, y) -> y
   id(x) -> x


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))
The graph contains the following edges 1 > 1


----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOUBLE(s(x)) -> DOUBLE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(26)
YES
