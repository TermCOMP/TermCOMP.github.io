YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/XSZPI.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) TransformationProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) DependencyGraphProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QReductionProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) TransformationProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) UsableRulesProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) QReductionProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) NonInfProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (47) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The TRS R 2 is 
   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)

The signature Sigma is {cond1_3, cond2_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND1(true, x, y) -> GR(x, y)
   COND2(true, x, y) -> COND1(neq(x, 0), y, y)
   COND2(true, x, y) -> NEQ(x, 0)
   COND2(false, x, y) -> COND1(neq(x, 0), p(x), y)
   COND2(false, x, y) -> NEQ(x, 0)
   COND2(false, x, y) -> P(x)
   GR(s(x), s(y)) -> GR(x, y)
   NEQ(s(x), s(y)) -> NEQ(x, y)

The TRS R consists of the following rules:

   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

The TRS R consists of the following rules:

   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

R is empty.
The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*NEQ(s(x), s(y)) -> NEQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

The TRS R consists of the following rules:

   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

R is empty.
The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GR(s(x), s(y)) -> GR(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(neq(x, 0), y, y)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, x, y) -> COND1(neq(x, 0), p(x), y)

The TRS R consists of the following rules:

   cond1(true, x, y) -> cond2(gr(x, y), x, y)
   cond2(true, x, y) -> cond1(neq(x, 0), y, y)
   cond2(false, x, y) -> cond1(neq(x, 0), p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(neq(x, 0), y, y)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, x, y) -> COND1(neq(x, 0), p(x), y)

The TRS R consists of the following rules:

   neq(0, 0) -> false
   neq(s(x), 0) -> true
   p(0) -> 0
   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond1(true, x0, x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(neq(x, 0), y, y)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, x, y) -> COND1(neq(x, 0), p(x), y)

The TRS R consists of the following rules:

   neq(0, 0) -> false
   neq(s(x), 0) -> true
   p(0) -> 0
   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule COND2(true, x, y) -> COND1(neq(x, 0), y, y) at position [0] we obtained the following new rules [LPAR04]:

   (COND2(true, 0, y1) -> COND1(false, y1, y1),COND2(true, 0, y1) -> COND1(false, y1, y1))
   (COND2(true, s(x0), y1) -> COND1(true, y1, y1),COND2(true, s(x0), y1) -> COND1(true, y1, y1))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, x, y) -> COND1(neq(x, 0), p(x), y)
   COND2(true, 0, y1) -> COND1(false, y1, y1)
   COND2(true, s(x0), y1) -> COND1(true, y1, y1)

The TRS R consists of the following rules:

   neq(0, 0) -> false
   neq(s(x), 0) -> true
   p(0) -> 0
   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(false, x, y) -> COND1(neq(x, 0), p(x), y)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(true, s(x0), y1) -> COND1(true, y1, y1)

The TRS R consists of the following rules:

   neq(0, 0) -> false
   neq(s(x), 0) -> true
   p(0) -> 0
   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule COND2(false, x, y) -> COND1(neq(x, 0), p(x), y) at position [0] we obtained the following new rules [LPAR04]:

   (COND2(false, 0, y1) -> COND1(false, p(0), y1),COND2(false, 0, y1) -> COND1(false, p(0), y1))
   (COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1),COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1))


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND2(false, 0, y1) -> COND1(false, p(0), y1)
   COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1)

The TRS R consists of the following rules:

   neq(0, 0) -> false
   neq(s(x), 0) -> true
   p(0) -> 0
   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1)

The TRS R consists of the following rules:

   neq(0, 0) -> false
   neq(s(x), 0) -> true
   p(0) -> 0
   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1)

The TRS R consists of the following rules:

   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1)

The TRS R consists of the following rules:

   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule COND2(false, s(x0), y1) -> COND1(true, p(s(x0)), y1) at position [1] we obtained the following new rules [LPAR04]:

   (COND2(false, s(x0), y1) -> COND1(true, x0, y1),COND2(false, s(x0), y1) -> COND1(true, x0, y1))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, x0, y1)

The TRS R consists of the following rules:

   p(s(x)) -> x
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, x0, y1)

The TRS R consists of the following rules:

   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(0)
   p(s(x0))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, x0, y1)

The TRS R consists of the following rules:

   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND2(true, s(x0), y1) -> COND1(true, y1, y1) the following chains were created:
*We consider the chain COND1(true, x2, x3) -> COND2(gr(x2, x3), x2, x3), COND2(true, s(x4), x5) -> COND1(true, x5, x5) which results in the following constraint:

(1)    (COND2(gr(x2, x3), x2, x3)=COND2(true, s(x4), x5)  ==>  COND2(true, s(x4), x5)_>=_COND1(true, x5, x5))



We simplified constraint (1) using rules (I), (II), (III), (VII) which results in the following new constraint:

(2)    (s(x4)=x26 & gr(x26, x3)=true  ==>  COND2(true, s(x4), x3)_>=_COND1(true, x3, x3))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on gr(x26, x3)=true which results in the following new constraints:

(3)    (true=true & s(x4)=s(x28)  ==>  COND2(true, s(x4), 0)_>=_COND1(true, 0, 0))

(4)    (gr(x30, x29)=true & s(x4)=s(x30) & (\/x31:gr(x30, x29)=true & s(x31)=x30  ==>  COND2(true, s(x31), x29)_>=_COND1(true, x29, x29))  ==>  COND2(true, s(x4), s(x29))_>=_COND1(true, s(x29), s(x29)))



We simplified constraint (3) using rules (I), (II), (IV) which results in the following new constraint:

(5)    (COND2(true, s(x4), 0)_>=_COND1(true, 0, 0))



We simplified constraint (4) using rules (I), (II), (III), (IV) which results in the following new constraint:

(6)    (gr(x30, x29)=true  ==>  COND2(true, s(x30), s(x29))_>=_COND1(true, s(x29), s(x29)))



We simplified constraint (6) using rule (V) (with possible (I) afterwards) using induction on gr(x30, x29)=true which results in the following new constraints:

(7)    (true=true  ==>  COND2(true, s(s(x33)), s(0))_>=_COND1(true, s(0), s(0)))

(8)    (gr(x35, x34)=true & (gr(x35, x34)=true  ==>  COND2(true, s(x35), s(x34))_>=_COND1(true, s(x34), s(x34)))  ==>  COND2(true, s(s(x35)), s(s(x34)))_>=_COND1(true, s(s(x34)), s(s(x34))))



We simplified constraint (7) using rules (I), (II) which results in the following new constraint:

(9)    (COND2(true, s(s(x33)), s(0))_>=_COND1(true, s(0), s(0)))



We simplified constraint (8) using rule (VI) where we applied the induction hypothesis (gr(x35, x34)=true  ==>  COND2(true, s(x35), s(x34))_>=_COND1(true, s(x34), s(x34))) with sigma = [ ] which results in the following new constraint:

(10)    (COND2(true, s(x35), s(x34))_>=_COND1(true, s(x34), s(x34))  ==>  COND2(true, s(s(x35)), s(s(x34)))_>=_COND1(true, s(s(x34)), s(s(x34))))








For Pair COND1(true, x, y) -> COND2(gr(x, y), x, y) the following chains were created:
*We consider the chain COND2(true, s(x8), x9) -> COND1(true, x9, x9), COND1(true, x10, x11) -> COND2(gr(x10, x11), x10, x11) which results in the following constraint:

(1)    (COND1(true, x9, x9)=COND1(true, x10, x11)  ==>  COND1(true, x10, x11)_>=_COND2(gr(x10, x11), x10, x11))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (COND1(true, x9, x9)_>=_COND2(gr(x9, x9), x9, x9))




*We consider the chain COND2(false, s(x14), x15) -> COND1(true, x14, x15), COND1(true, x16, x17) -> COND2(gr(x16, x17), x16, x17) which results in the following constraint:

(1)    (COND1(true, x14, x15)=COND1(true, x16, x17)  ==>  COND1(true, x16, x17)_>=_COND2(gr(x16, x17), x16, x17))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (COND1(true, x14, x15)_>=_COND2(gr(x14, x15), x14, x15))








For Pair COND2(false, s(x0), y1) -> COND1(true, x0, y1) the following chains were created:
*We consider the chain COND1(true, x20, x21) -> COND2(gr(x20, x21), x20, x21), COND2(false, s(x22), x23) -> COND1(true, x22, x23) which results in the following constraint:

(1)    (COND2(gr(x20, x21), x20, x21)=COND2(false, s(x22), x23)  ==>  COND2(false, s(x22), x23)_>=_COND1(true, x22, x23))



We simplified constraint (1) using rules (I), (II), (III), (VII) which results in the following new constraint:

(2)    (s(x22)=x36 & gr(x36, x21)=false  ==>  COND2(false, s(x22), x21)_>=_COND1(true, x22, x21))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on gr(x36, x21)=false which results in the following new constraints:

(3)    (false=false & s(x22)=0  ==>  COND2(false, s(x22), x37)_>=_COND1(true, x22, x37))

(4)    (gr(x40, x39)=false & s(x22)=s(x40) & (\/x41:gr(x40, x39)=false & s(x41)=x40  ==>  COND2(false, s(x41), x39)_>=_COND1(true, x41, x39))  ==>  COND2(false, s(x22), s(x39))_>=_COND1(true, x22, s(x39)))



We solved constraint (3) using rules (I), (II).We simplified constraint (4) using rules (I), (II), (III), (IV) which results in the following new constraint:

(5)    (gr(x40, x39)=false  ==>  COND2(false, s(x40), s(x39))_>=_COND1(true, x40, s(x39)))



We simplified constraint (5) using rule (V) (with possible (I) afterwards) using induction on gr(x40, x39)=false which results in the following new constraints:

(6)    (false=false  ==>  COND2(false, s(0), s(x42))_>=_COND1(true, 0, s(x42)))

(7)    (gr(x45, x44)=false & (gr(x45, x44)=false  ==>  COND2(false, s(x45), s(x44))_>=_COND1(true, x45, s(x44)))  ==>  COND2(false, s(s(x45)), s(s(x44)))_>=_COND1(true, s(x45), s(s(x44))))



We simplified constraint (6) using rules (I), (II) which results in the following new constraint:

(8)    (COND2(false, s(0), s(x42))_>=_COND1(true, 0, s(x42)))



We simplified constraint (7) using rule (VI) where we applied the induction hypothesis (gr(x45, x44)=false  ==>  COND2(false, s(x45), s(x44))_>=_COND1(true, x45, s(x44))) with sigma = [ ] which results in the following new constraint:

(9)    (COND2(false, s(x45), s(x44))_>=_COND1(true, x45, s(x44))  ==>  COND2(false, s(s(x45)), s(s(x44)))_>=_COND1(true, s(x45), s(s(x44))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND2(true, s(x0), y1) -> COND1(true, y1, y1)

*(COND2(true, s(x4), 0)_>=_COND1(true, 0, 0))


*(COND2(true, s(s(x33)), s(0))_>=_COND1(true, s(0), s(0)))


*(COND2(true, s(x35), s(x34))_>=_COND1(true, s(x34), s(x34))  ==>  COND2(true, s(s(x35)), s(s(x34)))_>=_COND1(true, s(s(x34)), s(s(x34))))




*COND1(true, x, y) -> COND2(gr(x, y), x, y)

*(COND1(true, x9, x9)_>=_COND2(gr(x9, x9), x9, x9))


*(COND1(true, x14, x15)_>=_COND2(gr(x14, x15), x14, x15))




*COND2(false, s(x0), y1) -> COND1(true, x0, y1)

*(COND2(false, s(0), s(x42))_>=_COND1(true, 0, s(x42)))


*(COND2(false, s(x45), s(x44))_>=_COND1(true, x45, s(x44))  ==>  COND2(false, s(s(x45)), s(s(x44)))_>=_COND1(true, s(x45), s(s(x44))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(COND1(x_1, x_2, x_3)) = -1 + x_1 + x_2 - x_3
   POL(COND2(x_1, x_2, x_3)) = -1 - x_1 + x_2 - x_3
   POL(c) = -1
   POL(false) = 0
   POL(gr(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
   COND2(false, s(x0), y1) -> COND1(true, x0, y1)
The following pairs are in P_bound:
   COND2(true, s(x0), y1) -> COND1(true, y1, y1)
The following rules are usable:
   false -> gr(0, x)
   true -> gr(s(x), 0)
   gr(x, y) -> gr(s(x), s(y))

----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(true, x, y) -> COND2(gr(x, y), x, y)
   COND2(false, s(x0), y1) -> COND1(true, x0, y1)

The TRS R consists of the following rules:

   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*COND2(false, s(x0), y1) -> COND1(true, x0, y1)
The graph contains the following edges 2 > 2, 3 >= 3


*COND1(true, x, y) -> COND2(gr(x, y), x, y)
The graph contains the following edges 2 >= 2, 3 >= 3


----------------------------------------

(47)
YES
