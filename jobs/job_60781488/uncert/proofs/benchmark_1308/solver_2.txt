YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ULD9A.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (44) YES
    (45) QDP
        (46) UsableRulesProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (49) YES
    (50) QDP
        (51) UsableRulesProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (54) YES
    (55) QDP
        (56) UsableRulesProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (59) YES
    (60) QDP
        (61) UsableRulesProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (64) YES
    (65) QDP
        (66) UsableRulesProof [EQUIVALENT, 0 ms]
        (67) QDP
        (68) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (69) YES
    (70) QDP
        (71) UsableRulesProof [EQUIVALENT, 0 ms]
        (72) QDP
        (73) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (74) YES
    (75) QDP
        (76) UsableRulesProof [EQUIVALENT, 0 ms]
        (77) QDP
        (78) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (79) YES
    (80) QDP
        (81) UsableRulesProof [EQUIVALENT, 0 ms]
        (82) QDP
        (83) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (84) YES
    (85) QDP
        (86) UsableRulesProof [EQUIVALENT, 0 ms]
        (87) QDP
        (88) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (89) YES
    (90) QDP
        (91) UsableRulesProof [EQUIVALENT, 0 ms]
        (92) QDP
        (93) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (94) YES
    (95) QDP
        (96) UsableRulesProof [EQUIVALENT, 0 ms]
        (97) QDP
        (98) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (99) YES
    (100) QDP
        (101) UsableRulesProof [EQUIVALENT, 0 ms]
        (102) QDP
        (103) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (104) YES
    (105) QDP
        (106) UsableRulesProof [EQUIVALENT, 0 ms]
        (107) QDP
        (108) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (109) YES
    (110) QDP
        (111) UsableRulesProof [EQUIVALENT, 0 ms]
        (112) QDP
        (113) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (114) YES
    (115) QDP
        (116) QDPOrderProof [EQUIVALENT, 359 ms]
        (117) QDP
        (118) QDPOrderProof [EQUIVALENT, 39 ms]
        (119) QDP
        (120) QDPOrderProof [EQUIVALENT, 459 ms]
        (121) QDP
        (122) DependencyGraphProof [EQUIVALENT, 0 ms]
        (123) QDP
        (124) QDPOrderProof [EQUIVALENT, 206 ms]
        (125) QDP
        (126) QDPOrderProof [EQUIVALENT, 213 ms]
        (127) QDP
        (128) QDPOrderProof [EQUIVALENT, 208 ms]
        (129) QDP
        (130) QDPOrderProof [EQUIVALENT, 192 ms]
        (131) QDP
        (132) QDPOrderProof [EQUIVALENT, 176 ms]
        (133) QDP
        (134) QDPOrderProof [EQUIVALENT, 204 ms]
        (135) QDP
        (136) QDPOrderProof [EQUIVALENT, 178 ms]
        (137) QDP
        (138) QDPOrderProof [EQUIVALENT, 483 ms]
        (139) QDP
        (140) QDPOrderProof [EQUIVALENT, 210 ms]
        (141) QDP
        (142) QDPOrderProof [EQUIVALENT, 429 ms]
        (143) QDP
        (144) QDPOrderProof [EQUIVALENT, 476 ms]
        (145) QDP
        (146) QDPOrderProof [EQUIVALENT, 324 ms]
        (147) QDP
        (148) QDPOrderProof [EQUIVALENT, 276 ms]
        (149) QDP
        (150) QDPOrderProof [EQUIVALENT, 132 ms]
        (151) QDP
        (152) QDPOrderProof [EQUIVALENT, 224 ms]
        (153) QDP
        (154) QDPOrderProof [EQUIVALENT, 564 ms]
        (155) QDP
        (156) QDPOrderProof [EQUIVALENT, 154 ms]
        (157) QDP
        (158) QDPOrderProof [EQUIVALENT, 173 ms]
        (159) QDP
        (160) QDPOrderProof [EQUIVALENT, 185 ms]
        (161) QDP
        (162) QDPOrderProof [EQUIVALENT, 193 ms]
        (163) QDP
        (164) QDPOrderProof [EQUIVALENT, 432 ms]
        (165) QDP
        (166) QDPOrderProof [EQUIVALENT, 62 ms]
        (167) QDP
        (168) QDPOrderProof [EQUIVALENT, 141 ms]
        (169) QDP
        (170) QDPOrderProof [EQUIVALENT, 141 ms]
        (171) QDP
        (172) QDPOrderProof [EQUIVALENT, 140 ms]
        (173) QDP
        (174) QDPOrderProof [EQUIVALENT, 605 ms]
        (175) QDP
        (176) QDPOrderProof [EQUIVALENT, 97 ms]
        (177) QDP
        (178) DependencyGraphProof [EQUIVALENT, 0 ms]
        (179) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(zeros) -> CONS(0, zeros)
   ACTIVE(U11(tt)) -> MARK(tt)
   ACTIVE(U21(tt)) -> MARK(tt)
   ACTIVE(U31(tt)) -> MARK(tt)
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   ACTIVE(U41(tt, V2)) -> U42^1(isNatIList(V2))
   ACTIVE(U41(tt, V2)) -> ISNATILIST(V2)
   ACTIVE(U42(tt)) -> MARK(tt)
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   ACTIVE(U51(tt, V2)) -> U52^1(isNatList(V2))
   ACTIVE(U51(tt, V2)) -> ISNATLIST(V2)
   ACTIVE(U52(tt)) -> MARK(tt)
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   ACTIVE(U61(tt, V2)) -> U62^1(isNatIList(V2))
   ACTIVE(U61(tt, V2)) -> ISNATILIST(V2)
   ACTIVE(U62(tt)) -> MARK(tt)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U71(tt, L, N)) -> U72^1(isNat(N), L)
   ACTIVE(U71(tt, L, N)) -> ISNAT(N)
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   ACTIVE(U72(tt, L)) -> S(length(L))
   ACTIVE(U72(tt, L)) -> LENGTH(L)
   ACTIVE(U81(tt)) -> MARK(nil)
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   ACTIVE(U91(tt, IL, M, N)) -> U92^1(isNat(M), IL, M, N)
   ACTIVE(U91(tt, IL, M, N)) -> ISNAT(M)
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   ACTIVE(U92(tt, IL, M, N)) -> U93^1(isNat(N), IL, M, N)
   ACTIVE(U92(tt, IL, M, N)) -> ISNAT(N)
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   ACTIVE(U93(tt, IL, M, N)) -> CONS(N, take(M, IL))
   ACTIVE(U93(tt, IL, M, N)) -> TAKE(M, IL)
   ACTIVE(isNat(0)) -> MARK(tt)
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(length(V1))) -> U11^1(isNatList(V1))
   ACTIVE(isNat(length(V1))) -> ISNATLIST(V1)
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(s(V1))) -> U21^1(isNat(V1))
   ACTIVE(isNat(s(V1))) -> ISNAT(V1)
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   ACTIVE(isNatIList(V)) -> U31^1(isNatList(V))
   ACTIVE(isNatIList(V)) -> ISNATLIST(V)
   ACTIVE(isNatIList(zeros)) -> MARK(tt)
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatIList(cons(V1, V2))) -> U41^1(isNat(V1), V2)
   ACTIVE(isNatIList(cons(V1, V2))) -> ISNAT(V1)
   ACTIVE(isNatList(nil)) -> MARK(tt)
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> U51^1(isNat(V1), V2)
   ACTIVE(isNatList(cons(V1, V2))) -> ISNAT(V1)
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> U61^1(isNat(V1), V2)
   ACTIVE(isNatList(take(V1, V2))) -> ISNAT(V1)
   ACTIVE(length(nil)) -> MARK(0)
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))
   ACTIVE(length(cons(N, L))) -> U71^1(isNatList(L), L, N)
   ACTIVE(length(cons(N, L))) -> ISNATLIST(L)
   ACTIVE(take(0, IL)) -> MARK(U81(isNatIList(IL)))
   ACTIVE(take(0, IL)) -> U81^1(isNatIList(IL))
   ACTIVE(take(0, IL)) -> ISNATILIST(IL)
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(U91(isNatIList(IL), IL, M, N))
   ACTIVE(take(s(M), cons(N, IL))) -> U91^1(isNatIList(IL), IL, M, N)
   ACTIVE(take(s(M), cons(N, IL))) -> ISNATILIST(IL)
   MARK(zeros) -> ACTIVE(zeros)
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> CONS(mark(X1), X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(0) -> ACTIVE(0)
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U11(X)) -> U11^1(mark(X))
   MARK(U11(X)) -> MARK(X)
   MARK(tt) -> ACTIVE(tt)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> U21^1(mark(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U31(X)) -> U31^1(mark(X))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> U41^1(mark(X1), X2)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   MARK(U42(X)) -> U42^1(mark(X))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> U51^1(mark(X1), X2)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U52(X)) -> U52^1(mark(X))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   MARK(U61(X1, X2)) -> U61^1(mark(X1), X2)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> ACTIVE(U62(mark(X)))
   MARK(U62(X)) -> U62^1(mark(X))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U71(X1, X2, X3)) -> U71^1(mark(X1), X2, X3)
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(U72(X1, X2)) -> U72^1(mark(X1), X2)
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(U81(X)) -> ACTIVE(U81(mark(X)))
   MARK(U81(X)) -> U81^1(mark(X))
   MARK(U81(X)) -> MARK(X)
   MARK(nil) -> ACTIVE(nil)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
   MARK(U91(X1, X2, X3, X4)) -> U91^1(mark(X1), X2, X3, X4)
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   MARK(U92(X1, X2, X3, X4)) -> U92^1(mark(X1), X2, X3, X4)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   MARK(U93(X1, X2, X3, X4)) -> U93^1(mark(X1), X2, X3, X4)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   U11^1(mark(X)) -> U11^1(X)
   U11^1(active(X)) -> U11^1(X)
   U21^1(mark(X)) -> U21^1(X)
   U21^1(active(X)) -> U21^1(X)
   U31^1(mark(X)) -> U31^1(X)
   U31^1(active(X)) -> U31^1(X)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)
   U42^1(mark(X)) -> U42^1(X)
   U42^1(active(X)) -> U42^1(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)
   ISNATILIST(active(X)) -> ISNATILIST(X)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)
   U52^1(mark(X)) -> U52^1(X)
   U52^1(active(X)) -> U52^1(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)
   ISNATLIST(active(X)) -> ISNATLIST(X)
   U61^1(mark(X1), X2) -> U61^1(X1, X2)
   U61^1(X1, mark(X2)) -> U61^1(X1, X2)
   U61^1(active(X1), X2) -> U61^1(X1, X2)
   U61^1(X1, active(X2)) -> U61^1(X1, X2)
   U62^1(mark(X)) -> U62^1(X)
   U62^1(active(X)) -> U62^1(X)
   U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
   U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)
   U72^1(mark(X1), X2) -> U72^1(X1, X2)
   U72^1(X1, mark(X2)) -> U72^1(X1, X2)
   U72^1(active(X1), X2) -> U72^1(X1, X2)
   U72^1(X1, active(X2)) -> U72^1(X1, X2)
   ISNAT(mark(X)) -> ISNAT(X)
   ISNAT(active(X)) -> ISNAT(X)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   LENGTH(mark(X)) -> LENGTH(X)
   LENGTH(active(X)) -> LENGTH(X)
   U81^1(mark(X)) -> U81^1(X)
   U81^1(active(X)) -> U81^1(X)
   U91^1(mark(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, mark(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, mark(X3), X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, X3, mark(X4)) -> U91^1(X1, X2, X3, X4)
   U91^1(active(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, active(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, active(X3), X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, X3, active(X4)) -> U91^1(X1, X2, X3, X4)
   U92^1(mark(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, mark(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, mark(X3), X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, X3, mark(X4)) -> U92^1(X1, X2, X3, X4)
   U92^1(active(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, active(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, active(X3), X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, X3, active(X4)) -> U92^1(X1, X2, X3, X4)
   U93^1(mark(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, mark(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, mark(X3), X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, X3, mark(X4)) -> U93^1(X1, X2, X3, X4)
   U93^1(active(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, active(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, active(X3), X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, X3, active(X4)) -> U93^1(X1, X2, X3, X4)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 23 SCCs with 68 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TAKE(X1, mark(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*TAKE(mark(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(active(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(X1, active(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(X1, mark(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(mark(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, mark(X3), X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, X3, mark(X4)) -> U93^1(X1, X2, X3, X4)
   U93^1(active(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, active(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, active(X3), X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, X3, active(X4)) -> U93^1(X1, X2, X3, X4)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(X1, mark(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(mark(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, mark(X3), X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, X3, mark(X4)) -> U93^1(X1, X2, X3, X4)
   U93^1(active(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, active(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, active(X3), X4) -> U93^1(X1, X2, X3, X4)
   U93^1(X1, X2, X3, active(X4)) -> U93^1(X1, X2, X3, X4)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U93^1(X1, mark(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*U93^1(mark(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*U93^1(X1, X2, mark(X3), X4) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*U93^1(X1, X2, X3, mark(X4)) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


*U93^1(active(X1), X2, X3, X4) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*U93^1(X1, active(X2), X3, X4) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*U93^1(X1, X2, active(X3), X4) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*U93^1(X1, X2, X3, active(X4)) -> U93^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U92^1(X1, mark(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(mark(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, mark(X3), X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, X3, mark(X4)) -> U92^1(X1, X2, X3, X4)
   U92^1(active(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, active(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, active(X3), X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, X3, active(X4)) -> U92^1(X1, X2, X3, X4)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U92^1(X1, mark(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(mark(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, mark(X3), X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, X3, mark(X4)) -> U92^1(X1, X2, X3, X4)
   U92^1(active(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, active(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, active(X3), X4) -> U92^1(X1, X2, X3, X4)
   U92^1(X1, X2, X3, active(X4)) -> U92^1(X1, X2, X3, X4)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U92^1(X1, mark(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*U92^1(mark(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*U92^1(X1, X2, mark(X3), X4) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*U92^1(X1, X2, X3, mark(X4)) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


*U92^1(active(X1), X2, X3, X4) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*U92^1(X1, active(X2), X3, X4) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*U92^1(X1, X2, active(X3), X4) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*U92^1(X1, X2, X3, active(X4)) -> U92^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U91^1(X1, mark(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(mark(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, mark(X3), X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, X3, mark(X4)) -> U91^1(X1, X2, X3, X4)
   U91^1(active(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, active(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, active(X3), X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, X3, active(X4)) -> U91^1(X1, X2, X3, X4)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U91^1(X1, mark(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(mark(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, mark(X3), X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, X3, mark(X4)) -> U91^1(X1, X2, X3, X4)
   U91^1(active(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, active(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, active(X3), X4) -> U91^1(X1, X2, X3, X4)
   U91^1(X1, X2, X3, active(X4)) -> U91^1(X1, X2, X3, X4)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U91^1(X1, mark(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*U91^1(mark(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*U91^1(X1, X2, mark(X3), X4) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*U91^1(X1, X2, X3, mark(X4)) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


*U91^1(active(X1), X2, X3, X4) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3, 4 >= 4


*U91^1(X1, active(X2), X3, X4) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3, 4 >= 4


*U91^1(X1, X2, active(X3), X4) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3, 4 >= 4


*U91^1(X1, X2, X3, active(X4)) -> U91^1(X1, X2, X3, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 > 4


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U81^1(active(X)) -> U81^1(X)
   U81^1(mark(X)) -> U81^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U81^1(active(X)) -> U81^1(X)
   U81^1(mark(X)) -> U81^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U81^1(active(X)) -> U81^1(X)
The graph contains the following edges 1 > 1


*U81^1(mark(X)) -> U81^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(active(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


*LENGTH(mark(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(active(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


*ISNAT(mark(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U72^1(X1, mark(X2)) -> U72^1(X1, X2)
   U72^1(mark(X1), X2) -> U72^1(X1, X2)
   U72^1(active(X1), X2) -> U72^1(X1, X2)
   U72^1(X1, active(X2)) -> U72^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U72^1(X1, mark(X2)) -> U72^1(X1, X2)
   U72^1(mark(X1), X2) -> U72^1(X1, X2)
   U72^1(active(X1), X2) -> U72^1(X1, X2)
   U72^1(X1, active(X2)) -> U72^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U72^1(X1, mark(X2)) -> U72^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U72^1(mark(X1), X2) -> U72^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U72^1(active(X1), X2) -> U72^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U72^1(X1, active(X2)) -> U72^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
   U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
   U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(54)
YES

----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(active(X)) -> U62^1(X)
   U62^1(mark(X)) -> U62^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(active(X)) -> U62^1(X)
   U62^1(mark(X)) -> U62^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U62^1(active(X)) -> U62^1(X)
The graph contains the following edges 1 > 1


*U62^1(mark(X)) -> U62^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(59)
YES

----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2)) -> U61^1(X1, X2)
   U61^1(mark(X1), X2) -> U61^1(X1, X2)
   U61^1(active(X1), X2) -> U61^1(X1, X2)
   U61^1(X1, active(X2)) -> U61^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(X1, mark(X2)) -> U61^1(X1, X2)
   U61^1(mark(X1), X2) -> U61^1(X1, X2)
   U61^1(active(X1), X2) -> U61^1(X1, X2)
   U61^1(X1, active(X2)) -> U61^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U61^1(X1, mark(X2)) -> U61^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U61^1(mark(X1), X2) -> U61^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U61^1(active(X1), X2) -> U61^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U61^1(X1, active(X2)) -> U61^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(64)
YES

----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(active(X)) -> ISNATLIST(X)
   ISNATLIST(mark(X)) -> ISNATLIST(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATLIST(active(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


*ISNATLIST(mark(X)) -> ISNATLIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(69)
YES

----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(active(X)) -> U52^1(X)
   U52^1(mark(X)) -> U52^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U52^1(active(X)) -> U52^1(X)
The graph contains the following edges 1 > 1


*U52^1(mark(X)) -> U52^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(74)
YES

----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2)) -> U51^1(X1, X2)
   U51^1(mark(X1), X2) -> U51^1(X1, X2)
   U51^1(active(X1), X2) -> U51^1(X1, X2)
   U51^1(X1, active(X2)) -> U51^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U51^1(X1, mark(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U51^1(mark(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(active(X1), X2) -> U51^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U51^1(X1, active(X2)) -> U51^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(79)
YES

----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(active(X)) -> ISNATILIST(X)
   ISNATILIST(mark(X)) -> ISNATILIST(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATILIST(active(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


*ISNATILIST(mark(X)) -> ISNATILIST(X)
The graph contains the following edges 1 > 1


----------------------------------------

(84)
YES

----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(86) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(active(X)) -> U42^1(X)
   U42^1(mark(X)) -> U42^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(88) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U42^1(active(X)) -> U42^1(X)
The graph contains the following edges 1 > 1


*U42^1(mark(X)) -> U42^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(89)
YES

----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(91) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U41^1(X1, mark(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U41^1(mark(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(active(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(X1, active(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(94)
YES

----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(96) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(active(X)) -> U31^1(X)
   U31^1(mark(X)) -> U31^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(98) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U31^1(active(X)) -> U31^1(X)
The graph contains the following edges 1 > 1


*U31^1(mark(X)) -> U31^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(99)
YES

----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(103) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U21^1(active(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


*U21^1(mark(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(104)
YES

----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(106) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(active(X)) -> U11^1(X)
   U11^1(mark(X)) -> U11^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(108) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U11^1(active(X)) -> U11^1(X)
The graph contains the following edges 1 > 1


*U11^1(mark(X)) -> U11^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(109)
YES

----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(111) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(113) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(114)
YES

----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> ACTIVE(U62(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(take(0, IL)) -> MARK(U81(isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(U91(isNatIList(IL), IL, M, N))
   MARK(length(X)) -> MARK(X)
   MARK(U81(X)) -> ACTIVE(U81(mark(X)))
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(116) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(U11(X)) -> ACTIVE(U11(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U31(X)) -> ACTIVE(U31(mark(X)))
   MARK(U42(X)) -> ACTIVE(U42(mark(X)))
   MARK(U52(X)) -> ACTIVE(U52(mark(X)))
   MARK(U62(X)) -> ACTIVE(U62(mark(X)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(U81(X)) -> ACTIVE(U81(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 1}
POL( U11_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, -2}
POL( U31_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = 2
POL( U42_1(x_1) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2
POL( U52_1(x_1) ) = 0
POL( U61_2(x_1, x_2) ) = 2
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( U81_1(x_1) ) = max{0, -2}
POL( U91_4(x_1, ..., x_4) ) = 2
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 0
POL( take_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 2x_1
POL( zeros ) = 2
POL( 0 ) = 1
POL( tt ) = 1
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( nil ) = 1
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)


----------------------------------------

(117)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U11(X)) -> MARK(X)
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U21(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> MARK(X1)
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(U51(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U61(X1, X2)) -> MARK(X1)
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))
   ACTIVE(take(0, IL)) -> MARK(U81(isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(U91(isNatIList(IL), IL, M, N))
   MARK(length(X)) -> MARK(X)
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(118) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(U11(x_1)) = x_1
   POL(U21(x_1)) = x_1
   POL(U31(x_1)) = x_1
   POL(U41(x_1, x_2)) = x_1
   POL(U42(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1, x_2, x_3)) = 1 + x_1 + x_2
   POL(U72(x_1, x_2)) = 1 + x_1 + x_2
   POL(U81(x_1)) = x_1
   POL(U91(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U92(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U93(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(active(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 1 + x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, L)) -> mark(s(length(L)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   mark(U62(X)) -> active(U62(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   mark(isNat(X)) -> active(isNat(X))
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   mark(s(X)) -> active(s(mark(X)))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(U62(tt)) -> mark(tt)
   active(U81(tt)) -> mark(nil)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)


----------------------------------------

(119)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U11(X)) -> MARK(X)
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U21(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> MARK(X1)
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(U51(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U61(X1, X2)) -> MARK(X1)
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))
   ACTIVE(take(0, IL)) -> MARK(U81(isNatIList(IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(U91(isNatIList(IL), IL, M, N))
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(120) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> MARK(X1)
   ACTIVE(take(0, IL)) -> MARK(U81(isNatIList(IL)))
   ACTIVE(take(s(M), cons(N, IL))) -> MARK(U91(isNatIList(IL), IL, M, N))
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2x_1
POL( MARK_1(x_1) ) = 2x_1
POL( U42_1(x_1) ) = 2x_1
POL( U62_1(x_1) ) = 2x_1
POL( U81_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = 2x_1 + x_3 + 2x_4 + 2
POL( isNatIList_1(x_1) ) = 0
POL( active_1(x_1) ) = x_1
POL( mark_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = x_1
POL( U51_2(x_1, x_2) ) = 2x_1
POL( U61_2(x_1, x_2) ) = 2x_1
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( U92_4(x_1, ..., x_4) ) = 2x_1 + 2x_4 + 2
POL( U93_4(x_1, ..., x_4) ) = x_1 + 2x_4 + 2
POL( length_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = 2x_1 + x_2 + 1
POL( U11_1(x_1) ) = x_1
POL( U31_1(x_1) ) = 2x_1
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1
POL( isNat_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = 2x_1 + 2
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 0
POL( s_1(x_1) ) = x_1
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, L)) -> mark(s(length(L)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   mark(U62(X)) -> active(U62(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   mark(isNat(X)) -> active(isNat(X))
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   mark(s(X)) -> active(s(mark(X)))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(U62(tt)) -> mark(tt)
   active(U81(tt)) -> mark(nil)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)


----------------------------------------

(121)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(zeros) -> ACTIVE(zeros)
   ACTIVE(zeros) -> MARK(cons(0, zeros))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U11(X)) -> MARK(X)
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U21(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U41(X1, X2)) -> MARK(X1)
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(U51(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U61(X1, X2)) -> MARK(X1)
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(122) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(123)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(124) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> ACTIVE(U91(mark(X1), X2, X3, X4))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = 2x_1 + 1
POL( U51_2(x_1, x_2) ) = x_1 + 1
POL( U61_2(x_1, x_2) ) = 2x_1 + 1
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( U91_4(x_1, ..., x_4) ) = x_1 + x_2 + 2x_3 + 2x_4 + 2
POL( U92_4(x_1, ..., x_4) ) = max{0, -2}
POL( U93_4(x_1, ..., x_4) ) = 0
POL( length_1(x_1) ) = 0
POL( take_2(x_1, x_2) ) = 0
POL( mark_1(x_1) ) = x_1 + 1
POL( cons_2(x_1, x_2) ) = 0
POL( active_1(x_1) ) = 2x_1 + 1
POL( zeros ) = 1
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = x_1 + 1
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1 + 1
POL( U62_1(x_1) ) = 2x_1 + 1
POL( U31_1(x_1) ) = x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( U81_1(x_1) ) = x_1 + 2
POL( nil ) = 1
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)


----------------------------------------

(125)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(126) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U91(tt, IL, M, N)) -> MARK(U92(isNat(M), IL, M, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2
POL( U61_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = 2
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2
POL( length_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( cons_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( active_1(x_1) ) = 2x_1 + 1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = max{0, x_1 - 2}
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, x_1 - 1}
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, x_1 - 1}
POL( U62_1(x_1) ) = max{0, x_1 - 2}
POL( U31_1(x_1) ) = max{0, x_1 - 2}
POL( isNat_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( U91_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2x_3 + x_4
POL( U81_1(x_1) ) = max{0, x_1 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)


----------------------------------------

(127)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(128) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U61_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2
POL( length_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = 0
POL( mark_1(x_1) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2
POL( active_1(x_1) ) = max{0, -2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( U11_1(x_1) ) = max{0, 2x_1 - 2}
POL( U52_1(x_1) ) = max{0, x_1 - 2}
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = max{0, x_1 - 2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U31_1(x_1) ) = max{0, x_1 - 2}
POL( isNat_1(x_1) ) = 2
POL( s_1(x_1) ) = 0
POL( U91_4(x_1, ..., x_4) ) = max{0, x_1 + x_3 - 2}
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)


----------------------------------------

(129)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(130) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U92(X1, X2, X3, X4)) -> ACTIVE(U92(mark(X1), X2, X3, X4))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2
POL( U41_2(x_1, x_2) ) = 2x_1
POL( U51_2(x_1, x_2) ) = 2x_1
POL( U61_2(x_1, x_2) ) = x_1
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( U92_4(x_1, ..., x_4) ) = 1
POL( U93_4(x_1, ..., x_4) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = x_2
POL( active_1(x_1) ) = x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 1
POL( U42_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = x_1
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1
POL( U62_1(x_1) ) = 2x_1
POL( U31_1(x_1) ) = x_1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1
POL( U91_4(x_1, ..., x_4) ) = x_3 + x_4
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( U81_1(x_1) ) = 1
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)


----------------------------------------

(131)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(132) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U92(tt, IL, M, N)) -> MARK(U93(isNat(N), IL, M, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U61_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( active_1(x_1) ) = max{0, -2}
POL( zeros ) = 0
POL( 0 ) = 2
POL( tt ) = 2
POL( U42_1(x_1) ) = max{0, x_1 - 2}
POL( isNatIList_1(x_1) ) = 2
POL( U11_1(x_1) ) = max{0, 2x_1 - 2}
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = 2
POL( U62_1(x_1) ) = max{0, -2}
POL( U31_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2
POL( s_1(x_1) ) = 2
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_2 + 2x_4 - 2}
POL( U92_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + x_3 + x_4 + 2
POL( take_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U81_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)


----------------------------------------

(133)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(134) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U93(X1, X2, X3, X4)) -> ACTIVE(U93(mark(X1), X2, X3, X4))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = x_1 + 1
POL( U51_2(x_1, x_2) ) = x_1 + 1
POL( U61_2(x_1, x_2) ) = x_1 + 1
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( U93_4(x_1, ..., x_4) ) = x_2 + 2x_3 + 2x_4 + 2
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( active_1(x_1) ) = 2x_1 + 2
POL( zeros ) = 2
POL( 0 ) = 2
POL( tt ) = 2
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 2x_1 + 1
POL( U52_1(x_1) ) = x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1 + 1
POL( U62_1(x_1) ) = x_1 + 1
POL( U31_1(x_1) ) = x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1 + 1
POL( U91_4(x_1, ..., x_4) ) = 2x_2 + x_4 + 2
POL( U92_4(x_1, ..., x_4) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U81_1(x_1) ) = 2x_1 + 2
POL( nil ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)


----------------------------------------

(135)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(136) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U93(tt, IL, M, N)) -> MARK(cons(N, take(M, IL)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U61_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = 2x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( active_1(x_1) ) = max{0, -2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = 2
POL( isNatIList_1(x_1) ) = 2
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, x_1 - 1}
POL( U31_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_4 - 2}
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = max{0, 2x_1 - 1}
POL( take_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( U81_1(x_1) ) = x_1 + 1
POL( nil ) = 2
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(137)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(138) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U41(X1, X2)) -> MARK(X1)
   ACTIVE(U61(tt, V2)) -> MARK(U62(isNatIList(V2)))
   MARK(U61(X1, X2)) -> MARK(X1)
   ACTIVE(isNatIList(V)) -> MARK(U31(isNatList(V)))
   ACTIVE(isNatList(take(V1, V2))) -> MARK(U61(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( U51_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U61_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( U71_3(x_1, ..., x_3) ) = x_2 + 2x_3
POL( U72_2(x_1, x_2) ) = x_2
POL( length_1(x_1) ) = x_1
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( active_1(x_1) ) = x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 2x_1 + 1
POL( U11_1(x_1) ) = x_1
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 2x_1
POL( U21_1(x_1) ) = x_1
POL( U62_1(x_1) ) = x_1
POL( U31_1(x_1) ) = x_1
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = x_2 + 2x_3 + 2x_4 + 2
POL( U92_4(x_1, ..., x_4) ) = x_2 + 2x_3 + 2x_4 + 2
POL( U93_4(x_1, ..., x_4) ) = x_2 + 2x_3 + 2x_4 + 2
POL( take_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( U81_1(x_1) ) = 2
POL( nil ) = 2
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, L)) -> mark(s(length(L)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   mark(U62(X)) -> active(U62(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   mark(isNat(X)) -> active(isNat(X))
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   mark(s(X)) -> active(s(mark(X)))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(U62(tt)) -> mark(tt)
   active(U81(tt)) -> mark(nil)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)


----------------------------------------

(139)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(140) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U31(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> ACTIVE(U61(mark(X1), X2))
   MARK(U62(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 0
POL( U41_2(x_1, x_2) ) = 0
POL( U51_2(x_1, x_2) ) = 2x_1 + 1
POL( U61_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = 0
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( active_1(x_1) ) = 2x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 2x_1 + 1
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1 + 1
POL( U62_1(x_1) ) = x_1 + 2
POL( U31_1(x_1) ) = x_1 + 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( U91_4(x_1, ..., x_4) ) = max{0, x_1 + x_2 + x_4 - 2}
POL( U92_4(x_1, ..., x_4) ) = x_1 + 2x_2 + 2x_3 + 2
POL( U93_4(x_1, ..., x_4) ) = 2x_2 + x_3 + 2
POL( take_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 2}
POL( U81_1(x_1) ) = x_1 + 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)


----------------------------------------

(141)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(142) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U11(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U71_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 1
POL( U72_2(x_1, x_2) ) = 2x_2 + 1
POL( length_1(x_1) ) = 2x_1 + 1
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( active_1(x_1) ) = x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = x_1 + 2
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 2x_1
POL( U21_1(x_1) ) = x_1
POL( U61_2(x_1, x_2) ) = 2
POL( U62_1(x_1) ) = 0
POL( U31_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U92_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U93_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( take_2(x_1, x_2) ) = x_2 + 2
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, L)) -> mark(s(length(L)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   mark(U62(X)) -> active(U62(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   mark(isNat(X)) -> active(isNat(X))
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   mark(s(X)) -> active(s(mark(X)))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(U62(tt)) -> mark(tt)
   active(U81(tt)) -> mark(nil)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)


----------------------------------------

(143)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(144) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U51(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 2x_1 + 2
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2x_1 + 1
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( active_1(x_1) ) = x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 1
POL( U21_1(x_1) ) = x_1
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U31_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = max{0, -2}
POL( U92_4(x_1, ..., x_4) ) = 0
POL( U93_4(x_1, ..., x_4) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, L)) -> mark(s(length(L)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   mark(U62(X)) -> active(U62(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   mark(isNat(X)) -> active(isNat(X))
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   mark(s(X)) -> active(s(mark(X)))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(U62(tt)) -> mark(tt)
   active(U81(tt)) -> mark(nil)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)


----------------------------------------

(145)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(146) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNat(length(V1))) -> MARK(U11(isNatList(V1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( active_1(x_1) ) = 2x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 1
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = x_1
POL( U61_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2
POL( s_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = x_2 + x_3 + 2
POL( U92_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_3 + x_4 - 2}
POL( U93_4(x_1, ..., x_4) ) = max{0, 2x_2 - 2}
POL( take_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)


----------------------------------------

(147)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(148) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 2}
POL( U41_2(x_1, x_2) ) = 0
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( active_1(x_1) ) = 2x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = x_1 + 2
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, x_1 - 2}
POL( U52_1(x_1) ) = 2x_1 + 2
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = x_1 + 2
POL( U61_2(x_1, x_2) ) = x_1 + 2
POL( U62_1(x_1) ) = 2x_1 + 2
POL( U31_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2x_1 + 2
POL( s_1(x_1) ) = 2x_1 + 2
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_3 - 2}
POL( U92_4(x_1, ..., x_4) ) = max{0, 2x_4 - 2}
POL( U93_4(x_1, ..., x_4) ) = 2
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)


----------------------------------------

(149)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(150) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNat(X)) -> ACTIVE(isNat(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNatIList_1(x_1) ) = 2
POL( U11_1(x_1) ) = 0
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = x_1 + x_2 + 2
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_4 - 2}
POL( U92_4(x_1, ..., x_4) ) = 2x_1 + x_4 + 2
POL( U93_4(x_1, ..., x_4) ) = max{0, x_2 + x_3 + 2x_4 - 2}
POL( take_2(x_1, x_2) ) = 2
POL( U81_1(x_1) ) = 1
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(151)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(152) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U21(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = 2x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( active_1(x_1) ) = 2x_1
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 0
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1 + 2
POL( U61_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U62_1(x_1) ) = x_1 + 2
POL( U31_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1 + 1
POL( U91_4(x_1, ..., x_4) ) = 2
POL( U92_4(x_1, ..., x_4) ) = max{0, x_2 + 2x_3 - 2}
POL( U93_4(x_1, ..., x_4) ) = 2
POL( take_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U81_1(x_1) ) = 2
POL( nil ) = 1
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(153)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(154) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatList(cons(V1, V2))) -> MARK(U51(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2x_2
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = 2x_1 + 2
POL( cons_2(x_1, x_2) ) = x_2 + 1
POL( active_1(x_1) ) = 2x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 2x_1 + 2
POL( U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = 2x_1
POL( U21_1(x_1) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U31_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_2 + 2x_3 + 2x_4 - 2}
POL( U92_4(x_1, ..., x_4) ) = max{0, 2x_2 - 2}
POL( U93_4(x_1, ..., x_4) ) = x_2 + 2
POL( take_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U81_1(x_1) ) = 0
POL( nil ) = 1
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(155)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(156) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNatList(X)) -> ACTIVE(isNatList(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( U11_1(x_1) ) = x_1 + 1
POL( U52_1(x_1) ) = max{0, x_1 - 2}
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2
POL( U61_2(x_1, x_2) ) = x_2 + 2
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 2
POL( U91_4(x_1, ..., x_4) ) = max{0, x_3 - 1}
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2x_1 + x_2 + 2x_3 + 2
POL( take_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(157)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
   MARK(U52(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(158) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U51(X1, X2)) -> ACTIVE(U51(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 0
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( active_1(x_1) ) = x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = 2x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = 2x_1 + 1
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2
POL( U61_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1 + 1
POL( U91_4(x_1, ..., x_4) ) = max{0, x_2 + x_3 - 2}
POL( U92_4(x_1, ..., x_4) ) = x_1 + x_2 + x_3 + x_4 + 2
POL( U93_4(x_1, ..., x_4) ) = x_1 + x_3 + 2x_4 + 2
POL( take_2(x_1, x_2) ) = 0
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 2
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(159)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
   MARK(U52(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(160) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U51(tt, V2)) -> MARK(U52(isNatList(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = max{0, 2x_1 - 2}
POL( cons_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( active_1(x_1) ) = 2
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 2
POL( U42_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = x_1 + 2
POL( U51_2(x_1, x_2) ) = 2x_1 + 2
POL( U52_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNatList_1(x_1) ) = 2x_1 + 2
POL( U21_1(x_1) ) = 2
POL( U61_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U62_1(x_1) ) = max{0, 2x_1 - 2}
POL( U31_1(x_1) ) = max{0, x_1 - 2}
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = 0
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_2 + x_3 + 2x_4 - 1}
POL( U92_4(x_1, ..., x_4) ) = max{0, x_2 + 2x_3 - 2}
POL( U93_4(x_1, ..., x_4) ) = 2x_1 + x_3 + 2
POL( take_2(x_1, x_2) ) = 2x_1 + 2
POL( U81_1(x_1) ) = x_1
POL( nil ) = 2
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(161)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   MARK(U52(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(162) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U52(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = 1
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( active_1(x_1) ) = x_1
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 1
POL( U51_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U52_1(x_1) ) = 2x_1 + 2
POL( isNatList_1(x_1) ) = 2
POL( U21_1(x_1) ) = max{0, 2x_1 - 2}
POL( U61_2(x_1, x_2) ) = 2x_1 + 2
POL( U62_1(x_1) ) = max{0, x_1 - 2}
POL( U31_1(x_1) ) = 1
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1 + 1
POL( U91_4(x_1, ..., x_4) ) = 2
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2x_3 + 2x_4 + 2
POL( take_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U81_1(x_1) ) = x_1
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(163)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(164) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(isNatIList(cons(V1, V2))) -> MARK(U41(isNat(V1), V2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 1}
POL( U41_2(x_1, x_2) ) = 2x_2 + 2
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( mark_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( active_1(x_1) ) = x_1 + 2
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = x_1 + 1
POL( isNatIList_1(x_1) ) = 2x_1 + 1
POL( U11_1(x_1) ) = max{0, x_1 - 2}
POL( U51_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U52_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, x_1 - 2}
POL( U61_2(x_1, x_2) ) = max{0, x_1 - 1}
POL( U62_1(x_1) ) = max{0, 2x_1 - 2}
POL( U31_1(x_1) ) = x_1
POL( isNat_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = 2x_1 + 1
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_4 - 1}
POL( U92_4(x_1, ..., x_4) ) = max{0, x_1 + x_2 + 2x_4 - 2}
POL( U93_4(x_1, ..., x_4) ) = 2x_2 + 2x_3 + 1
POL( take_2(x_1, x_2) ) = 0
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(165)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(166) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(isNatIList(X)) -> ACTIVE(isNatIList(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 1}
POL( U41_2(x_1, x_2) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_2(x_1, x_2) ) = 2
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( cons_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( active_1(x_1) ) = max{0, 2x_1 - 2}
POL( zeros ) = 2
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = max{0, x_1 - 2}
POL( U51_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U52_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, x_1 - 2}
POL( U61_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = max{0, x_1 - 2}
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( U91_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_2 + x_3 - 2}
POL( U92_4(x_1, ..., x_4) ) = max{0, x_1 + 2x_4 - 2}
POL( U93_4(x_1, ..., x_4) ) = max{0, x_1 + x_2 - 2}
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, 2x_1 - 2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(167)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(168) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = x_2 + 2
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 0
POL( mark_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( active_1(x_1) ) = x_1
POL( zeros ) = 1
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( U11_1(x_1) ) = 2
POL( U51_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U52_1(x_1) ) = max{0, x_1 - 2}
POL( isNatList_1(x_1) ) = 0
POL( U21_1(x_1) ) = max{0, 2x_1 - 2}
POL( U61_2(x_1, x_2) ) = 2
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1
POL( U91_4(x_1, ..., x_4) ) = x_3 + 2x_4 + 2
POL( U92_4(x_1, ..., x_4) ) = 2x_3 + 2
POL( U93_4(x_1, ..., x_4) ) = 2
POL( take_2(x_1, x_2) ) = 2
POL( U81_1(x_1) ) = max{0, -2}
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(169)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
   MARK(U42(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(170) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U41(tt, V2)) -> MARK(U42(isNatIList(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( MARK_1(x_1) ) = max{0, -2}
POL( U42_1(x_1) ) = max{0, x_1 - 2}
POL( ACTIVE_1(x_1) ) = max{0, x_1 - 2}
POL( U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( active_1(x_1) ) = 2
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = 2
POL( U91_4(x_1, ..., x_4) ) = max{0, x_2 - 2}
POL( isNatIList_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2x_1 + 2
POL( U41_2(x_1, x_2) ) = 2x_1 + 1
POL( U51_2(x_1, x_2) ) = 2x_2 + 2
POL( U61_2(x_1, x_2) ) = 2x_2 + 2
POL( U92_4(x_1, ..., x_4) ) = max{0, 2x_4 - 2}
POL( U93_4(x_1, ..., x_4) ) = max{0, 2x_2 + x_3 - 2}
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = max{0, x_1 + 2x_2 - 1}
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 2
POL( U11_1(x_1) ) = 1
POL( U52_1(x_1) ) = max{0, 2x_1 - 2}
POL( isNatList_1(x_1) ) = 0
POL( U31_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = 0
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U42(X)) -> MARK(X)
   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(172) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U42(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}
POL( U72_2(x_1, x_2) ) = max{0, -2}
POL( ACTIVE_1(x_1) ) = 0
POL( U71_3(x_1, ..., x_3) ) = 1
POL( active_1(x_1) ) = 2x_1
POL( mark_1(x_1) ) = 2x_1
POL( length_1(x_1) ) = 0
POL( U21_1(x_1) ) = 2
POL( U41_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = max{0, x_1 + 2x_2 - 2}
POL( U61_2(x_1, x_2) ) = x_2 + 2
POL( U92_4(x_1, ..., x_4) ) = 2
POL( U93_4(x_1, ..., x_4) ) = 2x_2 + x_3 + 2
POL( isNat_1(x_1) ) = 0
POL( s_1(x_1) ) = x_1 + 1
POL( cons_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( zeros ) = 0
POL( 0 ) = 0
POL( tt ) = 0
POL( U42_1(x_1) ) = 2x_1 + 2
POL( isNatIList_1(x_1) ) = 2x_1 + 1
POL( U11_1(x_1) ) = 2
POL( U52_1(x_1) ) = max{0, x_1 - 2}
POL( isNatList_1(x_1) ) = x_1 + 1
POL( U62_1(x_1) ) = 2
POL( U31_1(x_1) ) = 2
POL( U91_4(x_1, ..., x_4) ) = max{0, x_1 + x_2 + 2x_4 - 1}
POL( take_2(x_1, x_2) ) = 2
POL( U81_1(x_1) ) = 1
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(173)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(s(X)) -> MARK(X)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(174) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ACTIVE(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U71(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(MARK(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U72(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(isNatList(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(active(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(zeros) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(U41(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U42(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U51(x_1, x_2)) =  	[[0A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U52(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U21(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U61(x_1, x_2)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U62(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U91(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[2A]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2 	 +  	[[3A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U92(x_1, x_2, x_3, x_4)) =  	[[4A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2 	 +  	[[3A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U93(x_1, x_2, x_3, x_4)) =  	[[4A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[3A]] 	* 	x_2 	 +  	[[3A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[3A]] 	 +  	[[2A]] 	* 	x_1 	 +  	[[2A]] 	* 	x_2
>>>

   <<<
 POL(U81(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(zeros) -> mark(cons(0, zeros))
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   mark(zeros) -> active(zeros)
   mark(U11(X)) -> active(U11(mark(X)))
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   mark(U21(X)) -> active(U21(mark(X)))
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   mark(U31(X)) -> active(U31(mark(X)))
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, L)) -> mark(s(length(L)))
   mark(U42(X)) -> active(U42(mark(X)))
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   mark(isNatIList(X)) -> active(isNatIList(X))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   mark(U52(X)) -> active(U52(mark(X)))
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   mark(isNatList(X)) -> active(isNatList(X))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   mark(U62(X)) -> active(U62(mark(X)))
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   mark(isNat(X)) -> active(isNat(X))
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   mark(s(X)) -> active(s(mark(X)))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   mark(length(X)) -> active(length(mark(X)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(0) -> active(0)
   mark(tt) -> active(tt)
   mark(nil) -> active(nil)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   isNatList(active(X)) -> isNatList(X)
   isNatList(mark(X)) -> isNatList(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U42(tt)) -> mark(tt)
   active(U52(tt)) -> mark(tt)
   active(U62(tt)) -> mark(tt)
   active(U81(tt)) -> mark(nil)
   active(isNat(0)) -> mark(tt)
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatList(nil)) -> mark(tt)
   active(length(nil)) -> mark(0)
   isNatIList(active(X)) -> isNatIList(X)
   isNatIList(mark(X)) -> isNatIList(X)
   U42(active(X)) -> U42(X)
   U42(mark(X)) -> U42(X)
   U11(active(X)) -> U11(X)
   U11(mark(X)) -> U11(X)
   U52(active(X)) -> U52(X)
   U52(mark(X)) -> U52(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U62(active(X)) -> U62(X)
   U62(mark(X)) -> U62(X)
   U31(active(X)) -> U31(X)
   U31(mark(X)) -> U31(X)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U81(active(X)) -> U81(X)
   U81(mark(X)) -> U81(X)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)


----------------------------------------

(175)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(176) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U71(tt, L, N)) -> MARK(U72(isNat(N), L))
   ACTIVE(U72(tt, L)) -> MARK(s(length(L)))
   ACTIVE(length(cons(N, L))) -> MARK(U71(isNatList(L), L, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

U71(x1, x2, x3)  =  U71

MARK(x1)  =  x1

U72(x1, x2)  =  U72

s(x1)  =  s

length(x1)  =  length


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=1
   U72=2
   length=4
   U71=3

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(177)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2)) -> ACTIVE(U72(mark(X1), X2))
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   active(zeros) -> mark(cons(0, zeros))
   active(U11(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt)) -> mark(tt)
   active(U41(tt, V2)) -> mark(U42(isNatIList(V2)))
   active(U42(tt)) -> mark(tt)
   active(U51(tt, V2)) -> mark(U52(isNatList(V2)))
   active(U52(tt)) -> mark(tt)
   active(U61(tt, V2)) -> mark(U62(isNatIList(V2)))
   active(U62(tt)) -> mark(tt)
   active(U71(tt, L, N)) -> mark(U72(isNat(N), L))
   active(U72(tt, L)) -> mark(s(length(L)))
   active(U81(tt)) -> mark(nil)
   active(U91(tt, IL, M, N)) -> mark(U92(isNat(M), IL, M, N))
   active(U92(tt, IL, M, N)) -> mark(U93(isNat(N), IL, M, N))
   active(U93(tt, IL, M, N)) -> mark(cons(N, take(M, IL)))
   active(isNat(0)) -> mark(tt)
   active(isNat(length(V1))) -> mark(U11(isNatList(V1)))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNatIList(V)) -> mark(U31(isNatList(V)))
   active(isNatIList(zeros)) -> mark(tt)
   active(isNatIList(cons(V1, V2))) -> mark(U41(isNat(V1), V2))
   active(isNatList(nil)) -> mark(tt)
   active(isNatList(cons(V1, V2))) -> mark(U51(isNat(V1), V2))
   active(isNatList(take(V1, V2))) -> mark(U61(isNat(V1), V2))
   active(length(nil)) -> mark(0)
   active(length(cons(N, L))) -> mark(U71(isNatList(L), L, N))
   active(take(0, IL)) -> mark(U81(isNatIList(IL)))
   active(take(s(M), cons(N, IL))) -> mark(U91(isNatIList(IL), IL, M, N))
   mark(zeros) -> active(zeros)
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(0) -> active(0)
   mark(U11(X)) -> active(U11(mark(X)))
   mark(tt) -> active(tt)
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X)) -> active(U31(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U42(X)) -> active(U42(mark(X)))
   mark(isNatIList(X)) -> active(isNatIList(X))
   mark(U51(X1, X2)) -> active(U51(mark(X1), X2))
   mark(U52(X)) -> active(U52(mark(X)))
   mark(isNatList(X)) -> active(isNatList(X))
   mark(U61(X1, X2)) -> active(U61(mark(X1), X2))
   mark(U62(X)) -> active(U62(mark(X)))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2)) -> active(U72(mark(X1), X2))
   mark(isNat(X)) -> active(isNat(X))
   mark(s(X)) -> active(s(mark(X)))
   mark(length(X)) -> active(length(mark(X)))
   mark(U81(X)) -> active(U81(mark(X)))
   mark(nil) -> active(nil)
   mark(U91(X1, X2, X3, X4)) -> active(U91(mark(X1), X2, X3, X4))
   mark(U92(X1, X2, X3, X4)) -> active(U92(mark(X1), X2, X3, X4))
   mark(U93(X1, X2, X3, X4)) -> active(U93(mark(X1), X2, X3, X4))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   U11(mark(X)) -> U11(X)
   U11(active(X)) -> U11(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X)) -> U31(X)
   U31(active(X)) -> U31(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U42(mark(X)) -> U42(X)
   U42(active(X)) -> U42(X)
   isNatIList(mark(X)) -> isNatIList(X)
   isNatIList(active(X)) -> isNatIList(X)
   U51(mark(X1), X2) -> U51(X1, X2)
   U51(X1, mark(X2)) -> U51(X1, X2)
   U51(active(X1), X2) -> U51(X1, X2)
   U51(X1, active(X2)) -> U51(X1, X2)
   U52(mark(X)) -> U52(X)
   U52(active(X)) -> U52(X)
   isNatList(mark(X)) -> isNatList(X)
   isNatList(active(X)) -> isNatList(X)
   U61(mark(X1), X2) -> U61(X1, X2)
   U61(X1, mark(X2)) -> U61(X1, X2)
   U61(active(X1), X2) -> U61(X1, X2)
   U61(X1, active(X2)) -> U61(X1, X2)
   U62(mark(X)) -> U62(X)
   U62(active(X)) -> U62(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2) -> U72(X1, X2)
   U72(X1, mark(X2)) -> U72(X1, X2)
   U72(active(X1), X2) -> U72(X1, X2)
   U72(X1, active(X2)) -> U72(X1, X2)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)
   U81(mark(X)) -> U81(X)
   U81(active(X)) -> U81(X)
   U91(mark(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, mark(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, mark(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, mark(X4)) -> U91(X1, X2, X3, X4)
   U91(active(X1), X2, X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, active(X2), X3, X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, active(X3), X4) -> U91(X1, X2, X3, X4)
   U91(X1, X2, X3, active(X4)) -> U91(X1, X2, X3, X4)
   U92(mark(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, mark(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, mark(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, mark(X4)) -> U92(X1, X2, X3, X4)
   U92(active(X1), X2, X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, active(X2), X3, X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, active(X3), X4) -> U92(X1, X2, X3, X4)
   U92(X1, X2, X3, active(X4)) -> U92(X1, X2, X3, X4)
   U93(mark(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, mark(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, mark(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, mark(X4)) -> U93(X1, X2, X3, X4)
   U93(active(X1), X2, X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, active(X2), X3, X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, active(X3), X4) -> U93(X1, X2, X3, X4)
   U93(X1, X2, X3, active(X4)) -> U93(X1, X2, X3, X4)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(178) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 3 less nodes.
----------------------------------------

(179)
TRUE
