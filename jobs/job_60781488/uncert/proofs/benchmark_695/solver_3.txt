YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
and(x,not(ffalse)) -> x
and(x,ffalse) -> ffalse
implies(not(x),not(y)) -> implies(y,and(x,y))
implies(ffalse,y) -> not(ffalse)
implies(x,ffalse) -> not(x)
not(not(x)) -> x
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IMPLIES(not(x),not(y)) -> AND(x,y)
 IMPLIES(not(x),not(y)) -> IMPLIES(y,and(x,y))
 IMPLIES(x,ffalse) -> NOT(x)
-> Rules:
 and(x,not(ffalse)) -> x
 and(x,ffalse) -> ffalse
 implies(not(x),not(y)) -> implies(y,and(x,y))
 implies(ffalse,y) -> not(ffalse)
 implies(x,ffalse) -> not(x)
 not(not(x)) -> x

Problem 1: 

SCC Processor:
-> Pairs:
 IMPLIES(not(x),not(y)) -> AND(x,y)
 IMPLIES(not(x),not(y)) -> IMPLIES(y,and(x,y))
 IMPLIES(x,ffalse) -> NOT(x)
-> Rules:
 and(x,not(ffalse)) -> x
 and(x,ffalse) -> ffalse
 implies(not(x),not(y)) -> implies(y,and(x,y))
 implies(ffalse,y) -> not(ffalse)
 implies(x,ffalse) -> not(x)
 not(not(x)) -> x
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IMPLIES(not(x),not(y)) -> IMPLIES(y,and(x,y))
->->-> Rules:
 and(x,not(ffalse)) -> x
 and(x,ffalse) -> ffalse
 implies(not(x),not(y)) -> implies(y,and(x,y))
 implies(ffalse,y) -> not(ffalse)
 implies(x,ffalse) -> not(x)
 not(not(x)) -> x

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 IMPLIES(not(x),not(y)) -> IMPLIES(y,and(x,y))
-> Rules:
 and(x,not(ffalse)) -> x
 and(x,ffalse) -> ffalse
 implies(not(x),not(y)) -> implies(y,and(x,y))
 implies(ffalse,y) -> not(ffalse)
 implies(x,ffalse) -> not(x)
 not(not(x)) -> x
-> Usable rules:
 and(x,not(ffalse)) -> x
 and(x,ffalse) -> ffalse
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[and](X1,X2) = 2.X1 + 2
[implies](X1,X2) = 0
[not](X) = 2.X + 2
[fSNonEmpty] = 0
[ffalse] = 0
[AND](X1,X2) = 0
[IMPLIES](X1,X2) = 2.X1 + 2.X2
[NOT](X) = 0

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 and(x,not(ffalse)) -> x
 and(x,ffalse) -> ffalse
 implies(not(x),not(y)) -> implies(y,and(x,y))
 implies(ffalse,y) -> not(ffalse)
 implies(x,ffalse) -> not(x)
 not(not(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
