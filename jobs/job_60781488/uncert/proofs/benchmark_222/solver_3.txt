YES

Problem 1: 

(VAR vu95NonEmpty b m n x y)
(RULES
empty(cons(n,x)) -> ffalse
empty(nil) -> ftrue
head(cons(n,x)) -> n
if(ffalse,b,x) -> if2(b,x)
if(ftrue,b,x) -> weightu95undefinedu95error
if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
if2(ftrue,x) -> head(x)
sum(cons(num0,x),y) -> sum(x,y)
sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
sum(nil,y) -> y
tail(cons(n,x)) -> x
tail(nil) -> nil
weight(x) -> if(empty(x),empty(tail(x)),x)
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IF(ffalse,b,x) -> IF2(b,x)
 IF2(ffalse,x) -> SUM(x,cons(num0,tail(tail(x))))
 IF2(ffalse,x) -> TAIL(tail(x))
 IF2(ffalse,x) -> TAIL(x)
 IF2(ffalse,x) -> WEIGHT(sum(x,cons(num0,tail(tail(x)))))
 IF2(ftrue,x) -> HEAD(x)
 SUM(cons(num0,x),y) -> SUM(x,y)
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
 WEIGHT(x) -> EMPTY(tail(x))
 WEIGHT(x) -> EMPTY(x)
 WEIGHT(x) -> IF(empty(x),empty(tail(x)),x)
 WEIGHT(x) -> TAIL(x)
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)

Problem 1: 

SCC Processor:
-> Pairs:
 IF(ffalse,b,x) -> IF2(b,x)
 IF2(ffalse,x) -> SUM(x,cons(num0,tail(tail(x))))
 IF2(ffalse,x) -> TAIL(tail(x))
 IF2(ffalse,x) -> TAIL(x)
 IF2(ffalse,x) -> WEIGHT(sum(x,cons(num0,tail(tail(x)))))
 IF2(ftrue,x) -> HEAD(x)
 SUM(cons(num0,x),y) -> SUM(x,y)
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
 WEIGHT(x) -> EMPTY(tail(x))
 WEIGHT(x) -> EMPTY(x)
 WEIGHT(x) -> IF(empty(x),empty(tail(x)),x)
 WEIGHT(x) -> TAIL(x)
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 SUM(cons(num0,x),y) -> SUM(x,y)
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
->->-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
->->Cycle:
->->-> Pairs:
 IF(ffalse,b,x) -> IF2(b,x)
 IF2(ffalse,x) -> WEIGHT(sum(x,cons(num0,tail(tail(x)))))
 WEIGHT(x) -> IF(empty(x),empty(tail(x)),x)
->->-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Reduction Pairs Processor:
-> Pairs:
 SUM(cons(num0,x),y) -> SUM(x,y)
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[empty](X) = 0
[head](X) = 0
[if](X1,X2,X3) = 0
[if2](X1,X2) = 0
[sum](X1,X2) = 0
[tail](X) = 0
[weight](X) = 0
[num0] = 2
[cons](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[s](X) = 2.X
[ftrue] = 0
[weightu95undefinedu95error] = 0
[EMPTY](X) = 0
[HEAD](X) = 0
[IF](X1,X2,X3) = 0
[IF2](X1,X2) = 0
[SUM](X1,X2) = 2.X1
[TAIL](X) = 0
[WEIGHT](X) = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
->->-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)

Problem 1.1: 

Reduction Pairs Processor:
-> Pairs:
 SUM(cons(s(n),x),cons(m,y)) -> SUM(cons(n,x),cons(s(m),y))
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[empty](X) = 0
[head](X) = 0
[if](X1,X2,X3) = 0
[if2](X1,X2) = 0
[sum](X1,X2) = 0
[tail](X) = 0
[weight](X) = 0
[num0] = 0
[cons](X1,X2) = 2.X1
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[s](X) = X + 2
[ftrue] = 0
[weightu95undefinedu95error] = 0
[EMPTY](X) = 0
[HEAD](X) = 0
[IF](X1,X2,X3) = 0
[IF2](X1,X2) = 0
[SUM](X1,X2) = 2.X1 + X2
[TAIL](X) = 0
[WEIGHT](X) = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 IF(ffalse,b,x) -> IF2(b,x)
 IF2(ffalse,x) -> WEIGHT(sum(x,cons(num0,tail(tail(x)))))
 WEIGHT(x) -> IF(empty(x),empty(tail(x)),x)
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
-> Usable rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 4
->Interpretation:
 
[empty](X) = 2.X + 1/4
[head](X) = 0
[if](X1,X2,X3) = 0
[if2](X1,X2) = 0
[sum](X1,X2) = X2
[tail](X) = 1/4.X
[weight](X) = 0
[num0] = 1/2
[cons](X1,X2) = 4.X2 + 1/4
[fSNonEmpty] = 0
[ffalse] = 3/4
[nil] = 0
[s](X) = 2/3.X + 1/4
[ftrue] = 1/4
[weightu95undefinedu95error] = 0
[EMPTY](X) = 0
[HEAD](X) = 0
[IF](X1,X2,X3) = 2/3.X2 + 1/4.X3 + 1/3
[IF2](X1,X2) = 2/3.X1 + 1/4.X2 + 1/4
[SUM](X1,X2) = 0
[TAIL](X) = 0
[WEIGHT](X) = X + 1/2

Problem 1.2: 

SCC Processor:
-> Pairs:
 IF2(ffalse,x) -> WEIGHT(sum(x,cons(num0,tail(tail(x)))))
 WEIGHT(x) -> IF(empty(x),empty(tail(x)),x)
-> Rules:
 empty(cons(n,x)) -> ffalse
 empty(nil) -> ftrue
 head(cons(n,x)) -> n
 if(ffalse,b,x) -> if2(b,x)
 if(ftrue,b,x) -> weightu95undefinedu95error
 if2(ffalse,x) -> weight(sum(x,cons(num0,tail(tail(x)))))
 if2(ftrue,x) -> head(x)
 sum(cons(num0,x),y) -> sum(x,y)
 sum(cons(s(n),x),cons(m,y)) -> sum(cons(n,x),cons(s(m),y))
 sum(nil,y) -> y
 tail(cons(n,x)) -> x
 tail(nil) -> nil
 weight(x) -> if(empty(x),empty(tail(x)),x)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
