YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/f2MbK.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) PisEmptyProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) UsableRulesProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(N), cons(X, XS)) -> SEL(N, activate(XS))
   SEL(s(N), cons(X, XS)) -> ACTIVATE(XS)
   MINUS(s(X), s(Y)) -> MINUS(X, Y)
   QUOT(s(X), s(Y)) -> S(quot(minus(X, Y), s(Y)))
   QUOT(s(X), s(Y)) -> QUOT(minus(X, Y), s(Y))
   QUOT(s(X), s(Y)) -> MINUS(X, Y)
   ZWQUOT(cons(X, XS), cons(Y, YS)) -> QUOT(X, Y)
   ZWQUOT(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
   ZWQUOT(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)
   ACTIVATE(n__from(X)) -> FROM(activate(X))
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__zWquot(X1, X2)) -> ZWQUOT(activate(X1), activate(X2))
   ACTIVATE(n__zWquot(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__zWquot(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 6 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(X), s(Y)) -> MINUS(X, Y)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(X), s(Y)) -> MINUS(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(X), s(Y)) -> MINUS(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(X), s(Y)) -> QUOT(minus(X, Y), s(Y))

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(X), s(Y)) -> QUOT(minus(X, Y), s(Y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s

minus(x1, x2)  =  minus

0  =  0


Knuth-Bendix order [KBO] with precedence:s > minus > 0

and weight map:

   s=1
   0=1
   minus=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)


----------------------------------------

(12)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ZWQUOT(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__zWquot(X1, X2)) -> ZWQUOT(activate(X1), activate(X2))
   ZWQUOT(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)
   ACTIVATE(n__zWquot(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__zWquot(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ZWQUOT(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
   ACTIVATE(n__zWquot(X1, X2)) -> ZWQUOT(activate(X1), activate(X2))
   ZWQUOT(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)
   ACTIVATE(n__zWquot(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__zWquot(X1, X2)) -> ACTIVATE(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ZWQUOT(x1, x2)  =  ZWQUOT(x1, x2)

cons(x1, x2)  =  x2

ACTIVATE(x1)  =  x1

n__from(x1)  =  x1

n__s(x1)  =  x1

n__zWquot(x1, x2)  =  n__zWquot(x1, x2)

activate(x1)  =  activate(x1)

from(x1)  =  x1

s(x1)  =  x1

zWquot(x1, x2)  =  zWquot(x1, x2)

nil  =  nil


Knuth-Bendix order [KBO] with precedence:activate_1 > ZWQUOT_2
activate_1 > zWquot_2 > n__zWquot_2
activate_1 > nil

and weight map:

   n__zWquot_2=2
   zWquot_2=2
   activate_1=0
   ZWQUOT_2=1
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   s(X) -> n__s(X)
   from(X) -> cons(X, n__from(n__s(X)))
   from(X) -> n__from(X)
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(X1, X2) -> n__zWquot(X1, X2)


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__from(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEL(s(N), cons(X, XS)) -> SEL(N, activate(XS))

The TRS R consists of the following rules:

   from(X) -> cons(X, n__from(n__s(X)))
   sel(0, cons(X, XS)) -> X
   sel(s(N), cons(X, XS)) -> sel(N, activate(XS))
   minus(X, 0) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   quot(0, s(Y)) -> 0
   quot(s(X), s(Y)) -> s(quot(minus(X, Y), s(Y)))
   zWquot(XS, nil) -> nil
   zWquot(nil, XS) -> nil
   zWquot(cons(X, XS), cons(Y, YS)) -> cons(quot(X, Y), n__zWquot(activate(XS), activate(YS)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   zWquot(X1, X2) -> n__zWquot(X1, X2)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__zWquot(X1, X2)) -> zWquot(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SEL(s(N), cons(X, XS)) -> SEL(N, activate(XS))
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES
