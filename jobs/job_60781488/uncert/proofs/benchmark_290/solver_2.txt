NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/crpli.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) MNOCProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) NonLoopProof [COMPLETE, 256 ms]
        (32) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The TRS R 2 is 
   f(tt, x) -> f(eq(x, half(double(x))), s(x))

The signature Sigma is {f_2}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(tt, x) -> F(eq(x, half(double(x))), s(x))
   F(tt, x) -> EQ(x, half(double(x)))
   F(tt, x) -> HALF(double(x))
   F(tt, x) -> DOUBLE(x)
   EQ(s(x), s(y)) -> EQ(x, y)
   DOUBLE(s(x)) -> DOUBLE(x)
   HALF(s(s(x))) -> HALF(x)

The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(x))) -> HALF(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOUBLE(s(x)) -> DOUBLE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(tt, x) -> F(eq(x, half(double(x))), s(x))

The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

The set Q consists of the following terms:

   f(tt, x0)
   eq(s(x0), s(x1))
   eq(0, 0)
   double(s(x0))
   double(0)
   half(s(s(x0)))
   half(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(tt, x) -> F(eq(x, half(double(x))), s(x))

The TRS R consists of the following rules:

   f(tt, x) -> f(eq(x, half(double(x))), s(x))
   eq(s(x), s(y)) -> eq(x, y)
   eq(0, 0) -> tt
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [ ] on the rule
F(tt, s(zr0))[zr0 / s(zr0)]^n[zr0 / 0] -> F(tt, s(s(zr0)))[zr0 / s(zr0)]^n[zr0 / 0]
This rule is correct for the QDP as the following derivation shows:

F(tt, s(zr0))[zr0 / s(zr0)]^n[zr0 / 0] -> F(tt, s(s(zr0)))[zr0 / s(zr0)]^n[zr0 / 0]
    by Equivalence by Domain Renaming of the lhs with [zl0 / zr0]
    intermediate steps: Equiv DR (rhs) - Equiv DR (lhs)
    F(tt, s(zl1))[zl1 / s(zl1)]^n[zl1 / 0] -> F(tt, s(s(zr1)))[zr1 / s(zr1)]^n[zr1 / 0]
        by Rewrite t with the rewrite sequence <Pos,Rule>: [([0,1],half(0) -> 0), ([0],eq(0, 0) -> tt)]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs)
        F(tt, s(zl1))[zr1 / s(zr1), zl1 / s(zl1)]^n[zr1 / 0, zl1 / 0] -> F(eq(0, half(0)), s(s(zr1)))[zr1 / s(zr1), zl1 / s(zl1)]^n[zr1 / 0, zl1 / 0]
            by Narrowing at position: [0,1,0]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv Smu (rhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            F(tt, s(zl1))[zr2 / s(zr2), zr3 / s(zr3), zl1 / s(zl1)]^n[zr2 / y1, zr3 / half(double(y1)), y0 / half(double(y1)), zl1 / y1, x0 / y1] -> F(eq(y1, y0), s(s(zr2)))[zr2 / s(zr2), zr3 / s(zr3), zl1 / s(zl1)]^n[zr2 / y1, zr3 / half(double(y1)), y0 / half(double(y1)), zl1 / y1, x0 / y1]
                by Narrowing at position: [0]
                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
                F(tt, s(zl1))[zr2 / s(s(zr2)), zr3 / s(zr3), zt1 / s(zt1), zl1 / s(zl1)]^n[zr2 / double(x0), zr3 / x0, y0 / double(x0), zt1 / half(double(x0)), zl1 / x0] -> F(eq(s(zr3), s(zt1)), s(s(zr3)))[zr2 / s(s(zr2)), zr3 / s(zr3), zt1 / s(zt1), zl1 / s(zl1)]^n[zr2 / double(x0), zr3 / x0, y0 / double(x0), zt1 / half(double(x0)), zl1 / x0]
                    by Narrowing at position: [0,1]
                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (lhs)
                    F(tt, s(zs1))[zt1 / s(s(zt1)), zs1 / s(zs1)]^n[zt1 / double(y0), zs1 / y0] -> F(eq(s(zs1), half(s(s(zt1)))), s(s(zs1)))[zt1 / s(s(zt1)), zs1 / s(zs1)]^n[zt1 / double(y0), zs1 / y0]
                        by Narrowing at position: [0,1,0]
                        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
                        F(tt, x)[ ]^n[ ] -> F(eq(x, half(double(x))), s(x))[ ]^n[ ]
                            by Rule from TRS P

                        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs)
                        double(s(x))[x / s(x)]^n[ ] -> s(s(z))[x / s(x), z / s(s(z))]^n[z / double(x)]
                            by PatternCreation II with pi: [0,0], sigma: [x / s(x)]
                            double(s(x))[ ]^n[ ] -> s(s(double(x)))[ ]^n[ ]
                                by Rule from TRS R

                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs)
                    half(s(s(x)))[x / s(s(x))]^n[ ] -> s(z)[x / s(s(x)), z / s(z)]^n[z / half(x)]
                        by PatternCreation II with pi: [0], sigma: [x / s(s(x))]
                        half(s(s(x)))[ ]^n[ ] -> s(half(x))[ ]^n[ ]
                            by Rule from TRS R

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (lhs) - Equiv DR (lhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
                eq(s(x), s(y))[x / s(x), y / s(y)]^n[ ] -> eq(x, y)[ ]^n[ ]
                    by PatternCreation I with delta: [ ], theta: [ ], sigma: [x / s(x), y / s(y)]
                    eq(s(x), s(y))[ ]^n[ ] -> eq(x, y)[ ]^n[ ]
                        by Rule from TRS R

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            double(0)[ ]^n[ ] -> 0[ ]^n[ ]
                by Rule from TRS R
----------------------------------------

(32)
NO
