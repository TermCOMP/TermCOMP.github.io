YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/pGBOo.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 19 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(D, t) -> 1
   app(D, constant) -> 0
   app(D, app(app(+, x), y)) -> app(app(+, app(D, x)), app(D, y))
   app(D, app(app(*, x), y)) -> app(app(+, app(app(*, y), app(D, x))), app(app(*, x), app(D, y)))
   app(D, app(app(-, x), y)) -> app(app(-, app(D, x)), app(D, y))
   app(D, app(minus, x)) -> app(minus, app(D, x))
   app(D, app(app(div, x), y)) -> app(app(-, app(app(div, app(D, x)), y)), app(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2)))
   app(D, app(ln, x)) -> app(app(div, app(D, x)), x)
   app(D, app(app(pow, x), y)) -> app(app(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))), app(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(D, t) -> 1
   app(D, constant) -> 0
   app(D, app(app(+, x), y)) -> app(app(+, app(D, x)), app(D, y))
   app(D, app(app(*, x), y)) -> app(app(+, app(app(*, y), app(D, x))), app(app(*, x), app(D, y)))
   app(D, app(app(-, x), y)) -> app(app(-, app(D, x)), app(D, y))
   app(D, app(minus, x)) -> app(minus, app(D, x))
   app(D, app(app(div, x), y)) -> app(app(-, app(app(div, app(D, x)), y)), app(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2)))
   app(D, app(ln, x)) -> app(app(div, app(D, x)), x)
   app(D, app(app(pow, x), y)) -> app(app(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))), app(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(D, t)
   app(D, constant)
   app(D, app(app(+, x0), x1))
   app(D, app(app(*, x0), x1))
   app(D, app(app(-, x0), x1))
   app(D, app(minus, x0))
   app(D, app(app(div, x0), x1))
   app(D, app(ln, x0))
   app(D, app(app(pow, x0), x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(D, app(app(+, x), y)) -> APP(app(+, app(D, x)), app(D, y))
   APP(D, app(app(+, x), y)) -> APP(+, app(D, x))
   APP(D, app(app(+, x), y)) -> APP(D, x)
   APP(D, app(app(+, x), y)) -> APP(D, y)
   APP(D, app(app(*, x), y)) -> APP(app(+, app(app(*, y), app(D, x))), app(app(*, x), app(D, y)))
   APP(D, app(app(*, x), y)) -> APP(+, app(app(*, y), app(D, x)))
   APP(D, app(app(*, x), y)) -> APP(app(*, y), app(D, x))
   APP(D, app(app(*, x), y)) -> APP(*, y)
   APP(D, app(app(*, x), y)) -> APP(D, x)
   APP(D, app(app(*, x), y)) -> APP(app(*, x), app(D, y))
   APP(D, app(app(*, x), y)) -> APP(D, y)
   APP(D, app(app(-, x), y)) -> APP(app(-, app(D, x)), app(D, y))
   APP(D, app(app(-, x), y)) -> APP(-, app(D, x))
   APP(D, app(app(-, x), y)) -> APP(D, x)
   APP(D, app(app(-, x), y)) -> APP(D, y)
   APP(D, app(minus, x)) -> APP(minus, app(D, x))
   APP(D, app(minus, x)) -> APP(D, x)
   APP(D, app(app(div, x), y)) -> APP(app(-, app(app(div, app(D, x)), y)), app(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2)))
   APP(D, app(app(div, x), y)) -> APP(-, app(app(div, app(D, x)), y))
   APP(D, app(app(div, x), y)) -> APP(app(div, app(D, x)), y)
   APP(D, app(app(div, x), y)) -> APP(div, app(D, x))
   APP(D, app(app(div, x), y)) -> APP(D, x)
   APP(D, app(app(div, x), y)) -> APP(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2))
   APP(D, app(app(div, x), y)) -> APP(div, app(app(*, x), app(D, y)))
   APP(D, app(app(div, x), y)) -> APP(app(*, x), app(D, y))
   APP(D, app(app(div, x), y)) -> APP(*, x)
   APP(D, app(app(div, x), y)) -> APP(D, y)
   APP(D, app(app(div, x), y)) -> APP(app(pow, y), 2)
   APP(D, app(app(div, x), y)) -> APP(pow, y)
   APP(D, app(ln, x)) -> APP(app(div, app(D, x)), x)
   APP(D, app(ln, x)) -> APP(div, app(D, x))
   APP(D, app(ln, x)) -> APP(D, x)
   APP(D, app(app(pow, x), y)) -> APP(app(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))), app(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y)))
   APP(D, app(app(pow, x), y)) -> APP(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x)))
   APP(D, app(app(pow, x), y)) -> APP(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))
   APP(D, app(app(pow, x), y)) -> APP(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1))))
   APP(D, app(app(pow, x), y)) -> APP(app(*, y), app(app(pow, x), app(app(-, y), 1)))
   APP(D, app(app(pow, x), y)) -> APP(*, y)
   APP(D, app(app(pow, x), y)) -> APP(app(pow, x), app(app(-, y), 1))
   APP(D, app(app(pow, x), y)) -> APP(app(-, y), 1)
   APP(D, app(app(pow, x), y)) -> APP(-, y)
   APP(D, app(app(pow, x), y)) -> APP(D, x)
   APP(D, app(app(pow, x), y)) -> APP(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y))
   APP(D, app(app(pow, x), y)) -> APP(*, app(app(*, app(app(pow, x), y)), app(ln, x)))
   APP(D, app(app(pow, x), y)) -> APP(app(*, app(app(pow, x), y)), app(ln, x))
   APP(D, app(app(pow, x), y)) -> APP(*, app(app(pow, x), y))
   APP(D, app(app(pow, x), y)) -> APP(ln, x)
   APP(D, app(app(pow, x), y)) -> APP(D, y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(D, t) -> 1
   app(D, constant) -> 0
   app(D, app(app(+, x), y)) -> app(app(+, app(D, x)), app(D, y))
   app(D, app(app(*, x), y)) -> app(app(+, app(app(*, y), app(D, x))), app(app(*, x), app(D, y)))
   app(D, app(app(-, x), y)) -> app(app(-, app(D, x)), app(D, y))
   app(D, app(minus, x)) -> app(minus, app(D, x))
   app(D, app(app(div, x), y)) -> app(app(-, app(app(div, app(D, x)), y)), app(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2)))
   app(D, app(ln, x)) -> app(app(div, app(D, x)), x)
   app(D, app(app(pow, x), y)) -> app(app(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))), app(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(D, t)
   app(D, constant)
   app(D, app(app(+, x0), x1))
   app(D, app(app(*, x0), x1))
   app(D, app(app(-, x0), x1))
   app(D, app(minus, x0))
   app(D, app(app(div, x0), x1))
   app(D, app(ln, x0))
   app(D, app(app(pow, x0), x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 46 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(D, app(app(+, x), y)) -> APP(D, y)
   APP(D, app(app(+, x), y)) -> APP(D, x)
   APP(D, app(app(*, x), y)) -> APP(D, x)
   APP(D, app(app(*, x), y)) -> APP(D, y)
   APP(D, app(app(-, x), y)) -> APP(D, x)
   APP(D, app(app(-, x), y)) -> APP(D, y)
   APP(D, app(minus, x)) -> APP(D, x)
   APP(D, app(app(div, x), y)) -> APP(D, x)
   APP(D, app(app(div, x), y)) -> APP(D, y)
   APP(D, app(ln, x)) -> APP(D, x)
   APP(D, app(app(pow, x), y)) -> APP(D, x)
   APP(D, app(app(pow, x), y)) -> APP(D, y)

The TRS R consists of the following rules:

   app(D, t) -> 1
   app(D, constant) -> 0
   app(D, app(app(+, x), y)) -> app(app(+, app(D, x)), app(D, y))
   app(D, app(app(*, x), y)) -> app(app(+, app(app(*, y), app(D, x))), app(app(*, x), app(D, y)))
   app(D, app(app(-, x), y)) -> app(app(-, app(D, x)), app(D, y))
   app(D, app(minus, x)) -> app(minus, app(D, x))
   app(D, app(app(div, x), y)) -> app(app(-, app(app(div, app(D, x)), y)), app(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2)))
   app(D, app(ln, x)) -> app(app(div, app(D, x)), x)
   app(D, app(app(pow, x), y)) -> app(app(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))), app(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(D, t)
   app(D, constant)
   app(D, app(app(+, x0), x1))
   app(D, app(app(*, x0), x1))
   app(D, app(app(-, x0), x1))
   app(D, app(minus, x0))
   app(D, app(app(div, x0), x1))
   app(D, app(ln, x0))
   app(D, app(app(pow, x0), x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(D, app(app(+, x), y)) -> APP(D, y)
   APP(D, app(app(+, x), y)) -> APP(D, x)
   APP(D, app(app(*, x), y)) -> APP(D, x)
   APP(D, app(app(*, x), y)) -> APP(D, y)
   APP(D, app(app(-, x), y)) -> APP(D, x)
   APP(D, app(app(-, x), y)) -> APP(D, y)
   APP(D, app(minus, x)) -> APP(D, x)
   APP(D, app(app(div, x), y)) -> APP(D, x)
   APP(D, app(app(div, x), y)) -> APP(D, y)
   APP(D, app(ln, x)) -> APP(D, x)
   APP(D, app(app(pow, x), y)) -> APP(D, x)
   APP(D, app(app(pow, x), y)) -> APP(D, y)

R is empty.
The set Q consists of the following terms:

   app(D, t)
   app(D, constant)
   app(D, app(app(+, x0), x1))
   app(D, app(app(*, x0), x1))
   app(D, app(app(-, x0), x1))
   app(D, app(minus, x0))
   app(D, app(app(div, x0), x1))
   app(D, app(ln, x0))
   app(D, app(app(pow, x0), x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D1(+(x, y)) -> D1(y)
   D1(+(x, y)) -> D1(x)
   D1(*(x, y)) -> D1(x)
   D1(*(x, y)) -> D1(y)
   D1(-(x, y)) -> D1(x)
   D1(-(x, y)) -> D1(y)
   D1(minus(x)) -> D1(x)
   D1(div(x, y)) -> D1(x)
   D1(div(x, y)) -> D1(y)
   D1(ln(x)) -> D1(x)
   D1(pow(x, y)) -> D1(x)
   D1(pow(x, y)) -> D1(y)

R is empty.
The set Q consists of the following terms:

   D(t)
   D(constant)
   D(+(x0, x1))
   D(*(x0, x1))
   D(-(x0, x1))
   D(minus(x0))
   D(div(x0, x1))
   D(ln(x0))
   D(pow(x0, x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   D(t)
   D(constant)
   D(+(x0, x1))
   D(*(x0, x1))
   D(-(x0, x1))
   D(minus(x0))
   D(div(x0, x1))
   D(ln(x0))
   D(pow(x0, x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D1(+(x, y)) -> D1(y)
   D1(+(x, y)) -> D1(x)
   D1(*(x, y)) -> D1(x)
   D1(*(x, y)) -> D1(y)
   D1(-(x, y)) -> D1(x)
   D1(-(x, y)) -> D1(y)
   D1(minus(x)) -> D1(x)
   D1(div(x, y)) -> D1(x)
   D1(div(x, y)) -> D1(y)
   D1(ln(x)) -> D1(x)
   D1(pow(x, y)) -> D1(x)
   D1(pow(x, y)) -> D1(y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*D1(+(x, y)) -> D1(y)
The graph contains the following edges 1 > 1


*D1(+(x, y)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(*(x, y)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(*(x, y)) -> D1(y)
The graph contains the following edges 1 > 1


*D1(-(x, y)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(-(x, y)) -> D1(y)
The graph contains the following edges 1 > 1


*D1(minus(x)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(div(x, y)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(div(x, y)) -> D1(y)
The graph contains the following edges 1 > 1


*D1(ln(x)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(pow(x, y)) -> D1(x)
The graph contains the following edges 1 > 1


*D1(pow(x, y)) -> D1(y)
The graph contains the following edges 1 > 1


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(D, t) -> 1
   app(D, constant) -> 0
   app(D, app(app(+, x), y)) -> app(app(+, app(D, x)), app(D, y))
   app(D, app(app(*, x), y)) -> app(app(+, app(app(*, y), app(D, x))), app(app(*, x), app(D, y)))
   app(D, app(app(-, x), y)) -> app(app(-, app(D, x)), app(D, y))
   app(D, app(minus, x)) -> app(minus, app(D, x))
   app(D, app(app(div, x), y)) -> app(app(-, app(app(div, app(D, x)), y)), app(app(div, app(app(*, x), app(D, y))), app(app(pow, y), 2)))
   app(D, app(ln, x)) -> app(app(div, app(D, x)), x)
   app(D, app(app(pow, x), y)) -> app(app(+, app(app(*, app(app(*, y), app(app(pow, x), app(app(-, y), 1)))), app(D, x))), app(app(*, app(app(*, app(app(pow, x), y)), app(ln, x))), app(D, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(D, t)
   app(D, constant)
   app(D, app(app(+, x0), x1))
   app(D, app(app(*, x0), x1))
   app(D, app(app(-, x0), x1))
   app(D, app(minus, x0))
   app(D, app(app(div, x0), x1))
   app(D, app(ln, x0))
   app(D, app(app(pow, x0), x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

R is empty.
The set Q consists of the following terms:

   app(D, t)
   app(D, constant)
   app(D, app(app(+, x0), x1))
   app(D, app(app(*, x0), x1))
   app(D, app(app(-, x0), x1))
   app(D, app(minus, x0))
   app(D, app(app(div, x0), x1))
   app(D, app(ln, x0))
   app(D, app(app(pow, x0), x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(20)
YES
