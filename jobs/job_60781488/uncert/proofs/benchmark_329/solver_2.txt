YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Icf4G.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 33 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 1 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 0 ms]
(10) QTRS
(11) RisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(A) -> A
   g(B) -> A
   g(B) -> B
   g(C) -> A
   g(C) -> B
   g(C) -> C
   foldf(x, nil) -> x
   foldf(x, cons(y, z)) -> f(foldf(x, z), y)
   f(t, x) -> f'(t, g(x))
   f'(triple(a, b, c), C) -> triple(a, b, cons(C, c))
   f'(triple(a, b, c), B) -> f(triple(a, b, c), A)
   f'(triple(a, b, c), A) -> f''(foldf(triple(cons(A, a), nil, c), b))
   f''(triple(a, b, c)) -> foldf(triple(a, b, nil), c)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(A) = 0
   POL(B) = 0
   POL(C) = 2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(f(x_1, x_2)) = x_1 + x_2
   POL(f'(x_1, x_2)) = x_1 + x_2
   POL(f''(x_1)) = x_1
   POL(foldf(x_1, x_2)) = x_1 + x_2
   POL(g(x_1)) = x_1
   POL(nil) = 0
   POL(triple(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(C) -> A
   g(C) -> B




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(A) -> A
   g(B) -> A
   g(B) -> B
   g(C) -> C
   foldf(x, nil) -> x
   foldf(x, cons(y, z)) -> f(foldf(x, z), y)
   f(t, x) -> f'(t, g(x))
   f'(triple(a, b, c), C) -> triple(a, b, cons(C, c))
   f'(triple(a, b, c), B) -> f(triple(a, b, c), A)
   f'(triple(a, b, c), A) -> f''(foldf(triple(cons(A, a), nil, c), b))
   f''(triple(a, b, c)) -> foldf(triple(a, b, nil), c)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(A) = 0
   POL(B) = 1
   POL(C) = 0
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(f(x_1, x_2)) = x_1 + x_2
   POL(f'(x_1, x_2)) = x_1 + x_2
   POL(f''(x_1)) = x_1
   POL(foldf(x_1, x_2)) = x_1 + x_2
   POL(g(x_1)) = x_1
   POL(nil) = 0
   POL(triple(x_1, x_2, x_3)) = x_1 + x_2 + x_3
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(B) -> A
   f'(triple(a, b, c), B) -> f(triple(a, b, c), A)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(A) -> A
   g(B) -> B
   g(C) -> C
   foldf(x, nil) -> x
   foldf(x, cons(y, z)) -> f(foldf(x, z), y)
   f(t, x) -> f'(t, g(x))
   f'(triple(a, b, c), C) -> triple(a, b, cons(C, c))
   f'(triple(a, b, c), A) -> f''(foldf(triple(cons(A, a), nil, c), b))
   f''(triple(a, b, c)) -> foldf(triple(a, b, nil), c)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(A) = 0
   POL(B) = 1
   POL(C) = 0
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(f(x_1, x_2)) = x_1 + 2*x_2
   POL(f'(x_1, x_2)) = x_1 + x_2
   POL(f''(x_1)) = x_1
   POL(foldf(x_1, x_2)) = x_1 + x_2
   POL(g(x_1)) = 2*x_1
   POL(nil) = 0
   POL(triple(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(B) -> B




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(A) -> A
   g(C) -> C
   foldf(x, nil) -> x
   foldf(x, cons(y, z)) -> f(foldf(x, z), y)
   f(t, x) -> f'(t, g(x))
   f'(triple(a, b, c), C) -> triple(a, b, cons(C, c))
   f'(triple(a, b, c), A) -> f''(foldf(triple(cons(A, a), nil, c), b))
   f''(triple(a, b, c)) -> foldf(triple(a, b, nil), c)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(A) = 0
   POL(C) = 0
   POL(cons(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(f(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(f'(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(f''(x_1)) = x_1
   POL(foldf(x_1, x_2)) = x_1 + 2*x_2
   POL(g(x_1)) = x_1
   POL(nil) = 0
   POL(triple(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f'(triple(a, b, c), A) -> f''(foldf(triple(cons(A, a), nil, c), b))




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(A) -> A
   g(C) -> C
   foldf(x, nil) -> x
   foldf(x, cons(y, z)) -> f(foldf(x, z), y)
   f(t, x) -> f'(t, g(x))
   f'(triple(a, b, c), C) -> triple(a, b, cons(C, c))
   f''(triple(a, b, c)) -> foldf(triple(a, b, nil), c)

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:g_1 > A > f''_1 > foldf_2 > f_2 > f'_2 > triple_3 > cons_2 > C > nil

and weight map:

   A=1
   C=1
   nil=1
   g_1=0
   f''_1=1
   foldf_2=0
   cons_2=0
   f_2=0
   f'_2=0
   triple_3=0

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(A) -> A
   g(C) -> C
   foldf(x, nil) -> x
   foldf(x, cons(y, z)) -> f(foldf(x, z), y)
   f(t, x) -> f'(t, g(x))
   f'(triple(a, b, c), C) -> triple(a, b, cons(C, c))
   f''(triple(a, b, c)) -> foldf(triple(a, b, nil), c)




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(11) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(12)
YES
