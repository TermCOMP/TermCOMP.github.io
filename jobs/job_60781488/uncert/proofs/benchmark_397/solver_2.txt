NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/CpaRq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) MNOCProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) NonLoopProof [COMPLETE, 256 ms]
        (25) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

The TRS R 2 is 
   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))

The signature Sigma is {add_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(true, x, xs) -> ADD(and(isNat(x), isList(xs)), x, Cons(x, xs))
   ADD(true, x, xs) -> AND(isNat(x), isList(xs))
   ADD(true, x, xs) -> ISNAT(x)
   ADD(true, x, xs) -> ISLIST(xs)
   ISLIST(Cons(x, xs)) -> ISLIST(xs)
   ISNAT(s(x)) -> ISNAT(x)

The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(s(x)) -> ISNAT(x)

The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(s(x)) -> ISNAT(x)

R is empty.
The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(s(x)) -> ISNAT(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(s(x)) -> ISNAT(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLIST(Cons(x, xs)) -> ISLIST(xs)

The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLIST(Cons(x, xs)) -> ISLIST(xs)

R is empty.
The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLIST(Cons(x, xs)) -> ISLIST(xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLIST(Cons(x, xs)) -> ISLIST(xs)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(true, x, xs) -> ADD(and(isNat(x), isList(xs)), x, Cons(x, xs))

The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

The set Q consists of the following terms:

   add(true, x0, x1)
   isList(Cons(x0, x1))
   isList(nil)
   isNat(s(x0))
   isNat(0)
   and(true, true)
   and(false, x0)
   and(x0, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(true, x, xs) -> ADD(and(isNat(x), isList(xs)), x, Cons(x, xs))

The TRS R consists of the following rules:

   add(true, x, xs) -> add(and(isNat(x), isList(xs)), x, Cons(x, xs))
   isList(Cons(x, xs)) -> isList(xs)
   isList(nil) -> true
   isNat(s(x)) -> isNat(x)
   isNat(0) -> true
   and(true, true) -> true
   and(false, x) -> false
   and(x, false) -> false

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [ ] on the rule
ADD(true, 0, Cons(0, zr1))[zr1 / Cons(0, zr1)]^n[zr1 / nil] -> ADD(true, 0, Cons(0, Cons(0, zr1)))[zr1 / Cons(0, zr1)]^n[zr1 / nil]
This rule is correct for the QDP as the following derivation shows:

ADD(true, 0, Cons(0, zr1))[zr1 / Cons(0, zr1)]^n[zr1 / nil] -> ADD(true, 0, Cons(0, Cons(0, zr1)))[zr1 / Cons(0, zr1)]^n[zr1 / nil]
    by Equivalence by Domain Renaming of the lhs with [zl0 / zr1]
    intermediate steps: Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
    ADD(true, 0, Cons(x0, zl1))[zr1 / Cons(x0, zr1), zl1 / Cons(x0, zl1)]^n[zr1 / nil, zl1 / nil] -> ADD(true, 0, Cons(0, Cons(x0, zr1)))[zr1 / Cons(x0, zr1), zl1 / Cons(x0, zl1)]^n[zr1 / nil, zl1 / nil]
        by Narrowing at position: [0]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
        ADD(true, 0, Cons(x1, zl1))[zr1 / Cons(x1, zr1), zl1 / Cons(x1, zl1)]^n[zr1 / nil, zl1 / nil] -> ADD(and(true, true), 0, Cons(0, Cons(x1, zr1)))[zr1 / Cons(x1, zr1), zl1 / Cons(x1, zl1)]^n[zr1 / nil, zl1 / nil]
            by Narrowing at position: [0,0]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            ADD(true, x2, Cons(x0, zl1))[zr1 / Cons(x0, zr1), zl1 / Cons(x0, zl1)]^n[zr1 / nil, zl1 / nil] -> ADD(and(isNat(x2), true), x2, Cons(x2, Cons(x0, zr1)))[zr1 / Cons(x0, zr1), zl1 / Cons(x0, zl1)]^n[zr1 / nil, zl1 / nil]
                by Narrowing at position: [0,1]
                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
                ADD(true, x1, Cons(y0, zs1))[zs1 / Cons(y0, zs1)]^n[zs1 / y1] -> ADD(and(isNat(x1), isList(y1)), x1, Cons(x1, Cons(y0, zs1)))[zs1 / Cons(y0, zs1)]^n[zs1 / y1]
                    by Narrowing at position: [0,1]
                    intermediate steps: Instantiate mu - Instantiate Sigma - Instantiation - Instantiation
                    ADD(true, x, xs)[ ]^n[ ] -> ADD(and(isNat(x), isList(xs)), x, Cons(x, xs))[ ]^n[ ]
                        by Rule from TRS P

                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (rhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
                    isList(Cons(x, xs))[xs / Cons(x, xs)]^n[ ] -> isList(xs)[ ]^n[ ]
                        by PatternCreation I with delta: [ ], theta: [ ], sigma: [xs / Cons(x, xs)]
                        isList(Cons(x, xs))[ ]^n[ ] -> isList(xs)[ ]^n[ ]
                            by Rule from TRS R

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
                isList(nil)[ ]^n[ ] -> true[ ]^n[ ]
                    by Rule from TRS R

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            isNat(0)[ ]^n[ ] -> true[ ]^n[ ]
                by Rule from TRS R

        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
        and(true, true)[ ]^n[ ] -> true[ ]^n[ ]
            by Rule from TRS R
----------------------------------------

(25)
NO
