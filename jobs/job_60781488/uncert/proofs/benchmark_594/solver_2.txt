YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zS5PI.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPOrderProof [EQUIVALENT, 9 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x
   f(s(x), y) -> f(p(-(s(x), y)), p(-(y, s(x))))
   f(x, s(y)) -> f(p(-(x, s(y))), p(-(s(y), x)))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x

The TRS R 2 is 
   f(s(x), y) -> f(p(-(s(x), y)), p(-(y, s(x))))
   f(x, s(y)) -> f(p(-(x, s(y))), p(-(s(y), x)))

The signature Sigma is {f_2}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x
   f(s(x), y) -> f(p(-(s(x), y)), p(-(y, s(x))))
   f(x, s(y)) -> f(p(-(x, s(y))), p(-(s(y), x)))

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)
   F(s(x), y) -> F(p(-(s(x), y)), p(-(y, s(x))))
   F(s(x), y) -> P(-(s(x), y))
   F(s(x), y) -> -^1(s(x), y)
   F(s(x), y) -> P(-(y, s(x)))
   F(s(x), y) -> -^1(y, s(x))
   F(x, s(y)) -> F(p(-(x, s(y))), p(-(s(y), x)))
   F(x, s(y)) -> P(-(x, s(y)))
   F(x, s(y)) -> -^1(x, s(y))
   F(x, s(y)) -> P(-(s(y), x))
   F(x, s(y)) -> -^1(s(y), x)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x
   f(s(x), y) -> f(p(-(s(x), y)), p(-(y, s(x))))
   f(x, s(y)) -> f(p(-(x, s(y))), p(-(s(y), x)))

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 8 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x
   f(s(x), y) -> f(p(-(s(x), y)), p(-(y, s(x))))
   f(x, s(y)) -> f(p(-(x, s(y))), p(-(s(y), x)))

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)

R is empty.
The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*-^1(s(x), s(y)) -> -^1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, s(y)) -> F(p(-(x, s(y))), p(-(s(y), x)))
   F(s(x), y) -> F(p(-(s(x), y)), p(-(y, s(x))))

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x
   f(s(x), y) -> f(p(-(s(x), y)), p(-(y, s(x))))
   f(x, s(y)) -> f(p(-(x, s(y))), p(-(s(y), x)))

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, s(y)) -> F(p(-(x, s(y))), p(-(s(y), x)))
   F(s(x), y) -> F(p(-(s(x), y)), p(-(y, s(x))))

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))
   f(s(x0), x1)
   f(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(s(x0), x1)
   f(x0, s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, s(y)) -> F(p(-(x, s(y))), p(-(s(y), x)))
   F(s(x), y) -> F(p(-(s(x), y)), p(-(y, s(x))))

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(x, s(y)) -> F(p(-(x, s(y))), p(-(s(y), x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( F_2(x_1, x_2) ) = 2x_2
POL( p_1(x_1) ) = max{0, x_1 - 1}
POL( -_2(x_1, x_2) ) = x_1
POL( s_1(x_1) ) = x_1 + 1
POL( 0 ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x
   -(x, 0) -> x


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(x), y) -> F(p(-(s(x), y)), p(-(y, s(x))))

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(s(x), y) -> F(p(-(s(x), y)), p(-(y, s(x))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( F_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( p_1(x_1) ) = max{0, x_1 - 2}
POL( -_2(x_1, x_2) ) = x_1
POL( 0 ) = 2
POL( s_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   p(s(x)) -> x

The set Q consists of the following terms:

   -(x0, 0)
   -(s(x0), s(x1))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
