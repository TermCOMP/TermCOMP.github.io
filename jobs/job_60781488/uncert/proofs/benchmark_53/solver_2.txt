NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/gY40w.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPOrderProof [EQUIVALENT, 0 ms]
(8) QDP
(9) MNOCProof [EQUIVALENT, 0 ms]
(10) QDP
(11) NonTerminationLoopProof [COMPLETE, 0 ms]
(12) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, false), x), y) -> y
   app(app(app(until, p), f), x) -> app(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, false), x), y) -> y
   app(app(app(until, p), f), x) -> app(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(app(until, x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(until, p), f), x) -> APP(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))
   APP(app(app(until, p), f), x) -> APP(app(if, app(p, x)), x)
   APP(app(app(until, p), f), x) -> APP(if, app(p, x))
   APP(app(app(until, p), f), x) -> APP(p, x)
   APP(app(app(until, p), f), x) -> APP(app(app(until, p), f), app(f, x))
   APP(app(app(until, p), f), x) -> APP(f, x)

The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, false), x), y) -> y
   app(app(app(until, p), f), x) -> app(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(app(until, x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(until, p), f), x) -> APP(app(app(until, p), f), app(f, x))
   APP(app(app(until, p), f), x) -> APP(p, x)
   APP(app(app(until, p), f), x) -> APP(f, x)

The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, false), x), y) -> y
   app(app(app(until, p), f), x) -> app(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(app(until, x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   APP(app(app(until, p), f), x) -> APP(p, x)
   APP(app(app(until, p), f), x) -> APP(f, x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
APP(x1, x2)  =  x1

app(x1, x2)  =  app(x1, x2)

until  =  until


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   until=1
   app_2=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(until, p), f), x) -> APP(app(app(until, p), f), app(f, x))

The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, false), x), y) -> y
   app(app(app(until, p), f), x) -> app(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(app(until, x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(until, p), f), x) -> APP(app(app(until, p), f), app(f, x))

The TRS R consists of the following rules:

   app(app(app(if, true), x), y) -> x
   app(app(app(if, false), x), y) -> y
   app(app(app(until, p), f), x) -> app(app(app(if, app(p, x)), x), app(app(app(until, p), f), app(f, x)))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = APP(app(app(until, p), f), x) evaluates to  t =APP(app(app(until, p), f), app(f, x))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / app(f, x)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from APP(app(app(until, p), f), x) to APP(app(app(until, p), f), app(f, x)).




----------------------------------------

(12)
NO
