YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/S5ptK.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 21 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) ATransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPOrderProof [EQUIVALENT, 17 ms]
        (33) QDP
        (34) DependencyGraphProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) QDP
        (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (44) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(eq, app(s, x)), app(s, y)) -> APP(app(eq, x), y)
   APP(app(eq, app(s, x)), app(s, y)) -> APP(eq, x)
   APP(app(union, app(app(app(edge, x), y), i)), h) -> APP(app(app(edge, x), y), app(app(union, i), h))
   APP(app(union, app(app(app(edge, x), y), i)), h) -> APP(app(union, i), h)
   APP(app(union, app(app(app(edge, x), y), i)), h) -> APP(union, i)
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i))
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(if_reach_1, app(app(eq, x), u)), x), y)
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(if_reach_1, app(app(eq, x), u)), x)
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(if_reach_1, app(app(eq, x), u))
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(eq, x), u)
   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(eq, x)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i))
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(if_reach_2, app(app(eq, y), v)), x), y)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(if_reach_2, app(app(eq, y), v)), x)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(if_reach_2, app(app(eq, y), v))
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(eq, y), v)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(eq, y)
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(reach, x), y), i)
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(reach, x), y)
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(reach, x)
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(edge, u), v), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(or, app(app(app(app(reach, x), y), i), h))
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, x), y), i), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(reach, x), y), i)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(reach, x), y)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(reach, x)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, v), y), app(app(union, i), h)), empty)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(reach, v), y), app(app(union, i), h))
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(reach, v), y)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(reach, v)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(union, i), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(union, i)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 38 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(union, app(app(app(edge, x), y), i)), h) -> APP(app(union, i), h)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(union, app(app(app(edge, x), y), i)), h) -> APP(app(union, i), h)

R is empty.
The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   union1(edge(x, y, i), h) -> union1(i, h)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   union1(edge(x, y, i), h) -> union1(i, h)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*union1(edge(x, y, i), h) -> union1(i, h)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(eq, app(s, x)), app(s, y)) -> APP(app(eq, x), y)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(eq, app(s, x)), app(s, y)) -> APP(app(eq, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   eq1(s(x), s(y)) -> eq1(x, y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   eq1(s(x), s(y)) -> eq1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*eq1(s(x), s(y)) -> eq1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, x), y), i), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, v), y), app(app(union, i), h)), empty)
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   APP(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, x), y), i), h)
   APP(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, v), y), app(app(union, i), h)), empty)
   APP(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> APP(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))

The TRS R consists of the following rules:

   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_11(true, x, y, edge(u, v, i), h) -> if_reach_21(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_21(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, h)
   if_reach_21(false, x, y, edge(u, v, i), h) -> reach1(v, y, union(i, h), empty)
   if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   or(true, x0)
   or(false, x0)
   union(empty, x0)
   union(edge(x0, x1, x2), x3)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   or(true, x0)
   or(false, x0)
   reach(x0, x1, empty, x2)
   reach(x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_1(false, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(true, x0, x1, edge(x2, x3, x4), x5)
   if_reach_2(false, x0, x1, edge(x2, x3, x4), x5)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_11(true, x, y, edge(u, v, i), h) -> if_reach_21(eq(y, v), x, y, edge(u, v, i), h)
   if_reach_21(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, h)
   if_reach_21(false, x, y, edge(u, v, i), h) -> reach1(v, y, union(i, h), empty)
   if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   if_reach_11(true, x, y, edge(u, v, i), h) -> if_reach_21(eq(y, v), x, y, edge(u, v, i), h)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( if_reach_11_5(x_1, ..., x_5) ) = max{0, 2x_3 + x_4 + x_5 - 1}
POL( if_reach_21_5(x_1, ..., x_5) ) = max{0, 2x_3 + x_4 + x_5 - 2}
POL( eq_2(x_1, x_2) ) = 0
POL( 0 ) = 0
POL( true ) = 2
POL( s_1(x_1) ) = 2x_1
POL( false ) = 0
POL( reach1_4(x_1, ..., x_4) ) = max{0, 2x_2 + x_3 + x_4 - 1}
POL( union_2(x_1, x_2) ) = x_1 + x_2
POL( empty ) = 0
POL( edge_3(x_1, ..., x_3) ) = x_3 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)
   if_reach_21(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, h)
   if_reach_21(false, x, y, edge(u, v, i), h) -> reach1(v, y, union(i, h), empty)
   if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))
   reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)

The TRS R consists of the following rules:

   union(empty, h) -> h
   union(edge(x, y, i), h) -> edge(x, y, union(i, h))
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))
   reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   union(empty, x0)
   union(edge(x0, x1, x2), x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   union(empty, x0)
   union(edge(x0, x1, x2), x3)


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))
   reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*reach1(x, y, edge(u, v, i), h) -> if_reach_11(eq(x, u), x, y, edge(u, v, i), h)
The graph contains the following edges 1 >= 2, 2 >= 3, 3 >= 4, 4 >= 5


*if_reach_11(false, x, y, edge(u, v, i), h) -> reach1(x, y, i, edge(u, v, h))
The graph contains the following edges 2 >= 1, 3 >= 2, 4 > 3


----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(eq, 0), 0) -> true
   app(app(eq, 0), app(s, x)) -> false
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, app(s, x)), app(s, y)) -> app(app(eq, x), y)
   app(app(or, true), y) -> true
   app(app(or, false), y) -> y
   app(app(union, empty), h) -> h
   app(app(union, app(app(app(edge, x), y), i)), h) -> app(app(app(edge, x), y), app(app(union, i), h))
   app(app(app(app(reach, x), y), empty), h) -> false
   app(app(app(app(reach, x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_1, app(app(eq, x), u)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, true), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(app(if_reach_2, app(app(eq, y), v)), x), y), app(app(app(edge, u), v), i)), h)
   app(app(app(app(app(if_reach_1, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(app(app(reach, x), y), i), app(app(app(edge, u), v), h))
   app(app(app(app(app(if_reach_2, true), x), y), app(app(app(edge, u), v), i)), h) -> true
   app(app(app(app(app(if_reach_2, false), x), y), app(app(app(edge, u), v), i)), h) -> app(app(or, app(app(app(app(reach, x), y), i), h)), app(app(app(app(reach, v), y), app(app(union, i), h)), empty))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(app(eq, 0), 0)
   app(app(eq, 0), app(s, x0))
   app(app(eq, app(s, x0)), 0)
   app(app(eq, app(s, x0)), app(s, x1))
   app(app(or, true), x0)
   app(app(or, false), x0)
   app(app(union, empty), x0)
   app(app(union, app(app(app(edge, x0), x1), x2)), x3)
   app(app(app(app(reach, x0), x1), empty), x2)
   app(app(app(app(reach, x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_1, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, true), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(app(app(app(if_reach_2, false), x0), x1), app(app(app(edge, x2), x3), x4)), x5)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(44)
YES
