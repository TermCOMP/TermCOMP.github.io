YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GwNp4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPOrderProof [EQUIVALENT, 3 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 10 ms]
        (36) QDP
        (37) PisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVEN(s(s(x))) -> EVEN(x)
   HALF(s(s(x))) -> HALF(x)
   PLUS(s(x), y) -> PLUS(x, y)
   TIMES(s(x), y) -> IF_TIMES(even(s(x)), s(x), y)
   TIMES(s(x), y) -> EVEN(s(x))
   IF_TIMES(true, s(x), y) -> PLUS(times(half(s(x)), y), times(half(s(x)), y))
   IF_TIMES(true, s(x), y) -> TIMES(half(s(x)), y)
   IF_TIMES(true, s(x), y) -> HALF(s(x))
   IF_TIMES(false, s(x), y) -> PLUS(y, times(x, y))
   IF_TIMES(false, s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(x))) -> HALF(x)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVEN(s(s(x))) -> EVEN(x)

The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVEN(s(s(x))) -> EVEN(x)

R is empty.
The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVEN(s(s(x))) -> EVEN(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EVEN(s(s(x))) -> EVEN(x)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> IF_TIMES(even(s(x)), s(x), y)
   IF_TIMES(true, s(x), y) -> TIMES(half(s(x)), y)
   IF_TIMES(false, s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   even(0) -> true
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(0) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> if_times(even(s(x)), s(x), y)
   if_times(true, s(x), y) -> plus(times(half(s(x)), y), times(half(s(x)), y))
   if_times(false, s(x), y) -> plus(y, times(x, y))

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> IF_TIMES(even(s(x)), s(x), y)
   IF_TIMES(true, s(x), y) -> TIMES(half(s(x)), y)
   IF_TIMES(false, s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   half(0) -> 0
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   even(0) -> true

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   if_times(true, s(x0), x1)
   if_times(false, s(x0), x1)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> IF_TIMES(even(s(x)), s(x), y)
   IF_TIMES(true, s(x), y) -> TIMES(half(s(x)), y)
   IF_TIMES(false, s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   half(0) -> 0
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   even(0) -> true

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF_TIMES(false, s(x), y) -> TIMES(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
TIMES(x1, x2)  =  x1

s(x1)  =  s(x1)

IF_TIMES(x1, x2, x3)  =  x2

half(x1)  =  x1

0  =  0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   half(s(s(x))) -> s(half(x))
   half(0) -> 0


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> IF_TIMES(even(s(x)), s(x), y)
   IF_TIMES(true, s(x), y) -> TIMES(half(s(x)), y)

The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   half(0) -> 0
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   even(0) -> true

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TIMES(s(x), y) -> IF_TIMES(even(s(x)), s(x), y)
   IF_TIMES(true, s(x), y) -> TIMES(half(s(x)), y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( IF_TIMES_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_2 + 2x_3 - 1}
POL( even_1(x_1) ) = 1
POL( s_1(x_1) ) = 2x_1 + 2
POL( 0 ) = 0
POL( false ) = 1
POL( TIMES_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( half_1(x_1) ) = max{0, x_1 - 2}
POL( true ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   half(s(s(x))) -> s(half(x))
   half(0) -> 0
   even(0) -> true


----------------------------------------

(36)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   half(s(s(x))) -> s(half(x))
   half(0) -> 0
   even(s(0)) -> false
   even(s(s(x))) -> even(x)
   even(0) -> true

The set Q consists of the following terms:

   even(0)
   even(s(0))
   even(s(s(x0)))
   half(0)
   half(s(s(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(38)
YES
