YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zcyxq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) NonInfProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (37) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The TRS R 2 is 
   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)

The signature Sigma is {cond1_2, cond2_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND1(s(x), y) -> GR(s(x), y)
   COND2(true, x, y) -> COND1(y, y)
   COND2(false, x, y) -> COND1(p(x), y)
   COND2(false, x, y) -> P(x)
   GR(s(x), s(y)) -> GR(x, y)
   NEQ(s(x), s(y)) -> NEQ(x, y)

The TRS R consists of the following rules:

   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

The TRS R consists of the following rules:

   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

R is empty.
The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NEQ(s(x), s(y)) -> NEQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*NEQ(s(x), s(y)) -> NEQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

The TRS R consists of the following rules:

   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

R is empty.
The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GR(s(x), s(y)) -> GR(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(y, y)
   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(false, x, y) -> COND1(p(x), y)

The TRS R consists of the following rules:

   cond1(s(x), y) -> cond2(gr(s(x), y), s(x), y)
   cond2(true, x, y) -> cond1(y, y)
   cond2(false, x, y) -> cond1(p(x), y)
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   neq(0, 0) -> false
   neq(0, s(x)) -> true
   neq(s(x), 0) -> true
   neq(s(x), s(y)) -> neq(x, y)
   p(0) -> 0
   p(s(x)) -> x

The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(y, y)
   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(false, x, y) -> COND1(p(x), y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond1(s(x0), x1)
   cond2(true, x0, x1)
   cond2(false, x0, x1)
   neq(0, 0)
   neq(0, s(x0))
   neq(s(x0), 0)
   neq(s(x0), s(x1))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(y, y)
   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(false, x, y) -> COND1(p(x), y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule COND2(false, x, y) -> COND1(p(x), y) at position [0] we obtained the following new rules [LPAR04]:

   (COND2(false, 0, y1) -> COND1(0, y1),COND2(false, 0, y1) -> COND1(0, y1))
   (COND2(false, s(x0), y1) -> COND1(x0, y1),COND2(false, s(x0), y1) -> COND1(x0, y1))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND2(true, x, y) -> COND1(y, y)
   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(false, 0, y1) -> COND1(0, y1)
   COND2(false, s(x0), y1) -> COND1(x0, y1)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(true, x, y) -> COND1(y, y)
   COND2(false, s(x0), y1) -> COND1(x0, y1)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(true, x, y) -> COND1(y, y)
   COND2(false, s(x0), y1) -> COND1(x0, y1)

The TRS R consists of the following rules:

   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(0)
   p(s(x0))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(true, x, y) -> COND1(y, y)
   COND2(false, s(x0), y1) -> COND1(x0, y1)

The TRS R consists of the following rules:

   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y) the following chains were created:
*We consider the chain COND2(true, x2, x3) -> COND1(x3, x3), COND1(s(x4), x5) -> COND2(gr(s(x4), x5), s(x4), x5) which results in the following constraint:

(1)    (COND1(x3, x3)=COND1(s(x4), x5)  ==>  COND1(s(x4), x5)_>=_COND2(gr(s(x4), x5), s(x4), x5))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (COND1(s(x4), s(x4))_>=_COND2(gr(s(x4), s(x4)), s(x4), s(x4)))




*We consider the chain COND2(false, s(x6), x7) -> COND1(x6, x7), COND1(s(x8), x9) -> COND2(gr(s(x8), x9), s(x8), x9) which results in the following constraint:

(1)    (COND1(x6, x7)=COND1(s(x8), x9)  ==>  COND1(s(x8), x9)_>=_COND2(gr(s(x8), x9), s(x8), x9))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (COND1(s(x8), x7)_>=_COND2(gr(s(x8), x7), s(x8), x7))








For Pair COND2(true, x, y) -> COND1(y, y) the following chains were created:
*We consider the chain COND1(s(x10), x11) -> COND2(gr(s(x10), x11), s(x10), x11), COND2(true, x12, x13) -> COND1(x13, x13) which results in the following constraint:

(1)    (COND2(gr(s(x10), x11), s(x10), x11)=COND2(true, x12, x13)  ==>  COND2(true, x12, x13)_>=_COND1(x13, x13))



We simplified constraint (1) using rules (I), (II), (III), (VII) which results in the following new constraint:

(2)    (s(x10)=x26 & gr(x26, x11)=true  ==>  COND2(true, s(x10), x11)_>=_COND1(x11, x11))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on gr(x26, x11)=true which results in the following new constraints:

(3)    (true=true & s(x10)=s(x27)  ==>  COND2(true, s(x10), 0)_>=_COND1(0, 0))

(4)    (gr(x29, x28)=true & s(x10)=s(x29) & (\/x30:gr(x29, x28)=true & s(x30)=x29  ==>  COND2(true, s(x30), x28)_>=_COND1(x28, x28))  ==>  COND2(true, s(x10), s(x28))_>=_COND1(s(x28), s(x28)))



We simplified constraint (3) using rules (I), (II), (IV) which results in the following new constraint:

(5)    (COND2(true, s(x10), 0)_>=_COND1(0, 0))



We simplified constraint (4) using rules (I), (II), (III), (IV) which results in the following new constraint:

(6)    (gr(x29, x28)=true  ==>  COND2(true, s(x29), s(x28))_>=_COND1(s(x28), s(x28)))



We simplified constraint (6) using rule (V) (with possible (I) afterwards) using induction on gr(x29, x28)=true which results in the following new constraints:

(7)    (true=true  ==>  COND2(true, s(s(x32)), s(0))_>=_COND1(s(0), s(0)))

(8)    (gr(x34, x33)=true & (gr(x34, x33)=true  ==>  COND2(true, s(x34), s(x33))_>=_COND1(s(x33), s(x33)))  ==>  COND2(true, s(s(x34)), s(s(x33)))_>=_COND1(s(s(x33)), s(s(x33))))



We simplified constraint (7) using rules (I), (II) which results in the following new constraint:

(9)    (COND2(true, s(s(x32)), s(0))_>=_COND1(s(0), s(0)))



We simplified constraint (8) using rule (VI) where we applied the induction hypothesis (gr(x34, x33)=true  ==>  COND2(true, s(x34), s(x33))_>=_COND1(s(x33), s(x33))) with sigma = [ ] which results in the following new constraint:

(10)    (COND2(true, s(x34), s(x33))_>=_COND1(s(x33), s(x33))  ==>  COND2(true, s(s(x34)), s(s(x33)))_>=_COND1(s(s(x33)), s(s(x33))))








For Pair COND2(false, s(x0), y1) -> COND1(x0, y1) the following chains were created:
*We consider the chain COND1(s(x18), x19) -> COND2(gr(s(x18), x19), s(x18), x19), COND2(false, s(x20), x21) -> COND1(x20, x21) which results in the following constraint:

(1)    (COND2(gr(s(x18), x19), s(x18), x19)=COND2(false, s(x20), x21)  ==>  COND2(false, s(x20), x21)_>=_COND1(x20, x21))



We simplified constraint (1) using rules (I), (II), (III), (VII) which results in the following new constraint:

(2)    (s(x18)=x36 & gr(x36, x19)=false  ==>  COND2(false, s(x18), x19)_>=_COND1(x18, x19))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on gr(x36, x19)=false which results in the following new constraints:

(3)    (gr(x39, x38)=false & s(x18)=s(x39) & (\/x40:gr(x39, x38)=false & s(x40)=x39  ==>  COND2(false, s(x40), x38)_>=_COND1(x40, x38))  ==>  COND2(false, s(x18), s(x38))_>=_COND1(x18, s(x38)))

(4)    (false=false & s(x18)=0  ==>  COND2(false, s(x18), x41)_>=_COND1(x18, x41))



We simplified constraint (3) using rules (I), (II), (III), (IV) which results in the following new constraint:

(5)    (gr(x39, x38)=false  ==>  COND2(false, s(x39), s(x38))_>=_COND1(x39, s(x38)))



We solved constraint (4) using rules (I), (II).We simplified constraint (5) using rule (V) (with possible (I) afterwards) using induction on gr(x39, x38)=false which results in the following new constraints:

(6)    (gr(x44, x43)=false & (gr(x44, x43)=false  ==>  COND2(false, s(x44), s(x43))_>=_COND1(x44, s(x43)))  ==>  COND2(false, s(s(x44)), s(s(x43)))_>=_COND1(s(x44), s(s(x43))))

(7)    (false=false  ==>  COND2(false, s(0), s(x45))_>=_COND1(0, s(x45)))



We simplified constraint (6) using rule (VI) where we applied the induction hypothesis (gr(x44, x43)=false  ==>  COND2(false, s(x44), s(x43))_>=_COND1(x44, s(x43))) with sigma = [ ] which results in the following new constraint:

(8)    (COND2(false, s(x44), s(x43))_>=_COND1(x44, s(x43))  ==>  COND2(false, s(s(x44)), s(s(x43)))_>=_COND1(s(x44), s(s(x43))))



We simplified constraint (7) using rules (I), (II) which results in the following new constraint:

(9)    (COND2(false, s(0), s(x45))_>=_COND1(0, s(x45)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)

*(COND1(s(x4), s(x4))_>=_COND2(gr(s(x4), s(x4)), s(x4), s(x4)))


*(COND1(s(x8), x7)_>=_COND2(gr(s(x8), x7), s(x8), x7))




*COND2(true, x, y) -> COND1(y, y)

*(COND2(true, s(x10), 0)_>=_COND1(0, 0))


*(COND2(true, s(s(x32)), s(0))_>=_COND1(s(0), s(0)))


*(COND2(true, s(x34), s(x33))_>=_COND1(s(x33), s(x33))  ==>  COND2(true, s(s(x34)), s(s(x33)))_>=_COND1(s(s(x33)), s(s(x33))))




*COND2(false, s(x0), y1) -> COND1(x0, y1)

*(COND2(false, s(x44), s(x43))_>=_COND1(x44, s(x43))  ==>  COND2(false, s(s(x44)), s(s(x43)))_>=_COND1(s(x44), s(s(x43))))


*(COND2(false, s(0), s(x45))_>=_COND1(0, s(x45)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(COND1(x_1, x_2)) = -1 + x_1 - x_2
   POL(COND2(x_1, x_2, x_3)) = -1 - x_1 + x_2 - x_3
   POL(c) = -2
   POL(false) = 1
   POL(gr(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   COND2(true, x, y) -> COND1(y, y)
The following pairs are in P_bound:
   COND2(true, x, y) -> COND1(y, y)
The following rules are usable:
   true -> gr(s(x), 0)
   gr(x, y) -> gr(s(x), s(y))
   false -> gr(0, x)

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
   COND2(false, s(x0), y1) -> COND1(x0, y1)

The TRS R consists of the following rules:

   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   gr(0, x) -> false

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*COND2(false, s(x0), y1) -> COND1(x0, y1)
The graph contains the following edges 2 > 1, 3 >= 2


*COND1(s(x), y) -> COND2(gr(s(x), y), s(x), y)
The graph contains the following edges 1 >= 2, 2 >= 3


----------------------------------------

(37)
YES
