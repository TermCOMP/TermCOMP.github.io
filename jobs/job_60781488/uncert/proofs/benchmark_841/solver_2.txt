NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/BAb0s.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) AAECC Innermost [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MNOCProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) NonTerminationLoopProof [COMPLETE, 0 ms]
        (22) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c -> f(g(c))
   f(g(X)) -> g(X)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c'(x) -> c'(g(f(x)))
   g(f(X)) -> g(X)

Q is empty.

----------------------------------------

(3) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   g(f(X)) -> g(X)

The TRS R 2 is 
   c'(x) -> c'(g(f(x)))

The signature Sigma is {c'_1}
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c'(x) -> c'(g(f(x)))
   g(f(X)) -> g(X)

The set Q consists of the following terms:

   c'(x0)
   g(f(x0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> C'(g(f(x)))
   C'(x) -> G(f(x))
   G(f(X)) -> G(X)

The TRS R consists of the following rules:

   c'(x) -> c'(g(f(x)))
   g(f(X)) -> g(X)

The set Q consists of the following terms:

   c'(x0)
   g(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(f(X)) -> G(X)

The TRS R consists of the following rules:

   c'(x) -> c'(g(f(x)))
   g(f(X)) -> g(X)

The set Q consists of the following terms:

   c'(x0)
   g(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(f(X)) -> G(X)

R is empty.
The set Q consists of the following terms:

   c'(x0)
   g(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   c'(x0)
   g(f(x0))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(f(X)) -> G(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> C'(g(f(x)))

The TRS R consists of the following rules:

   c'(x) -> c'(g(f(x)))
   g(f(X)) -> g(X)

The set Q consists of the following terms:

   c'(x0)
   g(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> C'(g(f(x)))

The TRS R consists of the following rules:

   g(f(X)) -> g(X)

The set Q consists of the following terms:

   c'(x0)
   g(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   c'(x0)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> C'(g(f(x)))

The TRS R consists of the following rules:

   g(f(X)) -> g(X)

The set Q consists of the following terms:

   g(f(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> C'(g(f(x)))

The TRS R consists of the following rules:

   g(f(X)) -> g(X)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = C'(x) evaluates to  t =C'(g(f(x)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / g(f(x))]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from C'(x) to C'(g(f(x))).




----------------------------------------

(22)
NO
