YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Dknz4.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 4 ms]
        (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 9 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) QDP
        (28) UsableRulesProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (31) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)
   *^1(x, s(y)) -> *^1(x, y)
   ODD(s(s(x))) -> ODD(x)
   HALF(s(s(x))) -> HALF(x)
   POW(x, y) -> F(x, y, s(0))
   F(x, s(y), z) -> IF(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))
   F(x, s(y), z) -> ODD(s(y))
   F(x, s(y), z) -> F(x, y, *(x, z))
   F(x, s(y), z) -> *^1(x, z)
   F(x, s(y), z) -> F(*(x, x), half(s(y)), z)
   F(x, s(y), z) -> *^1(x, x)
   F(x, s(y), z) -> HALF(s(y))

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 6 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(x))) -> HALF(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ODD(s(s(x))) -> ODD(x)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ODD(s(s(x))) -> ODD(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ODD(s(s(x))) -> ODD(x)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(x, s(y)) -> *^1(x, y)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(x, s(y)) -> *^1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**^1(x, s(y)) -> *^1(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, s(y), z) -> F(*(x, x), half(s(y)), z)
   F(x, s(y), z) -> F(x, y, *(x, z))

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(x, s(y), z) -> F(x, y, *(x, z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
F(x1, x2, x3)  =  x2

s(x1)  =  s(x1)

half(x1)  =  x1

0  =  0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, s(y), z) -> F(*(x, x), half(s(y)), z)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F(x, s(y), z) -> F(*(x, x), half(s(y)), z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( F_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( *_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( 0 ) = 0
POL( s_1(x_1) ) = x_1 + 2
POL( +_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( half_1(x_1) ) = max{0, x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   half(0) -> 0


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   -(x, 0) -> x
   -(s(x), s(y)) -> -(x, y)
   *(x, 0) -> 0
   *(x, s(y)) -> +(*(x, y), x)
   if(true, x, y) -> x
   if(false, x, y) -> y
   odd(0) -> false
   odd(s(0)) -> true
   odd(s(s(x))) -> odd(x)
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   if(true, x, y) -> true
   if(false, x, y) -> false
   pow(x, y) -> f(x, y, s(0))
   f(x, 0, z) -> z
   f(x, s(y), z) -> if(odd(s(y)), f(x, y, *(x, z)), f(*(x, x), half(s(y)), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(s(x), s(y)) -> -^1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*-^1(s(x), s(y)) -> -^1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(31)
YES
