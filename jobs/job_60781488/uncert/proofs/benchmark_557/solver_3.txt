YES

Problem 1: 

(VAR vu95NonEmpty X Y)
(RULES
gcd(num0,Y) -> num0
gcd(s(X),num0) -> s(X)
gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
le(num0,Y) -> ftrue
le(s(X),num0) -> ffalse
le(s(X),s(Y)) -> le(X,Y)
minus(X,num0) -> X
minus(X,s(Y)) -> pred(minus(X,Y))
pred(s(X)) -> X
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 GCD(s(X),s(Y)) -> IF(le(Y,X),s(X),s(Y))
 GCD(s(X),s(Y)) -> LE(Y,X)
 IF(ffalse,s(X),s(Y)) -> GCD(minus(Y,X),s(X))
 IF(ffalse,s(X),s(Y)) -> MINUS(Y,X)
 IF(ftrue,s(X),s(Y)) -> GCD(minus(X,Y),s(Y))
 IF(ftrue,s(X),s(Y)) -> MINUS(X,Y)
 LE(s(X),s(Y)) -> LE(X,Y)
 MINUS(X,s(Y)) -> MINUS(X,Y)
 MINUS(X,s(Y)) -> PRED(minus(X,Y))
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X

Problem 1: 

SCC Processor:
-> Pairs:
 GCD(s(X),s(Y)) -> IF(le(Y,X),s(X),s(Y))
 GCD(s(X),s(Y)) -> LE(Y,X)
 IF(ffalse,s(X),s(Y)) -> GCD(minus(Y,X),s(X))
 IF(ffalse,s(X),s(Y)) -> MINUS(Y,X)
 IF(ftrue,s(X),s(Y)) -> GCD(minus(X,Y),s(Y))
 IF(ftrue,s(X),s(Y)) -> MINUS(X,Y)
 LE(s(X),s(Y)) -> LE(X,Y)
 MINUS(X,s(Y)) -> MINUS(X,Y)
 MINUS(X,s(Y)) -> PRED(minus(X,Y))
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(X,s(Y)) -> MINUS(X,Y)
->->-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->->Cycle:
->->-> Pairs:
 LE(s(X),s(Y)) -> LE(X,Y)
->->-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->->Cycle:
->->-> Pairs:
 GCD(s(X),s(Y)) -> IF(le(Y,X),s(X),s(Y))
 IF(ffalse,s(X),s(Y)) -> GCD(minus(Y,X),s(X))
 IF(ftrue,s(X),s(Y)) -> GCD(minus(X,Y),s(Y))
->->-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 MINUS(X,s(Y)) -> MINUS(X,Y)
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Projection:
 pi(MINUS) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LE(s(X),s(Y)) -> LE(X,Y)
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Projection:
 pi(LE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 GCD(s(X),s(Y)) -> IF(le(Y,X),s(X),s(Y))
 IF(ffalse,s(X),s(Y)) -> GCD(minus(Y,X),s(X))
 IF(ftrue,s(X),s(Y)) -> GCD(minus(X,Y),s(Y))
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
-> Usable rules:
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[gcd](X1,X2) = 0
[if](X1,X2,X3) = 0
[le](X1,X2) = 0
[minus](X1,X2) = 2.X1 + 1
[pred](X) = X
[num0] = 1
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 2
[ftrue] = 0
[GCD](X1,X2) = X1 + X2 + 2
[IF](X1,X2,X3) = 2.X1 + X2 + X3 + 1
[LE](X1,X2) = 0
[MINUS](X1,X2) = 0
[PRED](X) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 IF(ffalse,s(X),s(Y)) -> GCD(minus(Y,X),s(X))
 IF(ftrue,s(X),s(Y)) -> GCD(minus(X,Y),s(Y))
-> Rules:
 gcd(num0,Y) -> num0
 gcd(s(X),num0) -> s(X)
 gcd(s(X),s(Y)) -> if(le(Y,X),s(X),s(Y))
 if(ffalse,s(X),s(Y)) -> gcd(minus(Y,X),s(X))
 if(ftrue,s(X),s(Y)) -> gcd(minus(X,Y),s(Y))
 le(num0,Y) -> ftrue
 le(s(X),num0) -> ffalse
 le(s(X),s(Y)) -> le(X,Y)
 minus(X,num0) -> X
 minus(X,s(Y)) -> pred(minus(X,Y))
 pred(s(X)) -> X
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
