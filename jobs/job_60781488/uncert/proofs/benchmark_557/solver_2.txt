YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BT3Tq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true
   gcd(0, Y) -> 0
   gcd(s(X), 0) -> s(X)
   gcd(s(X), s(Y)) -> if(le(Y, X), s(X), s(Y))
   if(true, s(X), s(Y)) -> gcd(minus(X, Y), s(Y))
   if(false, s(X), s(Y)) -> gcd(minus(Y, X), s(X))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true
   gcd(0, Y) -> 0
   gcd(s(X), 0) -> s(X)
   gcd(s(X), s(Y)) -> if(le(Y, X), s(X), s(Y))
   if(true, s(X), s(Y)) -> gcd(minus(X, Y), s(Y))
   if(false, s(X), s(Y)) -> gcd(minus(Y, X), s(X))

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X, s(Y)) -> PRED(minus(X, Y))
   MINUS(X, s(Y)) -> MINUS(X, Y)
   LE(s(X), s(Y)) -> LE(X, Y)
   GCD(s(X), s(Y)) -> IF(le(Y, X), s(X), s(Y))
   GCD(s(X), s(Y)) -> LE(Y, X)
   IF(true, s(X), s(Y)) -> GCD(minus(X, Y), s(Y))
   IF(true, s(X), s(Y)) -> MINUS(X, Y)
   IF(false, s(X), s(Y)) -> GCD(minus(Y, X), s(X))
   IF(false, s(X), s(Y)) -> MINUS(Y, X)

The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true
   gcd(0, Y) -> 0
   gcd(s(X), 0) -> s(X)
   gcd(s(X), s(Y)) -> if(le(Y, X), s(X), s(Y))
   if(true, s(X), s(Y)) -> gcd(minus(X, Y), s(Y))
   if(false, s(X), s(Y)) -> gcd(minus(Y, X), s(X))

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true
   gcd(0, Y) -> 0
   gcd(s(X), 0) -> s(X)
   gcd(s(X), s(Y)) -> if(le(Y, X), s(X), s(Y))
   if(true, s(X), s(Y)) -> gcd(minus(X, Y), s(Y))
   if(false, s(X), s(Y)) -> gcd(minus(Y, X), s(X))

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

R is empty.
The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(X), s(Y)) -> LE(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X, s(Y)) -> MINUS(X, Y)

The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true
   gcd(0, Y) -> 0
   gcd(s(X), 0) -> s(X)
   gcd(s(X), s(Y)) -> if(le(Y, X), s(X), s(Y))
   if(true, s(X), s(Y)) -> gcd(minus(X, Y), s(Y))
   if(false, s(X), s(Y)) -> gcd(minus(Y, X), s(X))

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X, s(Y)) -> MINUS(X, Y)

R is empty.
The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(X, s(Y)) -> MINUS(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(X, s(Y)) -> MINUS(X, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(X), s(Y)) -> GCD(minus(X, Y), s(Y))
   GCD(s(X), s(Y)) -> IF(le(Y, X), s(X), s(Y))
   IF(false, s(X), s(Y)) -> GCD(minus(Y, X), s(X))

The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true
   gcd(0, Y) -> 0
   gcd(s(X), 0) -> s(X)
   gcd(s(X), s(Y)) -> if(le(Y, X), s(X), s(Y))
   if(true, s(X), s(Y)) -> gcd(minus(X, Y), s(Y))
   if(false, s(X), s(Y)) -> gcd(minus(Y, X), s(X))

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(X), s(Y)) -> GCD(minus(X, Y), s(Y))
   GCD(s(X), s(Y)) -> IF(le(Y, X), s(X), s(Y))
   IF(false, s(X), s(Y)) -> GCD(minus(Y, X), s(X))

The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)
   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   gcd(0, x0)
   gcd(s(x0), 0)
   gcd(s(x0), s(x1))
   if(true, s(x0), s(x1))
   if(false, s(x0), s(x1))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(X), s(Y)) -> GCD(minus(X, Y), s(Y))
   GCD(s(X), s(Y)) -> IF(le(Y, X), s(X), s(Y))
   IF(false, s(X), s(Y)) -> GCD(minus(Y, X), s(X))

The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF(true, s(X), s(Y)) -> GCD(minus(X, Y), s(Y))
   GCD(s(X), s(Y)) -> IF(le(Y, X), s(X), s(Y))
   IF(false, s(X), s(Y)) -> GCD(minus(Y, X), s(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
IF(x1, x2, x3)  =  IF(x2, x3)

s(x1)  =  s(x1)

GCD(x1, x2)  =  GCD(x1, x2)

minus(x1, x2)  =  x1

pred(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=3
   dummyConstant=1
   IF_2=2
   GCD_2=3

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X


----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(X, s(Y)) -> pred(minus(X, Y))
   minus(X, 0) -> X
   pred(s(X)) -> X
   le(s(X), s(Y)) -> le(X, Y)
   le(s(X), 0) -> false
   le(0, Y) -> true

The set Q consists of the following terms:

   minus(x0, s(x1))
   minus(x0, 0)
   pred(s(x0))
   le(s(x0), s(x1))
   le(s(x0), 0)
   le(0, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
