YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BR4V3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) QDPQMonotonicMRRProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPQMonotonicMRRProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) DependencyGraphProof [EQUIVALENT, 0 ms]
        (41) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   isZero(0) -> true
   isZero(s(x)) -> false
   mod(x, y) -> if_mod(isZero(y), le(y, x), x, y, minus(x, y))
   if_mod(true, b, x, y, z) -> divByZeroError
   if_mod(false, false, x, y, z) -> x
   if_mod(false, true, x, y, z) -> mod(z, y)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   isZero(0) -> true
   isZero(s(x)) -> false
   mod(x, y) -> if_mod(isZero(y), le(y, x), x, y, minus(x, y))
   if_mod(true, b, x, y, z) -> divByZeroError
   if_mod(false, false, x, y, z) -> x
   if_mod(false, true, x, y, z) -> mod(z, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)
   MINUS(s(x), s(y)) -> MINUS(x, y)
   MOD(x, y) -> IF_MOD(isZero(y), le(y, x), x, y, minus(x, y))
   MOD(x, y) -> ISZERO(y)
   MOD(x, y) -> LE(y, x)
   MOD(x, y) -> MINUS(x, y)
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   isZero(0) -> true
   isZero(s(x)) -> false
   mod(x, y) -> if_mod(isZero(y), le(y, x), x, y, minus(x, y))
   if_mod(true, b, x, y, z) -> divByZeroError
   if_mod(false, false, x, y, z) -> x
   if_mod(false, true, x, y, z) -> mod(z, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   isZero(0) -> true
   isZero(s(x)) -> false
   mod(x, y) -> if_mod(isZero(y), le(y, x), x, y, minus(x, y))
   if_mod(true, b, x, y, z) -> divByZeroError
   if_mod(false, false, x, y, z) -> x
   if_mod(false, true, x, y, z) -> mod(z, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   isZero(0) -> true
   isZero(s(x)) -> false
   mod(x, y) -> if_mod(isZero(y), le(y, x), x, y, minus(x, y))
   if_mod(true, b, x, y, z) -> divByZeroError
   if_mod(false, false, x, y, z) -> x
   if_mod(false, true, x, y, z) -> mod(z, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(x, y) -> IF_MOD(isZero(y), le(y, x), x, y, minus(x, y))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   isZero(0) -> true
   isZero(s(x)) -> false
   mod(x, y) -> if_mod(isZero(y), le(y, x), x, y, minus(x, y))
   if_mod(true, b, x, y, z) -> divByZeroError
   if_mod(false, false, x, y, z) -> x
   if_mod(false, true, x, y, z) -> mod(z, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(x, y) -> IF_MOD(isZero(y), le(y, x), x, y, minus(x, y))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   isZero(0) -> true
   isZero(s(x)) -> false
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))
   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mod(x0, x1)
   if_mod(true, x0, x1, x2, x3)
   if_mod(false, false, x0, x1, x2)
   if_mod(false, true, x0, x1, x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(x, y) -> IF_MOD(isZero(y), le(y, x), x, y, minus(x, y))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   isZero(0) -> true
   isZero(s(x)) -> false
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule MOD(x, y) -> IF_MOD(isZero(y), le(y, x), x, y, minus(x, y)) at position [0] we obtained the following new rules [LPAR04]:

   (MOD(y0, 0) -> IF_MOD(true, le(0, y0), y0, 0, minus(y0, 0)),MOD(y0, 0) -> IF_MOD(true, le(0, y0), y0, 0, minus(y0, 0)))
   (MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0))),MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0))))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF_MOD(false, true, x, y, z) -> MOD(z, y)
   MOD(y0, 0) -> IF_MOD(true, le(0, y0), y0, 0, minus(y0, 0))
   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))

The TRS R consists of the following rules:

   isZero(0) -> true
   isZero(s(x)) -> false
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   isZero(0) -> true
   isZero(s(x)) -> false
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(x, 0) -> x
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   le(0, y) -> true

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))
   isZero(0)
   isZero(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isZero(0)
   isZero(s(x0))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(0, x) -> 0
   minus(s(x), s(y)) -> minus(x, y)
   minus(x, 0) -> x
   le(0, y) -> true

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   minus(s(x), s(y)) -> minus(x, y)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF_MOD(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + x_5
   POL(MOD(x_1, x_2)) = x_1
   POL(false) = 0
   POL(le(x_1, x_2)) = 0
   POL(minus(x_1, x_2)) = x_1
   POL(s(x_1)) = 2 + 2*x_1
   POL(true) = 0


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(0, x) -> 0
   minus(x, 0) -> x
   le(0, y) -> true

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, x) -> 0
   minus(0, x) -> 0
   le(0, y) -> true

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   le(s(x), s(y)) -> le(x, y)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF_MOD(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_5
   POL(MOD(x_1, x_2)) = 2*x_1
   POL(false) = 0
   POL(le(x_1, x_2)) = x_2
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 2 + 2*x_1
   POL(true) = 0


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MOD(y0, s(x0)) -> IF_MOD(false, le(s(x0), y0), y0, s(x0), minus(y0, s(x0)))
   IF_MOD(false, true, x, y, z) -> MOD(z, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   minus(x, x) -> 0
   minus(0, x) -> 0
   le(0, y) -> true

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, x0)
   minus(x0, 0)
   minus(0, x0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(41)
TRUE
