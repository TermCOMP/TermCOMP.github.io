YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/QusEo.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(twice, f), x) -> app(f, app(f, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(fmap, nil), x) -> nil
   app(app(fmap, app(app(cons, f), t_f)), x) -> app(app(cons, app(f, x)), app(app(fmap, t_f), x))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(twice, f), x) -> app(f, app(f, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(fmap, nil), x) -> nil
   app(app(fmap, app(app(cons, f), t_f)), x) -> app(app(cons, app(f, x)), app(app(fmap, t_f), x))

The set Q consists of the following terms:

   app(app(twice, x0), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(fmap, nil), x0)
   app(app(fmap, app(app(cons, x0), t_f)), x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(twice, f), x) -> APP(f, app(f, x))
   APP(app(twice, f), x) -> APP(f, x)
   APP(app(map, f), app(app(cons, h), t)) -> APP(app(cons, app(f, h)), app(app(map, f), t))
   APP(app(map, f), app(app(cons, h), t)) -> APP(cons, app(f, h))
   APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
   APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
   APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(app(cons, app(f, x)), app(app(fmap, t_f), x))
   APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(cons, app(f, x))
   APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(f, x)
   APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(app(fmap, t_f), x)
   APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(fmap, t_f)

The TRS R consists of the following rules:

   app(app(twice, f), x) -> app(f, app(f, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(fmap, nil), x) -> nil
   app(app(fmap, app(app(cons, f), t_f)), x) -> app(app(cons, app(f, x)), app(app(fmap, t_f), x))

The set Q consists of the following terms:

   app(app(twice, x0), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(fmap, nil), x0)
   app(app(fmap, app(app(cons, x0), t_f)), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 6 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(twice, f), x) -> APP(f, x)
   APP(app(twice, f), x) -> APP(f, app(f, x))
   APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
   APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
   APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(f, x)

The TRS R consists of the following rules:

   app(app(twice, f), x) -> app(f, app(f, x))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(fmap, nil), x) -> nil
   app(app(fmap, app(app(cons, f), t_f)), x) -> app(app(cons, app(f, x)), app(app(fmap, t_f), x))

The set Q consists of the following terms:

   app(app(twice, x0), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(fmap, nil), x0)
   app(app(fmap, app(app(cons, x0), t_f)), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(twice, f), x) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 >= 2


*APP(app(twice, f), x) -> APP(f, app(f, x))
The graph contains the following edges 1 > 1


*APP(app(fmap, app(app(cons, f), t_f)), x) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(8)
YES
