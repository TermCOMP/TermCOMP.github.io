YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bCtPs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [EQUIVALENT, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 28 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) CSRRRRProof [EQUIVALENT, 0 ms]
(10) CSR
(11) RisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(s(X)) -> s(active(X))
   active(div(X1, X2)) -> div(active(X1), X2)
   active(if(X1, X2, X3)) -> if(active(X1), X2, X3)
   s(mark(X)) -> mark(s(X))
   div(mark(X1), X2) -> mark(div(X1, X2))
   if(mark(X1), X2, X3) -> mark(if(X1, X2, X3))
   proper(minus(X1, X2)) -> minus(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(s(X)) -> s(proper(X))
   proper(geq(X1, X2)) -> geq(proper(X1), proper(X2))
   proper(true) -> ok(true)
   proper(false) -> ok(false)
   proper(div(X1, X2)) -> div(proper(X1), proper(X2))
   proper(if(X1, X2, X3)) -> if(proper(X1), proper(X2), proper(X3))
   minus(ok(X1), ok(X2)) -> ok(minus(X1, X2))
   s(ok(X)) -> ok(s(X))
   geq(ok(X1), ok(X2)) -> ok(geq(X1, X2))
   div(ok(X1), ok(X2)) -> ok(div(X1, X2))
   if(ok(X1), ok(X2), ok(X3)) -> ok(if(X1, X2, X3))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.

----------------------------------------

(1) QTRSToCSRProof (EQUIVALENT)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(minus(0, Y)) -> mark(0)
   active(minus(s(X), s(Y))) -> mark(minus(X, Y))
   active(geq(X, 0)) -> mark(true)
   active(geq(0, s(Y))) -> mark(false)
   active(geq(s(X), s(Y))) -> mark(geq(X, Y))
   active(div(0, s(Y))) -> mark(0)
   active(div(s(X), s(Y))) -> mark(if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0))
   active(if(true, X, Y)) -> mark(X)
   active(if(false, X, Y)) -> mark(Y)
   active(s(X)) -> s(active(X))
   active(div(X1, X2)) -> div(active(X1), X2)
   active(if(X1, X2, X3)) -> if(active(X1), X2, X3)
   s(mark(X)) -> mark(s(X))
   div(mark(X1), X2) -> mark(div(X1, X2))
   if(mark(X1), X2, X3) -> mark(if(X1, X2, X3))
   proper(minus(X1, X2)) -> minus(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(s(X)) -> s(proper(X))
   proper(geq(X1, X2)) -> geq(proper(X1), proper(X2))
   proper(true) -> ok(true)
   proper(false) -> ok(false)
   proper(div(X1, X2)) -> div(proper(X1), proper(X2))
   proper(if(X1, X2, X3)) -> if(proper(X1), proper(X2), proper(X3))
   minus(ok(X1), ok(X2)) -> ok(minus(X1, X2))
   s(ok(X)) -> ok(s(X))
   geq(ok(X1), ok(X2)) -> ok(geq(X1, X2))
   div(ok(X1), ok(X2)) -> ok(div(X1, X2))
   if(ok(X1), ok(X2), ok(X3)) -> ok(if(X1, X2, X3))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.
Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}
The QTRS contained all rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is complete (and sound).
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   geq(s(X), s(Y)) -> geq(X, Y)
   div(0, s(Y)) -> 0
   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   minus(s(X), s(Y)) -> minus(X, Y)
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   geq(s(X), s(Y)) -> geq(X, Y)
   div(0, s(Y)) -> 0
   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(div(x_1, x_2)) = x_1 + x_2
   POL(false) = 0
   POL(geq(x_1, x_2)) = 0
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(minus(x_1, x_2)) = x_1
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   minus(s(X), s(Y)) -> minus(X, Y)
   div(0, s(Y)) -> 0




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   geq(s(X), s(Y)) -> geq(X, Y)
   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   geq(s(X), s(Y)) -> geq(X, Y)
   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(div(x_1, x_2)) = 2*x_1
   POL(false) = 0
   POL(geq(x_1, x_2)) = x_1
   POL(if(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + x_3
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + 2*x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   geq(s(X), s(Y)) -> geq(X, Y)




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
div: {1}
if: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(div(x_1, x_2)) = 1 + 2*x_1
   POL(false) = 0
   POL(geq(x_1, x_2)) = 2*x_1
   POL(if(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(minus(x_1, x_2)) = 0
   POL(s(x_1)) = 2 + 2*x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   div(s(X), s(Y)) -> if(geq(X, Y), s(div(minus(X, Y), s(Y))), 0)




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
if: {1}

----------------------------------------

(9) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   if(true, X, Y) -> X
   if(false, X, Y) -> Y

The replacement map contains the following entries:

minus: empty set
0: empty set
s: {1}
geq: empty set
true: empty set
false: empty set
if: {1}
Used ordering:
Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(minus(x_1, x_2)) =  	[[1], [0]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(0) =  	[[0], [1]]
>>>

   <<<
 POL(geq(x_1, x_2)) =  	[[1], [1]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1 	 +  	[[1, 1], [1, 1]] 	* 	x_2
>>>

   <<<
 POL(true) =  	[[1], [1]]
>>>

   <<<
 POL(s(x_1)) =  	[[0], [1]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1
>>>

   <<<
 POL(false) =  	[[1], [1]]
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[1, 1], [1, 1]] 	* 	x_1 	 +  	[[1, 0], [0, 1]] 	* 	x_2 	 +  	[[1, 0], [0, 1]] 	* 	x_3
>>>

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   minus(0, Y) -> 0
   geq(X, 0) -> true
   geq(0, s(Y)) -> false
   if(true, X, Y) -> X
   if(false, X, Y) -> Y




----------------------------------------

(10)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(11) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(12)
YES
