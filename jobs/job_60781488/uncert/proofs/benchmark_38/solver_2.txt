YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6YrJV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QDPOrderProof [EQUIVALENT, 33 ms]
        (41) QDP
        (42) PisEmptyProof [EQUIVALENT, 0 ms]
        (43) YES
    (44) QDP
        (45) UsableRulesProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) QReductionProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (50) YES
    (51) QDP
        (52) UsableRulesProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) QReductionProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) QDPOrderProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) PisEmptyProof [EQUIVALENT, 0 ms]
        (59) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
   QUOT(s(x), s(y)) -> MINUS(x, y)
   LE(s(x), s(y)) -> LE(x, y)
   APP(add(n, x), y) -> APP(x, y)
   LOW(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
   LOW(n, add(m, x)) -> LE(m, n)
   IF_LOW(true, n, add(m, x)) -> LOW(n, x)
   IF_LOW(false, n, add(m, x)) -> LOW(n, x)
   HIGH(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))
   HIGH(n, add(m, x)) -> LE(m, n)
   IF_HIGH(true, n, add(m, x)) -> HIGH(n, x)
   IF_HIGH(false, n, add(m, x)) -> HIGH(n, x)
   QUICKSORT(add(n, x)) -> APP(quicksort(low(n, x)), add(n, quicksort(high(n, x))))
   QUICKSORT(add(n, x)) -> QUICKSORT(low(n, x))
   QUICKSORT(add(n, x)) -> LOW(n, x)
   QUICKSORT(add(n, x)) -> QUICKSORT(high(n, x))
   QUICKSORT(add(n, x)) -> HIGH(n, x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 7 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(add(n, x), y) -> APP(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(add(n, x), y) -> APP(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))
   IF_HIGH(true, n, add(m, x)) -> HIGH(n, x)
   IF_HIGH(false, n, add(m, x)) -> HIGH(n, x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))
   IF_HIGH(true, n, add(m, x)) -> HIGH(n, x)
   IF_HIGH(false, n, add(m, x)) -> HIGH(n, x)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HIGH(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))
   IF_HIGH(true, n, add(m, x)) -> HIGH(n, x)
   IF_HIGH(false, n, add(m, x)) -> HIGH(n, x)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HIGH(n, add(m, x)) -> IF_HIGH(le(m, n), n, add(m, x))
The graph contains the following edges 1 >= 2, 2 >= 3


*IF_HIGH(true, n, add(m, x)) -> HIGH(n, x)
The graph contains the following edges 2 >= 1, 3 > 2


*IF_HIGH(false, n, add(m, x)) -> HIGH(n, x)
The graph contains the following edges 2 >= 1, 3 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOW(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
   IF_LOW(true, n, add(m, x)) -> LOW(n, x)
   IF_LOW(false, n, add(m, x)) -> LOW(n, x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOW(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
   IF_LOW(true, n, add(m, x)) -> LOW(n, x)
   IF_LOW(false, n, add(m, x)) -> LOW(n, x)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOW(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
   IF_LOW(true, n, add(m, x)) -> LOW(n, x)
   IF_LOW(false, n, add(m, x)) -> LOW(n, x)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LOW(n, add(m, x)) -> IF_LOW(le(m, n), n, add(m, x))
The graph contains the following edges 1 >= 2, 2 >= 3


*IF_LOW(true, n, add(m, x)) -> LOW(n, x)
The graph contains the following edges 2 >= 1, 3 > 2


*IF_LOW(false, n, add(m, x)) -> LOW(n, x)
The graph contains the following edges 2 >= 1, 3 > 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(add(n, x)) -> QUICKSORT(high(n, x))
   QUICKSORT(add(n, x)) -> QUICKSORT(low(n, x))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(add(n, x)) -> QUICKSORT(high(n, x))
   QUICKSORT(add(n, x)) -> QUICKSORT(low(n, x))

The TRS R consists of the following rules:

   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUICKSORT(add(n, x)) -> QUICKSORT(high(n, x))
   QUICKSORT(add(n, x)) -> QUICKSORT(low(n, x))

The TRS R consists of the following rules:

   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUICKSORT(add(n, x)) -> QUICKSORT(high(n, x))
   QUICKSORT(add(n, x)) -> QUICKSORT(low(n, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( QUICKSORT_1(x_1) ) = max{0, 2x_1 - 1}
POL( high_2(x_1, x_2) ) = 2x_2
POL( nil ) = 0
POL( add_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( if_high_3(x_1, ..., x_3) ) = 2x_3
POL( le_2(x_1, x_2) ) = 0
POL( true ) = 0
POL( low_2(x_1, x_2) ) = 2x_2
POL( if_low_3(x_1, ..., x_3) ) = max{0, 2x_3 - 2}
POL( false ) = 0
POL( 0 ) = 0
POL( s_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_high(false, n, add(m, x)) -> add(m, high(n, x))


----------------------------------------

(41)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(43)
YES

----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(50)
YES

----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   low(n, nil) -> nil
   low(n, add(m, x)) -> if_low(le(m, n), n, add(m, x))
   if_low(true, n, add(m, x)) -> add(m, low(n, x))
   if_low(false, n, add(m, x)) -> low(n, x)
   high(n, nil) -> nil
   high(n, add(m, x)) -> if_high(le(m, n), n, add(m, x))
   if_high(true, n, add(m, x)) -> high(n, x)
   if_high(false, n, add(m, x)) -> add(m, high(n, x))
   quicksort(nil) -> nil
   quicksort(add(n, x)) -> app(quicksort(low(n, x)), add(n, quicksort(high(n, x))))

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   app(nil, x0)
   app(add(x0, x1), x2)
   low(x0, nil)
   low(x0, add(x1, x2))
   if_low(true, x0, add(x1, x2))
   if_low(false, x0, add(x1, x2))
   high(x0, nil)
   high(x0, add(x1, x2))
   if_high(true, x0, add(x1, x2))
   if_high(false, x0, add(x1, x2))
   quicksort(nil)
   quicksort(add(x0, x1))


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(57)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(59)
YES
