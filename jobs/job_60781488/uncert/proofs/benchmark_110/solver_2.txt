NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/n11p8.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 31 ms]
(2) QTRS
(3) AAECC Innermost [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QReductionProof [EQUIVALENT, 0 ms]
(10) QDP
(11) ATransformationProof [EQUIVALENT, 0 ms]
(12) QDP
(13) TransformationProof [EQUIVALENT, 0 ms]
(14) QDP
(15) TransformationProof [EQUIVALENT, 0 ms]
(16) QDP
(17) NonTerminationLoopProof [COMPLETE, 0 ms]
(18) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ap(ap(g, x), y) -> y
   ap(f, x) -> ap(f, app(g, x))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(ap(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(f) = 0
   POL(g) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   ap(ap(g, x), y) -> y




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ap(f, x) -> ap(f, app(g, x))

Q is empty.

----------------------------------------

(3) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is none

The TRS R 2 is 
   ap(f, x) -> ap(f, app(g, x))

The signature Sigma is {ap_2}
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ap(f, x) -> ap(f, app(g, x))

The set Q consists of the following terms:

   ap(f, x0)


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(f, x) -> AP(f, app(g, x))

The TRS R consists of the following rules:

   ap(f, x) -> ap(f, app(g, x))

The set Q consists of the following terms:

   ap(f, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(f, x) -> AP(f, app(g, x))

R is empty.
The set Q consists of the following terms:

   ap(f, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ap(f, x0)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(f, x) -> AP(f, app(g, x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f(x) -> f(g(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule f(x) -> f(g(x)) we obtained the following new rules [LPAR04]:

   (f(g(z0)) -> f(g(g(z0))),f(g(z0)) -> f(g(g(z0))))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f(g(z0)) -> f(g(g(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule f(g(z0)) -> f(g(g(z0))) we obtained the following new rules [LPAR04]:

   (f(g(g(z0))) -> f(g(g(g(z0)))),f(g(g(z0))) -> f(g(g(g(z0)))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f(g(g(z0))) -> f(g(g(g(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = f(g(g(z0))) evaluates to  t =f(g(g(g(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / g(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from f(g(g(z0))) to f(g(g(g(z0)))).




----------------------------------------

(18)
NO
