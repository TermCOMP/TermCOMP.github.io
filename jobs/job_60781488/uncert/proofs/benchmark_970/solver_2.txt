NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/fmEzy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 24 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) QDP
(11) UsableRulesReductionPairsProof [EQUIVALENT, 3 ms]
(12) QDP
(13) NonTerminationLoopProof [COMPLETE, 0 ms]
(14) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(b, X, c) -> a__f(X, a__c, X)
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(X1, mark(X2), X3)
   mark(c) -> a__c
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a__c) = 0
   POL(a__f(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + x_3
   POL(b) = 0
   POL(c) = 0
   POL(f(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + x_3
   POL(mark(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(f(X1, X2, X3)) -> a__f(X1, mark(X2), X3)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(b, X, c) -> a__f(X, a__c, X)
   a__c -> b
   mark(c) -> a__c
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a__c) = 0
   POL(a__f(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + x_3
   POL(b) = 0
   POL(c) = 0
   POL(f(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(mark(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__f(X1, X2, X3) -> f(X1, X2, X3)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(b, X, c) -> a__f(X, a__c, X)
   a__c -> b
   mark(c) -> a__c
   mark(b) -> b
   a__c -> c

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a__c) = 0
   POL(a__f(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(b) = 0
   POL(c) = 0
   POL(mark(x_1)) = 2 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(c) -> a__c
   mark(b) -> b




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(b, X, c) -> a__f(X, a__c, X)
   a__c -> b
   a__c -> c

Q is empty.

----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(b, X, c) -> A__F(X, a__c, X)
   A__F(b, X, c) -> A__C

The TRS R consists of the following rules:

   a__f(b, X, c) -> a__f(X, a__c, X)
   a__c -> b
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(b, X, c) -> A__F(X, a__c, X)

The TRS R consists of the following rules:

   a__f(b, X, c) -> a__f(X, a__c, X)
   a__c -> b
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   a__f(b, X, c) -> a__f(X, a__c, X)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(A__F(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(a__c) = 0
   POL(b) = 0
   POL(c) = 0


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(b, X, c) -> A__F(X, a__c, X)

The TRS R consists of the following rules:

   a__c -> b
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = A__F(a__c, X, a__c) evaluates to  t =A__F(X, a__c, X)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [X / a__c]

--------------------------------------------------------------------------------
Rewriting sequence

A__F(a__c, a__c, a__c) -> A__F(a__c, a__c, c)
with rule a__c -> c at position [2] and matcher [ ]

A__F(a__c, a__c, c) -> A__F(b, a__c, c)
with rule a__c -> b at position [0] and matcher [ ]

A__F(b, a__c, c) -> A__F(a__c, a__c, a__c)
with rule A__F(b, X, c) -> A__F(X, a__c, X)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(14)
NO
