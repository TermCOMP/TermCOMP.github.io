YES

Problem 1: 

(VAR vu95NonEmpty N X X1 X2 XS Y YS)
(RULES
au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
au95u95incr(X) -> incr(X)
au95u95oddNs -> au95u95incr(au95u95pairNs)
au95u95oddNs -> oddNs
au95u95pairNs -> cons(num0,incr(oddNs))
au95u95pairNs -> pairNs
au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
au95u95repItems(nil) -> nil
au95u95repItems(X) -> repItems(X)
au95u95tail(cons(X,XS)) -> mark(XS)
au95u95tail(X) -> tail(X)
au95u95take(num0,XS) -> nil
au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
au95u95take(X1,X2) -> take(X1,X2)
au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
au95u95zip(nil,XS) -> nil
au95u95zip(X,nil) -> nil
au95u95zip(X1,X2) -> zip(X1,X2)
mark(num0) -> num0
mark(cons(X1,X2)) -> cons(mark(X1),X2)
mark(incr(X)) -> au95u95incr(mark(X))
mark(nil) -> nil
mark(oddNs) -> au95u95oddNs
mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
mark(pairNs) -> au95u95pairNs
mark(repItems(X)) -> au95u95repItems(mark(X))
mark(s(X)) -> s(mark(X))
mark(tail(X)) -> au95u95tail(mark(X))
mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ODDNS -> AU95U95INCR(au95u95pairNs)
 AU95U95ODDNS -> AU95U95PAIRNS
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(oddNs) -> AU95U95ODDNS
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(pairNs) -> AU95U95PAIRNS
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ODDNS -> AU95U95INCR(au95u95pairNs)
 AU95U95ODDNS -> AU95U95PAIRNS
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(oddNs) -> AU95U95ODDNS
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(pairNs) -> AU95U95PAIRNS
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ODDNS -> AU95U95INCR(au95u95pairNs)
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(oddNs) -> AU95U95ODDNS
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ODDNS -> AU95U95INCR(au95u95pairNs)
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(oddNs) -> AU95U95ODDNS
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 1
[au95u95pairNs] = 1
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X + 1
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 1
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 2
[oddNs] = 1
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 1
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 1
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95INCR](X) = X
[AU95U95ODDNS] = 2
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 2.X + 2
[AU95U95TAIL](X) = 2.X
[AU95U95TAKE](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95ZIP](X1,X2) = X1 + X2 + 1
[MARK](X) = 2.X

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(oddNs) -> AU95U95ODDNS
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95REPITEMS(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 1
[au95u95pairNs] = 1
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X + 1
[au95u95take](X1,X2) = X1 + 2.X2 + 1
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 0
[oddNs] = 1
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 1
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 1
[take](X1,X2) = X1 + 2.X2 + 1
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = 2.X
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 2.X + 1
[AU95U95TAIL](X) = 2.X + 2
[AU95U95TAKE](X1,X2) = 2.X1 + X2 + 2
[AU95U95ZIP](X1,X2) = 2.X1 + 2.X2 + 2
[MARK](X) = 2.X

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> AU95U95REPITEMS(mark(X))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95TAIL(cons(X,XS)) -> MARK(XS)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X
[au95u95tail](X) = 2.X + 2
[au95u95take](X1,X2) = 2.X1 + X2 + 1
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 1
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 1
[oddNs] = 2
[pair](X1,X2) = 2.X1 + X2
[pairNs] = 2
[repItems](X) = 2.X
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + X2 + 1
[zip](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95INCR](X) = 2.X + 1
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 2.X + 2
[AU95U95TAKE](X1,X2) = X1 + X2 + 2
[AU95U95ZIP](X1,X2) = 2.X1 + X2 + 2
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> AU95U95TAIL(mark(X))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95TAKE(s(N),cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X + 2
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 2
[oddNs] = 2
[pair](X1,X2) = X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = X
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 2.X2 + 2
[AU95U95ZIP](X1,X2) = 2.X1 + 2.X2 + 2
[MARK](X) = X

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> AU95U95TAKE(mark(X1),mark(X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 1
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 1
[oddNs] = 2
[pair](X1,X2) = 2.X1 + X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X
[take](X1,X2) = 2.X1 + 2.X2 + 1
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = 2.X + 1
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 2.X1 + 2.X2 + 2
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 AU95U95ZIP(cons(X,XS),cons(Y,YS)) -> MARK(Y)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X + 2
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 1
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 0
[oddNs] = 2
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95INCR](X) = 2.X + 1
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = X2 + 2
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> AU95U95ZIP(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = X + 1
[au95u95take](X1,X2) = 2.X1 + 2.X2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 0
[oddNs] = 2
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = X + 1
[take](X1,X2) = 2.X1 + 2.X2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = X + 1
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X + 2
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 2
[oddNs] = 2
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = 2.X + 2
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = 2.X
[au95u95oddNs] = 0
[au95u95pairNs] = 0
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = X + 2
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = 2.X
[nil] = 2
[oddNs] = 0
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 0
[repItems](X) = 2.X + 2
[s](X) = 2.X
[tail](X) = X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = 2.X + 2
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = X + 1
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 1
[au95u95zip](X1,X2) = 2.X1 + 2.X2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 1
[oddNs] = 2
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = X + 1
[take](X1,X2) = 2.X1 + 2.X2 + 1
[zip](X1,X2) = 2.X1 + 2.X2
[AU95U95INCR](X) = X + 1
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 2
[au95u95tail](X) = 2.X + 2
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 2
[oddNs] = 2
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = 2.X + 2
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> MARK(X2)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> MARK(X2)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X
[au95u95tail](X) = 2.X
[au95u95take](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95zip](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = X1 + X2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 2
[oddNs] = 2
[pair](X1,X2) = 2.X1 + 2.X2
[pairNs] = 2
[repItems](X) = 2.X
[s](X) = X
[tail](X) = 2.X
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95INCR](X) = 2.X + 2
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95INCR(cons(X,XS)) -> MARK(X)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
-> Usable rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95incr](X) = X
[au95u95oddNs] = 2
[au95u95pairNs] = 2
[au95u95repItems](X) = 2.X + 1/2
[au95u95tail](X) = 2.X + 1/2
[au95u95take](X1,X2) = 2.X2
[au95u95zip](X1,X2) = X1 + 2.X2
[mark](X) = X
[num0] = 0
[cons](X1,X2) = 2.X1 + 1/2.X2 + 1/2
[fSNonEmpty] = 0
[incr](X) = X
[nil] = 0
[oddNs] = 2
[pair](X1,X2) = X1 + 2.X2 + 1/2
[pairNs] = 2
[repItems](X) = 2.X + 1/2
[s](X) = X
[tail](X) = 2.X + 1/2
[take](X1,X2) = 2.X2
[zip](X1,X2) = X1 + 2.X2
[AU95U95INCR](X) = 1/2.X + 1/2
[AU95U95ODDNS] = 0
[AU95U95PAIRNS] = 0
[AU95U95REPITEMS](X) = 0
[AU95U95TAIL](X) = 0
[AU95U95TAKE](X1,X2) = 0
[AU95U95ZIP](X1,X2) = 0
[MARK](X) = 1/2.X + 1/2

Problem 1: 

SCC Processor:
-> Pairs:
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> AU95U95INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))

Problem 1: 

Subterm Processor:
-> Pairs:
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Projection:
 pi(MARK) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 au95u95incr(cons(X,XS)) -> cons(s(mark(X)),incr(XS))
 au95u95incr(X) -> incr(X)
 au95u95oddNs -> au95u95incr(au95u95pairNs)
 au95u95oddNs -> oddNs
 au95u95pairNs -> cons(num0,incr(oddNs))
 au95u95pairNs -> pairNs
 au95u95repItems(cons(X,XS)) -> cons(mark(X),cons(X,repItems(XS)))
 au95u95repItems(nil) -> nil
 au95u95repItems(X) -> repItems(X)
 au95u95tail(cons(X,XS)) -> mark(XS)
 au95u95tail(X) -> tail(X)
 au95u95take(num0,XS) -> nil
 au95u95take(s(N),cons(X,XS)) -> cons(mark(X),take(N,XS))
 au95u95take(X1,X2) -> take(X1,X2)
 au95u95zip(cons(X,XS),cons(Y,YS)) -> cons(pair(mark(X),mark(Y)),zip(XS,YS))
 au95u95zip(nil,XS) -> nil
 au95u95zip(X,nil) -> nil
 au95u95zip(X1,X2) -> zip(X1,X2)
 mark(num0) -> num0
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(incr(X)) -> au95u95incr(mark(X))
 mark(nil) -> nil
 mark(oddNs) -> au95u95oddNs
 mark(pair(X1,X2)) -> pair(mark(X1),mark(X2))
 mark(pairNs) -> au95u95pairNs
 mark(repItems(X)) -> au95u95repItems(mark(X))
 mark(s(X)) -> s(mark(X))
 mark(tail(X)) -> au95u95tail(mark(X))
 mark(take(X1,X2)) -> au95u95take(mark(X1),mark(X2))
 mark(zip(X1,X2)) -> au95u95zip(mark(X1),mark(X2))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
