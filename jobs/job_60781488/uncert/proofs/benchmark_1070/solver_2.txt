YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VdrSC.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 46 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 14 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 8 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 0 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) MRRProof [EQUIVALENT, 0 ms]
(14) QDP
(15) DependencyGraphProof [EQUIVALENT, 0 ms]
(16) QDP
(17) MRRProof [EQUIVALENT, 3 ms]
(18) QDP
(19) DependencyGraphProof [EQUIVALENT, 0 ms]
(20) QDP
(21) MRRProof [EQUIVALENT, 0 ms]
(22) QDP
(23) MRRProof [EQUIVALENT, 5 ms]
(24) QDP
(25) DependencyGraphProof [EQUIVALENT, 0 ms]
(26) QDP
(27) MRRProof [EQUIVALENT, 0 ms]
(28) QDP
(29) DependencyGraphProof [EQUIVALENT, 0 ms]
(30) QDP
(31) QDPOrderProof [EQUIVALENT, 0 ms]
(32) QDP
(33) DependencyGraphProof [EQUIVALENT, 0 ms]
(34) QDP
(35) UsableRulesProof [EQUIVALENT, 0 ms]
(36) QDP
(37) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(38) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(0, XS) -> nil
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(nil, XS) -> nil
   a__zip(X, nil) -> nil
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__tail(cons(X, XS)) -> mark(XS)
   a__repItems(nil) -> nil
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__incr(x_1)) = 2*x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 1 + 2*x_1
   POL(a__tail(x_1)) = 2*x_1
   POL(a__take(x_1, x_2)) = x_1 + 2*x_2
   POL(a__zip(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + 2*x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 1 + 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = x_1 + 2*x_2
   POL(zip(x_1, x_2)) = x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__repItems(nil) -> nil




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(0, XS) -> nil
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(nil, XS) -> nil
   a__zip(X, nil) -> nil
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__tail(cons(X, XS)) -> mark(XS)
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__incr(x_1)) = x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = 1 + x_1
   POL(a__take(x_1, x_2)) = 2*x_1 + x_2
   POL(a__zip(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + 2*x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + x_1
   POL(take(x_1, x_2)) = 2*x_1 + x_2
   POL(zip(x_1, x_2)) = x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__tail(cons(X, XS)) -> mark(XS)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(0, XS) -> nil
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(nil, XS) -> nil
   a__zip(X, nil) -> nil
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__incr(x_1)) = 2*x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = x_1
   POL(a__take(x_1, x_2)) = 2*x_1 + x_2
   POL(a__zip(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(tail(x_1)) = x_1
   POL(take(x_1, x_2)) = 2*x_1 + x_2
   POL(zip(x_1, x_2)) = 2 + 2*x_1 + x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__zip(nil, XS) -> nil
   a__zip(X, nil) -> nil




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(0, XS) -> nil
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__incr(x_1)) = x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = x_1
   POL(a__take(x_1, x_2)) = 1 + x_1 + x_2
   POL(a__zip(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + 2*x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(zip(x_1, x_2)) = x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__take(0, XS) -> nil




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.

----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__ODDNS -> A__INCR(a__pairNs)
   A__ODDNS -> A__PAIRNS
   A__INCR(cons(X, XS)) -> MARK(X)
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   A__ZIP(cons(X, XS), cons(Y, YS)) -> MARK(X)
   A__ZIP(cons(X, XS), cons(Y, YS)) -> MARK(Y)
   A__REPITEMS(cons(X, XS)) -> MARK(X)
   MARK(pairNs) -> A__PAIRNS
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(zip(X1, X2)) -> A__ZIP(mark(X1), mark(X2))
   MARK(zip(X1, X2)) -> MARK(X1)
   MARK(zip(X1, X2)) -> MARK(X2)
   MARK(tail(X)) -> A__TAIL(mark(X))
   MARK(tail(X)) -> MARK(X)
   MARK(repItems(X)) -> A__REPITEMS(mark(X))
   MARK(repItems(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(zip(X1, X2)) -> A__ZIP(mark(X1), mark(X2))
   A__ZIP(cons(X, XS), cons(Y, YS)) -> MARK(X)
   MARK(zip(X1, X2)) -> MARK(X1)
   MARK(zip(X1, X2)) -> MARK(X2)
   MARK(tail(X)) -> MARK(X)
   MARK(repItems(X)) -> A__REPITEMS(mark(X))
   A__REPITEMS(cons(X, XS)) -> MARK(X)
   MARK(repItems(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)
   A__ZIP(cons(X, XS), cons(Y, YS)) -> MARK(Y)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(zip(X1, X2)) -> A__ZIP(mark(X1), mark(X2))
   MARK(zip(X1, X2)) -> MARK(X1)
   MARK(zip(X1, X2)) -> MARK(X2)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__INCR(x_1)) = x_1
   POL(A__ODDNS) = 0
   POL(A__REPITEMS(x_1)) = 2*x_1
   POL(A__TAKE(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(A__ZIP(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(MARK(x_1)) = x_1
   POL(a__incr(x_1)) = 2*x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = x_1
   POL(a__take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(a__zip(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(tail(x_1)) = x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 1 + 2*x_1 + 2*x_2


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   A__ZIP(cons(X, XS), cons(Y, YS)) -> MARK(X)
   MARK(tail(X)) -> MARK(X)
   MARK(repItems(X)) -> A__REPITEMS(mark(X))
   A__REPITEMS(cons(X, XS)) -> MARK(X)
   MARK(repItems(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)
   A__ZIP(cons(X, XS), cons(Y, YS)) -> MARK(Y)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(tail(X)) -> MARK(X)
   MARK(repItems(X)) -> A__REPITEMS(mark(X))
   A__REPITEMS(cons(X, XS)) -> MARK(X)
   MARK(repItems(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(repItems(X)) -> A__REPITEMS(mark(X))
   MARK(repItems(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__INCR(x_1)) = x_1
   POL(A__ODDNS) = 0
   POL(A__REPITEMS(x_1)) = 2*x_1
   POL(A__TAKE(x_1, x_2)) = x_1 + x_2
   POL(MARK(x_1)) = x_1
   POL(a__incr(x_1)) = 2*x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2 + 2*x_1
   POL(a__tail(x_1)) = 2*x_1
   POL(a__take(x_1, x_2)) = x_1 + x_2
   POL(a__zip(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = x_1 + x_2
   POL(zip(x_1, x_2)) = x_1 + x_2


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(tail(X)) -> MARK(X)
   A__REPITEMS(cons(X, XS)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(tail(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(tail(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__INCR(x_1)) = x_1
   POL(A__ODDNS) = 0
   POL(A__TAKE(x_1, x_2)) = 2*x_1 + x_2
   POL(MARK(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = 1 + 2*x_1
   POL(a__take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(a__zip(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zip(x_1, x_2)) = x_1 + x_2


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A__TAKE(s(N), cons(X, XS)) -> MARK(X)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__INCR(x_1)) = 2*x_1
   POL(A__ODDNS) = 0
   POL(A__TAKE(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(MARK(x_1)) = x_1
   POL(a__incr(x_1)) = 2*x_1
   POL(a__oddNs) = 0
   POL(a__pairNs) = 0
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = 2*x_1
   POL(a__take(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(a__zip(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(tail(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(zip(x_1, x_2)) = x_1 + x_2


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(oddNs) -> A__ODDNS
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(oddNs) -> A__ODDNS


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__INCR(x_1)) = x_1
   POL(A__ODDNS) = 2
   POL(MARK(x_1)) = 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__oddNs) = 2
   POL(a__pairNs) = 2
   POL(a__repItems(x_1)) = 2*x_1
   POL(a__tail(x_1)) = 2*x_1
   POL(a__take(x_1, x_2)) = x_1 + x_2
   POL(a__zip(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nil) = 0
   POL(oddNs) = 2
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 2
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = x_1 + x_2
   POL(zip(x_1, x_2)) = x_1 + x_2


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   A__ODDNS -> A__INCR(a__pairNs)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__INCR(cons(X, XS)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X1)
   MARK(pair(X1, X2)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__INCR_1(x_1) ) = 2x_1 + 2
POL( mark_1(x_1) ) = x_1
POL( pairNs ) = 1
POL( a__pairNs ) = 1
POL( incr_1(x_1) ) = 2x_1
POL( a__incr_1(x_1) ) = 2x_1
POL( oddNs ) = 2
POL( a__oddNs ) = 2
POL( take_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( a__take_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( zip_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( a__zip_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( tail_1(x_1) ) = 0
POL( a__tail_1(x_1) ) = max{0, -2}
POL( repItems_1(x_1) ) = x_1 + 2
POL( a__repItems_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = 2x_1 + 1
POL( 0 ) = 0
POL( s_1(x_1) ) = 2x_1
POL( nil ) = 2
POL( pair_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__oddNs -> a__incr(a__pairNs)
   a__pairNs -> cons(0, incr(oddNs))
   a__pairNs -> pairNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__pairNs -> cons(0, incr(oddNs))
   a__oddNs -> a__incr(a__pairNs)
   a__incr(cons(X, XS)) -> cons(s(mark(X)), incr(XS))
   a__take(s(N), cons(X, XS)) -> cons(mark(X), take(N, XS))
   a__zip(cons(X, XS), cons(Y, YS)) -> cons(pair(mark(X), mark(Y)), zip(XS, YS))
   a__repItems(cons(X, XS)) -> cons(mark(X), cons(X, repItems(XS)))
   mark(pairNs) -> a__pairNs
   mark(incr(X)) -> a__incr(mark(X))
   mark(oddNs) -> a__oddNs
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(zip(X1, X2)) -> a__zip(mark(X1), mark(X2))
   mark(tail(X)) -> a__tail(mark(X))
   mark(repItems(X)) -> a__repItems(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   mark(pair(X1, X2)) -> pair(mark(X1), mark(X2))
   a__pairNs -> pairNs
   a__incr(X) -> incr(X)
   a__oddNs -> oddNs
   a__take(X1, X2) -> take(X1, X2)
   a__zip(X1, X2) -> zip(X1, X2)
   a__tail(X) -> tail(X)
   a__repItems(X) -> repItems(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(s(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(incr(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(38)
YES
