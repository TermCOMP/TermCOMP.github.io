YES

Problem 1: 

(VAR vu95NonEmpty M N X Y)
(RULES
eq(num0,num0) -> ftrue
eq(num0,s(X)) -> ffalse
eq(s(X),num0) -> ffalse
eq(s(X),s(Y)) -> eq(X,Y)
ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
ifrm(ftrue,N,add(M,X)) -> rm(N,X)
purge(add(N,X)) -> add(N,purge(rm(N,X)))
purge(nil) -> nil
rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
rm(N,nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 EQ(s(X),s(Y)) -> EQ(X,Y)
 IFRM(ffalse,N,add(M,X)) -> RM(N,X)
 IFRM(ftrue,N,add(M,X)) -> RM(N,X)
 PURGE(add(N,X)) -> PURGE(rm(N,X))
 PURGE(add(N,X)) -> RM(N,X)
 RM(N,add(M,X)) -> EQ(N,M)
 RM(N,add(M,X)) -> IFRM(eq(N,M),N,add(M,X))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 EQ(s(X),s(Y)) -> EQ(X,Y)
 IFRM(ffalse,N,add(M,X)) -> RM(N,X)
 IFRM(ftrue,N,add(M,X)) -> RM(N,X)
 PURGE(add(N,X)) -> PURGE(rm(N,X))
 PURGE(add(N,X)) -> RM(N,X)
 RM(N,add(M,X)) -> EQ(N,M)
 RM(N,add(M,X)) -> IFRM(eq(N,M),N,add(M,X))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 EQ(s(X),s(Y)) -> EQ(X,Y)
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->->Cycle:
->->-> Pairs:
 IFRM(ffalse,N,add(M,X)) -> RM(N,X)
 IFRM(ftrue,N,add(M,X)) -> RM(N,X)
 RM(N,add(M,X)) -> IFRM(eq(N,M),N,add(M,X))
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->->Cycle:
->->-> Pairs:
 PURGE(add(N,X)) -> PURGE(rm(N,X))
->->-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 EQ(s(X),s(Y)) -> EQ(X,Y)
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Projection:
 pi(EQ) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 IFRM(ffalse,N,add(M,X)) -> RM(N,X)
 IFRM(ftrue,N,add(M,X)) -> RM(N,X)
 RM(N,add(M,X)) -> IFRM(eq(N,M),N,add(M,X))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Projection:
 pi(IFRM) = 3
 pi(RM) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 RM(N,add(M,X)) -> IFRM(eq(N,M),N,add(M,X))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 PURGE(add(N,X)) -> PURGE(rm(N,X))
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
-> Usable rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[eq](X1,X2) = 2.X1 + 2.X2 + 2
[ifrm](X1,X2,X3) = 2.X3
[purge](X) = 0
[rm](X1,X2) = 2.X2 + 1
[num0] = 2
[add](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 1
[s](X) = 2.X + 2
[ftrue] = 2
[EQ](X1,X2) = 0
[IFRM](X1,X2,X3) = 0
[PURGE](X) = 2.X
[RM](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 eq(num0,num0) -> ftrue
 eq(num0,s(X)) -> ffalse
 eq(s(X),num0) -> ffalse
 eq(s(X),s(Y)) -> eq(X,Y)
 ifrm(ffalse,N,add(M,X)) -> add(M,rm(N,X))
 ifrm(ftrue,N,add(M,X)) -> rm(N,X)
 purge(add(N,X)) -> add(N,purge(rm(N,X)))
 purge(nil) -> nil
 rm(N,add(M,X)) -> ifrm(eq(N,M),N,add(M,X))
 rm(N,nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
