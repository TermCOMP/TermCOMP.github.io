YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qQNDm.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) NonInfProof [EQUIVALENT, 0 ms]
        (20) AND
            (21) QDP
                (22) DependencyGraphProof [EQUIVALENT, 0 ms]
                (23) TRUE
            (24) QDP
                (25) DependencyGraphProof [EQUIVALENT, 0 ms]
                (26) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   int(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> cons(x, int(s(x), y))
   if(false, x, y) -> nil

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   int(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> cons(x, int(s(x), y))
   if(false, x, y) -> nil

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)
   INT(x, y) -> IF(le(x, y), x, y)
   INT(x, y) -> LE(x, y)
   IF(true, x, y) -> INT(s(x), y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   int(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> cons(x, int(s(x), y))
   if(false, x, y) -> nil

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   int(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> cons(x, int(s(x), y))
   if(false, x, y) -> nil

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(x, y) -> IF(le(x, y), x, y)
   IF(true, x, y) -> INT(s(x), y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   int(x, y) -> if(le(x, y), x, y)
   if(true, x, y) -> cons(x, int(s(x), y))
   if(false, x, y) -> nil

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(x, y) -> IF(le(x, y), x, y)
   IF(true, x, y) -> INT(s(x), y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   int(x0, x1)
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(x, y) -> IF(le(x, y), x, y)
   IF(true, x, y) -> INT(s(x), y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair INT(x, y) -> IF(le(x, y), x, y) the following chains were created:
*We consider the chain IF(true, x2, x3) -> INT(s(x2), x3), INT(x4, x5) -> IF(le(x4, x5), x4, x5) which results in the following constraint:

(1)    (INT(s(x2), x3)=INT(x4, x5)  ==>  INT(x4, x5)_>=_IF(le(x4, x5), x4, x5))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (INT(s(x2), x3)_>=_IF(le(s(x2), x3), s(x2), x3))








For Pair IF(true, x, y) -> INT(s(x), y) the following chains were created:
*We consider the chain INT(x6, x7) -> IF(le(x6, x7), x6, x7), IF(true, x8, x9) -> INT(s(x8), x9) which results in the following constraint:

(1)    (IF(le(x6, x7), x6, x7)=IF(true, x8, x9)  ==>  IF(true, x8, x9)_>=_INT(s(x8), x9))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (le(x6, x7)=true  ==>  IF(true, x6, x7)_>=_INT(s(x6), x7))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on le(x6, x7)=true which results in the following new constraints:

(3)    (true=true  ==>  IF(true, 0, x12)_>=_INT(s(0), x12))

(4)    (le(x15, x14)=true & (le(x15, x14)=true  ==>  IF(true, x15, x14)_>=_INT(s(x15), x14))  ==>  IF(true, s(x15), s(x14))_>=_INT(s(s(x15)), s(x14)))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(true, 0, x12)_>=_INT(s(0), x12))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (le(x15, x14)=true  ==>  IF(true, x15, x14)_>=_INT(s(x15), x14)) with sigma = [ ] which results in the following new constraint:

(6)    (IF(true, x15, x14)_>=_INT(s(x15), x14)  ==>  IF(true, s(x15), s(x14))_>=_INT(s(s(x15)), s(x14)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*INT(x, y) -> IF(le(x, y), x, y)

*(INT(s(x2), x3)_>=_IF(le(s(x2), x3), s(x2), x3))




*IF(true, x, y) -> INT(s(x), y)

*(IF(true, 0, x12)_>=_INT(s(0), x12))


*(IF(true, x15, x14)_>=_INT(s(x15), x14)  ==>  IF(true, s(x15), s(x14))_>=_INT(s(s(x15)), s(x14)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3)) = -1 - x_1 - x_2 + x_3
   POL(INT(x_1, x_2)) = -1 - x_1 + x_2
   POL(c) = -2
   POL(false) = 1
   POL(le(x_1, x_2)) = 1
   POL(s(x_1)) = 1 + x_1
   POL(true) = 1


The following pairs  are in P_>:
   INT(x, y) -> IF(le(x, y), x, y)
The following pairs are in P_bound:
   IF(true, x, y) -> INT(s(x), y)
The following rules are usable:
   true -> le(0, y)
   false -> le(s(x), 0)
   le(x, y) -> le(s(x), s(y))

----------------------------------------

(20)
Complex Obligation (AND)

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> INT(s(x), y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(23)
TRUE

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(x, y) -> IF(le(x, y), x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(26)
TRUE
