YES

Problem 1: 

(VAR vu95NonEmpty x y z)
(RULES
implies(not(x),or(y,z)) -> implies(y,or(x,z))
implies(not(x),y) -> or(x,y)
implies(x,or(y,z)) -> or(y,implies(x,z))
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IMPLIES(not(x),or(y,z)) -> IMPLIES(y,or(x,z))
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))

Problem 1: 

SCC Processor:
-> Pairs:
 IMPLIES(not(x),or(y,z)) -> IMPLIES(y,or(x,z))
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IMPLIES(not(x),or(y,z)) -> IMPLIES(y,or(x,z))
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
->->-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 IMPLIES(not(x),or(y,z)) -> IMPLIES(y,or(x,z))
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[implies](X1,X2) = 0
[fSNonEmpty] = 0
[not](X) = 2.X + 2
[or](X1,X2) = 2.X1 + 2.X2
[IMPLIES](X1,X2) = 2.X1 + 2.X2

Problem 1: 

SCC Processor:
-> Pairs:
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
->->-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))

Problem 1: 

Subterm Processor:
-> Pairs:
 IMPLIES(x,or(y,z)) -> IMPLIES(x,z)
-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))
->Projection:
 pi(IMPLIES) = 2

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 implies(not(x),or(y,z)) -> implies(y,or(x,z))
 implies(not(x),y) -> or(x,y)
 implies(x,or(y,z)) -> or(y,implies(x,z))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
