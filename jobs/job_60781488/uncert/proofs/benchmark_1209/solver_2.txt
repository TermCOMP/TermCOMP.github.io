NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Z8sJp.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 30 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(10) QTRS
(11) DependencyPairsProof [EQUIVALENT, 0 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) QDP
(15) UsableRulesProof [EQUIVALENT, 0 ms]
(16) QDP
(17) QReductionProof [EQUIVALENT, 0 ms]
(18) QDP
(19) TransformationProof [EQUIVALENT, 0 ms]
(20) QDP
(21) UsableRulesProof [EQUIVALENT, 0 ms]
(22) QDP
(23) QReductionProof [EQUIVALENT, 0 ms]
(24) QDP
(25) TransformationProof [EQUIVALENT, 0 ms]
(26) QDP
(27) UsableRulesProof [EQUIVALENT, 0 ms]
(28) QDP
(29) QReductionProof [EQUIVALENT, 0 ms]
(30) QDP
(31) TransformationProof [EQUIVALENT, 0 ms]
(32) QDP
(33) NonTerminationLoopProof [COMPLETE, 0 ms]
(34) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   and(tt, X) -> activate(X)
   length(nil) -> 0
   length(cons(N, L)) -> s(length(activate(L)))
   zeros -> n__zeros
   activate(n__zeros) -> zeros
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(and(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(length(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   and(tt, X) -> activate(X)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(nil) -> 0
   length(cons(N, L)) -> s(length(activate(L)))
   zeros -> n__zeros
   activate(n__zeros) -> zeros
   activate(X) -> X

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(length(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   length(nil) -> 0




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   zeros -> n__zeros
   activate(n__zeros) -> zeros
   activate(X) -> X

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(length(x_1)) = 2*x_1
   POL(n__zeros) = 1
   POL(s(x_1)) = x_1
   POL(zeros) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   zeros -> n__zeros




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   activate(n__zeros) -> zeros
   activate(X) -> X

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2 + x_1
   POL(cons(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(length(x_1)) = 2*x_1
   POL(n__zeros) = 0
   POL(s(x_1)) = x_1
   POL(zeros) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   activate(X) -> X




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   activate(n__zeros) -> zeros

Q is empty.

----------------------------------------

(9) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   activate(n__zeros) -> zeros

The set Q consists of the following terms:

   zeros
   length(cons(x0, x1))
   activate(n__zeros)


----------------------------------------

(11) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ACTIVATE(n__zeros) -> ZEROS

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   activate(n__zeros) -> zeros

The set Q consists of the following terms:

   zeros
   length(cons(x0, x1))
   activate(n__zeros)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   length(cons(N, L)) -> s(length(activate(L)))
   activate(n__zeros) -> zeros

The set Q consists of the following terms:

   zeros
   length(cons(x0, x1))
   activate(n__zeros)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros
   length(cons(x0, x1))
   activate(n__zeros)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   length(cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros
   activate(n__zeros)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LENGTH(cons(N, L)) -> LENGTH(activate(L)) at position [0] we obtained the following new rules [LPAR04]:

   (LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros),LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros)

The TRS R consists of the following rules:

   activate(n__zeros) -> zeros
   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros
   activate(n__zeros)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros
   activate(n__zeros)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   activate(n__zeros)


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LENGTH(cons(y0, n__zeros)) -> LENGTH(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros)),LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros)))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)

The set Q consists of the following terms:

   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros))

R is empty.
The set Q consists of the following terms:

   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   zeros


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule LENGTH(cons(y0, n__zeros)) -> LENGTH(cons(0, n__zeros)) we obtained the following new rules [LPAR04]:

   (LENGTH(cons(0, n__zeros)) -> LENGTH(cons(0, n__zeros)),LENGTH(cons(0, n__zeros)) -> LENGTH(cons(0, n__zeros)))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(0, n__zeros)) -> LENGTH(cons(0, n__zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = LENGTH(cons(0, n__zeros)) evaluates to  t =LENGTH(cons(0, n__zeros))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from LENGTH(cons(0, n__zeros)) to LENGTH(cons(0, n__zeros)).




----------------------------------------

(34)
NO
