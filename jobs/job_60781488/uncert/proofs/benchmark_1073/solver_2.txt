NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/6hmSC.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 38 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 8 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 7 ms]
(10) QTRS
(11) QTRSRRRProof [EQUIVALENT, 0 ms]
(12) QTRS
(13) QTRSRRRProof [EQUIVALENT, 0 ms]
(14) QTRS
(15) QTRSRRRProof [EQUIVALENT, 0 ms]
(16) QTRS
(17) QTRSRRRProof [EQUIVALENT, 2 ms]
(18) QTRS
(19) DependencyPairsProof [EQUIVALENT, 0 ms]
(20) QDP
(21) DependencyGraphProof [EQUIVALENT, 0 ms]
(22) AND
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) NonTerminationLoopProof [COMPLETE, 0 ms]
        (32) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(nil, XS) -> nil
   zip(X, nil) -> nil
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   tail(cons(X, XS)) -> activate(XS)
   repItems(nil) -> nil
   repItems(cons(X, XS)) -> cons(X, n__cons(X, n__repItems(activate(XS))))
   incr(X) -> n__incr(X)
   take(X1, X2) -> n__take(X1, X2)
   zip(X1, X2) -> n__zip(X1, X2)
   cons(X1, X2) -> n__cons(X1, X2)
   repItems(X) -> n__repItems(X)
   activate(n__incr(X)) -> incr(X)
   activate(n__take(X1, X2)) -> take(X1, X2)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__repItems(X)) -> repItems(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = x_1 + x_2
   POL(n__incr(x_1)) = x_1
   POL(n__repItems(x_1)) = x_1
   POL(n__take(x_1, x_2)) = x_1 + x_2
   POL(n__zip(x_1, x_2)) = 1 + x_1 + x_2
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   zip(nil, XS) -> nil
   zip(X, nil) -> nil
   zip(X1, X2) -> n__zip(X1, X2)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   tail(cons(X, XS)) -> activate(XS)
   repItems(nil) -> nil
   repItems(cons(X, XS)) -> cons(X, n__cons(X, n__repItems(activate(XS))))
   incr(X) -> n__incr(X)
   take(X1, X2) -> n__take(X1, X2)
   cons(X1, X2) -> n__cons(X1, X2)
   repItems(X) -> n__repItems(X)
   activate(n__incr(X)) -> incr(X)
   activate(n__take(X1, X2)) -> take(X1, X2)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__repItems(X)) -> repItems(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = x_1 + x_2
   POL(n__incr(x_1)) = x_1
   POL(n__repItems(x_1)) = x_1
   POL(n__take(x_1, x_2)) = 2*x_1 + x_2
   POL(n__zip(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + 2*x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   tail(cons(X, XS)) -> activate(XS)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   repItems(nil) -> nil
   repItems(cons(X, XS)) -> cons(X, n__cons(X, n__repItems(activate(XS))))
   incr(X) -> n__incr(X)
   take(X1, X2) -> n__take(X1, X2)
   cons(X1, X2) -> n__cons(X1, X2)
   repItems(X) -> n__repItems(X)
   activate(n__incr(X)) -> incr(X)
   activate(n__take(X1, X2)) -> take(X1, X2)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__repItems(X)) -> repItems(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = x_1 + x_2
   POL(n__incr(x_1)) = x_1
   POL(n__repItems(x_1)) = 1 + x_1
   POL(n__take(x_1, x_2)) = x_1 + x_2
   POL(n__zip(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   repItems(nil) -> nil
   repItems(X) -> n__repItems(X)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(0, XS) -> nil
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   repItems(cons(X, XS)) -> cons(X, n__cons(X, n__repItems(activate(XS))))
   incr(X) -> n__incr(X)
   take(X1, X2) -> n__take(X1, X2)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__take(X1, X2)) -> take(X1, X2)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__repItems(X)) -> repItems(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = x_1 + x_2
   POL(n__incr(x_1)) = x_1
   POL(n__repItems(x_1)) = x_1
   POL(n__take(x_1, x_2)) = 1 + x_1 + x_2
   POL(n__zip(x_1, x_2)) = x_1 + x_2
   POL(nil) = 1
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(0, XS) -> nil
   take(X1, X2) -> n__take(X1, X2)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   repItems(cons(X, XS)) -> cons(X, n__cons(X, n__repItems(activate(XS))))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__take(X1, X2)) -> take(X1, X2)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__repItems(X)) -> repItems(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = 2*x_1 + x_2
   POL(n__incr(x_1)) = x_1
   POL(n__repItems(x_1)) = 1 + x_1
   POL(n__take(x_1, x_2)) = 1 + x_1 + x_2
   POL(n__zip(x_1, x_2)) = x_1 + x_2
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   repItems(cons(X, XS)) -> cons(X, n__cons(X, n__repItems(activate(XS))))
   activate(n__take(X1, X2)) -> take(X1, X2)




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__repItems(X)) -> repItems(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(11) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__incr(x_1)) = 2*x_1
   POL(n__repItems(x_1)) = 1 + 2*x_1
   POL(n__take(x_1, x_2)) = x_1 + 2*x_2
   POL(n__zip(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + x_2
   POL(pairNs) = 0
   POL(repItems(x_1)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = x_1 + 2*x_2
   POL(zip(x_1, x_2)) = 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   activate(n__repItems(X)) -> repItems(X)




----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(13) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__incr(x_1)) = 2*x_1
   POL(n__take(x_1, x_2)) = x_1 + x_2
   POL(n__zip(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + x_2
   POL(pairNs) = 0
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(zip(x_1, x_2)) = 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(s(N), cons(X, XS)) -> cons(X, n__take(N, activate(XS)))




----------------------------------------

(14)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__zip(X1, X2)) -> zip(X1, X2)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(15) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = 2*x_1 + x_2
   POL(n__incr(x_1)) = x_1
   POL(n__zip(x_1, x_2)) = 1 + x_1 + x_2
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = 2*x_1 + x_2
   POL(pairNs) = 0
   POL(s(x_1)) = 2*x_1
   POL(zip(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   activate(n__zip(X1, X2)) -> zip(X1, X2)




----------------------------------------

(16)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(17) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = 2*x_1
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__incr(x_1)) = 2*x_1
   POL(n__zip(x_1, x_2)) = x_1 + 2*x_2
   POL(oddNs) = 0
   POL(pair(x_1, x_2)) = x_1 + x_2
   POL(pairNs) = 0
   POL(s(x_1)) = x_1
   POL(zip(x_1, x_2)) = 1 + x_1 + 2*x_2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   zip(cons(X, XS), cons(Y, YS)) -> cons(pair(X, Y), n__zip(activate(XS), activate(YS)))




----------------------------------------

(18)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(19) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PAIRNS -> CONS(0, n__incr(oddNs))
   PAIRNS -> ODDNS
   ODDNS -> INCR(pairNs)
   ODDNS -> PAIRNS
   INCR(cons(X, XS)) -> CONS(s(X), n__incr(activate(XS)))
   INCR(cons(X, XS)) -> ACTIVATE(XS)
   ACTIVATE(n__incr(X)) -> INCR(X)
   ACTIVATE(n__cons(X1, X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(22)
Complex Obligation (AND)

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INCR(cons(X, XS)) -> ACTIVATE(XS)
   ACTIVATE(n__incr(X)) -> INCR(X)

The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INCR(cons(X, XS)) -> ACTIVATE(XS)
   ACTIVATE(n__incr(X)) -> INCR(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__incr(X)) -> INCR(X)
The graph contains the following edges 1 > 1


*INCR(cons(X, XS)) -> ACTIVATE(XS)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PAIRNS -> ODDNS
   ODDNS -> PAIRNS

The TRS R consists of the following rules:

   pairNs -> cons(0, n__incr(oddNs))
   oddNs -> incr(pairNs)
   incr(cons(X, XS)) -> cons(s(X), n__incr(activate(XS)))
   incr(X) -> n__incr(X)
   cons(X1, X2) -> n__cons(X1, X2)
   activate(n__incr(X)) -> incr(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PAIRNS -> ODDNS
   ODDNS -> PAIRNS

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = ODDNS evaluates to  t =ODDNS

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

ODDNS -> PAIRNS
with rule ODDNS -> PAIRNS at position [] and matcher [ ]

PAIRNS -> ODDNS
with rule PAIRNS -> ODDNS

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(32)
NO
