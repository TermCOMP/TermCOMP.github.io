YES

Problem 1: 

(VAR vu95NonEmpty I P V V1 V2 X X1 X2 Y Z)
(RULES
u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
u95u95(nil,X) -> X
u95u95(X,nil) -> X
u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
a -> nu95u95a
activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
activate(nu95u95a) -> a
activate(nu95u95e) -> e
activate(nu95u95i) -> i
activate(nu95u95isList(X)) -> isList(X)
activate(nu95u95isNeList(X)) -> isNeList(X)
activate(nu95u95isPal(X)) -> isPal(X)
activate(nu95u95nil) -> nil
activate(nu95u95o) -> o
activate(nu95u95u) -> u
activate(X) -> X
and(tt,X) -> activate(X)
e -> nu95u95e
i -> nu95u95i
isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
isList(nu95u95nil) -> tt
isList(V) -> isNeList(activate(V))
isList(X) -> nu95u95isList(X)
isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
isNeList(V) -> isQid(activate(V))
isNeList(X) -> nu95u95isNeList(X)
isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
isNePal(V) -> isQid(activate(V))
isPal(nu95u95nil) -> tt
isPal(V) -> isNePal(activate(V))
isPal(X) -> nu95u95isPal(X)
isQid(nu95u95a) -> tt
isQid(nu95u95e) -> tt
isQid(nu95u95i) -> tt
isQid(nu95u95o) -> tt
isQid(nu95u95u) -> tt
nil -> nu95u95nil
o -> nu95u95o
u -> nu95u95u
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
 ACTIVATE(nu95u95u95u95(X1,X2)) -> U95U95(activate(X1),activate(X2))
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95a) -> A
 ACTIVATE(nu95u95e) -> E
 ACTIVATE(nu95u95i) -> I
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 ACTIVATE(nu95u95nil) -> NIL
 ACTIVATE(nu95u95o) -> O
 ACTIVATE(nu95u95u) -> U
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNELIST(V) -> ISQID(activate(V))
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ISQID(activate(I))
 ISNEPAL(V) -> ACTIVATE(V)
 ISNEPAL(V) -> ISQID(activate(V))
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u

Problem 1: 

SCC Processor:
-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
 ACTIVATE(nu95u95u95u95(X1,X2)) -> U95U95(activate(X1),activate(X2))
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95a) -> A
 ACTIVATE(nu95u95e) -> E
 ACTIVATE(nu95u95i) -> I
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 ACTIVATE(nu95u95nil) -> NIL
 ACTIVATE(nu95u95o) -> O
 ACTIVATE(nu95u95u) -> U
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNELIST(V) -> ISQID(activate(V))
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ISQID(activate(I))
 ISNEPAL(V) -> ACTIVATE(V)
 ISNEPAL(V) -> ISQID(activate(V))
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Projection:
 pi(U95U95) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X1)
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 1
[activate](X) = X
[and](X1,X2) = X2
[e] = 2
[i] = 1
[isList](X) = X + 2
[isNeList](X) = X + 2
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = X + 2
[nil] = 2
[o] = 2
[u] = 0
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 1
[nu95u95e] = 2
[nu95u95i] = 1
[nu95u95isList](X) = X + 2
[nu95u95isNeList](X) = X + 2
[nu95u95isPal](X) = 2.X + 2
[nu95u95nil] = 2
[nu95u95o] = 2
[nu95u95u] = 0
[tt] = 2
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = 2.X + 2
[AND](X1,X2) = 2.X2 + 2
[E] = 0
[I] = 0
[ISLIST](X) = 2.X + 2
[ISNELIST](X) = 2.X + 2
[ISNEPAL](X) = 2.X + 2
[ISPAL](X) = 2.X + 2
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95u95u95(X1,X2)) -> ACTIVATE(X2)
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 1
[activate](X) = X
[and](X1,X2) = 2.X1 + X2
[e] = 2
[i] = 2
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 2
[isNePal](X) = 2.X + 1
[isPal](X) = 2.X + 1
[isQid](X) = 2.X + 1
[nil] = 2
[o] = 2
[u] = 1
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 1
[nu95u95e] = 2
[nu95u95i] = 2
[nu95u95isList](X) = 2.X + 2
[nu95u95isNeList](X) = 2.X + 2
[nu95u95isPal](X) = 2.X + 1
[nu95u95nil] = 2
[nu95u95o] = 2
[nu95u95u] = 1
[tt] = 2
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = X + 2
[AND](X1,X2) = 2.X1 + X2
[E] = 0
[I] = 0
[ISLIST](X) = 2.X + 2
[ISNELIST](X) = 2.X + 2
[ISNEPAL](X) = 2.X + 2
[ISPAL](X) = 2.X + 2
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95isList(X)) -> ISLIST(X)
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 2
[activate](X) = X
[and](X1,X2) = 2.X1 + X2
[e] = 2
[i] = 2
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 1
[isNePal](X) = 2.X + 1
[isPal](X) = 2.X + 2
[isQid](X) = 2.X + 1
[nil] = 2
[o] = 1
[u] = 1
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 2
[nu95u95e] = 2
[nu95u95i] = 2
[nu95u95isList](X) = 2.X + 2
[nu95u95isNeList](X) = 2.X + 1
[nu95u95isPal](X) = 2.X + 2
[nu95u95nil] = 2
[nu95u95o] = 1
[nu95u95u] = 1
[tt] = 2
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = X + 2
[AND](X1,X2) = X1 + X2 + 2
[E] = 0
[I] = 0
[ISLIST](X) = 2.X + 2
[ISNELIST](X) = 2.X + 2
[ISNEPAL](X) = 2.X + 2
[ISPAL](X) = 2.X + 2
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95isNeList(X)) -> ISNELIST(X)
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 2
[activate](X) = X
[and](X1,X2) = 2.X1 + X2
[e] = 2
[i] = 2
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 2
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = 2.X + 1
[nil] = 2
[o] = 1
[u] = 2
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 2
[nu95u95e] = 2
[nu95u95i] = 2
[nu95u95isList](X) = 2.X + 2
[nu95u95isNeList](X) = 2.X + 2
[nu95u95isPal](X) = 2.X + 2
[nu95u95nil] = 2
[nu95u95o] = 1
[nu95u95u] = 2
[tt] = 2
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = X + 1
[AND](X1,X2) = 2.X1 + X2
[E] = 0
[I] = 0
[ISLIST](X) = 2.X + 2
[ISNELIST](X) = 2.X + 2
[ISNEPAL](X) = 2.X + 2
[ISPAL](X) = 2.X + 2
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISLIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISLIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isList(activate(V2)))
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ACTIVATE(V)
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V1)
 ISNELIST(nu95u95u95u95(V1,V2)) -> ACTIVATE(V2)
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> AND(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
 ISNELIST(V) -> ACTIVATE(V)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->->Cycle:
->->-> Pairs:
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u


The problem is decomposed in 2 subproblems.

Problem 1.2.1: 

Reduction Pair Processor:
-> Pairs:
 ACTIVATE(nu95u95isPal(X)) -> ISPAL(X)
 AND(tt,X) -> ACTIVATE(X)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 2
[activate](X) = X
[and](X1,X2) = 2.X1 + X2
[e] = 2
[i] = 0
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 2
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = 2.X + 2
[nil] = 2
[o] = 2
[u] = 2
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 2
[nu95u95e] = 2
[nu95u95i] = 0
[nu95u95isList](X) = 2.X + 2
[nu95u95isNeList](X) = 2.X + 2
[nu95u95isPal](X) = 2.X + 2
[nu95u95nil] = 2
[nu95u95o] = 2
[nu95u95u] = 2
[tt] = 1
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = 2.X + 2
[AND](X1,X2) = X1 + 2.X2 + 1
[E] = 0
[I] = 0
[ISLIST](X) = 0
[ISNELIST](X) = 0
[ISNEPAL](X) = 2.X + 2
[ISPAL](X) = 2.X + 2
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2.1: 

SCC Processor:
-> Pairs:
 AND(tt,X) -> ACTIVATE(X)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(I)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> ACTIVATE(P)
 ISNEPAL(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> AND(isQid(activate(I)),nu95u95isPal(activate(P)))
 ISNEPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ACTIVATE(V)
 ISPAL(V) -> ISNEPAL(activate(V))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2.2: 

Reduction Pair Processor:
-> Pairs:
 ISLIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 2
[activate](X) = X
[and](X1,X2) = 2.X1 + X2
[e] = 2
[i] = 1
[isList](X) = 2.X + 1
[isNeList](X) = 2.X + 1
[isNePal](X) = 2.X + 1
[isPal](X) = 2.X + 1
[isQid](X) = 2.X + 1
[nil] = 2
[o] = 2
[u] = 2
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 2
[nu95u95e] = 2
[nu95u95i] = 1
[nu95u95isList](X) = 2.X + 1
[nu95u95isNeList](X) = 2.X + 1
[nu95u95isPal](X) = 2.X + 1
[nu95u95nil] = 2
[nu95u95o] = 2
[nu95u95u] = 2
[tt] = 2
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = 0
[AND](X1,X2) = 0
[E] = 0
[I] = 0
[ISLIST](X) = X + 1
[ISNELIST](X) = X + 1
[ISNEPAL](X) = 0
[ISPAL](X) = 0
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2.2: 

SCC Processor:
-> Pairs:
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u

Problem 1.2.2: 

Reduction Pair Processor:
-> Pairs:
 ISLIST(V) -> ISNELIST(activate(V))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 2
[activate](X) = X
[and](X1,X2) = X2 + 2
[e] = 2
[i] = 1
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 2
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = 2.X + 2
[nil] = 2
[o] = 2
[u] = 2
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 2
[nu95u95e] = 2
[nu95u95i] = 1
[nu95u95isList](X) = 2.X + 2
[nu95u95isNeList](X) = 2.X + 2
[nu95u95isPal](X) = 2.X + 2
[nu95u95nil] = 2
[nu95u95o] = 2
[nu95u95u] = 2
[tt] = 2
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = 0
[AND](X1,X2) = 0
[E] = 0
[I] = 0
[ISLIST](X) = 2.X + 1
[ISNELIST](X) = 2.X
[ISNEPAL](X) = 0
[ISPAL](X) = 0
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2.2: 

SCC Processor:
-> Pairs:
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISLIST(activate(V1))
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u

Problem 1.2.2: 

Reduction Pair Processor:
-> Pairs:
 ISNELIST(nu95u95u95u95(V1,V2)) -> ISNELIST(activate(V1))
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[a] = 2
[activate](X) = 2.X
[and](X1,X2) = 2.X1 + 2.X2
[e] = 2
[i] = 2
[isList](X) = 0
[isNeList](X) = 0
[isNePal](X) = 2
[isPal](X) = 2
[isQid](X) = 0
[nil] = 1
[o] = 2
[u] = 2
[fSNonEmpty] = 0
[nu95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[nu95u95a] = 1
[nu95u95e] = 2
[nu95u95i] = 2
[nu95u95isList](X) = 0
[nu95u95isNeList](X) = 0
[nu95u95isPal](X) = 1
[nu95u95nil] = 1
[nu95u95o] = 1
[nu95u95u] = 2
[tt] = 0
[U95U95](X1,X2) = 0
[A] = 0
[ACTIVATE](X) = 0
[AND](X1,X2) = 0
[E] = 0
[I] = 0
[ISLIST](X) = 0
[ISNELIST](X) = 2.X
[ISNEPAL](X) = 0
[ISPAL](X) = 0
[ISQID](X) = 0
[NIL] = 0
[O] = 0
[U] = 0

Problem 1.2.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 u95u95(X1,X2) -> nu95u95u95u95(X1,X2)
 a -> nu95u95a
 activate(nu95u95u95u95(X1,X2)) -> u95u95(activate(X1),activate(X2))
 activate(nu95u95a) -> a
 activate(nu95u95e) -> e
 activate(nu95u95i) -> i
 activate(nu95u95isList(X)) -> isList(X)
 activate(nu95u95isNeList(X)) -> isNeList(X)
 activate(nu95u95isPal(X)) -> isPal(X)
 activate(nu95u95nil) -> nil
 activate(nu95u95o) -> o
 activate(nu95u95u) -> u
 activate(X) -> X
 and(tt,X) -> activate(X)
 e -> nu95u95e
 i -> nu95u95i
 isList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isList(activate(V2)))
 isList(nu95u95nil) -> tt
 isList(V) -> isNeList(activate(V))
 isList(X) -> nu95u95isList(X)
 isNeList(nu95u95u95u95(V1,V2)) -> and(isList(activate(V1)),nu95u95isNeList(activate(V2)))
 isNeList(nu95u95u95u95(V1,V2)) -> and(isNeList(activate(V1)),nu95u95isList(activate(V2)))
 isNeList(V) -> isQid(activate(V))
 isNeList(X) -> nu95u95isNeList(X)
 isNePal(nu95u95u95u95(I,nu95u95u95u95(P,I))) -> and(isQid(activate(I)),nu95u95isPal(activate(P)))
 isNePal(V) -> isQid(activate(V))
 isPal(nu95u95nil) -> tt
 isPal(V) -> isNePal(activate(V))
 isPal(X) -> nu95u95isPal(X)
 isQid(nu95u95a) -> tt
 isQid(nu95u95e) -> tt
 isQid(nu95u95i) -> tt
 isQid(nu95u95o) -> tt
 isQid(nu95u95u) -> tt
 nil -> nu95u95nil
 o -> nu95u95o
 u -> nu95u95u
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
