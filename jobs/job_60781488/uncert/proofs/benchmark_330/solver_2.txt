YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AmEGt.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   if(true, x, y) -> x
   if(false, x, y) -> y
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))
   mem(x, nil) -> false
   mem(x, cons(y, l)) -> ifmem(eq(x, y), x, l)
   ifmem(true, x, l) -> true
   ifmem(false, x, l) -> mem(x, l)
   inter(x, nil) -> nil
   inter(nil, x) -> nil
   inter(app(l1, l2), l3) -> app(inter(l1, l3), inter(l2, l3))
   inter(l1, app(l2, l3)) -> app(inter(l1, l2), inter(l1, l3))
   inter(cons(x, l1), l2) -> ifinter(mem(x, l2), x, l1, l2)
   inter(l1, cons(x, l2)) -> ifinter(mem(x, l1), x, l2, l1)
   ifinter(true, x, l1, l2) -> cons(x, inter(l1, l2))
   ifinter(false, x, l1, l2) -> inter(l1, l2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)
   APP(cons(x, l1), l2) -> APP(l1, l2)
   APP(app(l1, l2), l3) -> APP(l1, app(l2, l3))
   APP(app(l1, l2), l3) -> APP(l2, l3)
   MEM(x, cons(y, l)) -> IFMEM(eq(x, y), x, l)
   MEM(x, cons(y, l)) -> EQ(x, y)
   IFMEM(false, x, l) -> MEM(x, l)
   INTER(app(l1, l2), l3) -> APP(inter(l1, l3), inter(l2, l3))
   INTER(app(l1, l2), l3) -> INTER(l1, l3)
   INTER(app(l1, l2), l3) -> INTER(l2, l3)
   INTER(l1, app(l2, l3)) -> APP(inter(l1, l2), inter(l1, l3))
   INTER(l1, app(l2, l3)) -> INTER(l1, l2)
   INTER(l1, app(l2, l3)) -> INTER(l1, l3)
   INTER(cons(x, l1), l2) -> IFINTER(mem(x, l2), x, l1, l2)
   INTER(cons(x, l1), l2) -> MEM(x, l2)
   INTER(l1, cons(x, l2)) -> IFINTER(mem(x, l1), x, l2, l1)
   INTER(l1, cons(x, l2)) -> MEM(x, l1)
   IFINTER(true, x, l1, l2) -> INTER(l1, l2)
   IFINTER(false, x, l1, l2) -> INTER(l1, l2)

The TRS R consists of the following rules:

   if(true, x, y) -> x
   if(false, x, y) -> y
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))
   mem(x, nil) -> false
   mem(x, cons(y, l)) -> ifmem(eq(x, y), x, l)
   ifmem(true, x, l) -> true
   ifmem(false, x, l) -> mem(x, l)
   inter(x, nil) -> nil
   inter(nil, x) -> nil
   inter(app(l1, l2), l3) -> app(inter(l1, l3), inter(l2, l3))
   inter(l1, app(l2, l3)) -> app(inter(l1, l2), inter(l1, l3))
   inter(cons(x, l1), l2) -> ifinter(mem(x, l2), x, l1, l2)
   inter(l1, cons(x, l2)) -> ifinter(mem(x, l1), x, l2, l1)
   ifinter(true, x, l1, l2) -> cons(x, inter(l1, l2))
   ifinter(false, x, l1, l2) -> inter(l1, l2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(l1, l2), l3) -> APP(l1, app(l2, l3))
   APP(cons(x, l1), l2) -> APP(l1, l2)
   APP(app(l1, l2), l3) -> APP(l2, l3)

The TRS R consists of the following rules:

   if(true, x, y) -> x
   if(false, x, y) -> y
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))
   mem(x, nil) -> false
   mem(x, cons(y, l)) -> ifmem(eq(x, y), x, l)
   ifmem(true, x, l) -> true
   ifmem(false, x, l) -> mem(x, l)
   inter(x, nil) -> nil
   inter(nil, x) -> nil
   inter(app(l1, l2), l3) -> app(inter(l1, l3), inter(l2, l3))
   inter(l1, app(l2, l3)) -> app(inter(l1, l2), inter(l1, l3))
   inter(cons(x, l1), l2) -> ifinter(mem(x, l2), x, l1, l2)
   inter(l1, cons(x, l2)) -> ifinter(mem(x, l1), x, l2, l1)
   ifinter(true, x, l1, l2) -> cons(x, inter(l1, l2))
   ifinter(false, x, l1, l2) -> inter(l1, l2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(l1, l2), l3) -> APP(l1, app(l2, l3))
   APP(cons(x, l1), l2) -> APP(l1, l2)
   APP(app(l1, l2), l3) -> APP(l2, l3)

The TRS R consists of the following rules:

   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(l1, l2), l3) -> APP(l1, app(l2, l3))
The graph contains the following edges 1 > 1


*APP(cons(x, l1), l2) -> APP(l1, l2)
The graph contains the following edges 1 > 1, 2 >= 2


*APP(app(l1, l2), l3) -> APP(l2, l3)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   if(true, x, y) -> x
   if(false, x, y) -> y
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))
   mem(x, nil) -> false
   mem(x, cons(y, l)) -> ifmem(eq(x, y), x, l)
   ifmem(true, x, l) -> true
   ifmem(false, x, l) -> mem(x, l)
   inter(x, nil) -> nil
   inter(nil, x) -> nil
   inter(app(l1, l2), l3) -> app(inter(l1, l3), inter(l2, l3))
   inter(l1, app(l2, l3)) -> app(inter(l1, l2), inter(l1, l3))
   inter(cons(x, l1), l2) -> ifinter(mem(x, l2), x, l1, l2)
   inter(l1, cons(x, l2)) -> ifinter(mem(x, l1), x, l2, l1)
   ifinter(true, x, l1, l2) -> cons(x, inter(l1, l2))
   ifinter(false, x, l1, l2) -> inter(l1, l2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEM(x, cons(y, l)) -> IFMEM(eq(x, y), x, l)
   IFMEM(false, x, l) -> MEM(x, l)

The TRS R consists of the following rules:

   if(true, x, y) -> x
   if(false, x, y) -> y
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))
   mem(x, nil) -> false
   mem(x, cons(y, l)) -> ifmem(eq(x, y), x, l)
   ifmem(true, x, l) -> true
   ifmem(false, x, l) -> mem(x, l)
   inter(x, nil) -> nil
   inter(nil, x) -> nil
   inter(app(l1, l2), l3) -> app(inter(l1, l3), inter(l2, l3))
   inter(l1, app(l2, l3)) -> app(inter(l1, l2), inter(l1, l3))
   inter(cons(x, l1), l2) -> ifinter(mem(x, l2), x, l1, l2)
   inter(l1, cons(x, l2)) -> ifinter(mem(x, l1), x, l2, l1)
   ifinter(true, x, l1, l2) -> cons(x, inter(l1, l2))
   ifinter(false, x, l1, l2) -> inter(l1, l2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IFMEM(false, x, l) -> MEM(x, l)
The graph contains the following edges 2 >= 1, 3 >= 2


*MEM(x, cons(y, l)) -> IFMEM(eq(x, y), x, l)
The graph contains the following edges 1 >= 2, 2 > 3


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INTER(app(l1, l2), l3) -> INTER(l2, l3)
   INTER(app(l1, l2), l3) -> INTER(l1, l3)
   INTER(l1, app(l2, l3)) -> INTER(l1, l2)
   INTER(l1, app(l2, l3)) -> INTER(l1, l3)
   INTER(cons(x, l1), l2) -> IFINTER(mem(x, l2), x, l1, l2)
   IFINTER(true, x, l1, l2) -> INTER(l1, l2)
   INTER(l1, cons(x, l2)) -> IFINTER(mem(x, l1), x, l2, l1)
   IFINTER(false, x, l1, l2) -> INTER(l1, l2)

The TRS R consists of the following rules:

   if(true, x, y) -> x
   if(false, x, y) -> y
   eq(0, 0) -> true
   eq(0, s(x)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   app(nil, l) -> l
   app(cons(x, l1), l2) -> cons(x, app(l1, l2))
   app(app(l1, l2), l3) -> app(l1, app(l2, l3))
   mem(x, nil) -> false
   mem(x, cons(y, l)) -> ifmem(eq(x, y), x, l)
   ifmem(true, x, l) -> true
   ifmem(false, x, l) -> mem(x, l)
   inter(x, nil) -> nil
   inter(nil, x) -> nil
   inter(app(l1, l2), l3) -> app(inter(l1, l3), inter(l2, l3))
   inter(l1, app(l2, l3)) -> app(inter(l1, l2), inter(l1, l3))
   inter(cons(x, l1), l2) -> ifinter(mem(x, l2), x, l1, l2)
   inter(l1, cons(x, l2)) -> ifinter(mem(x, l1), x, l2, l1)
   ifinter(true, x, l1, l2) -> cons(x, inter(l1, l2))
   ifinter(false, x, l1, l2) -> inter(l1, l2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INTER(app(l1, l2), l3) -> INTER(l2, l3)
The graph contains the following edges 1 > 1, 2 >= 2


*INTER(app(l1, l2), l3) -> INTER(l1, l3)
The graph contains the following edges 1 > 1, 2 >= 2


*INTER(l1, app(l2, l3)) -> INTER(l1, l2)
The graph contains the following edges 1 >= 1, 2 > 2


*INTER(l1, app(l2, l3)) -> INTER(l1, l3)
The graph contains the following edges 1 >= 1, 2 > 2


*INTER(cons(x, l1), l2) -> IFINTER(mem(x, l2), x, l1, l2)
The graph contains the following edges 1 > 2, 1 > 3, 2 >= 4


*INTER(l1, cons(x, l2)) -> IFINTER(mem(x, l1), x, l2, l1)
The graph contains the following edges 2 > 2, 2 > 3, 1 >= 4


*IFINTER(true, x, l1, l2) -> INTER(l1, l2)
The graph contains the following edges 3 >= 1, 4 >= 2


*IFINTER(false, x, l1, l2) -> INTER(l1, l2)
The graph contains the following edges 3 >= 1, 4 >= 2


----------------------------------------

(20)
YES
