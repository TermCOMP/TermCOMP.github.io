YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nuOB2.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 41 ms]
        (17) QDP
        (18) DependencyGraphProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS_ACTIVE(s(x), s(y)) -> MINUS_ACTIVE(x, y)
   MARK(s(x)) -> MARK(x)
   MARK(minus(x, y)) -> MINUS_ACTIVE(x, y)
   MARK(ge(x, y)) -> GE_ACTIVE(x, y)
   GE_ACTIVE(s(x), s(y)) -> GE_ACTIVE(x, y)
   MARK(div(x, y)) -> DIV_ACTIVE(mark(x), y)
   MARK(div(x, y)) -> MARK(x)
   MARK(if(x, y, z)) -> IF_ACTIVE(mark(x), y, z)
   MARK(if(x, y, z)) -> MARK(x)
   DIV_ACTIVE(s(x), s(y)) -> IF_ACTIVE(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   DIV_ACTIVE(s(x), s(y)) -> GE_ACTIVE(x, y)
   IF_ACTIVE(true, x, y) -> MARK(x)
   IF_ACTIVE(false, x, y) -> MARK(y)

The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE_ACTIVE(s(x), s(y)) -> GE_ACTIVE(x, y)

The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE_ACTIVE(s(x), s(y)) -> GE_ACTIVE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE_ACTIVE(s(x), s(y)) -> GE_ACTIVE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS_ACTIVE(s(x), s(y)) -> MINUS_ACTIVE(x, y)

The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS_ACTIVE(s(x), s(y)) -> MINUS_ACTIVE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS_ACTIVE(s(x), s(y)) -> MINUS_ACTIVE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(div(x, y)) -> DIV_ACTIVE(mark(x), y)
   DIV_ACTIVE(s(x), s(y)) -> IF_ACTIVE(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   IF_ACTIVE(true, x, y) -> MARK(x)
   MARK(s(x)) -> MARK(x)
   MARK(div(x, y)) -> MARK(x)
   MARK(if(x, y, z)) -> IF_ACTIVE(mark(x), y, z)
   IF_ACTIVE(false, x, y) -> MARK(y)
   MARK(if(x, y, z)) -> MARK(x)

The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(div(x, y)) -> DIV_ACTIVE(mark(x), y)
   MARK(s(x)) -> MARK(x)
   MARK(div(x, y)) -> MARK(x)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( DIV_ACTIVE_2(x_1, x_2) ) = 2x_1 + 1
POL( IF_ACTIVE_3(x_1, ..., x_3) ) = x_2 + 2x_3
POL( mark_1(x_1) ) = x_1
POL( 0 ) = 0
POL( s_1(x_1) ) = x_1 + 1
POL( minus_2(x_1, x_2) ) = 0
POL( minus_active_2(x_1, x_2) ) = 0
POL( ge_2(x_1, x_2) ) = 0
POL( ge_active_2(x_1, x_2) ) = 0
POL( div_2(x_1, x_2) ) = 2x_1 + 2
POL( div_active_2(x_1, x_2) ) = 2x_1 + 2
POL( if_active_3(x_1, ..., x_3) ) = x_1 + x_2 + 2x_3
POL( true ) = 0
POL( if_3(x_1, ..., x_3) ) = x_1 + x_2 + 2x_3
POL( false ) = 0
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(0) -> 0
   mark(s(x)) -> s(mark(x))
   mark(minus(x, y)) -> minus_active(x, y)
   mark(ge(x, y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   if_active(false, x, y) -> mark(y)
   ge_active(x, 0) -> true
   ge_active(0, s(y)) -> false
   ge_active(s(x), s(y)) -> ge_active(x, y)
   ge_active(x, y) -> ge(x, y)
   div_active(0, s(y)) -> 0
   div_active(x, y) -> div(x, y)
   if_active(x, y, z) -> if(x, y, z)
   minus_active(0, y) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   minus_active(x, y) -> minus(x, y)


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV_ACTIVE(s(x), s(y)) -> IF_ACTIVE(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   IF_ACTIVE(true, x, y) -> MARK(x)
   MARK(if(x, y, z)) -> IF_ACTIVE(mark(x), y, z)
   IF_ACTIVE(false, x, y) -> MARK(y)
   MARK(if(x, y, z)) -> MARK(x)

The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(if(x, y, z)) -> IF_ACTIVE(mark(x), y, z)
   IF_ACTIVE(true, x, y) -> MARK(x)
   MARK(if(x, y, z)) -> MARK(x)
   IF_ACTIVE(false, x, y) -> MARK(y)

The TRS R consists of the following rules:

   minus_active(0, y) -> 0
   mark(0) -> 0
   minus_active(s(x), s(y)) -> minus_active(x, y)
   mark(s(x)) -> s(mark(x))
   ge_active(x, 0) -> true
   mark(minus(x, y)) -> minus_active(x, y)
   ge_active(0, s(y)) -> false
   mark(ge(x, y)) -> ge_active(x, y)
   ge_active(s(x), s(y)) -> ge_active(x, y)
   mark(div(x, y)) -> div_active(mark(x), y)
   div_active(0, s(y)) -> 0
   mark(if(x, y, z)) -> if_active(mark(x), y, z)
   div_active(s(x), s(y)) -> if_active(ge_active(x, y), s(div(minus(x, y), s(y))), 0)
   if_active(true, x, y) -> mark(x)
   minus_active(x, y) -> minus(x, y)
   if_active(false, x, y) -> mark(y)
   ge_active(x, y) -> ge(x, y)
   if_active(x, y, z) -> if(x, y, z)
   div_active(x, y) -> div(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(if(x, y, z)) -> MARK(x)
The graph contains the following edges 1 > 1


*MARK(if(x, y, z)) -> IF_ACTIVE(mark(x), y, z)
The graph contains the following edges 1 > 2, 1 > 3


*IF_ACTIVE(true, x, y) -> MARK(x)
The graph contains the following edges 2 >= 1


*IF_ACTIVE(false, x, y) -> MARK(y)
The graph contains the following edges 3 >= 1


----------------------------------------

(21)
YES
