YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4EBmo.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 6 ms]
        (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) QDPOrderProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) QDP
        (28) QDPOrderProof [EQUIVALENT, 3 ms]
        (29) QDP
        (30) PisEmptyProof [EQUIVALENT, 0 ms]
        (31) YES
    (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) QDPOrderProof [EQUIVALENT, 1 ms]
        (37) QDP
        (38) PisEmptyProof [EQUIVALENT, 0 ms]
        (39) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
   QUOT(s(x), s(y)) -> MINUS(x, y)
   PLUS(s(x), y) -> PLUS(x, y)
   MINUS(minus(x, y), z) -> MINUS(x, plus(y, z))
   MINUS(minus(x, y), z) -> PLUS(y, z)
   APP(cons(x, l), k) -> APP(l, k)
   SUM(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))
   SUM(cons(x, cons(y, l))) -> PLUS(x, y)
   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))
   SUM(app(l, cons(x, cons(y, k)))) -> APP(l, sum(cons(x, cons(y, k))))
   SUM(app(l, cons(x, cons(y, k)))) -> SUM(cons(x, cons(y, k)))
   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(s(x), s(y)) -> IF(gt(x, y), x, y)
   PLUS(s(x), s(y)) -> GT(x, y)
   PLUS(s(x), s(y)) -> IF(not(gt(x, y)), id(x), id(y))
   PLUS(s(x), s(y)) -> NOT(gt(x, y))
   PLUS(s(x), s(y)) -> ID(x)
   PLUS(s(x), s(y)) -> ID(y)
   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(s(x), x) -> IF(gt(x, x), id(x), id(x))
   PLUS(s(x), x) -> GT(x, x)
   PLUS(s(x), x) -> ID(x)
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))
   PLUS(id(x), s(y)) -> IF(gt(s(y), y), y, s(y))
   PLUS(id(x), s(y)) -> GT(s(y), y)
   NOT(x) -> IF(x, false, true)
   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 7 SCCs with 17 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, l), k) -> APP(l, k)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, l), k) -> APP(l, k)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(x, l), k) -> APP(l, k)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), s(y)) -> PLUS(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(PLUS(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[5A]] 	 +  	[[5A]] 	* 	x_1
>>>

   <<<
 POL(if(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(gt(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(not(x_1)) =  	[[4A]] 	 +  	[[3A]] 	* 	x_1
>>>

   <<<
 POL(id(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(zero) =  	[[1A]]
>>>

   <<<
 POL(true) =  	[[0A]]
>>>

   <<<
 POL(false) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   id(x) -> x


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), x) -> PLUS(if(gt(x, x), id(x), id(x)), s(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( PLUS_2(x_1, x_2) ) = x_1
POL( if_3(x_1, ..., x_3) ) = max{0, 2x_1 + x_2 + x_3 - 2}
POL( gt_2(x_1, x_2) ) = 1
POL( s_1(x_1) ) = 2x_1 + 1
POL( zero ) = 0
POL( true ) = 1
POL( false ) = 1
POL( id_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(id(x), s(y)) -> PLUS(x, if(gt(s(y), y), y, s(y)))
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SUM(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
SUM(x1)  =  x1

cons(x1, x2)  =  cons(x2)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(24)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
SUM(x1)  =  x1

app(x1, x2)  =  app(x1, x2)

cons(x1, x2)  =  cons(x2)

sum(x1)  =  sum

nil  =  nil


Knuth-Bendix order [KBO] with precedence:app_2 > cons_1

and weight map:

   sum=5
   cons_1=3
   app_2=1
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)


----------------------------------------

(29)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(minus(x, y), z) -> MINUS(x, plus(y, z))
   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(minus(x, y), z) -> MINUS(x, plus(y, z))
The graph contains the following edges 1 > 1


*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(37)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   minus(minus(x, y), z) -> minus(x, plus(y, z))
   app(nil, k) -> k
   app(l, nil) -> l
   app(cons(x, l), k) -> cons(x, app(l, k))
   sum(cons(x, nil)) -> cons(x, nil)
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   sum(app(l, cons(x, cons(y, k)))) -> sum(app(l, sum(cons(x, cons(y, k)))))
   plus(s(x), s(y)) -> s(s(plus(if(gt(x, y), x, y), if(not(gt(x, y)), id(x), id(y)))))
   plus(s(x), x) -> plus(if(gt(x, x), id(x), id(x)), s(x))
   plus(zero, y) -> y
   plus(id(x), s(y)) -> s(plus(x, if(gt(s(y), y), y, s(y))))
   id(x) -> x
   if(true, x, y) -> x
   if(false, x, y) -> y
   not(x) -> if(x, false, true)
   gt(s(x), zero) -> true
   gt(zero, y) -> false
   gt(s(x), s(y)) -> gt(x, y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(39)
YES
