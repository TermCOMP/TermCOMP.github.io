YES

Problem 1: 

(VAR vu95NonEmpty f g l x xs)
(RULES
app(app(app(compose,f),g),x) -> app(g,app(f,x))
app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
app(app(reverse2,nil),l) -> l
app(hd,app(app(cons,x),xs)) -> x
app(reverse,l) -> app(app(reverse2,l),nil)
app(tl,app(app(cons,x),xs)) -> xs
init -> app(app(compose,reverse),app(app(compose,tl),reverse))
last -> app(app(compose,hd),reverse)
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(compose,f),g),x) -> APP(f,x)
 APP(app(app(compose,f),g),x) -> APP(g,app(f,x))
 APP(app(reverse2,app(app(cons,x),xs)),l) -> APP(app(reverse2,xs),app(app(cons,x),l))
 APP(reverse,l) -> APP(app(reverse2,l),nil)
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(compose,f),g),x) -> APP(f,x)
 APP(app(app(compose,f),g),x) -> APP(g,app(f,x))
 APP(app(reverse2,app(app(cons,x),xs)),l) -> APP(app(reverse2,xs),app(app(cons,x),l))
 APP(reverse,l) -> APP(app(reverse2,l),nil)
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(reverse2,app(app(cons,x),xs)),l) -> APP(app(reverse2,xs),app(app(cons,x),l))
->->-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
->->Cycle:
->->-> Pairs:
 APP(app(app(compose,f),g),x) -> APP(f,x)
 APP(app(app(compose,f),g),x) -> APP(g,app(f,x))
->->-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Reduction Pairs Processor:
-> Pairs:
 APP(app(reverse2,app(app(cons,x),xs)),l) -> APP(app(reverse2,xs),app(app(cons,x),l))
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
-> Usable rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = X1 + X2 + 1
[init] = 0
[last] = 0
[compose] = 1
[cons] = 2
[fSNonEmpty] = 0
[hd] = 0
[nil] = 0
[reverse] = 1
[reverse2] = 0
[tl] = 0
[APP](X1,X2) = 2.X1 + X2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(app(compose,f),g),x) -> APP(f,x)
 APP(app(app(compose,f),g),x) -> APP(g,app(f,x))
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
->Projection:
 pi(APP) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(compose,f),g),x) -> app(g,app(f,x))
 app(app(reverse2,app(app(cons,x),xs)),l) -> app(app(reverse2,xs),app(app(cons,x),l))
 app(app(reverse2,nil),l) -> l
 app(hd,app(app(cons,x),xs)) -> x
 app(reverse,l) -> app(app(reverse2,l),nil)
 app(tl,app(app(cons,x),xs)) -> xs
 init -> app(app(compose,reverse),app(app(compose,tl),reverse))
 last -> app(app(compose,hd),reverse)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
