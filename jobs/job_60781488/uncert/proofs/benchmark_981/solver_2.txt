YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iXNZU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 5 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__terms(N) -> cons(recip(a__sqr(mark(N))), terms(s(N)))
   a__sqr(0) -> 0
   a__sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   a__dbl(0) -> 0
   a__dbl(s(X)) -> s(s(dbl(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   mark(terms(X)) -> a__terms(mark(X))
   mark(sqr(X)) -> a__sqr(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(dbl(X)) -> a__dbl(mark(X))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(recip(X)) -> recip(mark(X))
   mark(s(X)) -> s(X)
   mark(0) -> 0
   mark(nil) -> nil
   a__terms(X) -> terms(X)
   a__sqr(X) -> sqr(X)
   a__add(X1, X2) -> add(X1, X2)
   a__dbl(X) -> dbl(X)
   a__first(X1, X2) -> first(X1, X2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__TERMS(N) -> A__SQR(mark(N))
   A__TERMS(N) -> MARK(N)
   A__ADD(0, X) -> MARK(X)
   A__FIRST(s(X), cons(Y, Z)) -> MARK(Y)
   MARK(terms(X)) -> A__TERMS(mark(X))
   MARK(terms(X)) -> MARK(X)
   MARK(sqr(X)) -> A__SQR(mark(X))
   MARK(sqr(X)) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(dbl(X)) -> A__DBL(mark(X))
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> A__FIRST(mark(X1), mark(X2))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(recip(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__terms(N) -> cons(recip(a__sqr(mark(N))), terms(s(N)))
   a__sqr(0) -> 0
   a__sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   a__dbl(0) -> 0
   a__dbl(s(X)) -> s(s(dbl(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   mark(terms(X)) -> a__terms(mark(X))
   mark(sqr(X)) -> a__sqr(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(dbl(X)) -> a__dbl(mark(X))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(recip(X)) -> recip(mark(X))
   mark(s(X)) -> s(X)
   mark(0) -> 0
   mark(nil) -> nil
   a__terms(X) -> terms(X)
   a__sqr(X) -> sqr(X)
   a__add(X1, X2) -> add(X1, X2)
   a__dbl(X) -> dbl(X)
   a__first(X1, X2) -> first(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__TERMS(N) -> MARK(N)
   MARK(terms(X)) -> A__TERMS(mark(X))
   MARK(terms(X)) -> MARK(X)
   MARK(sqr(X)) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   A__ADD(0, X) -> MARK(X)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> A__FIRST(mark(X1), mark(X2))
   A__FIRST(s(X), cons(Y, Z)) -> MARK(Y)
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(recip(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__terms(N) -> cons(recip(a__sqr(mark(N))), terms(s(N)))
   a__sqr(0) -> 0
   a__sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   a__dbl(0) -> 0
   a__dbl(s(X)) -> s(s(dbl(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   mark(terms(X)) -> a__terms(mark(X))
   mark(sqr(X)) -> a__sqr(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(dbl(X)) -> a__dbl(mark(X))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(recip(X)) -> recip(mark(X))
   mark(s(X)) -> s(X)
   mark(0) -> 0
   mark(nil) -> nil
   a__terms(X) -> terms(X)
   a__sqr(X) -> sqr(X)
   a__add(X1, X2) -> add(X1, X2)
   a__dbl(X) -> dbl(X)
   a__first(X1, X2) -> first(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__TERMS(N) -> MARK(N)
   MARK(terms(X)) -> A__TERMS(mark(X))
   MARK(terms(X)) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   A__ADD(0, X) -> MARK(X)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   A__FIRST(s(X), cons(Y, Z)) -> MARK(Y)
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__ADD_2(x_1, x_2) ) = 2x_2 + 1
POL( A__FIRST_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( A__TERMS_1(x_1) ) = 2x_1 + 1
POL( mark_1(x_1) ) = x_1
POL( terms_1(x_1) ) = 2x_1 + 1
POL( a__terms_1(x_1) ) = 2x_1 + 1
POL( sqr_1(x_1) ) = x_1
POL( a__sqr_1(x_1) ) = x_1
POL( add_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( a__add_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( 0 ) = 0
POL( dbl_1(x_1) ) = x_1
POL( a__dbl_1(x_1) ) = x_1
POL( first_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( a__first_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( cons_2(x_1, x_2) ) = x_1 + 1
POL( recip_1(x_1) ) = x_1
POL( s_1(x_1) ) = 2
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(terms(X)) -> a__terms(mark(X))
   mark(sqr(X)) -> a__sqr(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   a__add(0, X) -> mark(X)
   mark(dbl(X)) -> a__dbl(mark(X))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(recip(X)) -> recip(mark(X))
   mark(s(X)) -> s(X)
   mark(0) -> 0
   mark(nil) -> nil
   a__terms(X) -> terms(X)
   a__sqr(0) -> 0
   a__sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   a__sqr(X) -> sqr(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__add(X1, X2) -> add(X1, X2)
   a__dbl(0) -> 0
   a__dbl(s(X)) -> s(s(dbl(X)))
   a__dbl(X) -> dbl(X)
   a__first(0, X) -> nil
   a__first(X1, X2) -> first(X1, X2)
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   a__terms(N) -> cons(recip(a__sqr(mark(N))), terms(s(N)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(sqr(X)) -> MARK(X)
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> A__FIRST(mark(X1), mark(X2))
   MARK(recip(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__terms(N) -> cons(recip(a__sqr(mark(N))), terms(s(N)))
   a__sqr(0) -> 0
   a__sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   a__dbl(0) -> 0
   a__dbl(s(X)) -> s(s(dbl(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   mark(terms(X)) -> a__terms(mark(X))
   mark(sqr(X)) -> a__sqr(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(dbl(X)) -> a__dbl(mark(X))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(recip(X)) -> recip(mark(X))
   mark(s(X)) -> s(X)
   mark(0) -> 0
   mark(nil) -> nil
   a__terms(X) -> terms(X)
   a__sqr(X) -> sqr(X)
   a__add(X1, X2) -> add(X1, X2)
   a__dbl(X) -> dbl(X)
   a__first(X1, X2) -> first(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(dbl(X)) -> MARK(X)
   MARK(sqr(X)) -> MARK(X)
   MARK(recip(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__terms(N) -> cons(recip(a__sqr(mark(N))), terms(s(N)))
   a__sqr(0) -> 0
   a__sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   a__dbl(0) -> 0
   a__dbl(s(X)) -> s(s(dbl(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   mark(terms(X)) -> a__terms(mark(X))
   mark(sqr(X)) -> a__sqr(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(dbl(X)) -> a__dbl(mark(X))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(recip(X)) -> recip(mark(X))
   mark(s(X)) -> s(X)
   mark(0) -> 0
   mark(nil) -> nil
   a__terms(X) -> terms(X)
   a__sqr(X) -> sqr(X)
   a__add(X1, X2) -> add(X1, X2)
   a__dbl(X) -> dbl(X)
   a__first(X1, X2) -> first(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(dbl(X)) -> MARK(X)
   MARK(sqr(X)) -> MARK(X)
   MARK(recip(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(dbl(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(sqr(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(recip(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
