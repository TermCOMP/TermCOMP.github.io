YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GkurB.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 2 ms]
        (7) QDP
        (8) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MNOCProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 2 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(append, nil), l) -> l
   app(app(append, app(app(cons, h), t)), l) -> app(app(cons, h), app(app(append, t), l))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(append, app(app(append, l1), l2)), l3) -> app(app(append, l1), app(app(append, l2), l3))
   app(app(map, f), app(app(append, l1), l2)) -> app(app(append, app(app(map, f), l1)), app(app(map, f), l2))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(append, app(app(cons, h), t)), l) -> APP(app(cons, h), app(app(append, t), l))
   APP(app(append, app(app(cons, h), t)), l) -> APP(app(append, t), l)
   APP(app(append, app(app(cons, h), t)), l) -> APP(append, t)
   APP(app(map, f), app(app(cons, h), t)) -> APP(app(cons, app(f, h)), app(app(map, f), t))
   APP(app(map, f), app(app(cons, h), t)) -> APP(cons, app(f, h))
   APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
   APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
   APP(app(append, app(app(append, l1), l2)), l3) -> APP(app(append, l1), app(app(append, l2), l3))
   APP(app(append, app(app(append, l1), l2)), l3) -> APP(app(append, l2), l3)
   APP(app(append, app(app(append, l1), l2)), l3) -> APP(append, l2)
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(append, app(app(map, f), l1)), app(app(map, f), l2))
   APP(app(map, f), app(app(append, l1), l2)) -> APP(append, app(app(map, f), l1))
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l1)
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l2)

The TRS R consists of the following rules:

   app(app(append, nil), l) -> l
   app(app(append, app(app(cons, h), t)), l) -> app(app(cons, h), app(app(append, t), l))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(append, app(app(append, l1), l2)), l3) -> app(app(append, l1), app(app(append, l2), l3))
   app(app(map, f), app(app(append, l1), l2)) -> app(app(append, app(app(map, f), l1)), app(app(map, f), l2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 7 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(append, app(app(append, l1), l2)), l3) -> APP(app(append, l1), app(app(append, l2), l3))
   APP(app(append, app(app(cons, h), t)), l) -> APP(app(append, t), l)
   APP(app(append, app(app(append, l1), l2)), l3) -> APP(app(append, l2), l3)

The TRS R consists of the following rules:

   app(app(append, nil), l) -> l
   app(app(append, app(app(cons, h), t)), l) -> app(app(cons, h), app(app(append, t), l))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(append, app(app(append, l1), l2)), l3) -> app(app(append, l1), app(app(append, l2), l3))
   app(app(map, f), app(app(append, l1), l2)) -> app(app(append, app(app(map, f), l1)), app(app(map, f), l2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(append, app(app(append, l1), l2)), l3) -> APP(app(append, l1), app(app(append, l2), l3))
   APP(app(append, app(app(cons, h), t)), l) -> APP(app(append, t), l)
   APP(app(append, app(app(append, l1), l2)), l3) -> APP(app(append, l2), l3)

The TRS R consists of the following rules:

   app(app(append, nil), l) -> l
   app(app(append, app(app(cons, h), t)), l) -> app(app(cons, h), app(app(append, t), l))
   app(app(append, app(app(append, l1), l2)), l3) -> app(app(append, l1), app(app(append, l2), l3))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesReductionPairsProof (EQUIVALENT)
First, we A-transformed [FROCOS05] the QDP-Problem.
Then we obtain the following A-transformed DP problem.

The pairs P are: 

   append1(append(l1, l2), l3) -> append1(l1, append(l2, l3))
   append1(cons(h, t), l) -> append1(t, l)
   append1(append(l1, l2), l3) -> append1(l2, l3)

and the Q and R are:
Q restricted rewrite system:
The TRS R consists of the following rules:

   append(nil, l) -> l
   append(cons(h, t), l) -> cons(h, append(t, l))
   append(append(l1, l2), l3) -> append(l1, append(l2, l3))

Q is empty.

By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   append1(append(l1, l2), l3) -> append1(l1, append(l2, l3))
   append1(append(l1, l2), l3) -> append1(l2, l3)
The following rules are removed from R:

   app(app(append, nil), l) -> l
   app(app(append, app(app(cons, h), t)), l) -> app(app(cons, h), app(app(append, t), l))
   app(app(append, app(app(append, l1), l2)), l3) -> app(app(append, l1), app(app(append, l2), l3))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(append(x_1, x_2)) = 2 + x_1 + x_2
   POL(append1(x_1, x_2)) = 2*x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(nil) = 0


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(h, t), l) -> append1(t, l)

The TRS R consists of the following rules:

   append(cons(h, t), l) -> cons(h, append(t, l))
   append(append(l1, l2), l3) -> append(l1, append(l2, l3))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(h, t), l) -> append1(t, l)

The TRS R consists of the following rules:

   append(cons(h, t), l) -> cons(h, append(t, l))
   append(append(l1, l2), l3) -> append(l1, append(l2, l3))

The set Q consists of the following terms:

   append(cons(x0, x1), x2)
   append(append(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(h, t), l) -> append1(t, l)

R is empty.
The set Q consists of the following terms:

   append(cons(x0, x1), x2)
   append(append(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   append(cons(x0, x1), x2)
   append(append(x0, x1), x2)


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(h, t), l) -> append1(t, l)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*append1(cons(h, t), l) -> append1(t, l)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
   APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l1)
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l2)

The TRS R consists of the following rules:

   app(app(append, nil), l) -> l
   app(app(append, app(app(cons, h), t)), l) -> app(app(cons, h), app(app(append, t), l))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, h), t)) -> app(app(cons, app(f, h)), app(app(map, f), t))
   app(app(append, app(app(append, l1), l2)), l3) -> app(app(append, l1), app(app(append, l2), l3))
   app(app(map, f), app(app(append, l1), l2)) -> app(app(append, app(app(map, f), l1)), app(app(map, f), l2))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
   APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l1)
   APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(map, f), app(app(cons, h), t)) -> APP(app(map, f), t)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, f), app(app(cons, h), t)) -> APP(f, h)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l1)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, f), app(app(append, l1), l2)) -> APP(app(map, f), l2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(22)
YES
