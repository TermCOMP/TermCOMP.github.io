YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JdTqS.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 15 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 71 ms]
        (12) QDP
        (13) DependencyGraphProof [EQUIVALENT, 0 ms]
        (14) AND
            (15) QDP
                (16) QDPOrderProof [EQUIVALENT, 48 ms]
                (17) QDP
                (18) DependencyGraphProof [EQUIVALENT, 0 ms]
                (19) QDP
                (20) UsableRulesProof [EQUIVALENT, 0 ms]
                (21) QDP
                (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (23) YES
            (24) QDP
                (25) QDPOrderProof [EQUIVALENT, 43 ms]
                (26) QDP
                (27) DependencyGraphProof [EQUIVALENT, 0 ms]
                (28) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U41(tt, V2) -> A__U42(a__isNatIList(V2))
   A__U41(tt, V2) -> A__ISNATILIST(V2)
   A__U51(tt, V2) -> A__U52(a__isNatList(V2))
   A__U51(tt, V2) -> A__ISNATLIST(V2)
   A__U61(tt, V2) -> A__U62(a__isNatIList(V2))
   A__U61(tt, V2) -> A__ISNATILIST(V2)
   A__U71(tt, L, N) -> A__U72(a__isNat(N), L)
   A__U71(tt, L, N) -> A__ISNAT(N)
   A__U72(tt, L) -> A__LENGTH(mark(L))
   A__U72(tt, L) -> MARK(L)
   A__U91(tt, IL, M, N) -> A__U92(a__isNat(M), IL, M, N)
   A__U91(tt, IL, M, N) -> A__ISNAT(M)
   A__U92(tt, IL, M, N) -> A__U93(a__isNat(N), IL, M, N)
   A__U92(tt, IL, M, N) -> A__ISNAT(N)
   A__U93(tt, IL, M, N) -> MARK(N)
   A__ISNAT(length(V1)) -> A__U11(a__isNatList(V1))
   A__ISNAT(length(V1)) -> A__ISNATLIST(V1)
   A__ISNAT(s(V1)) -> A__U21(a__isNat(V1))
   A__ISNAT(s(V1)) -> A__ISNAT(V1)
   A__ISNATILIST(V) -> A__U31(a__isNatList(V))
   A__ISNATILIST(V) -> A__ISNATLIST(V)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__isNat(V1), V2)
   A__ISNATILIST(cons(V1, V2)) -> A__ISNAT(V1)
   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__isNat(V1), V2)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNAT(V1)
   A__ISNATLIST(take(V1, V2)) -> A__U61(a__isNat(V1), V2)
   A__ISNATLIST(take(V1, V2)) -> A__ISNAT(V1)
   A__LENGTH(cons(N, L)) -> A__U71(a__isNatList(L), L, N)
   A__LENGTH(cons(N, L)) -> A__ISNATLIST(L)
   A__TAKE(0, IL) -> A__U81(a__isNatIList(IL))
   A__TAKE(0, IL) -> A__ISNATILIST(IL)
   A__TAKE(s(M), cons(N, IL)) -> A__U91(a__isNatIList(IL), IL, M, N)
   A__TAKE(s(M), cons(N, IL)) -> A__ISNATILIST(IL)
   MARK(zeros) -> A__ZEROS
   MARK(U11(X)) -> A__U11(mark(X))
   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> A__U21(mark(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> A__U31(mark(X))
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> A__U41(mark(X1), X2)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> A__U42(mark(X))
   MARK(U42(X)) -> MARK(X)
   MARK(isNatIList(X)) -> A__ISNATILIST(X)
   MARK(U51(X1, X2)) -> A__U51(mark(X1), X2)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> A__U52(mark(X))
   MARK(U52(X)) -> MARK(X)
   MARK(isNatList(X)) -> A__ISNATLIST(X)
   MARK(U61(X1, X2)) -> A__U61(mark(X1), X2)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> A__U62(mark(X))
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> A__U71(mark(X1), X2, X3)
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> A__U72(mark(X1), X2)
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> A__ISNAT(X)
   MARK(length(X)) -> A__LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(U81(X)) -> A__U81(mark(X))
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> A__U91(mark(X1), X2, X3, X4)
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> A__U92(mark(X1), X2, X3, X4)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> A__U93(mark(X1), X2, X3, X4)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 27 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U41(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__ISNATLIST(V)
   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__isNat(V1), V2)
   A__U51(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__ISNATLIST(V1)
   A__ISNATLIST(take(V1, V2)) -> A__U61(a__isNat(V1), V2)
   A__U61(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__isNat(V1), V2)
   A__ISNATILIST(cons(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(s(V1)) -> A__ISNAT(V1)
   A__ISNATLIST(take(V1, V2)) -> A__ISNAT(V1)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U41(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(V) -> A__ISNATLIST(V)
   A__ISNATLIST(cons(V1, V2)) -> A__U51(a__isNat(V1), V2)
   A__U51(tt, V2) -> A__ISNATLIST(V2)
   A__ISNATLIST(cons(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(length(V1)) -> A__ISNATLIST(V1)
   A__ISNATLIST(take(V1, V2)) -> A__U61(a__isNat(V1), V2)
   A__U61(tt, V2) -> A__ISNATILIST(V2)
   A__ISNATILIST(cons(V1, V2)) -> A__U41(a__isNat(V1), V2)
   A__ISNATILIST(cons(V1, V2)) -> A__ISNAT(V1)
   A__ISNAT(s(V1)) -> A__ISNAT(V1)
   A__ISNATLIST(take(V1, V2)) -> A__ISNAT(V1)

The TRS R consists of the following rules:

   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNat(X) -> isNat(X)
   a__U21(tt) -> tt
   a__U21(X) -> U21(X)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__isNatList(X) -> isNatList(X)
   a__U11(tt) -> tt
   a__U11(X) -> U11(X)
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U61(X1, X2) -> U61(X1, X2)
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatIList(X) -> isNatIList(X)
   a__U62(tt) -> tt
   a__U62(X) -> U62(X)
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(tt) -> tt
   a__U42(X) -> U42(X)
   a__U31(tt) -> tt
   a__U31(X) -> U31(X)
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(tt) -> tt
   a__U52(X) -> U52(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A__ISNATILIST(cons(V1, V2)) -> A__U41(a__isNat(V1), V2)
The graph contains the following edges 1 > 2


*A__ISNATILIST(V) -> A__ISNATLIST(V)
The graph contains the following edges 1 >= 1


*A__ISNATILIST(cons(V1, V2)) -> A__ISNAT(V1)
The graph contains the following edges 1 > 1


*A__U51(tt, V2) -> A__ISNATLIST(V2)
The graph contains the following edges 2 >= 1


*A__ISNAT(length(V1)) -> A__ISNATLIST(V1)
The graph contains the following edges 1 > 1


*A__ISNAT(s(V1)) -> A__ISNAT(V1)
The graph contains the following edges 1 > 1


*A__ISNATLIST(cons(V1, V2)) -> A__U51(a__isNat(V1), V2)
The graph contains the following edges 1 > 2


*A__ISNATLIST(take(V1, V2)) -> A__U61(a__isNat(V1), V2)
The graph contains the following edges 1 > 2


*A__U61(tt, V2) -> A__ISNATILIST(V2)
The graph contains the following edges 2 >= 1


*A__U41(tt, V2) -> A__ISNATILIST(V2)
The graph contains the following edges 2 >= 1


*A__ISNATLIST(cons(V1, V2)) -> A__ISNAT(V1)
The graph contains the following edges 1 > 1


*A__ISNATLIST(take(V1, V2)) -> A__ISNAT(V1)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> A__U71(mark(X1), X2, X3)
   A__U71(tt, L, N) -> A__U72(a__isNat(N), L)
   A__U72(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U71(a__isNatList(L), L, N)
   A__U72(tt, L) -> MARK(L)
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> A__U72(mark(X1), X2)
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> A__LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> A__U91(mark(X1), X2, X3, X4)
   A__U91(tt, IL, M, N) -> A__U92(a__isNat(M), IL, M, N)
   A__U92(tt, IL, M, N) -> A__U93(a__isNat(N), IL, M, N)
   A__U93(tt, IL, M, N) -> MARK(N)
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> A__U92(mark(X1), X2, X3, X4)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> A__U93(mark(X1), X2, X3, X4)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(M), cons(N, IL)) -> A__U91(a__isNatIList(IL), IL, M, N)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U71(X1, X2, X3)) -> A__U71(mark(X1), X2, X3)
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2)) -> A__U72(mark(X1), X2)
   MARK(U72(X1, X2)) -> MARK(X1)
   MARK(length(X)) -> A__LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__LENGTH_1(x_1) ) = x_1
POL( A__TAKE_2(x_1, x_2) ) = 2x_2
POL( A__U71_3(x_1, ..., x_3) ) = x_2 + x_3
POL( A__U72_2(x_1, x_2) ) = x_2
POL( A__U91_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( A__U92_4(x_1, ..., x_4) ) = x_4
POL( A__U93_4(x_1, ..., x_4) ) = x_4
POL( mark_1(x_1) ) = x_1
POL( zeros ) = 0
POL( a__zeros ) = 0
POL( U11_1(x_1) ) = 2x_1
POL( a__U11_1(x_1) ) = 2x_1
POL( U21_1(x_1) ) = 2x_1
POL( a__U21_1(x_1) ) = 2x_1
POL( U31_1(x_1) ) = x_1
POL( a__U31_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = 2x_1
POL( a__U41_2(x_1, x_2) ) = 2x_1
POL( U42_1(x_1) ) = x_1
POL( a__U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 0
POL( a__isNatIList_1(x_1) ) = 0
POL( U51_2(x_1, x_2) ) = x_1
POL( a__U51_2(x_1, x_2) ) = x_1
POL( U52_1(x_1) ) = 2x_1
POL( a__U52_1(x_1) ) = 2x_1
POL( isNatList_1(x_1) ) = 0
POL( a__isNatList_1(x_1) ) = 0
POL( U61_2(x_1, x_2) ) = x_1
POL( a__U61_2(x_1, x_2) ) = x_1
POL( U62_1(x_1) ) = x_1
POL( a__U62_1(x_1) ) = x_1
POL( U71_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + x_3 + 2
POL( a__U71_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + x_3 + 2
POL( U72_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( a__U72_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( isNat_1(x_1) ) = 0
POL( a__isNat_1(x_1) ) = 0
POL( length_1(x_1) ) = 2x_1 + 2
POL( a__length_1(x_1) ) = 2x_1 + 2
POL( U81_1(x_1) ) = 2x_1
POL( a__U81_1(x_1) ) = 2x_1
POL( U91_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2x_3 + 2x_4
POL( a__U91_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2x_3 + 2x_4
POL( U92_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2x_3 + 2x_4
POL( a__U92_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2x_3 + 2x_4
POL( U93_4(x_1, ..., x_4) ) = x_1 + 2x_2 + 2x_3 + 2x_4
POL( a__U93_4(x_1, ..., x_4) ) = x_1 + 2x_2 + 2x_3 + 2x_4
POL( take_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( a__take_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( 0 ) = 0
POL( tt ) = 0
POL( s_1(x_1) ) = x_1
POL( nil ) = 0
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNat(X) -> isNat(X)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__isNatList(X) -> isNatList(X)
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatIList(X) -> isNatIList(X)
   a__U11(tt) -> tt
   a__U11(X) -> U11(X)
   a__U21(tt) -> tt
   a__U21(X) -> U21(X)
   a__U31(tt) -> tt
   a__U31(X) -> U31(X)
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(tt) -> tt
   a__U42(X) -> U42(X)
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(tt) -> tt
   a__U52(X) -> U52(X)
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(tt) -> tt
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__length(nil) -> 0
   a__length(X) -> length(X)
   a__U81(tt) -> nil
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(X1, X2) -> take(X1, X2)
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   A__U71(tt, L, N) -> A__U72(a__isNat(N), L)
   A__U72(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U71(a__isNatList(L), L, N)
   A__U72(tt, L) -> MARK(L)
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> A__U91(mark(X1), X2, X3, X4)
   A__U91(tt, IL, M, N) -> A__U92(a__isNat(M), IL, M, N)
   A__U92(tt, IL, M, N) -> A__U93(a__isNat(N), IL, M, N)
   A__U93(tt, IL, M, N) -> MARK(N)
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> A__U92(mark(X1), X2, X3, X4)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> A__U93(mark(X1), X2, X3, X4)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(M), cons(N, IL)) -> A__U91(a__isNatIList(IL), IL, M, N)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U11(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U81(X)) -> MARK(X)
   MARK(U91(X1, X2, X3, X4)) -> A__U91(mark(X1), X2, X3, X4)
   A__U91(tt, IL, M, N) -> A__U92(a__isNat(M), IL, M, N)
   A__U92(tt, IL, M, N) -> A__U93(a__isNat(N), IL, M, N)
   A__U93(tt, IL, M, N) -> MARK(N)
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> A__U92(mark(X1), X2, X3, X4)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> A__U93(mark(X1), X2, X3, X4)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   A__TAKE(s(M), cons(N, IL)) -> A__U91(a__isNatIList(IL), IL, M, N)
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U91(X1, X2, X3, X4)) -> A__U91(mark(X1), X2, X3, X4)
   MARK(U91(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U92(X1, X2, X3, X4)) -> A__U92(mark(X1), X2, X3, X4)
   MARK(U92(X1, X2, X3, X4)) -> MARK(X1)
   MARK(U93(X1, X2, X3, X4)) -> A__U93(mark(X1), X2, X3, X4)
   MARK(U93(X1, X2, X3, X4)) -> MARK(X1)
   MARK(take(X1, X2)) -> A__TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__TAKE_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( A__U91_4(x_1, ..., x_4) ) = 2x_4 + 2
POL( A__U92_4(x_1, ..., x_4) ) = 2x_4 + 2
POL( A__U93_4(x_1, ..., x_4) ) = 2x_4 + 2
POL( mark_1(x_1) ) = 2x_1
POL( zeros ) = 2
POL( a__zeros ) = 2
POL( U11_1(x_1) ) = x_1
POL( a__U11_1(x_1) ) = x_1
POL( U21_1(x_1) ) = 2x_1
POL( a__U21_1(x_1) ) = 2x_1
POL( U31_1(x_1) ) = 2x_1
POL( a__U31_1(x_1) ) = 2x_1
POL( U41_2(x_1, x_2) ) = 2x_1
POL( a__U41_2(x_1, x_2) ) = 2x_1
POL( U42_1(x_1) ) = 2x_1
POL( a__U42_1(x_1) ) = 2x_1
POL( isNatIList_1(x_1) ) = 0
POL( a__isNatIList_1(x_1) ) = 0
POL( U51_2(x_1, x_2) ) = x_1
POL( a__U51_2(x_1, x_2) ) = x_1
POL( U52_1(x_1) ) = 2x_1
POL( a__U52_1(x_1) ) = 2x_1
POL( isNatList_1(x_1) ) = 0
POL( a__isNatList_1(x_1) ) = 0
POL( U61_2(x_1, x_2) ) = x_1
POL( a__U61_2(x_1, x_2) ) = x_1
POL( U62_1(x_1) ) = x_1
POL( a__U62_1(x_1) ) = x_1
POL( U71_3(x_1, ..., x_3) ) = 0
POL( a__U71_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_2(x_1, x_2) ) = 0
POL( a__U72_2(x_1, x_2) ) = max{0, -2}
POL( isNat_1(x_1) ) = 0
POL( a__isNat_1(x_1) ) = 0
POL( length_1(x_1) ) = 0
POL( a__length_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = 2x_1
POL( a__U81_1(x_1) ) = 2x_1
POL( U91_4(x_1, ..., x_4) ) = x_1 + x_3 + 2x_4 + 2
POL( a__U91_4(x_1, ..., x_4) ) = x_1 + x_3 + 2x_4 + 2
POL( U92_4(x_1, ..., x_4) ) = x_1 + x_3 + x_4 + 1
POL( a__U92_4(x_1, ..., x_4) ) = x_1 + x_3 + 2x_4 + 2
POL( U93_4(x_1, ..., x_4) ) = x_1 + x_3 + 2x_4 + 1
POL( a__U93_4(x_1, ..., x_4) ) = x_1 + x_3 + 2x_4 + 2
POL( take_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( a__take_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( cons_2(x_1, x_2) ) = x_1 + 2
POL( 0 ) = 0
POL( tt ) = 0
POL( s_1(x_1) ) = x_1
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNat(X) -> isNat(X)
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatIList(X) -> isNatIList(X)
   a__U11(tt) -> tt
   a__U11(X) -> U11(X)
   a__U21(tt) -> tt
   a__U21(X) -> U21(X)
   a__U31(tt) -> tt
   a__U31(X) -> U31(X)
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(tt) -> tt
   a__U42(X) -> U42(X)
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(tt) -> tt
   a__U52(X) -> U52(X)
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(tt) -> tt
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__length(nil) -> 0
   a__length(X) -> length(X)
   a__U81(tt) -> nil
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(X1, X2) -> take(X1, X2)
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__isNatList(X) -> isNatList(X)
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U11(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U81(X)) -> MARK(X)
   A__U91(tt, IL, M, N) -> A__U92(a__isNat(M), IL, M, N)
   A__U92(tt, IL, M, N) -> A__U93(a__isNat(N), IL, M, N)
   A__U93(tt, IL, M, N) -> MARK(N)
   A__TAKE(s(M), cons(N, IL)) -> A__U91(a__isNatIList(IL), IL, M, N)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U81(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X)) -> MARK(X)
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U42(X)) -> MARK(X)
   MARK(U51(X1, X2)) -> MARK(X1)
   MARK(U52(X)) -> MARK(X)
   MARK(U61(X1, X2)) -> MARK(X1)
   MARK(U62(X)) -> MARK(X)
   MARK(U81(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U11(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U21(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U31(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U41(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(U42(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U51(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(U52(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U61(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(U62(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U81(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(s(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U72(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U71(a__isNatList(L), L, N)
   A__U71(tt, L, N) -> A__U72(a__isNat(N), L)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__U71(tt, L, N) -> A__U72(a__isNat(N), L)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__LENGTH_1(x_1) ) = 2x_1
POL( mark_1(x_1) ) = x_1
POL( zeros ) = 0
POL( a__zeros ) = 0
POL( U11_1(x_1) ) = x_1
POL( a__U11_1(x_1) ) = x_1
POL( U21_1(x_1) ) = x_1
POL( a__U21_1(x_1) ) = x_1
POL( U31_1(x_1) ) = x_1
POL( a__U31_1(x_1) ) = x_1
POL( U41_2(x_1, x_2) ) = 2x_2 + 2
POL( a__U41_2(x_1, x_2) ) = 2x_2 + 2
POL( U42_1(x_1) ) = x_1
POL( a__U42_1(x_1) ) = x_1
POL( isNatIList_1(x_1) ) = 2x_1 + 2
POL( a__isNatIList_1(x_1) ) = 2x_1 + 2
POL( U51_2(x_1, x_2) ) = 2x_2 + 1
POL( a__U51_2(x_1, x_2) ) = 2x_2 + 1
POL( U52_1(x_1) ) = x_1
POL( a__U52_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = x_1 + 1
POL( a__isNatList_1(x_1) ) = x_1 + 1
POL( U61_2(x_1, x_2) ) = x_1
POL( a__U61_2(x_1, x_2) ) = x_1
POL( U62_1(x_1) ) = 2
POL( a__U62_1(x_1) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2x_2
POL( a__U71_3(x_1, ..., x_3) ) = 2x_2
POL( U72_2(x_1, x_2) ) = 2x_2
POL( a__U72_2(x_1, x_2) ) = 2x_2
POL( isNat_1(x_1) ) = x_1 + 1
POL( a__isNat_1(x_1) ) = x_1 + 1
POL( length_1(x_1) ) = x_1
POL( a__length_1(x_1) ) = x_1
POL( U81_1(x_1) ) = 1
POL( a__U81_1(x_1) ) = 1
POL( U91_4(x_1, ..., x_4) ) = 2x_3
POL( a__U91_4(x_1, ..., x_4) ) = 2x_3
POL( U92_4(x_1, ..., x_4) ) = 2x_3
POL( a__U92_4(x_1, ..., x_4) ) = 2x_3
POL( U93_4(x_1, ..., x_4) ) = 2x_3
POL( a__U93_4(x_1, ..., x_4) ) = 2x_3
POL( take_2(x_1, x_2) ) = x_1
POL( a__take_2(x_1, x_2) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_2
POL( 0 ) = 1
POL( tt ) = 2
POL( s_1(x_1) ) = 2x_1
POL( nil ) = 1
POL( A__U71_3(x_1, ..., x_3) ) = max{0, 2x_1 + 2x_2 - 2}
POL( A__U72_2(x_1, x_2) ) = 2x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__isNatList(X) -> isNatList(X)
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNat(X) -> isNat(X)
   a__U11(tt) -> tt
   a__U11(X) -> U11(X)
   a__U21(tt) -> tt
   a__U21(X) -> U21(X)
   a__U31(tt) -> tt
   a__U31(X) -> U31(X)
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(tt) -> tt
   a__U42(X) -> U42(X)
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(tt) -> tt
   a__U52(X) -> U52(X)
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(tt) -> tt
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__length(nil) -> 0
   a__length(X) -> length(X)
   a__U81(tt) -> nil
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(X1, X2) -> take(X1, X2)
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatIList(X) -> isNatIList(X)
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__U72(tt, L) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> A__U71(a__isNatList(L), L, N)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__U11(tt) -> tt
   a__U21(tt) -> tt
   a__U31(tt) -> tt
   a__U41(tt, V2) -> a__U42(a__isNatIList(V2))
   a__U42(tt) -> tt
   a__U51(tt, V2) -> a__U52(a__isNatList(V2))
   a__U52(tt) -> tt
   a__U61(tt, V2) -> a__U62(a__isNatIList(V2))
   a__U62(tt) -> tt
   a__U71(tt, L, N) -> a__U72(a__isNat(N), L)
   a__U72(tt, L) -> s(a__length(mark(L)))
   a__U81(tt) -> nil
   a__U91(tt, IL, M, N) -> a__U92(a__isNat(M), IL, M, N)
   a__U92(tt, IL, M, N) -> a__U93(a__isNat(N), IL, M, N)
   a__U93(tt, IL, M, N) -> cons(mark(N), take(M, IL))
   a__isNat(0) -> tt
   a__isNat(length(V1)) -> a__U11(a__isNatList(V1))
   a__isNat(s(V1)) -> a__U21(a__isNat(V1))
   a__isNatIList(V) -> a__U31(a__isNatList(V))
   a__isNatIList(zeros) -> tt
   a__isNatIList(cons(V1, V2)) -> a__U41(a__isNat(V1), V2)
   a__isNatList(nil) -> tt
   a__isNatList(cons(V1, V2)) -> a__U51(a__isNat(V1), V2)
   a__isNatList(take(V1, V2)) -> a__U61(a__isNat(V1), V2)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> a__U71(a__isNatList(L), L, N)
   a__take(0, IL) -> a__U81(a__isNatIList(IL))
   a__take(s(M), cons(N, IL)) -> a__U91(a__isNatIList(IL), IL, M, N)
   mark(zeros) -> a__zeros
   mark(U11(X)) -> a__U11(mark(X))
   mark(U21(X)) -> a__U21(mark(X))
   mark(U31(X)) -> a__U31(mark(X))
   mark(U41(X1, X2)) -> a__U41(mark(X1), X2)
   mark(U42(X)) -> a__U42(mark(X))
   mark(isNatIList(X)) -> a__isNatIList(X)
   mark(U51(X1, X2)) -> a__U51(mark(X1), X2)
   mark(U52(X)) -> a__U52(mark(X))
   mark(isNatList(X)) -> a__isNatList(X)
   mark(U61(X1, X2)) -> a__U61(mark(X1), X2)
   mark(U62(X)) -> a__U62(mark(X))
   mark(U71(X1, X2, X3)) -> a__U71(mark(X1), X2, X3)
   mark(U72(X1, X2)) -> a__U72(mark(X1), X2)
   mark(isNat(X)) -> a__isNat(X)
   mark(length(X)) -> a__length(mark(X))
   mark(U81(X)) -> a__U81(mark(X))
   mark(U91(X1, X2, X3, X4)) -> a__U91(mark(X1), X2, X3, X4)
   mark(U92(X1, X2, X3, X4)) -> a__U92(mark(X1), X2, X3, X4)
   mark(U93(X1, X2, X3, X4)) -> a__U93(mark(X1), X2, X3, X4)
   mark(take(X1, X2)) -> a__take(mark(X1), mark(X2))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(s(X)) -> s(mark(X))
   mark(nil) -> nil
   a__zeros -> zeros
   a__U11(X) -> U11(X)
   a__U21(X) -> U21(X)
   a__U31(X) -> U31(X)
   a__U41(X1, X2) -> U41(X1, X2)
   a__U42(X) -> U42(X)
   a__isNatIList(X) -> isNatIList(X)
   a__U51(X1, X2) -> U51(X1, X2)
   a__U52(X) -> U52(X)
   a__isNatList(X) -> isNatList(X)
   a__U61(X1, X2) -> U61(X1, X2)
   a__U62(X) -> U62(X)
   a__U71(X1, X2, X3) -> U71(X1, X2, X3)
   a__U72(X1, X2) -> U72(X1, X2)
   a__isNat(X) -> isNat(X)
   a__length(X) -> length(X)
   a__U81(X) -> U81(X)
   a__U91(X1, X2, X3, X4) -> U91(X1, X2, X3, X4)
   a__U92(X1, X2, X3, X4) -> U92(X1, X2, X3, X4)
   a__U93(X1, X2, X3, X4) -> U93(X1, X2, X3, X4)
   a__take(X1, X2) -> take(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(28)
TRUE
