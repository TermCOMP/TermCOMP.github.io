YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ufyku.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(id, x) -> x
   app(add, 0) -> id
   app(app(add, app(s, x)), y) -> app(s, app(app(add, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(id, x) -> x
   app(add, 0) -> id
   app(app(add, app(s, x)), y) -> app(s, app(app(add, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(add, app(s, x)), y) -> APP(s, app(app(add, x), y))
   APP(app(add, app(s, x)), y) -> APP(app(add, x), y)
   APP(app(add, app(s, x)), y) -> APP(add, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)

The TRS R consists of the following rules:

   app(id, x) -> x
   app(add, 0) -> id
   app(app(add, app(s, x)), y) -> app(s, app(app(add, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(add, app(s, x)), y) -> APP(app(add, x), y)

The TRS R consists of the following rules:

   app(id, x) -> x
   app(add, 0) -> id
   app(app(add, app(s, x)), y) -> app(s, app(app(add, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(add, app(s, x)), y) -> APP(app(add, x), y)

The TRS R consists of the following rules:

   app(add, 0) -> id

The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   APP(app(add, app(s, x)), y) -> APP(app(add, x), y)
The following rules are removed from R:

   app(add, 0) -> id
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(APP(x_1, x_2)) = 2*x_1 + x_2
   POL(add) = 1
   POL(app(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(id) = 0
   POL(s) = 0


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)

The TRS R consists of the following rules:

   app(id, x) -> x
   app(add, 0) -> id
   app(app(add, app(s, x)), y) -> app(s, app(app(add, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))

The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)

R is empty.
The set Q consists of the following terms:

   app(id, x0)
   app(add, 0)
   app(app(add, app(s, x0)), x1)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(18)
YES
