NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/7CKcz.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) MNOCProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) NonLoopProof [COMPLETE, 48 ms]
        (25) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The TRS R 2 is 
   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))

The signature Sigma is {f_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), plus2(x), plus1(y))
   F(true, x, y) -> GT(x, y)
   F(true, x, y) -> PLUS2(x)
   F(true, x, y) -> PLUS1(y)
   GT(s(x), s(y)) -> GT(x, y)
   PLUS1(x) -> PLUS(s(0), x)
   PLUS2(x) -> PLUS(s(s(0)), x)
   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), plus2(x), plus1(y))

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   plus1(x0)
   plus2(x0)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), plus2(x), plus1(y))

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), plus2(x), plus1(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   plus1(x) -> plus(s(0), x)
   plus2(x) -> plus(s(s(0)), x)
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [zr0 / s(zr0)] on the rule
F(true, s(s(s(zr0))), s(zr1))[zr0 / s(zr0), zr1 / s(zr1)]^n[zr1 / 0] -> F(true, s(s(s(s(zr0)))), s(s(zr1)))[zr0 / s(zr0), zr1 / s(zr1)]^n[zr1 / 0, zr0 / s(zr0)]
This rule is correct for the QDP as the following derivation shows:

F(true, s(s(s(zr0))), s(zr1))[zr0 / s(zr0), zr1 / s(zr1)]^n[zr1 / 0] -> F(true, s(s(s(s(zr0)))), s(s(zr1)))[zr0 / s(zr0), zr1 / s(zr1)]^n[zr1 / 0, zr0 / s(zr0)]
    by Equivalency by Simplifying Mu with mu1: [zr0 / s(zr0)] mu2: [zr1 / 0]
    intermediate steps: Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
    F(true, s(s(zl2)), s(zl3))[zl2 / s(zl2), zl3 / s(zl3)]^n[zl2 / y0, zl3 / 0] -> F(true, s(s(s(s(zr2)))), s(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3)]^n[zr2 / y0, zr3 / 0]
        by Rewrite t with the rewrite sequence <Pos,Rule>: [([1],plus2(x) -> plus(s(s(0)), x)), ([1],plus(s(x), y) -> s(plus(x, y))), ([1,0],plus(s(x), y) -> s(plus(x, y))), ([1,0,0],plus(0, y) -> y), ([2],plus1(x) -> plus(s(0), x)), ([2],plus(s(x), y) -> s(plus(x, y))), ([2,0],plus(0, y) -> y)]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs)
        F(true, s(s(zl2)), s(zl3))[zr2 / s(zr2), zr3 / s(zr3), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / y0, zr3 / 0, zl2 / y0, zl3 / 0] -> F(true, plus2(s(s(zr2))), plus1(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / y0, zr3 / 0, zl2 / y0, zl3 / 0]
            by Narrowing at position: [0]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv Smu (rhs) - Equiv Smu (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
            F(true, s(zs2), s(zs3))[zs2 / s(zs2), zs3 / s(zs3)]^n[zs2 / y1, zs3 / y0] -> F(gt(y1, y0), plus2(s(zs2)), plus1(s(zs3)))[zs2 / s(zs2), zs3 / s(zs3)]^n[zs2 / y1, zs3 / y0]
                by Narrowing at position: [0]
                intermediate steps: Instantiate mu - Instantiate Sigma - Instantiation - Instantiation - Instantiation
                F(true, x, y)[ ]^n[ ] -> F(gt(x, y), plus2(x), plus1(y))[ ]^n[ ]
                    by Rule from TRS P

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (rhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
                gt(s(x), s(y))[x / s(x), y / s(y)]^n[ ] -> gt(x, y)[ ]^n[ ]
                    by PatternCreation I with delta: [ ], theta: [ ], sigma: [x / s(x), y / s(y)]
                    gt(s(x), s(y))[ ]^n[ ] -> gt(x, y)[ ]^n[ ]
                        by Rule from TRS R

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation
            gt(s(x), 0)[ ]^n[ ] -> true[ ]^n[ ]
                by Rule from TRS R
----------------------------------------

(25)
NO
