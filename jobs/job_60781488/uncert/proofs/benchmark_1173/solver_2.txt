YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6HB7q.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> SQR(N)
   SQR(s(X)) -> S(add(sqr(X), dbl(X)))
   SQR(s(X)) -> ADD(sqr(X), dbl(X))
   SQR(s(X)) -> SQR(X)
   SQR(s(X)) -> DBL(X)
   DBL(s(X)) -> S(s(dbl(X)))
   DBL(s(X)) -> S(dbl(X))
   DBL(s(X)) -> DBL(X)
   ADD(s(X), Y) -> S(add(X, Y))
   ADD(s(X), Y) -> ADD(X, Y)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   HALF(s(s(X))) -> S(half(X))
   HALF(s(s(X))) -> HALF(X)
   ACTIVATE(n__terms(X)) -> TERMS(activate(X))
   ACTIVATE(n__terms(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 10 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(X))) -> HALF(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(X))) -> HALF(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(X))) -> HALF(X)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(s(X), Y) -> ADD(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(s(X)) -> DBL(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DBL(s(X)) -> DBL(X)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SQR(s(X)) -> SQR(X)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__terms(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVATE(x1)  =  x1

n__terms(x1)  =  x1

n__s(x1)  =  x1

n__first(x1, x2)  =  n__first(x1, x2)

FIRST(x1, x2)  =  x2

activate(x1)  =  activate(x1)

cons(x1, x2)  =  x2

terms(x1)  =  x1

s(x1)  =  x1

first(x1, x2)  =  first(x1, x2)

0  =  0

nil  =  nil


Knuth-Bendix order [KBO] with precedence:activate_1 > 0
activate_1 > first_2 > n__first_2
activate_1 > nil

and weight map:

   0=2
   first_2=2
   activate_1=0
   n__first_2=2
   nil=4

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   s(X) -> n__s(X)
   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   terms(X) -> n__terms(X)
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__terms(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__terms(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(n__s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(add(sqr(X), dbl(X)))
   dbl(0) -> 0
   dbl(s(X)) -> s(s(dbl(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(X))) -> s(half(X))
   half(dbl(X)) -> X
   terms(X) -> n__terms(X)
   s(X) -> n__s(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__terms(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*ACTIVATE(n__terms(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(33)
YES
