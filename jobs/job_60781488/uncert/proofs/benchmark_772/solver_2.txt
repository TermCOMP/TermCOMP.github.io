YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/YpLdA.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 31 ms]
(2) QTRS
(3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(a) -> g(h(a))
   h(g(x)) -> g(h(f(x)))
   k(x, h(x), a) -> h(x)
   k(f(x), y, x) -> f(x)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a) = 0
   POL(f(x_1)) = x_1
   POL(g(x_1)) = 2*x_1
   POL(h(x_1)) = x_1
   POL(k(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_2 + x_3
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   k(x, h(x), a) -> h(x)
   k(f(x), y, x) -> f(x)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(a) -> g(h(a))
   h(g(x)) -> g(h(f(x)))

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(a) -> g(h(a))
   h(g(x)) -> g(h(f(x)))

The set Q consists of the following terms:

   f(a)
   h(g(x0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a) -> H(a)
   H(g(x)) -> H(f(x))
   H(g(x)) -> F(x)

The TRS R consists of the following rules:

   f(a) -> g(h(a))
   h(g(x)) -> g(h(f(x)))

The set Q consists of the following terms:

   f(a)
   h(g(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(g(x)) -> H(f(x))

The TRS R consists of the following rules:

   f(a) -> g(h(a))
   h(g(x)) -> g(h(f(x)))

The set Q consists of the following terms:

   f(a)
   h(g(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(g(x)) -> H(f(x))

The TRS R consists of the following rules:

   f(a) -> g(h(a))

The set Q consists of the following terms:

   f(a)
   h(g(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 1. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   H(g(x)) -> H(f(x))

To find matches we regarded all rules of R and P:

   f(a) -> g(h(a))
   H(g(x)) -> H(f(x))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
31, 32, 33, 34, 35, 36

Node 31 is start node and node 32 is final node.

Those nodes are connected through the following edges:

* 31 to 33 labelled H_1(0)* 31 to 36 labelled H_1(1)* 32 to 32 labelled #_1(0)* 33 to 32 labelled f_1(0)* 33 to 34 labelled g_1(1)* 34 to 35 labelled h_1(1)* 35 to 32 labelled a(1)* 36 to 34 labelled f_1(1)


----------------------------------------

(12)
YES
