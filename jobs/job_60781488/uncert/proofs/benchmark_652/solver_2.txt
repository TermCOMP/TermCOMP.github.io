YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/InjiJ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) NonInfProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPOrderProof [EQUIVALENT, 26 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   a -> b
   a -> c

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))

The TRS R 2 is 
   a -> b
   a -> c

The signature Sigma is {a, b, c}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   a -> b
   a -> c

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, y) -> PLUSITER(x, y, 0)
   PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z)
   PLUSITER(x, y, z) -> LE(x, z)
   IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))
   LE(s(x), s(y)) -> LE(x, y)
   SUM(xs) -> SUMITER(xs, 0)
   SUMITER(xs, x) -> IFSUM(isempty(xs), xs, x, plus(x, head(xs)))
   SUMITER(xs, x) -> ISEMPTY(xs)
   SUMITER(xs, x) -> PLUS(x, head(xs))
   SUMITER(xs, x) -> HEAD(xs)
   IFSUM(false, xs, x, y) -> SUMITER(tail(xs), y)
   IFSUM(false, xs, x, y) -> TAIL(xs)

The TRS R consists of the following rules:

   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   a -> b
   a -> c

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   a -> b
   a -> c

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))
   PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z)

The TRS R consists of the following rules:

   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   a -> b
   a -> c

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))
   PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))
   PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z)) the following chains were created:
*We consider the chain PLUSITER(x3, x4, x5) -> IFPLUS(le(x3, x5), x3, x4, x5), IFPLUS(false, x6, x7, x8) -> PLUSITER(x6, s(x7), s(x8)) which results in the following constraint:

(1)    (IFPLUS(le(x3, x5), x3, x4, x5)=IFPLUS(false, x6, x7, x8)  ==>  IFPLUS(false, x6, x7, x8)_>=_PLUSITER(x6, s(x7), s(x8)))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (le(x3, x5)=false  ==>  IFPLUS(false, x3, x4, x5)_>=_PLUSITER(x3, s(x4), s(x5)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on le(x3, x5)=false which results in the following new constraints:

(3)    (false=false  ==>  IFPLUS(false, s(x18), x4, 0)_>=_PLUSITER(s(x18), s(x4), s(0)))

(4)    (le(x21, x20)=false & (\/x22:le(x21, x20)=false  ==>  IFPLUS(false, x21, x22, x20)_>=_PLUSITER(x21, s(x22), s(x20)))  ==>  IFPLUS(false, s(x21), x4, s(x20))_>=_PLUSITER(s(x21), s(x4), s(s(x20))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IFPLUS(false, s(x18), x4, 0)_>=_PLUSITER(s(x18), s(x4), s(0)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x22:le(x21, x20)=false  ==>  IFPLUS(false, x21, x22, x20)_>=_PLUSITER(x21, s(x22), s(x20))) with sigma = [x22 / x4] which results in the following new constraint:

(6)    (IFPLUS(false, x21, x4, x20)_>=_PLUSITER(x21, s(x4), s(x20))  ==>  IFPLUS(false, s(x21), x4, s(x20))_>=_PLUSITER(s(x21), s(x4), s(s(x20))))








For Pair PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z) the following chains were created:
*We consider the chain IFPLUS(false, x9, x10, x11) -> PLUSITER(x9, s(x10), s(x11)), PLUSITER(x12, x13, x14) -> IFPLUS(le(x12, x14), x12, x13, x14) which results in the following constraint:

(1)    (PLUSITER(x9, s(x10), s(x11))=PLUSITER(x12, x13, x14)  ==>  PLUSITER(x12, x13, x14)_>=_IFPLUS(le(x12, x14), x12, x13, x14))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (PLUSITER(x9, s(x10), s(x11))_>=_IFPLUS(le(x9, s(x11)), x9, s(x10), s(x11)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))

*(IFPLUS(false, s(x18), x4, 0)_>=_PLUSITER(s(x18), s(x4), s(0)))


*(IFPLUS(false, x21, x4, x20)_>=_PLUSITER(x21, s(x4), s(x20))  ==>  IFPLUS(false, s(x21), x4, s(x20))_>=_PLUSITER(s(x21), s(x4), s(s(x20))))




*PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z)

*(PLUSITER(x9, s(x10), s(x11))_>=_IFPLUS(le(x9, s(x11)), x9, s(x10), s(x11)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IFPLUS(x_1, x_2, x_3, x_4)) = -1 - x_1 + x_2 - x_4
   POL(PLUSITER(x_1, x_2, x_3)) = -1 + x_1 - x_3
   POL(c) = -2
   POL(false) = 0
   POL(le(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))
The following pairs are in P_bound:
   IFPLUS(false, x, y, z) -> PLUSITER(x, s(y), s(z))
The following rules are usable:
   false -> le(s(x), 0)
   true -> le(0, y)
   le(x, y) -> le(s(x), s(y))

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUSITER(x, y, z) -> IFPLUS(le(x, z), x, y, z)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)

The set Q consists of the following terms:

   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(22)
TRUE

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUMITER(xs, x) -> IFSUM(isempty(xs), xs, x, plus(x, head(xs)))
   IFSUM(false, xs, x, y) -> SUMITER(tail(xs), y)

The TRS R consists of the following rules:

   plus(x, y) -> plusIter(x, y, 0)
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   ifPlus(true, x, y, z) -> y
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   sum(xs) -> sumIter(xs, 0)
   sumIter(xs, x) -> ifSum(isempty(xs), xs, x, plus(x, head(xs)))
   ifSum(true, xs, x, y) -> x
   ifSum(false, xs, x, y) -> sumIter(tail(xs), y)
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   a -> b
   a -> c

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUMITER(xs, x) -> IFSUM(isempty(xs), xs, x, plus(x, head(xs)))
   IFSUM(false, xs, x, y) -> SUMITER(tail(xs), y)

The TRS R consists of the following rules:

   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   plus(x, y) -> plusIter(x, y, 0)
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   ifPlus(true, x, y, z) -> y

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))
   a

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   sum(x0)
   sumIter(x0, x1)
   ifSum(true, x0, x1, x2)
   ifSum(false, x0, x1, x2)
   a


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUMITER(xs, x) -> IFSUM(isempty(xs), xs, x, plus(x, head(xs)))
   IFSUM(false, xs, x, y) -> SUMITER(tail(xs), y)

The TRS R consists of the following rules:

   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   plus(x, y) -> plusIter(x, y, 0)
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   ifPlus(true, x, y, z) -> y

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SUMITER(xs, x) -> IFSUM(isempty(xs), xs, x, plus(x, head(xs)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = 0
   POL(IFSUM(x_1, x_2, x_3, x_4)) = x_1 + [1/2]x_2
   POL(SUMITER(x_1, x_2)) = [1/4] + x_1
   POL(cons(x_1, x_2)) = [1] + [1/4]x_1 + [4]x_2
   POL(error) = [1]
   POL(false) = [1/4]
   POL(head(x_1)) = 0
   POL(ifPlus(x_1, x_2, x_3, x_4)) = [1] + x_2 + x_3 + x_4
   POL(isempty(x_1)) = [1/4]x_1
   POL(le(x_1, x_2)) = [2]x_1 + [1/4]x_2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = 0
   POL(plusIter(x_1, x_2, x_3)) = [1] + x_1 + x_2 + x_3
   POL(s(x_1)) = [2] + [4]x_1
   POL(tail(x_1)) = [1/2]x_1
   POL(true) = 0
The value of delta used in the strict ordering is 1/4.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   tail(nil) -> nil
   tail(cons(x, xs)) -> xs


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFSUM(false, xs, x, y) -> SUMITER(tail(xs), y)

The TRS R consists of the following rules:

   tail(nil) -> nil
   tail(cons(x, xs)) -> xs
   isempty(nil) -> true
   isempty(cons(x, xs)) -> false
   head(nil) -> error
   head(cons(x, xs)) -> x
   plus(x, y) -> plusIter(x, y, 0)
   ifPlus(false, x, y, z) -> plusIter(x, s(y), s(z))
   plusIter(x, y, z) -> ifPlus(le(x, z), x, y, z)
   le(s(x), 0) -> false
   le(0, y) -> true
   le(s(x), s(y)) -> le(x, y)
   ifPlus(true, x, y, z) -> y

The set Q consists of the following terms:

   plus(x0, x1)
   plusIter(x0, x1, x2)
   ifPlus(true, x0, x1, x2)
   ifPlus(false, x0, x1, x2)
   le(s(x0), 0)
   le(0, x0)
   le(s(x0), s(x1))
   isempty(nil)
   isempty(cons(x0, x1))
   head(nil)
   head(cons(x0, x1))
   tail(nil)
   tail(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(31)
TRUE
