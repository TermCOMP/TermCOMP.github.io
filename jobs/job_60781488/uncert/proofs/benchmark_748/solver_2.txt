YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qi46s.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 28 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   int(0, 0) -> .(0, nil)
   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), 0) -> nil
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(nil) -> nil
   int_list(.(x, y)) -> .(s(x), int_list(y))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1 + x_2
   POL(0) = 0
   POL(int(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(int_list(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   int(0, 0) -> .(0, nil)
   int(s(x), 0) -> nil




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(nil) -> nil
   int_list(.(x, y)) -> .(s(x), int_list(y))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(0) = 0
   POL(int(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(int_list(x_1)) = 2*x_1
   POL(nil) = 1
   POL(s(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   int_list(nil) -> nil




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(.(x, y)) -> .(s(x), int_list(y))

Q is empty.

----------------------------------------

(5) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(.(x, y)) -> .(s(x), int_list(y))

The set Q consists of the following terms:

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(0, s(y)) -> INT(s(0), s(y))
   INT(s(x), s(y)) -> INT_LIST(int(x, y))
   INT(s(x), s(y)) -> INT(x, y)
   INT_LIST(.(x, y)) -> INT_LIST(y)

The TRS R consists of the following rules:

   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(.(x, y)) -> .(s(x), int_list(y))

The set Q consists of the following terms:

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT_LIST(.(x, y)) -> INT_LIST(y)

The TRS R consists of the following rules:

   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(.(x, y)) -> .(s(x), int_list(y))

The set Q consists of the following terms:

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT_LIST(.(x, y)) -> INT_LIST(y)

R is empty.
The set Q consists of the following terms:

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT_LIST(.(x, y)) -> INT_LIST(y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INT_LIST(.(x, y)) -> INT_LIST(y)
The graph contains the following edges 1 > 1


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(s(x), s(y)) -> INT(x, y)
   INT(0, s(y)) -> INT(s(0), s(y))

The TRS R consists of the following rules:

   int(0, s(y)) -> .(0, int(s(0), s(y)))
   int(s(x), s(y)) -> int_list(int(x, y))
   int_list(.(x, y)) -> .(s(x), int_list(y))

The set Q consists of the following terms:

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(s(x), s(y)) -> INT(x, y)
   INT(0, s(y)) -> INT(s(0), s(y))

R is empty.
The set Q consists of the following terms:

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   int(0, s(x0))
   int(s(x0), s(x1))
   int_list(.(x0, x1))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT(s(x), s(y)) -> INT(x, y)
   INT(0, s(y)) -> INT(s(0), s(y))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INT(s(x), s(y)) -> INT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


*INT(0, s(y)) -> INT(s(0), s(y))
The graph contains the following edges 2 >= 2


----------------------------------------

(24)
YES
