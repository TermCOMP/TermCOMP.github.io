YES

Problem 1: 

(VAR vu95NonEmpty n x y)
(RULES
app(add(n,x),y) -> add(n,app(x,y))
app(nil,y) -> y
reverse(add(n,x)) -> app(reverse(x),add(n,nil))
reverse(nil) -> nil
shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
shuffle(nil) -> nil
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 REVERSE(add(n,x)) -> APP(reverse(x),add(n,nil))
 REVERSE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
 REVERSE(add(n,x)) -> APP(reverse(x),add(n,nil))
 REVERSE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> REVERSE(x)
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 REVERSE(add(n,x)) -> REVERSE(x)
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->->Cycle:
->->-> Pairs:
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
->->-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(add(n,x),y) -> APP(x,y)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Projection:
 pi(APP) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 REVERSE(add(n,x)) -> REVERSE(x)
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Projection:
 pi(REVERSE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 SHUFFLE(add(n,x)) -> SHUFFLE(reverse(x))
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
-> Usable rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = X1 + X2
[reverse](X) = X + 1
[shuffle](X) = 0
[add](X1,X2) = X1 + X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[APP](X1,X2) = 0
[REVERSE](X) = 0
[SHUFFLE](X) = 2.X

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(add(n,x),y) -> add(n,app(x,y))
 app(nil,y) -> y
 reverse(add(n,x)) -> app(reverse(x),add(n,nil))
 reverse(nil) -> nil
 shuffle(add(n,x)) -> add(n,shuffle(reverse(x)))
 shuffle(nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
