YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/m9dus.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 29 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 5 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) RisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))
   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(add(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1
   POL(shuffle(x_1)) = 2 + 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   shuffle(nil) -> nil
   shuffle(add(n, x)) -> add(n, shuffle(reverse(x)))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(nil) -> nil
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(add(x_1, x_2)) = 2*x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(reverse(x_1)) = 2 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   reverse(nil) -> nil




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))
   reverse(add(n, x)) -> app(reverse(x), add(n, nil))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(add(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(app(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0
   POL(reverse(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   reverse(add(n, x)) -> app(reverse(x), add(n, nil))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:app_2 > add_2 > nil

and weight map:

   nil=1
   app_2=0
   add_2=0

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   app(nil, y) -> y
   app(add(n, x), y) -> add(n, app(x, y))




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(9) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(10)
YES
