YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VVyWs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) TransformationProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) TransformationProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) UsableRulesProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QReductionProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) Induction-Processor [SOUND, 4 ms]
        (44) AND
            (45) QDP
                (46) PisEmptyProof [EQUIVALENT, 0 ms]
                (47) YES
            (48) QTRS
                (49) QTRSRRRProof [EQUIVALENT, 27 ms]
                (50) QTRS
                (51) QTRSRRRProof [EQUIVALENT, 0 ms]
                (52) QTRS
                (53) RisEmptyProof [EQUIVALENT, 0 ms]
                (54) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)
   DEL(x, cons(y, xs)) -> IF(eq(x, y), x, y, xs)
   DEL(x, cons(y, xs)) -> EQ(x, y)
   IF(false, x, y, xs) -> DEL(x, xs)
   EQ(s(x), s(y)) -> EQ(x, y)
   DOUBLELIST(cons(x, xs)) -> DOUBLE(x)
   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(del(first(cons(x, xs)), cons(x, xs)))
   DOUBLELIST(cons(x, xs)) -> DEL(first(cons(x, xs)), cons(x, xs))
   DOUBLELIST(cons(x, xs)) -> FIRST(cons(x, xs))

The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, xs) -> DEL(x, xs)
   DEL(x, cons(y, xs)) -> IF(eq(x, y), x, y, xs)

The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, xs) -> DEL(x, xs)
   DEL(x, cons(y, xs)) -> IF(eq(x, y), x, y, xs)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, xs) -> DEL(x, xs)
   DEL(x, cons(y, xs)) -> IF(eq(x, y), x, y, xs)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DEL(x, cons(y, xs)) -> IF(eq(x, y), x, y, xs)
The graph contains the following edges 1 >= 2, 2 > 3, 2 > 4


*IF(false, x, y, xs) -> DEL(x, xs)
The graph contains the following edges 2 >= 1, 4 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOUBLE(s(x)) -> DOUBLE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(del(first(cons(x, xs)), cons(x, xs)))

The TRS R consists of the following rules:

   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   del(x, nil) -> nil
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   first(nil) -> 0
   first(cons(x, xs)) -> x
   doublelist(nil) -> nil
   doublelist(cons(x, xs)) -> cons(double(x), doublelist(del(first(cons(x, xs)), cons(x, xs))))

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(del(first(cons(x, xs)), cons(x, xs)))

The TRS R consists of the following rules:

   first(cons(x, xs)) -> x
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, nil) -> nil

The set Q consists of the following terms:

   double(0)
   double(s(x0))
   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))
   doublelist(nil)
   doublelist(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   double(0)
   double(s(x0))
   doublelist(nil)
   doublelist(cons(x0, x1))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(del(first(cons(x, xs)), cons(x, xs)))

The TRS R consists of the following rules:

   first(cons(x, xs)) -> x
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, nil) -> nil

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule DOUBLELIST(cons(x, xs)) -> DOUBLELIST(del(first(cons(x, xs)), cons(x, xs))) at position [0] we obtained the following new rules [LPAR04]:

   (DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(first(cons(x, xs)), x), first(cons(x, xs)), x, xs)),DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(first(cons(x, xs)), x), first(cons(x, xs)), x, xs)))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(first(cons(x, xs)), x), first(cons(x, xs)), x, xs))

The TRS R consists of the following rules:

   first(cons(x, xs)) -> x
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, nil) -> nil

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(first(cons(x, xs)), x), first(cons(x, xs)), x, xs)) at position [0,0,0] we obtained the following new rules [LPAR04]:

   (DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), first(cons(x, xs)), x, xs)),DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), first(cons(x, xs)), x, xs)))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), first(cons(x, xs)), x, xs))

The TRS R consists of the following rules:

   first(cons(x, xs)) -> x
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, nil) -> nil

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), first(cons(x, xs)), x, xs)) at position [0,1] we obtained the following new rules [LPAR04]:

   (DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), x, x, xs)),DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), x, x, xs)))


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), x, x, xs))

The TRS R consists of the following rules:

   first(cons(x, xs)) -> x
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   eq(0, 0) -> true
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, nil) -> nil

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), x, x, xs))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   del(x, nil) -> nil
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   first(nil)
   first(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   first(nil)
   first(cons(x0, x1))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), x, x, xs))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   del(x, nil) -> nil
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) Induction-Processor (SOUND)

This DP could be deleted by the Induction-Processor:
DOUBLELIST(cons(x, xs)) -> DOUBLELIST(if(eq(x, x), x, x, xs))


This order was computed:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(DOUBLELIST(x_1)) = x_1
   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(del(x_1, x_2)) = x_2
   POL(eq(x_1, x_2)) = 1 + x_2
   POL(false_renamed) = 1
   POL(if(x_1, x_2, x_3, x_4)) = 1 + x_3 + x_4
   POL(nil) = 1
   POL(s(x_1)) = 1 + x_1
   POL(true_renamed) = 1

At least one of these decreasing rules is always used after the deleted DP:
if(true_renamed, x'', y', xs') -> xs'


The following formula is valid:
x:sort[a19],xs:sort[a4].if'(eq(x, x), x, x, xs)=true


The transformed set:
if'(true_renamed, x'', y', xs') -> true
if'(false_renamed, x1, y'', xs'') -> del'(x1, xs'')
del'(x2, cons(y1, xs1)) -> if'(eq(x2, y1), x2, y1, xs1)
del'(x3, nil) -> false
eq(0, 0) -> true_renamed
eq(s(x'), s(y)) -> eq(x', y)
if(true_renamed, x'', y', xs') -> xs'
if(false_renamed, x1, y'', xs'') -> cons(y'', del(x1, xs''))
del(x2, cons(y1, xs1)) -> if(eq(x2, y1), x2, y1, xs1)
del(x3, nil) -> nil
eq(0, s(y2)) -> false_renamed
eq(s(x4), 0) -> false_renamed
equal_bool(true, false) -> false
equal_bool(false, true) -> false
equal_bool(true, true) -> true
equal_bool(false, false) -> true
and(true, x) -> x
and(false, x) -> false
or(true, x) -> true
or(false, x) -> x
not(false) -> true
not(true) -> false
isa_true(true) -> true
isa_true(false) -> false
isa_false(true) -> false
isa_false(false) -> true
equal_sort[a19](0, 0) -> true
equal_sort[a19](0, s(v13)) -> false
equal_sort[a19](s(v14), 0) -> false
equal_sort[a19](s(v14), s(v15)) -> equal_sort[a19](v14, v15)
equal_sort[a4](cons(v16, v17), cons(v18, v19)) -> and(equal_sort[a19](v16, v18), equal_sort[a4](v17, v19))
equal_sort[a4](cons(v16, v17), nil) -> false
equal_sort[a4](nil, cons(v20, v21)) -> false
equal_sort[a4](nil, nil) -> true
equal_sort[a18](true_renamed, true_renamed) -> true
equal_sort[a18](true_renamed, false_renamed) -> false
equal_sort[a18](false_renamed, true_renamed) -> false
equal_sort[a18](false_renamed, false_renamed) -> true
equal_sort[a37](witness_sort[a37], witness_sort[a37]) -> true


The proof given by the theorem prover:
The following output was given by the internal theorem prover:proof of internal
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Partial correctness of the following Program

   [x, v13, v14, v15, v16, v17, v18, v19, v20, v21, x'', y', xs', x1, y'', y1, xs1, x3, x2, x', y, y2, x4]
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   true and x -> x
   false and x -> false
   true or x -> true
   false or x -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a19](0, 0) -> true
   equal_sort[a19](0, s(v13)) -> false
   equal_sort[a19](s(v14), 0) -> false
   equal_sort[a19](s(v14), s(v15)) -> equal_sort[a19](v14, v15)
   equal_sort[a4](cons(v16, v17), cons(v18, v19)) -> equal_sort[a19](v16, v18) and equal_sort[a4](v17, v19)
   equal_sort[a4](cons(v16, v17), nil) -> false
   equal_sort[a4](nil, cons(v20, v21)) -> false
   equal_sort[a4](nil, nil) -> true
   equal_sort[a18](true_renamed, true_renamed) -> true
   equal_sort[a18](true_renamed, false_renamed) -> false
   equal_sort[a18](false_renamed, true_renamed) -> false
   equal_sort[a18](false_renamed, false_renamed) -> true
   equal_sort[a37](witness_sort[a37], witness_sort[a37]) -> true
   if'(true_renamed, x'', y', xs') -> true
   if'(false_renamed, x1, y'', cons(y1, xs1)) -> if'(eq(x1, y1), x1, y1, xs1)
   if'(false_renamed, x1, y'', nil) -> false
   del'(x3, nil) -> false
   equal_sort[a18](eq(x2, y1), true_renamed) -> true | del'(x2, cons(y1, xs1)) -> true
   equal_sort[a18](eq(x2, y1), true_renamed) -> false | del'(x2, cons(y1, xs1)) -> del'(x2, xs1)
   eq(0, 0) -> true_renamed
   eq(s(x'), s(y)) -> eq(x', y)
   eq(0, s(y2)) -> false_renamed
   eq(s(x4), 0) -> false_renamed
   if(true_renamed, x'', y', xs') -> xs'
   if(false_renamed, x1, y'', cons(y1, xs1)) -> cons(y'', if(eq(x1, y1), x1, y1, xs1))
   if(false_renamed, x1, y'', nil) -> cons(y'', nil)
   del(x3, nil) -> nil
   equal_sort[a18](eq(x2, y1), true_renamed) -> true | del(x2, cons(y1, xs1)) -> xs1
   equal_sort[a18](eq(x2, y1), true_renamed) -> false | del(x2, cons(y1, xs1)) -> cons(y1, del(x2, xs1))

using the following formula:
x:sort[a19],xs:sort[a4].if'(eq(x, x), x, x, xs)=true

could be successfully shown:
(0) Formula
(1) Induction by data structure [EQUIVALENT, 0 ms]
(2) AND
    (3) Formula
        (4) Symbolic evaluation [EQUIVALENT, 0 ms]
        (5) YES
    (6) Formula
        (7) Symbolic evaluation [EQUIVALENT, 0 ms]
        (8) Formula
        (9) Case Analysis [EQUIVALENT, 0 ms]
        (10) AND
            (11) Formula
                (12) Inverse Substitution [SOUND, 0 ms]
                (13) Formula
                (14) Induction by data structure [SOUND, 0 ms]
                (15) AND
                    (16) Formula
                        (17) Symbolic evaluation [EQUIVALENT, 0 ms]
                        (18) YES
                    (19) Formula
                        (20) Symbolic evaluation under hypothesis [EQUIVALENT, 0 ms]
                        (21) YES
            (22) Formula
                (23) Inverse Substitution [SOUND, 0 ms]
                (24) Formula
                (25) Induction by data structure [SOUND, 0 ms]
                (26) AND
                    (27) Formula
                        (28) Symbolic evaluation [EQUIVALENT, 0 ms]
                        (29) YES
                    (30) Formula
                        (31) Symbolic evaluation under hypothesis [EQUIVALENT, 0 ms]
                        (32) YES


----------------------------------------

(0)
Obligation:
Formula:
x:sort[a19],xs:sort[a4].if'(eq(x, x), x, x, xs)=true

There are no hypotheses.




----------------------------------------

(1) Induction by data structure (EQUIVALENT)
Induction by data structure sort[a19] generates the following cases:



1. Base Case:
Formula:
xs:sort[a4].if'(eq(0, 0), 0, 0, xs)=true

There are no hypotheses.





1. Step Case:
Formula:
n:sort[a19],xs:sort[a4].if'(eq(s(n), s(n)), s(n), s(n), xs)=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true






----------------------------------------

(2)
Complex Obligation (AND)

----------------------------------------

(3)
Obligation:
Formula:
xs:sort[a4].if'(eq(0, 0), 0, 0, xs)=true

There are no hypotheses.




----------------------------------------

(4) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(5)
YES

----------------------------------------

(6)
Obligation:
Formula:
n:sort[a19],xs:sort[a4].if'(eq(s(n), s(n)), s(n), s(n), xs)=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true




----------------------------------------

(7) Symbolic evaluation (EQUIVALENT)
Could be shown by simple symbolic evaluation.
----------------------------------------

(8)
Obligation:
Formula:
n:sort[a19],xs:sort[a4].if'(eq(n, n), s(n), s(n), xs)=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true




----------------------------------------

(9) Case Analysis (EQUIVALENT)
Case analysis leads to the following new obligations:

Formula:
n:sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(n, n), s(n), s(n), cons(x_1, x_2))=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true





Formula:
n:sort[a19].if'(eq(n, n), s(n), s(n), nil)=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true






----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Formula:
n:sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(n, n), s(n), s(n), cons(x_1, x_2))=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true




----------------------------------------

(12) Inverse Substitution (SOUND)
The formula could be generalised by inverse substitution to:
n:sort[a19],n':sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(n, n), n', n', cons(x_1, x_2))=true

Inverse substitution used:
[s(n)/n']


----------------------------------------

(13)
Obligation:
Formula:
n:sort[a19],n':sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(n, n), n', n', cons(x_1, x_2))=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true




----------------------------------------

(14) Induction by data structure (SOUND)
Induction by data structure sort[a19] generates the following cases:



1. Base Case:
Formula:
n':sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(0, 0), n', n', cons(x_1, x_2))=true

There are no hypotheses.





1. Step Case:
Formula:
n'':sort[a19],n':sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(s(n''), s(n'')), n', n', cons(x_1, x_2))=true

Hypotheses:
n'':sort[a19],!n':sort[a19],!x_1:sort[a19],!x_2:sort[a4].if'(eq(n'', n''), n', n', cons(x_1, x_2))=true






----------------------------------------

(15)
Complex Obligation (AND)

----------------------------------------

(16)
Obligation:
Formula:
n':sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(0, 0), n', n', cons(x_1, x_2))=true

There are no hypotheses.




----------------------------------------

(17) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Formula:
n'':sort[a19],n':sort[a19],x_1:sort[a19],x_2:sort[a4].if'(eq(s(n''), s(n'')), n', n', cons(x_1, x_2))=true

Hypotheses:
n'':sort[a19],!n':sort[a19],!x_1:sort[a19],!x_2:sort[a4].if'(eq(n'', n''), n', n', cons(x_1, x_2))=true




----------------------------------------

(20) Symbolic evaluation under hypothesis (EQUIVALENT)
Could be shown using symbolic evaluation under hypothesis, by using the following hypotheses:

n'':sort[a19],!n':sort[a19],!x_1:sort[a19],!x_2:sort[a4].if'(eq(n'', n''), n', n', cons(x_1, x_2))=true

----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Formula:
n:sort[a19].if'(eq(n, n), s(n), s(n), nil)=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true




----------------------------------------

(23) Inverse Substitution (SOUND)
The formula could be generalised by inverse substitution to:
n:sort[a19],n':sort[a19].if'(eq(n, n), n', n', nil)=true

Inverse substitution used:
[s(n)/n']


----------------------------------------

(24)
Obligation:
Formula:
n:sort[a19],n':sort[a19].if'(eq(n, n), n', n', nil)=true

Hypotheses:
n:sort[a19],!xs:sort[a4].if'(eq(n, n), n, n, xs)=true




----------------------------------------

(25) Induction by data structure (SOUND)
Induction by data structure sort[a19] generates the following cases:



1. Base Case:
Formula:
n':sort[a19].if'(eq(0, 0), n', n', nil)=true

There are no hypotheses.





1. Step Case:
Formula:
n'':sort[a19],n':sort[a19].if'(eq(s(n''), s(n'')), n', n', nil)=true

Hypotheses:
n'':sort[a19],!n':sort[a19].if'(eq(n'', n''), n', n', nil)=true






----------------------------------------

(26)
Complex Obligation (AND)

----------------------------------------

(27)
Obligation:
Formula:
n':sort[a19].if'(eq(0, 0), n', n', nil)=true

There are no hypotheses.




----------------------------------------

(28) Symbolic evaluation (EQUIVALENT)
Could be reduced to the following new obligation by simple symbolic evaluation:
True
----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Formula:
n'':sort[a19],n':sort[a19].if'(eq(s(n''), s(n'')), n', n', nil)=true

Hypotheses:
n'':sort[a19],!n':sort[a19].if'(eq(n'', n''), n', n', nil)=true




----------------------------------------

(31) Symbolic evaluation under hypothesis (EQUIVALENT)
Could be shown using symbolic evaluation under hypothesis, by using the following hypotheses:

n'':sort[a19],!n':sort[a19].if'(eq(n'', n''), n', n', nil)=true

----------------------------------------

(32)
YES

----------------------------------------

(44)
Complex Obligation (AND)

----------------------------------------

(45)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(s(x), s(y)) -> eq(x, y)
   if(true, x, y, xs) -> xs
   if(false, x, y, xs) -> cons(y, del(x, xs))
   del(x, cons(y, xs)) -> if(eq(x, y), x, y, xs)
   del(x, nil) -> nil
   eq(0, s(y)) -> false
   eq(s(x), 0) -> false

The set Q consists of the following terms:

   del(x0, nil)
   del(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   if'(true_renamed, x'', y', xs') -> true
   if'(false_renamed, x1, y'', xs'') -> del'(x1, xs'')
   del'(x2, cons(y1, xs1)) -> if'(eq(x2, y1), x2, y1, xs1)
   del'(x3, nil) -> false
   eq(0, 0) -> true_renamed
   eq(s(x'), s(y)) -> eq(x', y)
   if(true_renamed, x'', y', xs') -> xs'
   if(false_renamed, x1, y'', xs'') -> cons(y'', del(x1, xs''))
   del(x2, cons(y1, xs1)) -> if(eq(x2, y1), x2, y1, xs1)
   del(x3, nil) -> nil
   eq(0, s(y2)) -> false_renamed
   eq(s(x4), 0) -> false_renamed
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   and(true, x) -> x
   and(false, x) -> false
   or(true, x) -> true
   or(false, x) -> x
   not(false) -> true
   not(true) -> false
   isa_true(true) -> true
   isa_true(false) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a19](0, 0) -> true
   equal_sort[a19](0, s(v13)) -> false
   equal_sort[a19](s(v14), 0) -> false
   equal_sort[a19](s(v14), s(v15)) -> equal_sort[a19](v14, v15)
   equal_sort[a4](cons(v16, v17), cons(v18, v19)) -> and(equal_sort[a19](v16, v18), equal_sort[a4](v17, v19))
   equal_sort[a4](cons(v16, v17), nil) -> false
   equal_sort[a4](nil, cons(v20, v21)) -> false
   equal_sort[a4](nil, nil) -> true
   equal_sort[a18](true_renamed, true_renamed) -> true
   equal_sort[a18](true_renamed, false_renamed) -> false
   equal_sort[a18](false_renamed, true_renamed) -> false
   equal_sort[a18](false_renamed, false_renamed) -> true
   equal_sort[a37](witness_sort[a37], witness_sort[a37]) -> true

Q is empty.

----------------------------------------

(49) QTRSRRRProof (EQUIVALENT)
Used ordering:
if'/4(YES,YES,YES,YES)
true_renamed/0)
true/0)
false_renamed/0)
del'/2(YES,YES)
cons/2(YES,YES)
eq/2(YES,YES)
nil/0)
false/0)
0/0)
s/1)YES(
if/4(YES,YES,YES,YES)
del/2(YES,YES)
equal_bool/2(YES,YES)
and/2(YES,YES)
or/2(YES,YES)
not/1)YES(
isa_true/1(YES)
isa_false/1)YES(
equal_sort[a19]/2(YES,YES)
equal_sort[a4]/2(YES,YES)
equal_sort[a18]/2(YES,YES)
equal_sort[a37]/2(YES,YES)
witness_sort[a37]/0)

Quasi precedence:
[true_renamed, 0] > [true, nil, false, witness_sort[a37]]
[true_renamed, 0] > false_renamed
[if_4, del_2] > [if'_4, del'_2, eq_2] > false_renamed
[if_4, del_2] > cons_2 > and_2
equal_bool_2 > [true, nil, false, witness_sort[a37]]
equal_sort[a4]_2 > and_2
equal_sort[a4]_2 > equal_sort[a19]_2
equal_sort[a18]_2 > [true, nil, false, witness_sort[a37]]
equal_sort[a37]_2 > [true, nil, false, witness_sort[a37]]


Status:
if'_4: [2,4,1,3]
true_renamed: multiset status
true: multiset status
false_renamed: multiset status
del'_2: [1,2]
cons_2: multiset status
eq_2: [1,2]
nil: multiset status
false: multiset status
0: multiset status
if_4: [4,2,1,3]
del_2: [2,1]
equal_bool_2: multiset status
and_2: [1,2]
or_2: [2,1]
isa_true_1: multiset status
equal_sort[a19]_2: [2,1]
equal_sort[a4]_2: multiset status
equal_sort[a18]_2: multiset status
equal_sort[a37]_2: multiset status
witness_sort[a37]: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   if'(true_renamed, x'', y', xs') -> true
   if'(false_renamed, x1, y'', xs'') -> del'(x1, xs'')
   del'(x2, cons(y1, xs1)) -> if'(eq(x2, y1), x2, y1, xs1)
   del'(x3, nil) -> false
   eq(0, 0) -> true_renamed
   if(true_renamed, x'', y', xs') -> xs'
   if(false_renamed, x1, y'', xs'') -> cons(y'', del(x1, xs''))
   del(x2, cons(y1, xs1)) -> if(eq(x2, y1), x2, y1, xs1)
   del(x3, nil) -> nil
   eq(0, s(y2)) -> false_renamed
   eq(s(x4), 0) -> false_renamed
   equal_bool(true, false) -> false
   equal_bool(false, true) -> false
   equal_bool(true, true) -> true
   equal_bool(false, false) -> true
   and(true, x) -> x
   and(false, x) -> false
   or(true, x) -> true
   or(false, x) -> x
   isa_true(true) -> true
   isa_true(false) -> false
   equal_sort[a19](0, 0) -> true
   equal_sort[a19](0, s(v13)) -> false
   equal_sort[a19](s(v14), 0) -> false
   equal_sort[a4](cons(v16, v17), cons(v18, v19)) -> and(equal_sort[a19](v16, v18), equal_sort[a4](v17, v19))
   equal_sort[a4](cons(v16, v17), nil) -> false
   equal_sort[a4](nil, cons(v20, v21)) -> false
   equal_sort[a4](nil, nil) -> true
   equal_sort[a18](true_renamed, true_renamed) -> true
   equal_sort[a18](true_renamed, false_renamed) -> false
   equal_sort[a18](false_renamed, true_renamed) -> false
   equal_sort[a18](false_renamed, false_renamed) -> true
   equal_sort[a37](witness_sort[a37], witness_sort[a37]) -> true




----------------------------------------

(50)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(s(x'), s(y)) -> eq(x', y)
   not(false) -> true
   not(true) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a19](s(v14), s(v15)) -> equal_sort[a19](v14, v15)

Q is empty.

----------------------------------------

(51) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:s_1 > equal_sort[a19]_2 > isa_false_1 > not_1 > eq_2 > true > false

and weight map:

   false=1
   true=2
   s_1=0
   not_1=1
   isa_false_1=1
   eq_2=0
   equal_sort[a19]_2=0

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   eq(s(x'), s(y)) -> eq(x', y)
   not(false) -> true
   not(true) -> false
   isa_false(true) -> false
   isa_false(false) -> true
   equal_sort[a19](s(v14), s(v15)) -> equal_sort[a19](v14, v15)




----------------------------------------

(52)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(53) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(54)
YES
