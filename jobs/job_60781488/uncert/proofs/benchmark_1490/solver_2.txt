YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9N3nx.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(a, f(b, f(a, x))) -> f(a, f(b, f(b, f(a, x))))
   f(b, f(b, f(b, x))) -> f(b, f(b, x))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, f(a, x))) -> F(a, f(b, f(b, f(a, x))))
   F(a, f(b, f(a, x))) -> F(b, f(b, f(a, x)))

The TRS R consists of the following rules:

   f(a, f(b, f(a, x))) -> f(a, f(b, f(b, f(a, x))))
   f(b, f(b, f(b, x))) -> f(b, f(b, x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(a, f(b, f(a, x))) -> F(a, f(b, f(b, f(a, x))))

The TRS R consists of the following rules:

   f(a, f(b, f(a, x))) -> f(a, f(b, f(b, f(a, x))))
   f(b, f(b, f(b, x))) -> f(b, f(b, x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesReductionPairsProof (EQUIVALENT)
First, we A-transformed [FROCOS05] the QDP-Problem.
Then we obtain the following A-transformed DP problem.

The pairs P are: 

   a1(b(a(x))) -> a1(b(b(a(x))))

and the Q and R are:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(x))) -> a(b(b(a(x))))
   b(b(b(x))) -> b(b(x))

Q is empty.

By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   f(a, f(b, f(a, x))) -> f(a, f(b, f(b, f(a, x))))
   f(b, f(b, f(b, x))) -> f(b, f(b, x))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(a(x_1)) = x_1
   POL(a1(x_1)) = 2*x_1
   POL(b(x_1)) = x_1


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   a1(b(a(x))) -> a1(b(b(a(x))))

The TRS R consists of the following rules:

   a(b(a(x))) -> a(b(b(a(x))))
   b(b(b(x))) -> b(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 1. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   a1(b(a(x))) -> a1(b(b(a(x))))

To find matches we regarded all rules of R and P:

   a(b(a(x))) -> a(b(b(a(x))))
   b(b(b(x))) -> b(b(x))
   a1(b(a(x))) -> a1(b(b(a(x))))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
28, 29, 30, 31, 32, 33, 34, 35

Node 28 is start node and node 29 is final node.

Those nodes are connected through the following edges:

* 28 to 30 labelled a1_1(0)* 29 to 29 labelled #_1(0)* 30 to 31 labelled b_1(0)* 31 to 32 labelled b_1(0)* 32 to 29 labelled a_1(0)* 32 to 33 labelled a_1(1)* 33 to 34 labelled b_1(1)* 34 to 35 labelled b_1(1)* 35 to 29 labelled a_1(1)* 35 to 33 labelled a_1(1)


----------------------------------------

(8)
YES
