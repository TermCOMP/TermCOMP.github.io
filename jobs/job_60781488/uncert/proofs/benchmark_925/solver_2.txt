YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/02Opv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) QDPOrderProof [EQUIVALENT, 35 ms]
        (37) QDP
        (38) QDPOrderProof [EQUIVALENT, 27 ms]
        (39) QDP
        (40) QDPOrderProof [EQUIVALENT, 28 ms]
        (41) QDP
        (42) QDPOrderProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) DependencyGraphProof [EQUIVALENT, 0 ms]
        (45) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(0, 0)) -> MARK(true)
   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   ACTIVE(eq(s(X), s(Y))) -> EQ(X, Y)
   ACTIVE(eq(X, Y)) -> MARK(false)
   ACTIVE(inf(X)) -> MARK(cons(X, inf(s(X))))
   ACTIVE(inf(X)) -> CONS(X, inf(s(X)))
   ACTIVE(inf(X)) -> INF(s(X))
   ACTIVE(inf(X)) -> S(X)
   ACTIVE(take(0, X)) -> MARK(nil)
   ACTIVE(take(s(X), cons(Y, L))) -> MARK(cons(Y, take(X, L)))
   ACTIVE(take(s(X), cons(Y, L))) -> CONS(Y, take(X, L))
   ACTIVE(take(s(X), cons(Y, L))) -> TAKE(X, L)
   ACTIVE(length(nil)) -> MARK(0)
   ACTIVE(length(cons(X, L))) -> MARK(s(length(L)))
   ACTIVE(length(cons(X, L))) -> S(length(L))
   ACTIVE(length(cons(X, L))) -> LENGTH(L)
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   MARK(0) -> ACTIVE(0)
   MARK(true) -> ACTIVE(true)
   MARK(s(X)) -> ACTIVE(s(X))
   MARK(false) -> ACTIVE(false)
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))
   MARK(inf(X)) -> INF(mark(X))
   MARK(inf(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> TAKE(mark(X1), mark(X2))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(nil) -> ACTIVE(nil)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> LENGTH(mark(X))
   MARK(length(X)) -> MARK(X)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   INF(mark(X)) -> INF(X)
   INF(active(X)) -> INF(X)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)
   LENGTH(mark(X)) -> LENGTH(X)
   LENGTH(active(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 7 SCCs with 19 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(active(X)) -> LENGTH(X)
   LENGTH(mark(X)) -> LENGTH(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH(active(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


*LENGTH(mark(X)) -> LENGTH(X)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAKE(X1, mark(X2)) -> TAKE(X1, X2)
   TAKE(mark(X1), X2) -> TAKE(X1, X2)
   TAKE(active(X1), X2) -> TAKE(X1, X2)
   TAKE(X1, active(X2)) -> TAKE(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TAKE(X1, mark(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*TAKE(mark(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(active(X1), X2) -> TAKE(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*TAKE(X1, active(X2)) -> TAKE(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(active(X)) -> INF(X)
   INF(mark(X)) -> INF(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INF(active(X)) -> INF(X)
   INF(mark(X)) -> INF(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INF(active(X)) -> INF(X)
The graph contains the following edges 1 > 1


*INF(mark(X)) -> INF(X)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(X1, mark(X2)) -> EQ(X1, X2)
   EQ(mark(X1), X2) -> EQ(X1, X2)
   EQ(active(X1), X2) -> EQ(X1, X2)
   EQ(X1, active(X2)) -> EQ(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(X1, mark(X2)) -> EQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*EQ(mark(X1), X2) -> EQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*EQ(active(X1), X2) -> EQ(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*EQ(X1, active(X2)) -> EQ(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   ACTIVE(inf(X)) -> MARK(cons(X, inf(s(X))))
   MARK(s(X)) -> ACTIVE(s(X))
   ACTIVE(take(s(X), cons(Y, L))) -> MARK(cons(Y, take(X, L)))
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))
   ACTIVE(length(cons(X, L))) -> MARK(s(length(L)))
   MARK(inf(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(length(X)) -> ACTIVE(length(mark(X)))
   MARK(length(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(take(s(X), cons(Y, L))) -> MARK(cons(Y, take(X, L)))
   ACTIVE(length(cons(X, L))) -> MARK(s(length(L)))
   MARK(take(X1, X2)) -> MARK(X1)
   MARK(take(X1, X2)) -> MARK(X2)
   MARK(length(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

eq(x1, x2)  =  eq

MARK(x1)  =  x1

inf(x1)  =  x1

cons(x1, x2)  =  cons

s(x1)  =  s

take(x1, x2)  =  take(x1, x2)

mark(x1)  =  x1

length(x1)  =  length(x1)

active(x1)  =  x1

0  =  0

true  =  true

false  =  false

nil  =  nil


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=5
   true=5
   eq=7
   length_1=4
   take_2=3
   0=8
   cons=3
   false=5
   nil=8

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   inf(active(X)) -> inf(X)
   inf(mark(X)) -> inf(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   mark(s(X)) -> active(s(X))
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   mark(inf(X)) -> active(inf(mark(X)))
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(length(X)) -> active(length(mark(X)))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(nil) -> active(nil)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)
   active(eq(0, 0)) -> mark(true)
   active(eq(X, Y)) -> mark(false)
   active(take(0, X)) -> mark(nil)
   active(length(nil)) -> mark(0)


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   ACTIVE(inf(X)) -> MARK(cons(X, inf(s(X))))
   MARK(s(X)) -> ACTIVE(s(X))
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))
   MARK(inf(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(s(X)) -> ACTIVE(s(X))
   MARK(cons(X1, X2)) -> ACTIVE(cons(X1, X2))
   MARK(take(X1, X2)) -> ACTIVE(take(mark(X1), mark(X2)))
   MARK(length(X)) -> ACTIVE(length(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( MARK_1(x_1) ) = 2
POL( eq_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 1
POL( cons_2(x_1, x_2) ) = 0
POL( inf_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( 0 ) = 0
POL( true ) = 0
POL( false ) = 0
POL( nil ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   inf(active(X)) -> inf(X)
   inf(mark(X)) -> inf(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   ACTIVE(inf(X)) -> MARK(cons(X, inf(s(X))))
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))
   MARK(inf(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(inf(X)) -> MARK(cons(X, inf(s(X))))
   MARK(inf(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

eq(x1, x2)  =  eq

MARK(x1)  =  x1

inf(x1)  =  inf(x1)

cons(x1, x2)  =  cons

mark(x1)  =  x1

s(x1)  =  s

active(x1)  =  x1

take(x1, x2)  =  take

length(x1)  =  length

0  =  0

true  =  true

false  =  false

nil  =  nil


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s=1
   true=3
   eq=5
   length=3
   take=5
   0=2
   inf_1=3
   cons=3
   false=3
   nil=3

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   inf(active(X)) -> inf(X)
   inf(mark(X)) -> inf(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   mark(s(X)) -> active(s(X))
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   mark(inf(X)) -> active(inf(mark(X)))
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(length(X)) -> active(length(mark(X)))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(false) -> active(false)
   mark(nil) -> active(nil)
   active(eq(0, 0)) -> mark(true)
   active(eq(X, Y)) -> mark(false)
   active(take(0, X)) -> mark(nil)
   active(length(nil)) -> mark(0)
   take(X1, mark(X2)) -> take(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(active(X)) -> length(X)
   length(mark(X)) -> length(X)


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(eq(s(X), s(Y))) -> MARK(eq(X, Y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVE(x1)  =  x1

eq(x1, x2)  =  x2

s(x1)  =  s(x1)

MARK(x1)  =  x1

inf(x1)  =  inf

mark(x1)  =  x1

active(x1)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   inf=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   inf(active(X)) -> inf(X)
   inf(mark(X)) -> inf(X)


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(eq(X1, X2)) -> ACTIVE(eq(X1, X2))
   MARK(inf(X)) -> ACTIVE(inf(mark(X)))

The TRS R consists of the following rules:

   active(eq(0, 0)) -> mark(true)
   active(eq(s(X), s(Y))) -> mark(eq(X, Y))
   active(eq(X, Y)) -> mark(false)
   active(inf(X)) -> mark(cons(X, inf(s(X))))
   active(take(0, X)) -> mark(nil)
   active(take(s(X), cons(Y, L))) -> mark(cons(Y, take(X, L)))
   active(length(nil)) -> mark(0)
   active(length(cons(X, L))) -> mark(s(length(L)))
   mark(eq(X1, X2)) -> active(eq(X1, X2))
   mark(0) -> active(0)
   mark(true) -> active(true)
   mark(s(X)) -> active(s(X))
   mark(false) -> active(false)
   mark(inf(X)) -> active(inf(mark(X)))
   mark(cons(X1, X2)) -> active(cons(X1, X2))
   mark(take(X1, X2)) -> active(take(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(length(X)) -> active(length(mark(X)))
   eq(mark(X1), X2) -> eq(X1, X2)
   eq(X1, mark(X2)) -> eq(X1, X2)
   eq(active(X1), X2) -> eq(X1, X2)
   eq(X1, active(X2)) -> eq(X1, X2)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   inf(mark(X)) -> inf(X)
   inf(active(X)) -> inf(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   take(mark(X1), X2) -> take(X1, X2)
   take(X1, mark(X2)) -> take(X1, X2)
   take(active(X1), X2) -> take(X1, X2)
   take(X1, active(X2)) -> take(X1, X2)
   length(mark(X)) -> length(X)
   length(active(X)) -> length(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(45)
TRUE
