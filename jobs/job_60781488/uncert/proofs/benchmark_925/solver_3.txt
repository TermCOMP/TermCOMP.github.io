YES

Problem 1: 

(VAR vu95NonEmpty L X X1 X2 Y)
(RULES
active(eq(s(X),s(Y))) -> mark(eq(X,Y))
active(eq(num0,num0)) -> mark(ftrue)
active(eq(X,Y)) -> mark(ffalse)
active(inf(X)) -> mark(cons(X,inf(s(X))))
active(length(cons(X,L))) -> mark(s(length(L)))
active(length(nil)) -> mark(num0)
active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
active(take(num0,X)) -> mark(nil)
cons(active(X1),X2) -> cons(X1,X2)
cons(mark(X1),X2) -> cons(X1,X2)
cons(X1,active(X2)) -> cons(X1,X2)
cons(X1,mark(X2)) -> cons(X1,X2)
eq(active(X1),X2) -> eq(X1,X2)
eq(mark(X1),X2) -> eq(X1,X2)
eq(X1,active(X2)) -> eq(X1,X2)
eq(X1,mark(X2)) -> eq(X1,X2)
inf(active(X)) -> inf(X)
inf(mark(X)) -> inf(X)
length(active(X)) -> length(X)
length(mark(X)) -> length(X)
mark(cons(X1,X2)) -> active(cons(X1,X2))
mark(eq(X1,X2)) -> active(eq(X1,X2))
mark(inf(X)) -> active(inf(mark(X)))
mark(length(X)) -> active(length(mark(X)))
mark(s(X)) -> active(s(X))
mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
mark(num0) -> active(num0)
mark(ffalse) -> active(ffalse)
mark(nil) -> active(nil)
mark(ftrue) -> active(ftrue)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
take(active(X1),X2) -> take(X1,X2)
take(mark(X1),X2) -> take(X1,X2)
take(X1,active(X2)) -> take(X1,X2)
take(X1,mark(X2)) -> take(X1,X2)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> EQ(X,Y)
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(eq(num0,num0)) -> MARK(ftrue)
 ACTIVE(eq(X,Y)) -> MARK(ffalse)
 ACTIVE(inf(X)) -> CONS(X,inf(s(X)))
 ACTIVE(inf(X)) -> INF(s(X))
 ACTIVE(inf(X)) -> MARK(cons(X,inf(s(X))))
 ACTIVE(inf(X)) -> S(X)
 ACTIVE(length(cons(X,L))) -> LENGTH(L)
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(length(cons(X,L))) -> S(length(L))
 ACTIVE(length(nil)) -> MARK(num0)
 ACTIVE(take(s(X),cons(Y,L))) -> CONS(Y,take(X,L))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 ACTIVE(take(s(X),cons(Y,L))) -> TAKE(X,L)
 ACTIVE(take(num0,X)) -> MARK(nil)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 EQ(active(X1),X2) -> EQ(X1,X2)
 EQ(mark(X1),X2) -> EQ(X1,X2)
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
 INF(active(X)) -> INF(X)
 INF(mark(X)) -> INF(X)
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> INF(mark(X))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> LENGTH(mark(X))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(take(X1,X2)) -> TAKE(mark(X1),mark(X2))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> EQ(X,Y)
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(eq(num0,num0)) -> MARK(ftrue)
 ACTIVE(eq(X,Y)) -> MARK(ffalse)
 ACTIVE(inf(X)) -> CONS(X,inf(s(X)))
 ACTIVE(inf(X)) -> INF(s(X))
 ACTIVE(inf(X)) -> MARK(cons(X,inf(s(X))))
 ACTIVE(inf(X)) -> S(X)
 ACTIVE(length(cons(X,L))) -> LENGTH(L)
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(length(cons(X,L))) -> S(length(L))
 ACTIVE(length(nil)) -> MARK(num0)
 ACTIVE(take(s(X),cons(Y,L))) -> CONS(Y,take(X,L))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 ACTIVE(take(s(X),cons(Y,L))) -> TAKE(X,L)
 ACTIVE(take(num0,X)) -> MARK(nil)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 EQ(active(X1),X2) -> EQ(X1,X2)
 EQ(mark(X1),X2) -> EQ(X1,X2)
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
 INF(active(X)) -> INF(X)
 INF(mark(X)) -> INF(X)
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> INF(mark(X))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> LENGTH(mark(X))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(take(X1,X2)) -> TAKE(mark(X1),mark(X2))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->->Cycle:
->->-> Pairs:
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->->Cycle:
->->-> Pairs:
 INF(active(X)) -> INF(X)
 INF(mark(X)) -> INF(X)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->->Cycle:
->->-> Pairs:
 EQ(active(X1),X2) -> EQ(X1,X2)
 EQ(mark(X1),X2) -> EQ(X1,X2)
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->->Cycle:
->->-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(inf(X)) -> MARK(cons(X,inf(s(X))))
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)


The problem is decomposed in 7 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(TAKE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.1: 

Subterm Processor:
-> Pairs:
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(TAKE) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(S) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 LENGTH(active(X)) -> LENGTH(X)
 LENGTH(mark(X)) -> LENGTH(X)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(LENGTH) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 INF(active(X)) -> INF(X)
 INF(mark(X)) -> INF(X)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(INF) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 EQ(active(X1),X2) -> EQ(X1,X2)
 EQ(mark(X1),X2) -> EQ(X1,X2)
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(EQ) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.5: 

Subterm Processor:
-> Pairs:
 EQ(X1,active(X2)) -> EQ(X1,X2)
 EQ(X1,mark(X2)) -> EQ(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(EQ) = 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(CONS) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.6: 

Subterm Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(CONS) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(inf(X)) -> MARK(cons(X,inf(s(X))))
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 1
[cons](X1,X2) = 0
[eq](X1,X2) = 0
[inf](X) = 2.X + 2
[length](X) = 2.X + 2
[mark](X) = 2.X + 1
[s](X) = 1
[take](X1,X2) = X1 + X2 + 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 1
[ftrue] = 0
[ACTIVE](X) = X + 2
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(length(cons(X,L))) -> MARK(s(length(L)))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 1
[cons](X1,X2) = 1
[eq](X1,X2) = 0
[inf](X) = 2.X + 2
[length](X) = X + 2
[mark](X) = 2.X + 1
[s](X) = 0
[take](X1,X2) = X1 + X2 + 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 2
[ftrue] = 0
[ACTIVE](X) = X + 2
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 ACTIVE(take(s(X),cons(Y,L))) -> MARK(cons(Y,take(X,L)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 2
[cons](X1,X2) = X1 + 2
[eq](X1,X2) = 2
[inf](X) = 2.X + 2
[length](X) = 2.X + 2
[mark](X) = 2.X
[s](X) = 2
[take](X1,X2) = X1 + 2.X2 + 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X + 2
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2.X
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(cons(X1,X2)) -> ACTIVE(cons(X1,X2))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 1
[eq](X1,X2) = 2
[inf](X) = 2
[length](X) = 2
[mark](X) = 2
[s](X) = 2
[take](X1,X2) = 2
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 1
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> ACTIVE(inf(mark(X)))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X + 2
[cons](X1,X2) = 1
[eq](X1,X2) = 2
[inf](X) = 1
[length](X) = 2
[mark](X) = 2.X + 2
[s](X) = 2
[take](X1,X2) = 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(inf(X)) -> MARK(X)
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 2
[cons](X1,X2) = 2
[eq](X1,X2) = 2
[inf](X) = 2.X + 2
[length](X) = X + 2
[mark](X) = 2.X
[s](X) = 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X + 2
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2.X
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(length(X)) -> ACTIVE(length(mark(X)))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X + 2
[cons](X1,X2) = 1
[eq](X1,X2) = 1
[inf](X) = 2
[length](X) = 0
[mark](X) = 2.X + 2
[s](X) = 0
[take](X1,X2) = 1
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 1
[ftrue] = 0
[ACTIVE](X) = X + 1
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(length(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 2
[cons](X1,X2) = X1 + 2
[eq](X1,X2) = 2
[inf](X) = 2.X + 2
[length](X) = 2.X + 2
[mark](X) = 2.X
[s](X) = 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X + 2
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2.X
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(s(X)) -> ACTIVE(s(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2
[cons](X1,X2) = 2
[eq](X1,X2) = 2
[inf](X) = 0
[length](X) = 0
[mark](X) = 2
[s](X) = 0
[take](X1,X2) = 2
[num0] = 1
[fSNonEmpty] = 0
[ffalse] = 1
[nil] = 1
[ftrue] = 1
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2
[cons](X1,X2) = 2
[eq](X1,X2) = 2
[inf](X) = 2
[length](X) = 0
[mark](X) = 2
[s](X) = 2
[take](X1,X2) = 1
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 2
[nil] = 2
[ftrue] = 2
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(eq(s(X),s(Y))) -> MARK(eq(X,Y))
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
-> Usable rules:
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 0
[eq](X1,X2) = 2.X2 + 1
[inf](X) = 0
[length](X) = 0
[mark](X) = X
[s](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[ACTIVE](X) = 2.X + 1
[CONS](X1,X2) = 0
[EQ](X1,X2) = 0
[INF](X) = 0
[LENGTH](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0
[TAKE](X1,X2) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 MARK(eq(X1,X2)) -> ACTIVE(eq(X1,X2))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
->->-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)

Problem 1.7: 

Subterm Processor:
-> Pairs:
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Projection:
 pi(MARK) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(eq(s(X),s(Y))) -> mark(eq(X,Y))
 active(eq(num0,num0)) -> mark(ftrue)
 active(eq(X,Y)) -> mark(ffalse)
 active(inf(X)) -> mark(cons(X,inf(s(X))))
 active(length(cons(X,L))) -> mark(s(length(L)))
 active(length(nil)) -> mark(num0)
 active(take(s(X),cons(Y,L))) -> mark(cons(Y,take(X,L)))
 active(take(num0,X)) -> mark(nil)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 eq(active(X1),X2) -> eq(X1,X2)
 eq(mark(X1),X2) -> eq(X1,X2)
 eq(X1,active(X2)) -> eq(X1,X2)
 eq(X1,mark(X2)) -> eq(X1,X2)
 inf(active(X)) -> inf(X)
 inf(mark(X)) -> inf(X)
 length(active(X)) -> length(X)
 length(mark(X)) -> length(X)
 mark(cons(X1,X2)) -> active(cons(X1,X2))
 mark(eq(X1,X2)) -> active(eq(X1,X2))
 mark(inf(X)) -> active(inf(mark(X)))
 mark(length(X)) -> active(length(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(ffalse) -> active(ffalse)
 mark(nil) -> active(nil)
 mark(ftrue) -> active(ftrue)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
