NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/akchI.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 19 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) TransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) TransformationProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) NonTerminationLoopProof [COMPLETE, 0 ms]
        (26) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PRIMES -> SIEVE(from(s(s(0))))
   PRIMES -> FROM(s(s(0)))
   FROM(X) -> FROM(s(X))
   FILTER(s(s(X)), cons(Y, Z)) -> IF(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(s(s(X)), Z)
   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(X, sieve(Y))
   FILTER(s(s(X)), cons(Y, Z)) -> SIEVE(Y)
   SIEVE(cons(X, Y)) -> FILTER(X, sieve(Y))
   SIEVE(cons(X, Y)) -> SIEVE(Y)

The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(X, sieve(Y))
   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(s(s(X)), Z)
   FILTER(s(s(X)), cons(Y, Z)) -> SIEVE(Y)
   SIEVE(cons(X, Y)) -> FILTER(X, sieve(Y))
   SIEVE(cons(X, Y)) -> SIEVE(Y)

The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(X, sieve(Y))
   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(s(s(X)), Z)
   FILTER(s(s(X)), cons(Y, Z)) -> SIEVE(Y)
   SIEVE(cons(X, Y)) -> FILTER(X, sieve(Y))
   SIEVE(cons(X, Y)) -> SIEVE(Y)

The TRS R consists of the following rules:

   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(X, sieve(Y))
   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(s(s(X)), Z)
   FILTER(s(s(X)), cons(Y, Z)) -> SIEVE(Y)
   SIEVE(cons(X, Y)) -> FILTER(X, sieve(Y))
   SIEVE(cons(X, Y)) -> SIEVE(Y)

The TRS R consists of the following rules:

   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))

The set Q consists of the following terms:

   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(X, sieve(Y))
   FILTER(s(s(X)), cons(Y, Z)) -> FILTER(s(s(X)), Z)
   FILTER(s(s(X)), cons(Y, Z)) -> SIEVE(Y)
   SIEVE(cons(X, Y)) -> FILTER(X, sieve(Y))
   SIEVE(cons(X, Y)) -> SIEVE(Y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( FILTER_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( sieve_1(x_1) ) = x_1
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( filter_2(x_1, x_2) ) = max{0, -2}
POL( s_1(x_1) ) = x_1 + 1
POL( if_3(x_1, ..., x_3) ) = max{0, -2}
POL( divides_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( SIEVE_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))

The set Q consists of the following terms:

   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

R is empty.
The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(X) -> FROM(s(X))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FROM(X) -> FROM(s(X)) we obtained the following new rules [LPAR04]:

   (FROM(s(z0)) -> FROM(s(s(z0))),FROM(s(z0)) -> FROM(s(s(z0))))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(s(z0)) -> FROM(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FROM(s(z0)) -> FROM(s(s(z0))) we obtained the following new rules [LPAR04]:

   (FROM(s(s(z0))) -> FROM(s(s(s(z0)))),FROM(s(s(z0))) -> FROM(s(s(s(z0)))))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROM(s(s(z0))) -> FROM(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FROM(s(s(z0))) evaluates to  t =FROM(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FROM(s(s(z0))) to FROM(s(s(s(z0)))).




----------------------------------------

(26)
NO
