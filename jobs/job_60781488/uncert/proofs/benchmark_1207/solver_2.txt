NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/JMCn5.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 37 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 4 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) MRRProof [EQUIVALENT, 0 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QDP
        (14) MRRProof [EQUIVALENT, 20 ms]
        (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 14 ms]
        (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 8 ms]
        (19) QDP
        (20) DependencyGraphProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPOrderProof [EQUIVALENT, 7 ms]
        (23) QDP
        (24) TransformationProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) DependencyGraphProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) TransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) TransformationProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) DependencyGraphProof [EQUIVALENT, 0 ms]
        (35) AND
            (36) QDP
                (37) MRRProof [EQUIVALENT, 5 ms]
                (38) QDP
                (39) MRRProof [EQUIVALENT, 6 ms]
                (40) QDP
                (41) MRRProof [EQUIVALENT, 7 ms]
                (42) QDP
                (43) QDPOrderProof [EQUIVALENT, 10 ms]
                (44) QDP
                (45) QDPOrderProof [EQUIVALENT, 29 ms]
                (46) QDP
                (47) QDPOrderProof [EQUIVALENT, 29 ms]
                (48) QDP
                (49) QDPOrderProof [EQUIVALENT, 19 ms]
                (50) QDP
                (51) QDPOrderProof [EQUIVALENT, 7 ms]
                (52) QDP
                (53) NonTerminationLoopProof [COMPLETE, 408 ms]
                (54) NO
            (55) QDP
                (56) MRRProof [EQUIVALENT, 5 ms]
                (57) QDP
                (58) MRRProof [EQUIVALENT, 6 ms]
                (59) QDP
                (60) MRRProof [EQUIVALENT, 7 ms]
                (61) QDP
                (62) QDPOrderProof [EQUIVALENT, 41 ms]
                (63) QDP
                (64) QDPOrderProof [EQUIVALENT, 8 ms]
                (65) QDP
                (66) QDPOrderProof [EQUIVALENT, 29 ms]
                (67) QDP
                (68) QDPOrderProof [EQUIVALENT, 38 ms]
                (69) QDP
    (70) QDP
        (71) QDPOrderProof [EQUIVALENT, 15 ms]
        (72) QDP
        (73) DependencyGraphProof [EQUIVALENT, 0 ms]
        (74) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> isNatList(activate(V1))
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(V) -> isNatList(activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(nil) -> 0
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1, x_2)) = x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(isNat(x_1)) = 2*x_1
   POL(isNatIList(x_1)) = 1 + 2*x_1
   POL(isNatList(x_1)) = 2*x_1
   POL(length(x_1)) = 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = x_1 + 2*x_2
   POL(n__isNat(x_1)) = 2*x_1
   POL(n__isNatIList(x_1)) = 1 + 2*x_1
   POL(n__isNatList(x_1)) = 2*x_1
   POL(n__length(x_1)) = 2*x_1
   POL(n__nil) = 1
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNatIList(V) -> isNatList(activate(V))
   isNatIList(n__zeros) -> tt
   isNatList(n__nil) -> tt
   length(nil) -> 0




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> isNatList(activate(V1))
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U11(x_1, x_2)) = 1 + x_1 + x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 1 + x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNat(n__length(V1)) -> isNatList(activate(V1))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ZEROS -> CONS(0, n__zeros)
   ZEROS -> 0^1
   U11^1(tt, L) -> S(length(activate(L)))
   U11^1(tt, L) -> LENGTH(activate(L))
   U11^1(tt, L) -> ACTIVATE(L)
   AND(tt, X) -> ACTIVATE(X)
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   ISNATILIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   LENGTH(cons(N, L)) -> U11^1(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   LENGTH(cons(N, L)) -> AND(isNatList(activate(L)), n__isNat(N))
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ACTIVATE(n__zeros) -> ZEROS
   ACTIVATE(n__0) -> 0^1
   ACTIVATE(n__length(X)) -> LENGTH(X)
   ACTIVATE(n__s(X)) -> S(X)
   ACTIVATE(n__cons(X1, X2)) -> CONS(X1, X2)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ACTIVATE(n__nil) -> NIL
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ACTIVATE(n__isNat(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 8 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__length(X)) -> LENGTH(X)
   LENGTH(cons(N, L)) -> U11^1(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   U11^1(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> AND(isNatList(activate(L)), n__isNat(N))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   ISNATILIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ACTIVATE(n__isNat(X)) -> ISNAT(X)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   U11^1(tt, L) -> ACTIVATE(L)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ACTIVATE(n__length(X)) -> LENGTH(X)
   LENGTH(cons(N, L)) -> AND(isNatList(activate(L)), n__isNat(N))
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   U11^1(tt, L) -> ACTIVATE(L)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = 1 + x_1
   POL(AND(x_1, x_2)) = 1 + x_1 + x_2
   POL(ISNAT(x_1)) = 1 + x_1
   POL(ISNATILIST(x_1)) = 1 + x_1
   POL(ISNATLIST(x_1)) = 1 + x_1
   POL(LENGTH(x_1)) = 2 + 2*x_1
   POL(U11(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(U11^1(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2 + 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 2 + 2*x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> U11^1(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   U11^1(tt, L) -> LENGTH(activate(L))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   ISNATILIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ACTIVATE(n__isNat(X)) -> ISNAT(X)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ACTIVATE(n__isNat(X)) -> ISNAT(X)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATILIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(AND(x_1, x_2)) = 2*x_1 + x_2
   POL(ISNAT(x_1)) = x_1
   POL(ISNATILIST(x_1)) = 1 + 2*x_1
   POL(ISNATLIST(x_1)) = x_1
   POL(U11(x_1, x_2)) = x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 1 + 2*x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = 1 + 2*x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 2*x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ACTIVATE(n__isNat(X)) -> ISNAT(X)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__isNat(X)) -> ISNAT(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = 2x_2 + 2
POL( ISNAT_1(x_1) ) = 2x_1 + 2
POL( n__isNatIList_1(x_1) ) = max{0, -2}
POL( n__isNatList_1(x_1) ) = 2x_1
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 0
POL( length_1(x_1) ) = max{0, -2}
POL( n__s_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = 2x_1
POL( n__cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( isNatIList_1(x_1) ) = 0
POL( and_2(x_1, x_2) ) = 2x_2
POL( isNat_1(x_1) ) = 2x_1 + 1
POL( tt ) = 0
POL( isNatList_1(x_1) ) = 2x_1
POL( n__nil ) = 2
POL( nil ) = 2
POL( n__isNat_1(x_1) ) = 2x_1 + 1
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ACTIVATE_1(x_1) ) = x_1 + 2
POL( ISNATILIST_1(x_1) ) = 2
POL( ISNATLIST_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatList(X) -> n__isNatList(X)
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = 2x_2 + 2
POL( ISNAT_1(x_1) ) = 2x_1
POL( n__isNatIList_1(x_1) ) = 0
POL( n__isNatList_1(x_1) ) = 2x_1
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2x_1
POL( length_1(x_1) ) = 2x_1
POL( n__s_1(x_1) ) = x_1 + 1
POL( s_1(x_1) ) = x_1 + 1
POL( n__cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( isNatIList_1(x_1) ) = 0
POL( and_2(x_1, x_2) ) = max{0, x_1 + x_2 - 1}
POL( isNat_1(x_1) ) = 1
POL( tt ) = 1
POL( isNatList_1(x_1) ) = 2x_1
POL( n__nil ) = 2
POL( nil ) = 2
POL( n__isNat_1(x_1) ) = 1
POL( U11_2(x_1, x_2) ) = x_1 + 2x_2
POL( ACTIVATE_1(x_1) ) = 2x_1 + 2
POL( ISNATILIST_1(x_1) ) = 2
POL( ISNATLIST_1(x_1) ) = 2x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatList(X) -> n__isNatList(X)
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = 2x_2
POL( n__isNatIList_1(x_1) ) = max{0, -2}
POL( n__isNatList_1(x_1) ) = x_1
POL( activate_1(x_1) ) = 2x_1 + 2
POL( n__zeros ) = 0
POL( zeros ) = 2
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2
POL( length_1(x_1) ) = 2
POL( n__s_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( cons_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( isNatIList_1(x_1) ) = 2
POL( and_2(x_1, x_2) ) = 2x_2 + 2
POL( isNat_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( isNatList_1(x_1) ) = 2x_1 + 2
POL( n__nil ) = 1
POL( nil ) = 2
POL( n__isNat_1(x_1) ) = 0
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ISNATILIST_1(x_1) ) = 0
POL( ACTIVATE_1(x_1) ) = 2x_1
POL( ISNATLIST_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatList(X) -> n__isNatList(X)
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatIList(activate(V2))) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, y1)) -> AND(n__isNat(activate(y0)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(y0, y1)) -> AND(n__isNat(activate(y0)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1))),ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1))))
   (ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1))),ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1))))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATILIST(n__cons(y0, y1)) -> AND(n__isNat(activate(y0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(V1, V2)) -> AND(isNat(activate(V1)), n__isNatList(activate(V2))) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, y1)) -> AND(n__isNat(activate(y0)), n__isNatList(activate(y1))),ISNATLIST(n__cons(y0, y1)) -> AND(n__isNat(activate(y0)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1))),ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1))))
   (ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1))),ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1))))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))
   ISNATLIST(n__cons(y0, y1)) -> AND(n__isNat(activate(y0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   AND(tt, X) -> ACTIVATE(X)
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule AND(tt, X) -> ACTIVATE(X) we obtained the following new rules [LPAR04]:

   (AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3)),AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3)))
   (AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3)),AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3)))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))
   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(35)
Complex Obligation (AND)

----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATLIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatList(activate(y1)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(AND(x_1, x_2)) = 2*x_1 + x_2
   POL(ISNATLIST(x_1)) = 2*x_1
   POL(U11(x_1, x_2)) = x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 1 + 2*x_1
   POL(isNatList(x_1)) = 2*x_1
   POL(length(x_1)) = 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = 1 + 2*x_1
   POL(n__isNatList(x_1)) = 2*x_1
   POL(n__length(x_1)) = 2*x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATLIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatList(activate(y1)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = 2*x_1
   POL(AND(x_1, x_2)) = x_1 + 2*x_2
   POL(ISNATLIST(x_1)) = 2*x_1
   POL(U11(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 2*x_1
   POL(n__nil) = 1
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATLIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatList(activate(y1)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(AND(x_1, x_2)) = x_1 + 2*x_2
   POL(ISNATLIST(x_1)) = x_1
   POL(U11(x_1, x_2)) = 1 + x_1 + x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2*x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = 2*x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 1 + x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = 2x_2
POL( n__isNatList_1(x_1) ) = x_1
POL( zeros ) = 1
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( 0 ) = 0
POL( n__zeros ) = 0
POL( isNat_1(x_1) ) = max{0, -2}
POL( n__0 ) = 0
POL( tt ) = 0
POL( n__s_1(x_1) ) = 0
POL( activate_1(x_1) ) = x_1 + 1
POL( n__isNat_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 0
POL( length_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( n__isNatIList_1(x_1) ) = max{0, 2x_1 - 1}
POL( isNatIList_1(x_1) ) = 2x_1
POL( and_2(x_1, x_2) ) = x_2 + 1
POL( isNatList_1(x_1) ) = x_1 + 1
POL( n__nil ) = 1
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ISNATLIST_1(x_1) ) = 2x_1
POL( ACTIVATE_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   nil -> n__nil


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, x_1 + 2x_2 - 2}
POL( n__isNatList_1(x_1) ) = x_1
POL( zeros ) = 0
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( 0 ) = 0
POL( n__zeros ) = 0
POL( isNat_1(x_1) ) = x_1 + 2
POL( n__0 ) = 0
POL( tt ) = 2
POL( n__s_1(x_1) ) = 2x_1
POL( activate_1(x_1) ) = 2x_1
POL( n__isNat_1(x_1) ) = x_1 + 1
POL( n__length_1(x_1) ) = 0
POL( length_1(x_1) ) = 0
POL( s_1(x_1) ) = 2x_1
POL( n__cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( n__isNatIList_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 0
POL( and_2(x_1, x_2) ) = 2x_2
POL( isNatList_1(x_1) ) = 2x_1
POL( n__nil ) = 1
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ISNATLIST_1(x_1) ) = 2x_1
POL( ACTIVATE_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   s(X) -> n__s(X)
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = x_2
POL( n__isNatList_1(x_1) ) = 2x_1
POL( zeros ) = 2
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( 0 ) = 0
POL( n__zeros ) = 0
POL( isNat_1(x_1) ) = 2
POL( n__0 ) = 0
POL( tt ) = 2
POL( n__s_1(x_1) ) = 1
POL( activate_1(x_1) ) = x_1 + 2
POL( n__isNat_1(x_1) ) = 0
POL( n__length_1(x_1) ) = x_1 + 2
POL( length_1(x_1) ) = x_1 + 2
POL( s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( n__isNatIList_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( and_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 2}
POL( isNatList_1(x_1) ) = 2x_1 + 2
POL( n__nil ) = 2
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = x_2 + 2
POL( ISNATLIST_1(x_1) ) = 2x_1
POL( ACTIVATE_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   s(X) -> n__s(X)
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( n__isNatList_1(x_1) ) = x_1 + 1
POL( zeros ) = 1
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( 0 ) = 0
POL( n__zeros ) = 0
POL( isNat_1(x_1) ) = max{0, -2}
POL( n__0 ) = 0
POL( tt ) = 0
POL( n__s_1(x_1) ) = 0
POL( activate_1(x_1) ) = x_1 + 1
POL( n__isNat_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 0
POL( length_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( n__isNatIList_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 1
POL( and_2(x_1, x_2) ) = x_2 + 1
POL( isNatList_1(x_1) ) = x_1 + 2
POL( n__nil ) = 1
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ISNATLIST_1(x_1) ) = 2x_1
POL( ACTIVATE_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( n__isNatList_1(x_1) ) = x_1 + 2
POL( zeros ) = 1
POL( cons_2(x_1, x_2) ) = x_1 + x_2
POL( 0 ) = 0
POL( n__zeros ) = 1
POL( isNat_1(x_1) ) = max{0, -2}
POL( n__0 ) = 0
POL( tt ) = 0
POL( n__s_1(x_1) ) = 0
POL( activate_1(x_1) ) = x_1
POL( n__isNat_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 0
POL( length_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2
POL( n__isNatIList_1(x_1) ) = 0
POL( isNatIList_1(x_1) ) = 0
POL( and_2(x_1, x_2) ) = x_1 + x_2
POL( isNatList_1(x_1) ) = x_1 + 2
POL( n__nil ) = 2
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ISNATLIST_1(x_1) ) = x_1
POL( ACTIVATE_1(x_1) ) = max{0, x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatList(X) -> n__isNatList(X)
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))
   ACTIVATE(n__isNatList(X)) -> ISNATLIST(X)
   ISNATLIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatList(activate(y1)))
   ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = ACTIVATE(n__isNatList(activate(n__zeros))) evaluates to  t =ACTIVATE(n__isNatList(activate(n__zeros)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

ACTIVATE(n__isNatList(activate(n__zeros))) -> ACTIVATE(n__isNatList(zeros))
with rule activate(n__zeros) -> zeros at position [0,0] and matcher [ ]

ACTIVATE(n__isNatList(zeros)) -> ACTIVATE(n__isNatList(cons(0, n__zeros)))
with rule zeros -> cons(0, n__zeros) at position [0,0] and matcher [ ]

ACTIVATE(n__isNatList(cons(0, n__zeros))) -> ACTIVATE(n__isNatList(cons(n__0, n__zeros)))
with rule 0 -> n__0 at position [0,0,0] and matcher [ ]

ACTIVATE(n__isNatList(cons(n__0, n__zeros))) -> ACTIVATE(n__isNatList(n__cons(n__0, n__zeros)))
with rule cons(X1, X2) -> n__cons(X1, X2) at position [0,0] and matcher [X1 / n__0, X2 / n__zeros]

ACTIVATE(n__isNatList(n__cons(n__0, n__zeros))) -> ISNATLIST(n__cons(n__0, n__zeros))
with rule ACTIVATE(n__isNatList(X)) -> ISNATLIST(X) at position [] and matcher [X / n__cons(n__0, n__zeros)]

ISNATLIST(n__cons(n__0, n__zeros)) -> AND(isNat(n__0), n__isNatList(activate(n__zeros)))
with rule ISNATLIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatList(activate(y1))) at position [] and matcher [x0 / n__0, y1 / n__zeros]

AND(isNat(n__0), n__isNatList(activate(n__zeros))) -> AND(tt, n__isNatList(activate(n__zeros)))
with rule isNat(n__0) -> tt at position [0] and matcher [ ]

AND(tt, n__isNatList(activate(n__zeros))) -> ACTIVATE(n__isNatList(activate(n__zeros)))
with rule AND(tt, n__isNatList(y_3)) -> ACTIVATE(n__isNatList(y_3))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(54)
NO

----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATILIST(n__cons(n__nil, y1)) -> AND(isNat(nil), n__isNatIList(activate(y1)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(AND(x_1, x_2)) = 2*x_1 + x_2
   POL(ISNATILIST(x_1)) = 2*x_1
   POL(U11(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2*x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = 2*x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 2*x_1
   POL(n__nil) = 2
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATILIST(n__cons(n__length(x0), y1)) -> AND(isNat(length(x0)), n__isNatIList(activate(y1)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(AND(x_1, x_2)) = x_1 + 2*x_2
   POL(ISNATILIST(x_1)) = x_1
   POL(U11(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = x_1
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = 1 + 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = x_1
   POL(n__isNatList(x_1)) = x_1
   POL(n__length(x_1)) = 1 + 2*x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   ISNATILIST(n__cons(n__isNatIList(x0), y1)) -> AND(isNat(isNatIList(x0)), n__isNatIList(activate(y1)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(AND(x_1, x_2)) = x_1 + x_2
   POL(ISNATILIST(x_1)) = 2 + 2*x_1
   POL(U11(x_1, x_2)) = x_1 + 2*x_2
   POL(activate(x_1)) = x_1
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2 + 2*x_1
   POL(isNatList(x_1)) = 2*x_1
   POL(length(x_1)) = 2*x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(n__isNat(x_1)) = x_1
   POL(n__isNatIList(x_1)) = 2 + 2*x_1
   POL(n__isNatList(x_1)) = 2*x_1
   POL(n__length(x_1)) = 2*x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(62) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(n__s(x0), y1)) -> AND(isNat(s(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNat(x0), y1)) -> AND(isNat(isNat(x0)), n__isNatIList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( n__isNatIList_1(x_1) ) = x_1 + 1
POL( zeros ) = 0
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( 0 ) = 0
POL( n__zeros ) = 0
POL( isNat_1(x_1) ) = 2x_1 + 2
POL( n__0 ) = 0
POL( tt ) = 2
POL( n__s_1(x_1) ) = x_1 + 2
POL( activate_1(x_1) ) = x_1
POL( n__isNat_1(x_1) ) = 2x_1 + 2
POL( n__length_1(x_1) ) = 2x_1
POL( length_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1 + 2
POL( n__cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( isNatIList_1(x_1) ) = x_1 + 1
POL( and_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( n__isNatList_1(x_1) ) = x_1
POL( isNatList_1(x_1) ) = x_1
POL( n__nil ) = 2
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( ACTIVATE_1(x_1) ) = max{0, 2x_1 - 2}
POL( ISNATILIST_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   nil -> n__nil


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(n__isNatList(x0), y1)) -> AND(isNat(isNatList(x0)), n__isNatIList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( n__isNatIList_1(x_1) ) = 2x_1
POL( zeros ) = 0
POL( cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( 0 ) = 0
POL( n__zeros ) = 0
POL( isNat_1(x_1) ) = 1
POL( n__0 ) = 0
POL( tt ) = 1
POL( n__s_1(x_1) ) = 0
POL( activate_1(x_1) ) = x_1
POL( n__isNat_1(x_1) ) = 1
POL( n__length_1(x_1) ) = 2
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( isNatIList_1(x_1) ) = 2x_1
POL( and_2(x_1, x_2) ) = x_2
POL( n__isNatList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( n__nil ) = 2
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( ACTIVATE_1(x_1) ) = 2x_1
POL( ISNATILIST_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   cons(X1, X2) -> n__cons(X1, X2)
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   nil -> n__nil


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(n__zeros, y1)) -> AND(isNat(zeros), n__isNatIList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( n__isNatIList_1(x_1) ) = x_1
POL( zeros ) = 2
POL( cons_2(x_1, x_2) ) = x_1 + x_2
POL( 0 ) = 0
POL( n__zeros ) = 2
POL( isNat_1(x_1) ) = 1
POL( n__0 ) = 0
POL( tt ) = 1
POL( n__s_1(x_1) ) = 0
POL( activate_1(x_1) ) = x_1
POL( n__isNat_1(x_1) ) = 1
POL( n__length_1(x_1) ) = x_1 + 2
POL( length_1(x_1) ) = x_1 + 2
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2
POL( isNatIList_1(x_1) ) = x_1
POL( and_2(x_1, x_2) ) = max{0, x_1 + x_2 - 1}
POL( n__isNatList_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( n__nil ) = 2
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = 1
POL( ACTIVATE_1(x_1) ) = 2x_1
POL( ISNATILIST_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   0 -> n__0
   cons(X1, X2) -> n__cons(X1, X2)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatList(X) -> n__isNatList(X)
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   nil -> n__nil


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(n__cons(x0, x1), y1)) -> AND(isNat(cons(x0, x1)), n__isNatIList(activate(y1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( AND_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( n__isNatIList_1(x_1) ) = x_1 + 1
POL( 0 ) = 0
POL( n__0 ) = 0
POL( isNat_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( n__s_1(x_1) ) = 0
POL( activate_1(x_1) ) = x_1 + 1
POL( n__isNat_1(x_1) ) = 0
POL( n__zeros ) = 1
POL( zeros ) = 2
POL( n__length_1(x_1) ) = 1
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( cons_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( isNatIList_1(x_1) ) = x_1 + 2
POL( and_2(x_1, x_2) ) = x_2 + 1
POL( n__isNatList_1(x_1) ) = 1
POL( isNatList_1(x_1) ) = 2
POL( n__nil ) = 1
POL( nil ) = 2
POL( U11_2(x_1, x_2) ) = 2
POL( ACTIVATE_1(x_1) ) = max{0, 2x_1 - 2}
POL( ISNATILIST_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0 -> n__0
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   cons(X1, X2) -> n__cons(X1, X2)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatList(X) -> n__isNatList(X)
   isNatIList(X) -> n__isNatIList(X)
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AND(tt, n__isNatIList(y_3)) -> ACTIVATE(n__isNatIList(y_3))
   ACTIVATE(n__isNatIList(X)) -> ISNATILIST(X)
   ISNATILIST(n__cons(n__0, y1)) -> AND(isNat(0), n__isNatIList(activate(y1)))
   ISNATILIST(n__cons(x0, y1)) -> AND(isNat(x0), n__isNatIList(activate(y1)))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> U11^1(and(isNatList(activate(L)), n__isNat(N)), activate(L))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U11^1(tt, L) -> LENGTH(activate(L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( LENGTH_1(x_1) ) = max{0, -2}
POL( U11^1_2(x_1, x_2) ) = max{0, x_1 - 1}
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 0
POL( length_1(x_1) ) = max{0, -2}
POL( n__s_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( n__cons_2(x_1, x_2) ) = 0
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( n__isNatIList_1(x_1) ) = 2
POL( isNatIList_1(x_1) ) = 2
POL( and_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( isNat_1(x_1) ) = 2
POL( tt ) = 2
POL( n__isNatList_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( n__nil ) = 2
POL( nil ) = 2
POL( n__isNat_1(x_1) ) = 2
POL( U11_2(x_1, x_2) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   and(tt, X) -> activate(X)
   activate(n__isNatList(X)) -> isNatList(X)
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   activate(n__nil) -> nil
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X
   isNatList(X) -> n__isNatList(X)
   length(X) -> n__length(X)
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   isNatIList(X) -> n__isNatIList(X)
   isNat(n__0) -> tt
   isNat(X) -> n__isNat(X)
   isNat(n__s(V1)) -> isNat(activate(V1))
   U11(tt, L) -> s(length(activate(L)))
   s(X) -> n__s(X)
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> U11^1(and(isNatList(activate(L)), n__isNat(N)), activate(L))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U11(tt, L) -> s(length(activate(L)))
   and(tt, X) -> activate(X)
   isNat(n__0) -> tt
   isNat(n__s(V1)) -> isNat(activate(V1))
   isNatIList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatIList(activate(V2)))
   isNatList(n__cons(V1, V2)) -> and(isNat(activate(V1)), n__isNatList(activate(V2)))
   length(cons(N, L)) -> U11(and(isNatList(activate(L)), n__isNat(N)), activate(L))
   zeros -> n__zeros
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(X) -> n__isNatIList(X)
   nil -> n__nil
   isNatList(X) -> n__isNatList(X)
   isNat(X) -> n__isNat(X)
   activate(n__zeros) -> zeros
   activate(n__0) -> 0
   activate(n__length(X)) -> length(X)
   activate(n__s(X)) -> s(X)
   activate(n__cons(X1, X2)) -> cons(X1, X2)
   activate(n__isNatIList(X)) -> isNatIList(X)
   activate(n__nil) -> nil
   activate(n__isNatList(X)) -> isNatList(X)
   activate(n__isNat(X)) -> isNat(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(74)
TRUE
