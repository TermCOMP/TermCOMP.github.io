YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HHHV5.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 6 ms]
        (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) TransformationProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) DependencyGraphProof [EQUIVALENT, 0 ms]
        (23) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)
   TIMES(s(x), y) -> PLUS(y, times(x, y))
   TIMES(s(x), y) -> TIMES(x, y)
   DIV(x, y) -> QUOT(x, y, y)
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(div(x, y), z) -> DIV(x, times(y, z))
   DIV(div(x, y), z) -> TIMES(y, z)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> QUOT(x, y, y)
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(div(x, y), z) -> DIV(x, times(y, z))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DIV(div(x, y), z) -> DIV(x, times(y, z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
DIV(x1, x2)  =  x1

QUOT(x1, x2, x3)  =  x1

s(x1)  =  x1

div(x1, x2)  =  div(x1)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   div_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> QUOT(x, y, y)
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
DIV(x1, x2)  =  x1

QUOT(x1, x2, x3)  =  x1

s(x1)  =  s(x1)


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> QUOT(x, y, y)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DIV(x, y) -> QUOT(x, y, y) we obtained the following new rules [LPAR04]:

   (DIV(y_0, s(y_1)) -> QUOT(y_0, s(y_1), s(y_1)),DIV(y_0, s(y_1)) -> QUOT(y_0, s(y_1), s(y_1)))


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(y_0, s(y_1)) -> QUOT(y_0, s(y_1), s(y_1))

The TRS R consists of the following rules:

   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(0, s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(23)
TRUE
