YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/q4fQM.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) NonInfProof [EQUIVALENT, 16 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   quot(x, s(y)) -> help(x, s(y), 0)
   help(x, s(y), c) -> if(lt(c, x), x, s(y), c)
   if(true, x, s(y), c) -> s(help(x, s(y), plus(c, s(y))))
   if(false, x, s(y), c) -> 0

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   quot(x, s(y)) -> help(x, s(y), 0)
   help(x, s(y), c) -> if(lt(c, x), x, s(y), c)
   if(true, x, s(y), c) -> s(help(x, s(y), plus(c, s(y))))
   if(false, x, s(y), c) -> 0

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)
   PLUS(x, s(y)) -> PLUS(x, y)
   QUOT(x, s(y)) -> HELP(x, s(y), 0)
   HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)
   HELP(x, s(y), c) -> LT(c, x)
   IF(true, x, s(y), c) -> HELP(x, s(y), plus(c, s(y)))
   IF(true, x, s(y), c) -> PLUS(c, s(y))

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   quot(x, s(y)) -> help(x, s(y), 0)
   help(x, s(y), c) -> if(lt(c, x), x, s(y), c)
   if(true, x, s(y), c) -> s(help(x, s(y), plus(c, s(y))))
   if(false, x, s(y), c) -> 0

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   quot(x, s(y)) -> help(x, s(y), 0)
   help(x, s(y), c) -> if(lt(c, x), x, s(y), c)
   if(true, x, s(y), c) -> s(help(x, s(y), plus(c, s(y))))
   if(false, x, s(y), c) -> 0

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(x, s(y)) -> PLUS(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   quot(x, s(y)) -> help(x, s(y), 0)
   help(x, s(y), c) -> if(lt(c, x), x, s(y), c)
   if(true, x, s(y), c) -> s(help(x, s(y), plus(c, s(y))))
   if(false, x, s(y), c) -> 0

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(x), s(y)) -> LT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)
   IF(true, x, s(y), c) -> HELP(x, s(y), plus(c, s(y)))

The TRS R consists of the following rules:

   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))
   quot(x, s(y)) -> help(x, s(y), 0)
   help(x, s(y), c) -> if(lt(c, x), x, s(y), c)
   if(true, x, s(y), c) -> s(help(x, s(y), plus(c, s(y))))
   if(false, x, s(y), c) -> 0

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)
   IF(true, x, s(y), c) -> HELP(x, s(y), plus(c, s(y)))

The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(x, 0) -> x
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))
   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(x0, s(x1))
   help(x0, s(x1), x2)
   if(true, x0, s(x1), x2)
   if(false, x0, s(x1), x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)
   IF(true, x, s(y), c) -> HELP(x, s(y), plus(c, s(y)))

The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(x, 0) -> x
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule IF(true, x, s(y), c) -> HELP(x, s(y), plus(c, s(y))) at position [2] we obtained the following new rules [LPAR04]:

   (IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y))),IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y))))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)
   IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y)))

The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(x, 0) -> x
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c) the following chains were created:
*We consider the chain IF(true, x3, s(x4), x5) -> HELP(x3, s(x4), s(plus(x5, x4))), HELP(x6, s(x7), x8) -> IF(lt(x8, x6), x6, s(x7), x8) which results in the following constraint:

(1)    (HELP(x3, s(x4), s(plus(x5, x4)))=HELP(x6, s(x7), x8)  ==>  HELP(x6, s(x7), x8)_>=_IF(lt(x8, x6), x6, s(x7), x8))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (HELP(x3, s(x4), x8)_>=_IF(lt(x8, x3), x3, s(x4), x8))








For Pair IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y))) the following chains were created:
*We consider the chain HELP(x9, s(x10), x11) -> IF(lt(x11, x9), x9, s(x10), x11), IF(true, x12, s(x13), x14) -> HELP(x12, s(x13), s(plus(x14, x13))) which results in the following constraint:

(1)    (IF(lt(x11, x9), x9, s(x10), x11)=IF(true, x12, s(x13), x14)  ==>  IF(true, x12, s(x13), x14)_>=_HELP(x12, s(x13), s(plus(x14, x13))))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (lt(x11, x9)=true  ==>  IF(true, x9, s(x10), x11)_>=_HELP(x9, s(x10), s(plus(x11, x10))))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on lt(x11, x9)=true which results in the following new constraints:

(3)    (true=true  ==>  IF(true, s(x19), s(x10), 0)_>=_HELP(s(x19), s(x10), s(plus(0, x10))))

(4)    (lt(x21, x20)=true & (\/x22:lt(x21, x20)=true  ==>  IF(true, x20, s(x22), x21)_>=_HELP(x20, s(x22), s(plus(x21, x22))))  ==>  IF(true, s(x20), s(x10), s(x21))_>=_HELP(s(x20), s(x10), s(plus(s(x21), x10))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(true, s(x19), s(x10), 0)_>=_HELP(s(x19), s(x10), s(plus(0, x10))))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x22:lt(x21, x20)=true  ==>  IF(true, x20, s(x22), x21)_>=_HELP(x20, s(x22), s(plus(x21, x22)))) with sigma = [x22 / x10] which results in the following new constraint:

(6)    (IF(true, x20, s(x10), x21)_>=_HELP(x20, s(x10), s(plus(x21, x10)))  ==>  IF(true, s(x20), s(x10), s(x21))_>=_HELP(s(x20), s(x10), s(plus(s(x21), x10))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)

*(HELP(x3, s(x4), x8)_>=_IF(lt(x8, x3), x3, s(x4), x8))




*IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y)))

*(IF(true, s(x19), s(x10), 0)_>=_HELP(s(x19), s(x10), s(plus(0, x10))))


*(IF(true, x20, s(x10), x21)_>=_HELP(x20, s(x10), s(plus(x21, x10)))  ==>  IF(true, s(x20), s(x10), s(x21))_>=_HELP(s(x20), s(x10), s(plus(s(x21), x10))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(HELP(x_1, x_2, x_3)) = -1 + x_1 + x_2 - x_3
   POL(IF(x_1, x_2, x_3, x_4)) = -1 - x_1 + x_2 + x_3 - x_4
   POL(c) = -1
   POL(false) = 0
   POL(lt(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y)))
The following pairs are in P_bound:
   IF(true, x, s(y), c) -> HELP(x, s(y), s(plus(c, y)))
The following rules are usable:
   false -> lt(x, 0)
   true -> lt(0, s(y))
   lt(x, y) -> lt(s(x), s(y))
   s(plus(x, y)) -> plus(x, s(y))
   x -> plus(x, 0)

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(x, s(y), c) -> IF(lt(c, x), x, s(y), c)

The TRS R consists of the following rules:

   plus(x, s(y)) -> s(plus(x, y))
   plus(x, 0) -> x
   lt(x, 0) -> false
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)

The set Q consists of the following terms:

   lt(x0, 0)
   lt(0, s(x0))
   lt(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(31)
TRUE
