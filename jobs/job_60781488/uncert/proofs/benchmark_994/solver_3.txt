YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y Z)
(RULES
active(add(s(X),Y)) -> mark(s(add(X,Y)))
active(add(num0,X)) -> mark(X)
active(from(X)) -> mark(cons(X,from(s(X))))
active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
active(fst(num0,Z)) -> mark(nil)
active(len(cons(X,Z))) -> mark(s(len(Z)))
active(len(nil)) -> mark(num0)
add(active(X1),X2) -> add(X1,X2)
add(mark(X1),X2) -> add(X1,X2)
add(X1,active(X2)) -> add(X1,X2)
add(X1,mark(X2)) -> add(X1,X2)
cons(active(X1),X2) -> cons(X1,X2)
cons(mark(X1),X2) -> cons(X1,X2)
cons(X1,active(X2)) -> cons(X1,X2)
cons(X1,mark(X2)) -> cons(X1,X2)
from(active(X)) -> from(X)
from(mark(X)) -> from(X)
fst(active(X1),X2) -> fst(X1,X2)
fst(mark(X1),X2) -> fst(X1,X2)
fst(X1,active(X2)) -> fst(X1,X2)
fst(X1,mark(X2)) -> fst(X1,X2)
len(active(X)) -> len(X)
len(mark(X)) -> len(X)
mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
mark(from(X)) -> active(from(mark(X)))
mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
mark(len(X)) -> active(len(mark(X)))
mark(s(X)) -> active(s(X))
mark(num0) -> active(num0)
mark(nil) -> active(nil)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> ADD(X,Y)
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(s(X),Y)) -> S(add(X,Y))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(fst(s(X),cons(Y,Z))) -> CONS(Y,fst(X,Z))
 ACTIVE(fst(s(X),cons(Y,Z))) -> FST(X,Z)
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(fst(num0,Z)) -> MARK(nil)
 ACTIVE(len(cons(X,Z))) -> LEN(Z)
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 ACTIVE(len(cons(X,Z))) -> S(len(Z))
 ACTIVE(len(nil)) -> MARK(num0)
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 FST(active(X1),X2) -> FST(X1,X2)
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
 LEN(active(X)) -> LEN(X)
 LEN(mark(X)) -> LEN(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> LEN(mark(X))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> ADD(X,Y)
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(s(X),Y)) -> S(add(X,Y))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(fst(s(X),cons(Y,Z))) -> CONS(Y,fst(X,Z))
 ACTIVE(fst(s(X),cons(Y,Z))) -> FST(X,Z)
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(fst(num0,Z)) -> MARK(nil)
 ACTIVE(len(cons(X,Z))) -> LEN(Z)
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 ACTIVE(len(cons(X,Z))) -> S(len(Z))
 ACTIVE(len(nil)) -> MARK(num0)
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
 FST(active(X1),X2) -> FST(X1,X2)
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
 LEN(active(X)) -> LEN(X)
 LEN(mark(X)) -> LEN(X)
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> LEN(mark(X))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 LEN(active(X)) -> LEN(X)
 LEN(mark(X)) -> LEN(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 FST(active(X1),X2) -> FST(X1,X2)
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)


The problem is decomposed in 7 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(S) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LEN(active(X)) -> LEN(X)
 LEN(mark(X)) -> LEN(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(LEN) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 FST(active(X1),X2) -> FST(X1,X2)
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FST) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.3: 

Subterm Processor:
-> Pairs:
 FST(X1,active(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FST) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FROM(active(X)) -> FROM(X)
 FROM(mark(X)) -> FROM(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(FROM) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(CONS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(CONS) = 2

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 ADD(active(X1),X2) -> ADD(X1,X2)
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(ADD) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.6: 

Subterm Processor:
-> Pairs:
 ADD(X1,active(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(ADD) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> MARK(s(add(X,Y)))
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2
[cons](X1,X2) = X1 + 2
[from](X) = X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X
[mark](X) = X
[s](X) = 2
[num0] = 1
[fSNonEmpty] = 0
[nil] = 1
[ACTIVE](X) = 2.X + 2
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(add(num0,X)) -> MARK(X)
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2
[cons](X1,X2) = X1 + 1
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2
[len](X) = 2.X + 2
[mark](X) = 2.X
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = X + 2
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(from(X)) -> MARK(cons(X,from(s(X))))
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = X1 + 2.X2 + 2
[cons](X1,X2) = X1
[from](X) = 2.X + 2
[fst](X1,X2) = X1 + 2.X2 + 2
[len](X) = X + 2
[mark](X) = 2.X + 1
[s](X) = 0
[num0] = 0
[fSNonEmpty] = 0
[nil] = 0
[ACTIVE](X) = X + 1
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(fst(s(X),cons(Y,Z))) -> MARK(cons(Y,fst(X,Z)))
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X + 2
[add](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X + 2
[mark](X) = 2.X
[s](X) = 2
[num0] = 2
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = X + 2
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[MARK](X) = 2.X + 1
[S](X) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.7: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(len(cons(X,Z))) -> MARK(s(len(Z)))
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2
[cons](X1,X2) = X1 + 1
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X
[mark](X) = 2.X
[s](X) = 0
[num0] = 2
[fSNonEmpty] = 0
[nil] = 2
[ACTIVE](X) = X + 1
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[MARK](X) = 2.X + 2
[S](X) = 0

Problem 1.7: 

SCC Processor:
-> Pairs:
 MARK(add(X1,X2)) -> ACTIVE(add(mark(X1),mark(X2)))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> ACTIVE(from(mark(X)))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> ACTIVE(fst(mark(X1),mark(X2)))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> ACTIVE(len(mark(X)))
 MARK(len(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.7: 

Subterm Processor:
-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(MARK) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 add(active(X1),X2) -> add(X1,X2)
 add(mark(X1),X2) -> add(X1,X2)
 add(X1,active(X2)) -> add(X1,X2)
 add(X1,mark(X2)) -> add(X1,X2)
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 from(active(X)) -> from(X)
 from(mark(X)) -> from(X)
 fst(active(X1),X2) -> fst(X1,X2)
 fst(mark(X1),X2) -> fst(X1,X2)
 fst(X1,active(X2)) -> fst(X1,X2)
 fst(X1,mark(X2)) -> fst(X1,X2)
 len(active(X)) -> len(X)
 len(mark(X)) -> len(X)
 mark(add(X1,X2)) -> active(add(mark(X1),mark(X2)))
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(from(X)) -> active(from(mark(X)))
 mark(fst(X1,X2)) -> active(fst(mark(X1),mark(X2)))
 mark(len(X)) -> active(len(mark(X)))
 mark(s(X)) -> active(s(X))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
