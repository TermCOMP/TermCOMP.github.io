YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qGoqs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) MNOCProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 6 ms]
        (16) QDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) TRUE
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 102 ms]
        (26) QDP
        (27) QDPOrderProof [EQUIVALENT, 18 ms]
        (28) QDP
        (29) DependencyGraphProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) TransformationProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) DependencyGraphProof [EQUIVALENT, 0 ms]
        (34) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(s(x), y) -> PLUS(p(s(x)), y)
   PLUS(s(x), y) -> P(s(x))
   PLUS(x, s(y)) -> PLUS(x, p(s(y)))
   PLUS(x, s(y)) -> P(s(y))
   TIMES(s(x), y) -> PLUS(y, times(x, y))
   TIMES(s(x), y) -> TIMES(x, y)
   DIV(x, y) -> QUOT(x, y, y)
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(div(x, y), z) -> DIV(x, times(zero(y), z))
   DIV(div(x, y), z) -> TIMES(zero(y), z)
   DIV(div(x, y), z) -> ZERO(y)
   EQ(s(x), s(y)) -> EQ(x, y)
   DIVIDES(y, x) -> EQ(x, times(div(x, y), y))
   DIVIDES(y, x) -> TIMES(div(x, y), y)
   DIVIDES(y, x) -> DIV(x, y)
   PRIME(s(s(x))) -> PR(s(s(x)), s(x))
   PR(x, s(s(y))) -> IF(divides(s(s(y)), x), x, s(y))
   PR(x, s(s(y))) -> DIVIDES(s(s(y)), x)
   IF(false, x, y) -> PR(x, y)
   ZERO(s(x)) -> IF(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))
   ZERO(s(x)) -> EQ(x, s(0))
   ZERO(s(x)) -> PLUS(zero(0), 0)
   ZERO(s(x)) -> ZERO(0)
   ZERO(s(x)) -> PLUS(0, zero(0))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 11 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(p(s(x)), y)
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, p(s(y)))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(p(s(x)), y)
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(p(s(x)), y)
   PLUS(s(x), y) -> PLUS(x, y)
   PLUS(x, s(y)) -> PLUS(x, p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   PLUS(s(x), y) -> PLUS(x, y)

Strictly oriented rules of the TRS R:

   p(s(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(PLUS(x_1, x_2)) = x_1 + x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 1 + 2*x_1


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(p(s(x)), y)
   PLUS(x, s(y)) -> PLUS(x, p(s(y)))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(18)
TRUE

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> QUOT(x, y, y)
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(div(x, y), z) -> DIV(x, times(zero(y), z))
   DIV(div(x, y), z) -> ZERO(y)
   ZERO(s(x)) -> IF(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))
   IF(false, x, y) -> PR(x, y)
   PR(x, s(s(y))) -> IF(divides(s(s(y)), x), x, s(y))
   PR(x, s(s(y))) -> DIVIDES(s(s(y)), x)
   DIVIDES(y, x) -> DIV(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   DIV(div(x, y), z) -> DIV(x, times(zero(y), z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( DIV_2(x_1, x_2) ) = x_1
POL( times_2(x_1, x_2) ) = max{0, -2}
POL( IF_3(x_1, ..., x_3) ) = max{0, x_1 + x_2 - 1}
POL( div_2(x_1, x_2) ) = x_1 + 2
POL( zero_1(x_1) ) = 2
POL( divides_2(x_1, x_2) ) = 1
POL( quot_3(x_1, ..., x_3) ) = x_1 + 2
POL( s_1(x_1) ) = x_1
POL( if_3(x_1, ..., x_3) ) = max{0, 2x_1 - 1}
POL( eq_2(x_1, x_2) ) = 1
POL( 0 ) = 0
POL( plus_2(x_1, x_2) ) = x_1
POL( false ) = 1
POL( true ) = 1
POL( pr_2(x_1, x_2) ) = 1
POL( p_1(x_1) ) = max{0, -2}
POL( QUOT_3(x_1, ..., x_3) ) = x_1
POL( ZERO_1(x_1) ) = 2
POL( PR_2(x_1, x_2) ) = x_1
POL( DIVIDES_2(x_1, x_2) ) = x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   plus(x, 0) -> x
   divides(y, x) -> eq(x, times(div(x, y), y))
   if(true, x, y) -> false
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(false, x, y) -> pr(x, y)
   pr(x, s(0)) -> true
   div(0, y) -> 0
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> QUOT(x, y, y)
   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(div(x, y), z) -> ZERO(y)
   ZERO(s(x)) -> IF(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))
   IF(false, x, y) -> PR(x, y)
   PR(x, s(s(y))) -> IF(divides(s(s(y)), x), x, s(y))
   PR(x, s(s(y))) -> DIVIDES(s(s(y)), x)
   DIVIDES(y, x) -> DIV(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y), z) -> QUOT(x, y, z)
   DIV(div(x, y), z) -> ZERO(y)
   ZERO(s(x)) -> IF(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))
   PR(x, s(s(y))) -> IF(divides(s(s(y)), x), x, s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( IF_3(x_1, ..., x_3) ) = 2x_2 + x_3
POL( eq_2(x_1, x_2) ) = 2x_2 + 2
POL( 0 ) = 0
POL( s_1(x_1) ) = 2x_1 + 2
POL( false ) = 0
POL( div_2(x_1, x_2) ) = x_2 + 2
POL( if_3(x_1, ..., x_3) ) = x_3
POL( plus_2(x_1, x_2) ) = x_1 + 2x_2
POL( divides_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( times_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( zero_1(x_1) ) = max{0, 2x_1 - 2}
POL( true ) = 1
POL( pr_2(x_1, x_2) ) = 2x_1 + 1
POL( quot_3(x_1, ..., x_3) ) = x_2 + 2x_3
POL( p_1(x_1) ) = max{0, -2}
POL( DIV_2(x_1, x_2) ) = 2x_1
POL( QUOT_3(x_1, ..., x_3) ) = 2x_1
POL( ZERO_1(x_1) ) = 2x_1
POL( PR_2(x_1, x_2) ) = 2x_1 + x_2
POL( DIVIDES_2(x_1, x_2) ) = x_1 + 2x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   plus(x, 0) -> x
   plus(0, y) -> y


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, y) -> QUOT(x, y, y)
   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   IF(false, x, y) -> PR(x, y)
   PR(x, s(s(y))) -> DIVIDES(s(s(y)), x)
   DIVIDES(y, x) -> DIV(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(x, y) -> QUOT(x, y, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DIV(x, y) -> QUOT(x, y, y) we obtained the following new rules [LPAR04]:

   (DIV(y_0, s(y_1)) -> QUOT(y_0, s(y_1), s(y_1)),DIV(y_0, s(y_1)) -> QUOT(y_0, s(y_1), s(y_1)))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(x, 0, s(z)) -> DIV(x, s(z))
   DIV(y_0, s(y_1)) -> QUOT(y_0, s(y_1), s(y_1))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   plus(x, 0) -> x
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   plus(s(x), y) -> s(plus(p(s(x)), y))
   plus(x, s(y)) -> s(plus(x, p(s(y))))
   times(0, y) -> 0
   times(s(0), y) -> y
   times(s(x), y) -> plus(y, times(x, y))
   div(0, y) -> 0
   div(x, y) -> quot(x, y, y)
   quot(zero(y), s(y), z) -> 0
   quot(s(x), s(y), z) -> quot(x, y, z)
   quot(x, 0, s(z)) -> s(div(x, s(z)))
   div(div(x, y), z) -> div(x, times(zero(y), z))
   eq(0, 0) -> true
   eq(s(x), 0) -> false
   eq(0, s(y)) -> false
   eq(s(x), s(y)) -> eq(x, y)
   divides(y, x) -> eq(x, times(div(x, y), y))
   prime(s(s(x))) -> pr(s(s(x)), s(x))
   pr(x, s(0)) -> true
   pr(x, s(s(y))) -> if(divides(s(s(y)), x), x, s(y))
   if(true, x, y) -> false
   if(false, x, y) -> pr(x, y)
   zero(div(x, x)) -> x
   zero(divides(x, x)) -> x
   zero(times(x, x)) -> x
   zero(quot(x, x, x)) -> x
   zero(s(x)) -> if(eq(x, s(0)), plus(zero(0), 0), s(plus(0, zero(0))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(34)
TRUE
