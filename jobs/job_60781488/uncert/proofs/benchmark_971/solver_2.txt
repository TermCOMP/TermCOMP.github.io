NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/f33vu.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 3 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) MRRProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) NonTerminationLoopProof [COMPLETE, 105 ms]
        (14) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(b, X, c)) -> mark(f(X, c, X))
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, mark(X2), X3))
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(f(b, X, c)) -> MARK(f(X, c, X))
   ACTIVE(f(b, X, c)) -> F(X, c, X)
   ACTIVE(c) -> MARK(b)
   MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, mark(X2), X3))
   MARK(f(X1, X2, X3)) -> F(X1, mark(X2), X3)
   MARK(f(X1, X2, X3)) -> MARK(X2)
   MARK(b) -> ACTIVE(b)
   MARK(c) -> ACTIVE(c)
   F(mark(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, mark(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, mark(X3)) -> F(X1, X2, X3)
   F(active(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, active(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, active(X3)) -> F(X1, X2, X3)

The TRS R consists of the following rules:

   active(f(b, X, c)) -> mark(f(X, c, X))
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, mark(X2), X3))
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2), X3) -> F(X1, X2, X3)
   F(mark(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, X2, mark(X3)) -> F(X1, X2, X3)
   F(active(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, active(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, active(X3)) -> F(X1, X2, X3)

The TRS R consists of the following rules:

   active(f(b, X, c)) -> mark(f(X, c, X))
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, mark(X2), X3))
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2), X3) -> F(X1, X2, X3)
   F(mark(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, X2, mark(X3)) -> F(X1, X2, X3)
   F(active(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, active(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, active(X3)) -> F(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(X1, mark(X2), X3) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*F(mark(X1), X2, X3) -> F(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*F(X1, X2, mark(X3)) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*F(active(X1), X2, X3) -> F(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*F(X1, active(X2), X3) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*F(X1, X2, active(X3)) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, mark(X2), X3))
   ACTIVE(f(b, X, c)) -> MARK(f(X, c, X))
   MARK(f(X1, X2, X3)) -> MARK(X2)

The TRS R consists of the following rules:

   active(f(b, X, c)) -> mark(f(X, c, X))
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, mark(X2), X3))
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(f(X1, X2, X3)) -> MARK(X2)


Used ordering: Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(active(x_1)) = x_1
   POL(b) = 0
   POL(c) = 0
   POL(f(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + x_3
   POL(mark(x_1)) = x_1


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, mark(X2), X3))
   ACTIVE(f(b, X, c)) -> MARK(f(X, c, X))

The TRS R consists of the following rules:

   active(f(b, X, c)) -> mark(f(X, c, X))
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, mark(X2), X3))
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = ACTIVE(f(mark(c), X2', mark(c))) evaluates to  t =ACTIVE(f(X2', mark(c), X2'))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [X2' / mark(c)]

--------------------------------------------------------------------------------
Rewriting sequence

ACTIVE(f(mark(c), mark(c), mark(c))) -> ACTIVE(f(active(c), mark(c), mark(c)))
with rule mark(c) -> active(c) at position [0,0] and matcher [ ]

ACTIVE(f(active(c), mark(c), mark(c))) -> ACTIVE(f(mark(b), mark(c), mark(c)))
with rule active(c) -> mark(b) at position [0,0] and matcher [ ]

ACTIVE(f(mark(b), mark(c), mark(c))) -> ACTIVE(f(mark(b), mark(c), c))
with rule f(X1, X2', mark(X3)) -> f(X1, X2', X3) at position [0] and matcher [X1 / mark(b), X2' / mark(c), X3 / c]

ACTIVE(f(mark(b), mark(c), c)) -> ACTIVE(f(b, mark(c), c))
with rule f(mark(X1), X2, X3) -> f(X1, X2, X3) at position [0] and matcher [X1 / b, X2 / mark(c), X3 / c]

ACTIVE(f(b, mark(c), c)) -> MARK(f(mark(c), c, mark(c)))
with rule ACTIVE(f(b, X, c)) -> MARK(f(X, c, X)) at position [] and matcher [X / mark(c)]

MARK(f(mark(c), c, mark(c))) -> ACTIVE(f(mark(c), mark(c), mark(c)))
with rule MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, mark(X2), X3))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(14)
NO
