NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/97t6V.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) TransformationProof [EQUIVALENT, 0 ms]
(4) QDP
(5) NonTerminationLoopProof [COMPLETE, 0 ms]
(6) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, g(X), Y) -> F(Y, Y, Y)

The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule F(X, g(X), Y) -> F(Y, Y, Y) we obtained the following new rules [LPAR04]:

   (F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1)),F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1)))


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1))

The TRS R consists of the following rules:

   f(X, g(X), Y) -> f(Y, Y, Y)
   g(b) -> c
   b -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(g(b), g(b), g(y_1)) evaluates to  t =F(g(y_1), g(y_1), g(y_1))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [y_1 / b]

--------------------------------------------------------------------------------
Rewriting sequence

F(g(b), g(b), g(b)) -> F(g(b), g(c), g(b))
with rule b -> c at position [1,0] and matcher [ ]

F(g(b), g(c), g(b)) -> F(c, g(c), g(b))
with rule g(b) -> c at position [0] and matcher [ ]

F(c, g(c), g(b)) -> F(g(b), g(b), g(b))
with rule F(x0, g(x0), g(y_1)) -> F(g(y_1), g(y_1), g(y_1))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(6)
NO
