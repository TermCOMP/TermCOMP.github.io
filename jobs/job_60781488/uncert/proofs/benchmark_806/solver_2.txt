YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SBbYL.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 7 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(cons(0, x), y) -> sum(x, y)
   sum(nil, y) -> y
   weight(cons(n, cons(m, x))) -> weight(sum(cons(n, cons(m, x)), cons(0, x)))
   weight(cons(n, nil)) -> n

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(cons(0, x), y) -> sum(x, y)
   sum(nil, y) -> y
   weight(cons(n, cons(m, x))) -> weight(sum(cons(n, cons(m, x)), cons(0, x)))
   weight(cons(n, nil)) -> n

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(s(n), x), cons(m, y)) -> SUM(cons(n, x), cons(s(m), y))
   SUM(cons(0, x), y) -> SUM(x, y)
   WEIGHT(cons(n, cons(m, x))) -> WEIGHT(sum(cons(n, cons(m, x)), cons(0, x)))
   WEIGHT(cons(n, cons(m, x))) -> SUM(cons(n, cons(m, x)), cons(0, x))

The TRS R consists of the following rules:

   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(cons(0, x), y) -> sum(x, y)
   sum(nil, y) -> y
   weight(cons(n, cons(m, x))) -> weight(sum(cons(n, cons(m, x)), cons(0, x)))
   weight(cons(n, nil)) -> n

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(0, x), y) -> SUM(x, y)
   SUM(cons(s(n), x), cons(m, y)) -> SUM(cons(n, x), cons(s(m), y))

The TRS R consists of the following rules:

   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(cons(0, x), y) -> sum(x, y)
   sum(nil, y) -> y
   weight(cons(n, cons(m, x))) -> weight(sum(cons(n, cons(m, x)), cons(0, x)))
   weight(cons(n, nil)) -> n

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(0, x), y) -> SUM(x, y)
   SUM(cons(s(n), x), cons(m, y)) -> SUM(cons(n, x), cons(s(m), y))

R is empty.
The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(0, x), y) -> SUM(x, y)
   SUM(cons(s(n), x), cons(m, y)) -> SUM(cons(n, x), cons(s(m), y))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   SUM(cons(0, x), y) -> SUM(x, y)
   SUM(cons(s(n), x), cons(m, y)) -> SUM(cons(n, x), cons(s(m), y))
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(SUM(x_1, x_2)) = 2*x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 2 + x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   WEIGHT(cons(n, cons(m, x))) -> WEIGHT(sum(cons(n, cons(m, x)), cons(0, x)))

The TRS R consists of the following rules:

   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(cons(0, x), y) -> sum(x, y)
   sum(nil, y) -> y
   weight(cons(n, cons(m, x))) -> weight(sum(cons(n, cons(m, x)), cons(0, x)))
   weight(cons(n, nil)) -> n

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   WEIGHT(cons(n, cons(m, x))) -> WEIGHT(sum(cons(n, cons(m, x)), cons(0, x)))

The TRS R consists of the following rules:

   sum(cons(0, x), y) -> sum(x, y)
   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(nil, y) -> y

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)
   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   weight(cons(x0, cons(x1, x2)))
   weight(cons(x0, nil))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   WEIGHT(cons(n, cons(m, x))) -> WEIGHT(sum(cons(n, cons(m, x)), cons(0, x)))

The TRS R consists of the following rules:

   sum(cons(0, x), y) -> sum(x, y)
   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(nil, y) -> y

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   WEIGHT(cons(n, cons(m, x))) -> WEIGHT(sum(cons(n, cons(m, x)), cons(0, x)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
WEIGHT(x1)  =  x1

cons(x1, x2)  =  cons(x2)

sum(x1, x2)  =  x2


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(cons(0, x), y) -> sum(x, y)
   sum(nil, y) -> y


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sum(cons(0, x), y) -> sum(x, y)
   sum(cons(s(n), x), cons(m, y)) -> sum(cons(n, x), cons(s(m), y))
   sum(nil, y) -> y

The set Q consists of the following terms:

   sum(cons(s(x0), x1), cons(x2, x3))
   sum(cons(0, x0), x1)
   sum(nil, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
