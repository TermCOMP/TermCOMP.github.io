YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eFYiR.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 12 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) MRRProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   +(+(x, y), z) -> +(x, +(y, z))
   opp(#) -> #
   opp(0(x)) -> 0(opp(x))
   opp(1(x)) -> j(opp(x))
   opp(j(x)) -> 1(opp(x))
   -(x, y) -> +(x, opp(y))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   *(j(x), y) -> -(0(*(x, y)), y)
   *(*(x, y), z) -> *(x, *(y, z))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 0(y)) -> 0^1(+(x, y))
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(0(x), j(y)) -> +^1(x, y)
   +^1(j(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(j(x), j(y)) -> +^1(+(x, y), j(#))
   +^1(j(x), j(y)) -> +^1(x, y)
   +^1(1(x), j(y)) -> 0^1(+(x, y))
   +^1(1(x), j(y)) -> +^1(x, y)
   +^1(j(x), 1(y)) -> 0^1(+(x, y))
   +^1(j(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)
   OPP(0(x)) -> 0^1(opp(x))
   OPP(0(x)) -> OPP(x)
   OPP(1(x)) -> OPP(x)
   OPP(j(x)) -> OPP(x)
   -^1(x, y) -> +^1(x, opp(y))
   -^1(x, y) -> OPP(y)
   *^1(0(x), y) -> 0^1(*(x, y))
   *^1(0(x), y) -> *^1(x, y)
   *^1(1(x), y) -> +^1(0(*(x, y)), y)
   *^1(1(x), y) -> 0^1(*(x, y))
   *^1(1(x), y) -> *^1(x, y)
   *^1(j(x), y) -> -^1(0(*(x, y)), y)
   *^1(j(x), y) -> 0^1(*(x, y))
   *^1(j(x), y) -> *^1(x, y)
   *^1(*(x, y), z) -> *^1(x, *(y, z))
   *^1(*(x, y), z) -> *^1(y, z)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   +(+(x, y), z) -> +(x, +(y, z))
   opp(#) -> #
   opp(0(x)) -> 0(opp(x))
   opp(1(x)) -> j(opp(x))
   opp(j(x)) -> 1(opp(x))
   -(x, y) -> +(x, opp(y))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   *(j(x), y) -> -(0(*(x, y)), y)
   *(*(x, y), z) -> *(x, *(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 11 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   OPP(1(x)) -> OPP(x)
   OPP(0(x)) -> OPP(x)
   OPP(j(x)) -> OPP(x)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   +(+(x, y), z) -> +(x, +(y, z))
   opp(#) -> #
   opp(0(x)) -> 0(opp(x))
   opp(1(x)) -> j(opp(x))
   opp(j(x)) -> 1(opp(x))
   -(x, y) -> +(x, opp(y))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   *(j(x), y) -> -(0(*(x, y)), y)
   *(*(x, y), z) -> *(x, *(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   OPP(1(x)) -> OPP(x)
   OPP(0(x)) -> OPP(x)
   OPP(j(x)) -> OPP(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*OPP(1(x)) -> OPP(x)
The graph contains the following edges 1 > 1


*OPP(0(x)) -> OPP(x)
The graph contains the following edges 1 > 1


*OPP(j(x)) -> OPP(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(0(x), j(y)) -> +^1(x, y)
   +^1(j(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(j(x), j(y)) -> +^1(+(x, y), j(#))
   +^1(j(x), j(y)) -> +^1(x, y)
   +^1(1(x), j(y)) -> +^1(x, y)
   +^1(j(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   +(+(x, y), z) -> +(x, +(y, z))
   opp(#) -> #
   opp(0(x)) -> 0(opp(x))
   opp(1(x)) -> j(opp(x))
   opp(j(x)) -> 1(opp(x))
   -(x, y) -> +(x, opp(y))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   *(j(x), y) -> -(0(*(x, y)), y)
   *(*(x, y), z) -> *(x, *(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(0(x), j(y)) -> +^1(x, y)
   +^1(j(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(j(x), j(y)) -> +^1(+(x, y), j(#))
   +^1(j(x), j(y)) -> +^1(x, y)
   +^1(1(x), j(y)) -> +^1(x, y)
   +^1(j(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)

The TRS R consists of the following rules:

   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   +(+(x, y), z) -> +(x, +(y, z))
   0(#) -> #

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(0(x), j(y)) -> +^1(x, y)
   +^1(j(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(j(x), j(y)) -> +^1(+(x, y), j(#))
   +^1(j(x), j(y)) -> +^1(x, y)
   +^1(1(x), j(y)) -> +^1(x, y)
   +^1(j(x), 1(y)) -> +^1(x, y)

Strictly oriented rules of the TRS R:

   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   0(#) -> #

Used ordering: Polynomial interpretation [POLO]:

   POL(#) = 0
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(+^1(x_1, x_2)) = x_1 + x_2
   POL(0(x_1)) = 1 + x_1
   POL(1(x_1)) = 1 + x_1
   POL(j(x_1)) = 1 + x_1


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)

The TRS R consists of the following rules:

   +(#, x) -> x
   +(x, #) -> x
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(+(x, y), z) -> +(x, +(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*+^1(+(x, y), z) -> +^1(x, +(y, z))
The graph contains the following edges 1 > 1


*+^1(+(x, y), z) -> +^1(y, z)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(1(x), y) -> *^1(x, y)
   *^1(0(x), y) -> *^1(x, y)
   *^1(j(x), y) -> *^1(x, y)
   *^1(*(x, y), z) -> *^1(x, *(y, z))
   *^1(*(x, y), z) -> *^1(y, z)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(0(x), j(y)) -> j(+(x, y))
   +(j(x), 0(y)) -> j(+(x, y))
   +(1(x), 1(y)) -> j(+(+(x, y), 1(#)))
   +(j(x), j(y)) -> 1(+(+(x, y), j(#)))
   +(1(x), j(y)) -> 0(+(x, y))
   +(j(x), 1(y)) -> 0(+(x, y))
   +(+(x, y), z) -> +(x, +(y, z))
   opp(#) -> #
   opp(0(x)) -> 0(opp(x))
   opp(1(x)) -> j(opp(x))
   opp(j(x)) -> 1(opp(x))
   -(x, y) -> +(x, opp(y))
   *(#, x) -> #
   *(0(x), y) -> 0(*(x, y))
   *(1(x), y) -> +(0(*(x, y)), y)
   *(j(x), y) -> -(0(*(x, y)), y)
   *(*(x, y), z) -> *(x, *(y, z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**^1(1(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(0(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(j(x), y) -> *^1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(*(x, y), z) -> *^1(x, *(y, z))
The graph contains the following edges 1 > 1


**^1(*(x, y), z) -> *^1(y, z)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(19)
YES
