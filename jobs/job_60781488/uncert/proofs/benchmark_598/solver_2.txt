NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/28AMs.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) NonTerminationLoopProof [COMPLETE, 0 ms]
        (7) NO
    (8) QDP
        (9) NonTerminationLoopProof [COMPLETE, 1 ms]
        (10) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(s(a), s(b), x) -> f(x, x, x)
   g(f(s(x), s(y), z)) -> g(f(x, y, z))
   cons(x, y) -> x
   cons(x, y) -> y

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(a), s(b), x) -> F(x, x, x)
   G(f(s(x), s(y), z)) -> G(f(x, y, z))
   G(f(s(x), s(y), z)) -> F(x, y, z)

The TRS R consists of the following rules:

   f(s(a), s(b), x) -> f(x, x, x)
   g(f(s(x), s(y), z)) -> g(f(x, y, z))
   cons(x, y) -> x
   cons(x, y) -> y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(s(a), s(b), x) -> F(x, x, x)

The TRS R consists of the following rules:

   f(s(a), s(b), x) -> f(x, x, x)
   g(f(s(x), s(y), z)) -> g(f(x, y, z))
   cons(x, y) -> x
   cons(x, y) -> y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(cons(s(a), y), cons(x', s(b)), x) evaluates to  t =F(x, x, x)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [y / s(b), x' / s(a), x / cons(s(a), s(b))]

--------------------------------------------------------------------------------
Rewriting sequence

F(cons(s(a), s(b)), cons(s(a), s(b)), cons(s(a), s(b))) -> F(cons(s(a), s(b)), s(b), cons(s(a), s(b)))
with rule cons(x', y') -> y' at position [1] and matcher [x' / s(a), y' / s(b)]

F(cons(s(a), s(b)), s(b), cons(s(a), s(b))) -> F(s(a), s(b), cons(s(a), s(b)))
with rule cons(x', y) -> x' at position [0] and matcher [x' / s(a), y / s(b)]

F(s(a), s(b), cons(s(a), s(b))) -> F(cons(s(a), s(b)), cons(s(a), s(b)), cons(s(a), s(b)))
with rule F(s(a), s(b), x) -> F(x, x, x)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(7)
NO

----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(f(s(x), s(y), z)) -> G(f(x, y, z))

The TRS R consists of the following rules:

   f(s(a), s(b), x) -> f(x, x, x)
   g(f(s(x), s(y), z)) -> g(f(x, y, z))
   cons(x, y) -> x
   cons(x, y) -> y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = G(f(cons(s(a), y), cons(x', s(b)), s(x))) evaluates to  t =G(f(x, x, s(x)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [y / s(b), x' / s(a), x / cons(s(a), s(b))]

--------------------------------------------------------------------------------
Rewriting sequence

G(f(cons(s(a), s(b)), cons(s(a), s(b)), s(cons(s(a), s(b))))) -> G(f(cons(s(a), s(b)), s(b), s(cons(s(a), s(b)))))
with rule cons(x', y') -> y' at position [0,1] and matcher [x' / s(a), y' / s(b)]

G(f(cons(s(a), s(b)), s(b), s(cons(s(a), s(b))))) -> G(f(s(a), s(b), s(cons(s(a), s(b)))))
with rule cons(x', y) -> x' at position [0,0] and matcher [x' / s(a), y / s(b)]

G(f(s(a), s(b), s(cons(s(a), s(b))))) -> G(f(s(cons(s(a), s(b))), s(cons(s(a), s(b))), s(cons(s(a), s(b)))))
with rule f(s(a), s(b), x') -> f(x', x', x') at position [0] and matcher [x' / s(cons(s(a), s(b)))]

G(f(s(cons(s(a), s(b))), s(cons(s(a), s(b))), s(cons(s(a), s(b))))) -> G(f(cons(s(a), s(b)), cons(s(a), s(b)), s(cons(s(a), s(b)))))
with rule G(f(s(x), s(y), z)) -> G(f(x, y, z))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(10)
NO
