YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
half(num0) -> num0
half(s(num0)) -> num0
half(s(s(x))) -> s(half(x))
help(x,y) -> ifb(lt(y,x),x,y)
ifa(ffalse,x) -> logZeroError
ifa(ftrue,x) -> help(x,num1)
ifb(ffalse,x,y) -> y
ifb(ftrue,x,y) -> help(half(x),s(y))
logarithm(x) -> ifa(lt(num0,x),x)
lt(num0,s(x)) -> ftrue
lt(s(x),s(y)) -> lt(x,y)
lt(x,num0) -> ffalse
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
 HELP(x,y) -> IFB(lt(y,x),x,y)
 HELP(x,y) -> LT(y,x)
 IFA(ftrue,x) -> HELP(x,num1)
 IFB(ftrue,x,y) -> HALF(x)
 IFB(ftrue,x,y) -> HELP(half(x),s(y))
 LOGARITHM(x) -> IFA(lt(num0,x),x)
 LOGARITHM(x) -> LT(num0,x)
 LT(s(x),s(y)) -> LT(x,y)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse

Problem 1: 

SCC Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
 HELP(x,y) -> IFB(lt(y,x),x,y)
 HELP(x,y) -> LT(y,x)
 IFA(ftrue,x) -> HELP(x,num1)
 IFB(ftrue,x,y) -> HALF(x)
 IFB(ftrue,x,y) -> HELP(half(x),s(y))
 LOGARITHM(x) -> IFA(lt(num0,x),x)
 LOGARITHM(x) -> LT(num0,x)
 LT(s(x),s(y)) -> LT(x,y)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LT(s(x),s(y)) -> LT(x,y)
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->->Cycle:
->->-> Pairs:
 HALF(s(s(x))) -> HALF(x)
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->->Cycle:
->->-> Pairs:
 HELP(x,y) -> IFB(lt(y,x),x,y)
 IFB(ftrue,x,y) -> HELP(half(x),s(y))
->->-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LT(s(x),s(y)) -> LT(x,y)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Projection:
 pi(LT) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Projection:
 pi(HALF) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Pairs Processor:
-> Pairs:
 HELP(x,y) -> IFB(lt(y,x),x,y)
 IFB(ftrue,x,y) -> HELP(half(x),s(y))
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
-> Usable rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[half](X) = 1/2.X
[help](X1,X2) = 0
[ifa](X1,X2) = 0
[ifb](X1,X2,X3) = 0
[logarithm](X) = 0
[lt](X1,X2) = 2.X2 + 1/2
[num0] = 0
[num1] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[logZeroError] = 0
[s](X) = X + 1
[ftrue] = 2
[HALF](X) = 0
[HELP](X1,X2) = 2.X1 + 1
[IFA](X1,X2) = 0
[IFB](X1,X2,X3) = 1/2.X1 + X2 + 1/2
[LOGARITHM](X) = 0
[LT](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 IFB(ftrue,x,y) -> HELP(half(x),s(y))
-> Rules:
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 help(x,y) -> ifb(lt(y,x),x,y)
 ifa(ffalse,x) -> logZeroError
 ifa(ftrue,x) -> help(x,num1)
 ifb(ffalse,x,y) -> y
 ifb(ftrue,x,y) -> help(half(x),s(y))
 logarithm(x) -> ifa(lt(num0,x),x)
 lt(num0,s(x)) -> ftrue
 lt(s(x),s(y)) -> lt(x,y)
 lt(x,num0) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
