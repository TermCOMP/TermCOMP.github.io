YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0HYsi.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 33 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 25 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   dbl(0) -> 0
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))
   terms(X) -> n__terms(X)
   add(X1, X2) -> n__add(X1, X2)
   s(X) -> n__s(X)
   dbl(X) -> n__dbl(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(N) -> SQR(N)
   TERMS(N) -> S(N)
   SQR(s(X)) -> S(n__add(sqr(activate(X)), dbl(activate(X))))
   SQR(s(X)) -> SQR(activate(X))
   SQR(s(X)) -> ACTIVATE(X)
   SQR(s(X)) -> DBL(activate(X))
   DBL(s(X)) -> S(n__s(n__dbl(activate(X))))
   DBL(s(X)) -> ACTIVATE(X)
   ADD(s(X), Y) -> S(n__add(activate(X), Y))
   ADD(s(X), Y) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__terms(X)) -> TERMS(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ACTIVATE(n__s(X)) -> S(X)
   ACTIVATE(n__dbl(X)) -> DBL(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   dbl(0) -> 0
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))
   terms(X) -> n__terms(X)
   add(X1, X2) -> n__add(X1, X2)
   s(X) -> n__s(X)
   dbl(X) -> n__dbl(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(activate(X))
   SQR(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__terms(X)) -> TERMS(X)
   TERMS(N) -> SQR(N)
   SQR(s(X)) -> DBL(activate(X))
   DBL(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ADD(s(X), Y) -> ACTIVATE(X)
   ACTIVATE(n__dbl(X)) -> DBL(X)
   ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   dbl(0) -> 0
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))
   terms(X) -> n__terms(X)
   add(X1, X2) -> n__add(X1, X2)
   s(X) -> n__s(X)
   dbl(X) -> n__dbl(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__first(X1, X2)) -> FIRST(X1, X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(SQR(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(activate(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(ACTIVATE(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__terms(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(TERMS(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(DBL(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__add(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(ADD(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(n__dbl(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__first(x_1, x_2)) =  	[[1A]] 	 +  	[[5A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(FIRST(x_1, x_2)) =  	[[0A]] 	 +  	[[4A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(terms(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(add(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(n__s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(dbl(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(first(x_1, x_2)) =  	[[1A]] 	 +  	[[5A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(sqr(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(recip(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(nil) =  	[[4A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   sqr(0) -> 0
   dbl(0) -> 0
   dbl(X) -> n__dbl(X)
   s(X) -> n__s(X)
   terms(X) -> n__terms(X)
   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   add(0, X) -> X
   add(X1, X2) -> n__add(X1, X2)
   add(s(X), Y) -> s(n__add(activate(X), Y))
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> SQR(activate(X))
   SQR(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__terms(X)) -> TERMS(X)
   TERMS(N) -> SQR(N)
   SQR(s(X)) -> DBL(activate(X))
   DBL(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ADD(s(X), Y) -> ACTIVATE(X)
   ACTIVATE(n__dbl(X)) -> DBL(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(X)
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   dbl(0) -> 0
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))
   terms(X) -> n__terms(X)
   add(X1, X2) -> n__add(X1, X2)
   s(X) -> n__s(X)
   dbl(X) -> n__dbl(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__terms(X)) -> TERMS(X)
   TERMS(N) -> SQR(N)
   SQR(s(X)) -> SQR(activate(X))
   SQR(s(X)) -> DBL(activate(X))
   DBL(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ADD(s(X), Y) -> ACTIVATE(X)
   ACTIVATE(n__dbl(X)) -> DBL(X)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   dbl(0) -> 0
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))
   terms(X) -> n__terms(X)
   add(X1, X2) -> n__add(X1, X2)
   s(X) -> n__s(X)
   dbl(X) -> n__dbl(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SQR(s(X)) -> ACTIVATE(X)
   SQR(s(X)) -> SQR(activate(X))
   SQR(s(X)) -> DBL(activate(X))
   DBL(s(X)) -> ACTIVATE(X)
   ACTIVATE(n__add(X1, X2)) -> ADD(X1, X2)
   ADD(s(X), Y) -> ACTIVATE(X)
   ACTIVATE(n__dbl(X)) -> DBL(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
SQR(x1)  =  SQR(x1)

s(x1)  =  s(x1)

ACTIVATE(x1)  =  ACTIVATE(x1)

n__terms(x1)  =  x1

TERMS(x1)  =  TERMS(x1)

activate(x1)  =  x1

DBL(x1)  =  x1

n__add(x1, x2)  =  n__add(x1, x2)

ADD(x1, x2)  =  x1

n__dbl(x1)  =  n__dbl(x1)

terms(x1)  =  x1

add(x1, x2)  =  add(x1, x2)

n__s(x1)  =  n__s(x1)

dbl(x1)  =  dbl(x1)

n__first(x1, x2)  =  n__first(x1, x2)

first(x1, x2)  =  first(x1, x2)

sqr(x1)  =  sqr(x1)

0  =  0

cons(x1, x2)  =  cons

recip(x1)  =  x1

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: [n__dbl_1, dbl_1, sqr_1] > [n__add_2, add_2] > [s_1, n__s_1] > [SQR_1, ACTIVATE_1, TERMS_1] > cons
[n__dbl_1, dbl_1, sqr_1] > 0 > cons
[n__first_2, first_2, nil] > cons

Status: SQR_1: multiset status
s_1: [1]
ACTIVATE_1: multiset status
TERMS_1: multiset status
n__add_2: multiset status
n__dbl_1: [1]
add_2: multiset status
n__s_1: [1]
dbl_1: [1]
n__first_2: multiset status
first_2: multiset status
sqr_1: [1]
0: multiset status
cons: []
nil: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   sqr(0) -> 0
   dbl(0) -> 0
   dbl(X) -> n__dbl(X)
   s(X) -> n__s(X)
   terms(X) -> n__terms(X)
   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   add(0, X) -> X
   add(X1, X2) -> n__add(X1, X2)
   add(s(X), Y) -> s(n__add(activate(X), Y))
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__terms(X)) -> TERMS(X)
   TERMS(N) -> SQR(N)

The TRS R consists of the following rules:

   terms(N) -> cons(recip(sqr(N)), n__terms(s(N)))
   sqr(0) -> 0
   sqr(s(X)) -> s(n__add(sqr(activate(X)), dbl(activate(X))))
   dbl(0) -> 0
   dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(n__add(activate(X), Y))
   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(activate(X), activate(Z)))
   terms(X) -> n__terms(X)
   add(X1, X2) -> n__add(X1, X2)
   s(X) -> n__s(X)
   dbl(X) -> n__dbl(X)
   first(X1, X2) -> n__first(X1, X2)
   activate(n__terms(X)) -> terms(X)
   activate(n__add(X1, X2)) -> add(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__dbl(X)) -> dbl(X)
   activate(n__first(X1, X2)) -> first(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(12)
TRUE
