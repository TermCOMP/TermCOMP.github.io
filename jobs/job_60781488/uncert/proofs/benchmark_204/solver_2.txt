YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LL1cG.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QReductionProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) NonInfProof [EQUIVALENT, 3 ms]
        (41) QDP
        (42) DependencyGraphProof [EQUIVALENT, 0 ms]
        (43) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)
   TIMES(s(x), y) -> PLUS(y, times(x, y))
   TIMES(s(x), y) -> TIMES(x, y)
   EXP(x, s(y)) -> TIMES(x, exp(x, y))
   EXP(x, s(y)) -> EXP(x, y)
   GE(s(x), s(y)) -> GE(x, y)
   TOWER(x, y) -> TOWERITER(0, x, y, s(0))
   TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z)
   TOWERITER(c, x, y, z) -> GE(c, x)
   HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))
   HELP(false, c, x, y, z) -> EXP(y, z)

The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(x), s(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EXP(x, s(y)) -> EXP(x, y)

The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EXP(x, s(y)) -> EXP(x, y)

R is empty.
The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EXP(x, s(y)) -> EXP(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EXP(x, s(y)) -> EXP(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))
   TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z)

The TRS R consists of the following rules:

   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   tower(x, y) -> towerIter(0, x, y, s(0))
   towerIter(c, x, y, z) -> help(ge(c, x), c, x, y, z)
   help(true, c, x, y, z) -> z
   help(false, c, x, y, z) -> towerIter(s(c), x, y, exp(y, z))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))
   TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   tower(x0, x1)
   towerIter(x0, x1, x2, x3)
   help(true, x0, x1, x2, x3)
   help(false, x0, x1, x2, x3)


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))
   TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z)) the following chains were created:
*We consider the chain TOWERITER(x4, x5, x6, x7) -> HELP(ge(x4, x5), x4, x5, x6, x7), HELP(false, x8, x9, x10, x11) -> TOWERITER(s(x8), x9, x10, exp(x10, x11)) which results in the following constraint:

(1)    (HELP(ge(x4, x5), x4, x5, x6, x7)=HELP(false, x8, x9, x10, x11)  ==>  HELP(false, x8, x9, x10, x11)_>=_TOWERITER(s(x8), x9, x10, exp(x10, x11)))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (ge(x4, x5)=false  ==>  HELP(false, x4, x5, x6, x7)_>=_TOWERITER(s(x4), x5, x6, exp(x6, x7)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on ge(x4, x5)=false which results in the following new constraints:

(3)    (false=false  ==>  HELP(false, 0, s(x25), x6, x7)_>=_TOWERITER(s(0), s(x25), x6, exp(x6, x7)))

(4)    (ge(x27, x26)=false & (\/x28,x29:ge(x27, x26)=false  ==>  HELP(false, x27, x26, x28, x29)_>=_TOWERITER(s(x27), x26, x28, exp(x28, x29)))  ==>  HELP(false, s(x27), s(x26), x6, x7)_>=_TOWERITER(s(s(x27)), s(x26), x6, exp(x6, x7)))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (HELP(false, 0, s(x25), x6, x7)_>=_TOWERITER(s(0), s(x25), x6, exp(x6, x7)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x28,x29:ge(x27, x26)=false  ==>  HELP(false, x27, x26, x28, x29)_>=_TOWERITER(s(x27), x26, x28, exp(x28, x29))) with sigma = [x28 / x6, x29 / x7] which results in the following new constraint:

(6)    (HELP(false, x27, x26, x6, x7)_>=_TOWERITER(s(x27), x26, x6, exp(x6, x7))  ==>  HELP(false, s(x27), s(x26), x6, x7)_>=_TOWERITER(s(s(x27)), s(x26), x6, exp(x6, x7)))








For Pair TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z) the following chains were created:
*We consider the chain HELP(false, x12, x13, x14, x15) -> TOWERITER(s(x12), x13, x14, exp(x14, x15)), TOWERITER(x16, x17, x18, x19) -> HELP(ge(x16, x17), x16, x17, x18, x19) which results in the following constraint:

(1)    (TOWERITER(s(x12), x13, x14, exp(x14, x15))=TOWERITER(x16, x17, x18, x19)  ==>  TOWERITER(x16, x17, x18, x19)_>=_HELP(ge(x16, x17), x16, x17, x18, x19))



We simplified constraint (1) using rules (I), (II), (III), (IV) which results in the following new constraint:

(2)    (TOWERITER(s(x12), x13, x14, x19)_>=_HELP(ge(s(x12), x13), s(x12), x13, x14, x19))








To summarize, we get the following constraints P__>=_ for the following pairs.

*HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))

*(HELP(false, 0, s(x25), x6, x7)_>=_TOWERITER(s(0), s(x25), x6, exp(x6, x7)))


*(HELP(false, x27, x26, x6, x7)_>=_TOWERITER(s(x27), x26, x6, exp(x6, x7))  ==>  HELP(false, s(x27), s(x26), x6, x7)_>=_TOWERITER(s(s(x27)), s(x26), x6, exp(x6, x7)))




*TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z)

*(TOWERITER(s(x12), x13, x14, x19)_>=_HELP(ge(s(x12), x13), s(x12), x13, x14, x19))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(HELP(x_1, x_2, x_3, x_4, x_5)) = -x_1 - x_2 + x_3
   POL(TOWERITER(x_1, x_2, x_3, x_4)) = -1 - x_1 + x_2
   POL(c) = -2
   POL(exp(x_1, x_2)) = 1 + x_1 + x_2
   POL(false) = 1
   POL(ge(x_1, x_2)) = 1
   POL(plus(x_1, x_2)) = x_2
   POL(s(x_1)) = 1 + x_1
   POL(times(x_1, x_2)) = 1 + x_1 + x_2
   POL(true) = 1


The following pairs  are in P_>:
   HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))
The following pairs are in P_bound:
   HELP(false, c, x, y, z) -> TOWERITER(s(c), x, y, exp(y, z))
The following rules are usable:
   true -> ge(x, 0)
   false -> ge(0, s(x))
   ge(x, y) -> ge(s(x), s(y))

----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOWERITER(c, x, y, z) -> HELP(ge(c, x), c, x, y, z)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(x)) -> false
   ge(s(x), s(y)) -> ge(x, y)
   exp(x, 0) -> s(0)
   exp(x, s(y)) -> times(x, exp(x, y))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, x) -> x
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)
   times(0, x0)
   times(s(x0), x1)
   exp(x0, 0)
   exp(x0, s(x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(43)
TRUE
