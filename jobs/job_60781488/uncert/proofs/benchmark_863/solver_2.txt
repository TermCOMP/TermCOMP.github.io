NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/bouSZ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 30 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesReductionPairsProof [EQUIVALENT, 5 ms]
        (14) QDP
        (15) TransformationProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) TransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) TransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) NonTerminationLoopProof [COMPLETE, 0 ms]
        (24) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   h(X, Z) -> f(X, s(X), Z)
   f(X, Y, g(X, Y)) -> h(0, g(X, Y))
   g(0, Y) -> 0
   g(X, s(Y)) -> g(X, Y)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(f(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(g(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(h(x_1, x_2)) = 2*x_1 + x_2
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   g(0, Y) -> 0




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   h(X, Z) -> f(X, s(X), Z)
   f(X, Y, g(X, Y)) -> h(0, g(X, Y))
   g(X, s(Y)) -> g(X, Y)

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(X, Z) -> F(X, s(X), Z)
   F(X, Y, g(X, Y)) -> H(0, g(X, Y))
   G(X, s(Y)) -> G(X, Y)

The TRS R consists of the following rules:

   h(X, Z) -> f(X, s(X), Z)
   f(X, Y, g(X, Y)) -> h(0, g(X, Y))
   g(X, s(Y)) -> g(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(X, s(Y)) -> G(X, Y)

The TRS R consists of the following rules:

   h(X, Z) -> f(X, s(X), Z)
   f(X, Y, g(X, Y)) -> h(0, g(X, Y))
   g(X, s(Y)) -> g(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(X, s(Y)) -> G(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*G(X, s(Y)) -> G(X, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, Y, g(X, Y)) -> H(0, g(X, Y))
   H(X, Z) -> F(X, s(X), Z)

The TRS R consists of the following rules:

   h(X, Z) -> f(X, s(X), Z)
   f(X, Y, g(X, Y)) -> h(0, g(X, Y))
   g(X, s(Y)) -> g(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   h(X, Z) -> f(X, s(X), Z)
   f(X, Y, g(X, Y)) -> h(0, g(X, Y))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(F(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(H(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(g(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, Y, g(X, Y)) -> H(0, g(X, Y))
   H(X, Z) -> F(X, s(X), Z)

The TRS R consists of the following rules:

   g(X, s(Y)) -> g(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule H(X, Z) -> F(X, s(X), Z) we obtained the following new rules [LPAR04]:

   (H(0, y_2) -> F(0, s(0), y_2),H(0, y_2) -> F(0, s(0), y_2))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, Y, g(X, Y)) -> H(0, g(X, Y))
   H(0, y_2) -> F(0, s(0), y_2)

The TRS R consists of the following rules:

   g(X, s(Y)) -> g(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(X, Y, g(X, Y)) -> H(0, g(X, Y)) we obtained the following new rules [LPAR04]:

   (F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0))),F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0))))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(0, y_2) -> F(0, s(0), y_2)
   F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0)))

The TRS R consists of the following rules:

   g(X, s(Y)) -> g(X, Y)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   g(X, s(Y)) -> g(X, Y)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(F(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(H(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(g(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(0, y_2) -> F(0, s(0), y_2)
   F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule H(0, y_2) -> F(0, s(0), y_2) we obtained the following new rules [LPAR04]:

   (H(0, g(0, s(0))) -> F(0, s(0), g(0, s(0))),H(0, g(0, s(0))) -> F(0, s(0), g(0, s(0))))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0)))
   H(0, g(0, s(0))) -> F(0, s(0), g(0, s(0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = H(0, g(0, s(0))) evaluates to  t =H(0, g(0, s(0)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

H(0, g(0, s(0))) -> F(0, s(0), g(0, s(0)))
with rule H(0, g(0, s(0))) -> F(0, s(0), g(0, s(0))) at position [] and matcher [ ]

F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0)))
with rule F(0, s(0), g(0, s(0))) -> H(0, g(0, s(0)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(24)
NO
