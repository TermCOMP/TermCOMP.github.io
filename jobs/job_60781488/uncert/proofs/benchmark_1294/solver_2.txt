NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/RvJbL.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 1900 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) TransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) TransformationProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) TransformationProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) TransformationProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) DependencyGraphProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) TransformationProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) TransformationProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) DependencyGraphProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) TransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) TransformationProof [EQUIVALENT, 6 ms]
        (33) QDP
        (34) DependencyGraphProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) TransformationProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) TransformationProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) DependencyGraphProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) TransformationProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) DependencyGraphProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) TransformationProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPOrderProof [EQUIVALENT, 319 ms]
        (49) QDP
        (50) QDPOrderProof [EQUIVALENT, 291 ms]
        (51) QDP
        (52) QDPOrderProof [EQUIVALENT, 322 ms]
        (53) QDP
        (54) QDPOrderProof [EQUIVALENT, 1014 ms]
        (55) QDP
        (56) QDPOrderProof [EQUIVALENT, 89 ms]
        (57) QDP
        (58) NonTerminationLoopProof [COMPLETE, 90 ms]
        (59) NO
    (60) QDP
        (61) TransformationProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) TransformationProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) TransformationProof [EQUIVALENT, 0 ms]
        (66) QDP
        (67) DependencyGraphProof [EQUIVALENT, 0 ms]
        (68) QDP
        (69) TransformationProof [EQUIVALENT, 0 ms]
        (70) QDP
        (71) DependencyGraphProof [EQUIVALENT, 0 ms]
        (72) QDP
        (73) TransformationProof [EQUIVALENT, 0 ms]
        (74) QDP
        (75) DependencyGraphProof [EQUIVALENT, 0 ms]
        (76) QDP
        (77) TransformationProof [EQUIVALENT, 0 ms]
        (78) QDP
        (79) DependencyGraphProof [EQUIVALENT, 0 ms]
        (80) QDP
        (81) TransformationProof [EQUIVALENT, 0 ms]
        (82) QDP
        (83) TransformationProof [EQUIVALENT, 0 ms]
        (84) QDP
        (85) TransformationProof [EQUIVALENT, 0 ms]
        (86) QDP
        (87) DependencyGraphProof [EQUIVALENT, 0 ms]
        (88) QDP
        (89) TransformationProof [EQUIVALENT, 0 ms]
        (90) QDP
        (91) TransformationProof [EQUIVALENT, 0 ms]
        (92) QDP
        (93) DependencyGraphProof [EQUIVALENT, 0 ms]
        (94) QDP
        (95) TransformationProof [EQUIVALENT, 0 ms]
        (96) QDP
        (97) DependencyGraphProof [EQUIVALENT, 0 ms]
        (98) QDP
        (99) QDPOrderProof [EQUIVALENT, 801 ms]
        (100) QDP
        (101) QDPOrderProof [EQUIVALENT, 1279 ms]
        (102) QDP
        (103) QDPOrderProof [EQUIVALENT, 1411 ms]
        (104) QDP
        (105) QDPOrderProof [EQUIVALENT, 3056 ms]
        (106) QDP
    (107) QDP
        (108) QDPOrderProof [EQUIVALENT, 619 ms]
        (109) QDP
        (110) DependencyGraphProof [EQUIVALENT, 0 ms]
        (111) TRUE
    (112) QDP
        (113) TransformationProof [EQUIVALENT, 0 ms]
        (114) QDP
        (115) TransformationProof [EQUIVALENT, 0 ms]
        (116) QDP
        (117) TransformationProof [EQUIVALENT, 0 ms]
        (118) QDP
        (119) DependencyGraphProof [EQUIVALENT, 0 ms]
        (120) QDP
        (121) TransformationProof [EQUIVALENT, 0 ms]
        (122) QDP
        (123) DependencyGraphProof [EQUIVALENT, 0 ms]
        (124) QDP
        (125) TransformationProof [EQUIVALENT, 0 ms]
        (126) QDP
        (127) DependencyGraphProof [EQUIVALENT, 0 ms]
        (128) QDP
        (129) TransformationProof [EQUIVALENT, 0 ms]
        (130) QDP
        (131) DependencyGraphProof [EQUIVALENT, 0 ms]
        (132) QDP
        (133) TransformationProof [EQUIVALENT, 0 ms]
        (134) QDP
        (135) TransformationProof [EQUIVALENT, 0 ms]
        (136) QDP
        (137) TransformationProof [EQUIVALENT, 0 ms]
        (138) QDP
        (139) DependencyGraphProof [EQUIVALENT, 0 ms]
        (140) QDP
        (141) TransformationProof [EQUIVALENT, 0 ms]
        (142) QDP
        (143) TransformationProof [EQUIVALENT, 0 ms]
        (144) QDP
        (145) DependencyGraphProof [EQUIVALENT, 0 ms]
        (146) QDP
        (147) TransformationProof [EQUIVALENT, 0 ms]
        (148) QDP
        (149) DependencyGraphProof [EQUIVALENT, 0 ms]
        (150) QDP
        (151) QDPOrderProof [EQUIVALENT, 1064 ms]
        (152) QDP
        (153) QDPOrderProof [EQUIVALENT, 2220 ms]
        (154) QDP
        (155) QDPOrderProof [EQUIVALENT, 1110 ms]
        (156) QDP
        (157) QDPOrderProof [EQUIVALENT, 1018 ms]
        (158) QDP
    (159) QDP
        (160) UsableRulesProof [EQUIVALENT, 0 ms]
        (161) QDP
        (162) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (163) YES
    (164) QDP
        (165) QDPOrderProof [EQUIVALENT, 497 ms]
        (166) QDP
        (167) PisEmptyProof [EQUIVALENT, 0 ms]
        (168) YES
    (169) QDP
        (170) QDPOrderProof [EQUIVALENT, 600 ms]
        (171) QDP
        (172) DependencyGraphProof [EQUIVALENT, 0 ms]
        (173) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ZEROS -> CONS(0, n__zeros)
   ZEROS -> 0^1
   U101^1(tt, V1, V2) -> U102^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U101^1(tt, V1, V2) -> ACTIVATE(V1)
   U101^1(tt, V1, V2) -> ACTIVATE(V2)
   U102^1(tt, V1, V2) -> U103^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U102^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U102^1(tt, V1, V2) -> ACTIVATE(V2)
   U102^1(tt, V1, V2) -> ACTIVATE(V1)
   U103^1(tt, V1, V2) -> U104^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U103^1(tt, V1, V2) -> ACTIVATE(V2)
   U103^1(tt, V1, V2) -> ACTIVATE(V1)
   U104^1(tt, V1, V2) -> U105^1(isNat(activate(V1)), activate(V2))
   U104^1(tt, V1, V2) -> ISNAT(activate(V1))
   U104^1(tt, V1, V2) -> ACTIVATE(V1)
   U104^1(tt, V1, V2) -> ACTIVATE(V2)
   U105^1(tt, V2) -> U106^1(isNatIList(activate(V2)))
   U105^1(tt, V2) -> ISNATILIST(activate(V2))
   U105^1(tt, V2) -> ACTIVATE(V2)
   U11^1(tt, V1) -> U12^1(isNatIListKind(activate(V1)), activate(V1))
   U11^1(tt, V1) -> ISNATILISTKIND(activate(V1))
   U11^1(tt, V1) -> ACTIVATE(V1)
   U111^1(tt, L, N) -> U112^1(isNatIListKind(activate(L)), activate(L), activate(N))
   U111^1(tt, L, N) -> ISNATILISTKIND(activate(L))
   U111^1(tt, L, N) -> ACTIVATE(L)
   U111^1(tt, L, N) -> ACTIVATE(N)
   U112^1(tt, L, N) -> U113^1(isNat(activate(N)), activate(L), activate(N))
   U112^1(tt, L, N) -> ISNAT(activate(N))
   U112^1(tt, L, N) -> ACTIVATE(N)
   U112^1(tt, L, N) -> ACTIVATE(L)
   U113^1(tt, L, N) -> U114^1(isNatKind(activate(N)), activate(L))
   U113^1(tt, L, N) -> ISNATKIND(activate(N))
   U113^1(tt, L, N) -> ACTIVATE(N)
   U113^1(tt, L, N) -> ACTIVATE(L)
   U114^1(tt, L) -> S(length(activate(L)))
   U114^1(tt, L) -> LENGTH(activate(L))
   U114^1(tt, L) -> ACTIVATE(L)
   U12^1(tt, V1) -> U13^1(isNatList(activate(V1)))
   U12^1(tt, V1) -> ISNATLIST(activate(V1))
   U12^1(tt, V1) -> ACTIVATE(V1)
   U121^1(tt, IL) -> U122^1(isNatIListKind(activate(IL)))
   U121^1(tt, IL) -> ISNATILISTKIND(activate(IL))
   U121^1(tt, IL) -> ACTIVATE(IL)
   U122^1(tt) -> NIL
   U131^1(tt, IL, M, N) -> U132^1(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U131^1(tt, IL, M, N) -> ISNATILISTKIND(activate(IL))
   U131^1(tt, IL, M, N) -> ACTIVATE(IL)
   U131^1(tt, IL, M, N) -> ACTIVATE(M)
   U131^1(tt, IL, M, N) -> ACTIVATE(N)
   U132^1(tt, IL, M, N) -> U133^1(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U132^1(tt, IL, M, N) -> ISNAT(activate(M))
   U132^1(tt, IL, M, N) -> ACTIVATE(M)
   U132^1(tt, IL, M, N) -> ACTIVATE(IL)
   U132^1(tt, IL, M, N) -> ACTIVATE(N)
   U133^1(tt, IL, M, N) -> U134^1(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U133^1(tt, IL, M, N) -> ISNATKIND(activate(M))
   U133^1(tt, IL, M, N) -> ACTIVATE(M)
   U133^1(tt, IL, M, N) -> ACTIVATE(IL)
   U133^1(tt, IL, M, N) -> ACTIVATE(N)
   U134^1(tt, IL, M, N) -> U135^1(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U134^1(tt, IL, M, N) -> ISNAT(activate(N))
   U134^1(tt, IL, M, N) -> ACTIVATE(N)
   U134^1(tt, IL, M, N) -> ACTIVATE(IL)
   U134^1(tt, IL, M, N) -> ACTIVATE(M)
   U135^1(tt, IL, M, N) -> U136^1(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U135^1(tt, IL, M, N) -> ISNATKIND(activate(N))
   U135^1(tt, IL, M, N) -> ACTIVATE(N)
   U135^1(tt, IL, M, N) -> ACTIVATE(IL)
   U135^1(tt, IL, M, N) -> ACTIVATE(M)
   U136^1(tt, IL, M, N) -> CONS(activate(N), n__take(activate(M), activate(IL)))
   U136^1(tt, IL, M, N) -> ACTIVATE(N)
   U136^1(tt, IL, M, N) -> ACTIVATE(M)
   U136^1(tt, IL, M, N) -> ACTIVATE(IL)
   U21^1(tt, V1) -> U22^1(isNatKind(activate(V1)), activate(V1))
   U21^1(tt, V1) -> ISNATKIND(activate(V1))
   U21^1(tt, V1) -> ACTIVATE(V1)
   U22^1(tt, V1) -> U23^1(isNat(activate(V1)))
   U22^1(tt, V1) -> ISNAT(activate(V1))
   U22^1(tt, V1) -> ACTIVATE(V1)
   U31^1(tt, V) -> U32^1(isNatIListKind(activate(V)), activate(V))
   U31^1(tt, V) -> ISNATILISTKIND(activate(V))
   U31^1(tt, V) -> ACTIVATE(V)
   U32^1(tt, V) -> U33^1(isNatList(activate(V)))
   U32^1(tt, V) -> ISNATLIST(activate(V))
   U32^1(tt, V) -> ACTIVATE(V)
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U41^1(tt, V1, V2) -> ACTIVATE(V1)
   U41^1(tt, V1, V2) -> ACTIVATE(V2)
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U42^1(tt, V1, V2) -> ACTIVATE(V2)
   U42^1(tt, V1, V2) -> ACTIVATE(V1)
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U43^1(tt, V1, V2) -> ACTIVATE(V2)
   U43^1(tt, V1, V2) -> ACTIVATE(V1)
   U44^1(tt, V1, V2) -> U45^1(isNat(activate(V1)), activate(V2))
   U44^1(tt, V1, V2) -> ISNAT(activate(V1))
   U44^1(tt, V1, V2) -> ACTIVATE(V1)
   U44^1(tt, V1, V2) -> ACTIVATE(V2)
   U45^1(tt, V2) -> U46^1(isNatIList(activate(V2)))
   U45^1(tt, V2) -> ISNATILIST(activate(V2))
   U45^1(tt, V2) -> ACTIVATE(V2)
   U51^1(tt, V2) -> U52^1(isNatIListKind(activate(V2)))
   U51^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   U51^1(tt, V2) -> ACTIVATE(V2)
   U61^1(tt, V2) -> U62^1(isNatIListKind(activate(V2)))
   U61^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   U61^1(tt, V2) -> ACTIVATE(V2)
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U91^1(tt, V1, V2) -> ACTIVATE(V1)
   U91^1(tt, V1, V2) -> ACTIVATE(V2)
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U92^1(tt, V1, V2) -> ACTIVATE(V2)
   U92^1(tt, V1, V2) -> ACTIVATE(V1)
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U93^1(tt, V1, V2) -> ACTIVATE(V2)
   U93^1(tt, V1, V2) -> ACTIVATE(V1)
   U94^1(tt, V1, V2) -> U95^1(isNat(activate(V1)), activate(V2))
   U94^1(tt, V1, V2) -> ISNAT(activate(V1))
   U94^1(tt, V1, V2) -> ACTIVATE(V1)
   U94^1(tt, V1, V2) -> ACTIVATE(V2)
   U95^1(tt, V2) -> U96^1(isNatList(activate(V2)))
   U95^1(tt, V2) -> ISNATLIST(activate(V2))
   U95^1(tt, V2) -> ACTIVATE(V2)
   ISNAT(n__length(V1)) -> U11^1(isNatIListKind(activate(V1)), activate(V1))
   ISNAT(n__length(V1)) -> ISNATILISTKIND(activate(V1))
   ISNAT(n__length(V1)) -> ACTIVATE(V1)
   ISNAT(n__s(V1)) -> U21^1(isNatKind(activate(V1)), activate(V1))
   ISNAT(n__s(V1)) -> ISNATKIND(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   ISNATILIST(V) -> U31^1(isNatIListKind(activate(V)), activate(V))
   ISNATILIST(V) -> ISNATILISTKIND(activate(V))
   ISNATILIST(V) -> ACTIVATE(V)
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   ISNATILIST(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILISTKIND(n__cons(V1, V2)) -> U51^1(isNatKind(activate(V1)), activate(V2))
   ISNATILISTKIND(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILISTKIND(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILISTKIND(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILISTKIND(n__take(V1, V2)) -> U61^1(isNatKind(activate(V1)), activate(V2))
   ISNATILISTKIND(n__take(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILISTKIND(n__take(V1, V2)) -> ACTIVATE(V1)
   ISNATILISTKIND(n__take(V1, V2)) -> ACTIVATE(V2)
   ISNATKIND(n__length(V1)) -> U71^1(isNatIListKind(activate(V1)))
   ISNATKIND(n__length(V1)) -> ISNATILISTKIND(activate(V1))
   ISNATKIND(n__length(V1)) -> ACTIVATE(V1)
   ISNATKIND(n__s(V1)) -> U81^1(isNatKind(activate(V1)))
   ISNATKIND(n__s(V1)) -> ISNATKIND(activate(V1))
   ISNATKIND(n__s(V1)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   ISNATLIST(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATLIST(n__take(V1, V2)) -> U101^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   ISNATLIST(n__take(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATLIST(n__take(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__take(V1, V2)) -> ACTIVATE(V2)
   LENGTH(nil) -> 0^1
   LENGTH(cons(N, L)) -> U111^1(isNatList(activate(L)), activate(L), N)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   TAKE(0, IL) -> U121^1(isNatIList(IL), IL)
   TAKE(0, IL) -> ISNATILIST(IL)
   TAKE(s(M), cons(N, IL)) -> U131^1(isNatIList(activate(IL)), activate(IL), M, N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(activate(IL))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
   ACTIVATE(n__zeros) -> ZEROS
   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__0) -> 0^1
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__cons(X1, X2)) -> CONS(activate(X1), X2)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__nil) -> NIL

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 22 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   TAKE(0, IL) -> U121^1(isNatIList(IL), IL)
   U121^1(tt, IL) -> ISNATILISTKIND(activate(IL))
   ISNATILISTKIND(n__cons(V1, V2)) -> U51^1(isNatKind(activate(V1)), activate(V2))
   U51^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   ISNATILISTKIND(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATKIND(n__length(V1)) -> ISNATILISTKIND(activate(V1))
   ISNATILISTKIND(n__cons(V1, V2)) -> ACTIVATE(V1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   LENGTH(cons(N, L)) -> U111^1(isNatList(activate(L)), activate(L), N)
   U111^1(tt, L, N) -> U112^1(isNatIListKind(activate(L)), activate(L), activate(N))
   U112^1(tt, L, N) -> U113^1(isNat(activate(N)), activate(L), activate(N))
   U113^1(tt, L, N) -> U114^1(isNatKind(activate(N)), activate(L))
   U114^1(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, V1, V2) -> U95^1(isNat(activate(V1)), activate(V2))
   U95^1(tt, V2) -> ISNATLIST(activate(V2))
   ISNATLIST(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATKIND(n__length(V1)) -> ACTIVATE(V1)
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ISNATKIND(n__s(V1)) -> ISNATKIND(activate(V1))
   ISNATKIND(n__s(V1)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATLIST(n__take(V1, V2)) -> U101^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101^1(tt, V1, V2) -> U102^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102^1(tt, V1, V2) -> U103^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103^1(tt, V1, V2) -> U104^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104^1(tt, V1, V2) -> U105^1(isNat(activate(V1)), activate(V2))
   U105^1(tt, V2) -> ISNATILIST(activate(V2))
   ISNATILIST(V) -> U31^1(isNatIListKind(activate(V)), activate(V))
   U31^1(tt, V) -> U32^1(isNatIListKind(activate(V)), activate(V))
   U32^1(tt, V) -> ISNATLIST(activate(V))
   ISNATLIST(n__take(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATLIST(n__take(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__take(V1, V2)) -> ACTIVATE(V2)
   U32^1(tt, V) -> ACTIVATE(V)
   U31^1(tt, V) -> ISNATILISTKIND(activate(V))
   ISNATILISTKIND(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILISTKIND(n__take(V1, V2)) -> U61^1(isNatKind(activate(V1)), activate(V2))
   U61^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   ISNATILISTKIND(n__take(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILISTKIND(n__take(V1, V2)) -> ACTIVATE(V1)
   ISNATILISTKIND(n__take(V1, V2)) -> ACTIVATE(V2)
   U61^1(tt, V2) -> ACTIVATE(V2)
   U31^1(tt, V) -> ACTIVATE(V)
   ISNATILIST(V) -> ISNATILISTKIND(activate(V))
   ISNATILIST(V) -> ACTIVATE(V)
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, V1, V2) -> U45^1(isNat(activate(V1)), activate(V2))
   U45^1(tt, V2) -> ISNATILIST(activate(V2))
   ISNATILIST(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   U45^1(tt, V2) -> ACTIVATE(V2)
   U44^1(tt, V1, V2) -> ISNAT(activate(V1))
   ISNAT(n__length(V1)) -> U11^1(isNatIListKind(activate(V1)), activate(V1))
   U11^1(tt, V1) -> U12^1(isNatIListKind(activate(V1)), activate(V1))
   U12^1(tt, V1) -> ISNATLIST(activate(V1))
   U12^1(tt, V1) -> ACTIVATE(V1)
   U11^1(tt, V1) -> ISNATILISTKIND(activate(V1))
   U11^1(tt, V1) -> ACTIVATE(V1)
   ISNAT(n__length(V1)) -> ISNATILISTKIND(activate(V1))
   ISNAT(n__length(V1)) -> ACTIVATE(V1)
   ISNAT(n__s(V1)) -> U21^1(isNatKind(activate(V1)), activate(V1))
   U21^1(tt, V1) -> U22^1(isNatKind(activate(V1)), activate(V1))
   U22^1(tt, V1) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNATKIND(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   U22^1(tt, V1) -> ACTIVATE(V1)
   U21^1(tt, V1) -> ISNATKIND(activate(V1))
   U21^1(tt, V1) -> ACTIVATE(V1)
   U44^1(tt, V1, V2) -> ACTIVATE(V1)
   U44^1(tt, V1, V2) -> ACTIVATE(V2)
   U43^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U43^1(tt, V1, V2) -> ACTIVATE(V2)
   U43^1(tt, V1, V2) -> ACTIVATE(V1)
   U42^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U42^1(tt, V1, V2) -> ACTIVATE(V2)
   U42^1(tt, V1, V2) -> ACTIVATE(V1)
   U41^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U41^1(tt, V1, V2) -> ACTIVATE(V1)
   U41^1(tt, V1, V2) -> ACTIVATE(V2)
   U105^1(tt, V2) -> ACTIVATE(V2)
   U104^1(tt, V1, V2) -> ISNAT(activate(V1))
   U104^1(tt, V1, V2) -> ACTIVATE(V1)
   U104^1(tt, V1, V2) -> ACTIVATE(V2)
   U103^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U103^1(tt, V1, V2) -> ACTIVATE(V2)
   U103^1(tt, V1, V2) -> ACTIVATE(V1)
   U102^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U102^1(tt, V1, V2) -> ACTIVATE(V2)
   U102^1(tt, V1, V2) -> ACTIVATE(V1)
   U101^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U101^1(tt, V1, V2) -> ACTIVATE(V1)
   U101^1(tt, V1, V2) -> ACTIVATE(V2)
   U95^1(tt, V2) -> ACTIVATE(V2)
   U94^1(tt, V1, V2) -> ISNAT(activate(V1))
   U94^1(tt, V1, V2) -> ACTIVATE(V1)
   U94^1(tt, V1, V2) -> ACTIVATE(V2)
   U93^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U93^1(tt, V1, V2) -> ACTIVATE(V2)
   U93^1(tt, V1, V2) -> ACTIVATE(V1)
   U92^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U92^1(tt, V1, V2) -> ACTIVATE(V2)
   U92^1(tt, V1, V2) -> ACTIVATE(V1)
   U91^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U91^1(tt, V1, V2) -> ACTIVATE(V1)
   U91^1(tt, V1, V2) -> ACTIVATE(V2)
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   U114^1(tt, L) -> ACTIVATE(L)
   U113^1(tt, L, N) -> ISNATKIND(activate(N))
   U113^1(tt, L, N) -> ACTIVATE(N)
   U113^1(tt, L, N) -> ACTIVATE(L)
   U112^1(tt, L, N) -> ISNAT(activate(N))
   U112^1(tt, L, N) -> ACTIVATE(N)
   U112^1(tt, L, N) -> ACTIVATE(L)
   U111^1(tt, L, N) -> ISNATILISTKIND(activate(L))
   U111^1(tt, L, N) -> ACTIVATE(L)
   U111^1(tt, L, N) -> ACTIVATE(N)
   U51^1(tt, V2) -> ACTIVATE(V2)
   U121^1(tt, IL) -> ACTIVATE(IL)
   TAKE(0, IL) -> ISNATILIST(IL)
   TAKE(s(M), cons(N, IL)) -> U131^1(isNatIList(activate(IL)), activate(IL), M, N)
   U131^1(tt, IL, M, N) -> U132^1(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132^1(tt, IL, M, N) -> U133^1(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133^1(tt, IL, M, N) -> U134^1(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134^1(tt, IL, M, N) -> U135^1(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135^1(tt, IL, M, N) -> U136^1(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136^1(tt, IL, M, N) -> ACTIVATE(N)
   U136^1(tt, IL, M, N) -> ACTIVATE(M)
   U136^1(tt, IL, M, N) -> ACTIVATE(IL)
   U135^1(tt, IL, M, N) -> ISNATKIND(activate(N))
   U135^1(tt, IL, M, N) -> ACTIVATE(N)
   U135^1(tt, IL, M, N) -> ACTIVATE(IL)
   U135^1(tt, IL, M, N) -> ACTIVATE(M)
   U134^1(tt, IL, M, N) -> ISNAT(activate(N))
   U134^1(tt, IL, M, N) -> ACTIVATE(N)
   U134^1(tt, IL, M, N) -> ACTIVATE(IL)
   U134^1(tt, IL, M, N) -> ACTIVATE(M)
   U133^1(tt, IL, M, N) -> ISNATKIND(activate(M))
   U133^1(tt, IL, M, N) -> ACTIVATE(M)
   U133^1(tt, IL, M, N) -> ACTIVATE(IL)
   U133^1(tt, IL, M, N) -> ACTIVATE(N)
   U132^1(tt, IL, M, N) -> ISNAT(activate(M))
   U132^1(tt, IL, M, N) -> ACTIVATE(M)
   U132^1(tt, IL, M, N) -> ACTIVATE(IL)
   U132^1(tt, IL, M, N) -> ACTIVATE(N)
   U131^1(tt, IL, M, N) -> ISNATILISTKIND(activate(IL))
   U131^1(tt, IL, M, N) -> ACTIVATE(IL)
   U131^1(tt, IL, M, N) -> ACTIVATE(M)
   U131^1(tt, IL, M, N) -> ACTIVATE(N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(activate(IL))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILISTKIND(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILISTKIND(n__cons(V1, V2)) -> ACTIVATE(V1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ISNATLIST(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATKIND(n__length(V1)) -> ACTIVATE(V1)
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATLIST(n__take(V1, V2)) -> U101^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   ISNATLIST(n__take(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATLIST(n__take(V1, V2)) -> ACTIVATE(V1)
   ISNATLIST(n__take(V1, V2)) -> ACTIVATE(V2)
   U32^1(tt, V) -> ACTIVATE(V)
   ISNATILISTKIND(n__cons(V1, V2)) -> ACTIVATE(V2)
   ISNATILISTKIND(n__take(V1, V2)) -> U61^1(isNatKind(activate(V1)), activate(V2))
   ISNATILISTKIND(n__take(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILISTKIND(n__take(V1, V2)) -> ACTIVATE(V1)
   ISNATILISTKIND(n__take(V1, V2)) -> ACTIVATE(V2)
   U61^1(tt, V2) -> ACTIVATE(V2)
   U31^1(tt, V) -> ACTIVATE(V)
   ISNATILIST(V) -> ACTIVATE(V)
   ISNATILIST(n__cons(V1, V2)) -> ISNATKIND(activate(V1))
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V1)
   ISNATILIST(n__cons(V1, V2)) -> ACTIVATE(V2)
   U45^1(tt, V2) -> ACTIVATE(V2)
   U44^1(tt, V1, V2) -> ISNAT(activate(V1))
   U12^1(tt, V1) -> ACTIVATE(V1)
   U11^1(tt, V1) -> ACTIVATE(V1)
   ISNAT(n__length(V1)) -> ACTIVATE(V1)
   U44^1(tt, V1, V2) -> ACTIVATE(V1)
   U44^1(tt, V1, V2) -> ACTIVATE(V2)
   U43^1(tt, V1, V2) -> ACTIVATE(V2)
   U43^1(tt, V1, V2) -> ACTIVATE(V1)
   U42^1(tt, V1, V2) -> ACTIVATE(V2)
   U42^1(tt, V1, V2) -> ACTIVATE(V1)
   U41^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U41^1(tt, V1, V2) -> ACTIVATE(V1)
   U41^1(tt, V1, V2) -> ACTIVATE(V2)
   U105^1(tt, V2) -> ACTIVATE(V2)
   U104^1(tt, V1, V2) -> ISNAT(activate(V1))
   U104^1(tt, V1, V2) -> ACTIVATE(V1)
   U104^1(tt, V1, V2) -> ACTIVATE(V2)
   U103^1(tt, V1, V2) -> ACTIVATE(V2)
   U103^1(tt, V1, V2) -> ACTIVATE(V1)
   U102^1(tt, V1, V2) -> ACTIVATE(V2)
   U102^1(tt, V1, V2) -> ACTIVATE(V1)
   U101^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U101^1(tt, V1, V2) -> ACTIVATE(V1)
   U101^1(tt, V1, V2) -> ACTIVATE(V2)
   U95^1(tt, V2) -> ACTIVATE(V2)
   U94^1(tt, V1, V2) -> ISNAT(activate(V1))
   U94^1(tt, V1, V2) -> ACTIVATE(V1)
   U94^1(tt, V1, V2) -> ACTIVATE(V2)
   U93^1(tt, V1, V2) -> ACTIVATE(V2)
   U93^1(tt, V1, V2) -> ACTIVATE(V1)
   U92^1(tt, V1, V2) -> ACTIVATE(V2)
   U92^1(tt, V1, V2) -> ACTIVATE(V1)
   U91^1(tt, V1, V2) -> ISNATKIND(activate(V1))
   U91^1(tt, V1, V2) -> ACTIVATE(V1)
   U91^1(tt, V1, V2) -> ACTIVATE(V2)
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   U114^1(tt, L) -> ACTIVATE(L)
   U113^1(tt, L, N) -> ISNATKIND(activate(N))
   U113^1(tt, L, N) -> ACTIVATE(N)
   U113^1(tt, L, N) -> ACTIVATE(L)
   U112^1(tt, L, N) -> ISNAT(activate(N))
   U112^1(tt, L, N) -> ACTIVATE(N)
   U112^1(tt, L, N) -> ACTIVATE(L)
   U111^1(tt, L, N) -> ACTIVATE(L)
   U111^1(tt, L, N) -> ACTIVATE(N)
   U51^1(tt, V2) -> ACTIVATE(V2)
   U121^1(tt, IL) -> ACTIVATE(IL)
   U134^1(tt, IL, M, N) -> U135^1(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U134^1(tt, IL, M, N) -> ISNAT(activate(N))
   U134^1(tt, IL, M, N) -> ACTIVATE(N)
   U134^1(tt, IL, M, N) -> ACTIVATE(IL)
   U134^1(tt, IL, M, N) -> ACTIVATE(M)
   U133^1(tt, IL, M, N) -> ISNATKIND(activate(M))
   U133^1(tt, IL, M, N) -> ACTIVATE(M)
   U133^1(tt, IL, M, N) -> ACTIVATE(IL)
   U133^1(tt, IL, M, N) -> ACTIVATE(N)
   U132^1(tt, IL, M, N) -> ISNAT(activate(M))
   U132^1(tt, IL, M, N) -> ACTIVATE(M)
   U132^1(tt, IL, M, N) -> ACTIVATE(IL)
   U132^1(tt, IL, M, N) -> ACTIVATE(N)
   U131^1(tt, IL, M, N) -> ACTIVATE(IL)
   U131^1(tt, IL, M, N) -> ACTIVATE(M)
   U131^1(tt, IL, M, N) -> ACTIVATE(N)
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVATE(x_1)) = x_1
   POL(ISNAT(x_1)) = x_1
   POL(ISNATILIST(x_1)) = 1 + x_1
   POL(ISNATILISTKIND(x_1)) = 1 + x_1
   POL(ISNATKIND(x_1)) = x_1
   POL(ISNATLIST(x_1)) = 1 + x_1
   POL(LENGTH(x_1)) = 1 + x_1
   POL(TAKE(x_1, x_2)) = 1 + x_1 + x_2
   POL(U101(x_1, x_2, x_3)) = 0
   POL(U101^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U102(x_1, x_2, x_3)) = 0
   POL(U102^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U103(x_1, x_2, x_3)) = 0
   POL(U103^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U104(x_1, x_2, x_3)) = 0
   POL(U104^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U105(x_1, x_2)) = 0
   POL(U105^1(x_1, x_2)) = 1 + x_2
   POL(U106(x_1)) = 0
   POL(U11(x_1, x_2)) = 0
   POL(U111(x_1, x_2, x_3)) = 1 + x_2
   POL(U111^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U112(x_1, x_2, x_3)) = 1 + x_2
   POL(U112^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U113(x_1, x_2, x_3)) = 1 + x_2
   POL(U113^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U114(x_1, x_2)) = 1 + x_2
   POL(U114^1(x_1, x_2)) = 1 + x_2
   POL(U11^1(x_1, x_2)) = 1 + x_2
   POL(U12(x_1, x_2)) = 0
   POL(U121(x_1, x_2)) = x_2
   POL(U121^1(x_1, x_2)) = 1 + x_2
   POL(U122(x_1)) = 0
   POL(U12^1(x_1, x_2)) = 1 + x_2
   POL(U13(x_1)) = 0
   POL(U131(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U131^1(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U132(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U132^1(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U133(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U133^1(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U134(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U134^1(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U135(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U135^1(x_1, x_2, x_3, x_4)) = x_2 + x_3 + x_4
   POL(U136(x_1, x_2, x_3, x_4)) = 1 + x_2 + x_3 + x_4
   POL(U136^1(x_1, x_2, x_3, x_4)) = x_2 + x_3 + x_4
   POL(U21(x_1, x_2)) = 0
   POL(U21^1(x_1, x_2)) = x_2
   POL(U22(x_1, x_2)) = 0
   POL(U22^1(x_1, x_2)) = x_2
   POL(U23(x_1)) = 0
   POL(U31(x_1, x_2)) = 0
   POL(U31^1(x_1, x_2)) = 1 + x_2
   POL(U32(x_1, x_2)) = 0
   POL(U32^1(x_1, x_2)) = 1 + x_2
   POL(U33(x_1)) = 0
   POL(U41(x_1, x_2, x_3)) = 0
   POL(U41^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U42(x_1, x_2, x_3)) = 0
   POL(U42^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U43(x_1, x_2, x_3)) = 0
   POL(U43^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U44(x_1, x_2, x_3)) = 0
   POL(U44^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U45(x_1, x_2)) = 0
   POL(U45^1(x_1, x_2)) = 1 + x_2
   POL(U46(x_1)) = 0
   POL(U51(x_1, x_2)) = 0
   POL(U51^1(x_1, x_2)) = 1 + x_2
   POL(U52(x_1)) = 0
   POL(U61(x_1, x_2)) = 0
   POL(U61^1(x_1, x_2)) = 1 + x_2
   POL(U62(x_1)) = 0
   POL(U71(x_1)) = 0
   POL(U81(x_1)) = 0
   POL(U91(x_1, x_2, x_3)) = 0
   POL(U91^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U92(x_1, x_2, x_3)) = 0
   POL(U92^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U93(x_1, x_2, x_3)) = 0
   POL(U93^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U94(x_1, x_2, x_3)) = 0
   POL(U94^1(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U95(x_1, x_2)) = 0
   POL(U95^1(x_1, x_2)) = 1 + x_2
   POL(U96(x_1)) = 0
   POL(activate(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatIListKind(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 1 + x_1
   POL(n__0) = 0
   POL(n__cons(x_1, x_2)) = x_1 + x_2
   POL(n__length(x_1)) = 1 + x_1
   POL(n__nil) = 0
   POL(n__s(x_1)) = x_1
   POL(n__take(x_1, x_2)) = 1 + x_1 + x_2
   POL(n__zeros) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   take(0, IL) -> U121(isNatIList(IL), IL)
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   TAKE(0, IL) -> U121^1(isNatIList(IL), IL)
   U121^1(tt, IL) -> ISNATILISTKIND(activate(IL))
   ISNATILISTKIND(n__cons(V1, V2)) -> U51^1(isNatKind(activate(V1)), activate(V2))
   U51^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   ISNATKIND(n__length(V1)) -> ISNATILISTKIND(activate(V1))
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   LENGTH(cons(N, L)) -> U111^1(isNatList(activate(L)), activate(L), N)
   U111^1(tt, L, N) -> U112^1(isNatIListKind(activate(L)), activate(L), activate(N))
   U112^1(tt, L, N) -> U113^1(isNat(activate(N)), activate(L), activate(N))
   U113^1(tt, L, N) -> U114^1(isNatKind(activate(N)), activate(L))
   U114^1(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, V1, V2) -> U95^1(isNat(activate(V1)), activate(V2))
   U95^1(tt, V2) -> ISNATLIST(activate(V2))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ISNATKIND(n__s(V1)) -> ISNATKIND(activate(V1))
   ISNATKIND(n__s(V1)) -> ACTIVATE(V1)
   U101^1(tt, V1, V2) -> U102^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102^1(tt, V1, V2) -> U103^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103^1(tt, V1, V2) -> U104^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104^1(tt, V1, V2) -> U105^1(isNat(activate(V1)), activate(V2))
   U105^1(tt, V2) -> ISNATILIST(activate(V2))
   ISNATILIST(V) -> U31^1(isNatIListKind(activate(V)), activate(V))
   U31^1(tt, V) -> U32^1(isNatIListKind(activate(V)), activate(V))
   U32^1(tt, V) -> ISNATLIST(activate(V))
   U31^1(tt, V) -> ISNATILISTKIND(activate(V))
   U61^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   ISNATILIST(V) -> ISNATILISTKIND(activate(V))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, V1, V2) -> U45^1(isNat(activate(V1)), activate(V2))
   U45^1(tt, V2) -> ISNATILIST(activate(V2))
   ISNAT(n__length(V1)) -> U11^1(isNatIListKind(activate(V1)), activate(V1))
   U11^1(tt, V1) -> U12^1(isNatIListKind(activate(V1)), activate(V1))
   U12^1(tt, V1) -> ISNATLIST(activate(V1))
   U11^1(tt, V1) -> ISNATILISTKIND(activate(V1))
   ISNAT(n__length(V1)) -> ISNATILISTKIND(activate(V1))
   ISNAT(n__s(V1)) -> U21^1(isNatKind(activate(V1)), activate(V1))
   U21^1(tt, V1) -> U22^1(isNatKind(activate(V1)), activate(V1))
   U22^1(tt, V1) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ISNATKIND(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   U22^1(tt, V1) -> ACTIVATE(V1)
   U21^1(tt, V1) -> ISNATKIND(activate(V1))
   U21^1(tt, V1) -> ACTIVATE(V1)
   U43^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U42^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U103^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U102^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U93^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U92^1(tt, V1, V2) -> ISNATILISTKIND(activate(V2))
   U111^1(tt, L, N) -> ISNATILISTKIND(activate(L))
   TAKE(0, IL) -> ISNATILIST(IL)
   TAKE(s(M), cons(N, IL)) -> U131^1(isNatIList(activate(IL)), activate(IL), M, N)
   U131^1(tt, IL, M, N) -> U132^1(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132^1(tt, IL, M, N) -> U133^1(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133^1(tt, IL, M, N) -> U134^1(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U135^1(tt, IL, M, N) -> U136^1(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136^1(tt, IL, M, N) -> ACTIVATE(N)
   U136^1(tt, IL, M, N) -> ACTIVATE(M)
   U136^1(tt, IL, M, N) -> ACTIVATE(IL)
   U135^1(tt, IL, M, N) -> ISNATKIND(activate(N))
   U135^1(tt, IL, M, N) -> ACTIVATE(N)
   U135^1(tt, IL, M, N) -> ACTIVATE(IL)
   U135^1(tt, IL, M, N) -> ACTIVATE(M)
   U131^1(tt, IL, M, N) -> ISNATILISTKIND(activate(IL))
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(activate(IL))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 7 SCCs with 50 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, V2) -> ISNATILISTKIND(activate(V2))
   ISNATILISTKIND(n__cons(V1, V2)) -> U51^1(isNatKind(activate(V1)), activate(V2))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U51^1(tt, V2) -> ISNATILISTKIND(activate(V2)) at position [0] we obtained the following new rules [LPAR04]:

   (U51^1(tt, n__zeros) -> ISNATILISTKIND(zeros),U51^1(tt, n__zeros) -> ISNATILISTKIND(zeros))
   (U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1))),U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1))))
   (U51^1(tt, n__0) -> ISNATILISTKIND(0),U51^1(tt, n__0) -> ISNATILISTKIND(0))
   (U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0))),U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0))))
   (U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0))),U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0))))
   (U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1)),U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1)))
   (U51^1(tt, n__nil) -> ISNATILISTKIND(nil),U51^1(tt, n__nil) -> ISNATILISTKIND(nil))
   (U51^1(tt, x0) -> ISNATILISTKIND(x0),U51^1(tt, x0) -> ISNATILISTKIND(x0))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(V1, V2)) -> U51^1(isNatKind(activate(V1)), activate(V2))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(zeros)
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   U51^1(tt, x0) -> ISNATILISTKIND(x0)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILISTKIND(n__cons(V1, V2)) -> U51^1(isNatKind(activate(V1)), activate(V2)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILISTKIND(n__cons(n__zeros, y1)) -> U51^1(isNatKind(zeros), activate(y1)),ISNATILISTKIND(n__cons(n__zeros, y1)) -> U51^1(isNatKind(zeros), activate(y1)))
   (ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1)),ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1)))
   (ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1)),ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1)))
   (ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1)),ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1)))
   (ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1)),ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1)))
   (ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1)),ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1)))
   (ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1)),ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1)))
   (ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1)),ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1)))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__zeros) -> ISNATILISTKIND(zeros)
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__zeros, y1)) -> U51^1(isNatKind(zeros), activate(y1))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U51^1(tt, n__zeros) -> ISNATILISTKIND(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros)),U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros)))
   (U51^1(tt, n__zeros) -> ISNATILISTKIND(n__zeros),U51^1(tt, n__zeros) -> ISNATILISTKIND(n__zeros))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__zeros, y1)) -> U51^1(isNatKind(zeros), activate(y1))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__zeros, y1)) -> U51^1(isNatKind(zeros), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILISTKIND(n__cons(n__zeros, y1)) -> U51^1(isNatKind(zeros), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0)),ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0)))
   (ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__zeros), activate(y0)),ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__zeros), activate(y0)))


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__zeros), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILISTKIND(n__cons(n__0, y1)) -> U51^1(isNatKind(0), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0)),ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0)))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   U51^1(tt, n__0) -> ISNATILISTKIND(0)
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U51^1(tt, n__0) -> ISNATILISTKIND(0) at position [0] we obtained the following new rules [LPAR04]:

   (U51^1(tt, n__0) -> ISNATILISTKIND(n__0),U51^1(tt, n__0) -> ISNATILISTKIND(n__0))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__0) -> ISNATILISTKIND(n__0)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__nil) -> ISNATILISTKIND(nil)
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U51^1(tt, n__nil) -> ISNATILISTKIND(nil) at position [0] we obtained the following new rules [LPAR04]:

   (U51^1(tt, n__nil) -> ISNATILISTKIND(n__nil),U51^1(tt, n__nil) -> ISNATILISTKIND(n__nil))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__nil) -> ISNATILISTKIND(n__nil)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILISTKIND(n__cons(n__nil, y1)) -> U51^1(isNatKind(nil), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILISTKIND(n__cons(n__nil, y0)) -> U51^1(isNatKind(n__nil), activate(y0)),ISNATILISTKIND(n__cons(n__nil, y0)) -> U51^1(isNatKind(n__nil), activate(y0)))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   ISNATILISTKIND(n__cons(n__nil, y0)) -> U51^1(isNatKind(n__nil), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros)),U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros)))
   (U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros)),U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros)))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(0, n__zeros)), activate(y0)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__cons(0, n__zeros)), activate(y0)),ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__cons(0, n__zeros)), activate(y0)))
   (ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(n__0, n__zeros)), activate(y0)),ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(n__0, n__zeros)), activate(y0)))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__cons(0, n__zeros)), activate(y0))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(n__0, n__zeros)), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(cons(n__0, n__zeros)), activate(y0)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__cons(n__0, n__zeros)), activate(y0)),ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__cons(n__0, n__zeros)), activate(y0)))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros))
   ISNATILISTKIND(n__cons(n__zeros, y0)) -> U51^1(isNatKind(n__cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U51^1(tt, n__zeros) -> ISNATILISTKIND(cons(n__0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros)),U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros)))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILISTKIND(n__cons(n__length(x0), y1)) -> U51^1(isNatKind(length(activate(x0))), activate(y1))
   ISNATILISTKIND(n__cons(n__s(x0), y1)) -> U51^1(isNatKind(s(activate(x0))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U51^1_2(x_1, x_2) ) = x_2 + 2
POL( ISNATILISTKIND_1(x_1) ) = x_1 + 2
POL( U101_3(x_1, ..., x_3) ) = 2
POL( U102_3(x_1, ..., x_3) ) = 2
POL( U103_3(x_1, ..., x_3) ) = 2
POL( U104_3(x_1, ..., x_3) ) = 2
POL( U105_2(x_1, x_2) ) = 2
POL( U11_2(x_1, x_2) ) = 2
POL( U111_3(x_1, ..., x_3) ) = 2
POL( U112_3(x_1, ..., x_3) ) = 2
POL( U113_3(x_1, ..., x_3) ) = 2
POL( U114_2(x_1, x_2) ) = 2
POL( U12_2(x_1, x_2) ) = 2
POL( U131_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U132_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U133_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U134_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U135_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U136_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U21_2(x_1, x_2) ) = 2
POL( U22_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( U32_2(x_1, x_2) ) = max{0, -2}
POL( U41_3(x_1, ..., x_3) ) = 0
POL( U42_3(x_1, ..., x_3) ) = max{0, -2}
POL( U43_3(x_1, ..., x_3) ) = max{0, -2}
POL( U44_3(x_1, ..., x_3) ) = max{0, -2}
POL( U45_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = 2
POL( U92_3(x_1, ..., x_3) ) = 1
POL( U93_3(x_1, ..., x_3) ) = 1
POL( U94_3(x_1, ..., x_3) ) = max{0, -2}
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = x_2
POL( isNatKind_1(x_1) ) = 2x_1 + 2
POL( isNatIListKind_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 2
POL( U106_1(x_1) ) = 2
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 2
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = 1
POL( U33_1(x_1) ) = 0
POL( U46_1(x_1) ) = 0
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = 0
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = 2
POL( U96_1(x_1) ) = 0
POL( n__take_2(x_1, x_2) ) = x_2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2
POL( n__s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = x_1 + 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILISTKIND(n__cons(n__take(x0, x1), y1)) -> U51^1(isNatKind(take(activate(x0), activate(x1))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U51^1_2(x_1, x_2) ) = 2x_2 + 2
POL( ISNATILISTKIND_1(x_1) ) = 2x_1 + 2
POL( U101_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U102_3(x_1, ..., x_3) ) = 2
POL( U103_3(x_1, ..., x_3) ) = 2
POL( U104_3(x_1, ..., x_3) ) = 2
POL( U105_2(x_1, x_2) ) = 2
POL( U11_2(x_1, x_2) ) = 2x_2 + 2
POL( U111_3(x_1, ..., x_3) ) = x_3 + 1
POL( U112_3(x_1, ..., x_3) ) = 1
POL( U113_3(x_1, ..., x_3) ) = 1
POL( U114_2(x_1, x_2) ) = 1
POL( U12_2(x_1, x_2) ) = 2
POL( U131_4(x_1, ..., x_4) ) = 2x_2 + 2x_4 + 2
POL( U132_4(x_1, ..., x_4) ) = 2x_2 + 2x_4 + 2
POL( U133_4(x_1, ..., x_4) ) = 2x_2 + 2x_4 + 2
POL( U134_4(x_1, ..., x_4) ) = 2x_2 + 2x_4 + 2
POL( U135_4(x_1, ..., x_4) ) = 2x_2 + 2x_4 + 2
POL( U136_4(x_1, ..., x_4) ) = 2x_2 + 2x_4 + 2
POL( U21_2(x_1, x_2) ) = 2
POL( U22_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = 2
POL( U41_3(x_1, ..., x_3) ) = max{0, -2}
POL( U42_3(x_1, ..., x_3) ) = max{0, -2}
POL( U43_3(x_1, ..., x_3) ) = max{0, -2}
POL( U44_3(x_1, ..., x_3) ) = 0
POL( U45_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U92_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U93_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U94_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( length_1(x_1) ) = 2x_1 + 1
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = 2x_2 + 2
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2x_1 + 1
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2x_1 + 2
POL( U122_1(x_1) ) = 0
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = 2
POL( U33_1(x_1) ) = 2
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = 0
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = 0
POL( n__take_2(x_1, x_2) ) = 2x_2 + 2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2x_1 + 1
POL( n__s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( U121_2(x_1, x_2) ) = 2
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U51^1(tt, n__length(x0)) -> ISNATILISTKIND(length(activate(x0)))
   U51^1(tt, n__s(x0)) -> ISNATILISTKIND(s(activate(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U51^1_2(x_1, x_2) ) = 2x_2 + 2
POL( ISNATILISTKIND_1(x_1) ) = x_1 + 2
POL( U101_3(x_1, ..., x_3) ) = 2
POL( U102_3(x_1, ..., x_3) ) = 2
POL( U103_3(x_1, ..., x_3) ) = 2
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 2
POL( U111_3(x_1, ..., x_3) ) = 2
POL( U112_3(x_1, ..., x_3) ) = 2
POL( U113_3(x_1, ..., x_3) ) = 2
POL( U114_2(x_1, x_2) ) = 2
POL( U12_2(x_1, x_2) ) = 2
POL( U131_4(x_1, ..., x_4) ) = max{0, -2}
POL( U132_4(x_1, ..., x_4) ) = max{0, -2}
POL( U133_4(x_1, ..., x_4) ) = max{0, -2}
POL( U134_4(x_1, ..., x_4) ) = max{0, -2}
POL( U135_4(x_1, ..., x_4) ) = max{0, -2}
POL( U136_4(x_1, ..., x_4) ) = 0
POL( U21_2(x_1, x_2) ) = 2
POL( U22_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = 2
POL( U41_3(x_1, ..., x_3) ) = max{0, -2}
POL( U42_3(x_1, ..., x_3) ) = max{0, -2}
POL( U43_3(x_1, ..., x_3) ) = 0
POL( U44_3(x_1, ..., x_3) ) = max{0, -2}
POL( U45_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = 2
POL( U92_3(x_1, ..., x_3) ) = 1
POL( U93_3(x_1, ..., x_3) ) = 1
POL( U94_3(x_1, ..., x_3) ) = 1
POL( U95_2(x_1, x_2) ) = 1
POL( cons_2(x_1, x_2) ) = 2x_2
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = 0
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = max{0, 2x_1 - 2}
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = 2
POL( U23_1(x_1) ) = 2
POL( U33_1(x_1) ) = max{0, -2}
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = max{0, -2}
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2
POL( n__s_1(x_1) ) = 2
POL( n__cons_2(x_1, x_2) ) = 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( U121_2(x_1, x_2) ) = 0
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   0 -> n__0
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U51^1(tt, n__take(x0, x1)) -> ISNATILISTKIND(take(activate(x0), activate(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(U51^1(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(ISNATILISTKIND(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(isNatKind(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(n__0) =  	[[0A]]
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__nil) =  	[[2A]]
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>

   <<<
 POL(U121(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U131(x_1, x_2, x_3, x_4)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U71(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(isNatIListKind(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(U81(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U111(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(isNatList(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U91(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U51(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U52(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U61(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U62(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U92(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U93(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U94(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U95(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U12(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U13(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U101(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U102(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U103(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U104(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U105(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U21(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U22(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U23(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U106(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U32(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U33(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(U42(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(U43(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U44(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U45(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U46(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U96(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U112(x_1, x_2, x_3)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U113(x_1, x_2, x_3)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U114(x_1, x_2)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U122(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U132(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U133(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U134(x_1, x_2, x_3, x_4)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U135(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U136(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   0 -> n__0
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   isNatIList(n__zeros) -> tt
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILISTKIND(n__cons(n__cons(x0, x1), y1)) -> U51^1(isNatKind(cons(activate(x0), x1)), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(U51^1(x_1, x_2)) =  	[[0]] 	 +  	[[0, 0]] 	* 	x_1 	 +  	[[1, 0]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[0], [0]]
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[0], [1]] 	 +  	[[0, 1], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(ISNATILISTKIND(x_1)) =  	[[0]] 	 +  	[[1, 0]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[0], [1]] 	 +  	[[0, 1], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(activate(x_1)) =  	[[0], [0]] 	 +  	[[1, 0], [0, 1]] 	* 	x_1
>>>

   <<<
 POL(isNatKind(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(n__zeros) =  	[[0], [1]]
>>>

   <<<
 POL(0) =  	[[0], [0]]
>>>

   <<<
 POL(n__0) =  	[[0], [0]]
>>>

   <<<
 POL(zeros) =  	[[0], [1]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(n__length(x_1)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(n__nil) =  	[[0], [0]]
>>>

   <<<
 POL(nil) =  	[[0], [0]]
>>>

   <<<
 POL(U71(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(isNatIListKind(x_1)) =  	[[0], [0]] 	 +  	[[1, 1], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U81(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U111(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(isNatList(x_1)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U91(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U51(x_1, x_2)) =  	[[1], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U52(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U61(x_1, x_2)) =  	[[1], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U62(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U92(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U93(x_1, x_2, x_3)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U94(x_1, x_2, x_3)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U95(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U12(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U13(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U101(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U102(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U103(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U104(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U105(x_1, x_2)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U21(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U22(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U23(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U106(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[1], [1]] 	 +  	[[0, 1], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[1], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U32(x_1, x_2)) =  	[[1], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U33(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U42(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U43(x_1, x_2, x_3)) =  	[[1], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U44(x_1, x_2, x_3)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U45(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U46(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U96(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U112(x_1, x_2, x_3)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U113(x_1, x_2, x_3)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3
>>>

   <<<
 POL(U114(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U121(x_1, x_2)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[0, 0], [0, 0]] 	* 	x_2
>>>

   <<<
 POL(U122(x_1)) =  	[[0], [0]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1
>>>

   <<<
 POL(U131(x_1, x_2, x_3, x_4)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3 	 +  	[[0, 1], [0, 0]] 	* 	x_4
>>>

   <<<
 POL(U132(x_1, x_2, x_3, x_4)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3 	 +  	[[0, 1], [0, 0]] 	* 	x_4
>>>

   <<<
 POL(U133(x_1, x_2, x_3, x_4)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3 	 +  	[[0, 1], [0, 0]] 	* 	x_4
>>>

   <<<
 POL(U134(x_1, x_2, x_3, x_4)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3 	 +  	[[0, 1], [0, 0]] 	* 	x_4
>>>

   <<<
 POL(U135(x_1, x_2, x_3, x_4)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3 	 +  	[[0, 1], [0, 0]] 	* 	x_4
>>>

   <<<
 POL(U136(x_1, x_2, x_3, x_4)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 0]] 	* 	x_1 	 +  	[[1, 0], [0, 0]] 	* 	x_2 	 +  	[[0, 0], [0, 0]] 	* 	x_3 	 +  	[[0, 1], [0, 0]] 	* 	x_4
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   cons(X1, X2) -> n__cons(X1, X2)
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   0 -> n__0
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   take(0, IL) -> U121(isNatIList(IL), IL)
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(tt, n__cons(x0, x1)) -> ISNATILISTKIND(cons(activate(x0), x1))
   U51^1(tt, x0) -> ISNATILISTKIND(x0)
   ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(0, n__zeros))
   ISNATILISTKIND(n__cons(n__0, y0)) -> U51^1(isNatKind(n__0), activate(y0))
   U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U51^1(isNatKind(n__0), activate(n__zeros)) evaluates to  t =U51^1(isNatKind(n__0), activate(n__zeros))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U51^1(isNatKind(n__0), activate(n__zeros)) -> U51^1(isNatKind(n__0), n__zeros)
with rule activate(X) -> X at position [1] and matcher [X / n__zeros]

U51^1(isNatKind(n__0), n__zeros) -> U51^1(tt, n__zeros)
with rule isNatKind(n__0) -> tt at position [0] and matcher [ ]

U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros))
with rule U51^1(tt, n__zeros) -> ISNATILISTKIND(n__cons(n__0, n__zeros)) at position [] and matcher [ ]

ISNATILISTKIND(n__cons(n__0, n__zeros)) -> U51^1(isNatKind(n__0), activate(n__zeros))
with rule ISNATILISTKIND(n__cons(x0, y1)) -> U51^1(isNatKind(x0), activate(y1))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(59)
NO

----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, V1, V2) -> U95^1(isNat(activate(V1)), activate(V2))
   U95^1(tt, V2) -> ISNATLIST(activate(V2))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U94^1(tt, V1, V2) -> U95^1(isNat(activate(V1)), activate(V2)) at position [0] we obtained the following new rules [LPAR04]:

   (U94^1(tt, n__zeros, y1) -> U95^1(isNat(zeros), activate(y1)),U94^1(tt, n__zeros, y1) -> U95^1(isNat(zeros), activate(y1)))
   (U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1)),U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1)))
   (U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1)),U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1)))
   (U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1)),U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1)))
   (U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1)),U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1)))
   (U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1)),U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1)))
   (U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1)),U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1)))
   (U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1)),U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1)))


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U95^1(tt, V2) -> ISNATLIST(activate(V2))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__zeros, y1) -> U95^1(isNat(zeros), activate(y1))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U95^1(tt, V2) -> ISNATLIST(activate(V2)) at position [0] we obtained the following new rules [LPAR04]:

   (U95^1(tt, n__zeros) -> ISNATLIST(zeros),U95^1(tt, n__zeros) -> ISNATLIST(zeros))
   (U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1))),U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1))))
   (U95^1(tt, n__0) -> ISNATLIST(0),U95^1(tt, n__0) -> ISNATLIST(0))
   (U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0))),U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0))))
   (U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0))),U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0))))
   (U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1)),U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1)))
   (U95^1(tt, n__nil) -> ISNATLIST(nil),U95^1(tt, n__nil) -> ISNATLIST(nil))
   (U95^1(tt, x0) -> ISNATLIST(x0),U95^1(tt, x0) -> ISNATLIST(x0))


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__zeros, y1) -> U95^1(isNat(zeros), activate(y1))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U95^1(tt, n__zeros) -> ISNATLIST(zeros)
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   U95^1(tt, n__0) -> ISNATLIST(0)
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U94^1(tt, n__zeros, y1) -> U95^1(isNat(zeros), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0)),U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0)))
   (U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__zeros), activate(y0)),U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__zeros), activate(y0)))


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U95^1(tt, n__zeros) -> ISNATLIST(zeros)
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   U95^1(tt, n__0) -> ISNATLIST(0)
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__zeros), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__zeros) -> ISNATLIST(zeros)
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   U95^1(tt, n__0) -> ISNATLIST(0)
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U95^1(tt, n__zeros) -> ISNATLIST(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros)),U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros)))
   (U95^1(tt, n__zeros) -> ISNATLIST(n__zeros),U95^1(tt, n__zeros) -> ISNATLIST(n__zeros))


----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   U95^1(tt, n__0) -> ISNATLIST(0)
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__0) -> ISNATLIST(0)
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U95^1(tt, n__0) -> ISNATLIST(0) at position [0] we obtained the following new rules [LPAR04]:

   (U95^1(tt, n__0) -> ISNATLIST(n__0),U95^1(tt, n__0) -> ISNATLIST(n__0))


----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U95^1(tt, n__0) -> ISNATLIST(n__0)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(75) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, n__nil) -> ISNATLIST(nil)
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U95^1(tt, n__nil) -> ISNATLIST(nil) at position [0] we obtained the following new rules [LPAR04]:

   (U95^1(tt, n__nil) -> ISNATLIST(n__nil),U95^1(tt, n__nil) -> ISNATLIST(n__nil))


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U95^1(tt, n__nil) -> ISNATLIST(n__nil)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros))
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U95^1(tt, n__zeros) -> ISNATLIST(cons(0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros)),U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros)))
   (U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros)),U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros)))


----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U94^1(tt, n__0, y1) -> U95^1(isNat(0), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0)),U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0)))


----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U94^1(tt, n__nil, y1) -> U95^1(isNat(nil), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (U94^1(tt, n__nil, y0) -> U95^1(isNat(n__nil), activate(y0)),U94^1(tt, n__nil, y0) -> U95^1(isNat(n__nil), activate(y0)))


----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))
   U94^1(tt, n__nil, y0) -> U95^1(isNat(n__nil), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(87) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(88)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(89) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U95^1(tt, n__zeros) -> ISNATLIST(cons(n__0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros)),U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros)))


----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(91) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(0, n__zeros)), activate(y0)) at position [0] we obtained the following new rules [LPAR04]:

   (U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__cons(0, n__zeros)), activate(y0)),U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__cons(0, n__zeros)), activate(y0)))
   (U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(n__0, n__zeros)), activate(y0)),U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(n__0, n__zeros)), activate(y0)))


----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__cons(0, n__zeros)), activate(y0))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(94)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(95) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U94^1(tt, n__zeros, y0) -> U95^1(isNat(cons(n__0, n__zeros)), activate(y0)) at position [0] we obtained the following new rules [LPAR04]:

   (U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__cons(n__0, n__zeros)), activate(y0)),U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__cons(n__0, n__zeros)), activate(y0)))


----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))
   U94^1(tt, n__zeros, y0) -> U95^1(isNat(n__cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(99) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U95^1(tt, n__length(x0)) -> ISNATLIST(length(activate(x0)))
   U95^1(tt, n__s(x0)) -> ISNATLIST(s(activate(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U91^1_3(x_1, ..., x_3) ) = 2x_3
POL( U92^1_3(x_1, ..., x_3) ) = 2x_3
POL( U93^1_3(x_1, ..., x_3) ) = 2x_3
POL( U94^1_3(x_1, ..., x_3) ) = 2x_3
POL( U95^1_2(x_1, x_2) ) = 2x_2
POL( ISNATLIST_1(x_1) ) = x_1
POL( U101_3(x_1, ..., x_3) ) = max{0, -2}
POL( U102_3(x_1, ..., x_3) ) = max{0, -2}
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 2
POL( U111_3(x_1, ..., x_3) ) = 1
POL( U112_3(x_1, ..., x_3) ) = 1
POL( U113_3(x_1, ..., x_3) ) = 1
POL( U114_2(x_1, x_2) ) = 1
POL( U12_2(x_1, x_2) ) = 1
POL( U131_4(x_1, ..., x_4) ) = max{0, -2}
POL( U132_4(x_1, ..., x_4) ) = 0
POL( U133_4(x_1, ..., x_4) ) = max{0, -2}
POL( U134_4(x_1, ..., x_4) ) = 0
POL( U135_4(x_1, ..., x_4) ) = 0
POL( U136_4(x_1, ..., x_4) ) = 0
POL( U21_2(x_1, x_2) ) = max{0, -2}
POL( U22_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = 2
POL( U41_3(x_1, ..., x_3) ) = max{0, -2}
POL( U42_3(x_1, ..., x_3) ) = max{0, -2}
POL( U43_3(x_1, ..., x_3) ) = max{0, -2}
POL( U44_3(x_1, ..., x_3) ) = max{0, -2}
POL( U45_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = 2
POL( U92_3(x_1, ..., x_3) ) = 2
POL( U93_3(x_1, ..., x_3) ) = 2
POL( U94_3(x_1, ..., x_3) ) = 2
POL( U95_2(x_1, x_2) ) = 2
POL( cons_2(x_1, x_2) ) = 2x_2
POL( length_1(x_1) ) = 1
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( isNatKind_1(x_1) ) = 2x_1
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = max{0, -2}
POL( U33_1(x_1) ) = max{0, 2x_1 - 2}
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_1(x_1) ) = 2
POL( U81_1(x_1) ) = 0
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = max{0, -2}
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 1
POL( n__s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U94^1(tt, n__take(x0, x1), y1) -> U95^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U94^1(tt, n__length(x0), y1) -> U95^1(isNat(length(activate(x0))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U91^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U92^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U93^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U94^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U95^1_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( ISNATLIST_1(x_1) ) = 2x_1
POL( U101_3(x_1, ..., x_3) ) = max{0, -2}
POL( U102_3(x_1, ..., x_3) ) = max{0, -2}
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( U111_3(x_1, ..., x_3) ) = max{0, -2}
POL( U112_3(x_1, ..., x_3) ) = max{0, -2}
POL( U113_3(x_1, ..., x_3) ) = max{0, -2}
POL( U114_2(x_1, x_2) ) = 0
POL( U12_2(x_1, x_2) ) = max{0, -2}
POL( U131_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U132_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U133_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U134_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U135_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U136_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U21_2(x_1, x_2) ) = max{0, -2}
POL( U22_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = 0
POL( U32_2(x_1, x_2) ) = max{0, -2}
POL( U41_3(x_1, ..., x_3) ) = 2
POL( U42_3(x_1, ..., x_3) ) = 2
POL( U43_3(x_1, ..., x_3) ) = 2
POL( U44_3(x_1, ..., x_3) ) = 1
POL( U45_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = max{0, -2}
POL( U92_3(x_1, ..., x_3) ) = max{0, -2}
POL( U93_3(x_1, ..., x_3) ) = max{0, -2}
POL( U94_3(x_1, ..., x_3) ) = max{0, -2}
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( length_1(x_1) ) = 1
POL( s_1(x_1) ) = 0
POL( take_2(x_1, x_2) ) = x_2 + 2
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = max{0, x_1 - 1}
POL( U106_1(x_1) ) = 0
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( U122_1(x_1) ) = 0
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = max{0, -2}
POL( U33_1(x_1) ) = max{0, -2}
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = 0
POL( U62_1(x_1) ) = 0
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = x_2 + 2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 1
POL( n__s_1(x_1) ) = 0
POL( n__cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   s(X) -> n__s(X)
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(103) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U94^1(tt, n__s(x0), y1) -> U95^1(isNat(s(activate(x0))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U91^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U92^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U93^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U94^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U95^1_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( ISNATLIST_1(x_1) ) = 2x_1 + 2
POL( U101_3(x_1, ..., x_3) ) = max{0, -2}
POL( U102_3(x_1, ..., x_3) ) = max{0, -2}
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( U111_3(x_1, ..., x_3) ) = 2
POL( U112_3(x_1, ..., x_3) ) = 2
POL( U113_3(x_1, ..., x_3) ) = 2
POL( U114_2(x_1, x_2) ) = 2
POL( U12_2(x_1, x_2) ) = max{0, -2}
POL( U131_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( U132_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( U133_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( U134_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( U135_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( U136_4(x_1, ..., x_4) ) = x_2 + 2x_4
POL( U21_2(x_1, x_2) ) = 1
POL( U22_2(x_1, x_2) ) = 0
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = 2
POL( U41_3(x_1, ..., x_3) ) = 1
POL( U42_3(x_1, ..., x_3) ) = 1
POL( U43_3(x_1, ..., x_3) ) = 1
POL( U44_3(x_1, ..., x_3) ) = 1
POL( U45_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = max{0, -2}
POL( U92_3(x_1, ..., x_3) ) = 0
POL( U93_3(x_1, ..., x_3) ) = max{0, -2}
POL( U94_3(x_1, ..., x_3) ) = max{0, -2}
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 2
POL( take_2(x_1, x_2) ) = x_2
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = max{0, x_1 - 1}
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 2
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = 0
POL( U33_1(x_1) ) = max{0, -2}
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = x_2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2
POL( n__s_1(x_1) ) = 2
POL( n__cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   s(X) -> n__s(X)
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   length(nil) -> 0
   length(X) -> n__length(X)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(105) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U95^1(tt, n__take(x0, x1)) -> ISNATLIST(take(activate(x0), activate(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(U95^1(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(ISNATLIST(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U91^1(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(isNatKind(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U92^1(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(U93^1(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(isNatIListKind(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U94^1(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(n__0) =  	[[0A]]
>>>

   <<<
 POL(isNat(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__nil) =  	[[2A]]
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>

   <<<
 POL(U121(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U131(x_1, x_2, x_3, x_4)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U71(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U81(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U51(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U61(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U21(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U111(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(isNatList(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U91(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U52(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U62(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U92(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U93(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U94(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U95(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U12(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U13(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U101(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U102(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U103(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U104(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U105(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U22(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U23(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U106(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U32(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U33(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U42(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U43(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U44(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U45(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U46(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U96(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U112(x_1, x_2, x_3)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U113(x_1, x_2, x_3)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U114(x_1, x_2)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U122(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U132(x_1, x_2, x_3, x_4)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U133(x_1, x_2, x_3, x_4)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U134(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U135(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>

   <<<
 POL(U136(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[2A]] 	* 	x_3 	 +  	[[0A]] 	* 	x_4
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   isNatIList(n__zeros) -> tt
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(V1, V2)) -> U91^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U91^1(tt, V1, V2) -> U92^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92^1(tt, V1, V2) -> U93^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93^1(tt, V1, V2) -> U94^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U95^1(tt, n__cons(x0, x1)) -> ISNATLIST(cons(activate(x0), x1))
   U95^1(tt, x0) -> ISNATLIST(x0)
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(0, n__zeros))
   U95^1(tt, n__zeros) -> ISNATLIST(n__cons(n__0, n__zeros))
   U94^1(tt, n__cons(x0, x1), y1) -> U95^1(isNat(cons(activate(x0), x1)), activate(y1))
   U94^1(tt, x0, y1) -> U95^1(isNat(x0), activate(y1))
   U94^1(tt, n__0, y0) -> U95^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> U111^1(isNatList(activate(L)), activate(L), N)
   U111^1(tt, L, N) -> U112^1(isNatIListKind(activate(L)), activate(L), activate(N))
   U112^1(tt, L, N) -> U113^1(isNat(activate(N)), activate(L), activate(N))
   U113^1(tt, L, N) -> U114^1(isNatKind(activate(N)), activate(L))
   U114^1(tt, L) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(108) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U111^1(tt, L, N) -> U112^1(isNatIListKind(activate(L)), activate(L), activate(N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( LENGTH_1(x_1) ) = 2x_1 + 1
POL( U111^1_3(x_1, ..., x_3) ) = x_1 + 2x_2 + 1
POL( U112^1_3(x_1, ..., x_3) ) = 2x_2 + 1
POL( U113^1_3(x_1, ..., x_3) ) = 2x_2 + 1
POL( U114^1_2(x_1, x_2) ) = 2x_2 + 1
POL( U101_3(x_1, ..., x_3) ) = 2x_2
POL( U102_3(x_1, ..., x_3) ) = 2x_2
POL( U103_3(x_1, ..., x_3) ) = 2x_2
POL( U104_3(x_1, ..., x_3) ) = 2x_2
POL( U105_2(x_1, x_2) ) = x_1
POL( U11_2(x_1, x_2) ) = 2x_2
POL( U111_3(x_1, ..., x_3) ) = 2x_2
POL( U112_3(x_1, ..., x_3) ) = 2x_2
POL( U113_3(x_1, ..., x_3) ) = 2x_2
POL( U114_2(x_1, x_2) ) = 2x_2
POL( U12_2(x_1, x_2) ) = 2x_2
POL( U131_4(x_1, ..., x_4) ) = 2x_3
POL( U132_4(x_1, ..., x_4) ) = 2x_3
POL( U133_4(x_1, ..., x_4) ) = 2x_3
POL( U134_4(x_1, ..., x_4) ) = 2x_3
POL( U135_4(x_1, ..., x_4) ) = 2x_3
POL( U136_4(x_1, ..., x_4) ) = 2x_3
POL( U21_2(x_1, x_2) ) = 2x_2
POL( U22_2(x_1, x_2) ) = 2x_2
POL( U31_2(x_1, x_2) ) = 1
POL( U32_2(x_1, x_2) ) = 1
POL( U41_3(x_1, ..., x_3) ) = 1
POL( U42_3(x_1, ..., x_3) ) = 1
POL( U43_3(x_1, ..., x_3) ) = 1
POL( U44_3(x_1, ..., x_3) ) = 1
POL( U45_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = 2
POL( U61_2(x_1, x_2) ) = 2
POL( U91_3(x_1, ..., x_3) ) = 2x_3
POL( U92_3(x_1, ..., x_3) ) = 2x_3
POL( U93_3(x_1, ..., x_3) ) = 2x_3
POL( U94_3(x_1, ..., x_3) ) = 2x_3
POL( U95_2(x_1, x_2) ) = 2x_2
POL( cons_2(x_1, x_2) ) = 2x_2
POL( isNatList_1(x_1) ) = 2x_1
POL( length_1(x_1) ) = x_1
POL( s_1(x_1) ) = 2x_1
POL( take_2(x_1, x_2) ) = x_1
POL( isNatIListKind_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2x_1
POL( isNatKind_1(x_1) ) = 2
POL( U106_1(x_1) ) = 1
POL( isNatIList_1(x_1) ) = 1
POL( U122_1(x_1) ) = 1
POL( U23_1(x_1) ) = x_1
POL( U46_1(x_1) ) = 1
POL( U52_1(x_1) ) = 1
POL( U62_1(x_1) ) = 2
POL( U71_1(x_1) ) = 1
POL( U81_1(x_1) ) = 1
POL( n__take_2(x_1, x_2) ) = x_1
POL( U13_1(x_1) ) = x_1
POL( U33_1(x_1) ) = 1
POL( U96_1(x_1) ) = x_1
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 1
POL( 0 ) = 1
POL( n__length_1(x_1) ) = x_1
POL( n__s_1(x_1) ) = 2x_1
POL( n__cons_2(x_1, x_2) ) = 2x_2
POL( n__nil ) = 1
POL( nil ) = 1
POL( tt ) = 1
POL( U121_2(x_1, x_2) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   take(0, IL) -> U121(isNatIList(IL), IL)
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(109)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> U111^1(isNatList(activate(L)), activate(L), N)
   U112^1(tt, L, N) -> U113^1(isNat(activate(N)), activate(L), activate(N))
   U113^1(tt, L, N) -> U114^1(isNatKind(activate(N)), activate(L))
   U114^1(tt, L) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(110) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 4 less nodes.
----------------------------------------

(111)
TRUE

----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, V1, V2) -> U45^1(isNat(activate(V1)), activate(V2))
   U45^1(tt, V2) -> ISNATILIST(activate(V2))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(113) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U44^1(tt, V1, V2) -> U45^1(isNat(activate(V1)), activate(V2)) at position [0] we obtained the following new rules [LPAR04]:

   (U44^1(tt, n__zeros, y1) -> U45^1(isNat(zeros), activate(y1)),U44^1(tt, n__zeros, y1) -> U45^1(isNat(zeros), activate(y1)))
   (U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1)),U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1)))
   (U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1)),U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1)))
   (U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1)),U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1)))
   (U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1)),U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1)))
   (U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1)),U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1)))
   (U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1)),U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1)))
   (U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1)),U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1)))


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, V2) -> ISNATILIST(activate(V2))
   U44^1(tt, n__zeros, y1) -> U45^1(isNat(zeros), activate(y1))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(115) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U45^1(tt, V2) -> ISNATILIST(activate(V2)) at position [0] we obtained the following new rules [LPAR04]:

   (U45^1(tt, n__zeros) -> ISNATILIST(zeros),U45^1(tt, n__zeros) -> ISNATILIST(zeros))
   (U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1))),U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1))))
   (U45^1(tt, n__0) -> ISNATILIST(0),U45^1(tt, n__0) -> ISNATILIST(0))
   (U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0))),U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0))))
   (U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0))),U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0))))
   (U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1)),U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1)))
   (U45^1(tt, n__nil) -> ISNATILIST(nil),U45^1(tt, n__nil) -> ISNATILIST(nil))
   (U45^1(tt, x0) -> ISNATILIST(x0),U45^1(tt, x0) -> ISNATILIST(x0))


----------------------------------------

(116)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__zeros, y1) -> U45^1(isNat(zeros), activate(y1))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U45^1(tt, n__zeros) -> ISNATILIST(zeros)
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   U45^1(tt, n__0) -> ISNATILIST(0)
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(117) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U44^1(tt, n__zeros, y1) -> U45^1(isNat(zeros), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0)),U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0)))
   (U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__zeros), activate(y0)),U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__zeros), activate(y0)))


----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U45^1(tt, n__zeros) -> ISNATILIST(zeros)
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   U45^1(tt, n__0) -> ISNATILIST(0)
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__zeros), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(119) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(120)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__zeros) -> ISNATILIST(zeros)
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   U45^1(tt, n__0) -> ISNATILIST(0)
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(121) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U45^1(tt, n__zeros) -> ISNATILIST(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros)),U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros)))
   (U45^1(tt, n__zeros) -> ISNATILIST(n__zeros),U45^1(tt, n__zeros) -> ISNATILIST(n__zeros))


----------------------------------------

(122)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   U45^1(tt, n__0) -> ISNATILIST(0)
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__zeros)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(123) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__0) -> ISNATILIST(0)
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(125) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U45^1(tt, n__0) -> ISNATILIST(0) at position [0] we obtained the following new rules [LPAR04]:

   (U45^1(tt, n__0) -> ISNATILIST(n__0),U45^1(tt, n__0) -> ISNATILIST(n__0))


----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U45^1(tt, n__0) -> ISNATILIST(n__0)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(127) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, n__nil) -> ISNATILIST(nil)
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(129) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U45^1(tt, n__nil) -> ISNATILIST(nil) at position [0] we obtained the following new rules [LPAR04]:

   (U45^1(tt, n__nil) -> ISNATILIST(n__nil),U45^1(tt, n__nil) -> ISNATILIST(n__nil))


----------------------------------------

(130)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U45^1(tt, n__nil) -> ISNATILIST(n__nil)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(131) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(132)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(133) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U44^1(tt, n__0, y1) -> U45^1(isNat(0), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0)),U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0)))


----------------------------------------

(134)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(135) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U45^1(tt, n__zeros) -> ISNATILIST(cons(0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros)),U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros)))
   (U45^1(tt, n__zeros) -> ISNATILIST(cons(n__0, n__zeros)),U45^1(tt, n__zeros) -> ISNATILIST(cons(n__0, n__zeros)))


----------------------------------------

(136)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(137) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U44^1(tt, n__nil, y1) -> U45^1(isNat(nil), activate(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (U44^1(tt, n__nil, y0) -> U45^1(isNat(n__nil), activate(y0)),U44^1(tt, n__nil, y0) -> U45^1(isNat(n__nil), activate(y0)))


----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(cons(n__0, n__zeros))
   U44^1(tt, n__nil, y0) -> U45^1(isNat(n__nil), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(139) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(140)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(cons(n__0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(141) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U45^1(tt, n__zeros) -> ISNATILIST(cons(n__0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros)),U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros)))


----------------------------------------

(142)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(143) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(0, n__zeros)), activate(y0)) at position [0] we obtained the following new rules [LPAR04]:

   (U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__cons(0, n__zeros)), activate(y0)),U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__cons(0, n__zeros)), activate(y0)))
   (U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(n__0, n__zeros)), activate(y0)),U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(n__0, n__zeros)), activate(y0)))


----------------------------------------

(144)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__cons(0, n__zeros)), activate(y0))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(145) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(146)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(147) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule U44^1(tt, n__zeros, y0) -> U45^1(isNat(cons(n__0, n__zeros)), activate(y0)) at position [0] we obtained the following new rules [LPAR04]:

   (U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__cons(n__0, n__zeros)), activate(y0)),U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__cons(n__0, n__zeros)), activate(y0)))


----------------------------------------

(148)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))
   U44^1(tt, n__zeros, y0) -> U45^1(isNat(n__cons(n__0, n__zeros)), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(149) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(150)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(151) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U44^1(tt, n__length(x0), y1) -> U45^1(isNat(length(activate(x0))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U41^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U42^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U43^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U44^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U45^1_2(x_1, x_2) ) = 2x_2
POL( ISNATILIST_1(x_1) ) = 2x_1
POL( U101_3(x_1, ..., x_3) ) = max{0, -2}
POL( U102_3(x_1, ..., x_3) ) = max{0, -2}
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 0
POL( U111_3(x_1, ..., x_3) ) = max{0, -2}
POL( U112_3(x_1, ..., x_3) ) = max{0, -2}
POL( U113_3(x_1, ..., x_3) ) = max{0, -2}
POL( U114_2(x_1, x_2) ) = max{0, -2}
POL( U12_2(x_1, x_2) ) = max{0, -2}
POL( U131_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U132_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U133_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U134_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U135_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U136_4(x_1, ..., x_4) ) = 2x_2 + x_4
POL( U21_2(x_1, x_2) ) = max{0, -2}
POL( U22_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( U32_2(x_1, x_2) ) = max{0, -2}
POL( U41_3(x_1, ..., x_3) ) = max{0, -2}
POL( U42_3(x_1, ..., x_3) ) = max{0, -2}
POL( U43_3(x_1, ..., x_3) ) = max{0, -2}
POL( U44_3(x_1, ..., x_3) ) = max{0, -2}
POL( U45_2(x_1, x_2) ) = max{0, -2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = 2
POL( U91_3(x_1, ..., x_3) ) = max{0, -2}
POL( U92_3(x_1, ..., x_3) ) = max{0, -2}
POL( U93_3(x_1, ..., x_3) ) = max{0, -2}
POL( U94_3(x_1, ..., x_3) ) = 0
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = x_1 + x_2
POL( length_1(x_1) ) = 1
POL( s_1(x_1) ) = 0
POL( take_2(x_1, x_2) ) = 2x_2
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = 2
POL( isNat_1(x_1) ) = max{0, -2}
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = 0
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = max{0, -2}
POL( U33_1(x_1) ) = max{0, -2}
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = 2
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = 2x_2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 1
POL( n__s_1(x_1) ) = 0
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( tt ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(152)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(153) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U44^1(tt, n__s(x0), y1) -> U45^1(isNat(s(activate(x0))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U41^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U42^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U43^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U44^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U45^1_2(x_1, x_2) ) = 2x_2
POL( ISNATILIST_1(x_1) ) = 2x_1
POL( U101_3(x_1, ..., x_3) ) = max{0, -2}
POL( U102_3(x_1, ..., x_3) ) = max{0, -2}
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 2
POL( U111_3(x_1, ..., x_3) ) = x_1 + 1
POL( U112_3(x_1, ..., x_3) ) = 1
POL( U113_3(x_1, ..., x_3) ) = 1
POL( U114_2(x_1, x_2) ) = 1
POL( U12_2(x_1, x_2) ) = 2
POL( U131_4(x_1, ..., x_4) ) = 2x_2 + 2x_4
POL( U132_4(x_1, ..., x_4) ) = 2x_2 + 2x_4
POL( U133_4(x_1, ..., x_4) ) = 2x_2 + 2x_4
POL( U134_4(x_1, ..., x_4) ) = 2x_2 + 2x_4
POL( U135_4(x_1, ..., x_4) ) = 2x_2 + 2x_4
POL( U136_4(x_1, ..., x_4) ) = 2x_2 + 2x_4
POL( U21_2(x_1, x_2) ) = 1
POL( U22_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = max{0, -2}
POL( U41_3(x_1, ..., x_3) ) = 2
POL( U42_3(x_1, ..., x_3) ) = 2
POL( U43_3(x_1, ..., x_3) ) = 2
POL( U44_3(x_1, ..., x_3) ) = 1
POL( U45_2(x_1, x_2) ) = 1
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = max{0, -2}
POL( U92_3(x_1, ..., x_3) ) = max{0, -2}
POL( U93_3(x_1, ..., x_3) ) = max{0, -2}
POL( U94_3(x_1, ..., x_3) ) = max{0, -2}
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = x_1 + x_2
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = 2x_2
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = max{0, 2x_1 - 1}
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = 1
POL( U122_1(x_1) ) = 0
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = max{0, -2}
POL( U33_1(x_1) ) = max{0, -2}
POL( U46_1(x_1) ) = 0
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = 0
POL( n__take_2(x_1, x_2) ) = 2x_2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 2
POL( n__s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( tt ) = 0
POL( U121_2(x_1, x_2) ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(154)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(155) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U44^1(tt, n__take(x0, x1), y1) -> U45^1(isNat(take(activate(x0), activate(x1))), activate(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U41^1_3(x_1, ..., x_3) ) = 2x_2 + x_3 + 2
POL( U42^1_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U43^1_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U44^1_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U45^1_2(x_1, x_2) ) = x_2 + 2
POL( ISNATILIST_1(x_1) ) = x_1 + 2
POL( U101_3(x_1, ..., x_3) ) = 2
POL( U102_3(x_1, ..., x_3) ) = 2
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 2
POL( U111_3(x_1, ..., x_3) ) = max{0, -2}
POL( U112_3(x_1, ..., x_3) ) = 0
POL( U113_3(x_1, ..., x_3) ) = max{0, -2}
POL( U114_2(x_1, x_2) ) = max{0, -2}
POL( U12_2(x_1, x_2) ) = 1
POL( U131_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U132_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U133_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U134_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U135_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U136_4(x_1, ..., x_4) ) = x_2 + 2x_4 + 2
POL( U21_2(x_1, x_2) ) = 1
POL( U22_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = 2
POL( U41_3(x_1, ..., x_3) ) = 2
POL( U42_3(x_1, ..., x_3) ) = 2
POL( U43_3(x_1, ..., x_3) ) = 2
POL( U44_3(x_1, ..., x_3) ) = 2
POL( U45_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = max{0, -2}
POL( U92_3(x_1, ..., x_3) ) = max{0, -2}
POL( U93_3(x_1, ..., x_3) ) = max{0, -2}
POL( U94_3(x_1, ..., x_3) ) = max{0, -2}
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( length_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = x_2 + 2
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = 2
POL( isNatList_1(x_1) ) = x_1
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = 1
POL( U23_1(x_1) ) = max{0, -2}
POL( U33_1(x_1) ) = 0
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = x_2 + 2
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 0
POL( n__s_1(x_1) ) = 0
POL( n__cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( tt ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(156)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(157) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U45^1(tt, n__length(x0)) -> ISNATILIST(length(activate(x0)))
   U45^1(tt, n__s(x0)) -> ISNATILIST(s(activate(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U41^1_3(x_1, ..., x_3) ) = 2x_3
POL( U42^1_3(x_1, ..., x_3) ) = 2x_3
POL( U43^1_3(x_1, ..., x_3) ) = 2x_3
POL( U44^1_3(x_1, ..., x_3) ) = 2x_3
POL( U45^1_2(x_1, x_2) ) = 2x_2
POL( ISNATILIST_1(x_1) ) = x_1
POL( U101_3(x_1, ..., x_3) ) = max{0, -2}
POL( U102_3(x_1, ..., x_3) ) = max{0, -2}
POL( U103_3(x_1, ..., x_3) ) = max{0, -2}
POL( U104_3(x_1, ..., x_3) ) = max{0, -2}
POL( U105_2(x_1, x_2) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 2
POL( U111_3(x_1, ..., x_3) ) = 1
POL( U112_3(x_1, ..., x_3) ) = 1
POL( U113_3(x_1, ..., x_3) ) = 1
POL( U114_2(x_1, x_2) ) = 1
POL( U12_2(x_1, x_2) ) = max{0, -2}
POL( U131_4(x_1, ..., x_4) ) = max{0, -2}
POL( U132_4(x_1, ..., x_4) ) = max{0, -2}
POL( U133_4(x_1, ..., x_4) ) = max{0, -2}
POL( U134_4(x_1, ..., x_4) ) = max{0, -2}
POL( U135_4(x_1, ..., x_4) ) = max{0, -2}
POL( U136_4(x_1, ..., x_4) ) = max{0, -2}
POL( U21_2(x_1, x_2) ) = 1
POL( U22_2(x_1, x_2) ) = 1
POL( U31_2(x_1, x_2) ) = 2
POL( U32_2(x_1, x_2) ) = max{0, -2}
POL( U41_3(x_1, ..., x_3) ) = x_3 + 2
POL( U42_3(x_1, ..., x_3) ) = 2
POL( U43_3(x_1, ..., x_3) ) = 2
POL( U44_3(x_1, ..., x_3) ) = 2
POL( U45_2(x_1, x_2) ) = 2
POL( U51_2(x_1, x_2) ) = max{0, -2}
POL( U61_2(x_1, x_2) ) = max{0, -2}
POL( U91_3(x_1, ..., x_3) ) = max{0, -2}
POL( U92_3(x_1, ..., x_3) ) = max{0, -2}
POL( U93_3(x_1, ..., x_3) ) = max{0, -2}
POL( U94_3(x_1, ..., x_3) ) = max{0, -2}
POL( U95_2(x_1, x_2) ) = max{0, -2}
POL( cons_2(x_1, x_2) ) = 2x_2
POL( length_1(x_1) ) = 1
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = 0
POL( isNatKind_1(x_1) ) = max{0, -2}
POL( isNatIListKind_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 2
POL( U106_1(x_1) ) = max{0, -2}
POL( isNatIList_1(x_1) ) = x_1 + 2
POL( isNatList_1(x_1) ) = 0
POL( U122_1(x_1) ) = max{0, -2}
POL( U13_1(x_1) ) = max{0, -2}
POL( U23_1(x_1) ) = max{0, -2}
POL( U33_1(x_1) ) = max{0, -2}
POL( U46_1(x_1) ) = max{0, -2}
POL( U52_1(x_1) ) = max{0, -2}
POL( U62_1(x_1) ) = max{0, -2}
POL( U71_1(x_1) ) = max{0, -2}
POL( U81_1(x_1) ) = max{0, -2}
POL( U96_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = max{0, -2}
POL( activate_1(x_1) ) = x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__length_1(x_1) ) = 1
POL( n__s_1(x_1) ) = 1
POL( n__cons_2(x_1, x_2) ) = 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( tt ) = 0
POL( U121_2(x_1, x_2) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   0 -> n__0
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   U71(tt) -> tt
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(158)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, V1, V2) -> U42^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42^1(tt, V1, V2) -> U43^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43^1(tt, V1, V2) -> U44^1(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U45^1(tt, n__take(x0, x1)) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(V1, V2)) -> U41^1(isNatKind(activate(V1)), activate(V1), activate(V2))
   U45^1(tt, n__cons(x0, x1)) -> ISNATILIST(cons(activate(x0), x1))
   U45^1(tt, x0) -> ISNATILIST(x0)
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(0, n__zeros))
   U45^1(tt, n__zeros) -> ISNATILIST(n__cons(n__0, n__zeros))
   U44^1(tt, n__cons(x0, x1), y1) -> U45^1(isNat(cons(activate(x0), x1)), activate(y1))
   U44^1(tt, x0, y1) -> U45^1(isNat(x0), activate(y1))
   U44^1(tt, n__0, y0) -> U45^1(isNat(n__0), activate(y0))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(159)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(160) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(161)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(162) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
The graph contains the following edges 1 > 1


*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(163)
YES

----------------------------------------

(164)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATKIND(n__s(V1)) -> ISNATKIND(activate(V1))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(165) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATKIND(n__s(V1)) -> ISNATKIND(activate(V1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ISNATKIND(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(n__0) =  	[[2A]]
>>>

   <<<
 POL(0) =  	[[2A]]
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__nil) =  	[[2A]]
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>

   <<<
 POL(U111(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(isNatList(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(U91(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(isNatKind(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U71(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIListKind(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U51(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U81(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U52(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U61(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U62(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U92(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U93(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U94(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U95(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U12(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U13(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U101(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U102(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U103(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U104(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U105(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U21(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U22(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U23(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U106(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U32(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U33(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U42(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U43(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U44(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U45(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U46(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U96(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U112(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U113(x_1, x_2, x_3)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U114(x_1, x_2)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U121(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U122(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U131(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U132(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U133(x_1, x_2, x_3, x_4)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U134(x_1, x_2, x_3, x_4)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U135(x_1, x_2, x_3, x_4)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U136(x_1, x_2, x_3, x_4)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   take(0, IL) -> U121(isNatIList(IL), IL)
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(166)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(167) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(168)
YES

----------------------------------------

(169)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(n__s(V1)) -> U21^1(isNatKind(activate(V1)), activate(V1))
   U21^1(tt, V1) -> U22^1(isNatKind(activate(V1)), activate(V1))
   U22^1(tt, V1) -> ISNAT(activate(V1))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(170) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNAT(n__s(V1)) -> U21^1(isNatKind(activate(V1)), activate(V1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ISNAT(x_1)) =  	[[-I]] 	 +  	[[4A]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(U21^1(x_1, x_2)) =  	[[5A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[4A]] 	* 	x_2
>>>

   <<<
 POL(isNatKind(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(U22^1(x_1, x_2)) =  	[[5A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[4A]] 	* 	x_2
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(n__0) =  	[[2A]]
>>>

   <<<
 POL(0) =  	[[2A]]
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__nil) =  	[[2A]]
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>

   <<<
 POL(U71(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(isNatIListKind(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U81(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U111(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(isNatList(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U91(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U51(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U52(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U61(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U62(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U92(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U93(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U94(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U95(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U12(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U13(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U101(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U102(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U103(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U104(x_1, x_2, x_3)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U105(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U21(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U22(x_1, x_2)) =  	[[1A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U23(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U106(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U32(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U33(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U42(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U43(x_1, x_2, x_3)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U44(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U45(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U46(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U96(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U112(x_1, x_2, x_3)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U113(x_1, x_2, x_3)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(U114(x_1, x_2)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(U121(x_1, x_2)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(U122(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(U131(x_1, x_2, x_3, x_4)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U132(x_1, x_2, x_3, x_4)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U133(x_1, x_2, x_3, x_4)) =  	[[0A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U134(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U135(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>

   <<<
 POL(U136(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3 	 +  	[[-I]] 	* 	x_4
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   take(X1, X2) -> n__take(X1, X2)
   length(nil) -> 0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   U71(tt) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U13(tt) -> tt
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   take(0, IL) -> U121(isNatIList(IL), IL)
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(tt, V1) -> U22^1(isNatKind(activate(V1)), activate(V1))
   U22^1(tt, V1) -> ISNAT(activate(V1))

The TRS R consists of the following rules:

   zeros -> cons(0, n__zeros)
   U101(tt, V1, V2) -> U102(isNatKind(activate(V1)), activate(V1), activate(V2))
   U102(tt, V1, V2) -> U103(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U103(tt, V1, V2) -> U104(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U104(tt, V1, V2) -> U105(isNat(activate(V1)), activate(V2))
   U105(tt, V2) -> U106(isNatIList(activate(V2)))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(activate(V1)), activate(V1))
   U111(tt, L, N) -> U112(isNatIListKind(activate(L)), activate(L), activate(N))
   U112(tt, L, N) -> U113(isNat(activate(N)), activate(L), activate(N))
   U113(tt, L, N) -> U114(isNatKind(activate(N)), activate(L))
   U114(tt, L) -> s(length(activate(L)))
   U12(tt, V1) -> U13(isNatList(activate(V1)))
   U121(tt, IL) -> U122(isNatIListKind(activate(IL)))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(activate(IL)), activate(IL), activate(M), activate(N))
   U132(tt, IL, M, N) -> U133(isNat(activate(M)), activate(IL), activate(M), activate(N))
   U133(tt, IL, M, N) -> U134(isNatKind(activate(M)), activate(IL), activate(M), activate(N))
   U134(tt, IL, M, N) -> U135(isNat(activate(N)), activate(IL), activate(M), activate(N))
   U135(tt, IL, M, N) -> U136(isNatKind(activate(N)), activate(IL), activate(M), activate(N))
   U136(tt, IL, M, N) -> cons(activate(N), n__take(activate(M), activate(IL)))
   U21(tt, V1) -> U22(isNatKind(activate(V1)), activate(V1))
   U22(tt, V1) -> U23(isNat(activate(V1)))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(activate(V)), activate(V))
   U32(tt, V) -> U33(isNatList(activate(V)))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(activate(V1)), activate(V1), activate(V2))
   U42(tt, V1, V2) -> U43(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U43(tt, V1, V2) -> U44(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U44(tt, V1, V2) -> U45(isNat(activate(V1)), activate(V2))
   U45(tt, V2) -> U46(isNatIList(activate(V2)))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(activate(V2)))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(activate(V2)))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(activate(V1)), activate(V1), activate(V2))
   U92(tt, V1, V2) -> U93(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U93(tt, V1, V2) -> U94(isNatIListKind(activate(V2)), activate(V1), activate(V2))
   U94(tt, V1, V2) -> U95(isNat(activate(V1)), activate(V2))
   U95(tt, V2) -> U96(isNatList(activate(V2)))
   U96(tt) -> tt
   isNat(n__0) -> tt
   isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)), activate(V1))
   isNat(n__s(V1)) -> U21(isNatKind(activate(V1)), activate(V1))
   isNatIList(V) -> U31(isNatIListKind(activate(V)), activate(V))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(V1, V2)) -> U41(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatIListKind(n__nil) -> tt
   isNatIListKind(n__zeros) -> tt
   isNatIListKind(n__cons(V1, V2)) -> U51(isNatKind(activate(V1)), activate(V2))
   isNatIListKind(n__take(V1, V2)) -> U61(isNatKind(activate(V1)), activate(V2))
   isNatKind(n__0) -> tt
   isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
   isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(V1, V2)) -> U91(isNatKind(activate(V1)), activate(V1), activate(V2))
   isNatList(n__take(V1, V2)) -> U101(isNatKind(activate(V1)), activate(V1), activate(V2))
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(activate(L)), activate(L), N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(activate(IL)), activate(IL), M, N)
   zeros -> n__zeros
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   length(X) -> n__length(X)
   s(X) -> n__s(X)
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   activate(n__zeros) -> zeros
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(n__0) -> 0
   activate(n__length(X)) -> length(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(172) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(173)
TRUE
