YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8C3b8.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 1 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) QDPOrderProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (28) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   T(N) -> Q(N)
   Q(s(X)) -> S(p(q(X), d(X)))
   Q(s(X)) -> P(q(X), d(X))
   Q(s(X)) -> Q(X)
   Q(s(X)) -> D(X)
   D(s(X)) -> S(s(d(X)))
   D(s(X)) -> S(d(X))
   D(s(X)) -> D(X)
   P(s(X), s(Y)) -> S(s(p(X, Y)))
   P(s(X), s(Y)) -> S(p(X, Y))
   P(s(X), s(Y)) -> P(X, Y)
   F(s(X), cs(Y, Z)) -> A(Z)
   A(nt(X)) -> T(a(X))
   A(nt(X)) -> A(X)
   A(ns(X)) -> S(a(X))
   A(ns(X)) -> A(X)
   A(nf(X1, X2)) -> F(a(X1), a(X2))
   A(nf(X1, X2)) -> A(X1)
   A(nf(X1, X2)) -> A(X2)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(X), s(Y)) -> P(X, Y)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(X), s(Y)) -> P(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P(s(X), s(Y)) -> P(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(s(X)) -> D(X)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(s(X)) -> D(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*D(s(X)) -> D(X)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   Q(s(X)) -> Q(X)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   Q(s(X)) -> Q(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*Q(s(X)) -> Q(X)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(nt(X)) -> A(X)
   A(ns(X)) -> A(X)
   A(nf(X1, X2)) -> F(a(X1), a(X2))
   F(s(X), cs(Y, Z)) -> A(Z)
   A(nf(X1, X2)) -> A(X1)
   A(nf(X1, X2)) -> A(X2)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(nf(X1, X2)) -> F(a(X1), a(X2))
   A(nf(X1, X2)) -> A(X1)
   A(nf(X1, X2)) -> A(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
A(x1)  =  x1

nt(x1)  =  x1

ns(x1)  =  x1

nf(x1, x2)  =  nf(x1, x2)

F(x1, x2)  =  x2

a(x1)  =  a(x1)

cs(x1, x2)  =  x2

t(x1)  =  x1

s(x1)  =  x1

f(x1, x2)  =  f(x1, x2)

0  =  0

nil  =  nil


Knuth-Bendix order [KBO] with precedence:a_1 > f_2 > nf_2
a_1 > 0
a_1 > nil

and weight map:

   0=2
   a_1=0
   nf_2=2
   f_2=2
   nil=4

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   s(X) -> ns(X)
   t(N) -> cs(r(q(N)), nt(ns(N)))
   t(X) -> nt(X)
   f(0, X) -> nil
   f(X1, X2) -> nf(X1, X2)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(nt(X)) -> A(X)
   A(ns(X)) -> A(X)
   F(s(X), cs(Y, Z)) -> A(Z)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(ns(X)) -> A(X)
   A(nt(X)) -> A(X)

The TRS R consists of the following rules:

   t(N) -> cs(r(q(N)), nt(ns(N)))
   q(0) -> 0
   q(s(X)) -> s(p(q(X), d(X)))
   d(0) -> 0
   d(s(X)) -> s(s(d(X)))
   p(0, X) -> X
   p(X, 0) -> X
   p(s(X), s(Y)) -> s(s(p(X, Y)))
   f(0, X) -> nil
   f(s(X), cs(Y, Z)) -> cs(Y, nf(X, a(Z)))
   t(X) -> nt(X)
   s(X) -> ns(X)
   f(X1, X2) -> nf(X1, X2)
   a(nt(X)) -> t(a(X))
   a(ns(X)) -> s(a(X))
   a(nf(X1, X2)) -> f(a(X1), a(X2))
   a(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(ns(X)) -> A(X)
   A(nt(X)) -> A(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A(ns(X)) -> A(X)
The graph contains the following edges 1 > 1


*A(nt(X)) -> A(X)
The graph contains the following edges 1 > 1


----------------------------------------

(28)
YES
