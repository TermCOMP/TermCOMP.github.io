NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/3CuQk.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 72 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 21 ms]
        (11) QDP
        (12) DependencyGraphProof [EQUIVALENT, 0 ms]
        (13) AND
            (14) QDP
                (15) UsableRulesProof [EQUIVALENT, 0 ms]
                (16) QDP
                (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (18) YES
            (19) QDP
                (20) QDPOrderProof [EQUIVALENT, 57 ms]
                (21) QDP
                (22) PisEmptyProof [EQUIVALENT, 0 ms]
                (23) YES
            (24) QDP
                (25) TransformationProof [EQUIVALENT, 0 ms]
                (26) QDP
                (27) TransformationProof [EQUIVALENT, 0 ms]
                (28) QDP
                (29) DependencyGraphProof [EQUIVALENT, 0 ms]
                (30) QDP
                (31) TransformationProof [EQUIVALENT, 0 ms]
                (32) QDP
                (33) DependencyGraphProof [EQUIVALENT, 0 ms]
                (34) QDP
                (35) TransformationProof [EQUIVALENT, 0 ms]
                (36) QDP
                (37) DependencyGraphProof [EQUIVALENT, 0 ms]
                (38) QDP
                (39) TransformationProof [EQUIVALENT, 0 ms]
                (40) QDP
                (41) TransformationProof [EQUIVALENT, 0 ms]
                (42) QDP
                (43) QDPOrderProof [EQUIVALENT, 45 ms]
                (44) QDP
                (45) QDPOrderProof [EQUIVALENT, 13 ms]
                (46) QDP
                (47) QDPOrderProof [EQUIVALENT, 21 ms]
                (48) QDP
                (49) DependencyGraphProof [EQUIVALENT, 0 ms]
                (50) AND
                    (51) QDP
                        (52) UsableRulesProof [EQUIVALENT, 0 ms]
                        (53) QDP
                        (54) MNOCProof [EQUIVALENT, 0 ms]
                        (55) QDP
                    (56) QDP
            (57) QDP
                (58) QDPOrderProof [EQUIVALENT, 56 ms]
                (59) QDP
                (60) DependencyGraphProof [EQUIVALENT, 0 ms]
                (61) TRUE
    (62) QDP
        (63) TransformationProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) TransformationProof [EQUIVALENT, 0 ms]
        (66) QDP
        (67) DependencyGraphProof [EQUIVALENT, 0 ms]
        (68) QDP
        (69) TransformationProof [EQUIVALENT, 0 ms]
        (70) QDP
        (71) DependencyGraphProof [EQUIVALENT, 0 ms]
        (72) QDP
        (73) TransformationProof [EQUIVALENT, 0 ms]
        (74) QDP
        (75) DependencyGraphProof [EQUIVALENT, 0 ms]
        (76) QDP
        (77) TransformationProof [EQUIVALENT, 0 ms]
        (78) QDP
        (79) TransformationProof [EQUIVALENT, 0 ms]
        (80) QDP
        (81) QDPOrderProof [EQUIVALENT, 35 ms]
        (82) QDP
        (83) QDPOrderProof [EQUIVALENT, 35 ms]
        (84) QDP
        (85) QDPOrderProof [EQUIVALENT, 33 ms]
        (86) QDP
        (87) DependencyGraphProof [EQUIVALENT, 0 ms]
        (88) AND
            (89) QDP
                (90) UsableRulesProof [EQUIVALENT, 0 ms]
                (91) QDP
                (92) MNOCProof [EQUIVALENT, 0 ms]
                (93) QDP
                (94) TransformationProof [EQUIVALENT, 0 ms]
                (95) QDP
                (96) UsableRulesProof [EQUIVALENT, 0 ms]
                (97) QDP
                (98) QReductionProof [EQUIVALENT, 0 ms]
                (99) QDP
                (100) TransformationProof [EQUIVALENT, 0 ms]
                (101) QDP
                (102) NonTerminationLoopProof [COMPLETE, 0 ms]
                (103) NO
            (104) QDP
                (105) QDPOrderProof [EQUIVALENT, 92 ms]
                (106) QDP
                (107) PisEmptyProof [EQUIVALENT, 0 ms]
                (108) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(IL) -> ISNATLIST(activate(IL))
   ISNATILIST(IL) -> ACTIVATE(IL)
   ISNAT(n__s(N)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ACTIVATE(N)
   ISNAT(n__length(L)) -> ISNATLIST(activate(L))
   ISNAT(n__length(L)) -> ACTIVATE(L)
   ISNATILIST(n__cons(N, IL)) -> AND(isNat(activate(N)), isNatIList(activate(IL)))
   ISNATILIST(n__cons(N, IL)) -> ISNAT(activate(N))
   ISNATILIST(n__cons(N, IL)) -> ACTIVATE(N)
   ISNATILIST(n__cons(N, IL)) -> ISNATILIST(activate(IL))
   ISNATILIST(n__cons(N, IL)) -> ACTIVATE(IL)
   ISNATLIST(n__cons(N, L)) -> AND(isNat(activate(N)), isNatList(activate(L)))
   ISNATLIST(n__cons(N, L)) -> ISNAT(activate(N))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(N)
   ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(L)
   ISNATLIST(n__take(N, IL)) -> AND(isNat(activate(N)), isNatIList(activate(IL)))
   ISNATLIST(n__take(N, IL)) -> ISNAT(activate(N))
   ISNATLIST(n__take(N, IL)) -> ACTIVATE(N)
   ISNATLIST(n__take(N, IL)) -> ISNATILIST(activate(IL))
   ISNATLIST(n__take(N, IL)) -> ACTIVATE(IL)
   ZEROS -> CONS(0, n__zeros)
   ZEROS -> 0^1
   TAKE(0, IL) -> UTAKE1(isNatIList(IL))
   TAKE(0, IL) -> ISNATILIST(IL)
   UTAKE1(tt) -> NIL
   TAKE(s(M), cons(N, IL)) -> UTAKE2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   TAKE(s(M), cons(N, IL)) -> AND(isNat(M), and(isNat(N), isNatIList(activate(IL))))
   TAKE(s(M), cons(N, IL)) -> ISNAT(M)
   TAKE(s(M), cons(N, IL)) -> AND(isNat(N), isNatIList(activate(IL)))
   TAKE(s(M), cons(N, IL)) -> ISNAT(N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(activate(IL))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
   UTAKE2(tt, M, N, IL) -> CONS(activate(N), n__take(activate(M), activate(IL)))
   UTAKE2(tt, M, N, IL) -> ACTIVATE(N)
   UTAKE2(tt, M, N, IL) -> ACTIVATE(M)
   UTAKE2(tt, M, N, IL) -> ACTIVATE(IL)
   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))
   LENGTH(cons(N, L)) -> AND(isNat(N), isNatList(activate(L)))
   LENGTH(cons(N, L)) -> ISNAT(N)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ULENGTH(tt, L) -> S(length(activate(L)))
   ULENGTH(tt, L) -> LENGTH(activate(L))
   ULENGTH(tt, L) -> ACTIVATE(L)
   ACTIVATE(n__0) -> 0^1
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ACTIVATE(n__zeros) -> ZEROS
   ACTIVATE(n__cons(X1, X2)) -> CONS(activate(X1), X2)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__nil) -> NIL
   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 17 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(N, L)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ACTIVATE(N)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))
   ULENGTH(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ISNAT(N)
   ISNAT(n__length(L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(N)
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   TAKE(0, IL) -> ISNATILIST(IL)
   ISNATILIST(IL) -> ISNATLIST(activate(IL))
   ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(L)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ISNATLIST(n__take(N, IL)) -> ISNAT(activate(N))
   ISNAT(n__length(L)) -> ACTIVATE(L)
   ISNATLIST(n__take(N, IL)) -> ACTIVATE(N)
   ISNATLIST(n__take(N, IL)) -> ISNATILIST(activate(IL))
   ISNATILIST(IL) -> ACTIVATE(IL)
   ISNATILIST(n__cons(N, IL)) -> ISNAT(activate(N))
   ISNATILIST(n__cons(N, IL)) -> ACTIVATE(N)
   ISNATILIST(n__cons(N, IL)) -> ISNATILIST(activate(IL))
   ISNATILIST(n__cons(N, IL)) -> ACTIVATE(IL)
   ISNATLIST(n__take(N, IL)) -> ACTIVATE(IL)
   TAKE(s(M), cons(N, IL)) -> UTAKE2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   UTAKE2(tt, M, N, IL) -> ACTIVATE(N)
   UTAKE2(tt, M, N, IL) -> ACTIVATE(M)
   UTAKE2(tt, M, N, IL) -> ACTIVATE(IL)
   TAKE(s(M), cons(N, IL)) -> ISNAT(M)
   TAKE(s(M), cons(N, IL)) -> ISNAT(N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(activate(IL))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ULENGTH(tt, L) -> ACTIVATE(L)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TAKE(0, IL) -> ISNATILIST(IL)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> ACTIVATE(X2)
   ISNATLIST(n__take(N, IL)) -> ISNAT(activate(N))
   ISNATLIST(n__take(N, IL)) -> ACTIVATE(N)
   ISNATLIST(n__take(N, IL)) -> ISNATILIST(activate(IL))
   ISNATLIST(n__take(N, IL)) -> ACTIVATE(IL)
   TAKE(s(M), cons(N, IL)) -> UTAKE2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   UTAKE2(tt, M, N, IL) -> ACTIVATE(N)
   UTAKE2(tt, M, N, IL) -> ACTIVATE(M)
   UTAKE2(tt, M, N, IL) -> ACTIVATE(IL)
   TAKE(s(M), cons(N, IL)) -> ISNAT(M)
   TAKE(s(M), cons(N, IL)) -> ISNAT(N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(activate(IL))
   TAKE(s(M), cons(N, IL)) -> ACTIVATE(IL)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNAT_1(x_1) ) = 2x_1
POL( ISNATILIST_1(x_1) ) = x_1
POL( ISNATLIST_1(x_1) ) = x_1
POL( LENGTH_1(x_1) ) = 2x_1
POL( TAKE_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( ULENGTH_2(x_1, x_2) ) = 2x_2
POL( UTAKE2_4(x_1, ..., x_4) ) = 2x_2 + x_3 + x_4 + 1
POL( and_2(x_1, x_2) ) = 2x_2
POL( cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = x_1
POL( take_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( uLength_2(x_1, x_2) ) = 2x_2
POL( uTake2_4(x_1, ..., x_4) ) = 2x_2 + 2x_3 + x_4 + 2
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( activate_1(x_1) ) = x_1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = x_1
POL( n__length_1(x_1) ) = 2x_1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = 2x_1 + x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( tt ) = 0
POL( uTake1_1(x_1) ) = 0
POL( ACTIVATE_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   take(X1, X2) -> n__take(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(N, L)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ACTIVATE(N)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))
   ULENGTH(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ISNAT(N)
   ISNAT(n__length(L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(N)
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__take(X1, X2)) -> TAKE(activate(X1), activate(X2))
   ISNATILIST(IL) -> ISNATLIST(activate(IL))
   ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(L)
   ISNAT(n__length(L)) -> ACTIVATE(L)
   ISNATILIST(IL) -> ACTIVATE(IL)
   ISNATILIST(n__cons(N, IL)) -> ISNAT(activate(N))
   ISNATILIST(n__cons(N, IL)) -> ACTIVATE(N)
   ISNATILIST(n__cons(N, IL)) -> ISNATILIST(activate(IL))
   ISNATILIST(n__cons(N, IL)) -> ACTIVATE(IL)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ULENGTH(tt, L) -> ACTIVATE(L)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(n__s(N)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ACTIVATE(N)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))
   ULENGTH(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ISNAT(N)
   ISNAT(n__length(L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ISNAT(activate(N))
   ISNAT(n__length(L)) -> ACTIVATE(L)
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(N)
   ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(L)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ULENGTH(tt, L) -> ACTIVATE(L)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__length(X)) -> LENGTH(activate(X))
   ISNAT(n__length(L)) -> ISNATLIST(activate(L))
   ISNAT(n__length(L)) -> ACTIVATE(L)
   ACTIVATE(n__length(X)) -> ACTIVATE(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNAT_1(x_1) ) = 2x_1
POL( ISNATLIST_1(x_1) ) = 2x_1
POL( LENGTH_1(x_1) ) = x_1
POL( ULENGTH_2(x_1, x_2) ) = 2x_2
POL( and_2(x_1, x_2) ) = x_2
POL( cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = x_1 + 1
POL( s_1(x_1) ) = x_1
POL( take_2(x_1, x_2) ) = x_2
POL( uLength_2(x_1, x_2) ) = 2x_2 + 1
POL( uTake2_4(x_1, ..., x_4) ) = 2x_3 + 2x_4
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = x_2
POL( activate_1(x_1) ) = x_1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = x_1
POL( n__length_1(x_1) ) = x_1 + 1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( tt ) = 0
POL( uTake1_1(x_1) ) = max{0, -2}
POL( ACTIVATE_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   and(tt, T) -> T
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   take(X1, X2) -> n__take(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(n__s(N)) -> ISNAT(activate(N))
   ISNAT(n__s(N)) -> ACTIVATE(N)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))
   ULENGTH(tt, L) -> LENGTH(activate(L))
   LENGTH(cons(N, L)) -> ISNAT(N)
   ISNATLIST(n__cons(N, L)) -> ISNAT(activate(N))
   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(N)
   ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L))
   ISNATLIST(n__cons(N, L)) -> ACTIVATE(L)
   LENGTH(cons(N, L)) -> ISNATLIST(activate(L))
   LENGTH(cons(N, L)) -> ACTIVATE(L)
   ULENGTH(tt, L) -> ACTIVATE(L)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 8 less nodes.
----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__cons(X1, X2)) -> ACTIVATE(X1)
The graph contains the following edges 1 > 1


*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(n__s(N)) -> ISNAT(activate(N))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNAT(n__s(N)) -> ISNAT(activate(N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ISNAT(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__0) =  	[[2A]]
>>>

   <<<
 POL(0) =  	[[2A]]
>>>

   <<<
 POL(s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__nil) =  	[[2A]]
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[2A]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(uTake1(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(isNatList(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[4A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[2A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3 	 +  	[[1A]] 	* 	x_4
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   take(X1, X2) -> n__take(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(21)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(N, L)) -> ISNATLIST(activate(L)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(0),ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(0))
   (ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0))),ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0))))
   (ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0))),ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0))))
   (ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(zeros),ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(zeros))
   (ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1)),ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1)))
   (ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil),ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil))
   (ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1))),ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1))))
   (ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0),ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(0)
   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(zeros)
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil)
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(0) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(n__0),ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(n__0))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(zeros)
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil)
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__0)) -> ISNATLIST(n__0)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(zeros)
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil)
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros)),ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros)))
   (ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__zeros),ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__zeros))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil)
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__zeros)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil)
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(nil) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(n__nil),ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(n__nil))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__nil)) -> ISNATLIST(n__nil)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros)),ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros)))
   (ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(n__0, n__zeros)),ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(n__0, n__zeros)))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(cons(n__0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros)),ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(y0, n__s(x0))) -> ISNATLIST(s(activate(x0)))
   ISNATLIST(n__cons(y0, n__length(x0))) -> ISNATLIST(length(activate(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNATLIST_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = 2x_2
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2x_1 + 1
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( uLength_2(x_1, x_2) ) = 1
POL( uTake2_4(x_1, ..., x_4) ) = max{0, -2}
POL( and_2(x_1, x_2) ) = x_2
POL( isNatIList_1(x_1) ) = 0
POL( n__take_2(x_1, x_2) ) = 0
POL( activate_1(x_1) ) = x_1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = 1
POL( n__length_1(x_1) ) = 2x_1 + 1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( uTake1_1(x_1) ) = max{0, -2}
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   s(X) -> n__s(X)
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(y0, n__cons(x0, x1))) -> ISNATLIST(cons(activate(x0), x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNATLIST_1(x_1) ) = max{0, x_1 - 1}
POL( cons_2(x_1, x_2) ) = x_2 + 1
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = 2
POL( uLength_2(x_1, x_2) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = 2
POL( and_2(x_1, x_2) ) = 2x_2
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = 1
POL( activate_1(x_1) ) = x_1 + 1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 0
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = x_2 + 1
POL( n__nil ) = 0
POL( nil ) = 2
POL( uTake1_1(x_1) ) = 2
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   cons(X1, X2) -> n__cons(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   nil -> n__nil


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATLIST(n__cons(y0, x0)) -> ISNATLIST(x0)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNATLIST_1(x_1) ) = max{0, x_1 - 1}
POL( cons_2(x_1, x_2) ) = x_2 + 2
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = 2
POL( uLength_2(x_1, x_2) ) = 2
POL( uTake2_4(x_1, ..., x_4) ) = 2
POL( and_2(x_1, x_2) ) = 2x_2
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = 0
POL( activate_1(x_1) ) = 2x_1 + 2
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 1
POL( n__zeros ) = 1
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = x_2 + 2
POL( n__nil ) = 1
POL( nil ) = 1
POL( uTake1_1(x_1) ) = 2
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   nil -> n__nil


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(50)
Complex Obligation (AND)

----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   0 -> n__0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(0, n__zeros))
   ISNATLIST(n__cons(y0, n__zeros)) -> ISNATLIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   0 -> n__0

The set Q consists of the following terms:

   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATLIST(n__cons(y0, n__take(x0, x1))) -> ISNATLIST(take(activate(x0), activate(x1)))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))
   ULENGTH(tt, L) -> LENGTH(activate(L))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ULENGTH(tt, L) -> LENGTH(activate(L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(LENGTH(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(ULENGTH(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[0A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(isNatList(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[3A]]
>>>

   <<<
 POL(n__0) =  	[[2A]]
>>>

   <<<
 POL(n__s(x_1)) =  	[[4A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(0) =  	[[2A]]
>>>

   <<<
 POL(s(x_1)) =  	[[4A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__nil) =  	[[3A]]
>>>

   <<<
 POL(nil) =  	[[3A]]
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[3A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uTake1(x_1)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[4A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3 	 +  	[[1A]] 	* 	x_4
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   and(tt, T) -> T
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   take(X1, X2) -> n__take(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LENGTH(cons(N, L)) -> ULENGTH(and(isNat(N), isNatList(activate(L))), activate(L))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(61)
TRUE

----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(N, IL)) -> ISNATILIST(activate(IL))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(N, IL)) -> ISNATILIST(activate(IL)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(0),ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(0))
   (ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0))),ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0))))
   (ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0))),ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0))))
   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(zeros),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(zeros))
   (ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1)),ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1)))
   (ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil),ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil))
   (ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1))),ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1))))
   (ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0),ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0))


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(0)
   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(zeros)
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil)
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(0) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(n__0),ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(n__0))


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(zeros)
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil)
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__0)) -> ISNATILIST(n__0)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(zeros)
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil)
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(zeros) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros)),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros)))
   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__zeros),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__zeros))


----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil)
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__zeros)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil)
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(nil) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(n__nil),ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(n__nil))


----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__nil)) -> ISNATILIST(n__nil)

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(75) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros)),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros)))
   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(n__0, n__zeros)),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(n__0, n__zeros)))


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(cons(n__0, n__zeros)) at position [0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)))


----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(y0, n__s(x0))) -> ISNATILIST(s(activate(x0)))
   ISNATILIST(n__cons(y0, n__length(x0))) -> ISNATILIST(length(activate(x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNATILIST_1(x_1) ) = 2x_1
POL( cons_2(x_1, x_2) ) = 2x_2
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2x_1 + 1
POL( s_1(x_1) ) = 1
POL( take_2(x_1, x_2) ) = max{0, -2}
POL( uLength_2(x_1, x_2) ) = 1
POL( uTake2_4(x_1, ..., x_4) ) = max{0, -2}
POL( and_2(x_1, x_2) ) = x_2
POL( isNatIList_1(x_1) ) = 0
POL( n__take_2(x_1, x_2) ) = 0
POL( activate_1(x_1) ) = x_1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = 1
POL( n__length_1(x_1) ) = 2x_1 + 1
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = 2x_2
POL( n__nil ) = 0
POL( nil ) = 0
POL( uTake1_1(x_1) ) = max{0, -2}
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   s(X) -> n__s(X)
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   0 -> n__0
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   nil -> n__nil


----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(y0, n__cons(x0, x1))) -> ISNATILIST(cons(activate(x0), x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNATILIST_1(x_1) ) = max{0, x_1 - 1}
POL( cons_2(x_1, x_2) ) = x_2 + 1
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = max{0, -2}
POL( s_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = 2
POL( uLength_2(x_1, x_2) ) = max{0, -2}
POL( uTake2_4(x_1, ..., x_4) ) = 2
POL( and_2(x_1, x_2) ) = 2x_2
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = 1
POL( activate_1(x_1) ) = x_1 + 1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 0
POL( n__zeros ) = 0
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = x_2 + 1
POL( n__nil ) = 0
POL( nil ) = 2
POL( uTake1_1(x_1) ) = 2
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   cons(X1, X2) -> n__cons(X1, X2)
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   nil -> n__nil


----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(y0, x0)) -> ISNATILIST(x0)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNATILIST_1(x_1) ) = max{0, x_1 - 1}
POL( cons_2(x_1, x_2) ) = x_2 + 2
POL( isNat_1(x_1) ) = max{0, -2}
POL( isNatList_1(x_1) ) = max{0, -2}
POL( length_1(x_1) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( take_2(x_1, x_2) ) = 2
POL( uLength_2(x_1, x_2) ) = 2
POL( uTake2_4(x_1, ..., x_4) ) = 2
POL( and_2(x_1, x_2) ) = 2x_2
POL( isNatIList_1(x_1) ) = max{0, -2}
POL( n__take_2(x_1, x_2) ) = 0
POL( activate_1(x_1) ) = 2x_1 + 2
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__s_1(x_1) ) = 0
POL( n__length_1(x_1) ) = 1
POL( n__zeros ) = 1
POL( zeros ) = 0
POL( n__cons_2(x_1, x_2) ) = x_2 + 2
POL( n__nil ) = 1
POL( nil ) = 1
POL( uTake1_1(x_1) ) = 2
POL( tt ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   nil -> n__nil


----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(87) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(88)
Complex Obligation (AND)

----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(90) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(91)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   0 -> n__0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(92) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros))
   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   0 -> n__0

The set Q consists of the following terms:

   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(94) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(0, n__zeros)) at position [0,0] we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)),ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)))


----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

The TRS R consists of the following rules:

   0 -> n__0

The set Q consists of the following terms:

   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(96) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

R is empty.
The set Q consists of the following terms:

   0

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(98) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   0


----------------------------------------

(99)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(100) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule ISNATILIST(n__cons(y0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)) we obtained the following new rules [LPAR04]:

   (ISNATILIST(n__cons(n__0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)),ISNATILIST(n__cons(n__0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros)))


----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(n__0, n__zeros)) -> ISNATILIST(n__cons(n__0, n__zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(102) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = ISNATILIST(n__cons(n__0, n__zeros)) evaluates to  t =ISNATILIST(n__cons(n__0, n__zeros))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from ISNATILIST(n__cons(n__0, n__zeros)) to ISNATILIST(n__cons(n__0, n__zeros)).




----------------------------------------

(103)
NO

----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))

The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(105) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNATILIST(n__cons(y0, n__take(x0, x1))) -> ISNATILIST(take(activate(x0), activate(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(ISNATILIST(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__take(x_1, x_2)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(take(x_1, x_2)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(activate(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__0) =  	[[0A]]
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(n__s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[3A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(n__length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(length(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(n__zeros) =  	[[0A]]
>>>

   <<<
 POL(zeros) =  	[[1A]]
>>>

   <<<
 POL(cons(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(n__nil) =  	[[2A]]
>>>

   <<<
 POL(nil) =  	[[2A]]
>>>

   <<<
 POL(uTake1(x_1)) =  	[[2A]] 	 +  	[[-I]] 	* 	x_1
>>>

   <<<
 POL(isNatIList(x_1)) =  	[[2A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uTake2(x_1, x_2, x_3, x_4)) =  	[[3A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3 	 +  	[[1A]] 	* 	x_4
>>>

   <<<
 POL(and(x_1, x_2)) =  	[[0A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[5A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[2A]]
>>>

   <<<
 POL(isNatList(x_1)) =  	[[1A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(uLength(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X
   take(0, IL) -> uTake1(isNatIList(IL))
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   take(X1, X2) -> n__take(X1, X2)
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   cons(X1, X2) -> n__cons(X1, X2)
   isNatIList(n__zeros) -> tt
   uTake1(tt) -> nil
   isNatIList(IL) -> isNatList(activate(IL))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNat(n__0) -> tt
   and(tt, T) -> T
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   zeros -> cons(0, n__zeros)
   zeros -> n__zeros
   0 -> n__0
   nil -> n__nil


----------------------------------------

(106)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   and(tt, T) -> T
   isNatIList(IL) -> isNatList(activate(IL))
   isNat(n__0) -> tt
   isNat(n__s(N)) -> isNat(activate(N))
   isNat(n__length(L)) -> isNatList(activate(L))
   isNatIList(n__zeros) -> tt
   isNatIList(n__cons(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   isNatList(n__nil) -> tt
   isNatList(n__cons(N, L)) -> and(isNat(activate(N)), isNatList(activate(L)))
   isNatList(n__take(N, IL)) -> and(isNat(activate(N)), isNatIList(activate(IL)))
   zeros -> cons(0, n__zeros)
   take(0, IL) -> uTake1(isNatIList(IL))
   uTake1(tt) -> nil
   take(s(M), cons(N, IL)) -> uTake2(and(isNat(M), and(isNat(N), isNatIList(activate(IL)))), M, N, activate(IL))
   uTake2(tt, M, N, IL) -> cons(activate(N), n__take(activate(M), activate(IL)))
   length(cons(N, L)) -> uLength(and(isNat(N), isNatList(activate(L))), activate(L))
   uLength(tt, L) -> s(length(activate(L)))
   0 -> n__0
   s(X) -> n__s(X)
   length(X) -> n__length(X)
   zeros -> n__zeros
   cons(X1, X2) -> n__cons(X1, X2)
   nil -> n__nil
   take(X1, X2) -> n__take(X1, X2)
   activate(n__0) -> 0
   activate(n__s(X)) -> s(activate(X))
   activate(n__length(X)) -> length(activate(X))
   activate(n__zeros) -> zeros
   activate(n__cons(X1, X2)) -> cons(activate(X1), X2)
   activate(n__nil) -> nil
   activate(n__take(X1, X2)) -> take(activate(X1), activate(X2))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(107) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(108)
YES
