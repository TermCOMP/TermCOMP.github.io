NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/de9Mn.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) TransformationProof [EQUIVALENT, 0 ms]
(8) QDP
(9) MRRProof [EQUIVALENT, 0 ms]
(10) QDP
(11) NonTerminationLoopProof [COMPLETE, 0 ms]
(12) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(X, g(X)) -> f(1, g(X))
   g(1) -> g(0)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, g(X)) -> F(1, g(X))
   G(1) -> G(0)

The TRS R consists of the following rules:

   f(X, g(X)) -> f(1, g(X))
   g(1) -> g(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, g(X)) -> F(1, g(X))

The TRS R consists of the following rules:

   f(X, g(X)) -> f(1, g(X))
   g(1) -> g(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X, g(X)) -> F(1, g(X))

The TRS R consists of the following rules:

   g(1) -> g(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F(X, g(X)) -> F(1, g(X)) we obtained the following new rules [LPAR04]:

   (F(1, g(1)) -> F(1, g(1)),F(1, g(1)) -> F(1, g(1)))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(1, g(1)) -> F(1, g(1))

The TRS R consists of the following rules:

   g(1) -> g(0)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   g(1) -> g(0)

Used ordering: Knuth-Bendix order [KBO] with precedence:F_2 > 1 > 0 > g_1

and weight map:

   1=1
   0=1
   g_1=1
   F_2=0

The variable weight is 1

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(1, g(1)) -> F(1, g(1))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F(1, g(1)) evaluates to  t =F(1, g(1))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F(1, g(1)) to F(1, g(1)).




----------------------------------------

(12)
NO
