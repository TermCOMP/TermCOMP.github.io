NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/FxPuZ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) MNOCProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) NonLoopProof [COMPLETE, 3068 ms]
        (32) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The TRS R 2 is 
   f(true, x, y) -> f(gt(x, y), double(x), s(y))

The signature Sigma is {f_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), double(x), s(y))
   F(true, x, y) -> GT(x, y)
   F(true, x, y) -> DOUBLE(x)
   GT(s(x), s(y)) -> GT(x, y)
   DOUBLE(x) -> TIMES(x, s(s(0)))
   TIMES(s(x), y) -> PLUS(y, times(x, y))
   TIMES(s(x), y) -> TIMES(x, y)
   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), double(x), s(y))

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   f(true, x0, x1)
   gt(s(x0), 0)
   gt(0, x0)
   gt(s(x0), s(x1))
   double(x0)
   times(0, x0)
   times(s(x0), x1)
   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, x, y) -> F(gt(x, y), double(x), s(y))

The TRS R consists of the following rules:

   f(true, x, y) -> f(gt(x, y), double(x), s(y))
   gt(s(x), 0) -> true
   gt(0, y) -> false
   gt(s(x), s(y)) -> gt(x, y)
   double(x) -> times(x, s(s(0)))
   times(0, y) -> 0
   times(s(x), y) -> plus(y, times(x, y))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [zr3 / s(zr3)], and ?' = [zr3 / times(s(zr3), s(s(0)))] on the rule
F(true, s(s(s(zr3))), s(zr2))[zr3 / s(zr3), zr2 / s(zr2)]^n[zr2 / 0] -> F(true, s(s(s(s(zr3)))), s(s(zr2)))[zr2 / s(zr2), zr3 / s(s(zr3))]^n[zr2 / 0, zr3 / times(s(zr3), s(s(0)))]
This rule is correct for the QDP as the following derivation shows:

F(true, s(s(s(zr3))), s(zr2))[zr3 / s(zr3), zr2 / s(zr2)]^n[zr2 / 0] -> F(true, s(s(s(s(zr3)))), s(s(zr2)))[zr2 / s(zr2), zr3 / s(s(zr3))]^n[zr2 / 0, zr3 / times(s(zr3), s(s(0)))]
    by Equivalence by Irrelevant Pattern Substitutions sigma: [zr2 / s(zr2), zr3 / s(s(zr3))] mu: [zr2 / 0, zr3 / times(s(zr3), s(s(0)))]
    intermediate steps: Equiv IPS (lhs) - Instantiate mu - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv Smu (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
    F(true, s(s(zl2)), s(zl3))[zl2 / s(zl2), zl3 / s(zl3)]^n[zl2 / y1, zl3 / 0] -> F(true, s(s(s(s(zt1)))), s(s(zr3)))[zr3 / s(zr3), zt1 / s(s(zt1))]^n[zr3 / 0, zt1 / times(y1, s(s(0)))]
        by Rewrite sigma at the term of variable: zt1 with the rewrite sequence <Pos,Rule>: [([],plus(s(x), y) -> s(plus(x, y))), ([0],plus(s(x), y) -> s(plus(x, y))), ([0,0],plus(0, y) -> y)]
        F(true, s(s(zl2)), s(zl3))[zl2 / s(zl2), zl3 / s(zl3)]^n[zl2 / y1, zl3 / 0] -> F(true, s(s(s(s(zt1)))), s(s(zr3)))[zr3 / s(zr3), zt1 / plus(s(s(0)), zt1)]^n[zr3 / 0, zt1 / times(y1, s(s(0)))]
            by Rewrite t with the rewrite sequence <Pos,Rule>: [([1],plus(s(x), y) -> s(plus(x, y))), ([1,0],plus(s(x), y) -> s(plus(x, y))), ([1,0,0],plus(0, y) -> y), ([1,0,0],plus(s(x), y) -> s(plus(x, y))), ([1,0,0,0],plus(s(x), y) -> s(plus(x, y))), ([1,0,0,0,0],plus(0, y) -> y)]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs)
            F(true, s(s(zl2)), s(zl3))[zr2 / s(zr2), zr3 / s(zr3), zt1 / plus(s(s(0)), zt1), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / y1, zr3 / 0, zt1 / times(y1, s(s(0))), zl2 / y1, zl3 / 0, x0 / y1] -> F(true, plus(s(s(0)), plus(s(s(0)), zt1)), s(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3), zt1 / plus(s(s(0)), zt1), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / y1, zr3 / 0, zt1 / times(y1, s(s(0))), zl2 / y1, zl3 / 0, x0 / y1]
                by Narrowing at position: [1]
                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
                F(true, s(s(zl2)), s(zl3))[zr2 / s(zr2), zr3 / s(zr3), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / x0, zr3 / 0, zl2 / x0, zl3 / 0] -> F(true, times(s(s(zr2)), s(s(0))), s(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / x0, zr3 / 0, zl2 / x0, zl3 / 0]
                    by Narrowing at position: [1]
                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
                    F(true, s(s(zl2)), s(zl3))[zr2 / s(zr2), zr3 / s(zr3), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / y0, zr3 / 0, zl2 / y0, zl3 / 0] -> F(true, double(s(s(zr2))), s(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3), zl2 / s(zl2), zl3 / s(zl3)]^n[zr2 / y0, zr3 / 0, zl2 / y0, zl3 / 0]
                        by Narrowing at position: [0]
                        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv Smu (rhs) - Equiv Smu (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
                        F(true, s(zs2), s(zs3))[zs2 / s(zs2), zs3 / s(zs3)]^n[zs2 / y1, zs3 / y0] -> F(gt(y1, y0), double(s(zs2)), s(s(zs3)))[zs2 / s(zs2), zs3 / s(zs3)]^n[zs2 / y1, zs3 / y0]
                            by Narrowing at position: [0]
                            intermediate steps: Instantiate mu - Instantiate Sigma - Instantiation - Instantiation - Instantiation
                            F(true, x, y)[ ]^n[ ] -> F(gt(x, y), double(x), s(y))[ ]^n[ ]
                                by Rule from TRS P

                            intermediate steps: Equiv IPS (rhs) - Equiv IPS (rhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
                            gt(s(x), s(y))[x / s(x), y / s(y)]^n[ ] -> gt(x, y)[ ]^n[ ]
                                by PatternCreation I with delta: [ ], theta: [ ], sigma: [x / s(x), y / s(y)]
                                gt(s(x), s(y))[ ]^n[ ] -> gt(x, y)[ ]^n[ ]
                                    by Rule from TRS R

                        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation
                        gt(s(x), 0)[ ]^n[ ] -> true[ ]^n[ ]
                            by Rule from TRS R

                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
                    double(x)[ ]^n[ ] -> times(x, s(s(0)))[ ]^n[ ]
                        by Rule from TRS R

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (lhs) - Expand Sigma - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs)
                times(s(x), y)[x / s(x)]^n[ ] -> plus(y, z)[x / s(x), z / plus(y, z)]^n[z / times(x, y)]
                    by PatternCreation II with pi: [1], sigma: [x / s(x)]
                    times(s(x), y)[ ]^n[ ] -> plus(y, times(x, y))[ ]^n[ ]
                        by Rule from TRS R
----------------------------------------

(32)
NO
