YES

Problem 1: 

(VAR vu95NonEmpty fun x xs y z)
(RULES
app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
app(app(filter,fun),nil) -> nil
app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
app(app(map,fun),nil) -> nil
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(f,num0),num1),x) -> APP(app(app(f,app(s,x)),x),x)
 APP(app(app(f,x),y),app(s,z)) -> APP(app(app(f,num0),num1),z)
 APP(app(app(f,x),y),app(s,z)) -> APP(s,app(app(app(f,num0),num1),z))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(f,num0),num1),x) -> APP(app(app(f,app(s,x)),x),x)
 APP(app(app(f,x),y),app(s,z)) -> APP(app(app(f,num0),num1),z)
 APP(app(app(f,x),y),app(s,z)) -> APP(s,app(app(app(f,num0),num1),z))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(app(f,num0),num1),x) -> APP(app(app(f,app(s,x)),x),x)
 APP(app(app(f,x),y),app(s,z)) -> APP(app(app(f,num0),num1),z)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
->->Cycle:
->->-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(app(app(f,num0),num1),x) -> APP(app(app(f,app(s,x)),x),x)
 APP(app(app(f,x),y),app(s,z)) -> APP(app(app(f,num0),num1),z)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 APP(app(app(f,num0),num1),x) -> APP(app(app(f,app(s,x)),x),x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(f,num0),num1),x) -> app(app(app(f,app(s,x)),x),x)
 app(app(app(f,x),y),app(s,z)) -> app(s,app(app(app(f,num0),num1),z))
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
