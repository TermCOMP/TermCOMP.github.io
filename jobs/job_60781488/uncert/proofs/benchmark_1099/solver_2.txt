YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/cHmJV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) QDPOrderProof [EQUIVALENT, 46 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(0) -> 0
   mark(nil) -> nil
   mark(s(X)) -> s(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__first(X1, X2) -> first(X1, X2)
   a__from(X) -> from(X)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FIRST(s(X), cons(Y, Z)) -> MARK(Y)
   A__FROM(X) -> MARK(X)
   MARK(first(X1, X2)) -> A__FIRST(mark(X1), mark(X2))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> A__FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(0) -> 0
   mark(nil) -> nil
   mark(s(X)) -> s(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__first(X1, X2) -> first(X1, X2)
   a__from(X) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(first(X1, X2)) -> A__FIRST(mark(X1), mark(X2))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> A__FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
A__FIRST(x1, x2)  =  x2

s(x1)  =  s(x1)

cons(x1, x2)  =  cons(x1)

MARK(x1)  =  MARK(x1)

A__FROM(x1)  =  A__FROM(x1)

first(x1, x2)  =  first(x1, x2)

mark(x1)  =  x1

from(x1)  =  from(x1)

a__first(x1, x2)  =  a__first(x1, x2)

a__from(x1)  =  a__from(x1)

0  =  0

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: [from_1, a__from_1] > s_1 > [first_2, a__first_2]
[from_1, a__from_1] > [cons_1, MARK_1, A__FROM_1] > [first_2, a__first_2]
0 > nil

Status: s_1: [1]
cons_1: [1]
MARK_1: [1]
A__FROM_1: [1]
first_2: multiset status
from_1: multiset status
a__first_2: multiset status
a__from_1: multiset status
0: multiset status
nil: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(0) -> 0
   mark(nil) -> nil
   mark(s(X)) -> s(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__from(X) -> from(X)
   a__first(0, X) -> nil
   a__first(X1, X2) -> first(X1, X2)
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FIRST(s(X), cons(Y, Z)) -> MARK(Y)
   A__FROM(X) -> MARK(X)

The TRS R consists of the following rules:

   a__first(0, X) -> nil
   a__first(s(X), cons(Y, Z)) -> cons(mark(Y), first(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   mark(first(X1, X2)) -> a__first(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(0) -> 0
   mark(nil) -> nil
   mark(s(X)) -> s(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__first(X1, X2) -> first(X1, X2)
   a__from(X) -> from(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(6)
TRUE
