YES

Problem 1: 

(VAR vu95NonEmpty u x y z)
(RULES
check(num0) -> zero
check(s(num0)) -> odd
check(s(s(num0))) -> even
check(s(s(s(x)))) -> check(s(x))
half(num0) -> num0
half(s(num0)) -> num0
half(s(s(x))) -> s(half(x))
if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
if(odd,x,y,z,u) -> timesIter(p(x),y,u)
if(zero,x,y,z,u) -> z
p(num0) -> num0
p(s(x)) -> x
plus(num0,y) -> y
plus(s(x),y) -> s(plus(x,y))
times(x,y) -> timesIter(x,y,num0)
timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 CHECK(s(s(s(x)))) -> CHECK(s(x))
 HALF(s(s(x))) -> HALF(x)
 IF(even,x,y,z,u) -> HALF(s(z))
 IF(even,x,y,z,u) -> HALF(x)
 IF(even,x,y,z,u) -> HALF(z)
 IF(even,x,y,z,u) -> PLUS(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(s(z)))
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> P(x)
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 PLUS(s(x),y) -> PLUS(x,y)
 TIMES(x,y) -> TIMESITER(x,y,num0)
 TIMESITER(x,y,z) -> CHECK(x)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
 TIMESITER(x,y,z) -> PLUS(z,y)
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))

Problem 1: 

SCC Processor:
-> Pairs:
 CHECK(s(s(s(x)))) -> CHECK(s(x))
 HALF(s(s(x))) -> HALF(x)
 IF(even,x,y,z,u) -> HALF(s(z))
 IF(even,x,y,z,u) -> HALF(x)
 IF(even,x,y,z,u) -> HALF(z)
 IF(even,x,y,z,u) -> PLUS(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(s(z)))
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> P(x)
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 PLUS(s(x),y) -> PLUS(x,y)
 TIMES(x,y) -> TIMESITER(x,y,num0)
 TIMESITER(x,y,z) -> CHECK(x)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
 TIMESITER(x,y,z) -> PLUS(z,y)
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(s(x),y) -> PLUS(x,y)
->->-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->->Cycle:
->->-> Pairs:
 HALF(s(s(x))) -> HALF(x)
->->-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->->Cycle:
->->-> Pairs:
 CHECK(s(s(s(x)))) -> CHECK(s(x))
->->-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->->Cycle:
->->-> Pairs:
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(s(z)))
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
->->-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))


The problem is decomposed in 4 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 PLUS(s(x),y) -> PLUS(x,y)
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Projection:
 pi(PLUS) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 HALF(s(s(x))) -> HALF(x)
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Projection:
 pi(HALF) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 CHECK(s(s(s(x)))) -> CHECK(s(x))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Projection:
 pi(CHECK) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Reduction Pairs Processor:
-> Pairs:
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(s(z)))
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
-> Usable rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
->Interpretation type:
 Simple mixed
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[check](X) = X + 1
[half](X) = 1/2.X
[if](X1,X2,X3,X4,X5) = 0
[p](X) = 1/2.X
[plus](X1,X2) = X1.X2 + 2.X1 + 2.X2 + 1
[times](X1,X2) = 0
[timesIter](X1,X2,X3) = 0
[num0] = 0
[even] = 2
[fSNonEmpty] = 0
[odd] = 1
[s](X) = 2.X + 2
[zero] = 1/2
[CHECK](X) = 0
[HALF](X) = 0
[IF](X1,X2,X3,X4,X5) = X1.X3 + X2.X3 + X1 + X2 + 1
[P](X) = 0
[PLUS](X1,X2) = 0
[TIMES](X1,X2) = 0
[TIMESITER](X1,X2,X3) = 2.X1.X2 + 2.X1 + X2 + 2

Problem 1.4: 

SCC Processor:
-> Pairs:
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
->->-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))

Problem 1.4: 

Reduction Pairs Processor:
-> Pairs:
 IF(even,x,y,z,u) -> TIMESITER(half(x),y,half(z))
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
-> Usable rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
->Interpretation type:
 Simple mixed
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[check](X) = 1/2.X
[half](X) = 1/2.X + 1/2
[if](X1,X2,X3,X4,X5) = 0
[p](X) = 1/2.X + 1/2
[plus](X1,X2) = 2.X1.X2 + 2.X1 + 2
[times](X1,X2) = 0
[timesIter](X1,X2,X3) = 0
[num0] = 1
[even] = 2
[fSNonEmpty] = 0
[odd] = 2
[s](X) = 2.X + 2
[zero] = 1/2
[CHECK](X) = 0
[HALF](X) = 0
[IF](X1,X2,X3,X4,X5) = X1.X3 + X2.X3 + X1 + X2 + 2.X3
[P](X) = 0
[PLUS](X1,X2) = 0
[TIMES](X1,X2) = 0
[TIMESITER](X1,X2,X3) = 2.X1.X2 + 2.X1 + 2.X2

Problem 1.4: 

SCC Processor:
-> Pairs:
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
->->-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))

Problem 1.4: 

Reduction Pairs Processor:
-> Pairs:
 IF(odd,x,y,z,u) -> TIMESITER(p(x),y,u)
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
-> Usable rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
->Interpretation type:
 Simple mixed
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[check](X) = 2.X
[half](X) = 0
[if](X1,X2,X3,X4,X5) = 0
[p](X) = 1/2.X
[plus](X1,X2) = 1/2.X1.X2 + X1 + X2
[times](X1,X2) = 0
[timesIter](X1,X2,X3) = 0
[num0] = 0
[even] = 1
[fSNonEmpty] = 0
[odd] = 2
[s](X) = 2.X + 2
[zero] = 0
[CHECK](X) = 0
[HALF](X) = 0
[IF](X1,X2,X3,X4,X5) = 1/2.X2.X3 + 1/2.X1 + X2
[P](X) = 0
[PLUS](X1,X2) = 0
[TIMES](X1,X2) = 0
[TIMESITER](X1,X2,X3) = 1/2.X1.X2 + 2.X1 + 1/2

Problem 1.4: 

SCC Processor:
-> Pairs:
 TIMESITER(x,y,z) -> IF(check(x),x,y,z,plus(z,y))
-> Rules:
 check(num0) -> zero
 check(s(num0)) -> odd
 check(s(s(num0))) -> even
 check(s(s(s(x)))) -> check(s(x))
 half(num0) -> num0
 half(s(num0)) -> num0
 half(s(s(x))) -> s(half(x))
 if(even,x,y,z,u) -> plus(timesIter(half(x),y,half(z)),timesIter(half(x),y,half(s(z))))
 if(odd,x,y,z,u) -> timesIter(p(x),y,u)
 if(zero,x,y,z,u) -> z
 p(num0) -> num0
 p(s(x)) -> x
 plus(num0,y) -> y
 plus(s(x),y) -> s(plus(x,y))
 times(x,y) -> timesIter(x,y,num0)
 timesIter(x,y,z) -> if(check(x),x,y,z,plus(z,y))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
