YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/EvZfD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 9 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPOrderProof [EQUIVALENT, 27 ms]
        (34) QDP
        (35) PisEmptyProof [EQUIVALENT, 0 ms]
        (36) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(s(s(s(x)))) -> CHECK(s(x))
   HALF(s(s(x))) -> HALF(x)
   PLUS(s(x), y) -> PLUS(x, y)
   TIMES(x, y) -> TIMESITER(x, y, 0)
   TIMESITER(x, y, z) -> IF(check(x), x, y, z, plus(z, y))
   TIMESITER(x, y, z) -> CHECK(x)
   TIMESITER(x, y, z) -> PLUS(z, y)
   IF(odd, x, y, z, u) -> TIMESITER(p(x), y, u)
   IF(odd, x, y, z, u) -> P(x)
   IF(even, x, y, z, u) -> PLUS(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(z))
   IF(even, x, y, z, u) -> HALF(x)
   IF(even, x, y, z, u) -> HALF(z)
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(s(z)))
   IF(even, x, y, z, u) -> HALF(s(z))

The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 8 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(s(s(x))) -> HALF(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(s(s(x))) -> HALF(x)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(s(s(s(x)))) -> CHECK(s(x))

The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(s(s(s(x)))) -> CHECK(s(x))

R is empty.
The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(s(s(s(x)))) -> CHECK(s(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CHECK(s(s(s(x)))) -> CHECK(s(x))
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMESITER(x, y, z) -> IF(check(x), x, y, z, plus(z, y))
   IF(odd, x, y, z, u) -> TIMESITER(p(x), y, u)
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(z))
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(s(z)))

The TRS R consists of the following rules:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))
   times(x, y) -> timesIter(x, y, 0)
   timesIter(x, y, z) -> if(check(x), x, y, z, plus(z, y))
   p(s(x)) -> x
   p(0) -> 0
   if(zero, x, y, z, u) -> z
   if(odd, x, y, z, u) -> timesIter(p(x), y, u)
   if(even, x, y, z, u) -> plus(timesIter(half(x), y, half(z)), timesIter(half(x), y, half(s(z))))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMESITER(x, y, z) -> IF(check(x), x, y, z, plus(z, y))
   IF(odd, x, y, z, u) -> TIMESITER(p(x), y, u)
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(z))
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(s(z)))

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   p(s(x)) -> x
   p(0) -> 0
   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   times(x0, x1)
   timesIter(x0, x1, x2)
   p(s(x0))
   p(0)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   times(x0, x1)
   timesIter(x0, x1, x2)
   if(zero, x0, x1, x2, x3)
   if(odd, x0, x1, x2, x3)
   if(even, x0, x1, x2, x3)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMESITER(x, y, z) -> IF(check(x), x, y, z, plus(z, y))
   IF(odd, x, y, z, u) -> TIMESITER(p(x), y, u)
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(z))
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(s(z)))

The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   p(s(x)) -> x
   p(0) -> 0
   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   p(s(x0))
   p(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TIMESITER(x, y, z) -> IF(check(x), x, y, z, plus(z, y))
   IF(odd, x, y, z, u) -> TIMESITER(p(x), y, u)
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(z))
   IF(even, x, y, z, u) -> TIMESITER(half(x), y, half(s(z)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3, x_4, x_5)) = [4]x_1 + x_2
   POL(TIMESITER(x_1, x_2, x_3)) = [1/4] + [2]x_1
   POL(check(x_1)) = [1/4]x_1
   POL(even) = [1/4]
   POL(half(x_1)) = [1/2]x_1
   POL(odd) = [1/4]
   POL(p(x_1)) = [1/2]x_1
   POL(plus(x_1, x_2)) = 0
   POL(s(x_1)) = [1] + [2]x_1
   POL(zero) = 0
The value of delta used in the strict ordering is 1/4.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   p(s(x)) -> x
   p(0) -> 0
   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))


----------------------------------------

(34)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   half(0) -> 0
   half(s(0)) -> 0
   half(s(s(x))) -> s(half(x))
   p(s(x)) -> x
   p(0) -> 0
   check(0) -> zero
   check(s(0)) -> odd
   check(s(s(0))) -> even
   check(s(s(s(x)))) -> check(s(x))
   plus(0, y) -> y
   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   check(0)
   check(s(0))
   check(s(s(0)))
   check(s(s(s(x0))))
   half(0)
   half(s(0))
   half(s(s(x0)))
   plus(0, x0)
   plus(s(x0), x1)
   p(s(x0))
   p(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(36)
YES
