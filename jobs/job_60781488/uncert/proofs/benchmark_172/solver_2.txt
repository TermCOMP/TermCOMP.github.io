YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bLYGb.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   f(s(x), y) -> f(x, s(x))
   f(x, s(y)) -> f(y, x)
   f(x, y) -> ack(x, y)
   ack(s(x), y) -> f(x, x)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACK(s(x), 0) -> ACK(x, s(0))
   ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
   ACK(s(x), s(y)) -> ACK(s(x), y)
   F(s(x), y) -> F(x, s(x))
   F(x, s(y)) -> F(y, x)
   F(x, y) -> ACK(x, y)
   ACK(s(x), y) -> F(x, x)

The TRS R consists of the following rules:

   ack(0, y) -> s(y)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   f(s(x), y) -> f(x, s(x))
   f(x, s(y)) -> f(y, x)
   f(x, y) -> ack(x, y)
   ack(s(x), y) -> f(x, x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACK(s(x), s(y)) -> ACK(s(x), y)
The graph contains the following edges 1 >= 1, 2 > 2


*F(x, y) -> ACK(x, y)
The graph contains the following edges 1 >= 1, 2 >= 2


*ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
The graph contains the following edges 1 > 1


*ACK(s(x), y) -> F(x, x)
The graph contains the following edges 1 > 1, 1 > 2


*ACK(s(x), 0) -> ACK(x, s(0))
The graph contains the following edges 1 > 1


*F(s(x), y) -> F(x, s(x))
The graph contains the following edges 1 > 1, 1 >= 2


*F(x, s(y)) -> F(y, x)
The graph contains the following edges 2 > 1, 1 >= 2


----------------------------------------

(4)
YES
