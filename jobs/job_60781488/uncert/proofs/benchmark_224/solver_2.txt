YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/w8gVh.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) UsableRulesProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) TransformationProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) TransformationProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) TransformationProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) TransformationProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) TransformationProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) TransformationProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) TransformationProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) TransformationProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) UsableRulesProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) TransformationProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) UsableRulesProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) QReductionProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) RemovalProof [SOUND, 0 ms]
        (57) QDP
        (58) NonInfProof [EQUIVALENT, 0 ms]
        (59) QDP
        (60) DependencyGraphProof [EQUIVALENT, 0 ms]
        (61) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   1024 -> 1024_1(0)
   1024_1(x) -> if(lt(x, 10), x)
   if(true, x) -> double(1024_1(s(x)))
   if(false, x) -> s(0)
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   10 -> double(s(double(s(s(0)))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   1024 -> 1024_1(0)
   1024_1(x) -> if(lt(x, 10), x)
   if(true, x) -> double(1024_1(s(x)))
   if(false, x) -> s(0)
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   10 -> double(s(double(s(s(0)))))

The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   1024^1 -> 1024_1^1(0)
   1024_1^1(x) -> IF(lt(x, 10), x)
   1024_1^1(x) -> LT(x, 10)
   1024_1^1(x) -> 10^1
   IF(true, x) -> DOUBLE(1024_1(s(x)))
   IF(true, x) -> 1024_1^1(s(x))
   LT(s(x), s(y)) -> LT(x, y)
   DOUBLE(s(x)) -> DOUBLE(x)
   10^1 -> DOUBLE(s(double(s(s(0)))))
   10^1 -> DOUBLE(s(s(0)))

The TRS R consists of the following rules:

   1024 -> 1024_1(0)
   1024_1(x) -> if(lt(x, 10), x)
   if(true, x) -> double(1024_1(s(x)))
   if(false, x) -> s(0)
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   10 -> double(s(double(s(s(0)))))

The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

The TRS R consists of the following rules:

   1024 -> 1024_1(0)
   1024_1(x) -> if(lt(x, 10), x)
   if(true, x) -> double(1024_1(s(x)))
   if(false, x) -> s(0)
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   10 -> double(s(double(s(s(0)))))

The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DOUBLE(s(x)) -> DOUBLE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DOUBLE(s(x)) -> DOUBLE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

The TRS R consists of the following rules:

   1024 -> 1024_1(0)
   1024_1(x) -> if(lt(x, 10), x)
   if(true, x) -> double(1024_1(s(x)))
   if(false, x) -> s(0)
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   10 -> double(s(double(s(s(0)))))

The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LT(s(x), s(y)) -> LT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LT(s(x), s(y)) -> LT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, 10), x)

The TRS R consists of the following rules:

   1024 -> 1024_1(0)
   1024_1(x) -> if(lt(x, 10), x)
   if(true, x) -> double(1024_1(s(x)))
   if(false, x) -> s(0)
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0
   double(s(x)) -> s(s(double(x)))
   10 -> double(s(double(s(s(0)))))

The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, 10), x)

The TRS R consists of the following rules:

   10 -> double(s(double(s(s(0)))))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0

The set Q consists of the following terms:

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)
   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   1024
   1024_1(x0)
   if(true, x0)
   if(false, x0)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, 10), x)

The TRS R consists of the following rules:

   10 -> double(s(double(s(s(0)))))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, 10), x) at position [0,1] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, double(s(double(s(s(0)))))), x),1024_1^1(x) -> IF(lt(x, double(s(double(s(s(0)))))), x))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, double(s(double(s(s(0)))))), x)

The TRS R consists of the following rules:

   10 -> double(s(double(s(s(0)))))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(s(x)) -> s(s(double(x)))
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, double(s(double(s(s(0)))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))
   10

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   10


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, double(s(double(s(s(0)))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, double(s(double(s(s(0)))))), x) at position [0,1] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(double(double(s(s(0))))))), x),1024_1^1(x) -> IF(lt(x, s(s(double(double(s(s(0))))))), x))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(double(double(s(s(0))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(double(double(s(s(0))))))), x) at position [0,1,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(double(s(s(double(s(0)))))))), x),1024_1^1(x) -> IF(lt(x, s(s(double(s(s(double(s(0)))))))), x))


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(double(s(s(double(s(0)))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(double(s(s(double(s(0)))))))), x) at position [0,1,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(double(s(double(s(0))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(double(s(double(s(0))))))))), x))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(double(s(double(s(0))))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(s(s(double(s(double(s(0))))))))), x) at position [0,1,0,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(double(s(0)))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(double(s(0)))))))))), x))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(double(s(0)))))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(double(s(0)))))))))), x) at position [0,1,0,0,0,0,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(s(s(double(0))))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(s(s(double(0))))))))))), x))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(s(s(double(0))))))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(double(s(s(double(0))))))))))), x) at position [0,1,0,0,0,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(double(s(double(0)))))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(double(s(double(0)))))))))))), x))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(double(s(double(0)))))))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(double(s(double(0)))))))))))), x) at position [0,1,0,0,0,0,0,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(double(0))))))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(double(0))))))))))))), x))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(double(0))))))))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(double(0))))))))))))), x) at position [0,1,0,0,0,0,0,0,0,0,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(0)))))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(0)))))))))))), x))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(0)))))))))))), x)

The TRS R consists of the following rules:

   double(s(x)) -> s(s(double(x)))
   lt(0, s(y)) -> true
   lt(x, 0) -> false
   lt(s(x), s(y)) -> lt(x, y)
   double(0) -> 0

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(0)))))))))))), x)

The TRS R consists of the following rules:

   double(0) -> 0
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   lt(x, 0) -> false

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule 1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(double(0)))))))))))), x) at position [0,1,0,0,0,0,0,0,0,0,0,0] we obtained the following new rules [LPAR04]:

   (1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(0))))))))))), x),1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(0))))))))))), x))


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(0))))))))))), x)

The TRS R consists of the following rules:

   double(0) -> 0
   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   lt(x, 0) -> false

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(0))))))))))), x)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   lt(x, 0) -> false

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))
   double(0)
   double(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   double(0)
   double(s(x0))


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> 1024_1^1(s(x))
   1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(0))))))))))), x)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   lt(x, 0) -> false

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) RemovalProof (SOUND)
In the following pairs the term without variables s(s(s(s(s(s(s(s(s(s(0)))))))))) is replaced by the fresh variable x_removed.

Pair: 1024_1^1(x) -> IF(lt(x, s(s(s(s(s(s(s(s(s(s(0))))))))))), x)

Positions in right side of the pair: *[0,1]The new variable was added to all pairs as a new argument[CONREM].
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, x_removed) -> 1024_1^1(s(x), x_removed)
   1024_1^1(x, x_removed) -> IF(lt(x, x_removed), x, x_removed)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   lt(x, 0) -> false

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF(true, x, x_removed) -> 1024_1^1(s(x), x_removed) the following chains were created:
*We consider the chain 1024_1^1(x2, x3) -> IF(lt(x2, x3), x2, x3), IF(true, x4, x5) -> 1024_1^1(s(x4), x5) which results in the following constraint:

(1)    (IF(lt(x2, x3), x2, x3)=IF(true, x4, x5)  ==>  IF(true, x4, x5)_>=_1024_1^1(s(x4), x5))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (lt(x2, x3)=true  ==>  IF(true, x2, x3)_>=_1024_1^1(s(x2), x3))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on lt(x2, x3)=true which results in the following new constraints:

(3)    (true=true  ==>  IF(true, 0, s(x12))_>=_1024_1^1(s(0), s(x12)))

(4)    (lt(x14, x13)=true & (lt(x14, x13)=true  ==>  IF(true, x14, x13)_>=_1024_1^1(s(x14), x13))  ==>  IF(true, s(x14), s(x13))_>=_1024_1^1(s(s(x14)), s(x13)))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(true, 0, s(x12))_>=_1024_1^1(s(0), s(x12)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (lt(x14, x13)=true  ==>  IF(true, x14, x13)_>=_1024_1^1(s(x14), x13)) with sigma = [ ] which results in the following new constraint:

(6)    (IF(true, x14, x13)_>=_1024_1^1(s(x14), x13)  ==>  IF(true, s(x14), s(x13))_>=_1024_1^1(s(s(x14)), s(x13)))








For Pair 1024_1^1(x, x_removed) -> IF(lt(x, x_removed), x, x_removed) the following chains were created:
*We consider the chain IF(true, x6, x7) -> 1024_1^1(s(x6), x7), 1024_1^1(x8, x9) -> IF(lt(x8, x9), x8, x9) which results in the following constraint:

(1)    (1024_1^1(s(x6), x7)=1024_1^1(x8, x9)  ==>  1024_1^1(x8, x9)_>=_IF(lt(x8, x9), x8, x9))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (1024_1^1(s(x6), x7)_>=_IF(lt(s(x6), x7), s(x6), x7))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF(true, x, x_removed) -> 1024_1^1(s(x), x_removed)

*(IF(true, 0, s(x12))_>=_1024_1^1(s(0), s(x12)))


*(IF(true, x14, x13)_>=_1024_1^1(s(x14), x13)  ==>  IF(true, s(x14), s(x13))_>=_1024_1^1(s(s(x14)), s(x13)))




*1024_1^1(x, x_removed) -> IF(lt(x, x_removed), x, x_removed)

*(1024_1^1(s(x6), x7)_>=_IF(lt(s(x6), x7), s(x6), x7))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(1024_1^1(x_1, x_2)) = -1 - x_1 + x_2
   POL(IF(x_1, x_2, x_3)) = -1 - x_1 - x_2 + x_3
   POL(c) = -2
   POL(false) = 0
   POL(lt(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   IF(true, x, x_removed) -> 1024_1^1(s(x), x_removed)
The following pairs are in P_bound:
   IF(true, x, x_removed) -> 1024_1^1(s(x), x_removed)
The following rules are usable:
   true -> lt(0, s(y))
   lt(x, y) -> lt(s(x), s(y))
   false -> lt(x, 0)

----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   1024_1^1(x, x_removed) -> IF(lt(x, x_removed), x, x_removed)

The TRS R consists of the following rules:

   lt(0, s(y)) -> true
   lt(s(x), s(y)) -> lt(x, y)
   lt(x, 0) -> false

The set Q consists of the following terms:

   lt(0, s(x0))
   lt(x0, 0)
   lt(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(61)
TRUE
