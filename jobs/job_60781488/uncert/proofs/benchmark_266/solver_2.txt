YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/e6MR0.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 8 ms]
        (12) QDP
        (13) DependencyGraphProof [EQUIVALENT, 0 ms]
        (14) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   nonZero(0) -> false
   nonZero(s(x)) -> true
   p(s(0)) -> 0
   p(s(s(x))) -> s(p(s(x)))
   id_inc(x) -> x
   id_inc(x) -> s(x)
   random(x) -> rand(x, 0)
   rand(x, y) -> if(nonZero(x), x, y)
   if(false, x, y) -> y
   if(true, x, y) -> rand(p(x), id_inc(y))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))
   RANDOM(x) -> RAND(x, 0)
   RAND(x, y) -> IF(nonZero(x), x, y)
   RAND(x, y) -> NONZERO(x)
   IF(true, x, y) -> RAND(p(x), id_inc(y))
   IF(true, x, y) -> P(x)
   IF(true, x, y) -> ID_INC(y)

The TRS R consists of the following rules:

   nonZero(0) -> false
   nonZero(s(x)) -> true
   p(s(0)) -> 0
   p(s(s(x))) -> s(p(s(x)))
   id_inc(x) -> x
   id_inc(x) -> s(x)
   random(x) -> rand(x, 0)
   rand(x, y) -> if(nonZero(x), x, y)
   if(false, x, y) -> y
   if(true, x, y) -> rand(p(x), id_inc(y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))

The TRS R consists of the following rules:

   nonZero(0) -> false
   nonZero(s(x)) -> true
   p(s(0)) -> 0
   p(s(s(x))) -> s(p(s(x)))
   id_inc(x) -> x
   id_inc(x) -> s(x)
   random(x) -> rand(x, 0)
   rand(x, y) -> if(nonZero(x), x, y)
   if(false, x, y) -> y
   if(true, x, y) -> rand(p(x), id_inc(y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(s(s(x))) -> P(s(x))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P(s(s(x))) -> P(s(x))
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> RAND(p(x), id_inc(y))
   RAND(x, y) -> IF(nonZero(x), x, y)

The TRS R consists of the following rules:

   nonZero(0) -> false
   nonZero(s(x)) -> true
   p(s(0)) -> 0
   p(s(s(x))) -> s(p(s(x)))
   id_inc(x) -> x
   id_inc(x) -> s(x)
   random(x) -> rand(x, 0)
   rand(x, y) -> if(nonZero(x), x, y)
   if(false, x, y) -> y
   if(true, x, y) -> rand(p(x), id_inc(y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IF(true, x, y) -> RAND(p(x), id_inc(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic integers [ARCTIC,STERNAGEL_THIEMANN_RTA14]:

   <<<
 POL(IF(x_1, x_2, x_3)) =  	[[-1A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[-I]] 	* 	x_3
>>>

   <<<
 POL(true) =  	[[1A]]
>>>

   <<<
 POL(RAND(x_1, x_2)) =  	[[-1A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2
>>>

   <<<
 POL(p(x_1)) =  	[[0A]] 	 +  	[[-1A]] 	* 	x_1
>>>

   <<<
 POL(id_inc(x_1)) =  	[[0A]] 	 +  	[[-1A]] 	* 	x_1
>>>

   <<<
 POL(nonZero(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[1A]] 	 +  	[[1A]] 	* 	x_1
>>>

   <<<
 POL(0) =  	[[0A]]
>>>

   <<<
 POL(false) =  	[[0A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   p(s(0)) -> 0
   p(s(s(x))) -> s(p(s(x)))
   nonZero(0) -> false
   nonZero(s(x)) -> true


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(x, y) -> IF(nonZero(x), x, y)

The TRS R consists of the following rules:

   nonZero(0) -> false
   nonZero(s(x)) -> true
   p(s(0)) -> 0
   p(s(s(x))) -> s(p(s(x)))
   id_inc(x) -> x
   id_inc(x) -> s(x)
   random(x) -> rand(x, 0)
   rand(x, y) -> if(nonZero(x), x, y)
   if(false, x, y) -> y
   if(true, x, y) -> rand(p(x), id_inc(y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(14)
TRUE
