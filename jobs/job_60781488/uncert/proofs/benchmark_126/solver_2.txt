YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oL55k.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) ATransformationProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) QDPApplicativeOrderProof [EQUIVALENT, 12 ms]
        (21) QDP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, x), y)
   APP(app(minus, app(s, x)), app(s, y)) -> APP(minus, x)
   APP(double, app(s, x)) -> APP(s, app(s, app(double, x)))
   APP(double, app(s, x)) -> APP(s, app(double, x))
   APP(double, app(s, x)) -> APP(double, x)
   APP(app(plus, app(s, x)), y) -> APP(s, app(app(plus, x), y))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(s, x)), y) -> APP(plus, x)
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), app(s, y))
   APP(app(plus, app(s, x)), y) -> APP(s, y)
   APP(app(plus, app(s, x)), y) -> APP(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, app(app(minus, x), y)), app(double, y))
   APP(app(plus, app(s, x)), y) -> APP(plus, app(app(minus, x), y))
   APP(app(plus, app(s, x)), y) -> APP(app(minus, x), y)
   APP(app(plus, app(s, x)), y) -> APP(minus, x)
   APP(app(plus, app(s, x)), y) -> APP(double, y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 20 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(double, app(s, x)) -> APP(double, x)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(double, app(s, x)) -> APP(double, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   double(s(x)) -> double(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*double(s(x)) -> double(x)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, x), y)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(minus, app(s, x)), app(s, y)) -> APP(app(minus, x), y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*minus(s(x), s(y)) -> minus(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), app(s, y))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(s, x)), y) -> APP(app(plus, app(app(minus, x), y)), app(double, y))

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPApplicativeOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04].Here, we combined the reduction pair processor [LPAR04,JAR06] with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   (plus1(s(x), y),plus1(x, s(y)))
   (plus1(s(x), y),plus1(x, y))
   (plus1(s(x), y),plus1(minus(x, y), double(y)))

 The a-transformed usable rules are 

   double(0) -> 0
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)




The following pairs can be oriented strictly and are deleted.

   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), app(s, y))
   APP(app(plus, app(s, x)), y) -> APP(app(plus, x), y)
   APP(app(plus, app(s, x)), y) -> APP(app(plus, app(app(minus, x), y)), app(double, y))
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( double_1(x_1) ) = x_1 + 2
POL( 0 ) = 2
POL( s_1(x_1) ) = x_1 + 2
POL( minus_2(x_1, x_2) ) = x_1 + 1
POL( plus1_2(x_1, x_2) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(double, 0) -> 0
   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)


----------------------------------------

(21)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(minus, x), 0) -> x
   app(app(minus, app(s, x)), app(s, y)) -> app(app(minus, x), y)
   app(double, 0) -> 0
   app(double, app(s, x)) -> app(s, app(s, app(double, x)))
   app(app(plus, 0), y) -> y
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, x), y))
   app(app(plus, app(s, x)), y) -> app(app(plus, x), app(s, y))
   app(app(plus, app(s, x)), y) -> app(s, app(app(plus, app(app(minus, x), y)), app(double, y)))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(26)
YES
