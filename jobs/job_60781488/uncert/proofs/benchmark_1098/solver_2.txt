YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iGh0r.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 48 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   from(X) -> cons(X, n__from(n__s(X)))
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__from(X)) -> FROM(activate(X))
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   from(X) -> cons(X, n__from(n__s(X)))
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   from(X) -> cons(X, n__from(n__s(X)))
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVATE(n__first(X1, X2)) -> FIRST(activate(X1), activate(X2))
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X1)
   ACTIVATE(n__first(X1, X2)) -> ACTIVATE(X2)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
ACTIVATE(x1)  =  ACTIVATE(x1)

n__first(x1, x2)  =  n__first(x1, x2)

FIRST(x1, x2)  =  FIRST(x2)

activate(x1)  =  x1

s(x1)  =  x1

cons(x1, x2)  =  x2

n__from(x1)  =  n__from(x1)

n__s(x1)  =  x1

first(x1, x2)  =  first(x1, x2)

from(x1)  =  from(x1)

0  =  0

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: [n__first_2, first_2] > [ACTIVATE_1, FIRST_1]
[n__first_2, first_2] > nil
[n__from_1, from_1] > [ACTIVATE_1, FIRST_1]

Status: ACTIVATE_1: multiset status
n__first_2: multiset status
FIRST_1: multiset status
n__from_1: multiset status
first_2: multiset status
from_1: multiset status
0: multiset status
nil: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X
   from(X) -> cons(X, n__from(n__s(X)))
   from(X) -> n__from(X)
   first(0, X) -> nil
   first(X1, X2) -> n__first(X1, X2)
   s(X) -> n__s(X)
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(s(X), cons(Y, Z)) -> ACTIVATE(Z)
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   from(X) -> cons(X, n__from(n__s(X)))
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   first(0, X) -> nil
   first(s(X), cons(Y, Z)) -> cons(Y, n__first(X, activate(Z)))
   from(X) -> cons(X, n__from(n__s(X)))
   first(X1, X2) -> n__first(X1, X2)
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__first(X1, X2)) -> first(activate(X1), activate(X2))
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
