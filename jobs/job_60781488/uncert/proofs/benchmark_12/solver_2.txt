YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/x1O5i.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) MRRProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) MRRProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   times(x, plus(y, s(z))) -> plus(times(x, plus(y, times(s(z), 0))), times(x, s(z)))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(times(x, y), x)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(x, plus(y, s(z))) -> PLUS(times(x, plus(y, times(s(z), 0))), times(x, s(z)))
   TIMES(x, plus(y, s(z))) -> TIMES(x, plus(y, times(s(z), 0)))
   TIMES(x, plus(y, s(z))) -> PLUS(y, times(s(z), 0))
   TIMES(x, plus(y, s(z))) -> TIMES(s(z), 0)
   TIMES(x, plus(y, s(z))) -> TIMES(x, s(z))
   TIMES(x, s(y)) -> PLUS(times(x, y), x)
   TIMES(x, s(y)) -> TIMES(x, y)
   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   times(x, plus(y, s(z))) -> plus(times(x, plus(y, times(s(z), 0))), times(x, s(z)))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(times(x, y), x)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

The TRS R consists of the following rules:

   times(x, plus(y, s(z))) -> plus(times(x, plus(y, times(s(z), 0))), times(x, s(z)))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(times(x, y), x)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(x, s(y)) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(x, s(y)) -> PLUS(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(x, plus(y, s(z))) -> TIMES(x, s(z))
   TIMES(x, s(y)) -> TIMES(x, y)
   TIMES(x, plus(y, s(z))) -> TIMES(x, plus(y, times(s(z), 0)))

The TRS R consists of the following rules:

   times(x, plus(y, s(z))) -> plus(times(x, plus(y, times(s(z), 0))), times(x, s(z)))
   times(x, 0) -> 0
   times(x, s(y)) -> plus(times(x, y), x)
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(x, plus(y, s(z))) -> TIMES(x, s(z))
   TIMES(x, s(y)) -> TIMES(x, y)
   TIMES(x, plus(y, s(z))) -> TIMES(x, plus(y, times(s(z), 0)))

The TRS R consists of the following rules:

   times(x, 0) -> 0
   plus(x, 0) -> x
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   TIMES(x, plus(y, s(z))) -> TIMES(x, s(z))

Strictly oriented rules of the TRS R:

   plus(x, 0) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(TIMES(x_1, x_2)) = x_1 + 2*x_2
   POL(plus(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(s(x_1)) = x_1
   POL(times(x_1, x_2)) = x_1 + 2*x_2


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(x, s(y)) -> TIMES(x, y)
   TIMES(x, plus(y, s(z))) -> TIMES(x, plus(y, times(s(z), 0)))

The TRS R consists of the following rules:

   times(x, 0) -> 0
   plus(x, s(y)) -> s(plus(x, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   TIMES(x, s(y)) -> TIMES(x, y)

Strictly oriented rules of the TRS R:

   plus(x, s(y)) -> s(plus(x, y))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(TIMES(x_1, x_2)) = x_1 + 2*x_2
   POL(plus(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 2 + x_1
   POL(times(x_1, x_2)) = x_1 + x_2


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(x, plus(y, s(z))) -> TIMES(x, plus(y, times(s(z), 0)))

The TRS R consists of the following rules:

   times(x, 0) -> 0

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(18)
TRUE
