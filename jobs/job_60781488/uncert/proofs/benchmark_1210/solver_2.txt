NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Yqc91.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 33 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 2 ms]
(8) QTRS
(9) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(10) QTRS
(11) DependencyPairsProof [EQUIVALENT, 0 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) AND
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QReductionProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) UsableRulesProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QReductionProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) TransformationProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) TransformationProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) UsableRulesProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QReductionProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) TransformationProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) NonTerminationLoopProof [COMPLETE, 0 ms]
        (44) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__and(tt, X) -> mark(X)
   a__length(nil) -> 0
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(tt) -> tt
   mark(nil) -> nil
   mark(s(X)) -> s(mark(X))
   a__zeros -> zeros
   a__and(X1, X2) -> and(X1, X2)
   a__length(X) -> length(X)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__and(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(a__length(x_1)) = 2 + x_1
   POL(a__zeros) = 0
   POL(and(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(length(x_1)) = 1 + x_1
   POL(mark(x_1)) = 2*x_1
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(tt) = 2
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__and(tt, X) -> mark(X)
   a__length(nil) -> 0
   mark(tt) -> tt
   mark(nil) -> nil
   a__length(X) -> length(X)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(length(X)) -> a__length(mark(X))
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__zeros -> zeros
   a__and(X1, X2) -> and(X1, X2)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__and(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(a__length(x_1)) = 2*x_1
   POL(a__zeros) = 2
   POL(and(x_1, x_2)) = 1 + x_1 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(length(x_1)) = 2 + 2*x_1
   POL(mark(x_1)) = 2*x_1
   POL(s(x_1)) = x_1
   POL(zeros) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(length(X)) -> a__length(mark(X))
   a__zeros -> zeros
   a__and(X1, X2) -> and(X1, X2)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(and(X1, X2)) -> a__and(mark(X1), X2)
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__and(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(a__length(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(and(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(mark(x_1)) = x_1
   POL(s(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(and(X1, X2)) -> a__and(mark(X1), X2)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__length(x_1)) = 2*x_1
   POL(a__zeros) = 2
   POL(cons(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(mark(x_1)) = 2 + 2*x_1
   POL(s(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))

Q is empty.

----------------------------------------

(9) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))

The set Q consists of the following terms:

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))


----------------------------------------

(11) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(N, L)) -> A__LENGTH(mark(L))
   A__LENGTH(cons(N, L)) -> MARK(L)
   MARK(zeros) -> A__ZEROS
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))

The set Q consists of the following terms:

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))

The set Q consists of the following terms:

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)

R is empty.
The set Q consists of the following terms:

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(s(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(N, L)) -> A__LENGTH(mark(L))

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)
   a__length(cons(N, L)) -> s(a__length(mark(L)))
   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))

The set Q consists of the following terms:

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(N, L)) -> A__LENGTH(mark(L))

The TRS R consists of the following rules:

   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))
   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros
   a__length(cons(x0, x1))
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a__length(cons(x0, x1))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(N, L)) -> A__LENGTH(mark(L))

The TRS R consists of the following rules:

   mark(zeros) -> a__zeros
   mark(s(X)) -> s(mark(X))
   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mark(s(X)) -> s(mark(X))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__LENGTH(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(mark(x_1)) = 2*x_1
   POL(s(x_1)) = 1 + 2*x_1
   POL(zeros) = 0


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(N, L)) -> A__LENGTH(mark(L))

The TRS R consists of the following rules:

   mark(zeros) -> a__zeros
   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule A__LENGTH(cons(N, L)) -> A__LENGTH(mark(L)) at position [0] we obtained the following new rules [LPAR04]:

   (A__LENGTH(cons(y0, zeros)) -> A__LENGTH(a__zeros),A__LENGTH(cons(y0, zeros)) -> A__LENGTH(a__zeros))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(y0, zeros)) -> A__LENGTH(a__zeros)

The TRS R consists of the following rules:

   mark(zeros) -> a__zeros
   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(y0, zeros)) -> A__LENGTH(a__zeros)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros
   mark(zeros)
   mark(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mark(zeros)
   mark(s(x0))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(y0, zeros)) -> A__LENGTH(a__zeros)

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule A__LENGTH(cons(y0, zeros)) -> A__LENGTH(a__zeros) at position [0] we obtained the following new rules [LPAR04]:

   (A__LENGTH(cons(y0, zeros)) -> A__LENGTH(cons(0, zeros)),A__LENGTH(cons(y0, zeros)) -> A__LENGTH(cons(0, zeros)))


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(y0, zeros)) -> A__LENGTH(cons(0, zeros))

The TRS R consists of the following rules:

   a__zeros -> cons(0, zeros)

The set Q consists of the following terms:

   a__zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(y0, zeros)) -> A__LENGTH(cons(0, zeros))

R is empty.
The set Q consists of the following terms:

   a__zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a__zeros


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(y0, zeros)) -> A__LENGTH(cons(0, zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule A__LENGTH(cons(y0, zeros)) -> A__LENGTH(cons(0, zeros)) we obtained the following new rules [LPAR04]:

   (A__LENGTH(cons(0, zeros)) -> A__LENGTH(cons(0, zeros)),A__LENGTH(cons(0, zeros)) -> A__LENGTH(cons(0, zeros)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__LENGTH(cons(0, zeros)) -> A__LENGTH(cons(0, zeros))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = A__LENGTH(cons(0, zeros)) evaluates to  t =A__LENGTH(cons(0, zeros))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from A__LENGTH(cons(0, zeros)) to A__LENGTH(cons(0, zeros)).




----------------------------------------

(44)
NO
