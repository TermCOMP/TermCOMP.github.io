YES

Problem 1: 

(VAR vu95NonEmpty N X X1 X2 XS)
(RULES
num2nd(cons(X,XS)) -> head(activate(XS))
activate(nu95u95from(X)) -> from(X)
activate(nu95u95take(X1,X2)) -> take(X1,X2)
activate(X) -> X
from(X) -> cons(X,nu95u95from(s(X)))
from(X) -> nu95u95from(X)
head(cons(X,XS)) -> X
sel(num0,cons(X,XS)) -> X
sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
take(num0,XS) -> nil
take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
take(X1,X2) -> nu95u95take(X1,X2)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 NUM2ND(cons(X,XS)) -> ACTIVATE(XS)
 NUM2ND(cons(X,XS)) -> HEAD(activate(XS))
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(X1,X2)
 SEL(s(N),cons(X,XS)) -> ACTIVATE(XS)
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)

Problem 1: 

SCC Processor:
-> Pairs:
 NUM2ND(cons(X,XS)) -> ACTIVATE(XS)
 NUM2ND(cons(X,XS)) -> HEAD(activate(XS))
 ACTIVATE(nu95u95from(X)) -> FROM(X)
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(X1,X2)
 SEL(s(N),cons(X,XS)) -> ACTIVATE(XS)
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(X1,X2)
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)
->->Cycle:
->->-> Pairs:
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
->->-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ACTIVATE(nu95u95take(X1,X2)) -> TAKE(X1,X2)
 TAKE(s(N),cons(X,XS)) -> ACTIVATE(XS)
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)
->Projection:
 pi(ACTIVATE) = 1
 pi(TAKE) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 SEL(s(N),cons(X,XS)) -> SEL(N,activate(XS))
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)
->Projection:
 pi(SEL) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 num2nd(cons(X,XS)) -> head(activate(XS))
 activate(nu95u95from(X)) -> from(X)
 activate(nu95u95take(X1,X2)) -> take(X1,X2)
 activate(X) -> X
 from(X) -> cons(X,nu95u95from(s(X)))
 from(X) -> nu95u95from(X)
 head(cons(X,XS)) -> X
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
 take(num0,XS) -> nil
 take(s(N),cons(X,XS)) -> cons(X,nu95u95take(N,activate(XS)))
 take(X1,X2) -> nu95u95take(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
