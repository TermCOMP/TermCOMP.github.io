YES

Problem 1: 

(VAR vu95NonEmpty M N X X1 X2)
(RULES
active(and(tt,X)) -> mark(X)
active(plus(N,s(M))) -> mark(s(plus(N,M)))
active(plus(N,num0)) -> mark(N)
and(active(X1),X2) -> and(X1,X2)
and(mark(X1),X2) -> and(X1,X2)
and(X1,active(X2)) -> and(X1,X2)
and(X1,mark(X2)) -> and(X1,X2)
mark(and(X1,X2)) -> active(and(mark(X1),X2))
mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
mark(s(X)) -> active(s(mark(X)))
mark(num0) -> active(num0)
mark(tt) -> active(tt)
plus(active(X1),X2) -> plus(X1,X2)
plus(mark(X1),X2) -> plus(X1,X2)
plus(X1,active(X2)) -> plus(X1,X2)
plus(X1,mark(X2)) -> plus(X1,X2)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(and(tt,X)) -> MARK(X)
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,s(M))) -> PLUS(N,M)
 ACTIVE(plus(N,s(M))) -> S(plus(N,M))
 ACTIVE(plus(N,num0)) -> MARK(N)
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(plus(X1,X2)) -> PLUS(mark(X1),mark(X2))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 PLUS(active(X1),X2) -> PLUS(X1,X2)
 PLUS(mark(X1),X2) -> PLUS(X1,X2)
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(and(tt,X)) -> MARK(X)
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,s(M))) -> PLUS(N,M)
 ACTIVE(plus(N,s(M))) -> S(plus(N,M))
 ACTIVE(plus(N,num0)) -> MARK(N)
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(plus(X1,X2)) -> PLUS(mark(X1),mark(X2))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 PLUS(active(X1),X2) -> PLUS(X1,X2)
 PLUS(mark(X1),X2) -> PLUS(X1,X2)
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 PLUS(active(X1),X2) -> PLUS(X1,X2)
 PLUS(mark(X1),X2) -> PLUS(X1,X2)
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->->Cycle:
->->-> Pairs:
 ACTIVE(and(tt,X)) -> MARK(X)
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)


The problem is decomposed in 4 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(S) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 PLUS(active(X1),X2) -> PLUS(X1,X2)
 PLUS(mark(X1),X2) -> PLUS(X1,X2)
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(PLUS) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.2: 

Subterm Processor:
-> Pairs:
 PLUS(X1,active(X2)) -> PLUS(X1,X2)
 PLUS(X1,mark(X2)) -> PLUS(X1,X2)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(PLUS) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 AND(active(X1),X2) -> AND(X1,X2)
 AND(mark(X1),X2) -> AND(X1,X2)
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(AND) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.3: 

Subterm Processor:
-> Pairs:
 AND(X1,active(X2)) -> AND(X1,X2)
 AND(X1,mark(X2)) -> AND(X1,X2)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(AND) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(and(tt,X)) -> MARK(X)
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[and](X1,X2) = 2.X1 + X2 + 2
[mark](X) = X
[plus](X1,X2) = 2.X1 + 2.X2 + 2
[s](X) = X + 2
[num0] = 2
[fSNonEmpty] = 0
[tt] = 2
[ACTIVE](X) = 2.X + 2
[AND](X1,X2) = 0
[MARK](X) = 2.X + 2
[PLUS](X1,X2) = 0
[S](X) = 0

Problem 1.4: 

SCC Processor:
-> Pairs:
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.4: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(plus(N,s(M))) -> MARK(s(plus(N,M)))
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[and](X1,X2) = X1 + 2.X2 + 2
[mark](X) = X
[plus](X1,X2) = 2.X1 + 2.X2
[s](X) = X + 1
[num0] = 2
[fSNonEmpty] = 0
[tt] = 0
[ACTIVE](X) = 2.X + 2
[AND](X1,X2) = 0
[MARK](X) = 2.X + 2
[PLUS](X1,X2) = 0
[S](X) = 0

Problem 1.4: 

SCC Processor:
-> Pairs:
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.4: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(plus(N,num0)) -> MARK(N)
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
-> Usable rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[and](X1,X2) = 2.X1 + 2.X2 + 2
[mark](X) = X
[plus](X1,X2) = 2.X1 + 2.X2 + 2
[s](X) = X
[num0] = 2
[fSNonEmpty] = 0
[tt] = 0
[ACTIVE](X) = 2.X + 1
[AND](X1,X2) = 0
[MARK](X) = 2.X + 2
[PLUS](X1,X2) = 0
[S](X) = 0

Problem 1.4: 

SCC Processor:
-> Pairs:
 MARK(and(X1,X2)) -> ACTIVE(and(mark(X1),X2))
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> ACTIVE(plus(mark(X1),mark(X2)))
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)

Problem 1.4: 

Subterm Processor:
-> Pairs:
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X1)
 MARK(plus(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Projection:
 pi(MARK) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(and(tt,X)) -> mark(X)
 active(plus(N,s(M))) -> mark(s(plus(N,M)))
 active(plus(N,num0)) -> mark(N)
 and(active(X1),X2) -> and(X1,X2)
 and(mark(X1),X2) -> and(X1,X2)
 and(X1,active(X2)) -> and(X1,X2)
 and(X1,mark(X2)) -> and(X1,X2)
 mark(and(X1,X2)) -> active(and(mark(X1),X2))
 mark(plus(X1,X2)) -> active(plus(mark(X1),mark(X2)))
 mark(s(X)) -> active(s(mark(X)))
 mark(num0) -> active(num0)
 mark(tt) -> active(tt)
 plus(active(X1),X2) -> plus(X1,X2)
 plus(mark(X1),X2) -> plus(X1,X2)
 plus(X1,active(X2)) -> plus(X1,X2)
 plus(X1,mark(X2)) -> plus(X1,X2)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
