YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vtWmY.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) QDPOrderProof [EQUIVALENT, 8 ms]
        (16) QDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))
   rev1(x, nil) -> x
   rev1(x, ++(y, z)) -> rev1(y, z)
   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))
   rev1(x, nil) -> x
   rev1(x, ++(y, z)) -> rev1(y, z)
   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))

The set Q consists of the following terms:

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(++(x, y)) -> REV1(x, y)
   REV(++(x, y)) -> REV2(x, y)
   REV1(x, ++(y, z)) -> REV1(y, z)
   REV2(x, ++(y, z)) -> REV(++(x, rev(rev2(y, z))))
   REV2(x, ++(y, z)) -> REV(rev2(y, z))
   REV2(x, ++(y, z)) -> REV2(y, z)

The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))
   rev1(x, nil) -> x
   rev1(x, ++(y, z)) -> rev1(y, z)
   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))

The set Q consists of the following terms:

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(x, ++(y, z)) -> REV1(y, z)

The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))
   rev1(x, nil) -> x
   rev1(x, ++(y, z)) -> rev1(y, z)
   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))

The set Q consists of the following terms:

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(x, ++(y, z)) -> REV1(y, z)

R is empty.
The set Q consists of the following terms:

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV1(x, ++(y, z)) -> REV1(y, z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REV1(x, ++(y, z)) -> REV1(y, z)
The graph contains the following edges 2 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(++(x, y)) -> REV2(x, y)
   REV2(x, ++(y, z)) -> REV(++(x, rev(rev2(y, z))))
   REV2(x, ++(y, z)) -> REV(rev2(y, z))
   REV2(x, ++(y, z)) -> REV2(y, z)

The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))
   rev1(x, nil) -> x
   rev1(x, ++(y, z)) -> rev1(y, z)
   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))

The set Q consists of the following terms:

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REV(++(x, y)) -> REV2(x, y)
   REV2(x, ++(y, z)) -> REV(rev2(y, z))
   REV2(x, ++(y, z)) -> REV2(y, z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
REV(x1)  =  x1

++(x1, x2)  =  ++(x2)

REV2(x1, x2)  =  x2

rev(x1)  =  x1

rev2(x1, x2)  =  x2

nil  =  nil

rev1(x1, x2)  =  rev1


Recursive path order with status [RPO].
Quasi-Precedence: [++_1, rev1]

Status: ++_1: [1]
nil: multiset status
rev1: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))
   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV2(x, ++(y, z)) -> REV(++(x, rev(rev2(y, z))))

The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(++(x, y)) -> ++(rev1(x, y), rev2(x, y))
   rev1(x, nil) -> x
   rev1(x, ++(y, z)) -> rev1(y, z)
   rev2(x, nil) -> nil
   rev2(x, ++(y, z)) -> rev(++(x, rev(rev2(y, z))))

The set Q consists of the following terms:

   rev(nil)
   rev(++(x0, x1))
   rev1(x0, nil)
   rev1(x0, ++(x1, x2))
   rev2(x0, nil)
   rev2(x0, ++(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(18)
TRUE
