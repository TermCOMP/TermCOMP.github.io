YES

Problem 1: 

(VAR vu95NonEmpty l l1 l2 l3 x y z)
(RULES
u42(u42(x,y),z) -> u42(x,u42(y,z))
u42(num0(x),y) -> num0(u42(x,y))
u42(u35,x) -> u35
u42(num1(x),y) -> u43(num0(u42(x,y)),y)
u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
u43(u43(x,y),z) -> u43(x,u43(y,z))
u43(num0(x),num0(y)) -> num0(u43(x,y))
u43(num0(x),num1(y)) -> num1(u43(x,y))
u43(u35,x) -> x
u43(num1(x),num0(y)) -> num1(u43(x,y))
u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
u43(x,u35) -> x
u45(num0(x),num0(y)) -> num0(u45(x,y))
u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
u45(u35,x) -> u35
u45(num1(x),num0(y)) -> num1(u45(x,y))
u45(num1(x),num1(y)) -> num0(u45(x,y))
u45(x,u35) -> x
num0(u35) -> u35
app(cons(x,l1),l2) -> cons(x,app(l1,l2))
app(nil,l) -> l
eq(num0(x),num0(y)) -> eq(x,y)
eq(num0(x),u35) -> eq(x,u35)
eq(num0(x),num1(y)) -> ffalse
eq(u35,num0(y)) -> eq(u35,y)
eq(u35,u35) -> ftrue
eq(u35,num1(y)) -> ffalse
eq(num1(x),num0(y)) -> ffalse
eq(num1(x),u35) -> ffalse
eq(num1(x),num1(y)) -> eq(x,y)
ge(num0(x),num0(y)) -> ge(x,y)
ge(num0(x),num1(y)) -> not(ge(y,x))
ge(u35,num0(x)) -> ge(u35,x)
ge(u35,num1(x)) -> ffalse
ge(num1(x),num0(y)) -> ge(x,y)
ge(num1(x),num1(y)) -> ge(x,y)
ge(x,u35) -> ftrue
if(ffalse,x,y) -> y
if(ftrue,x,y) -> x
ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
inter(nil,x) -> nil
inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
inter(x,nil) -> nil
log(x) -> u45(logu39(x),num1(u35))
logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
logu39(u35) -> u35
logu39(num1(x)) -> u43(logu39(x),num1(u35))
mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
mem(x,nil) -> ffalse
not(ffalse) -> ftrue
not(ftrue) -> ffalse
prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
prod(cons(x,l)) -> u42(x,prod(l))
prod(nil) -> num1(u35)
sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
sum(cons(x,l)) -> u43(x,sum(l))
sum(nil) -> num0(u35)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 U42(u42(x,y),z) -> U42(x,u42(y,z))
 U42(u42(x,y),z) -> U42(y,z)
 U42(num0(x),y) -> U42(x,y)
 U42(num0(x),y) -> NUM0(u42(x,y))
 U42(num1(x),y) -> U42(x,y)
 U42(num1(x),y) -> U43(num0(u42(x,y)),y)
 U42(num1(x),y) -> NUM0(u42(x,y))
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
 U42(x,u43(y,z)) -> U43(u42(x,y),u42(x,z))
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(u43(x,y),z) -> U43(y,z)
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num0(y)) -> NUM0(u43(x,y))
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> NUM0(u43(u43(x,y),num1(u35)))
 U45(num0(x),num0(y)) -> U45(x,y)
 U45(num0(x),num0(y)) -> NUM0(u45(x,y))
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> NUM0(u45(x,y))
 APP(cons(x,l1),l2) -> APP(l1,l2)
 EQ(num0(x),num0(y)) -> EQ(x,y)
 EQ(num0(x),u35) -> EQ(x,u35)
 EQ(u35,num0(y)) -> EQ(u35,y)
 EQ(num1(x),num1(y)) -> EQ(x,y)
 GE(num0(x),num0(y)) -> GE(x,y)
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num0(x),num1(y)) -> NOT(ge(y,x))
 GE(u35,num0(x)) -> GE(u35,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
 IFINTER(ffalse,x,l1,l2) -> INTER(l1,l2)
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> APP(inter(l1,l3),inter(l2,l3))
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(cons(x,l1),l2) -> MEM(x,l2)
 INTER(l1,app(l2,l3)) -> APP(inter(l1,l2),inter(l1,l3))
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
 INTER(l1,cons(x,l2)) -> MEM(x,l1)
 LOG(x) -> U45(logu39(x),num1(u35))
 LOG(x) -> LOGU39(x)
 LOGU39(num0(x)) -> U43(logu39(x),num1(u35))
 LOGU39(num0(x)) -> GE(x,num1(u35))
 LOGU39(num0(x)) -> IF(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 LOGU39(num0(x)) -> LOGU39(x)
 LOGU39(num1(x)) -> U43(logu39(x),num1(u35))
 LOGU39(num1(x)) -> LOGU39(x)
 MEM(x,cons(y,l)) -> EQ(x,y)
 MEM(x,cons(y,l)) -> IF(eq(x,y),ftrue,mem(x,l))
 MEM(x,cons(y,l)) -> MEM(x,l)
 PROD(app(l1,l2)) -> U42(prod(l1),prod(l2))
 PROD(app(l1,l2)) -> PROD(l1)
 PROD(app(l1,l2)) -> PROD(l2)
 PROD(cons(x,l)) -> U42(x,prod(l))
 PROD(cons(x,l)) -> PROD(l)
 SUM(app(l1,l2)) -> U43(sum(l1),sum(l2))
 SUM(app(l1,l2)) -> SUM(l1)
 SUM(app(l1,l2)) -> SUM(l2)
 SUM(cons(x,l)) -> U43(x,sum(l))
 SUM(cons(x,l)) -> SUM(l)
 SUM(nil) -> NUM0(u35)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1: 

SCC Processor:
-> Pairs:
 U42(u42(x,y),z) -> U42(x,u42(y,z))
 U42(u42(x,y),z) -> U42(y,z)
 U42(num0(x),y) -> U42(x,y)
 U42(num0(x),y) -> NUM0(u42(x,y))
 U42(num1(x),y) -> U42(x,y)
 U42(num1(x),y) -> U43(num0(u42(x,y)),y)
 U42(num1(x),y) -> NUM0(u42(x,y))
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
 U42(x,u43(y,z)) -> U43(u42(x,y),u42(x,z))
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(u43(x,y),z) -> U43(y,z)
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num0(y)) -> NUM0(u43(x,y))
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> NUM0(u43(u43(x,y),num1(u35)))
 U45(num0(x),num0(y)) -> U45(x,y)
 U45(num0(x),num0(y)) -> NUM0(u45(x,y))
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> NUM0(u45(x,y))
 APP(cons(x,l1),l2) -> APP(l1,l2)
 EQ(num0(x),num0(y)) -> EQ(x,y)
 EQ(num0(x),u35) -> EQ(x,u35)
 EQ(u35,num0(y)) -> EQ(u35,y)
 EQ(num1(x),num1(y)) -> EQ(x,y)
 GE(num0(x),num0(y)) -> GE(x,y)
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num0(x),num1(y)) -> NOT(ge(y,x))
 GE(u35,num0(x)) -> GE(u35,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
 IFINTER(ffalse,x,l1,l2) -> INTER(l1,l2)
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> APP(inter(l1,l3),inter(l2,l3))
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(cons(x,l1),l2) -> MEM(x,l2)
 INTER(l1,app(l2,l3)) -> APP(inter(l1,l2),inter(l1,l3))
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
 INTER(l1,cons(x,l2)) -> MEM(x,l1)
 LOG(x) -> U45(logu39(x),num1(u35))
 LOG(x) -> LOGU39(x)
 LOGU39(num0(x)) -> U43(logu39(x),num1(u35))
 LOGU39(num0(x)) -> GE(x,num1(u35))
 LOGU39(num0(x)) -> IF(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 LOGU39(num0(x)) -> LOGU39(x)
 LOGU39(num1(x)) -> U43(logu39(x),num1(u35))
 LOGU39(num1(x)) -> LOGU39(x)
 MEM(x,cons(y,l)) -> EQ(x,y)
 MEM(x,cons(y,l)) -> IF(eq(x,y),ftrue,mem(x,l))
 MEM(x,cons(y,l)) -> MEM(x,l)
 PROD(app(l1,l2)) -> U42(prod(l1),prod(l2))
 PROD(app(l1,l2)) -> PROD(l1)
 PROD(app(l1,l2)) -> PROD(l2)
 PROD(cons(x,l)) -> U42(x,prod(l))
 PROD(cons(x,l)) -> PROD(l)
 SUM(app(l1,l2)) -> U43(sum(l1),sum(l2))
 SUM(app(l1,l2)) -> SUM(l1)
 SUM(app(l1,l2)) -> SUM(l2)
 SUM(cons(x,l)) -> U43(x,sum(l))
 SUM(cons(x,l)) -> SUM(l)
 SUM(nil) -> NUM0(u35)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GE(u35,num0(x)) -> GE(u35,x)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 GE(num0(x),num0(y)) -> GE(x,y)
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 EQ(u35,num0(y)) -> EQ(u35,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 EQ(num0(x),u35) -> EQ(x,u35)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 EQ(num0(x),num0(y)) -> EQ(x,y)
 EQ(num1(x),num1(y)) -> EQ(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 MEM(x,cons(y,l)) -> MEM(x,l)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 APP(cons(x,l1),l2) -> APP(l1,l2)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 IFINTER(ffalse,x,l1,l2) -> INTER(l1,l2)
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 U45(num0(x),num0(y)) -> U45(x,y)
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(u43(x,y),z) -> U43(y,z)
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 LOGU39(num0(x)) -> LOGU39(x)
 LOGU39(num1(x)) -> LOGU39(x)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 SUM(app(l1,l2)) -> SUM(l1)
 SUM(app(l1,l2)) -> SUM(l2)
 SUM(cons(x,l)) -> SUM(l)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 U42(u42(x,y),z) -> U42(x,u42(y,z))
 U42(u42(x,y),z) -> U42(y,z)
 U42(num0(x),y) -> U42(x,y)
 U42(num1(x),y) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->->Cycle:
->->-> Pairs:
 PROD(app(l1,l2)) -> PROD(l1)
 PROD(app(l1,l2)) -> PROD(l2)
 PROD(cons(x,l)) -> PROD(l)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)


The problem is decomposed in 14 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 GE(u35,num0(x)) -> GE(u35,x)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(GE) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 GE(num0(x),num0(y)) -> GE(x,y)
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = 0
[u45](X1,X2) = 0
[num0](X) = 2.X + 2
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = X
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 0
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = X1 + 2.X2
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 GE(num0(x),num1(y)) -> GE(y,x)
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 Empty
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = 0
[u45](X1,X2) = 0
[num0](X) = 2.X + 2
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = 2.X
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 0
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 2.X1 + 2.X2
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.2: 

Subterm Processor:
-> Pairs:
 GE(num1(x),num0(y)) -> GE(x,y)
 GE(num1(x),num1(y)) -> GE(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(GE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 EQ(u35,num0(y)) -> EQ(u35,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(EQ) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 EQ(num0(x),u35) -> EQ(x,u35)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(EQ) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 EQ(num0(x),num0(y)) -> EQ(x,y)
 EQ(num1(x),num1(y)) -> EQ(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(EQ) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 MEM(x,cons(y,l)) -> MEM(x,l)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(MEM) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 APP(cons(x,l1),l2) -> APP(l1,l2)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(APP) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Reduction Pair Processor:
-> Pairs:
 IFINTER(ffalse,x,l1,l2) -> INTER(l1,l2)
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = 0
[u45](X1,X2) = 0
[num0](X) = 2.X + 2
[app](X1,X2) = 2.X1 + 2.X2
[eq](X1,X2) = 2
[ge](X1,X2) = 0
[if](X1,X2,X3) = 2.X2 + 2.X3
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 2.X2
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = 1
[cons](X1,X2) = 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 2
[U42](X1,X2) = 0
[U43](X1,X2) = 0
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 2.X3 + 2.X4 + 2
[INTER](X1,X2) = 2.X1 + 2.X2 + 1
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.8: 

Reduction Pair Processor:
-> Pairs:
 IFINTER(ftrue,x,l1,l2) -> INTER(l1,l2)
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = 0
[u45](X1,X2) = 0
[num0](X) = 2.X + 2
[app](X1,X2) = X1 + 2.X2
[eq](X1,X2) = 2.X2
[ge](X1,X2) = 0
[if](X1,X2,X3) = X1 + 2.X2 + 2.X3 + 2
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 2.X2
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 2
[num1](X) = 2.X + 2
[cons](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 2
[ftrue] = 1
[U42](X1,X2) = 0
[U43](X1,X2) = 0
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 2.X3 + 2.X4 + 2
[INTER](X1,X2) = 2.X1 + 2.X2 + 1
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.8: 

SCC Processor:
-> Pairs:
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(cons(x,l1),l2) -> IFINTER(mem(x,l2),x,l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
 INTER(l1,cons(x,l2)) -> IFINTER(mem(x,l1),x,l2,l1)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.8: 

Subterm Processor:
-> Pairs:
 INTER(app(l1,l2),l3) -> INTER(l1,l3)
 INTER(app(l1,l2),l3) -> INTER(l2,l3)
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(INTER) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.8: 

Subterm Processor:
-> Pairs:
 INTER(l1,app(l2,l3)) -> INTER(l1,l2)
 INTER(l1,app(l2,l3)) -> INTER(l1,l3)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(INTER) = 2

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 U45(num0(x),num0(y)) -> U45(x,y)
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = 0
[u45](X1,X2) = X1
[num0](X) = 2.X + 2
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 1
[num1](X) = 2.X + 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 0
[U45](X1,X2) = 2.X1 + 2.X2
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 U45(num0(x),num1(y)) -> U45(u45(x,y),num1(u35))
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = 0
[u45](X1,X2) = X1 + X2 + 1
[num0](X) = X + 2
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = X + 1
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 0
[U45](X1,X2) = 2.X1 + 2.X2
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.9: 

Subterm Processor:
-> Pairs:
 U45(num0(x),num1(y)) -> U45(x,y)
 U45(num1(x),num0(y)) -> U45(x,y)
 U45(num1(x),num1(y)) -> U45(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(U45) = 1

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.10: 

Reduction Pair Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(u43(x,y),z) -> U43(y,z)
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = X1 + X2 + 1
[u45](X1,X2) = 0
[num0](X) = X
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = X + 1
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 2.X1 + 2.X2
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.10: 

SCC Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.10: 

Reduction Pair Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num0(x),num0(y)) -> U43(x,y)
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = X1 + X2 + 1
[u45](X1,X2) = 0
[num0](X) = X + 1
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = X + 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 2.X1 + 2.X2
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.10: 

SCC Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.10: 

Reduction Pair Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num0(x),num1(y)) -> U43(x,y)
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = X1 + X2 + 2
[u45](X1,X2) = 0
[num0](X) = X
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = X + 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 2.X1 + 2.X2
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.10: 

SCC Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.10: 

Reduction Pair Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num0(y)) -> U43(x,y)
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = X1 + X2 + 2
[u45](X1,X2) = 0
[num0](X) = X
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 0
[num1](X) = X + 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = 2.X1 + 2.X2
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.10: 

SCC Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.10: 

Reduction Pair Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num1(y)) -> U43(u43(x,y),num1(u35))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
-> Usable rules:
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 num0(u35) -> u35
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u42](X1,X2) = 0
[u43](X1,X2) = X1 + X2
[u45](X1,X2) = 0
[num0](X) = X + 1
[app](X1,X2) = 0
[eq](X1,X2) = 0
[ge](X1,X2) = 0
[if](X1,X2,X3) = 0
[ifinter](X1,X2,X3,X4) = 0
[inter](X1,X2) = 0
[log](X) = 0
[logu39](X) = 0
[mem](X1,X2) = 0
[not](X) = 0
[prod](X) = 0
[sum](X) = 0
[u35] = 1
[num1](X) = X + 2
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[ffalse] = 0
[nil] = 0
[ftrue] = 0
[U42](X1,X2) = 0
[U43](X1,X2) = X1 + X2
[U45](X1,X2) = 0
[NUM0](X) = 0
[APP](X1,X2) = 0
[EQ](X1,X2) = 0
[GE](X1,X2) = 0
[IF](X1,X2,X3) = 0
[IFINTER](X1,X2,X3,X4) = 0
[INTER](X1,X2) = 0
[LOG](X) = 0
[LOGU39](X) = 0
[MEM](X1,X2) = 0
[NOT](X) = 0
[PROD](X) = 0
[SUM](X) = 0

Problem 1.10: 

SCC Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num1(y)) -> U43(x,y)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.10: 

Subterm Processor:
-> Pairs:
 U43(u43(x,y),z) -> U43(x,u43(y,z))
 U43(num1(x),num1(y)) -> U43(x,y)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(U43) = 1

Problem 1.10: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.11: 

Subterm Processor:
-> Pairs:
 LOGU39(num0(x)) -> LOGU39(x)
 LOGU39(num1(x)) -> LOGU39(x)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(LOGU39) = 1

Problem 1.11: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.12: 

Subterm Processor:
-> Pairs:
 SUM(app(l1,l2)) -> SUM(l1)
 SUM(app(l1,l2)) -> SUM(l2)
 SUM(cons(x,l)) -> SUM(l)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(SUM) = 1

Problem 1.12: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.13: 

Subterm Processor:
-> Pairs:
 U42(u42(x,y),z) -> U42(x,u42(y,z))
 U42(u42(x,y),z) -> U42(y,z)
 U42(num0(x),y) -> U42(x,y)
 U42(num1(x),y) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(U42) = 1

Problem 1.13: 

SCC Processor:
-> Pairs:
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
->->-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)

Problem 1.13: 

Subterm Processor:
-> Pairs:
 U42(x,u43(y,z)) -> U42(x,y)
 U42(x,u43(y,z)) -> U42(x,z)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(U42) = 2

Problem 1.13: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.14: 

Subterm Processor:
-> Pairs:
 PROD(app(l1,l2)) -> PROD(l1)
 PROD(app(l1,l2)) -> PROD(l2)
 PROD(cons(x,l)) -> PROD(l)
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Projection:
 pi(PROD) = 1

Problem 1.14: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 u42(u42(x,y),z) -> u42(x,u42(y,z))
 u42(num0(x),y) -> num0(u42(x,y))
 u42(u35,x) -> u35
 u42(num1(x),y) -> u43(num0(u42(x,y)),y)
 u42(x,u43(y,z)) -> u43(u42(x,y),u42(x,z))
 u43(u43(x,y),z) -> u43(x,u43(y,z))
 u43(num0(x),num0(y)) -> num0(u43(x,y))
 u43(num0(x),num1(y)) -> num1(u43(x,y))
 u43(u35,x) -> x
 u43(num1(x),num0(y)) -> num1(u43(x,y))
 u43(num1(x),num1(y)) -> num0(u43(u43(x,y),num1(u35)))
 u43(x,u35) -> x
 u45(num0(x),num0(y)) -> num0(u45(x,y))
 u45(num0(x),num1(y)) -> num1(u45(u45(x,y),num1(u35)))
 u45(u35,x) -> u35
 u45(num1(x),num0(y)) -> num1(u45(x,y))
 u45(num1(x),num1(y)) -> num0(u45(x,y))
 u45(x,u35) -> x
 num0(u35) -> u35
 app(cons(x,l1),l2) -> cons(x,app(l1,l2))
 app(nil,l) -> l
 eq(num0(x),num0(y)) -> eq(x,y)
 eq(num0(x),u35) -> eq(x,u35)
 eq(num0(x),num1(y)) -> ffalse
 eq(u35,num0(y)) -> eq(u35,y)
 eq(u35,u35) -> ftrue
 eq(u35,num1(y)) -> ffalse
 eq(num1(x),num0(y)) -> ffalse
 eq(num1(x),u35) -> ffalse
 eq(num1(x),num1(y)) -> eq(x,y)
 ge(num0(x),num0(y)) -> ge(x,y)
 ge(num0(x),num1(y)) -> not(ge(y,x))
 ge(u35,num0(x)) -> ge(u35,x)
 ge(u35,num1(x)) -> ffalse
 ge(num1(x),num0(y)) -> ge(x,y)
 ge(num1(x),num1(y)) -> ge(x,y)
 ge(x,u35) -> ftrue
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 ifinter(ffalse,x,l1,l2) -> inter(l1,l2)
 ifinter(ftrue,x,l1,l2) -> cons(x,inter(l1,l2))
 inter(app(l1,l2),l3) -> app(inter(l1,l3),inter(l2,l3))
 inter(cons(x,l1),l2) -> ifinter(mem(x,l2),x,l1,l2)
 inter(nil,x) -> nil
 inter(l1,app(l2,l3)) -> app(inter(l1,l2),inter(l1,l3))
 inter(l1,cons(x,l2)) -> ifinter(mem(x,l1),x,l2,l1)
 inter(x,nil) -> nil
 log(x) -> u45(logu39(x),num1(u35))
 logu39(num0(x)) -> if(ge(x,num1(u35)),u43(logu39(x),num1(u35)),u35)
 logu39(u35) -> u35
 logu39(num1(x)) -> u43(logu39(x),num1(u35))
 mem(x,cons(y,l)) -> if(eq(x,y),ftrue,mem(x,l))
 mem(x,nil) -> ffalse
 not(ffalse) -> ftrue
 not(ftrue) -> ffalse
 prod(app(l1,l2)) -> u42(prod(l1),prod(l2))
 prod(cons(x,l)) -> u42(x,prod(l))
 prod(nil) -> num1(u35)
 sum(app(l1,l2)) -> u43(sum(l1),sum(l2))
 sum(cons(x,l)) -> u43(x,sum(l))
 sum(nil) -> num0(u35)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
