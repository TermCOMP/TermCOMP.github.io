YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rhEJw.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) ATransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) ATransformationProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (21) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(not, app(not, x)) -> x
   app(not, app(app(or, x), y)) -> app(app(and, app(not, x)), app(not, y))
   app(not, app(app(and, x), y)) -> app(app(or, app(not, x)), app(not, y))
   app(app(and, x), app(app(or, y), z)) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(and, app(app(or, y), z)), x) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(not, app(app(or, x), y)) -> APP(app(and, app(not, x)), app(not, y))
   APP(not, app(app(or, x), y)) -> APP(and, app(not, x))
   APP(not, app(app(or, x), y)) -> APP(not, x)
   APP(not, app(app(or, x), y)) -> APP(not, y)
   APP(not, app(app(and, x), y)) -> APP(app(or, app(not, x)), app(not, y))
   APP(not, app(app(and, x), y)) -> APP(or, app(not, x))
   APP(not, app(app(and, x), y)) -> APP(not, x)
   APP(not, app(app(and, x), y)) -> APP(not, y)
   APP(app(and, x), app(app(or, y), z)) -> APP(app(or, app(app(and, x), y)), app(app(and, x), z))
   APP(app(and, x), app(app(or, y), z)) -> APP(or, app(app(and, x), y))
   APP(app(and, x), app(app(or, y), z)) -> APP(app(and, x), y)
   APP(app(and, x), app(app(or, y), z)) -> APP(app(and, x), z)
   APP(app(and, app(app(or, y), z)), x) -> APP(app(or, app(app(and, x), y)), app(app(and, x), z))
   APP(app(and, app(app(or, y), z)), x) -> APP(or, app(app(and, x), y))
   APP(app(and, app(app(or, y), z)), x) -> APP(app(and, x), y)
   APP(app(and, app(app(or, y), z)), x) -> APP(and, x)
   APP(app(and, app(app(or, y), z)), x) -> APP(app(and, x), z)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(not, app(not, x)) -> x
   app(not, app(app(or, x), y)) -> app(app(and, app(not, x)), app(not, y))
   app(not, app(app(and, x), y)) -> app(app(or, app(not, x)), app(not, y))
   app(app(and, x), app(app(or, y), z)) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(and, app(app(or, y), z)), x) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 18 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(and, x), app(app(or, y), z)) -> APP(app(and, x), z)
   APP(app(and, x), app(app(or, y), z)) -> APP(app(and, x), y)
   APP(app(and, app(app(or, y), z)), x) -> APP(app(and, x), y)
   APP(app(and, app(app(or, y), z)), x) -> APP(app(and, x), z)

The TRS R consists of the following rules:

   app(not, app(not, x)) -> x
   app(not, app(app(or, x), y)) -> app(app(and, app(not, x)), app(not, y))
   app(not, app(app(and, x), y)) -> app(app(or, app(not, x)), app(not, y))
   app(app(and, x), app(app(or, y), z)) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(and, app(app(or, y), z)), x) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(and, x), app(app(or, y), z)) -> APP(app(and, x), z)
   APP(app(and, x), app(app(or, y), z)) -> APP(app(and, x), y)
   APP(app(and, app(app(or, y), z)), x) -> APP(app(and, x), y)
   APP(app(and, app(app(or, y), z)), x) -> APP(app(and, x), z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   and(x, or(y, z)) -> and(x, z)
   and(x, or(y, z)) -> and(x, y)
   and(or(y, z), x) -> and(x, y)
   and(or(y, z), x) -> and(x, z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*and(x, or(y, z)) -> and(x, z)
The graph contains the following edges 1 >= 1, 2 > 2


*and(x, or(y, z)) -> and(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


*and(or(y, z), x) -> and(x, y)
The graph contains the following edges 2 >= 1, 1 > 2


*and(or(y, z), x) -> and(x, z)
The graph contains the following edges 2 >= 1, 1 > 2


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(not, app(app(or, x), y)) -> APP(not, y)
   APP(not, app(app(or, x), y)) -> APP(not, x)
   APP(not, app(app(and, x), y)) -> APP(not, x)
   APP(not, app(app(and, x), y)) -> APP(not, y)

The TRS R consists of the following rules:

   app(not, app(not, x)) -> x
   app(not, app(app(or, x), y)) -> app(app(and, app(not, x)), app(not, y))
   app(not, app(app(and, x), y)) -> app(app(or, app(not, x)), app(not, y))
   app(app(and, x), app(app(or, y), z)) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(and, app(app(or, y), z)), x) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(not, app(app(or, x), y)) -> APP(not, y)
   APP(not, app(app(or, x), y)) -> APP(not, x)
   APP(not, app(app(and, x), y)) -> APP(not, x)
   APP(not, app(app(and, x), y)) -> APP(not, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   not(or(x, y)) -> not(y)
   not(or(x, y)) -> not(x)
   not(and(x, y)) -> not(x)
   not(and(x, y)) -> not(y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*not(or(x, y)) -> not(y)
The graph contains the following edges 1 > 1


*not(or(x, y)) -> not(x)
The graph contains the following edges 1 > 1


*not(and(x, y)) -> not(x)
The graph contains the following edges 1 > 1


*not(and(x, y)) -> not(y)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(not, app(not, x)) -> x
   app(not, app(app(or, x), y)) -> app(app(and, app(not, x)), app(not, y))
   app(not, app(app(and, x), y)) -> app(app(or, app(not, x)), app(not, y))
   app(app(and, x), app(app(or, y), z)) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(and, app(app(or, y), z)), x) -> app(app(or, app(app(and, x), y)), app(app(and, x), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(21)
YES
