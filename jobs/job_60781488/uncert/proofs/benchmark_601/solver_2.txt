YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fTF6W.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) MRRProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) TransformationProof [EQUIVALENT, 0 ms]
(8) QDP
(9) TransformationProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QDPOrderProof [EQUIVALENT, 1062 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(b(x)))) -> A(1, b(c(x)))
   C(c(c(b(x)))) -> B(c(x))
   C(c(c(b(x)))) -> C(x)
   B(c(b(c(x)))) -> A(0, a(1, x))
   B(c(b(c(x)))) -> A(1, x)
   A(0, x) -> C(c(x))
   A(0, x) -> C(x)
   A(1, x) -> C(b(x))
   A(1, x) -> B(x)

The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C(c(c(b(x)))) -> B(c(x))
   C(c(c(b(x)))) -> C(x)
   B(c(b(c(x)))) -> A(1, x)
   A(0, x) -> C(x)
   A(1, x) -> B(x)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(1) = 0
   POL(A(x_1, x_2)) = 1 + x_1 + x_2
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(a(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 1 + x_1


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(b(x)))) -> A(1, b(c(x)))
   B(c(b(c(x)))) -> A(0, a(1, x))
   A(0, x) -> C(c(x))
   A(1, x) -> C(b(x))

The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(1, x) -> C(b(x))
   C(c(c(b(x)))) -> A(1, b(c(x)))

The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule A(1, x) -> C(b(x)) at position [0] we obtained the following new rules [LPAR04]:

   (A(1, c(b(c(x0)))) -> C(a(0, a(1, x0))),A(1, c(b(c(x0)))) -> C(a(0, a(1, x0))))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(b(x)))) -> A(1, b(c(x)))
   A(1, c(b(c(x0)))) -> C(a(0, a(1, x0)))

The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule C(c(c(b(x)))) -> A(1, b(c(x))) at position [1] we obtained the following new rules [LPAR04]:

   (C(c(c(b(b(c(x0)))))) -> A(1, a(0, a(1, x0))),C(c(c(b(b(c(x0)))))) -> A(1, a(0, a(1, x0))))
   (C(c(c(b(c(c(b(x0))))))) -> A(1, b(a(1, b(c(x0))))),C(c(c(b(c(c(b(x0))))))) -> A(1, b(a(1, b(c(x0))))))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(1, c(b(c(x0)))) -> C(a(0, a(1, x0)))
   C(c(c(b(b(c(x0)))))) -> A(1, a(0, a(1, x0)))
   C(c(c(b(c(c(b(x0))))))) -> A(1, b(a(1, b(c(x0)))))

The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(1, c(b(c(x0)))) -> C(a(0, a(1, x0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(A(x_1, x_2)) =  	[[0]] 	 +  	[[0, 3]] 	* 	x_1 	 +  	[[1, 0]] 	* 	x_2
>>>

   <<<
 POL(1) =  	[[1], [0]]
>>>

   <<<
 POL(c(x_1)) =  	[[2], [0]] 	 +  	[[1, 1], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0], [0]] 	 +  	[[1, 1], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0]] 	 +  	[[0, 1]] 	* 	x_1
>>>

   <<<
 POL(a(x_1, x_2)) =  	[[0], [0]] 	 +  	[[2, 1], [0, 1]] 	* 	x_1 	 +  	[[2, 1], [1, 1]] 	* 	x_2
>>>

   <<<
 POL(0) =  	[[1], [2]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(1, x) -> c(b(x))
   c(c(c(b(x)))) -> a(1, b(c(x)))
   a(0, x) -> c(c(x))
   b(c(b(c(x)))) -> a(0, a(1, x))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(c(b(b(c(x0)))))) -> A(1, a(0, a(1, x0)))
   C(c(c(b(c(c(b(x0))))))) -> A(1, b(a(1, b(c(x0)))))

The TRS R consists of the following rules:

   c(c(c(b(x)))) -> a(1, b(c(x)))
   b(c(b(c(x)))) -> a(0, a(1, x))
   a(0, x) -> c(c(x))
   a(1, x) -> c(b(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(14)
TRUE
