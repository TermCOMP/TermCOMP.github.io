YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eJdXK.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 8 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPOrderProof [EQUIVALENT, 21 ms]
        (36) QDP
        (37) PisEmptyProof [EQUIVALENT, 0 ms]
        (38) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BSORT(.(x, y)) -> LAST(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   BSORT(.(x, y)) -> BUBBLE(.(x, y))
   BSORT(.(x, y)) -> BSORT(butlast(bubble(.(x, y))))
   BSORT(.(x, y)) -> BUTLAST(bubble(.(x, y)))
   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(x, z))
   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(y, z))
   LAST(.(x, .(y, z))) -> LAST(.(y, z))
   BUTLAST(.(x, .(y, z))) -> BUTLAST(.(y, z))

The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BUTLAST(.(x, .(y, z))) -> BUTLAST(.(y, z))

The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BUTLAST(.(x, .(y, z))) -> BUTLAST(.(y, z))

R is empty.
The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BUTLAST(.(x, .(y, z))) -> BUTLAST(.(y, z))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*BUTLAST(.(x, .(y, z))) -> BUTLAST(.(y, z))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(.(x, .(y, z))) -> LAST(.(y, z))

The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(.(x, .(y, z))) -> LAST(.(y, z))

R is empty.
The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(.(x, .(y, z))) -> LAST(.(y, z))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LAST(.(x, .(y, z))) -> LAST(.(y, z))
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(y, z))
   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(x, z))

The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(y, z))
   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(x, z))

R is empty.
The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(y, z))
   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(x, z))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(y, z))
   BUBBLE(.(x, .(y, z))) -> BUBBLE(.(x, z))


Used ordering: Knuth-Bendix order [KBO] with precedence:._2 > BUBBLE_1

and weight map:

   BUBBLE_1=1
   ._2=0

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BSORT(.(x, y)) -> BSORT(butlast(bubble(.(x, y))))

The TRS R consists of the following rules:

   bsort(nil) -> nil
   bsort(.(x, y)) -> last(.(bubble(.(x, y)), bsort(butlast(bubble(.(x, y))))))
   bubble(nil) -> nil
   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   last(nil) -> 0
   last(.(x, nil)) -> x
   last(.(x, .(y, z))) -> last(.(y, z))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BSORT(.(x, y)) -> BSORT(butlast(bubble(.(x, y))))

The TRS R consists of the following rules:

   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bsort(nil)
   bsort(.(x0, x1))
   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   bsort(nil)
   bsort(.(x0, x1))
   last(nil)
   last(.(x0, nil))
   last(.(x0, .(x1, x2)))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   BSORT(.(x, y)) -> BSORT(butlast(bubble(.(x, y))))

The TRS R consists of the following rules:

   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   BSORT(.(x, y)) -> BSORT(butlast(bubble(.(x, y))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( BSORT_1(x_1) ) = max{0, 2x_1 - 1}
POL( butlast_1(x_1) ) = max{0, 2x_1 - 2}
POL( bubble_1(x_1) ) = 1
POL( ._2(x_1, x_2) ) = x_2 + 1
POL( nil ) = 0
POL( if_3(x_1, ..., x_3) ) = max{0, x_3 - 1}
POL( <=_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))


----------------------------------------

(36)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   bubble(.(x, nil)) -> .(x, nil)
   bubble(.(x, .(y, z))) -> if(<=(x, y), .(y, bubble(.(x, z))), .(x, bubble(.(y, z))))
   butlast(nil) -> nil
   butlast(.(x, nil)) -> nil
   butlast(.(x, .(y, z))) -> .(x, butlast(.(y, z)))

The set Q consists of the following terms:

   bubble(nil)
   bubble(.(x0, nil))
   bubble(.(x0, .(x1, x2)))
   butlast(nil)
   butlast(.(x0, nil))
   butlast(.(x0, .(x1, x2)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(38)
YES
