YES

Problem 1: 

(VAR vu95NonEmpty I P X X1 X2 Y Z)
(RULES
au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
au95u95u95u95(nil,X) -> mark(X)
au95u95u95u95(X,nil) -> mark(X)
au95u95u95u95(X1,X2) -> u95u95(X1,X2)
au95u95and(tt,X) -> mark(X)
au95u95and(X1,X2) -> and(X1,X2)
au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
au95u95isNePal(X) -> isNePal(X)
mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
mark(isNePal(X)) -> au95u95isNePal(mark(X))
mark(nil) -> nil
mark(tt) -> tt
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> AU95U95ISNEPAL(mark(X))
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> AU95U95ISNEPAL(mark(X))
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 1
[au95u95and](X1,X2) = 2.X1 + 2.X2 + 1
[au95u95isNePal](X) = 2.X + 1
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 1
[and](X1,X2) = 2.X1 + 2.X2 + 1
[fSNonEmpty] = 0
[isNePal](X) = 2.X + 1
[nil] = 0
[tt] = 1
[AU95U95U95U95](X1,X2) = 2.X1 + X2 + 2
[AU95U95AND](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95ISNEPAL](X) = 0
[MARK](X) = X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> AU95U95U95U95(mark(Y),mark(Z))
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[au95u95and](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95isNePal](X) = 2.X + 2
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[isNePal](X) = 2.X + 2
[nil] = 0
[tt] = 1
[AU95U95U95U95](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95AND](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95ISNEPAL](X) = 0
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(X)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 1
[au95u95and](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95isNePal](X) = 2.X + 1
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 1
[and](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[isNePal](X) = 2.X + 1
[nil] = 2
[tt] = 2
[AU95U95U95U95](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95AND](X1,X2) = X1 + 2.X2 + 2
[AU95U95ISNEPAL](X) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Y)
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[au95u95and](X1,X2) = 2.X1 + X2 + 1
[au95u95isNePal](X) = X + 1
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = 2.X1 + X2 + 1
[fSNonEmpty] = 0
[isNePal](X) = X + 1
[nil] = 1
[tt] = 1
[AU95U95U95U95](X1,X2) = 2.X1 + 2.X2
[AU95U95AND](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95ISNEPAL](X) = 0
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(u95u95(X,Y),Z) -> MARK(Z)
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[au95u95and](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95isNePal](X) = X + 2
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[isNePal](X) = X + 2
[nil] = 2
[tt] = 0
[AU95U95U95U95](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95AND](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95ISNEPAL](X) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(nil,X) -> MARK(X)
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[au95u95and](X1,X2) = X1 + 2.X2 + 2
[au95u95isNePal](X) = 2.X + 1
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = X1 + 2.X2 + 2
[fSNonEmpty] = 0
[isNePal](X) = 2.X + 1
[nil] = 2
[tt] = 0
[AU95U95U95U95](X1,X2) = 2.X1 + 2.X2 + 2
[AU95U95AND](X1,X2) = 2.X2 + 2
[AU95U95ISNEPAL](X) = 0
[MARK](X) = 2.X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95U95U95(X,nil) -> MARK(X)
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
-> Usable rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95u95u95](X1,X2) = 2.X1 + X2 + 2
[au95u95and](X1,X2) = X1 + 2.X2 + 2
[au95u95isNePal](X) = 2.X
[mark](X) = X
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = X1 + 2.X2 + 2
[fSNonEmpty] = 0
[isNePal](X) = 2.X
[nil] = 2
[tt] = 2
[AU95U95U95U95](X1,X2) = 2.X1 + X2
[AU95U95AND](X1,X2) = 2.X1 + 2.X2 + 1
[AU95U95ISNEPAL](X) = 0
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> AU95U95U95U95(mark(X1),mark(X2))
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
->->-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt

Problem 1: 

Subterm Processor:
-> Pairs:
 AU95U95AND(tt,X) -> MARK(X)
 MARK(u95u95(X1,X2)) -> MARK(X1)
 MARK(u95u95(X1,X2)) -> MARK(X2)
 MARK(and(X1,X2)) -> AU95U95AND(mark(X1),X2)
 MARK(and(X1,X2)) -> MARK(X1)
 MARK(isNePal(X)) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Projection:
 pi(AU95U95AND) = 2
 pi(MARK) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95AND(tt,X) -> MARK(X)
-> Rules:
 au95u95u95u95(u95u95(X,Y),Z) -> au95u95u95u95(mark(X),au95u95u95u95(mark(Y),mark(Z)))
 au95u95u95u95(nil,X) -> mark(X)
 au95u95u95u95(X,nil) -> mark(X)
 au95u95u95u95(X1,X2) -> u95u95(X1,X2)
 au95u95and(tt,X) -> mark(X)
 au95u95and(X1,X2) -> and(X1,X2)
 au95u95isNePal(u95u95(I,u95u95(P,I))) -> tt
 au95u95isNePal(X) -> isNePal(X)
 mark(u95u95(X1,X2)) -> au95u95u95u95(mark(X1),mark(X2))
 mark(and(X1,X2)) -> au95u95and(mark(X1),X2)
 mark(isNePal(X)) -> au95u95isNePal(mark(X))
 mark(nil) -> nil
 mark(tt) -> tt
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
