YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GAoTy.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) NonInfProof [EQUIVALENT, 0 ms]
        (27) AND
            (28) QDP
                (29) DependencyGraphProof [EQUIVALENT, 0 ms]
                (30) TRUE
            (31) QDP
                (32) DependencyGraphProof [EQUIVALENT, 0 ms]
                (33) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   div(x, s(y)) -> d(x, s(y), 0)
   d(x, s(y), z) -> cond(ge(x, z), x, y, z)
   cond(true, x, y, z) -> s(d(x, s(y), plus(s(y), z)))
   cond(false, x, y, z) -> 0
   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   div(x, s(y)) -> d(x, s(y), 0)
   d(x, s(y), z) -> cond(ge(x, z), x, y, z)
   cond(true, x, y, z) -> s(d(x, s(y), plus(s(y), z)))
   cond(false, x, y, z) -> 0
   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DIV(x, s(y)) -> D(x, s(y), 0)
   D(x, s(y), z) -> COND(ge(x, z), x, y, z)
   D(x, s(y), z) -> GE(x, z)
   COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))
   COND(true, x, y, z) -> PLUS(s(y), z)
   GE(s(u), s(v)) -> GE(u, v)
   PLUS(n, s(m)) -> PLUS(n, m)

The TRS R consists of the following rules:

   div(x, s(y)) -> d(x, s(y), 0)
   d(x, s(y), z) -> cond(ge(x, z), x, y, z)
   cond(true, x, y, z) -> s(d(x, s(y), plus(s(y), z)))
   cond(false, x, y, z) -> 0
   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(n, s(m)) -> PLUS(n, m)

The TRS R consists of the following rules:

   div(x, s(y)) -> d(x, s(y), 0)
   d(x, s(y), z) -> cond(ge(x, z), x, y, z)
   cond(true, x, y, z) -> s(d(x, s(y), plus(s(y), z)))
   cond(false, x, y, z) -> 0
   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(n, s(m)) -> PLUS(n, m)

R is empty.
The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(n, s(m)) -> PLUS(n, m)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(n, s(m)) -> PLUS(n, m)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(u), s(v)) -> GE(u, v)

The TRS R consists of the following rules:

   div(x, s(y)) -> d(x, s(y), 0)
   d(x, s(y), z) -> cond(ge(x, z), x, y, z)
   cond(true, x, y, z) -> s(d(x, s(y), plus(s(y), z)))
   cond(false, x, y, z) -> 0
   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(u), s(v)) -> GE(u, v)

R is empty.
The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(u), s(v)) -> GE(u, v)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(u), s(v)) -> GE(u, v)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))
   D(x, s(y), z) -> COND(ge(x, z), x, y, z)

The TRS R consists of the following rules:

   div(x, s(y)) -> d(x, s(y), 0)
   d(x, s(y), z) -> cond(ge(x, z), x, y, z)
   cond(true, x, y, z) -> s(d(x, s(y), plus(s(y), z)))
   cond(false, x, y, z) -> 0
   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))
   D(x, s(y), z) -> COND(ge(x, z), x, y, z)

The TRS R consists of the following rules:

   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   div(x0, s(x1))
   d(x0, s(x1), x2)
   cond(true, x0, x1, x2)
   cond(false, x0, x1, x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))
   D(x, s(y), z) -> COND(ge(x, z), x, y, z)

The TRS R consists of the following rules:

   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND(true, x, y, z) -> D(x, s(y), plus(s(y), z)) the following chains were created:
*We consider the chain D(x3, s(x4), x5) -> COND(ge(x3, x5), x3, x4, x5), COND(true, x6, x7, x8) -> D(x6, s(x7), plus(s(x7), x8)) which results in the following constraint:

(1)    (COND(ge(x3, x5), x3, x4, x5)=COND(true, x6, x7, x8)  ==>  COND(true, x6, x7, x8)_>=_D(x6, s(x7), plus(s(x7), x8)))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (ge(x3, x5)=true  ==>  COND(true, x3, x4, x5)_>=_D(x3, s(x4), plus(s(x4), x5)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on ge(x3, x5)=true which results in the following new constraints:

(3)    (true=true  ==>  COND(true, x18, x4, 0)_>=_D(x18, s(x4), plus(s(x4), 0)))

(4)    (ge(x21, x20)=true & (\/x22:ge(x21, x20)=true  ==>  COND(true, x21, x22, x20)_>=_D(x21, s(x22), plus(s(x22), x20)))  ==>  COND(true, s(x21), x4, s(x20))_>=_D(s(x21), s(x4), plus(s(x4), s(x20))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (COND(true, x18, x4, 0)_>=_D(x18, s(x4), plus(s(x4), 0)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x22:ge(x21, x20)=true  ==>  COND(true, x21, x22, x20)_>=_D(x21, s(x22), plus(s(x22), x20))) with sigma = [x22 / x4] which results in the following new constraint:

(6)    (COND(true, x21, x4, x20)_>=_D(x21, s(x4), plus(s(x4), x20))  ==>  COND(true, s(x21), x4, s(x20))_>=_D(s(x21), s(x4), plus(s(x4), s(x20))))








For Pair D(x, s(y), z) -> COND(ge(x, z), x, y, z) the following chains were created:
*We consider the chain COND(true, x9, x10, x11) -> D(x9, s(x10), plus(s(x10), x11)), D(x12, s(x13), x14) -> COND(ge(x12, x14), x12, x13, x14) which results in the following constraint:

(1)    (D(x9, s(x10), plus(s(x10), x11))=D(x12, s(x13), x14)  ==>  D(x12, s(x13), x14)_>=_COND(ge(x12, x14), x12, x13, x14))



We simplified constraint (1) using rules (I), (II), (III), (IV), (VII) which results in the following new constraint:

(2)    (D(x9, s(x10), x14)_>=_COND(ge(x9, x14), x9, x10, x14))








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))

*(COND(true, x18, x4, 0)_>=_D(x18, s(x4), plus(s(x4), 0)))


*(COND(true, x21, x4, x20)_>=_D(x21, s(x4), plus(s(x4), x20))  ==>  COND(true, s(x21), x4, s(x20))_>=_D(s(x21), s(x4), plus(s(x4), s(x20))))




*D(x, s(y), z) -> COND(ge(x, z), x, y, z)

*(D(x9, s(x10), x14)_>=_COND(ge(x9, x14), x9, x10, x14))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(COND(x_1, x_2, x_3, x_4)) = -1 - x_1 + x_2 - x_4
   POL(D(x_1, x_2, x_3)) = x_1 - x_3
   POL(c) = -1
   POL(false) = 0
   POL(ge(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   D(x, s(y), z) -> COND(ge(x, z), x, y, z)
The following pairs are in P_bound:
   COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))
The following rules are usable:
   n -> plus(n, 0)
   s(plus(n, m)) -> plus(n, s(m))
   true -> ge(u, 0)
   false -> ge(0, s(v))
   ge(u, v) -> ge(s(u), s(v))

----------------------------------------

(27)
Complex Obligation (AND)

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y, z) -> D(x, s(y), plus(s(y), z))

The TRS R consists of the following rules:

   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(30)
TRUE

----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(x, s(y), z) -> COND(ge(x, z), x, y, z)

The TRS R consists of the following rules:

   ge(u, 0) -> true
   ge(0, s(v)) -> false
   ge(s(u), s(v)) -> ge(u, v)
   plus(n, 0) -> n
   plus(n, s(m)) -> s(plus(n, m))

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))
   plus(x0, 0)
   plus(x0, s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(33)
TRUE
