YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2yutg.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) TransformationProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) UsableRulesProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) TransformationProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) TransformationProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) TransformationProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) TransformationProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) TransformationProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) TransformationProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) TransformationProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) TransformationProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) TransformationProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) TransformationProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) TransformationProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) TransformationProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) TransformationProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) TransformationProof [EQUIVALENT, 0 ms]
        (59) QDP
        (60) TransformationProof [EQUIVALENT, 0 ms]
        (61) QDP
        (62) TransformationProof [EQUIVALENT, 0 ms]
        (63) QDP
        (64) TransformationProof [EQUIVALENT, 0 ms]
        (65) QDP
        (66) TransformationProof [EQUIVALENT, 0 ms]
        (67) QDP
        (68) TransformationProof [EQUIVALENT, 0 ms]
        (69) QDP
        (70) TransformationProof [EQUIVALENT, 0 ms]
        (71) QDP
        (72) TransformationProof [EQUIVALENT, 0 ms]
        (73) QDP
        (74) TransformationProof [EQUIVALENT, 0 ms]
        (75) QDP
        (76) TransformationProof [EQUIVALENT, 0 ms]
        (77) QDP
        (78) TransformationProof [EQUIVALENT, 0 ms]
        (79) QDP
        (80) TransformationProof [EQUIVALENT, 0 ms]
        (81) QDP
        (82) TransformationProof [EQUIVALENT, 0 ms]
        (83) QDP
        (84) TransformationProof [EQUIVALENT, 0 ms]
        (85) QDP
        (86) TransformationProof [EQUIVALENT, 0 ms]
        (87) QDP
        (88) TransformationProof [EQUIVALENT, 0 ms]
        (89) QDP
        (90) TransformationProof [EQUIVALENT, 0 ms]
        (91) QDP
        (92) TransformationProof [EQUIVALENT, 0 ms]
        (93) QDP
        (94) TransformationProof [EQUIVALENT, 0 ms]
        (95) QDP
        (96) TransformationProof [EQUIVALENT, 0 ms]
        (97) QDP
        (98) TransformationProof [EQUIVALENT, 0 ms]
        (99) QDP
        (100) TransformationProof [EQUIVALENT, 0 ms]
        (101) QDP
        (102) TransformationProof [EQUIVALENT, 0 ms]
        (103) QDP
        (104) TransformationProof [EQUIVALENT, 0 ms]
        (105) QDP
        (106) TransformationProof [EQUIVALENT, 0 ms]
        (107) QDP
        (108) TransformationProof [EQUIVALENT, 0 ms]
        (109) QDP
        (110) TransformationProof [EQUIVALENT, 0 ms]
        (111) QDP
        (112) TransformationProof [EQUIVALENT, 0 ms]
        (113) QDP
        (114) TransformationProof [EQUIVALENT, 0 ms]
        (115) QDP
        (116) TransformationProof [EQUIVALENT, 0 ms]
        (117) QDP
        (118) TransformationProof [EQUIVALENT, 0 ms]
        (119) QDP
        (120) TransformationProof [EQUIVALENT, 0 ms]
        (121) QDP
        (122) TransformationProof [EQUIVALENT, 0 ms]
        (123) QDP
        (124) TransformationProof [EQUIVALENT, 0 ms]
        (125) QDP
        (126) TransformationProof [EQUIVALENT, 0 ms]
        (127) QDP
        (128) TransformationProof [EQUIVALENT, 0 ms]
        (129) QDP
        (130) RemovalProof [SOUND, 0 ms]
        (131) QDP
        (132) NonInfProof [EQUIVALENT, 9 ms]
        (133) QDP
        (134) DependencyGraphProof [EQUIVALENT, 0 ms]
        (135) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   numbers -> d(0)
   d(x) -> if(le(x, nr), x)
   if(true, x) -> cons(x, d(s(x)))
   if(false, x) -> nil
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   ack(0, x) -> s(x)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   numbers -> d(0)
   d(x) -> if(le(x, nr), x)
   if(true, x) -> cons(x, d(s(x)))
   if(false, x) -> nil
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   ack(0, x) -> s(x)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NUMBERS -> D(0)
   D(x) -> IF(le(x, nr), x)
   D(x) -> LE(x, nr)
   D(x) -> NR
   IF(true, x) -> D(s(x))
   LE(s(x), s(y)) -> LE(x, y)
   NR -> ACK(s(s(s(s(s(s(0)))))), 0)
   ACK(s(x), 0) -> ACK(x, s(0))
   ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
   ACK(s(x), s(y)) -> ACK(s(x), y)

The TRS R consists of the following rules:

   numbers -> d(0)
   d(x) -> if(le(x, nr), x)
   if(true, x) -> cons(x, d(s(x)))
   if(false, x) -> nil
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   ack(0, x) -> s(x)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
   ACK(s(x), s(y)) -> ACK(s(x), y)
   ACK(s(x), 0) -> ACK(x, s(0))

The TRS R consists of the following rules:

   numbers -> d(0)
   d(x) -> if(le(x, nr), x)
   if(true, x) -> cons(x, d(s(x)))
   if(false, x) -> nil
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   ack(0, x) -> s(x)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
   ACK(s(x), s(y)) -> ACK(s(x), y)
   ACK(s(x), 0) -> ACK(x, s(0))

The TRS R consists of the following rules:

   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   ack(s(x), 0) -> ack(x, s(0))
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
   ACK(s(x), s(y)) -> ACK(s(x), y)
   ACK(s(x), 0) -> ACK(x, s(0))

The TRS R consists of the following rules:

   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   ack(s(x), 0) -> ack(x, s(0))
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACK(s(x), 0) -> ACK(x, s(0))
The graph contains the following edges 1 > 1


*ACK(s(x), s(y)) -> ACK(s(x), y)
The graph contains the following edges 1 >= 1, 2 > 2


*ACK(s(x), s(y)) -> ACK(x, ack(s(x), y))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   numbers -> d(0)
   d(x) -> if(le(x, nr), x)
   if(true, x) -> cons(x, d(s(x)))
   if(false, x) -> nil
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   ack(0, x) -> s(x)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, nr), x)

The TRS R consists of the following rules:

   numbers -> d(0)
   d(x) -> if(le(x, nr), x)
   if(true, x) -> cons(x, d(s(x)))
   if(false, x) -> nil
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   ack(0, x) -> s(x)
   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, nr), x)

The TRS R consists of the following rules:

   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   ack(s(x), 0) -> ack(x, s(0))
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   numbers
   d(x0)
   if(true, x0)
   if(false, x0)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, nr), x)

The TRS R consists of the following rules:

   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   ack(s(x), 0) -> ack(x, s(0))
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, nr), x) at position [0,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(s(s(0)))))), 0)), x),D(x) -> IF(le(x, ack(s(s(s(s(s(s(0)))))), 0)), x))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(s(s(0)))))), 0)), x)

The TRS R consists of the following rules:

   nr -> ack(s(s(s(s(s(s(0)))))), 0)
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   ack(s(x), 0) -> ack(x, s(0))
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(s(s(0)))))), 0)), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   nr
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   nr


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(s(s(0)))))), 0)), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(s(s(0)))))), 0)), x) at position [0,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(s(0))))), s(0))), x),D(x) -> IF(le(x, ack(s(s(s(s(s(0))))), s(0))), x))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(s(0))))), s(0))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(s(0))))), s(0))), x) at position [0,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(s(0))))), 0))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(s(0))))), 0))), x))


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(s(0))))), 0))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(s(0))))), 0))), x) at position [0,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(0)))), s(0)))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(0)))), s(0)))), x))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(0)))), s(0)))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(s(0)))), s(0)))), x) at position [0,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(s(0)))), 0)))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(s(0)))), 0)))), x))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(s(0)))), 0)))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(s(0)))), 0)))), x) at position [0,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(0))), s(0))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(0))), s(0))))), x))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(0))), s(0))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(s(0))), s(0))))), x) at position [0,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(s(0))), 0))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(s(0))), 0))))), x))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(s(0))), 0))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(s(0))), 0))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(0)), s(0)))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(0)), s(0)))))), x))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(0)), s(0)))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(s(0)), s(0)))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(s(0)), 0)))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(s(0)), 0)))))), x))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(s(0)), 0)))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(s(0)), 0)))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(0), s(0))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(0), s(0))))))), x))


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(0), s(0))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(s(0), s(0))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(0, ack(s(0), 0))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(0, ack(s(0), 0))))))), x))


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(0, ack(s(0), 0))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), ack(0, ack(s(0), 0))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), s(ack(s(0), 0))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), s(ack(s(0), 0))))))), x))


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), s(ack(s(0), 0))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(s(0), s(ack(s(0), 0))))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(0, ack(s(0), ack(s(0), 0))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(0, ack(s(0), ack(s(0), 0))))))), x))


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(0, ack(s(0), ack(s(0), 0))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), ack(0, ack(s(0), ack(s(0), 0))))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), s(ack(s(0), ack(s(0), 0))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), s(ack(s(0), ack(s(0), 0))))))), x))


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), s(ack(s(0), ack(s(0), 0))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(s(0)), s(ack(s(0), ack(s(0), 0))))))), x) at position [0,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(s(0), 0))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(s(0), 0))))))), x))


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(s(0), 0))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(s(0), 0))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(0, s(0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(0, s(0)))))))), x))


----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(0, s(0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(62) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), ack(0, s(0)))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), s(s(0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), s(s(0)))))))), x))


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), s(s(0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(s(0), s(s(0)))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), s(0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), s(0)))))))), x))


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), s(0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), s(0)))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), s(ack(s(0), s(0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), s(ack(s(0), s(0)))))))), x))


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), s(ack(s(0), s(0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(s(0)), s(ack(s(0), s(0)))))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), s(0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), s(0)))))))), x))


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), s(0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(70) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), s(0)))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), 0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), 0)))))))), x))


----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), 0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(72) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, ack(s(0), 0)))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), s(ack(s(0), 0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), s(ack(s(0), 0)))))))), x))


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), s(ack(s(0), 0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(s(0)), s(ack(s(0), 0)))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), 0)))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), 0)))))))), x))


----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), 0)))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(s(0), 0)))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, s(0))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, s(0))))))))), x))


----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, s(0))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), ack(0, s(0))))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(s(0))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(s(0))))))))), x))


----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(s(0))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(s(0))))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(0))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(0))))))))), x))


----------------------------------------

(81)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(0))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(82) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), s(0))))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), 0))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), 0))))))))), x))


----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), 0))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(84) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(s(0)), 0))))))))), x) at position [0,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0)))))))))), x))


----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(86) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0)))))))))), x) at position [0,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), 0)))))))))), x))


----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(88) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), 0)))))))))), x))


----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(90) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(91)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(92) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(94) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(96) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(98) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(99)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(100) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(102) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(103)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(104) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(106) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(108) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(109)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(110) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(s(0))), s(ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x))


----------------------------------------

(111)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(112) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), 0)))))))))), x) at position [0,1,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, s(0))))))))))), x))


----------------------------------------

(113)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(114) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, s(0))))))))))), x) at position [0,1,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(s(0))))))))))), x))


----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(116) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(s(0))))))))))), x) at position [0,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), s(0))))))))))), x))


----------------------------------------

(117)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(118) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), s(0))))))))))), x) at position [0,1,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), s(0))))))))))), x))


----------------------------------------

(119)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(120) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), s(0))))))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), s(0))))))))))), x))


----------------------------------------

(121)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(122) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), s(0))))))))))), x) at position [0,1,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), s(0))))))))))), x))


----------------------------------------

(123)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(124) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), s(0))))))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x))


----------------------------------------

(125)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(126) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x) at position [0,1,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x))


----------------------------------------

(127)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(128) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(s(0), s(ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x) at position [0,1,1,1,1,1] we obtained the following new rules [LPAR04]:

   (D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x),D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x))


----------------------------------------

(129)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x) -> D(s(x))
   D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(130) RemovalProof (SOUND)
In the following pairs the term without variables ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0)))))))))) is replaced by the fresh variable x_removed.

Pair: D(x) -> IF(le(x, ack(s(s(s(s(0)))), ack(s(s(0)), ack(s(s(s(0))), ack(s(0), ack(0, ack(s(0), ack(s(0), ack(s(0), ack(s(0), s(0))))))))))), x)

Positions in right side of the pair: *[0,1]The following rules were checked for non-overlappingness: 
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   ack(s(x), 0) -> ack(x, s(0))
   ack(0, x) -> s(x)
The new variable was added to all pairs as a new argument[CONREM].
----------------------------------------

(131)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, x_removed) -> D(s(x), x_removed)
   D(x, x_removed) -> IF(le(x, x_removed), x, x_removed)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(132) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF(true, x, x_removed) -> D(s(x), x_removed) the following chains were created:
*We consider the chain D(x2, x3) -> IF(le(x2, x3), x2, x3), IF(true, x4, x5) -> D(s(x4), x5) which results in the following constraint:

(1)    (IF(le(x2, x3), x2, x3)=IF(true, x4, x5)  ==>  IF(true, x4, x5)_>=_D(s(x4), x5))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (le(x2, x3)=true  ==>  IF(true, x2, x3)_>=_D(s(x2), x3))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on le(x2, x3)=true which results in the following new constraints:

(3)    (true=true  ==>  IF(true, 0, x12)_>=_D(s(0), x12))

(4)    (le(x15, x14)=true & (le(x15, x14)=true  ==>  IF(true, x15, x14)_>=_D(s(x15), x14))  ==>  IF(true, s(x15), s(x14))_>=_D(s(s(x15)), s(x14)))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(true, 0, x12)_>=_D(s(0), x12))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (le(x15, x14)=true  ==>  IF(true, x15, x14)_>=_D(s(x15), x14)) with sigma = [ ] which results in the following new constraint:

(6)    (IF(true, x15, x14)_>=_D(s(x15), x14)  ==>  IF(true, s(x15), s(x14))_>=_D(s(s(x15)), s(x14)))








For Pair D(x, x_removed) -> IF(le(x, x_removed), x, x_removed) the following chains were created:
*We consider the chain IF(true, x6, x7) -> D(s(x6), x7), D(x8, x9) -> IF(le(x8, x9), x8, x9) which results in the following constraint:

(1)    (D(s(x6), x7)=D(x8, x9)  ==>  D(x8, x9)_>=_IF(le(x8, x9), x8, x9))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (D(s(x6), x7)_>=_IF(le(s(x6), x7), s(x6), x7))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF(true, x, x_removed) -> D(s(x), x_removed)

*(IF(true, 0, x12)_>=_D(s(0), x12))


*(IF(true, x15, x14)_>=_D(s(x15), x14)  ==>  IF(true, s(x15), s(x14))_>=_D(s(s(x15)), s(x14)))




*D(x, x_removed) -> IF(le(x, x_removed), x, x_removed)

*(D(s(x6), x7)_>=_IF(le(s(x6), x7), s(x6), x7))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(D(x_1, x_2)) = -1 - x_1 + x_2
   POL(IF(x_1, x_2, x_3)) = -x_1 - x_2 + x_3
   POL(c) = -2
   POL(false) = 1
   POL(le(x_1, x_2)) = 1
   POL(s(x_1)) = 1 + x_1
   POL(true) = 1


The following pairs  are in P_>:
   IF(true, x, x_removed) -> D(s(x), x_removed)
The following pairs are in P_bound:
   IF(true, x, x_removed) -> D(s(x), x_removed)
The following rules are usable:
   true -> le(0, y)
   false -> le(s(x), 0)
   le(x, y) -> le(s(x), s(y))

----------------------------------------

(133)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(x, x_removed) -> IF(le(x, x_removed), x, x_removed)

The TRS R consists of the following rules:

   ack(s(x), 0) -> ack(x, s(0))
   ack(s(x), s(y)) -> ack(x, ack(s(x), y))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   ack(0, x) -> s(x)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   ack(0, x0)
   ack(s(x0), 0)
   ack(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(134) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(135)
TRUE
