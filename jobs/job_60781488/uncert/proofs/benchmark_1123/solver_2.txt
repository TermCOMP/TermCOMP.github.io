NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/tISGa.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 17 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) NonTerminationLoopProof [COMPLETE, 50 ms]
        (16) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> A__F(mark(X), X, mark(X))
   A__F(a, b, X) -> MARK(X)
   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(c) -> A__C

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> MARK(X)
   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
   A__F(a, b, X) -> A__F(mark(X), X, mark(X))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(f(X1, X2, X3)) -> A__F(mark(X1), X2, mark(X3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(A__F(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[-I]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(a) =  	[[0A]]
>>>

   <<<
 POL(b) =  	[[2A]]
>>>

   <<<
 POL(MARK(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(f(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(mark(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(a__f(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(c) =  	[[3A]]
>>>

   <<<
 POL(a__c) =  	[[3A]]
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   a__c -> c


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> MARK(X)
   A__F(a, b, X) -> A__F(mark(X), X, mark(X))
   MARK(f(X1, X2, X3)) -> MARK(X1)
   MARK(f(X1, X2, X3)) -> MARK(X3)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(f(X1, X2, X3)) -> MARK(X1)

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(f(X1, X2, X3)) -> MARK(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(f(X1, X2, X3)) -> MARK(X3)
The graph contains the following edges 1 > 1


*MARK(f(X1, X2, X3)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__F(a, b, X) -> A__F(mark(X), X, mark(X))

The TRS R consists of the following rules:

   a__f(a, b, X) -> a__f(mark(X), X, mark(X))
   a__c -> a
   a__c -> b
   mark(f(X1, X2, X3)) -> a__f(mark(X1), X2, mark(X3))
   mark(c) -> a__c
   mark(a) -> a
   mark(b) -> b
   a__f(X1, X2, X3) -> f(X1, X2, X3)
   a__c -> c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = A__F(mark(mark(a__c)), mark(a__c), mark(mark(a__c))) evaluates to  t =A__F(mark(mark(a__c)), mark(a__c), mark(mark(a__c)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

A__F(mark(mark(a__c)), mark(a__c), mark(mark(a__c))) -> A__F(mark(mark(a__c)), mark(a__c), mark(mark(c)))
with rule a__c -> c at position [2,0,0] and matcher [ ]

A__F(mark(mark(a__c)), mark(a__c), mark(mark(c))) -> A__F(mark(mark(a__c)), mark(a__c), mark(a__c))
with rule mark(c) -> a__c at position [2,0] and matcher [ ]

A__F(mark(mark(a__c)), mark(a__c), mark(a__c)) -> A__F(mark(mark(a__c)), mark(a__c), mark(c))
with rule a__c -> c at position [2,0] and matcher [ ]

A__F(mark(mark(a__c)), mark(a__c), mark(c)) -> A__F(mark(mark(a__c)), mark(a__c), a__c)
with rule mark(c) -> a__c at position [2] and matcher [ ]

A__F(mark(mark(a__c)), mark(a__c), a__c) -> A__F(mark(mark(a__c)), mark(b), a__c)
with rule a__c -> b at position [1,0] and matcher [ ]

A__F(mark(mark(a__c)), mark(b), a__c) -> A__F(mark(mark(a__c)), b, a__c)
with rule mark(b) -> b at position [1] and matcher [ ]

A__F(mark(mark(a__c)), b, a__c) -> A__F(mark(mark(a)), b, a__c)
with rule a__c -> a at position [0,0,0] and matcher [ ]

A__F(mark(mark(a)), b, a__c) -> A__F(mark(a), b, a__c)
with rule mark(a) -> a at position [0,0] and matcher [ ]

A__F(mark(a), b, a__c) -> A__F(a, b, a__c)
with rule mark(a) -> a at position [0] and matcher [ ]

A__F(a, b, a__c) -> A__F(mark(a__c), a__c, mark(a__c))
with rule A__F(a, b, X') -> A__F(mark(X'), X', mark(X')) at position [] and matcher [X' / a__c]

A__F(mark(a__c), a__c, mark(a__c)) -> A__F(mark(a__c), b, mark(a__c))
with rule a__c -> b at position [1] and matcher [ ]

A__F(mark(a__c), b, mark(a__c)) -> A__F(mark(a), b, mark(a__c))
with rule a__c -> a at position [0,0] and matcher [ ]

A__F(mark(a), b, mark(a__c)) -> A__F(a, b, mark(a__c))
with rule mark(a) -> a at position [0] and matcher [ ]

A__F(a, b, mark(a__c)) -> A__F(mark(mark(a__c)), mark(a__c), mark(mark(a__c)))
with rule A__F(a, b, X) -> A__F(mark(X), X, mark(X))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(16)
NO
