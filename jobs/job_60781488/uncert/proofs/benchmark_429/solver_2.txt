YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hNHbj.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPQMonotonicMRRProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) NonInfProof [EQUIVALENT, 0 ms]
        (29) AND
            (30) QDP
                (31) DependencyGraphProof [EQUIVALENT, 0 ms]
                (32) TRUE
            (33) QDP
                (34) DependencyGraphProof [EQUIVALENT, 0 ms]
                (35) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, y) -> cond(equal(min(x, y), y), x, y)
   cond(true, x, y) -> s(minus(x, s(y)))
   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, y) -> cond(equal(min(x, y), y), x, y)
   cond(true, x, y) -> s(minus(x, s(y)))
   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)
   MINUS(x, y) -> EQUAL(min(x, y), y)
   MINUS(x, y) -> MIN(x, y)
   COND(true, x, y) -> MINUS(x, s(y))
   MIN(s(u), s(v)) -> MIN(u, v)
   EQUAL(s(x), s(y)) -> EQUAL(x, y)

The TRS R consists of the following rules:

   minus(x, y) -> cond(equal(min(x, y), y), x, y)
   cond(true, x, y) -> s(minus(x, s(y)))
   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQUAL(s(x), s(y)) -> EQUAL(x, y)

The TRS R consists of the following rules:

   minus(x, y) -> cond(equal(min(x, y), y), x, y)
   cond(true, x, y) -> s(minus(x, s(y)))
   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQUAL(s(x), s(y)) -> EQUAL(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQUAL(s(x), s(y)) -> EQUAL(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQUAL(s(x), s(y)) -> EQUAL(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(s(u), s(v)) -> MIN(u, v)

The TRS R consists of the following rules:

   minus(x, y) -> cond(equal(min(x, y), y), x, y)
   cond(true, x, y) -> s(minus(x, s(y)))
   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(s(u), s(v)) -> MIN(u, v)

R is empty.
The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(s(u), s(v)) -> MIN(u, v)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MIN(s(u), s(v)) -> MIN(u, v)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> MINUS(x, s(y))
   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)

The TRS R consists of the following rules:

   minus(x, y) -> cond(equal(min(x, y), y), x, y)
   cond(true, x, y) -> s(minus(x, s(y)))
   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> MINUS(x, s(y))
   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)

The TRS R consists of the following rules:

   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   minus(x0, x1)
   cond(true, x0, x1)
   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, x1)
   cond(true, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> MINUS(x, s(y))
   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)

The TRS R consists of the following rules:

   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), 0) -> false
   equal(0, s(y)) -> false
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   equal(s(x), 0) -> false
   equal(0, s(y)) -> false

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(COND(x_1, x_2, x_3)) = x_1 + 2*x_2
   POL(MINUS(x_1, x_2)) = 1 + 2*x_1
   POL(equal(x_1, x_2)) = 1
   POL(false) = 0
   POL(min(x_1, x_2)) = 2
   POL(s(x_1)) = 0
   POL(true) = 1


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> MINUS(x, s(y))
   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)

The TRS R consists of the following rules:

   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND(true, x, y) -> MINUS(x, s(y)) the following chains were created:
*We consider the chain MINUS(x2, x3) -> COND(equal(min(x2, x3), x3), x2, x3), COND(true, x4, x5) -> MINUS(x4, s(x5)) which results in the following constraint:

(1)    (COND(equal(min(x2, x3), x3), x2, x3)=COND(true, x4, x5)  ==>  COND(true, x4, x5)_>=_MINUS(x4, s(x5)))



We simplified constraint (1) using rules (I), (II), (III), (VII) which results in the following new constraint:

(2)    (min(x2, x3)=x12 & equal(x12, x3)=true  ==>  COND(true, x2, x3)_>=_MINUS(x2, s(x3)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on equal(x12, x3)=true which results in the following new constraints:

(3)    (true=true & min(x2, 0)=0  ==>  COND(true, x2, 0)_>=_MINUS(x2, s(0)))

(4)    (equal(x14, x13)=true & min(x2, s(x13))=s(x14) & (\/x15:equal(x14, x13)=true & min(x15, x13)=x14  ==>  COND(true, x15, x13)_>=_MINUS(x15, s(x13)))  ==>  COND(true, x2, s(x13))_>=_MINUS(x2, s(s(x13))))



We simplified constraint (3) using rules (I), (II), (VII) which results in the following new constraint:

(5)    (0=x16 & min(x2, x16)=0  ==>  COND(true, x2, 0)_>=_MINUS(x2, s(0)))



We simplified constraint (4) using rule (VII) which results in the following new constraint:

(6)    (equal(x14, x13)=true & s(x13)=x21 & min(x2, x21)=s(x14) & (\/x15:equal(x14, x13)=true & min(x15, x13)=x14  ==>  COND(true, x15, x13)_>=_MINUS(x15, s(x13)))  ==>  COND(true, x2, s(x13))_>=_MINUS(x2, s(s(x13))))



We simplified constraint (5) using rule (V) (with possible (I) afterwards) using induction on min(x2, x16)=0 which results in the following new constraints:

(7)    (0=0 & 0=x17  ==>  COND(true, 0, 0)_>=_MINUS(0, s(0)))

(8)    (0=0  ==>  COND(true, x18, 0)_>=_MINUS(x18, s(0)))



We simplified constraint (7) using rules (I), (II), (IV) which results in the following new constraint:

(9)    (COND(true, 0, 0)_>=_MINUS(0, s(0)))



We simplified constraint (8) using rules (I), (II) which results in the following new constraint:

(10)    (COND(true, x18, 0)_>=_MINUS(x18, s(0)))



We simplified constraint (6) using rule (V) (with possible (I) afterwards) using induction on min(x2, x21)=s(x14) which results in the following new constraint:

(11)    (s(min(x25, x24))=s(x14) & equal(x14, x13)=true & s(x13)=s(x24) & (\/x15:equal(x14, x13)=true & min(x15, x13)=x14  ==>  COND(true, x15, x13)_>=_MINUS(x15, s(x13))) & (\/x26,x27,x28:min(x25, x24)=s(x26) & equal(x26, x27)=true & s(x27)=x24 & (\/x28:equal(x26, x27)=true & min(x28, x27)=x26  ==>  COND(true, x28, x27)_>=_MINUS(x28, s(x27)))  ==>  COND(true, x25, s(x27))_>=_MINUS(x25, s(s(x27))))  ==>  COND(true, s(x25), s(x13))_>=_MINUS(s(x25), s(s(x13))))



We simplified constraint (11) using rules (I), (II), (IV) which results in the following new constraint:

(12)    (min(x25, x24)=x14 & equal(x14, x13)=true & x13=x24  ==>  COND(true, s(x25), s(x13))_>=_MINUS(s(x25), s(s(x13))))



We simplified constraint (12) using rule (V) (with possible (I) afterwards) using induction on equal(x14, x13)=true which results in the following new constraints:

(13)    (true=true & min(x25, x24)=0 & 0=x24  ==>  COND(true, s(x25), s(0))_>=_MINUS(s(x25), s(s(0))))

(14)    (equal(x30, x29)=true & min(x25, x24)=s(x30) & s(x29)=x24 & (\/x31,x32:equal(x30, x29)=true & min(x31, x32)=x30 & x29=x32  ==>  COND(true, s(x31), s(x29))_>=_MINUS(s(x31), s(s(x29))))  ==>  COND(true, s(x25), s(s(x29)))_>=_MINUS(s(x25), s(s(s(x29)))))



We simplified constraint (13) using rules (I), (II) which results in the following new constraint:

(15)    (min(x25, x24)=0 & 0=x24  ==>  COND(true, s(x25), s(0))_>=_MINUS(s(x25), s(s(0))))



We simplified constraint (14) using rule (V) (with possible (I) afterwards) using induction on min(x25, x24)=s(x30) which results in the following new constraint:

(16)    (s(min(x40, x39))=s(x30) & equal(x30, x29)=true & s(x29)=s(x39) & (\/x31,x32:equal(x30, x29)=true & min(x31, x32)=x30 & x29=x32  ==>  COND(true, s(x31), s(x29))_>=_MINUS(s(x31), s(s(x29)))) & (\/x41,x42,x43,x44:min(x40, x39)=s(x41) & equal(x41, x42)=true & s(x42)=x39 & (\/x43,x44:equal(x41, x42)=true & min(x43, x44)=x41 & x42=x44  ==>  COND(true, s(x43), s(x42))_>=_MINUS(s(x43), s(s(x42))))  ==>  COND(true, s(x40), s(s(x42)))_>=_MINUS(s(x40), s(s(s(x42)))))  ==>  COND(true, s(s(x40)), s(s(x29)))_>=_MINUS(s(s(x40)), s(s(s(x29)))))



We simplified constraint (15) using rule (V) (with possible (I) afterwards) using induction on min(x25, x24)=0 which results in the following new constraints:

(17)    (0=0 & 0=x33  ==>  COND(true, s(0), s(0))_>=_MINUS(s(0), s(s(0))))

(18)    (0=0  ==>  COND(true, s(x34), s(0))_>=_MINUS(s(x34), s(s(0))))



We simplified constraint (17) using rules (I), (II), (IV) which results in the following new constraint:

(19)    (COND(true, s(0), s(0))_>=_MINUS(s(0), s(s(0))))



We simplified constraint (18) using rules (I), (II) which results in the following new constraint:

(20)    (COND(true, s(x34), s(0))_>=_MINUS(s(x34), s(s(0))))



We simplified constraint (16) using rules (I), (II) which results in the following new constraint:

(21)    (min(x40, x39)=x30 & equal(x30, x29)=true & x29=x39 & (\/x31,x32:equal(x30, x29)=true & min(x31, x32)=x30 & x29=x32  ==>  COND(true, s(x31), s(x29))_>=_MINUS(s(x31), s(s(x29)))) & (\/x41,x42,x43,x44:min(x40, x39)=s(x41) & equal(x41, x42)=true & s(x42)=x39 & (\/x43,x44:equal(x41, x42)=true & min(x43, x44)=x41 & x42=x44  ==>  COND(true, s(x43), s(x42))_>=_MINUS(s(x43), s(s(x42))))  ==>  COND(true, s(x40), s(s(x42)))_>=_MINUS(s(x40), s(s(s(x42)))))  ==>  COND(true, s(s(x40)), s(s(x29)))_>=_MINUS(s(s(x40)), s(s(s(x29)))))



We simplified constraint (21) using rule (VI) where we applied the induction hypothesis (\/x31,x32:equal(x30, x29)=true & min(x31, x32)=x30 & x29=x32  ==>  COND(true, s(x31), s(x29))_>=_MINUS(s(x31), s(s(x29)))) with sigma = [x31 / x40, x32 / x39] which results in the following new constraint:

(22)    (COND(true, s(x40), s(x29))_>=_MINUS(s(x40), s(s(x29))) & (\/x41,x42,x43,x44:min(x40, x39)=s(x41) & equal(x41, x42)=true & s(x42)=x39 & (\/x43,x44:equal(x41, x42)=true & min(x43, x44)=x41 & x42=x44  ==>  COND(true, s(x43), s(x42))_>=_MINUS(s(x43), s(s(x42))))  ==>  COND(true, s(x40), s(s(x42)))_>=_MINUS(s(x40), s(s(s(x42)))))  ==>  COND(true, s(s(x40)), s(s(x29)))_>=_MINUS(s(s(x40)), s(s(s(x29)))))



We simplified constraint (22) using rule (IV) which results in the following new constraint:

(23)    (COND(true, s(x40), s(x29))_>=_MINUS(s(x40), s(s(x29)))  ==>  COND(true, s(s(x40)), s(s(x29)))_>=_MINUS(s(s(x40)), s(s(s(x29)))))








For Pair MINUS(x, y) -> COND(equal(min(x, y), y), x, y) the following chains were created:
*We consider the chain COND(true, x6, x7) -> MINUS(x6, s(x7)), MINUS(x8, x9) -> COND(equal(min(x8, x9), x9), x8, x9) which results in the following constraint:

(1)    (MINUS(x6, s(x7))=MINUS(x8, x9)  ==>  MINUS(x8, x9)_>=_COND(equal(min(x8, x9), x9), x8, x9))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (MINUS(x6, s(x7))_>=_COND(equal(min(x6, s(x7)), s(x7)), x6, s(x7)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND(true, x, y) -> MINUS(x, s(y))

*(COND(true, 0, 0)_>=_MINUS(0, s(0)))


*(COND(true, x18, 0)_>=_MINUS(x18, s(0)))


*(COND(true, s(0), s(0))_>=_MINUS(s(0), s(s(0))))


*(COND(true, s(x34), s(0))_>=_MINUS(s(x34), s(s(0))))


*(COND(true, s(x40), s(x29))_>=_MINUS(s(x40), s(s(x29)))  ==>  COND(true, s(s(x40)), s(s(x29)))_>=_MINUS(s(s(x40)), s(s(s(x29)))))




*MINUS(x, y) -> COND(equal(min(x, y), y), x, y)

*(MINUS(x6, s(x7))_>=_COND(equal(min(x6, s(x7)), s(x7)), x6, s(x7)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(COND(x_1, x_2, x_3)) = -1 - x_1 + x_2 - x_3
   POL(MINUS(x_1, x_2)) = -1 + x_1 - x_2
   POL(c) = -2
   POL(equal(x_1, x_2)) = 1
   POL(min(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 1


The following pairs  are in P_>:
   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)
The following pairs are in P_bound:
   COND(true, x, y) -> MINUS(x, s(y))
The following rules are usable:
   true -> equal(0, 0)
   equal(x, y) -> equal(s(x), s(y))

----------------------------------------

(29)
Complex Obligation (AND)

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> MINUS(x, s(y))

The TRS R consists of the following rules:

   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(32)
TRUE

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, y) -> COND(equal(min(x, y), y), x, y)

The TRS R consists of the following rules:

   min(0, v) -> 0
   min(u, 0) -> 0
   min(s(u), s(v)) -> s(min(u, v))
   equal(0, 0) -> true
   equal(s(x), s(y)) -> equal(x, y)

The set Q consists of the following terms:

   min(0, x0)
   min(x0, 0)
   min(s(x0), s(x1))
   equal(0, 0)
   equal(s(x0), 0)
   equal(0, s(x0))
   equal(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(35)
TRUE
