YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WCA72.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) ATransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) QDP
        (35) UsableRulesProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) ATransformationProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QReductionProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPOrderProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) PisEmptyProof [EQUIVALENT, 0 ms]
        (44) YES
    (45) QDP
        (46) UsableRulesProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (49) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(sub, app(s, x)), app(s, y)) -> APP(app(sub, x), y)
   APP(app(sub, app(s, x)), app(s, y)) -> APP(sub, x)
   APP(app(gtr, app(s, x)), app(s, y)) -> APP(app(gtr, x), y)
   APP(app(gtr, app(s, x)), app(s, y)) -> APP(gtr, x)
   APP(app(d, app(s, x)), app(s, y)) -> APP(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   APP(app(d, app(s, x)), app(s, y)) -> APP(app(if, app(app(gtr, x), y)), false)
   APP(app(d, app(s, x)), app(s, y)) -> APP(if, app(app(gtr, x), y))
   APP(app(d, app(s, x)), app(s, y)) -> APP(app(gtr, x), y)
   APP(app(d, app(s, x)), app(s, y)) -> APP(gtr, x)
   APP(app(d, app(s, x)), app(s, y)) -> APP(app(d, app(s, x)), app(app(sub, y), x))
   APP(app(d, app(s, x)), app(s, y)) -> APP(app(sub, y), x)
   APP(app(d, app(s, x)), app(s, y)) -> APP(sub, y)
   APP(len, app(app(cons, x), xs)) -> APP(s, app(len, xs))
   APP(len, app(app(cons, x), xs)) -> APP(len, xs)
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs)))
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(if, app(p, x))
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(p, x)
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(cons, x), app(app(filter, p), xs))
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(filter, p), xs)

The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 14 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(len, app(app(cons, x), xs)) -> APP(len, xs)

The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(len, app(app(cons, x), xs)) -> APP(len, xs)

R is empty.
The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   len1(cons(x, xs)) -> len1(xs)

R is empty.
The set Q consists of the following terms:

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   len1(cons(x, xs)) -> len1(xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*len1(cons(x, xs)) -> len1(xs)
The graph contains the following edges 1 > 1


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(gtr, app(s, x)), app(s, y)) -> APP(app(gtr, x), y)

The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(gtr, app(s, x)), app(s, y)) -> APP(app(gtr, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   gtr1(s(x), s(y)) -> gtr1(x, y)

R is empty.
The set Q consists of the following terms:

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   gtr1(s(x), s(y)) -> gtr1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*gtr1(s(x), s(y)) -> gtr1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(sub, app(s, x)), app(s, y)) -> APP(app(sub, x), y)

The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(sub, app(s, x)), app(s, y)) -> APP(app(sub, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   sub1(s(x), s(y)) -> sub1(x, y)

R is empty.
The set Q consists of the following terms:

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   sub1(s(x), s(y)) -> sub1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*sub1(s(x), s(y)) -> sub1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(d, app(s, x)), app(s, y)) -> APP(app(d, app(s, x)), app(app(sub, y), x))

The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(d, app(s, x)), app(s, y)) -> APP(app(d, app(s, x)), app(app(sub, y), x))

The TRS R consists of the following rules:

   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   d1(s(x), s(y)) -> d1(s(x), sub(y, x))

The TRS R consists of the following rules:

   sub(x, 0) -> x
   sub(s(x), s(y)) -> sub(x, y)

The set Q consists of the following terms:

   if(true, x0, x1)
   if(false, x0, x1)
   sub(x0, 0)
   sub(s(x0), s(x1))
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if(true, x0, x1)
   if(false, x0, x1)
   gtr(0, x0)
   gtr(s(x0), 0)
   gtr(s(x0), s(x1))
   d(x0, 0)
   d(s(x0), s(x1))
   len(nil)
   len(cons(x0, x1))
   filter(x0, nil)
   filter(x0, cons(x1, x2))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   d1(s(x), s(y)) -> d1(s(x), sub(y, x))

The TRS R consists of the following rules:

   sub(x, 0) -> x
   sub(s(x), s(y)) -> sub(x, y)

The set Q consists of the following terms:

   sub(x0, 0)
   sub(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   d1(s(x), s(y)) -> d1(s(x), sub(y, x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
d1(x1, x2)  =  x2

s(x1)  =  s(x1)

sub(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   sub(x, 0) -> x
   sub(s(x), s(y)) -> sub(x, y)


----------------------------------------

(42)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   sub(x, 0) -> x
   sub(s(x), s(y)) -> sub(x, y)

The set Q consists of the following terms:

   sub(x0, 0)
   sub(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(filter, p), xs)
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(p, x)

The TRS R consists of the following rules:

   app(app(app(if, true), xs), ys) -> xs
   app(app(app(if, false), xs), ys) -> ys
   app(app(sub, x), 0) -> x
   app(app(sub, app(s, x)), app(s, y)) -> app(app(sub, x), y)
   app(app(gtr, 0), y) -> false
   app(app(gtr, app(s, x)), 0) -> true
   app(app(gtr, app(s, x)), app(s, y)) -> app(app(gtr, x), y)
   app(app(d, x), 0) -> true
   app(app(d, app(s, x)), app(s, y)) -> app(app(app(if, app(app(gtr, x), y)), false), app(app(d, app(s, x)), app(app(sub, y), x)))
   app(len, nil) -> 0
   app(len, app(app(cons, x), xs)) -> app(s, app(len, xs))
   app(app(filter, p), nil) -> nil
   app(app(filter, p), app(app(cons, x), xs)) -> app(app(app(if, app(p, x)), app(app(cons, x), app(app(filter, p), xs))), app(app(filter, p), xs))

The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(filter, p), xs)
   APP(app(filter, p), app(app(cons, x), xs)) -> APP(p, x)

R is empty.
The set Q consists of the following terms:

   app(app(app(if, true), x0), x1)
   app(app(app(if, false), x0), x1)
   app(app(sub, x0), 0)
   app(app(sub, app(s, x0)), app(s, x1))
   app(app(gtr, 0), x0)
   app(app(gtr, app(s, x0)), 0)
   app(app(gtr, app(s, x0)), app(s, x1))
   app(app(d, x0), 0)
   app(app(d, app(s, x0)), app(s, x1))
   app(len, nil)
   app(len, app(app(cons, x0), x1))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, p), app(app(cons, x), xs)) -> APP(app(filter, p), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, p), app(app(cons, x), xs)) -> APP(p, x)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(49)
YES
