YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ElT4O.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [EQUIVALENT, 0 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 27 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) CSRRRRProof [EQUIVALENT, 0 ms]
(10) CSR
(11) CSRRRRProof [EQUIVALENT, 0 ms]
(12) CSR
(13) RisEmptyProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(fst(X1, X2)) -> fst(active(X1), X2)
   active(fst(X1, X2)) -> fst(X1, active(X2))
   active(from(X)) -> from(active(X))
   active(add(X1, X2)) -> add(active(X1), X2)
   active(add(X1, X2)) -> add(X1, active(X2))
   active(len(X)) -> len(active(X))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   fst(mark(X1), X2) -> mark(fst(X1, X2))
   fst(X1, mark(X2)) -> mark(fst(X1, X2))
   from(mark(X)) -> mark(from(X))
   add(mark(X1), X2) -> mark(add(X1, X2))
   add(X1, mark(X2)) -> mark(add(X1, X2))
   len(mark(X)) -> mark(len(X))
   proper(0) -> ok(0)
   proper(s(X)) -> s(proper(X))
   proper(nil) -> ok(nil)
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(fst(X1, X2)) -> fst(proper(X1), proper(X2))
   proper(from(X)) -> from(proper(X))
   proper(add(X1, X2)) -> add(proper(X1), proper(X2))
   proper(len(X)) -> len(proper(X))
   s(ok(X)) -> ok(s(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   fst(ok(X1), ok(X2)) -> ok(fst(X1, X2))
   from(ok(X)) -> ok(from(X))
   add(ok(X1), ok(X2)) -> ok(add(X1, X2))
   len(ok(X)) -> ok(len(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.

----------------------------------------

(1) QTRSToCSRProof (EQUIVALENT)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(fst(0, Z)) -> mark(nil)
   active(fst(s(X), cons(Y, Z))) -> mark(cons(Y, fst(X, Z)))
   active(from(X)) -> mark(cons(X, from(s(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(len(nil)) -> mark(0)
   active(len(cons(X, Z))) -> mark(s(len(Z)))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(fst(X1, X2)) -> fst(active(X1), X2)
   active(fst(X1, X2)) -> fst(X1, active(X2))
   active(from(X)) -> from(active(X))
   active(add(X1, X2)) -> add(active(X1), X2)
   active(add(X1, X2)) -> add(X1, active(X2))
   active(len(X)) -> len(active(X))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   fst(mark(X1), X2) -> mark(fst(X1, X2))
   fst(X1, mark(X2)) -> mark(fst(X1, X2))
   from(mark(X)) -> mark(from(X))
   add(mark(X1), X2) -> mark(add(X1, X2))
   add(X1, mark(X2)) -> mark(add(X1, X2))
   len(mark(X)) -> mark(len(X))
   proper(0) -> ok(0)
   proper(s(X)) -> s(proper(X))
   proper(nil) -> ok(nil)
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(fst(X1, X2)) -> fst(proper(X1), proper(X2))
   proper(from(X)) -> from(proper(X))
   proper(add(X1, X2)) -> add(proper(X1), proper(X2))
   proper(len(X)) -> len(proper(X))
   s(ok(X)) -> ok(s(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   fst(ok(X1), ok(X2)) -> ok(fst(X1, X2))
   from(ok(X)) -> ok(from(X))
   add(ok(X1), ok(X2)) -> ok(add(X1, X2))
   len(ok(X)) -> ok(len(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.
Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

fst: {1, 2}
0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}
The QTRS contained all rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is complete (and sound).
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   fst(0, Z) -> nil
   fst(s(X), cons(Y, Z)) -> cons(Y, fst(X, Z))
   from(X) -> cons(X, from(s(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   len(nil) -> 0
   len(cons(X, Z)) -> s(len(Z))

The replacement map contains the following entries:

fst: {1, 2}
0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   fst(0, Z) -> nil
   fst(s(X), cons(Y, Z)) -> cons(Y, fst(X, Z))
   from(X) -> cons(X, from(s(X)))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   len(nil) -> 0
   len(cons(X, Z)) -> s(len(Z))

The replacement map contains the following entries:

fst: {1, 2}
0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(add(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 1 + x_1
   POL(from(x_1)) = 1 + x_1
   POL(fst(x_1, x_2)) = x_1 + x_2
   POL(len(x_1)) = x_1
   POL(nil) = 1
   POL(s(x_1)) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   fst(s(X), cons(Y, Z)) -> cons(Y, fst(X, Z))
   add(0, X) -> X




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   fst(0, Z) -> nil
   from(X) -> cons(X, from(s(X)))
   add(s(X), Y) -> s(add(X, Y))
   len(nil) -> 0
   len(cons(X, Z)) -> s(len(Z))

The replacement map contains the following entries:

fst: {1, 2}
0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   fst(0, Z) -> nil
   from(X) -> cons(X, from(s(X)))
   add(s(X), Y) -> s(add(X, Y))
   len(nil) -> 0
   len(cons(X, Z)) -> s(len(Z))

The replacement map contains the following entries:

fst: {1, 2}
0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(add(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 1 + x_1
   POL(fst(x_1, x_2)) = 1 + x_1 + x_2
   POL(len(x_1)) = 1 + x_1
   POL(nil) = 0
   POL(s(x_1)) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   fst(0, Z) -> nil
   len(cons(X, Z)) -> s(len(Z))




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, from(s(X)))
   add(s(X), Y) -> s(add(X, Y))
   len(nil) -> 0

The replacement map contains the following entries:

0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, from(s(X)))
   add(s(X), Y) -> s(add(X, Y))
   len(nil) -> 0

The replacement map contains the following entries:

0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
add: {1, 2}
len: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(add(x_1, x_2)) = 1 + x_1 + x_2
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(from(x_1)) = 1 + x_1
   POL(len(x_1)) = x_1
   POL(nil) = 1
   POL(s(x_1)) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   add(s(X), Y) -> s(add(X, Y))




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, from(s(X)))
   len(nil) -> 0

The replacement map contains the following entries:

0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
len: {1}

----------------------------------------

(9) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, from(s(X)))
   len(nil) -> 0

The replacement map contains the following entries:

0: empty set
nil: empty set
s: empty set
cons: {1}
from: {1}
len: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(cons(x_1, x_2)) = x_1
   POL(from(x_1)) = 2*x_1
   POL(len(x_1)) = 1 + x_1
   POL(nil) = 2
   POL(s(x_1)) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   len(nil) -> 0




----------------------------------------

(10)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, from(s(X)))

The replacement map contains the following entries:

s: empty set
cons: {1}
from: {1}

----------------------------------------

(11) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   from(X) -> cons(X, from(s(X)))

The replacement map contains the following entries:

s: empty set
cons: {1}
from: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(cons(x_1, x_2)) = x_1
   POL(from(x_1)) = 1 + 2*x_1
   POL(s(x_1)) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   from(X) -> cons(X, from(s(X)))




----------------------------------------

(12)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(13) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(14)
YES
