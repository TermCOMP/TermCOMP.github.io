YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y Z)
(RULES
active(add(s(X),Y)) -> mark(s(add(X,Y)))
active(add(num0,X)) -> mark(X)
active(add(X1,X2)) -> add(active(X1),X2)
active(add(X1,X2)) -> add(X1,active(X2))
active(cons(X1,X2)) -> cons(active(X1),X2)
active(from(X)) -> from(active(X))
active(from(X)) -> mark(cons(X,from(s(X))))
active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
active(fst(num0,Z)) -> mark(nil)
active(fst(X1,X2)) -> fst(active(X1),X2)
active(fst(X1,X2)) -> fst(X1,active(X2))
active(len(cons(X,Z))) -> mark(s(len(Z)))
active(len(nil)) -> mark(num0)
active(len(X)) -> len(active(X))
add(mark(X1),X2) -> mark(add(X1,X2))
add(ok(X1),ok(X2)) -> ok(add(X1,X2))
add(X1,mark(X2)) -> mark(add(X1,X2))
cons(mark(X1),X2) -> mark(cons(X1,X2))
cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
from(mark(X)) -> mark(from(X))
from(ok(X)) -> ok(from(X))
fst(mark(X1),X2) -> mark(fst(X1,X2))
fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
fst(X1,mark(X2)) -> mark(fst(X1,X2))
len(mark(X)) -> mark(len(X))
len(ok(X)) -> ok(len(X))
proper(add(X1,X2)) -> add(proper(X1),proper(X2))
proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
proper(from(X)) -> from(proper(X))
proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
proper(len(X)) -> len(proper(X))
proper(s(X)) -> s(proper(X))
proper(num0) -> ok(num0)
proper(nil) -> ok(nil)
s(ok(X)) -> ok(s(X))
top(mark(X)) -> top(proper(X))
top(ok(X)) -> top(active(X))
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> ADD(X,Y)
 ACTIVE(add(s(X),Y)) -> S(add(X,Y))
 ACTIVE(add(X1,X2)) -> ACTIVE(X1)
 ACTIVE(add(X1,X2)) -> ACTIVE(X2)
 ACTIVE(add(X1,X2)) -> ADD(active(X1),X2)
 ACTIVE(add(X1,X2)) -> ADD(X1,active(X2))
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(cons(X1,X2)) -> CONS(active(X1),X2)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(active(X))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(fst(s(X),cons(Y,Z))) -> CONS(Y,fst(X,Z))
 ACTIVE(fst(s(X),cons(Y,Z))) -> FST(X,Z)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X1)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X2)
 ACTIVE(fst(X1,X2)) -> FST(active(X1),X2)
 ACTIVE(fst(X1,X2)) -> FST(X1,active(X2))
 ACTIVE(len(cons(X,Z))) -> LEN(Z)
 ACTIVE(len(cons(X,Z))) -> S(len(Z))
 ACTIVE(len(X)) -> ACTIVE(X)
 ACTIVE(len(X)) -> LEN(active(X))
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(ok(X1),ok(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(ok(X1),ok(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
 LEN(mark(X)) -> LEN(X)
 LEN(ok(X)) -> LEN(X)
 PROPER(add(X1,X2)) -> ADD(proper(X1),proper(X2))
 PROPER(add(X1,X2)) -> PROPER(X1)
 PROPER(add(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> FROM(proper(X))
 PROPER(from(X)) -> PROPER(X)
 PROPER(fst(X1,X2)) -> FST(proper(X1),proper(X2))
 PROPER(fst(X1,X2)) -> PROPER(X1)
 PROPER(fst(X1,X2)) -> PROPER(X2)
 PROPER(len(X)) -> LEN(proper(X))
 PROPER(len(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 S(ok(X)) -> S(X)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(add(s(X),Y)) -> ADD(X,Y)
 ACTIVE(add(s(X),Y)) -> S(add(X,Y))
 ACTIVE(add(X1,X2)) -> ACTIVE(X1)
 ACTIVE(add(X1,X2)) -> ACTIVE(X2)
 ACTIVE(add(X1,X2)) -> ADD(active(X1),X2)
 ACTIVE(add(X1,X2)) -> ADD(X1,active(X2))
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(cons(X1,X2)) -> CONS(active(X1),X2)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(from(X)) -> CONS(X,from(s(X)))
 ACTIVE(from(X)) -> FROM(active(X))
 ACTIVE(from(X)) -> FROM(s(X))
 ACTIVE(from(X)) -> S(X)
 ACTIVE(fst(s(X),cons(Y,Z))) -> CONS(Y,fst(X,Z))
 ACTIVE(fst(s(X),cons(Y,Z))) -> FST(X,Z)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X1)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X2)
 ACTIVE(fst(X1,X2)) -> FST(active(X1),X2)
 ACTIVE(fst(X1,X2)) -> FST(X1,active(X2))
 ACTIVE(len(cons(X,Z))) -> LEN(Z)
 ACTIVE(len(cons(X,Z))) -> S(len(Z))
 ACTIVE(len(X)) -> ACTIVE(X)
 ACTIVE(len(X)) -> LEN(active(X))
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(ok(X1),ok(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(ok(X1),ok(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
 LEN(mark(X)) -> LEN(X)
 LEN(ok(X)) -> LEN(X)
 PROPER(add(X1,X2)) -> ADD(proper(X1),proper(X2))
 PROPER(add(X1,X2)) -> PROPER(X1)
 PROPER(add(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> CONS(proper(X1),proper(X2))
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> FROM(proper(X))
 PROPER(from(X)) -> PROPER(X)
 PROPER(fst(X1,X2)) -> FST(proper(X1),proper(X2))
 PROPER(fst(X1,X2)) -> PROPER(X1)
 PROPER(fst(X1,X2)) -> PROPER(X2)
 PROPER(len(X)) -> LEN(proper(X))
 PROPER(len(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
 PROPER(s(X)) -> S(proper(X))
 S(ok(X)) -> S(X)
 TOP(mark(X)) -> PROPER(X)
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> ACTIVE(X)
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 S(ok(X)) -> S(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 LEN(mark(X)) -> LEN(X)
 LEN(ok(X)) -> LEN(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(ok(X1),ok(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(ok(X1),ok(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 PROPER(add(X1,X2)) -> PROPER(X1)
 PROPER(add(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> PROPER(X)
 PROPER(fst(X1,X2)) -> PROPER(X1)
 PROPER(fst(X1,X2)) -> PROPER(X2)
 PROPER(len(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 ACTIVE(add(X1,X2)) -> ACTIVE(X1)
 ACTIVE(add(X1,X2)) -> ACTIVE(X2)
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X1)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X2)
 ACTIVE(len(X)) -> ACTIVE(X)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->->Cycle:
->->-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))


The problem is decomposed in 9 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 S(ok(X)) -> S(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(S) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 LEN(mark(X)) -> LEN(X)
 LEN(ok(X)) -> LEN(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(LEN) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 FST(mark(X1),X2) -> FST(X1,X2)
 FST(ok(X1),ok(X2)) -> FST(X1,X2)
 FST(X1,mark(X2)) -> FST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(FST) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 FST(X1,mark(X2)) -> FST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 FST(X1,mark(X2)) -> FST(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1.3: 

Subterm Processor:
-> Pairs:
 FST(X1,mark(X2)) -> FST(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(FST) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 FROM(mark(X)) -> FROM(X)
 FROM(ok(X)) -> FROM(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(FROM) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(ok(X1),ok(X2)) -> CONS(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(CONS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 ADD(mark(X1),X2) -> ADD(X1,X2)
 ADD(ok(X1),ok(X2)) -> ADD(X1,X2)
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(ADD) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ADD(X1,mark(X2)) -> ADD(X1,X2)
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1.6: 

Subterm Processor:
-> Pairs:
 ADD(X1,mark(X2)) -> ADD(X1,X2)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(ADD) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 PROPER(add(X1,X2)) -> PROPER(X1)
 PROPER(add(X1,X2)) -> PROPER(X2)
 PROPER(cons(X1,X2)) -> PROPER(X1)
 PROPER(cons(X1,X2)) -> PROPER(X2)
 PROPER(from(X)) -> PROPER(X)
 PROPER(fst(X1,X2)) -> PROPER(X1)
 PROPER(fst(X1,X2)) -> PROPER(X2)
 PROPER(len(X)) -> PROPER(X)
 PROPER(s(X)) -> PROPER(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(PROPER) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Subterm Processor:
-> Pairs:
 ACTIVE(add(X1,X2)) -> ACTIVE(X1)
 ACTIVE(add(X1,X2)) -> ACTIVE(X2)
 ACTIVE(cons(X1,X2)) -> ACTIVE(X1)
 ACTIVE(from(X)) -> ACTIVE(X)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X1)
 ACTIVE(fst(X1,X2)) -> ACTIVE(X2)
 ACTIVE(len(X)) -> ACTIVE(X)
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Projection:
 pi(ACTIVE) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 TOP(mark(X)) -> TOP(proper(X))
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = X + 2
[proper](X) = X
[s](X) = 0
[top](X) = 0
[num0] = 2
[fSNonEmpty] = 0
[mark](X) = X + 2
[nil] = 2
[ok](X) = X
[ACTIVE](X) = 0
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[PROPER](X) = 0
[S](X) = 0
[TOP](X) = 2.X

Problem 1.9: 

SCC Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
->->-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 TOP(ok(X)) -> TOP(active(X))
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
-> Usable rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 s(ok(X)) -> ok(s(X))
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[add](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = 2.X2 + 2
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 1
[len](X) = 2.X
[proper](X) = 0
[s](X) = 2.X + 2
[top](X) = 0
[num0] = 2
[fSNonEmpty] = 0
[mark](X) = 2
[nil] = 2
[ok](X) = 2.X + 2
[ACTIVE](X) = 0
[ADD](X1,X2) = 0
[CONS](X1,X2) = 0
[FROM](X) = 0
[FST](X1,X2) = 0
[LEN](X) = 0
[PROPER](X) = 0
[S](X) = 0
[TOP](X) = X

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(add(s(X),Y)) -> mark(s(add(X,Y)))
 active(add(num0,X)) -> mark(X)
 active(add(X1,X2)) -> add(active(X1),X2)
 active(add(X1,X2)) -> add(X1,active(X2))
 active(cons(X1,X2)) -> cons(active(X1),X2)
 active(from(X)) -> from(active(X))
 active(from(X)) -> mark(cons(X,from(s(X))))
 active(fst(s(X),cons(Y,Z))) -> mark(cons(Y,fst(X,Z)))
 active(fst(num0,Z)) -> mark(nil)
 active(fst(X1,X2)) -> fst(active(X1),X2)
 active(fst(X1,X2)) -> fst(X1,active(X2))
 active(len(cons(X,Z))) -> mark(s(len(Z)))
 active(len(nil)) -> mark(num0)
 active(len(X)) -> len(active(X))
 add(mark(X1),X2) -> mark(add(X1,X2))
 add(ok(X1),ok(X2)) -> ok(add(X1,X2))
 add(X1,mark(X2)) -> mark(add(X1,X2))
 cons(mark(X1),X2) -> mark(cons(X1,X2))
 cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
 from(mark(X)) -> mark(from(X))
 from(ok(X)) -> ok(from(X))
 fst(mark(X1),X2) -> mark(fst(X1,X2))
 fst(ok(X1),ok(X2)) -> ok(fst(X1,X2))
 fst(X1,mark(X2)) -> mark(fst(X1,X2))
 len(mark(X)) -> mark(len(X))
 len(ok(X)) -> ok(len(X))
 proper(add(X1,X2)) -> add(proper(X1),proper(X2))
 proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
 proper(from(X)) -> from(proper(X))
 proper(fst(X1,X2)) -> fst(proper(X1),proper(X2))
 proper(len(X)) -> len(proper(X))
 proper(s(X)) -> s(proper(X))
 proper(num0) -> ok(num0)
 proper(nil) -> ok(nil)
 s(ok(X)) -> ok(s(X))
 top(mark(X)) -> top(proper(X))
 top(ok(X)) -> top(active(X))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
