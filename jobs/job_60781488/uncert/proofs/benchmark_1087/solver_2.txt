YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/j5a1C.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) UsableRulesProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   2nd(cons1(X, cons(Y, Z))) -> Y
   2nd(cons(X, X1)) -> 2nd(cons1(X, activate(X1)))
   from(X) -> cons(X, n__from(n__s(X)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   2ND(cons(X, X1)) -> 2ND(cons1(X, activate(X1)))
   2ND(cons(X, X1)) -> ACTIVATE(X1)
   ACTIVATE(n__from(X)) -> FROM(activate(X))
   ACTIVATE(n__from(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   2nd(cons1(X, cons(Y, Z))) -> Y
   2nd(cons(X, X1)) -> 2nd(cons1(X, activate(X1)))
   from(X) -> cons(X, n__from(n__s(X)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   2nd(cons1(X, cons(Y, Z))) -> Y
   2nd(cons(X, X1)) -> 2nd(cons1(X, activate(X1)))
   from(X) -> cons(X, n__from(n__s(X)))
   from(X) -> n__from(X)
   s(X) -> n__s(X)
   activate(n__from(X)) -> from(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__from(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*ACTIVATE(n__from(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(8)
YES
