NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/V7sYO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 3 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) MNOCProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) NonTerminationLoopProof [COMPLETE, 0 ms]
        (26) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c -> f(n__g(n__c))
   f(n__g(X)) -> g(activate(X))
   g(X) -> n__g(X)
   c -> n__c
   activate(n__g(X)) -> g(X)
   activate(n__c) -> c
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c'(x) -> n__c'(n__g(f(x)))
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)
   c'(x) -> n__c'(x)
   n__g(activate(X)) -> g(X)
   n__c'(activate(x)) -> c'(x)
   activate(X) -> X

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(activate(x_1)) = 1 + x_1
   POL(c'(x_1)) = 1 + x_1
   POL(f(x_1)) = 1 + x_1
   POL(g(x_1)) = x_1
   POL(n__c'(x_1)) = x_1
   POL(n__g(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   c'(x) -> n__c'(x)
   n__g(activate(X)) -> g(X)
   activate(X) -> X




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c'(x) -> n__c'(n__g(f(x)))
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)
   n__c'(activate(x)) -> c'(x)

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)

The TRS R 2 is 
   c'(x) -> n__c'(n__g(f(x)))
   n__c'(activate(x)) -> c'(x)

The signature Sigma is {c'_1, n__c'_1}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c'(x) -> n__c'(n__g(f(x)))
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)
   n__c'(activate(x)) -> c'(x)

The set Q consists of the following terms:

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C'(x) -> N__C'(n__g(f(x)))
   C'(x) -> N__G(f(x))
   N__G(f(X)) -> G(X)
   G(X) -> N__G(X)
   N__C'(activate(x)) -> C'(x)

The TRS R consists of the following rules:

   c'(x) -> n__c'(n__g(f(x)))
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)
   n__c'(activate(x)) -> c'(x)

The set Q consists of the following terms:

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(X) -> N__G(X)
   N__G(f(X)) -> G(X)

The TRS R consists of the following rules:

   c'(x) -> n__c'(n__g(f(x)))
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)
   n__c'(activate(x)) -> c'(x)

The set Q consists of the following terms:

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(X) -> N__G(X)
   N__G(f(X)) -> G(X)

R is empty.
The set Q consists of the following terms:

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G(X) -> N__G(X)
   N__G(f(X)) -> G(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*N__G(f(X)) -> G(X)
The graph contains the following edges 1 > 1


*G(X) -> N__G(X)
The graph contains the following edges 1 >= 1


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N__C'(activate(x)) -> C'(x)
   C'(x) -> N__C'(n__g(f(x)))

The TRS R consists of the following rules:

   c'(x) -> n__c'(n__g(f(x)))
   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)
   n__c'(activate(x)) -> c'(x)

The set Q consists of the following terms:

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N__C'(activate(x)) -> C'(x)
   C'(x) -> N__C'(n__g(f(x)))

The TRS R consists of the following rules:

   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)

The set Q consists of the following terms:

   c'(x0)
   n__g(f(x0))
   g(x0)
   n__c'(activate(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   c'(x0)
   n__c'(activate(x0))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N__C'(activate(x)) -> C'(x)
   C'(x) -> N__C'(n__g(f(x)))

The TRS R consists of the following rules:

   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)

The set Q consists of the following terms:

   n__g(f(x0))
   g(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N__C'(activate(x)) -> C'(x)
   C'(x) -> N__C'(n__g(f(x)))

The TRS R consists of the following rules:

   n__g(f(X)) -> activate(g(X))
   g(X) -> n__g(X)

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = C'(x) evaluates to  t =C'(g(x))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x / g(x)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

C'(x) -> N__C'(n__g(f(x)))
with rule C'(x') -> N__C'(n__g(f(x'))) at position [] and matcher [x' / x]

N__C'(n__g(f(x))) -> N__C'(activate(g(x)))
with rule n__g(f(X)) -> activate(g(X)) at position [0] and matcher [X / x]

N__C'(activate(g(x))) -> C'(g(x))
with rule N__C'(activate(x)) -> C'(x)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(26)
NO
