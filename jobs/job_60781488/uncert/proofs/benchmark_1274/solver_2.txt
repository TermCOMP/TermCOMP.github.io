YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Iwkzm.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (44) YES
    (45) QDP
        (46) UsableRulesProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (49) YES
    (50) QDP
        (51) UsableRulesProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (54) YES
    (55) QDP
        (56) UsableRulesProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (59) YES
    (60) QDP
        (61) UsableRulesProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (64) YES
    (65) QDP
        (66) UsableRulesProof [EQUIVALENT, 0 ms]
        (67) QDP
        (68) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (69) YES
    (70) QDP
        (71) UsableRulesProof [EQUIVALENT, 0 ms]
        (72) QDP
        (73) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (74) YES
    (75) QDP
        (76) UsableRulesProof [EQUIVALENT, 0 ms]
        (77) QDP
        (78) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (79) YES
    (80) QDP
        (81) QDPOrderProof [EQUIVALENT, 277 ms]
        (82) QDP
        (83) QDPOrderProof [EQUIVALENT, 22 ms]
        (84) QDP
        (85) QDPOrderProof [EQUIVALENT, 492 ms]
        (86) QDP
        (87) QDPOrderProof [EQUIVALENT, 146 ms]
        (88) QDP
        (89) QDPOrderProof [EQUIVALENT, 129 ms]
        (90) QDP
        (91) QDPOrderProof [EQUIVALENT, 72 ms]
        (92) QDP
        (93) QDPOrderProof [EQUIVALENT, 158 ms]
        (94) QDP
        (95) QDPOrderProof [EQUIVALENT, 277 ms]
        (96) QDP
        (97) QDPOrderProof [EQUIVALENT, 146 ms]
        (98) QDP
        (99) QDPOrderProof [EQUIVALENT, 106 ms]
        (100) QDP
        (101) QDPOrderProof [EQUIVALENT, 228 ms]
        (102) QDP
        (103) QDPOrderProof [EQUIVALENT, 40 ms]
        (104) QDP
        (105) QDPOrderProof [EQUIVALENT, 69 ms]
        (106) QDP
        (107) UsableRulesProof [EQUIVALENT, 0 ms]
        (108) QDP
        (109) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (110) QDP
        (111) DependencyGraphProof [EQUIVALENT, 0 ms]
        (112) QDP
        (113) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (114) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   ACTIVE(U11(tt, V2)) -> U12^1(isNat(V2))
   ACTIVE(U11(tt, V2)) -> ISNAT(V2)
   ACTIVE(U12(tt)) -> MARK(tt)
   ACTIVE(U21(tt)) -> MARK(tt)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   ACTIVE(U31(tt, V2)) -> U32^1(isNat(V2))
   ACTIVE(U31(tt, V2)) -> ISNAT(V2)
   ACTIVE(U32(tt)) -> MARK(tt)
   ACTIVE(U41(tt, N)) -> MARK(N)
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   ACTIVE(U51(tt, M, N)) -> U52^1(isNat(N), M, N)
   ACTIVE(U51(tt, M, N)) -> ISNAT(N)
   ACTIVE(U52(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(U52(tt, M, N)) -> S(plus(N, M))
   ACTIVE(U52(tt, M, N)) -> PLUS(N, M)
   ACTIVE(U61(tt)) -> MARK(0)
   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
   ACTIVE(U71(tt, M, N)) -> U72^1(isNat(N), M, N)
   ACTIVE(U71(tt, M, N)) -> ISNAT(N)
   ACTIVE(U72(tt, M, N)) -> MARK(plus(x(N, M), N))
   ACTIVE(U72(tt, M, N)) -> PLUS(x(N, M), N)
   ACTIVE(U72(tt, M, N)) -> X(N, M)
   ACTIVE(isNat(0)) -> MARK(tt)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(plus(V1, V2))) -> U11^1(isNat(V1), V2)
   ACTIVE(isNat(plus(V1, V2))) -> ISNAT(V1)
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(s(V1))) -> U21^1(isNat(V1))
   ACTIVE(isNat(s(V1))) -> ISNAT(V1)
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   ACTIVE(isNat(x(V1, V2))) -> U31^1(isNat(V1), V2)
   ACTIVE(isNat(x(V1, V2))) -> ISNAT(V1)
   ACTIVE(plus(N, 0)) -> MARK(U41(isNat(N), N))
   ACTIVE(plus(N, 0)) -> U41^1(isNat(N), N)
   ACTIVE(plus(N, 0)) -> ISNAT(N)
   ACTIVE(plus(N, s(M))) -> MARK(U51(isNat(M), M, N))
   ACTIVE(plus(N, s(M))) -> U51^1(isNat(M), M, N)
   ACTIVE(plus(N, s(M))) -> ISNAT(M)
   ACTIVE(x(N, 0)) -> MARK(U61(isNat(N)))
   ACTIVE(x(N, 0)) -> U61^1(isNat(N))
   ACTIVE(x(N, 0)) -> ISNAT(N)
   ACTIVE(x(N, s(M))) -> MARK(U71(isNat(M), M, N))
   ACTIVE(x(N, s(M))) -> U71^1(isNat(M), M, N)
   ACTIVE(x(N, s(M))) -> ISNAT(M)
   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   MARK(U11(X1, X2)) -> U11^1(mark(X1), X2)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(tt) -> ACTIVE(tt)
   MARK(U12(X)) -> ACTIVE(U12(mark(X)))
   MARK(U12(X)) -> U12^1(mark(X))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U21(X)) -> U21^1(mark(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> U31^1(mark(X1), X2)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   MARK(U32(X)) -> U32^1(mark(X))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U41(X1, X2)) -> U41^1(mark(X1), X2)
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U51(X1, X2, X3)) -> ACTIVE(U51(mark(X1), X2, X3))
   MARK(U51(X1, X2, X3)) -> U51^1(mark(X1), X2, X3)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   MARK(U52(X1, X2, X3)) -> U52^1(mark(X1), X2, X3)
   MARK(U52(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(plus(X1, X2)) -> PLUS(mark(X1), mark(X2))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   MARK(U61(X)) -> ACTIVE(U61(mark(X)))
   MARK(U61(X)) -> U61^1(mark(X))
   MARK(U61(X)) -> MARK(X)
   MARK(0) -> ACTIVE(0)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U71(X1, X2, X3)) -> U71^1(mark(X1), X2, X3)
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))
   MARK(U72(X1, X2, X3)) -> U72^1(mark(X1), X2, X3)
   MARK(U72(X1, X2, X3)) -> MARK(X1)
   MARK(x(X1, X2)) -> ACTIVE(x(mark(X1), mark(X2)))
   MARK(x(X1, X2)) -> X(mark(X1), mark(X2))
   MARK(x(X1, X2)) -> MARK(X1)
   MARK(x(X1, X2)) -> MARK(X2)
   U11^1(mark(X1), X2) -> U11^1(X1, X2)
   U11^1(X1, mark(X2)) -> U11^1(X1, X2)
   U11^1(active(X1), X2) -> U11^1(X1, X2)
   U11^1(X1, active(X2)) -> U11^1(X1, X2)
   U12^1(mark(X)) -> U12^1(X)
   U12^1(active(X)) -> U12^1(X)
   ISNAT(mark(X)) -> ISNAT(X)
   ISNAT(active(X)) -> ISNAT(X)
   U21^1(mark(X)) -> U21^1(X)
   U21^1(active(X)) -> U21^1(X)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)
   U32^1(mark(X)) -> U32^1(X)
   U32^1(active(X)) -> U32^1(X)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)
   U51^1(mark(X1), X2, X3) -> U51^1(X1, X2, X3)
   U51^1(X1, mark(X2), X3) -> U51^1(X1, X2, X3)
   U51^1(X1, X2, mark(X3)) -> U51^1(X1, X2, X3)
   U51^1(active(X1), X2, X3) -> U51^1(X1, X2, X3)
   U51^1(X1, active(X2), X3) -> U51^1(X1, X2, X3)
   U51^1(X1, X2, active(X3)) -> U51^1(X1, X2, X3)
   U52^1(mark(X1), X2, X3) -> U52^1(X1, X2, X3)
   U52^1(X1, mark(X2), X3) -> U52^1(X1, X2, X3)
   U52^1(X1, X2, mark(X3)) -> U52^1(X1, X2, X3)
   U52^1(active(X1), X2, X3) -> U52^1(X1, X2, X3)
   U52^1(X1, active(X2), X3) -> U52^1(X1, X2, X3)
   U52^1(X1, X2, active(X3)) -> U52^1(X1, X2, X3)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)
   U61^1(mark(X)) -> U61^1(X)
   U61^1(active(X)) -> U61^1(X)
   U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
   U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)
   U72^1(mark(X1), X2, X3) -> U72^1(X1, X2, X3)
   U72^1(X1, mark(X2), X3) -> U72^1(X1, X2, X3)
   U72^1(X1, X2, mark(X3)) -> U72^1(X1, X2, X3)
   U72^1(active(X1), X2, X3) -> U72^1(X1, X2, X3)
   U72^1(X1, active(X2), X3) -> U72^1(X1, X2, X3)
   U72^1(X1, X2, active(X3)) -> U72^1(X1, X2, X3)
   X(mark(X1), X2) -> X(X1, X2)
   X(X1, mark(X2)) -> X(X1, X2)
   X(active(X1), X2) -> X(X1, X2)
   X(X1, active(X2)) -> X(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 16 SCCs with 47 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   X(X1, mark(X2)) -> X(X1, X2)
   X(mark(X1), X2) -> X(X1, X2)
   X(active(X1), X2) -> X(X1, X2)
   X(X1, active(X2)) -> X(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   X(X1, mark(X2)) -> X(X1, X2)
   X(mark(X1), X2) -> X(X1, X2)
   X(active(X1), X2) -> X(X1, X2)
   X(X1, active(X2)) -> X(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*X(X1, mark(X2)) -> X(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*X(mark(X1), X2) -> X(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*X(active(X1), X2) -> X(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*X(X1, active(X2)) -> X(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U72^1(X1, mark(X2), X3) -> U72^1(X1, X2, X3)
   U72^1(mark(X1), X2, X3) -> U72^1(X1, X2, X3)
   U72^1(X1, X2, mark(X3)) -> U72^1(X1, X2, X3)
   U72^1(active(X1), X2, X3) -> U72^1(X1, X2, X3)
   U72^1(X1, active(X2), X3) -> U72^1(X1, X2, X3)
   U72^1(X1, X2, active(X3)) -> U72^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U72^1(X1, mark(X2), X3) -> U72^1(X1, X2, X3)
   U72^1(mark(X1), X2, X3) -> U72^1(X1, X2, X3)
   U72^1(X1, X2, mark(X3)) -> U72^1(X1, X2, X3)
   U72^1(active(X1), X2, X3) -> U72^1(X1, X2, X3)
   U72^1(X1, active(X2), X3) -> U72^1(X1, X2, X3)
   U72^1(X1, X2, active(X3)) -> U72^1(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U72^1(X1, mark(X2), X3) -> U72^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U72^1(mark(X1), X2, X3) -> U72^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U72^1(X1, X2, mark(X3)) -> U72^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U72^1(active(X1), X2, X3) -> U72^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U72^1(X1, active(X2), X3) -> U72^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U72^1(X1, X2, active(X3)) -> U72^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
   U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
   U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
   U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
   U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U71^1(X1, mark(X2), X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U71^1(mark(X1), X2, X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U71^1(X1, X2, mark(X3)) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U71^1(active(X1), X2, X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U71^1(X1, active(X2), X3) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U71^1(X1, X2, active(X3)) -> U71^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(active(X)) -> U61^1(X)
   U61^1(mark(X)) -> U61^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U61^1(active(X)) -> U61^1(X)
   U61^1(mark(X)) -> U61^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U61^1(active(X)) -> U61^1(X)
The graph contains the following edges 1 > 1


*U61^1(mark(X)) -> U61^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(X1, mark(X2)) -> PLUS(X1, X2)
   PLUS(mark(X1), X2) -> PLUS(X1, X2)
   PLUS(active(X1), X2) -> PLUS(X1, X2)
   PLUS(X1, active(X2)) -> PLUS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(X1, mark(X2)) -> PLUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*PLUS(mark(X1), X2) -> PLUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*PLUS(active(X1), X2) -> PLUS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*PLUS(X1, active(X2)) -> PLUS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(X1, mark(X2), X3) -> U52^1(X1, X2, X3)
   U52^1(mark(X1), X2, X3) -> U52^1(X1, X2, X3)
   U52^1(X1, X2, mark(X3)) -> U52^1(X1, X2, X3)
   U52^1(active(X1), X2, X3) -> U52^1(X1, X2, X3)
   U52^1(X1, active(X2), X3) -> U52^1(X1, X2, X3)
   U52^1(X1, X2, active(X3)) -> U52^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U52^1(X1, mark(X2), X3) -> U52^1(X1, X2, X3)
   U52^1(mark(X1), X2, X3) -> U52^1(X1, X2, X3)
   U52^1(X1, X2, mark(X3)) -> U52^1(X1, X2, X3)
   U52^1(active(X1), X2, X3) -> U52^1(X1, X2, X3)
   U52^1(X1, active(X2), X3) -> U52^1(X1, X2, X3)
   U52^1(X1, X2, active(X3)) -> U52^1(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U52^1(X1, mark(X2), X3) -> U52^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U52^1(mark(X1), X2, X3) -> U52^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U52^1(X1, X2, mark(X3)) -> U52^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U52^1(active(X1), X2, X3) -> U52^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U52^1(X1, active(X2), X3) -> U52^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U52^1(X1, X2, active(X3)) -> U52^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2), X3) -> U51^1(X1, X2, X3)
   U51^1(mark(X1), X2, X3) -> U51^1(X1, X2, X3)
   U51^1(X1, X2, mark(X3)) -> U51^1(X1, X2, X3)
   U51^1(active(X1), X2, X3) -> U51^1(X1, X2, X3)
   U51^1(X1, active(X2), X3) -> U51^1(X1, X2, X3)
   U51^1(X1, X2, active(X3)) -> U51^1(X1, X2, X3)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U51^1(X1, mark(X2), X3) -> U51^1(X1, X2, X3)
   U51^1(mark(X1), X2, X3) -> U51^1(X1, X2, X3)
   U51^1(X1, X2, mark(X3)) -> U51^1(X1, X2, X3)
   U51^1(active(X1), X2, X3) -> U51^1(X1, X2, X3)
   U51^1(X1, active(X2), X3) -> U51^1(X1, X2, X3)
   U51^1(X1, X2, active(X3)) -> U51^1(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U51^1(X1, mark(X2), X3) -> U51^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U51^1(mark(X1), X2, X3) -> U51^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U51^1(X1, X2, mark(X3)) -> U51^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*U51^1(active(X1), X2, X3) -> U51^1(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*U51^1(X1, active(X2), X3) -> U51^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*U51^1(X1, X2, active(X3)) -> U51^1(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(X1, mark(X2)) -> U41^1(X1, X2)
   U41^1(mark(X1), X2) -> U41^1(X1, X2)
   U41^1(active(X1), X2) -> U41^1(X1, X2)
   U41^1(X1, active(X2)) -> U41^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U41^1(X1, mark(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U41^1(mark(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(active(X1), X2) -> U41^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U41^1(X1, active(X2)) -> U41^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(active(X)) -> U32^1(X)
   U32^1(mark(X)) -> U32^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32^1(active(X)) -> U32^1(X)
   U32^1(mark(X)) -> U32^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U32^1(active(X)) -> U32^1(X)
The graph contains the following edges 1 > 1


*U32^1(mark(X)) -> U32^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(54)
YES

----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31^1(X1, mark(X2)) -> U31^1(X1, X2)
   U31^1(mark(X1), X2) -> U31^1(X1, X2)
   U31^1(active(X1), X2) -> U31^1(X1, X2)
   U31^1(X1, active(X2)) -> U31^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U31^1(X1, mark(X2)) -> U31^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U31^1(mark(X1), X2) -> U31^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U31^1(active(X1), X2) -> U31^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U31^1(X1, active(X2)) -> U31^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(59)
YES

----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21^1(active(X)) -> U21^1(X)
   U21^1(mark(X)) -> U21^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U21^1(active(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


*U21^1(mark(X)) -> U21^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(64)
YES

----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(active(X)) -> ISNAT(X)
   ISNAT(mark(X)) -> ISNAT(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT(active(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


*ISNAT(mark(X)) -> ISNAT(X)
The graph contains the following edges 1 > 1


----------------------------------------

(69)
YES

----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U12^1(active(X)) -> U12^1(X)
   U12^1(mark(X)) -> U12^1(X)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U12^1(active(X)) -> U12^1(X)
   U12^1(mark(X)) -> U12^1(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(73) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U12^1(active(X)) -> U12^1(X)
The graph contains the following edges 1 > 1


*U12^1(mark(X)) -> U12^1(X)
The graph contains the following edges 1 > 1


----------------------------------------

(74)
YES

----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(X1, mark(X2)) -> U11^1(X1, X2)
   U11^1(mark(X1), X2) -> U11^1(X1, X2)
   U11^1(active(X1), X2) -> U11^1(X1, X2)
   U11^1(X1, active(X2)) -> U11^1(X1, X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(X1, mark(X2)) -> U11^1(X1, X2)
   U11^1(mark(X1), X2) -> U11^1(X1, X2)
   U11^1(active(X1), X2) -> U11^1(X1, X2)
   U11^1(X1, active(X2)) -> U11^1(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U11^1(X1, mark(X2)) -> U11^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*U11^1(mark(X1), X2) -> U11^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U11^1(active(X1), X2) -> U11^1(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*U11^1(X1, active(X2)) -> U11^1(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(79)
YES

----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> ACTIVE(U12(mark(X)))
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U41(tt, N)) -> MARK(N)
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U52(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, M, N)) -> MARK(plus(x(N, M), N))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U51(X1, X2, X3)) -> ACTIVE(U51(mark(X1), X2, X3))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U52(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(plus(N, 0)) -> MARK(U41(isNat(N), N))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   MARK(U61(X)) -> ACTIVE(U61(mark(X)))
   ACTIVE(plus(N, s(M))) -> MARK(U51(isNat(M), M, N))
   MARK(U61(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(x(N, 0)) -> MARK(U61(isNat(N)))
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))
   ACTIVE(x(N, s(M))) -> MARK(U71(isNat(M), M, N))
   MARK(U72(X1, X2, X3)) -> MARK(X1)
   MARK(x(X1, X2)) -> ACTIVE(x(mark(X1), mark(X2)))
   MARK(x(X1, X2)) -> MARK(X1)
   MARK(x(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U12(X)) -> ACTIVE(U12(mark(X)))
   MARK(U21(X)) -> ACTIVE(U21(mark(X)))
   MARK(U32(X)) -> ACTIVE(U32(mark(X)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, x_1 - 1}
POL( U11_2(x_1, x_2) ) = 2
POL( U12_1(x_1) ) = max{0, -2}
POL( U21_1(x_1) ) = 0
POL( U31_2(x_1, x_2) ) = 2
POL( U32_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = 2
POL( U51_3(x_1, ..., x_3) ) = 2
POL( U52_3(x_1, ..., x_3) ) = 2
POL( U61_1(x_1) ) = 2
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_3(x_1, ..., x_3) ) = 2
POL( plus_2(x_1, x_2) ) = 2
POL( s_1(x_1) ) = max{0, -2}
POL( x_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( isNat_1(x_1) ) = 2
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U12(active(X)) -> U12(X)
   U12(mark(X)) -> U12(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(mark(X1), X2) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U61(active(X)) -> U61(X)
   U61(mark(X)) -> U61(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U41(tt, N)) -> MARK(N)
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U52(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, M, N)) -> MARK(plus(x(N, M), N))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U51(X1, X2, X3)) -> ACTIVE(U51(mark(X1), X2, X3))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U52(X1, X2, X3)) -> MARK(X1)
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(plus(N, 0)) -> MARK(U41(isNat(N), N))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   MARK(U61(X)) -> ACTIVE(U61(mark(X)))
   ACTIVE(plus(N, s(M))) -> MARK(U51(isNat(M), M, N))
   MARK(U61(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(x(N, 0)) -> MARK(U61(isNat(N)))
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))
   ACTIVE(x(N, s(M))) -> MARK(U71(isNat(M), M, N))
   MARK(U72(X1, X2, X3)) -> MARK(X1)
   MARK(x(X1, X2)) -> ACTIVE(x(mark(X1), mark(X2)))
   MARK(x(X1, X2)) -> MARK(X1)
   MARK(x(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U61(X)) -> ACTIVE(U61(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 1
   POL(U11(x_1, x_2)) = 1
   POL(U12(x_1)) = 0
   POL(U21(x_1)) = 0
   POL(U31(x_1, x_2)) = 1
   POL(U32(x_1)) = 0
   POL(U41(x_1, x_2)) = 1
   POL(U51(x_1, x_2, x_3)) = 1
   POL(U52(x_1, x_2, x_3)) = 1
   POL(U61(x_1)) = 0
   POL(U71(x_1, x_2, x_3)) = 1
   POL(U72(x_1, x_2, x_3)) = 1
   POL(active(x_1)) = 0
   POL(isNat(x_1)) = 1
   POL(mark(x_1)) = 0
   POL(plus(x_1, x_2)) = 1
   POL(s(x_1)) = 0
   POL(tt) = 0
   POL(x(x_1, x_2)) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(mark(X1), X2) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U61(active(X)) -> U61(X)
   U61(mark(X)) -> U61(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U41(tt, N)) -> MARK(N)
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   ACTIVE(U52(tt, M, N)) -> MARK(s(plus(N, M)))
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   ACTIVE(U72(tt, M, N)) -> MARK(plus(x(N, M), N))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U51(X1, X2, X3)) -> ACTIVE(U51(mark(X1), X2, X3))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   MARK(U52(X1, X2, X3)) -> MARK(X1)
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(s(X)) -> MARK(X)
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   ACTIVE(plus(N, 0)) -> MARK(U41(isNat(N), N))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(plus(N, s(M))) -> MARK(U51(isNat(M), M, N))
   MARK(U61(X)) -> MARK(X)
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   ACTIVE(x(N, 0)) -> MARK(U61(isNat(N)))
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))
   ACTIVE(x(N, s(M))) -> MARK(U71(isNat(M), M, N))
   MARK(U72(X1, X2, X3)) -> MARK(X1)
   MARK(x(X1, X2)) -> ACTIVE(x(mark(X1), mark(X2)))
   MARK(x(X1, X2)) -> MARK(X1)
   MARK(x(X1, X2)) -> MARK(X2)

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U41(tt, N)) -> MARK(N)
   ACTIVE(U52(tt, M, N)) -> MARK(s(plus(N, M)))
   ACTIVE(U72(tt, M, N)) -> MARK(plus(x(N, M), N))
   MARK(U41(X1, X2)) -> MARK(X1)
   MARK(U51(X1, X2, X3)) -> MARK(X1)
   MARK(U52(X1, X2, X3)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
   ACTIVE(plus(N, 0)) -> MARK(U41(isNat(N), N))
   MARK(plus(X1, X2)) -> MARK(X1)
   MARK(plus(X1, X2)) -> MARK(X2)
   ACTIVE(plus(N, s(M))) -> MARK(U51(isNat(M), M, N))
   MARK(U61(X)) -> MARK(X)
   ACTIVE(x(N, 0)) -> MARK(U61(isNat(N)))
   MARK(U71(X1, X2, X3)) -> MARK(X1)
   ACTIVE(x(N, s(M))) -> MARK(U71(isNat(M), M, N))
   MARK(U72(X1, X2, X3)) -> MARK(X1)
   MARK(x(X1, X2)) -> MARK(X1)
   MARK(x(X1, X2)) -> MARK(X2)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  MARK(x1)

U11(x1, x2)  =  x1

ACTIVE(x1)  =  ACTIVE(x1)

mark(x1)  =  x1

tt  =  tt

U12(x1)  =  x1

isNat(x1)  =  isNat

U31(x1, x2)  =  x1

U32(x1)  =  x1

U41(x1, x2)  =  U41(x1, x2)

U51(x1, x2, x3)  =  U51(x1, x2, x3)

U52(x1, x2, x3)  =  U52(x1, x2, x3)

U21(x1)  =  x1

s(x1)  =  s(x1)

plus(x1, x2)  =  plus(x1, x2)

U71(x1, x2, x3)  =  U71(x1, x2, x3)

U72(x1, x2, x3)  =  U72(x1, x2, x3)

x(x1, x2)  =  x(x1, x2)

0  =  0

U61(x1)  =  U61(x1)

active(x1)  =  x1


Recursive path order with status [RPO].
Quasi-Precedence: [MARK_1, ACTIVE_1, U71_3, U72_3, x_2, 0, U61_1] > [U41_2, U51_3, U52_3, plus_2] > [tt, isNat, s_1]

Status: MARK_1: [1]
ACTIVE_1: [1]
tt: multiset status
isNat: multiset status
U41_2: multiset status
U51_3: multiset status
U52_3: multiset status
s_1: multiset status
plus_2: multiset status
U71_3: multiset status
U72_3: multiset status
x_2: multiset status
0: multiset status
U61_1: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   mark(U12(X)) -> active(U12(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   mark(isNat(X)) -> active(isNat(X))
   active(U41(tt, N)) -> mark(N)
   mark(U21(X)) -> active(U21(mark(X)))
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   mark(U61(X)) -> active(U61(mark(X)))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U12(active(X)) -> U12(X)
   U12(mark(X)) -> U12(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(mark(X1), X2) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U61(active(X)) -> U61(X)
   U61(mark(X)) -> U61(X)
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U61(tt)) -> mark(0)
   active(isNat(0)) -> mark(tt)


----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
   MARK(U32(X)) -> MARK(X)
   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U51(X1, X2, X3)) -> ACTIVE(U51(mark(X1), X2, X3))
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))
   MARK(x(X1, X2)) -> ACTIVE(x(mark(X1), mark(X2)))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(87) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U41(X1, X2)) -> ACTIVE(U41(mark(X1), X2))
   MARK(U51(X1, X2, X3)) -> ACTIVE(U51(mark(X1), X2, X3))
   MARK(plus(X1, X2)) -> ACTIVE(plus(mark(X1), mark(X2)))
   MARK(U71(X1, X2, X3)) -> ACTIVE(U71(mark(X1), X2, X3))
   MARK(x(X1, X2)) -> ACTIVE(x(mark(X1), mark(X2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = 2x_1 + 1
POL( U31_2(x_1, x_2) ) = 2x_1 + 1
POL( U41_2(x_1, x_2) ) = 2
POL( U51_3(x_1, ..., x_3) ) = x_2 + 2x_3 + 2
POL( U52_3(x_1, ..., x_3) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = x_2 + x_3 + 2
POL( U72_3(x_1, ..., x_3) ) = 1
POL( plus_2(x_1, x_2) ) = 2
POL( x_2(x_1, x_2) ) = 2
POL( mark_1(x_1) ) = 2x_1
POL( active_1(x_1) ) = 2x_1 + 2
POL( tt ) = 0
POL( U12_1(x_1) ) = 2x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( U32_1(x_1) ) = x_1 + 1
POL( U21_1(x_1) ) = 2x_1 + 1
POL( s_1(x_1) ) = max{0, -2}
POL( 0 ) = 0
POL( U61_1(x_1) ) = x_1 + 2
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U12(active(X)) -> U12(X)
   U12(mark(X)) -> U12(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)


----------------------------------------

(88)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
   MARK(U32(X)) -> MARK(X)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(89) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U71(tt, M, N)) -> MARK(U72(isNat(N), M, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1 + 2
POL( U11_2(x_1, x_2) ) = 0
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( U52_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_3(x_1, ..., x_3) ) = max{0, -2}
POL( mark_1(x_1) ) = 2
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( tt ) = 2
POL( U12_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 0
POL( U32_1(x_1) ) = 2
POL( U41_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U21_1(x_1) ) = 2
POL( U51_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( s_1(x_1) ) = x_1 + 2
POL( plus_2(x_1, x_2) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = 2x_1 + 2
POL( x_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( 0 ) = 0
POL( U61_1(x_1) ) = max{0, -2}
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)


----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(91) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U51(tt, M, N)) -> MARK(U52(isNat(N), M, N))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( U52_3(x_1, ..., x_3) ) = max{0, -2}
POL( U72_3(x_1, ..., x_3) ) = 0
POL( mark_1(x_1) ) = 1
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( tt ) = 1
POL( U12_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 0
POL( U32_1(x_1) ) = 2
POL( U41_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 1}
POL( U21_1(x_1) ) = max{0, -2}
POL( U51_3(x_1, ..., x_3) ) = 2x_1 + x_2 + 1
POL( s_1(x_1) ) = x_1 + 2
POL( plus_2(x_1, x_2) ) = x_2 + 2
POL( U71_3(x_1, ..., x_3) ) = max{0, x_2 + x_3 - 2}
POL( x_2(x_1, x_2) ) = 2x_2 + 2
POL( 0 ) = 0
POL( U61_1(x_1) ) = max{0, -2}
POL( MARK_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)


----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U52(X1, X2, X3)) -> ACTIVE(U52(mark(X1), X2, X3))
   MARK(U72(X1, X2, X3)) -> ACTIVE(U72(mark(X1), X2, X3))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U11_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = 2
POL( U52_3(x_1, ..., x_3) ) = 1
POL( U72_3(x_1, ..., x_3) ) = 1
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( tt ) = 0
POL( U12_1(x_1) ) = 2
POL( isNat_1(x_1) ) = 2
POL( U32_1(x_1) ) = max{0, -2}
POL( U41_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U21_1(x_1) ) = max{0, -2}
POL( U51_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( s_1(x_1) ) = max{0, 2x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U71_3(x_1, ..., x_3) ) = max{0, 2x_2 + 2x_3 - 2}
POL( x_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( 0 ) = 0
POL( U61_1(x_1) ) = 2
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)


----------------------------------------

(94)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(95) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U31(tt, V2)) -> MARK(U32(isNat(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(MARK(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(ACTIVE(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[0A]]
>>>

   <<<
 POL(U12(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(isNat(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[5A]] 	* 	x_2
>>>

   <<<
 POL(U32(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U21(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(plus(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(x(x_1, x_2)) =  	[[-I]] 	 +  	[[1A]] 	* 	x_1 	 +  	[[5A]] 	* 	x_2
>>>

   <<<
 POL(active(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U51(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U52(x_1, x_2, x_3)) =  	[[0A]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U71(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[5A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(U72(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[5A]] 	* 	x_2 	 +  	[[1A]] 	* 	x_3
>>>

   <<<
 POL(0) =  	[[5A]]
>>>

   <<<
 POL(U61(x_1)) =  	[[5A]] 	 +  	[[0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   mark(U12(X)) -> active(U12(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   mark(isNat(X)) -> active(isNat(X))
   active(U41(tt, N)) -> mark(N)
   mark(U21(X)) -> active(U21(mark(X)))
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   mark(U61(X)) -> active(U61(mark(X)))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U12(active(X)) -> U12(X)
   U12(mark(X)) -> U12(X)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U61(tt)) -> mark(0)
   active(isNat(0)) -> mark(tt)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(mark(X1), X2) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U61(active(X)) -> U61(X)
   U61(mark(X)) -> U61(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U31(X1, X2)) -> ACTIVE(U31(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = x_1
POL( U11_2(x_1, x_2) ) = 2
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = max{0, x_1 - 2}
POL( active_1(x_1) ) = max{0, x_1 - 2}
POL( tt ) = 2
POL( U12_1(x_1) ) = max{0, -2}
POL( isNat_1(x_1) ) = 2
POL( U32_1(x_1) ) = 0
POL( U41_2(x_1, x_2) ) = 2
POL( U21_1(x_1) ) = 2x_1
POL( U51_3(x_1, ..., x_3) ) = 2
POL( U52_3(x_1, ..., x_3) ) = max{0, x_1 + x_3 - 2}
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( U71_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_2 - 2}
POL( U72_3(x_1, ..., x_3) ) = 2x_2 + 2
POL( x_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( 0 ) = 0
POL( U61_1(x_1) ) = max{0, -2}
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)


----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   MARK(U32(X)) -> MARK(X)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(99) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U32(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = 0
POL( U11_2(x_1, x_2) ) = x_1 + 1
POL( mark_1(x_1) ) = 2x_1 + 2
POL( active_1(x_1) ) = x_1 + 1
POL( tt ) = 1
POL( U12_1(x_1) ) = 2x_1 + 1
POL( isNat_1(x_1) ) = 0
POL( U31_2(x_1, x_2) ) = 2x_1 + 1
POL( U32_1(x_1) ) = x_1 + 2
POL( U41_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( U21_1(x_1) ) = x_1 + 1
POL( U51_3(x_1, ..., x_3) ) = max{0, 2x_2 - 2}
POL( U52_3(x_1, ..., x_3) ) = max{0, 2x_1 - 1}
POL( s_1(x_1) ) = x_1
POL( plus_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U71_3(x_1, ..., x_3) ) = 2x_1 + x_3 + 2
POL( U72_3(x_1, ..., x_3) ) = max{0, 2x_2 + 2x_3 - 2}
POL( x_2(x_1, x_2) ) = 2x_1 + 2
POL( 0 ) = 2
POL( U61_1(x_1) ) = 2
POL( MARK_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U12(active(X)) -> U12(X)
   U12(mark(X)) -> U12(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(101) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ACTIVE(U11(tt, V2)) -> MARK(U12(isNat(V2)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(MARK(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U11(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[4A]] 	* 	x_2
>>>

   <<<
 POL(ACTIVE(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(mark(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(tt) =  	[[4A]]
>>>

   <<<
 POL(U12(x_1)) =  	[[-I]] 	 +  	[[3A]] 	* 	x_1
>>>

   <<<
 POL(isNat(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U21(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U31(x_1, x_2)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(plus(x_1, x_2)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[4A]] 	* 	x_2
>>>

   <<<
 POL(s(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(x(x_1, x_2)) =  	[[0A]] 	 +  	[[4A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2
>>>

   <<<
 POL(active(x_1)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U32(x_1)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1
>>>

   <<<
 POL(U41(x_1, x_2)) =  	[[-I]] 	 +  	[[-I]] 	* 	x_1 	 +  	[[0A]] 	* 	x_2
>>>

   <<<
 POL(U51(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[4A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U52(x_1, x_2, x_3)) =  	[[-I]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[4A]] 	* 	x_2 	 +  	[[0A]] 	* 	x_3
>>>

   <<<
 POL(U71(x_1, x_2, x_3)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[4A]] 	* 	x_3
>>>

   <<<
 POL(U72(x_1, x_2, x_3)) =  	[[0A]] 	 +  	[[0A]] 	* 	x_1 	 +  	[[1A]] 	* 	x_2 	 +  	[[4A]] 	* 	x_3
>>>

   <<<
 POL(0) =  	[[4A]]
>>>

   <<<
 POL(U61(x_1)) =  	[[-I]] 	 +  	[[4A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   mark(U12(X)) -> active(U12(mark(X)))
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   mark(isNat(X)) -> active(isNat(X))
   active(U41(tt, N)) -> mark(N)
   mark(U21(X)) -> active(U21(mark(X)))
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   mark(U32(X)) -> active(U32(mark(X)))
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   mark(s(X)) -> active(s(mark(X)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   mark(U61(X)) -> active(U61(mark(X)))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   mark(tt) -> active(tt)
   mark(0) -> active(0)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U12(active(X)) -> U12(X)
   U12(mark(X)) -> U12(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U32(tt)) -> mark(tt)
   active(U61(tt)) -> mark(0)
   active(isNat(0)) -> mark(tt)
   U32(active(X)) -> U32(X)
   U32(mark(X)) -> U32(X)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(mark(X1), X2) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U61(active(X)) -> U61(X)
   U61(mark(X)) -> U61(X)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)


----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U12(X)) -> MARK(X)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(103) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U12(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, -2}
POL( U11_2(x_1, x_2) ) = x_1 + 1
POL( mark_1(x_1) ) = 2x_1 + 1
POL( active_1(x_1) ) = x_1 + 2
POL( tt ) = 0
POL( U12_1(x_1) ) = x_1 + 2
POL( isNat_1(x_1) ) = 0
POL( U31_2(x_1, x_2) ) = x_1 + 1
POL( U32_1(x_1) ) = 2
POL( U41_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U21_1(x_1) ) = x_1 + 1
POL( U51_3(x_1, ..., x_3) ) = x_2 + 2x_3 + 2
POL( U52_3(x_1, ..., x_3) ) = max{0, 2x_1 - 1}
POL( s_1(x_1) ) = x_1 + 1
POL( plus_2(x_1, x_2) ) = max{0, -2}
POL( U71_3(x_1, ..., x_3) ) = max{0, 2x_1 + x_2 + x_3 - 2}
POL( U72_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( x_2(x_1, x_2) ) = 0
POL( 0 ) = 0
POL( U61_1(x_1) ) = max{0, x_1 - 2}
POL( MARK_1(x_1) ) = max{0, x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)


----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(105) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(U11(X1, X2)) -> ACTIVE(U11(mark(X1), X2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( mark_1(x_1) ) = 2
POL( active_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( U12_1(x_1) ) = 0
POL( isNat_1(x_1) ) = 2
POL( U31_2(x_1, x_2) ) = max{0, -2}
POL( U32_1(x_1) ) = max{0, 2x_1 - 2}
POL( U41_2(x_1, x_2) ) = max{0, -2}
POL( U21_1(x_1) ) = max{0, -2}
POL( U51_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U52_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_2 - 2}
POL( s_1(x_1) ) = max{0, x_1 - 2}
POL( plus_2(x_1, x_2) ) = max{0, 2x_1 + x_2 - 2}
POL( U71_3(x_1, ..., x_3) ) = 2
POL( U72_3(x_1, ..., x_3) ) = x_1 + x_3 + 1
POL( x_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( 0 ) = 0
POL( U61_1(x_1) ) = 2
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   active(U11(tt, V2)) -> mark(U12(isNat(V2)))
   active(U12(tt)) -> mark(tt)
   active(U21(tt)) -> mark(tt)
   active(U31(tt, V2)) -> mark(U32(isNat(V2)))
   active(U32(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(U52(isNat(N), M, N))
   active(U52(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(U72(isNat(N), M, N))
   active(U72(tt, M, N)) -> mark(plus(x(N, M), N))
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(isNat(V1), V2))
   active(isNat(s(V1))) -> mark(U21(isNat(V1)))
   active(isNat(x(V1, V2))) -> mark(U31(isNat(V1), V2))
   active(plus(N, 0)) -> mark(U41(isNat(N), N))
   active(plus(N, s(M))) -> mark(U51(isNat(M), M, N))
   active(x(N, 0)) -> mark(U61(isNat(N)))
   active(x(N, s(M))) -> mark(U71(isNat(M), M, N))
   mark(U11(X1, X2)) -> active(U11(mark(X1), X2))
   mark(tt) -> active(tt)
   mark(U12(X)) -> active(U12(mark(X)))
   mark(isNat(X)) -> active(isNat(X))
   mark(U21(X)) -> active(U21(mark(X)))
   mark(U31(X1, X2)) -> active(U31(mark(X1), X2))
   mark(U32(X)) -> active(U32(mark(X)))
   mark(U41(X1, X2)) -> active(U41(mark(X1), X2))
   mark(U51(X1, X2, X3)) -> active(U51(mark(X1), X2, X3))
   mark(U52(X1, X2, X3)) -> active(U52(mark(X1), X2, X3))
   mark(s(X)) -> active(s(mark(X)))
   mark(plus(X1, X2)) -> active(plus(mark(X1), mark(X2)))
   mark(U61(X)) -> active(U61(mark(X)))
   mark(0) -> active(0)
   mark(U71(X1, X2, X3)) -> active(U71(mark(X1), X2, X3))
   mark(U72(X1, X2, X3)) -> active(U72(mark(X1), X2, X3))
   mark(x(X1, X2)) -> active(x(mark(X1), mark(X2)))
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
   U12(mark(X)) -> U12(X)
   U12(active(X)) -> U12(X)
   isNat(mark(X)) -> isNat(X)
   isNat(active(X)) -> isNat(X)
   U21(mark(X)) -> U21(X)
   U21(active(X)) -> U21(X)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U32(mark(X)) -> U32(X)
   U32(active(X)) -> U32(X)
   U41(mark(X1), X2) -> U41(X1, X2)
   U41(X1, mark(X2)) -> U41(X1, X2)
   U41(active(X1), X2) -> U41(X1, X2)
   U41(X1, active(X2)) -> U41(X1, X2)
   U51(mark(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, mark(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, mark(X3)) -> U51(X1, X2, X3)
   U51(active(X1), X2, X3) -> U51(X1, X2, X3)
   U51(X1, active(X2), X3) -> U51(X1, X2, X3)
   U51(X1, X2, active(X3)) -> U51(X1, X2, X3)
   U52(mark(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, mark(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, mark(X3)) -> U52(X1, X2, X3)
   U52(active(X1), X2, X3) -> U52(X1, X2, X3)
   U52(X1, active(X2), X3) -> U52(X1, X2, X3)
   U52(X1, X2, active(X3)) -> U52(X1, X2, X3)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   plus(mark(X1), X2) -> plus(X1, X2)
   plus(X1, mark(X2)) -> plus(X1, X2)
   plus(active(X1), X2) -> plus(X1, X2)
   plus(X1, active(X2)) -> plus(X1, X2)
   U61(mark(X)) -> U61(X)
   U61(active(X)) -> U61(X)
   U71(mark(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, mark(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, mark(X3)) -> U71(X1, X2, X3)
   U71(active(X1), X2, X3) -> U71(X1, X2, X3)
   U71(X1, active(X2), X3) -> U71(X1, X2, X3)
   U71(X1, X2, active(X3)) -> U71(X1, X2, X3)
   U72(mark(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, mark(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, mark(X3)) -> U72(X1, X2, X3)
   U72(active(X1), X2, X3) -> U72(X1, X2, X3)
   U72(X1, active(X2), X3) -> U72(X1, X2, X3)
   U72(X1, X2, active(X3)) -> U72(X1, X2, X3)
   x(mark(X1), X2) -> x(X1, X2)
   x(X1, mark(X2)) -> x(X1, X2)
   x(active(X1), X2) -> x(X1, X2)
   x(X1, active(X2)) -> x(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(107) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)
   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))

The TRS R consists of the following rules:

   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(109) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   ACTIVE(isNat(plus(V1, V2))) -> MARK(U11(isNat(V1), V2))
   ACTIVE(isNat(s(V1))) -> MARK(U21(isNat(V1)))
   ACTIVE(isNat(x(V1, V2))) -> MARK(U31(isNat(V1), V2))
The following rules are removed from R:

   isNat(active(X)) -> isNat(X)
   isNat(mark(X)) -> isNat(X)
   U31(X1, mark(X2)) -> U31(X1, X2)
   U31(mark(X1), X2) -> U31(X1, X2)
   U31(active(X1), X2) -> U31(X1, X2)
   U31(X1, active(X2)) -> U31(X1, X2)
   U21(active(X)) -> U21(X)
   U21(mark(X)) -> U21(X)
   U11(X1, mark(X2)) -> U11(X1, X2)
   U11(mark(X1), X2) -> U11(X1, X2)
   U11(active(X1), X2) -> U11(X1, X2)
   U11(X1, active(X2)) -> U11(X1, X2)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(ACTIVE(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(U11(x_1, x_2)) = x_1 + x_2
   POL(U21(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1 + x_2
   POL(active(x_1)) = 2*x_1
   POL(isNat(x_1)) = 2*x_1
   POL(mark(x_1)) = 2*x_1
   POL(plus(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(s(x_1)) = 2*x_1
   POL(x(x_1, x_2)) = 1 + 2*x_1 + 2*x_2


----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(isNat(X)) -> ACTIVE(isNat(X))
   MARK(U21(X)) -> MARK(X)
   MARK(U31(X1, X2)) -> MARK(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(111) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(U21(X)) -> MARK(X)
   MARK(U11(X1, X2)) -> MARK(X1)
   MARK(U31(X1, X2)) -> MARK(X1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(113) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(U21(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(U11(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(U31(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(114)
YES
