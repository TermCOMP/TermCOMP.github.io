YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3n0ik.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPOrderProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) PisEmptyProof [EQUIVALENT, 0 ms]
        (36) YES
    (37) QDP
        (38) UsableRulesProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QReductionProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) TransformationProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) DependencyGraphProof [EQUIVALENT, 0 ms]
        (45) QDP
        (46) TransformationProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) TransformationProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) TransformationProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) TransformationProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) DependencyGraphProof [EQUIVALENT, 0 ms]
        (55) QDP
        (56) UsableRulesProof [EQUIVALENT, 0 ms]
        (57) QDP
        (58) TransformationProof [EQUIVALENT, 0 ms]
        (59) QDP
        (60) UsableRulesProof [EQUIVALENT, 0 ms]
        (61) QDP
        (62) QReductionProof [EQUIVALENT, 0 ms]
        (63) QDP
        (64) TransformationProof [EQUIVALENT, 0 ms]
        (65) QDP
        (66) TransformationProof [EQUIVALENT, 0 ms]
        (67) QDP
        (68) TransformationProof [EQUIVALENT, 0 ms]
        (69) QDP
        (70) TransformationProof [EQUIVALENT, 0 ms]
        (71) QDP
        (72) TransformationProof [EQUIVALENT, 0 ms]
        (73) QDP
        (74) DependencyGraphProof [EQUIVALENT, 0 ms]
        (75) QDP
        (76) QDPOrderProof [EQUIVALENT, 0 ms]
        (77) QDP
        (78) DependencyGraphProof [EQUIVALENT, 0 ms]
        (79) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)
   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
   QUOT(s(x), s(y)) -> MINUS(x, y)
   LE(s(x), s(y)) -> LE(x, y)
   INC(s(x)) -> INC(x)
   LOG(x) -> LOGITER(x, 0)
   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   LOGITER(x, y) -> LE(s(0), x)
   LOGITER(x, y) -> LE(s(s(0)), x)
   LOGITER(x, y) -> QUOT(x, s(s(0)))
   LOGITER(x, y) -> INC(y)
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INC(s(x)) -> INC(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INC(s(x)) -> INC(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   QUOT(s(x), s(y)) -> QUOT(minus(x, y), s(y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
QUOT(x1, x2)  =  x1

s(x1)  =  s(x1)

minus(x1, x2)  =  x1


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   dummyConstant=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)


----------------------------------------

(34)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   log(x) -> logIter(x, 0)
   logIter(x, y) -> if(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   if(false, b, x, y) -> logZeroError
   if(true, false, x, s(y)) -> y
   if(true, true, x, y) -> logIter(x, y)

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)
   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   log(x0)
   logIter(x0, x1)
   if(false, x0, x1, x2)
   if(true, false, x0, s(x1))
   if(true, true, x0, x1)


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOGITER(x, y) -> IF(le(s(0), x), le(s(s(0)), x), quot(x, s(s(0))), inc(y)) at position [0] we obtained the following new rules [LPAR04]:

   (LOGITER(0, y1) -> IF(false, le(s(s(0)), 0), quot(0, s(s(0))), inc(y1)),LOGITER(0, y1) -> IF(false, le(s(s(0)), 0), quot(0, s(s(0))), inc(y1)))
   (LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1)),LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1)))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(0, y1) -> IF(false, le(s(s(0)), 0), quot(0, s(s(0))), inc(y1))
   LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(x1), y1) -> IF(le(0, x1), le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1)) at position [0] we obtained the following new rules [LPAR04]:

   (LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1)),LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1)))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(x1), y1) -> IF(true, le(s(s(0)), s(x1)), quot(s(x1), s(s(0))), inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), quot(s(x1), s(s(0))), inc(y1)),LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), quot(s(x1), s(s(0))), inc(y1)))


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), quot(s(x1), s(s(0))), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), quot(s(x1), s(s(0))), inc(y1)) at position [2] we obtained the following new rules [LPAR04]:

   (LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), s(quot(minus(x1, s(0)), s(s(0)))), inc(y1)),LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), s(quot(minus(x1, s(0)), s(s(0)))), inc(y1)))


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), s(quot(minus(x1, s(0)), s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOGITER(s(x1), y1) -> IF(true, le(s(0), x1), s(quot(minus(x1, s(0)), s(s(0)))), inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (LOGITER(s(0), y1) -> IF(true, false, s(quot(minus(0, s(0)), s(s(0)))), inc(y1)),LOGITER(s(0), y1) -> IF(true, false, s(quot(minus(0, s(0)), s(s(0)))), inc(y1)))
   (LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1)))


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(0), y1) -> IF(true, false, s(quot(minus(0, s(0)), s(s(0)))), inc(y1))
   LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x
   minus(s(x), s(y)) -> minus(x, y)
   le(0, y) -> true

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(56) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1))
   IF(true, true, x, y) -> LOGITER(x, y)

The TRS R consists of the following rules:

   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(58) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, le(0, x1), s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1)))


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   le(0, y) -> true
   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(60) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(62) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(64) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(s(x1), s(0)), s(s(0)))), inc(y1)) at position [2,0,0] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(x1, 0), s(s(0)))), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(x1, 0), s(s(0)))), inc(y1)))


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(x1, 0), s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(66) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(minus(x1, 0), s(s(0)))), inc(y1)) at position [2,0,0] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(x1, s(s(0)))), inc(y1)),LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(x1, s(s(0)))), inc(y1)))


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, x, y) -> LOGITER(x, y)
   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(x1, s(s(0)))), inc(y1))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(68) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule IF(true, true, x, y) -> LOGITER(x, y) we obtained the following new rules [LPAR04]:

   (IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1),IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1))


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(x1, s(s(0)))), inc(y1))
   IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1)

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(70) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule IF(true, true, s(y_0), y_1) -> LOGITER(s(y_0), y_1) we obtained the following new rules [LPAR04]:

   (IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1),IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1))


----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(x1, s(s(0)))), inc(y1))
   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(72) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule LOGITER(s(s(x1)), y1) -> IF(true, true, s(quot(x1, s(s(0)))), inc(y1)) at position [2,0] we obtained the following new rules [LPAR04]:

   (LOGITER(s(s(0)), y1) -> IF(true, true, s(0), inc(y1)),LOGITER(s(s(0)), y1) -> IF(true, true, s(0), inc(y1)))
   (LOGITER(s(s(s(x0))), y1) -> IF(true, true, s(s(quot(minus(x0, s(0)), s(s(0))))), inc(y1)),LOGITER(s(s(s(x0))), y1) -> IF(true, true, s(s(quot(minus(x0, s(0)), s(s(0))))), inc(y1)))


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)
   LOGITER(s(s(0)), y1) -> IF(true, true, s(0), inc(y1))
   LOGITER(s(s(s(x0))), y1) -> IF(true, true, s(s(quot(minus(x0, s(0)), s(s(0))))), inc(y1))

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOGITER(s(s(s(x0))), y1) -> IF(true, true, s(s(quot(minus(x0, s(0)), s(s(0))))), inc(y1))
   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(76) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   LOGITER(s(s(s(x0))), y1) -> IF(true, true, s(s(quot(minus(x0, s(0)), s(s(0))))), inc(y1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
LOGITER(x1, x2)  =  x1

s(x1)  =  s(x1)

IF(x1, x2, x3, x4)  =  x3

quot(x1, x2)  =  x1

minus(x1, x2)  =  x1

0  =  0


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   s_1=1
   0=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   minus(x, 0) -> x


----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, true, s(s(y_0)), x1) -> LOGITER(s(s(y_0)), x1)

The TRS R consists of the following rules:

   minus(s(x), s(y)) -> minus(x, y)
   quot(0, s(y)) -> 0
   quot(s(x), s(y)) -> s(quot(minus(x, y), s(y)))
   inc(s(x)) -> s(inc(x))
   inc(0) -> s(0)
   minus(x, 0) -> x

The set Q consists of the following terms:

   minus(x0, 0)
   minus(s(x0), s(x1))
   quot(0, s(x0))
   quot(s(x0), s(x1))
   inc(s(x0))
   inc(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(79)
TRUE
