YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FHlYn.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPOrderProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) MRRProof [EQUIVALENT, 5 ms]
        (36) QDP
        (37) MRRProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) PisEmptyProof [EQUIVALENT, 0 ms]
        (40) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(active(c)) -> TOP(mark(c))
   TOP(mark(x)) -> TOP(check(x))
   TOP(mark(x)) -> CHECK(x)
   CHECK(f(x)) -> F(check(x))
   CHECK(f(x)) -> CHECK(x)
   CHECK(x) -> START(match(f(X), x))
   CHECK(x) -> MATCH(f(X), x)
   CHECK(x) -> F(X)
   MATCH(f(x), f(y)) -> F(match(x, y))
   MATCH(f(x), f(y)) -> MATCH(x, y)
   MATCH(X, x) -> PROPER(x)
   PROPER(f(x)) -> F(proper(x))
   PROPER(f(x)) -> PROPER(x)
   F(ok(x)) -> F(x)
   F(found(x)) -> F(x)
   TOP(found(x)) -> TOP(active(x))
   TOP(found(x)) -> ACTIVE(x)
   ACTIVE(f(x)) -> F(active(x))
   ACTIVE(f(x)) -> ACTIVE(x)
   F(mark(x)) -> F(x)

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 10 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(found(x)) -> F(x)
   F(ok(x)) -> F(x)
   F(mark(x)) -> F(x)

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(found(x)) -> F(x)
   F(ok(x)) -> F(x)
   F(mark(x)) -> F(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(found(x)) -> F(x)
The graph contains the following edges 1 > 1


*F(ok(x)) -> F(x)
The graph contains the following edges 1 > 1


*F(mark(x)) -> F(x)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(f(x)) -> ACTIVE(x)

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(f(x)) -> ACTIVE(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVE(f(x)) -> ACTIVE(x)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROPER(f(x)) -> PROPER(x)

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROPER(f(x)) -> PROPER(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PROPER(f(x)) -> PROPER(x)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MATCH(f(x), f(y)) -> MATCH(x, y)

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MATCH(f(x), f(y)) -> MATCH(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MATCH(f(x), f(y)) -> MATCH(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(f(x)) -> CHECK(x)

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(f(x)) -> CHECK(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CHECK(f(x)) -> CHECK(x)
The graph contains the following edges 1 > 1


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(mark(x)) -> TOP(check(x))
   TOP(found(x)) -> TOP(active(x))
   TOP(active(c)) -> TOP(mark(c))

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   top(active(c)) -> top(mark(c))
   top(mark(x)) -> top(check(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))
   f(ok(x)) -> ok(f(x))
   start(ok(x)) -> found(x)
   f(found(x)) -> found(f(x))
   top(found(x)) -> top(active(x))
   active(f(x)) -> f(active(x))
   f(mark(x)) -> mark(f(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(mark(x)) -> TOP(check(x))
   TOP(found(x)) -> TOP(active(x))
   TOP(active(c)) -> TOP(mark(c))

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   active(f(x)) -> f(active(x))
   f(ok(x)) -> ok(f(x))
   f(found(x)) -> found(f(x))
   f(mark(x)) -> mark(f(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   start(ok(x)) -> found(x)
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   TOP(active(c)) -> TOP(mark(c))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( TOP_1(x_1) ) = 2x_1
POL( check_1(x_1) ) = 0
POL( f_1(x_1) ) = max{0, -2}
POL( start_1(x_1) ) = x_1
POL( match_2(x_1, x_2) ) = max{0, -2}
POL( X ) = 0
POL( active_1(x_1) ) = x_1
POL( mark_1(x_1) ) = max{0, -2}
POL( ok_1(x_1) ) = x_1
POL( found_1(x_1) ) = x_1
POL( proper_1(x_1) ) = 0
POL( c ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   active(f(x)) -> mark(x)
   active(f(x)) -> f(active(x))
   f(ok(x)) -> ok(f(x))
   f(found(x)) -> found(f(x))
   f(mark(x)) -> mark(f(x))
   match(f(x), f(y)) -> f(match(x, y))
   start(ok(x)) -> found(x)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(mark(x)) -> TOP(check(x))
   TOP(found(x)) -> TOP(active(x))

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   active(f(x)) -> f(active(x))
   f(ok(x)) -> ok(f(x))
   f(found(x)) -> found(f(x))
   f(mark(x)) -> mark(f(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   start(ok(x)) -> found(x)
   match(X, x) -> proper(x)
   proper(c) -> ok(c)
   proper(f(x)) -> f(proper(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   proper(c) -> ok(c)

Used ordering: Polynomial interpretation [POLO]:

   POL(TOP(x_1)) = 2*x_1
   POL(X) = 0
   POL(active(x_1)) = x_1
   POL(c) = 2
   POL(check(x_1)) = 2*x_1
   POL(f(x_1)) = 2*x_1
   POL(found(x_1)) = x_1
   POL(mark(x_1)) = 2*x_1
   POL(match(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(ok(x_1)) = x_1
   POL(proper(x_1)) = 2*x_1
   POL(start(x_1)) = x_1


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(mark(x)) -> TOP(check(x))
   TOP(found(x)) -> TOP(active(x))

The TRS R consists of the following rules:

   active(f(x)) -> mark(x)
   active(f(x)) -> f(active(x))
   f(ok(x)) -> ok(f(x))
   f(found(x)) -> found(f(x))
   f(mark(x)) -> mark(f(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   match(f(x), f(y)) -> f(match(x, y))
   start(ok(x)) -> found(x)
   match(X, x) -> proper(x)
   proper(f(x)) -> f(proper(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   TOP(mark(x)) -> TOP(check(x))
   TOP(found(x)) -> TOP(active(x))

Strictly oriented rules of the TRS R:

   active(f(x)) -> mark(x)
   f(ok(x)) -> ok(f(x))
   f(found(x)) -> found(f(x))
   f(mark(x)) -> mark(f(x))
   match(f(x), f(y)) -> f(match(x, y))
   proper(f(x)) -> f(proper(x))

Used ordering: Polynomial interpretation [POLO]:

   POL(TOP(x_1)) = x_1
   POL(X) = 0
   POL(active(x_1)) = 1 + 2*x_1
   POL(check(x_1)) = 1 + 2*x_1
   POL(f(x_1)) = 1 + 2*x_1
   POL(found(x_1)) = 2 + 2*x_1
   POL(mark(x_1)) = 2 + 2*x_1
   POL(match(x_1, x_2)) = x_1 + 2*x_2
   POL(ok(x_1)) = 2 + 2*x_1
   POL(proper(x_1)) = 2*x_1
   POL(start(x_1)) = x_1


----------------------------------------

(38)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   active(f(x)) -> f(active(x))
   check(f(x)) -> f(check(x))
   check(x) -> start(match(f(X), x))
   start(ok(x)) -> found(x)
   match(X, x) -> proper(x)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(40)
YES
