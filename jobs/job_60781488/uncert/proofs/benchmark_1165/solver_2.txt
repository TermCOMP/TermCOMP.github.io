NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/juuM3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) MNOCProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) TransformationProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) TransformationProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) NonTerminationLoopProof [COMPLETE, 0 ms]
        (29) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   fact(X) -> if(zero(X), n__s(0), n__prod(X, fact(p(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   prod(0, X) -> 0
   prod(s(X), Y) -> add(Y, prod(X, Y))
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   zero(0) -> true
   zero(s(X)) -> false
   p(s(X)) -> X
   s(X) -> n__s(X)
   prod(X1, X2) -> n__prod(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__prod(X1, X2)) -> prod(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(X) -> IF(zero(X), n__s(0), n__prod(X, fact(p(X))))
   FACT(X) -> ZERO(X)
   FACT(X) -> FACT(p(X))
   FACT(X) -> P(X)
   ADD(s(X), Y) -> S(add(X, Y))
   ADD(s(X), Y) -> ADD(X, Y)
   PROD(s(X), Y) -> ADD(Y, prod(X, Y))
   PROD(s(X), Y) -> PROD(X, Y)
   IF(true, X, Y) -> ACTIVATE(X)
   IF(false, X, Y) -> ACTIVATE(Y)
   ACTIVATE(n__s(X)) -> S(X)
   ACTIVATE(n__prod(X1, X2)) -> PROD(X1, X2)

The TRS R consists of the following rules:

   fact(X) -> if(zero(X), n__s(0), n__prod(X, fact(p(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   prod(0, X) -> 0
   prod(s(X), Y) -> add(Y, prod(X, Y))
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   zero(0) -> true
   zero(s(X)) -> false
   p(s(X)) -> X
   s(X) -> n__s(X)
   prod(X1, X2) -> n__prod(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__prod(X1, X2)) -> prod(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

The TRS R consists of the following rules:

   fact(X) -> if(zero(X), n__s(0), n__prod(X, fact(p(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   prod(0, X) -> 0
   prod(s(X), Y) -> add(Y, prod(X, Y))
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   zero(0) -> true
   zero(s(X)) -> false
   p(s(X)) -> X
   s(X) -> n__s(X)
   prod(X1, X2) -> n__prod(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__prod(X1, X2)) -> prod(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(X), Y) -> ADD(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(s(X), Y) -> ADD(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(s(X), Y) -> PROD(X, Y)

The TRS R consists of the following rules:

   fact(X) -> if(zero(X), n__s(0), n__prod(X, fact(p(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   prod(0, X) -> 0
   prod(s(X), Y) -> add(Y, prod(X, Y))
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   zero(0) -> true
   zero(s(X)) -> false
   p(s(X)) -> X
   s(X) -> n__s(X)
   prod(X1, X2) -> n__prod(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__prod(X1, X2)) -> prod(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PROD(s(X), Y) -> PROD(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PROD(s(X), Y) -> PROD(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(X) -> FACT(p(X))

The TRS R consists of the following rules:

   fact(X) -> if(zero(X), n__s(0), n__prod(X, fact(p(X))))
   add(0, X) -> X
   add(s(X), Y) -> s(add(X, Y))
   prod(0, X) -> 0
   prod(s(X), Y) -> add(Y, prod(X, Y))
   if(true, X, Y) -> activate(X)
   if(false, X, Y) -> activate(Y)
   zero(0) -> true
   zero(s(X)) -> false
   p(s(X)) -> X
   s(X) -> n__s(X)
   prod(X1, X2) -> n__prod(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(n__prod(X1, X2)) -> prod(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(X) -> FACT(p(X))

The TRS R consists of the following rules:

   p(s(X)) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(X) -> FACT(p(X))

The TRS R consists of the following rules:

   p(s(X)) -> X

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   p(s(X)) -> X
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(FACT(x_1)) = x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = x_1


----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(X) -> FACT(p(X))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FACT(X) -> FACT(p(X)) we obtained the following new rules [LPAR04]:

   (FACT(p(z0)) -> FACT(p(p(z0))),FACT(p(z0)) -> FACT(p(p(z0))))


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(p(z0)) -> FACT(p(p(z0)))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule FACT(p(z0)) -> FACT(p(p(z0))) we obtained the following new rules [LPAR04]:

   (FACT(p(p(z0))) -> FACT(p(p(p(z0)))),FACT(p(p(z0))) -> FACT(p(p(p(z0)))))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(p(p(z0))) -> FACT(p(p(p(z0))))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as they contain symbols which do neither occur in P nor in R.[THIEMANN].

   p(s(x0))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACT(p(p(z0))) -> FACT(p(p(p(z0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FACT(p(p(z0))) evaluates to  t =FACT(p(p(p(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / p(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FACT(p(p(z0))) to FACT(p(p(p(z0)))).




----------------------------------------

(29)
NO
