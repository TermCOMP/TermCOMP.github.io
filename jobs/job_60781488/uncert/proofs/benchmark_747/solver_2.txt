YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lP1u3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 29 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) QTRSRRRProof [EQUIVALENT, 0 ms]
(10) QTRS
(11) RisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(rev(x)) -> x
   rev(++(x, y)) -> ++(rev(y), rev(x))
   ++(nil, y) -> y
   ++(x, nil) -> x
   ++(.(x, y), z) -> .(x, ++(y, z))
   ++(x, ++(y, z)) -> ++(++(x, y), z)
   make(x) -> .(x, nil)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(++(x_1, x_2)) = x_1 + x_2
   POL(.(x_1, x_2)) = x_1 + x_2
   POL(make(x_1)) = 2 + x_1
   POL(nil) = 0
   POL(rev(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   make(x) -> .(x, nil)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(nil) -> nil
   rev(rev(x)) -> x
   rev(++(x, y)) -> ++(rev(y), rev(x))
   ++(nil, y) -> y
   ++(x, nil) -> x
   ++(.(x, y), z) -> .(x, ++(y, z))
   ++(x, ++(y, z)) -> ++(++(x, y), z)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(++(x_1, x_2)) = x_1 + x_2
   POL(.(x_1, x_2)) = 2*x_1 + x_2
   POL(nil) = 2
   POL(rev(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   rev(nil) -> nil
   ++(nil, y) -> y
   ++(x, nil) -> x




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(rev(x)) -> x
   rev(++(x, y)) -> ++(rev(y), rev(x))
   ++(.(x, y), z) -> .(x, ++(y, z))
   ++(x, ++(y, z)) -> ++(++(x, y), z)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(++(x_1, x_2)) = 1 + x_1 + x_2
   POL(.(x_1, x_2)) = 2*x_1 + x_2
   POL(rev(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   rev(++(x, y)) -> ++(rev(y), rev(x))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(rev(x)) -> x
   ++(.(x, y), z) -> .(x, ++(y, z))
   ++(x, ++(y, z)) -> ++(++(x, y), z)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(++(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(.(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(rev(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   ++(x, ++(y, z)) -> ++(++(x, y), z)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rev(rev(x)) -> x
   ++(.(x, y), z) -> .(x, ++(y, z))

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Knuth-Bendix order [KBO] with precedence:++_2 > ._2 > rev_1

and weight map:

   rev_1=1
   ._2=0
   ++_2=0

The variable weight is 1With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   rev(rev(x)) -> x
   ++(.(x, y), z) -> .(x, ++(y, z))




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(11) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(12)
YES
