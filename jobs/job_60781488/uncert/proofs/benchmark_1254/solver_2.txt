YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/z3v0i.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [EQUIVALENT, 0 ms]
(2) CSR
(3) CSDependencyPairsProof [EQUIVALENT, 13 ms]
(4) QCSDP
(5) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QCSDP
        (8) QCSDPReductionPairProof [EQUIVALENT, 31 ms]
        (9) QCSDP
        (10) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (11) AND
            (12) QCSDP
                (13) QCSDPReductionPairProof [EQUIVALENT, 82 ms]
                (14) QCSDP
                (15) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
                (16) TRUE
            (17) QCSDP
                (18) QCSDPReductionPairProof [EQUIVALENT, 131 ms]
                (19) QCSDP
                (20) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
                (21) TRUE
    (22) QCSDP
        (23) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (24) QCSDP
        (25) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (26) TRUE
    (27) QCSDP
        (28) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (29) QCSDP
        (30) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (31) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNat(V1), V2))
   active(U12(tt, V2)) -> mark(U13(isNat(V2)))
   active(U13(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNat(V1)))
   active(U22(tt)) -> mark(tt)
   active(U31(tt, V1, V2)) -> mark(U32(isNat(V1), V2))
   active(U32(tt, V2)) -> mark(U33(isNat(V2)))
   active(U33(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(plus(x(N, M), N))
   active(and(tt, X)) -> mark(X)
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(and(isNatKind(V1), isNatKind(V2)), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNat(x(V1, V2))) -> mark(U31(and(isNatKind(V1), isNatKind(V2)), V1, V2))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(and(isNatKind(V1), isNatKind(V2)))
   active(isNatKind(s(V1))) -> mark(isNatKind(V1))
   active(isNatKind(x(V1, V2))) -> mark(and(isNatKind(V1), isNatKind(V2)))
   active(plus(N, 0)) -> mark(U41(and(isNat(N), isNatKind(N)), N))
   active(plus(N, s(M))) -> mark(U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N))
   active(x(N, 0)) -> mark(U61(and(isNat(N), isNatKind(N))))
   active(x(N, s(M))) -> mark(U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N))
   active(U11(X1, X2, X3)) -> U11(active(X1), X2, X3)
   active(U12(X1, X2)) -> U12(active(X1), X2)
   active(U13(X)) -> U13(active(X))
   active(U21(X1, X2)) -> U21(active(X1), X2)
   active(U22(X)) -> U22(active(X))
   active(U31(X1, X2, X3)) -> U31(active(X1), X2, X3)
   active(U32(X1, X2)) -> U32(active(X1), X2)
   active(U33(X)) -> U33(active(X))
   active(U41(X1, X2)) -> U41(active(X1), X2)
   active(U51(X1, X2, X3)) -> U51(active(X1), X2, X3)
   active(s(X)) -> s(active(X))
   active(plus(X1, X2)) -> plus(active(X1), X2)
   active(plus(X1, X2)) -> plus(X1, active(X2))
   active(U61(X)) -> U61(active(X))
   active(U71(X1, X2, X3)) -> U71(active(X1), X2, X3)
   active(x(X1, X2)) -> x(active(X1), X2)
   active(x(X1, X2)) -> x(X1, active(X2))
   active(and(X1, X2)) -> and(active(X1), X2)
   U11(mark(X1), X2, X3) -> mark(U11(X1, X2, X3))
   U12(mark(X1), X2) -> mark(U12(X1, X2))
   U13(mark(X)) -> mark(U13(X))
   U21(mark(X1), X2) -> mark(U21(X1, X2))
   U22(mark(X)) -> mark(U22(X))
   U31(mark(X1), X2, X3) -> mark(U31(X1, X2, X3))
   U32(mark(X1), X2) -> mark(U32(X1, X2))
   U33(mark(X)) -> mark(U33(X))
   U41(mark(X1), X2) -> mark(U41(X1, X2))
   U51(mark(X1), X2, X3) -> mark(U51(X1, X2, X3))
   s(mark(X)) -> mark(s(X))
   plus(mark(X1), X2) -> mark(plus(X1, X2))
   plus(X1, mark(X2)) -> mark(plus(X1, X2))
   U61(mark(X)) -> mark(U61(X))
   U71(mark(X1), X2, X3) -> mark(U71(X1, X2, X3))
   x(mark(X1), X2) -> mark(x(X1, X2))
   x(X1, mark(X2)) -> mark(x(X1, X2))
   and(mark(X1), X2) -> mark(and(X1, X2))
   proper(U11(X1, X2, X3)) -> U11(proper(X1), proper(X2), proper(X3))
   proper(tt) -> ok(tt)
   proper(U12(X1, X2)) -> U12(proper(X1), proper(X2))
   proper(isNat(X)) -> isNat(proper(X))
   proper(U13(X)) -> U13(proper(X))
   proper(U21(X1, X2)) -> U21(proper(X1), proper(X2))
   proper(U22(X)) -> U22(proper(X))
   proper(U31(X1, X2, X3)) -> U31(proper(X1), proper(X2), proper(X3))
   proper(U32(X1, X2)) -> U32(proper(X1), proper(X2))
   proper(U33(X)) -> U33(proper(X))
   proper(U41(X1, X2)) -> U41(proper(X1), proper(X2))
   proper(U51(X1, X2, X3)) -> U51(proper(X1), proper(X2), proper(X3))
   proper(s(X)) -> s(proper(X))
   proper(plus(X1, X2)) -> plus(proper(X1), proper(X2))
   proper(U61(X)) -> U61(proper(X))
   proper(0) -> ok(0)
   proper(U71(X1, X2, X3)) -> U71(proper(X1), proper(X2), proper(X3))
   proper(x(X1, X2)) -> x(proper(X1), proper(X2))
   proper(and(X1, X2)) -> and(proper(X1), proper(X2))
   proper(isNatKind(X)) -> isNatKind(proper(X))
   U11(ok(X1), ok(X2), ok(X3)) -> ok(U11(X1, X2, X3))
   U12(ok(X1), ok(X2)) -> ok(U12(X1, X2))
   isNat(ok(X)) -> ok(isNat(X))
   U13(ok(X)) -> ok(U13(X))
   U21(ok(X1), ok(X2)) -> ok(U21(X1, X2))
   U22(ok(X)) -> ok(U22(X))
   U31(ok(X1), ok(X2), ok(X3)) -> ok(U31(X1, X2, X3))
   U32(ok(X1), ok(X2)) -> ok(U32(X1, X2))
   U33(ok(X)) -> ok(U33(X))
   U41(ok(X1), ok(X2)) -> ok(U41(X1, X2))
   U51(ok(X1), ok(X2), ok(X3)) -> ok(U51(X1, X2, X3))
   s(ok(X)) -> ok(s(X))
   plus(ok(X1), ok(X2)) -> ok(plus(X1, X2))
   U61(ok(X)) -> ok(U61(X))
   U71(ok(X1), ok(X2), ok(X3)) -> ok(U71(X1, X2, X3))
   x(ok(X1), ok(X2)) -> ok(x(X1, X2))
   and(ok(X1), ok(X2)) -> ok(and(X1, X2))
   isNatKind(ok(X)) -> ok(isNatKind(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.

----------------------------------------

(1) QTRSToCSRProof (EQUIVALENT)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(U11(tt, V1, V2)) -> mark(U12(isNat(V1), V2))
   active(U12(tt, V2)) -> mark(U13(isNat(V2)))
   active(U13(tt)) -> mark(tt)
   active(U21(tt, V1)) -> mark(U22(isNat(V1)))
   active(U22(tt)) -> mark(tt)
   active(U31(tt, V1, V2)) -> mark(U32(isNat(V1), V2))
   active(U32(tt, V2)) -> mark(U33(isNat(V2)))
   active(U33(tt)) -> mark(tt)
   active(U41(tt, N)) -> mark(N)
   active(U51(tt, M, N)) -> mark(s(plus(N, M)))
   active(U61(tt)) -> mark(0)
   active(U71(tt, M, N)) -> mark(plus(x(N, M), N))
   active(and(tt, X)) -> mark(X)
   active(isNat(0)) -> mark(tt)
   active(isNat(plus(V1, V2))) -> mark(U11(and(isNatKind(V1), isNatKind(V2)), V1, V2))
   active(isNat(s(V1))) -> mark(U21(isNatKind(V1), V1))
   active(isNat(x(V1, V2))) -> mark(U31(and(isNatKind(V1), isNatKind(V2)), V1, V2))
   active(isNatKind(0)) -> mark(tt)
   active(isNatKind(plus(V1, V2))) -> mark(and(isNatKind(V1), isNatKind(V2)))
   active(isNatKind(s(V1))) -> mark(isNatKind(V1))
   active(isNatKind(x(V1, V2))) -> mark(and(isNatKind(V1), isNatKind(V2)))
   active(plus(N, 0)) -> mark(U41(and(isNat(N), isNatKind(N)), N))
   active(plus(N, s(M))) -> mark(U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N))
   active(x(N, 0)) -> mark(U61(and(isNat(N), isNatKind(N))))
   active(x(N, s(M))) -> mark(U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N))
   active(U11(X1, X2, X3)) -> U11(active(X1), X2, X3)
   active(U12(X1, X2)) -> U12(active(X1), X2)
   active(U13(X)) -> U13(active(X))
   active(U21(X1, X2)) -> U21(active(X1), X2)
   active(U22(X)) -> U22(active(X))
   active(U31(X1, X2, X3)) -> U31(active(X1), X2, X3)
   active(U32(X1, X2)) -> U32(active(X1), X2)
   active(U33(X)) -> U33(active(X))
   active(U41(X1, X2)) -> U41(active(X1), X2)
   active(U51(X1, X2, X3)) -> U51(active(X1), X2, X3)
   active(s(X)) -> s(active(X))
   active(plus(X1, X2)) -> plus(active(X1), X2)
   active(plus(X1, X2)) -> plus(X1, active(X2))
   active(U61(X)) -> U61(active(X))
   active(U71(X1, X2, X3)) -> U71(active(X1), X2, X3)
   active(x(X1, X2)) -> x(active(X1), X2)
   active(x(X1, X2)) -> x(X1, active(X2))
   active(and(X1, X2)) -> and(active(X1), X2)
   U11(mark(X1), X2, X3) -> mark(U11(X1, X2, X3))
   U12(mark(X1), X2) -> mark(U12(X1, X2))
   U13(mark(X)) -> mark(U13(X))
   U21(mark(X1), X2) -> mark(U21(X1, X2))
   U22(mark(X)) -> mark(U22(X))
   U31(mark(X1), X2, X3) -> mark(U31(X1, X2, X3))
   U32(mark(X1), X2) -> mark(U32(X1, X2))
   U33(mark(X)) -> mark(U33(X))
   U41(mark(X1), X2) -> mark(U41(X1, X2))
   U51(mark(X1), X2, X3) -> mark(U51(X1, X2, X3))
   s(mark(X)) -> mark(s(X))
   plus(mark(X1), X2) -> mark(plus(X1, X2))
   plus(X1, mark(X2)) -> mark(plus(X1, X2))
   U61(mark(X)) -> mark(U61(X))
   U71(mark(X1), X2, X3) -> mark(U71(X1, X2, X3))
   x(mark(X1), X2) -> mark(x(X1, X2))
   x(X1, mark(X2)) -> mark(x(X1, X2))
   and(mark(X1), X2) -> mark(and(X1, X2))
   proper(U11(X1, X2, X3)) -> U11(proper(X1), proper(X2), proper(X3))
   proper(tt) -> ok(tt)
   proper(U12(X1, X2)) -> U12(proper(X1), proper(X2))
   proper(isNat(X)) -> isNat(proper(X))
   proper(U13(X)) -> U13(proper(X))
   proper(U21(X1, X2)) -> U21(proper(X1), proper(X2))
   proper(U22(X)) -> U22(proper(X))
   proper(U31(X1, X2, X3)) -> U31(proper(X1), proper(X2), proper(X3))
   proper(U32(X1, X2)) -> U32(proper(X1), proper(X2))
   proper(U33(X)) -> U33(proper(X))
   proper(U41(X1, X2)) -> U41(proper(X1), proper(X2))
   proper(U51(X1, X2, X3)) -> U51(proper(X1), proper(X2), proper(X3))
   proper(s(X)) -> s(proper(X))
   proper(plus(X1, X2)) -> plus(proper(X1), proper(X2))
   proper(U61(X)) -> U61(proper(X))
   proper(0) -> ok(0)
   proper(U71(X1, X2, X3)) -> U71(proper(X1), proper(X2), proper(X3))
   proper(x(X1, X2)) -> x(proper(X1), proper(X2))
   proper(and(X1, X2)) -> and(proper(X1), proper(X2))
   proper(isNatKind(X)) -> isNatKind(proper(X))
   U11(ok(X1), ok(X2), ok(X3)) -> ok(U11(X1, X2, X3))
   U12(ok(X1), ok(X2)) -> ok(U12(X1, X2))
   isNat(ok(X)) -> ok(isNat(X))
   U13(ok(X)) -> ok(U13(X))
   U21(ok(X1), ok(X2)) -> ok(U21(X1, X2))
   U22(ok(X)) -> ok(U22(X))
   U31(ok(X1), ok(X2), ok(X3)) -> ok(U31(X1, X2, X3))
   U32(ok(X1), ok(X2)) -> ok(U32(X1, X2))
   U33(ok(X)) -> ok(U33(X))
   U41(ok(X1), ok(X2)) -> ok(U41(X1, X2))
   U51(ok(X1), ok(X2), ok(X3)) -> ok(U51(X1, X2, X3))
   s(ok(X)) -> ok(s(X))
   plus(ok(X1), ok(X2)) -> ok(plus(X1, X2))
   U61(ok(X)) -> ok(U61(X))
   U71(ok(X1), ok(X2), ok(X3)) -> ok(U71(X1, X2, X3))
   x(ok(X1), ok(X2)) -> ok(x(X1, X2))
   and(ok(X1), ok(X2)) -> ok(and(X1, X2))
   isNatKind(ok(X)) -> ok(isNatKind(X))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.
Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

U11: {1}
tt: empty set
U12: {1}
isNat: empty set
U13: {1}
U21: {1}
U22: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U51: {1}
s: {1}
plus: {1, 2}
U61: {1}
0: empty set
U71: {1}
x: {1, 2}
and: {1}
isNatKind: empty set
The QTRS contained all rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is complete (and sound).
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

The replacement map contains the following entries:

U11: {1}
tt: empty set
U12: {1}
isNat: empty set
U13: {1}
U21: {1}
U22: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U51: {1}
s: {1}
plus: {1, 2}
U61: {1}
0: empty set
U71: {1}
x: {1, 2}
and: {1}
isNatKind: empty set

----------------------------------------

(3) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(4)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2, U13'_1, U22'_1, U33'_1, PLUS_2, X_2, U61'_1} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U12'_2, U11'_3, U21'_2, U32'_2, U31'_3, U51'_3, U71'_3, AND_2, U41'_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, ISNAT_1, ISNATKIND_1, U_1} are not replacing on any position.

The ordinary context-sensitive dependency pairs DP_o are:
   U11'(tt, V1, V2) -> U12'(isNat(V1), V2)
   U11'(tt, V1, V2) -> ISNAT(V1)
   U12'(tt, V2) -> U13'(isNat(V2))
   U12'(tt, V2) -> ISNAT(V2)
   U21'(tt, V1) -> U22'(isNat(V1))
   U21'(tt, V1) -> ISNAT(V1)
   U31'(tt, V1, V2) -> U32'(isNat(V1), V2)
   U31'(tt, V1, V2) -> ISNAT(V1)
   U32'(tt, V2) -> U33'(isNat(V2))
   U32'(tt, V2) -> ISNAT(V2)
   U51'(tt, M, N) -> PLUS(N, M)
   U71'(tt, M, N) -> PLUS(x(N, M), N)
   U71'(tt, M, N) -> X(N, M)
   ISNAT(plus(V1, V2)) -> U11'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   ISNAT(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNAT(plus(V1, V2)) -> ISNATKIND(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   ISNAT(s(V1)) -> ISNATKIND(V1)
   ISNAT(x(V1, V2)) -> U31'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   ISNAT(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNAT(x(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(plus(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATKIND(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(x(V1, V2)) -> ISNATKIND(V1)
   PLUS(N, 0) -> U41'(and(isNat(N), isNatKind(N)), N)
   PLUS(N, 0) -> AND(isNat(N), isNatKind(N))
   PLUS(N, 0) -> ISNAT(N)
   PLUS(N, s(M)) -> U51'(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   PLUS(N, s(M)) -> AND(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N)))
   PLUS(N, s(M)) -> AND(isNat(M), isNatKind(M))
   PLUS(N, s(M)) -> ISNAT(M)
   X(N, 0) -> U61'(and(isNat(N), isNatKind(N)))
   X(N, 0) -> AND(isNat(N), isNatKind(N))
   X(N, 0) -> ISNAT(N)
   X(N, s(M)) -> U71'(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   X(N, s(M)) -> AND(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N)))
   X(N, s(M)) -> AND(isNat(M), isNatKind(M))
   X(N, s(M)) -> ISNAT(M)

The collapsing dependency pairs are DP_c:
   U41'(tt, N) -> N
   U51'(tt, M, N) -> N
   U51'(tt, M, N) -> M
   U71'(tt, M, N) -> N
   U71'(tt, M, N) -> M
   AND(tt, X) -> X


The hidden terms of R are:

   isNatKind(x0)
   and(isNat(x0), isNatKind(x0))
   isNat(x0)

Every hiding context is built from:
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@35de9baa

Hence, the new unhiding pairs DP_u are :
   U41'(tt, N) -> U(N)
   U51'(tt, M, N) -> U(N)
   U51'(tt, M, N) -> U(M)
   U71'(tt, M, N) -> U(N)
   U71'(tt, M, N) -> U(M)
   AND(tt, X) -> U(X)
   U(and(x_0, x_1)) -> U(x_0)
   U(isNatKind(x0)) -> ISNATKIND(x0)
   U(and(isNat(x0), isNatKind(x0))) -> AND(isNat(x0), isNatKind(x0))
   U(isNat(x0)) -> ISNAT(x0)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(5) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 3 SCCs with 21 less nodes.

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U12'_2, U11'_3, AND_2, U21'_2, U31'_3, U32'_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, ISNAT_1, U_1, ISNATKIND_1} are not replacing on any position.

The TRS P consists of the following rules:

   U12'(tt, V2) -> ISNAT(V2)
   ISNAT(plus(V1, V2)) -> U11'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11'(tt, V1, V2) -> U12'(isNat(V1), V2)
   U11'(tt, V1, V2) -> ISNAT(V1)
   ISNAT(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   AND(tt, X) -> U(X)
   U(and(x_0, x_1)) -> U(x_0)
   U(isNatKind(x0)) -> ISNATKIND(x0)
   ISNATKIND(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(plus(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATKIND(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(x(V1, V2)) -> ISNATKIND(V1)
   U(and(isNat(x0), isNatKind(x0))) -> AND(isNat(x0), isNatKind(x0))
   U(isNat(x0)) -> ISNAT(x0)
   ISNAT(plus(V1, V2)) -> ISNATKIND(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   U21'(tt, V1) -> ISNAT(V1)
   ISNAT(s(V1)) -> ISNATKIND(V1)
   ISNAT(x(V1, V2)) -> U31'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U31'(tt, V1, V2) -> U32'(isNat(V1), V2)
   U32'(tt, V2) -> ISNAT(V2)
   ISNAT(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNAT(x(V1, V2)) -> ISNATKIND(V1)
   U31'(tt, V1, V2) -> ISNAT(V1)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(8) QCSDPReductionPairProof (EQUIVALENT)
Using the order

Polynomial interpretation with max and min functions [POLO,MAXPOLO]:

   POL(0) = 0
   POL(AND(x_1, x_2)) = x_2
   POL(ISNAT(x_1)) = 0
   POL(ISNATKIND(x_1)) = 0
   POL(U(x_1)) = x_1
   POL(U11(x_1, x_2, x_3)) = 0
   POL(U11'(x_1, x_2, x_3)) = 0
   POL(U12(x_1, x_2)) = 0
   POL(U12'(x_1, x_2)) = 0
   POL(U13(x_1)) = 0
   POL(U21(x_1, x_2)) = 1 + x_1
   POL(U21'(x_1, x_2)) = 0
   POL(U22(x_1)) = x_1
   POL(U31(x_1, x_2, x_3)) = 0
   POL(U31'(x_1, x_2, x_3)) = 0
   POL(U32(x_1, x_2)) = 0
   POL(U32'(x_1, x_2)) = 0
   POL(U33(x_1)) = 0
   POL(U41(x_1, x_2)) = x_2
   POL(U51(x_1, x_2, x_3)) = 0
   POL(U61(x_1)) = 0
   POL(U71(x_1, x_2, x_3)) = 0
   POL(and(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 1
   POL(isNatKind(x_1)) = 0
   POL(plus(x_1, x_2)) = x_1
   POL(s(x_1)) = 0
   POL(tt) = 0
   POL(x(x_1, x_2)) = 0


the following usable rules


   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U41(tt, N) -> N
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U51(tt, M, N) -> s(plus(N, M))


could all be oriented weakly.

Furthermore, the pairs


   U(and(isNat(x0), isNatKind(x0))) -> AND(isNat(x0), isNatKind(x0))
   U(isNat(x0)) -> ISNAT(x0)


could be oriented strictly and thus removed by the CS-Reduction Pair Processor [LPAR08,DA_EMMES].


----------------------------------------

(9)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U12'_2, U11'_3, AND_2, U21'_2, U31'_3, U32'_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, ISNAT_1, U_1, ISNATKIND_1} are not replacing on any position.

The TRS P consists of the following rules:

   U12'(tt, V2) -> ISNAT(V2)
   ISNAT(plus(V1, V2)) -> U11'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11'(tt, V1, V2) -> U12'(isNat(V1), V2)
   U11'(tt, V1, V2) -> ISNAT(V1)
   ISNAT(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   AND(tt, X) -> U(X)
   U(and(x_0, x_1)) -> U(x_0)
   U(isNatKind(x0)) -> ISNATKIND(x0)
   ISNATKIND(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(plus(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATKIND(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(x(V1, V2)) -> ISNATKIND(V1)
   ISNAT(plus(V1, V2)) -> ISNATKIND(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   U21'(tt, V1) -> ISNAT(V1)
   ISNAT(s(V1)) -> ISNATKIND(V1)
   ISNAT(x(V1, V2)) -> U31'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U31'(tt, V1, V2) -> U32'(isNat(V1), V2)
   U32'(tt, V2) -> ISNAT(V2)
   ISNAT(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNAT(x(V1, V2)) -> ISNATKIND(V1)
   U31'(tt, V1, V2) -> ISNAT(V1)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(10) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 2 SCCs with 5 less nodes.

----------------------------------------

(11)
Complex Obligation (AND)

----------------------------------------

(12)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, AND_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, U_1, ISNATKIND_1} are not replacing on any position.

The TRS P consists of the following rules:

   U(and(x_0, x_1)) -> U(x_0)
   U(isNatKind(x0)) -> ISNATKIND(x0)
   ISNATKIND(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   AND(tt, X) -> U(X)
   ISNATKIND(plus(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATKIND(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(x(V1, V2)) -> ISNATKIND(V1)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(13) QCSDPReductionPairProof (EQUIVALENT)
Using the order

U/1(YES)
and/2(YES,YES)
isNatKind/1)YES(
ISNATKIND/1(YES)
plus/2(YES,YES)
AND/2(NO,YES)
tt/0)
s/1(YES)
x/2(YES,YES)
0/0)
U41/2)NO,YES(
isNat/1)YES(
U51/3(YES,YES,YES)
U11/3(NO,NO,NO)
U21/2(NO,YES)
U31/3(NO,NO,YES)
U12/2(NO,NO)
U13/1(NO)
U22/1)YES(
U61/1(YES)
U71/3(YES,YES,YES)
U32/2)NO,YES(
U33/1)YES(

Quasi precedence:
[U_1, ISNATKIND_1, AND_1, x_2, U71_3] > [plus_2, U51_3, U11] > [and_2, tt, s_1, U21_1, U12, U13]
[U_1, ISNATKIND_1, AND_1, x_2, U71_3] > [0, U61_1] > [and_2, tt, s_1, U21_1, U12, U13]
[U_1, ISNATKIND_1, AND_1, x_2, U71_3] > U31_1


Status:
U_1: multiset status
and_2: [1,2]
ISNATKIND_1: multiset status
plus_2: [1,2]
AND_1: multiset status
tt: multiset status
s_1: [1]
x_2: [2,1]
0: multiset status
U51_3: [3,2,1]
U11: []
U21_1: [1]
U31_1: multiset status
U12: []
U13: []
U61_1: multiset status
U71_3: [2,3,1]



the following usable rules


   and(tt, X) -> X
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U41(tt, N) -> N
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U51(tt, M, N) -> s(plus(N, M))


could all be oriented weakly.

Furthermore, the pairs


   U(and(x_0, x_1)) -> U(x_0)
   ISNATKIND(plus(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(plus(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATKIND(x(V1, V2)) -> AND(isNatKind(V1), isNatKind(V2))
   ISNATKIND(x(V1, V2)) -> ISNATKIND(V1)


could be oriented strictly and thus removed by the CS-Reduction Pair Processor [LPAR08,DA_EMMES].


----------------------------------------

(14)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, AND_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, ISNATKIND_1, U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U(isNatKind(x0)) -> ISNATKIND(x0)
   AND(tt, X) -> U(X)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(15) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 2 less nodes.

----------------------------------------

(16)
TRUE

----------------------------------------

(17)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U11'_3, U12'_2, U21'_2, U31'_3, U32'_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNAT(plus(V1, V2)) -> U11'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11'(tt, V1, V2) -> U12'(isNat(V1), V2)
   U12'(tt, V2) -> ISNAT(V2)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   U21'(tt, V1) -> ISNAT(V1)
   ISNAT(x(V1, V2)) -> U31'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U31'(tt, V1, V2) -> U32'(isNat(V1), V2)
   U32'(tt, V2) -> ISNAT(V2)
   U31'(tt, V1, V2) -> ISNAT(V1)
   U11'(tt, V1, V2) -> ISNAT(V1)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(18) QCSDPReductionPairProof (EQUIVALENT)
Using the order

ISNAT/1(YES)
plus/2(YES,YES)
U11'/3(NO,YES,YES)
and/2)NO,YES(
isNatKind/1(YES)
tt/0)
U12'/2(NO,YES)
isNat/1(NO)
s/1(YES)
U21'/2(NO,YES)
x/2(YES,YES)
U31'/3(YES,YES,YES)
U32'/2(NO,YES)
0/0)
U41/2(YES,YES)
U51/3(YES,YES,YES)
U11/3(NO,NO,NO)
U21/2(NO,NO)
U31/3(NO,NO,NO)
U12/2(NO,NO)
U13/1(NO)
U61/1(NO)
U71/3(YES,YES,YES)
U22/1)YES(
U32/2(NO,NO)
U33/1(NO)

Quasi precedence:
[ISNAT_1, U11'_2, U12'_1, U21'_1, x_2, U31'_3, U32'_1, U71_3] > [plus_2, isNatKind_1, isNat, U51_3, U21] > s_1 > U41_2
[ISNAT_1, U11'_2, U12'_1, U21'_1, x_2, U31'_3, U32'_1, U71_3] > [plus_2, isNatKind_1, isNat, U51_3, U21] > U11 > U12 > U13 > [tt, 0, U61] > U41_2
[ISNAT_1, U11'_2, U12'_1, U21'_1, x_2, U31'_3, U32'_1, U71_3] > [plus_2, isNatKind_1, isNat, U51_3, U21] > U31 > U32 > U33 > [tt, 0, U61] > U41_2


Status:
ISNAT_1: multiset status
plus_2: [1,2]
U11'_2: multiset status
isNatKind_1: [1]
tt: multiset status
U12'_1: multiset status
isNat: multiset status
s_1: [1]
U21'_1: multiset status
x_2: [2,1]
U31'_3: multiset status
U32'_1: multiset status
0: multiset status
U41_2: [1,2]
U51_3: [3,2,1]
U11: multiset status
U21: multiset status
U31: []
U12: []
U13: multiset status
U61: multiset status
U71_3: [2,3,1]
U32: multiset status
U33: multiset status



the following usable rules


   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U41(tt, N) -> N
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U51(tt, M, N) -> s(plus(N, M))


could all be oriented weakly.

Furthermore, the pairs


   ISNAT(plus(V1, V2)) -> U11'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U11'(tt, V1, V2) -> U12'(isNat(V1), V2)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   ISNAT(x(V1, V2)) -> U31'(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   U31'(tt, V1, V2) -> U32'(isNat(V1), V2)
   U31'(tt, V1, V2) -> ISNAT(V1)
   U11'(tt, V1, V2) -> ISNAT(V1)


could be oriented strictly and thus removed by the CS-Reduction Pair Processor [LPAR08,DA_EMMES].


----------------------------------------

(19)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U12'_2, U21'_2, U32'_2} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   U12'(tt, V2) -> ISNAT(V2)
   U21'(tt, V1) -> ISNAT(V1)
   U32'(tt, V2) -> ISNAT(V2)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(20) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 3 less nodes.

----------------------------------------

(21)
TRUE

----------------------------------------

(22)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2, PLUS_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U51'_3} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1} are not replacing on any position.

The TRS P consists of the following rules:

   PLUS(N, s(M)) -> U51'(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   U51'(tt, M, N) -> PLUS(N, M)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(23) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   PLUS(N, s(M)) -> U51'(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
The remaining pairs can at least be oriented weakly.

   U51'(tt, M, N) -> PLUS(N, M)
Used ordering:  Combined order from the following AFS and order.
U51'(x1, x2, x3)  =  x2

PLUS(x1, x2)  =  x2


Subterm Order

----------------------------------------

(24)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2, PLUS_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U51'_3} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1} are not replacing on any position.

The TRS P consists of the following rules:

   U51'(tt, M, N) -> PLUS(N, M)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(25) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 1 less node.

----------------------------------------

(26)
TRUE

----------------------------------------

(27)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2, X_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U71'_3} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1} are not replacing on any position.

The TRS P consists of the following rules:

   U71'(tt, M, N) -> X(N, M)
   X(N, s(M)) -> U71'(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(28) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   X(N, s(M)) -> U71'(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
The remaining pairs can at least be oriented weakly.

   U71'(tt, M, N) -> X(N, M)
Used ordering:  Combined order from the following AFS and order.
X(x1, x2)  =  x2

U71'(x1, x2, x3)  =  x2


Subterm Order

----------------------------------------

(29)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U13_1, U22_1, U33_1, s_1, plus_2, U61_1, x_2, X_2} are replacing on all positions.
For all symbols f in {U11_3, U12_2, U21_2, U31_3, U32_2, U41_2, U51_3, U71_3, and_2, U71'_3} we have mu(f) = {1}.
The symbols in {isNat_1, isNatKind_1} are not replacing on any position.

The TRS P consists of the following rules:

   U71'(tt, M, N) -> X(N, M)

The TRS R consists of the following rules:

   U11(tt, V1, V2) -> U12(isNat(V1), V2)
   U12(tt, V2) -> U13(isNat(V2))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNat(V1))
   U22(tt) -> tt
   U31(tt, V1, V2) -> U32(isNat(V1), V2)
   U32(tt, V2) -> U33(isNat(V2))
   U33(tt) -> tt
   U41(tt, N) -> N
   U51(tt, M, N) -> s(plus(N, M))
   U61(tt) -> 0
   U71(tt, M, N) -> plus(x(N, M), N)
   and(tt, X) -> X
   isNat(0) -> tt
   isNat(plus(V1, V2)) -> U11(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNat(x(V1, V2)) -> U31(and(isNatKind(V1), isNatKind(V2)), V1, V2)
   isNatKind(0) -> tt
   isNatKind(plus(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   isNatKind(s(V1)) -> isNatKind(V1)
   isNatKind(x(V1, V2)) -> and(isNatKind(V1), isNatKind(V2))
   plus(N, 0) -> U41(and(isNat(N), isNatKind(N)), N)
   plus(N, s(M)) -> U51(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)
   x(N, 0) -> U61(and(isNat(N), isNatKind(N)))
   x(N, s(M)) -> U71(and(and(isNat(M), isNatKind(M)), and(isNat(N), isNatKind(N))), M, N)

Q is empty.

----------------------------------------

(30) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 1 less node.

----------------------------------------

(31)
TRUE
