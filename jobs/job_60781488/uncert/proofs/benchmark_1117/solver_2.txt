YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZEPdq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) QDPOrderProof [EQUIVALENT, 59 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   a__filter(cons(X, Y), s(N), M) -> cons(mark(X), filter(Y, N, M))
   a__sieve(cons(0, Y)) -> cons(0, sieve(Y))
   a__sieve(cons(s(N), Y)) -> cons(s(mark(N)), sieve(filter(Y, N, N)))
   a__nats(N) -> cons(mark(N), nats(s(N)))
   a__zprimes -> a__sieve(a__nats(s(s(0))))
   mark(filter(X1, X2, X3)) -> a__filter(mark(X1), mark(X2), mark(X3))
   mark(sieve(X)) -> a__sieve(mark(X))
   mark(nats(X)) -> a__nats(mark(X))
   mark(zprimes) -> a__zprimes
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__filter(X1, X2, X3) -> filter(X1, X2, X3)
   a__sieve(X) -> sieve(X)
   a__nats(X) -> nats(X)
   a__zprimes -> zprimes

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FILTER(cons(X, Y), s(N), M) -> MARK(X)
   A__SIEVE(cons(s(N), Y)) -> MARK(N)
   A__NATS(N) -> MARK(N)
   A__ZPRIMES -> A__SIEVE(a__nats(s(s(0))))
   A__ZPRIMES -> A__NATS(s(s(0)))
   MARK(filter(X1, X2, X3)) -> A__FILTER(mark(X1), mark(X2), mark(X3))
   MARK(filter(X1, X2, X3)) -> MARK(X1)
   MARK(filter(X1, X2, X3)) -> MARK(X2)
   MARK(filter(X1, X2, X3)) -> MARK(X3)
   MARK(sieve(X)) -> A__SIEVE(mark(X))
   MARK(sieve(X)) -> MARK(X)
   MARK(nats(X)) -> A__NATS(mark(X))
   MARK(nats(X)) -> MARK(X)
   MARK(zprimes) -> A__ZPRIMES
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   a__filter(cons(X, Y), s(N), M) -> cons(mark(X), filter(Y, N, M))
   a__sieve(cons(0, Y)) -> cons(0, sieve(Y))
   a__sieve(cons(s(N), Y)) -> cons(s(mark(N)), sieve(filter(Y, N, N)))
   a__nats(N) -> cons(mark(N), nats(s(N)))
   a__zprimes -> a__sieve(a__nats(s(s(0))))
   mark(filter(X1, X2, X3)) -> a__filter(mark(X1), mark(X2), mark(X3))
   mark(sieve(X)) -> a__sieve(mark(X))
   mark(nats(X)) -> a__nats(mark(X))
   mark(zprimes) -> a__zprimes
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__filter(X1, X2, X3) -> filter(X1, X2, X3)
   a__sieve(X) -> sieve(X)
   a__nats(X) -> nats(X)
   a__zprimes -> zprimes

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__FILTER(cons(X, Y), s(N), M) -> MARK(X)
   A__SIEVE(cons(s(N), Y)) -> MARK(N)
   A__ZPRIMES -> A__NATS(s(s(0)))
   MARK(filter(X1, X2, X3)) -> A__FILTER(mark(X1), mark(X2), mark(X3))
   MARK(filter(X1, X2, X3)) -> MARK(X1)
   MARK(filter(X1, X2, X3)) -> MARK(X2)
   MARK(filter(X1, X2, X3)) -> MARK(X3)
   MARK(sieve(X)) -> A__SIEVE(mark(X))
   MARK(nats(X)) -> A__NATS(mark(X))
   MARK(nats(X)) -> MARK(X)
   MARK(zprimes) -> A__ZPRIMES
   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__FILTER_3(x_1, ..., x_3) ) = 2x_1 + 2
POL( A__NATS_1(x_1) ) = 2x_1 + 1
POL( A__SIEVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( a__nats_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = x_1 + 2
POL( mark_1(x_1) ) = x_1
POL( nats_1(x_1) ) = x_1 + 2
POL( s_1(x_1) ) = 2x_1
POL( filter_3(x_1, ..., x_3) ) = x_1 + x_2 + x_3 + 1
POL( a__filter_3(x_1, ..., x_3) ) = x_1 + x_2 + x_3 + 1
POL( sieve_1(x_1) ) = x_1
POL( a__sieve_1(x_1) ) = x_1
POL( zprimes ) = 2
POL( a__zprimes ) = 2
POL( 0 ) = 0
POL( MARK_1(x_1) ) = 2x_1 + 1
POL( A__ZPRIMES ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a__nats(N) -> cons(mark(N), nats(s(N)))
   a__nats(X) -> nats(X)
   mark(filter(X1, X2, X3)) -> a__filter(mark(X1), mark(X2), mark(X3))
   mark(sieve(X)) -> a__sieve(mark(X))
   mark(nats(X)) -> a__nats(mark(X))
   mark(zprimes) -> a__zprimes
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__sieve(cons(0, Y)) -> cons(0, sieve(Y))
   a__sieve(X) -> sieve(X)
   a__filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   a__filter(X1, X2, X3) -> filter(X1, X2, X3)
   a__zprimes -> zprimes
   a__zprimes -> a__sieve(a__nats(s(s(0))))
   a__sieve(cons(s(N), Y)) -> cons(s(mark(N)), sieve(filter(Y, N, N)))
   a__filter(cons(X, Y), s(N), M) -> cons(mark(X), filter(Y, N, M))


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__NATS(N) -> MARK(N)
   A__ZPRIMES -> A__SIEVE(a__nats(s(s(0))))
   MARK(sieve(X)) -> MARK(X)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   a__filter(cons(X, Y), s(N), M) -> cons(mark(X), filter(Y, N, M))
   a__sieve(cons(0, Y)) -> cons(0, sieve(Y))
   a__sieve(cons(s(N), Y)) -> cons(s(mark(N)), sieve(filter(Y, N, N)))
   a__nats(N) -> cons(mark(N), nats(s(N)))
   a__zprimes -> a__sieve(a__nats(s(s(0))))
   mark(filter(X1, X2, X3)) -> a__filter(mark(X1), mark(X2), mark(X3))
   mark(sieve(X)) -> a__sieve(mark(X))
   mark(nats(X)) -> a__nats(mark(X))
   mark(zprimes) -> a__zprimes
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__filter(X1, X2, X3) -> filter(X1, X2, X3)
   a__sieve(X) -> sieve(X)
   a__nats(X) -> nats(X)
   a__zprimes -> zprimes

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(sieve(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__filter(cons(X, Y), 0, M) -> cons(0, filter(Y, M, M))
   a__filter(cons(X, Y), s(N), M) -> cons(mark(X), filter(Y, N, M))
   a__sieve(cons(0, Y)) -> cons(0, sieve(Y))
   a__sieve(cons(s(N), Y)) -> cons(s(mark(N)), sieve(filter(Y, N, N)))
   a__nats(N) -> cons(mark(N), nats(s(N)))
   a__zprimes -> a__sieve(a__nats(s(s(0))))
   mark(filter(X1, X2, X3)) -> a__filter(mark(X1), mark(X2), mark(X3))
   mark(sieve(X)) -> a__sieve(mark(X))
   mark(nats(X)) -> a__nats(mark(X))
   mark(zprimes) -> a__zprimes
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(0) -> 0
   mark(s(X)) -> s(mark(X))
   a__filter(X1, X2, X3) -> filter(X1, X2, X3)
   a__sieve(X) -> sieve(X)
   a__nats(X) -> nats(X)
   a__zprimes -> zprimes

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(s(X)) -> MARK(X)
   MARK(sieve(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(s(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(sieve(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
