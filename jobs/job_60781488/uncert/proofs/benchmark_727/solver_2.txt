NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/E54v2.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) TransformationProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) TransformationProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) TransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) NonTerminationLoopProof [COMPLETE, 0 ms]
        (13) NO
    (14) QDP
        (15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(*(x, y), z) -> *^1(x, *(y, z))
   *^1(*(x, y), z) -> *^1(y, z)
   *^1(+(x, y), z) -> *^1(x, z)
   *^1(+(x, y), z) -> *^1(y, z)
   *^1(x, +(y, f(z))) -> *^1(g(x, z), +(y, y))

The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(x, +(y, f(z))) -> *^1(g(x, z), +(y, y))

The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule *^1(x, +(y, f(z))) -> *^1(g(x, z), +(y, y)) we obtained the following new rules [LPAR04]:

   (*^1(g(y_0, y_1), +(y_2, f(x2))) -> *^1(g(g(y_0, y_1), x2), +(y_2, y_2)),*^1(g(y_0, y_1), +(y_2, f(x2))) -> *^1(g(g(y_0, y_1), x2), +(y_2, y_2)))


----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(g(y_0, y_1), +(y_2, f(x2))) -> *^1(g(g(y_0, y_1), x2), +(y_2, y_2))

The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule *^1(g(y_0, y_1), +(y_2, f(x2))) -> *^1(g(g(y_0, y_1), x2), +(y_2, y_2)) we obtained the following new rules [LPAR04]:

   (*^1(g(g(y_0, y_1), y_2), +(y_3, f(x3))) -> *^1(g(g(g(y_0, y_1), y_2), x3), +(y_3, y_3)),*^1(g(g(y_0, y_1), y_2), +(y_3, f(x3))) -> *^1(g(g(g(y_0, y_1), y_2), x3), +(y_3, y_3)))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(g(g(y_0, y_1), y_2), +(y_3, f(x3))) -> *^1(g(g(g(y_0, y_1), y_2), x3), +(y_3, y_3))

The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule *^1(g(g(y_0, y_1), y_2), +(y_3, f(x3))) -> *^1(g(g(g(y_0, y_1), y_2), x3), +(y_3, y_3)) we obtained the following new rules [LPAR04]:

   (*^1(g(g(x0, x1), x2), +(f(y_4), f(x4))) -> *^1(g(g(g(x0, x1), x2), x4), +(f(y_4), f(y_4))),*^1(g(g(x0, x1), x2), +(f(y_4), f(x4))) -> *^1(g(g(g(x0, x1), x2), x4), +(f(y_4), f(y_4))))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(g(g(x0, x1), x2), +(f(y_4), f(x4))) -> *^1(g(g(g(x0, x1), x2), x4), +(f(y_4), f(y_4)))

The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = *^1(g(g(x0, x1), x2), +(f(y_4), f(x4))) evaluates to  t =*^1(g(g(g(x0, x1), x2), x4), +(f(y_4), f(y_4)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [x0 / g(x0, x1), x1 / x2, x2 / x4, x4 / y_4]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from *^1(g(g(x0, x1), x2), +(f(y_4), f(x4))) to *^1(g(g(g(x0, x1), x2), x4), +(f(y_4), f(y_4))).




----------------------------------------

(13)
NO

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(*(x, y), z) -> *^1(y, z)
   *^1(*(x, y), z) -> *^1(x, *(y, z))
   *^1(+(x, y), z) -> *^1(x, z)
   *^1(+(x, y), z) -> *^1(y, z)

The TRS R consists of the following rules:

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(x, y), z) -> +(*(x, z), *(y, z))
   *(x, +(y, f(z))) -> *(g(x, z), +(y, y))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**^1(*(x, y), z) -> *^1(y, z)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(*(x, y), z) -> *^1(x, *(y, z))
The graph contains the following edges 1 > 1


**^1(+(x, y), z) -> *^1(x, z)
The graph contains the following edges 1 > 1, 2 >= 2


**^1(+(x, y), z) -> *^1(y, z)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(16)
YES
