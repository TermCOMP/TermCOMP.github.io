YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gTPmW.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) QDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) QReductionProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) TransformationProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) QDP
        (37) UsableRulesProof [EQUIVALENT, 0 ms]
        (38) QDP
        (39) QReductionProof [EQUIVALENT, 0 ms]
        (40) QDP
        (41) QDPOrderProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) DependencyGraphProof [EQUIVALENT, 0 ms]
        (44) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(cons(x, cons(y, ys))) -> LAST(cons(y, ys))
   DROPLAST(cons(x, cons(y, ys))) -> DROPLAST(cons(y, ys))
   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)
   REVERSE(xs) -> REV(xs, nil)
   REV(xs, ys) -> IF(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   REV(xs, ys) -> ISEMPTY(xs)
   REV(xs, ys) -> DROPLAST(xs)
   REV(xs, ys) -> APPEND(ys, last(xs))
   REV(xs, ys) -> LAST(xs)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

R is empty.
The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x, xs), ys) -> APPEND(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND(cons(x, xs), ys) -> APPEND(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DROPLAST(cons(x, cons(y, ys))) -> DROPLAST(cons(y, ys))

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DROPLAST(cons(x, cons(y, ys))) -> DROPLAST(cons(y, ys))

R is empty.
The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DROPLAST(cons(x, cons(y, ys))) -> DROPLAST(cons(y, ys))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DROPLAST(cons(x, cons(y, ys))) -> DROPLAST(cons(y, ys))
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(cons(x, cons(y, ys))) -> LAST(cons(y, ys))

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(cons(x, cons(y, ys))) -> LAST(cons(y, ys))

R is empty.
The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LAST(cons(x, cons(y, ys))) -> LAST(cons(y, ys))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LAST(cons(x, cons(y, ys))) -> LAST(cons(y, ys))
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(xs, ys) -> IF(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))
   reverse(xs) -> rev(xs, nil)
   rev(xs, ys) -> if(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   if(true, xs, ys, zs) -> zs
   if(false, xs, ys, zs) -> rev(xs, ys)

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(xs, ys) -> IF(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)
   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   reverse(x0)
   rev(x0, x1)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(xs, ys) -> IF(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule REV(xs, ys) -> IF(isEmpty(xs), dropLast(xs), append(ys, last(xs)), ys) at position [0] we obtained the following new rules [LPAR04]:

   (REV(nil, y1) -> IF(true, dropLast(nil), append(y1, last(nil)), y1),REV(nil, y1) -> IF(true, dropLast(nil), append(y1, last(nil)), y1))
   (REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1),REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, xs, ys, zs) -> REV(xs, ys)
   REV(nil, y1) -> IF(true, dropLast(nil), append(y1, last(nil)), y1)
   REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   isEmpty(nil) -> true
   isEmpty(cons(x, xs)) -> false
   dropLast(nil) -> nil
   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   isEmpty(nil)
   isEmpty(cons(x0, x1))
   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isEmpty(nil)
   isEmpty(cons(x0, x1))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1)
   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   REV(cons(x0, x1), y1) -> IF(false, dropLast(cons(x0, x1)), append(y1, last(cons(x0, x1))), y1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( IF_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_2 - 2}
POL( dropLast_1(x_1) ) = max{0, x_1 - 2}
POL( cons_2(x_1, x_2) ) = 2x_2 + 1
POL( nil ) = 2
POL( append_2(x_1, x_2) ) = 2
POL( last_1(x_1) ) = max{0, -2}
POL( REV_2(x_1, x_2) ) = 2x_1
POL( false ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, xs, ys, zs) -> REV(xs, ys)

The TRS R consists of the following rules:

   dropLast(cons(x, nil)) -> nil
   dropLast(cons(x, cons(y, ys))) -> cons(x, dropLast(cons(y, ys)))
   last(cons(x, nil)) -> x
   last(cons(x, cons(y, ys))) -> last(cons(y, ys))
   append(nil, ys) -> ys
   append(cons(x, xs), ys) -> cons(x, append(xs, ys))

The set Q consists of the following terms:

   last(cons(x0, nil))
   last(cons(x0, cons(x1, x2)))
   dropLast(nil)
   dropLast(cons(x0, nil))
   dropLast(cons(x0, cons(x1, x2)))
   append(nil, x0)
   append(cons(x0, x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(44)
TRUE
