YES

Problem 1: 

(VAR vu95NonEmpty N X X1 X2 XS Y YS)
(RULES
active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
active(repItems(nil)) -> mark(nil)
active(tail(cons(X,XS))) -> mark(XS)
active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
active(take(num0,XS)) -> mark(nil)
active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
active(zip(nil,XS)) -> mark(nil)
active(zip(X,nil)) -> mark(nil)
active(oddNs) -> mark(incr(pairNs))
active(pairNs) -> mark(cons(num0,incr(oddNs)))
cons(active(X1),X2) -> cons(X1,X2)
cons(mark(X1),X2) -> cons(X1,X2)
cons(X1,active(X2)) -> cons(X1,X2)
cons(X1,mark(X2)) -> cons(X1,X2)
incr(active(X)) -> incr(X)
incr(mark(X)) -> incr(X)
mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
mark(incr(X)) -> active(incr(mark(X)))
mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
mark(repItems(X)) -> active(repItems(mark(X)))
mark(s(X)) -> active(s(mark(X)))
mark(tail(X)) -> active(tail(mark(X)))
mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
mark(num0) -> active(num0)
mark(nil) -> active(nil)
mark(oddNs) -> active(oddNs)
mark(pairNs) -> active(pairNs)
pair(active(X1),X2) -> pair(X1,X2)
pair(mark(X1),X2) -> pair(X1,X2)
pair(X1,active(X2)) -> pair(X1,X2)
pair(X1,mark(X2)) -> pair(X1,X2)
repItems(active(X)) -> repItems(X)
repItems(mark(X)) -> repItems(X)
s(active(X)) -> s(X)
s(mark(X)) -> s(X)
tail(active(X)) -> tail(X)
tail(mark(X)) -> tail(X)
take(active(X1),X2) -> take(X1,X2)
take(mark(X1),X2) -> take(X1,X2)
take(X1,active(X2)) -> take(X1,X2)
take(X1,mark(X2)) -> take(X1,X2)
zip(active(X1),X2) -> zip(X1,X2)
zip(mark(X1),X2) -> zip(X1,X2)
zip(X1,active(X2)) -> zip(X1,X2)
zip(X1,mark(X2)) -> zip(X1,X2)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> CONS(s(X),incr(XS))
 ACTIVE(incr(cons(X,XS))) -> INCR(XS)
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(incr(cons(X,XS))) -> S(X)
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,cons(X,repItems(XS)))
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,repItems(XS))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(repItems(cons(X,XS))) -> REPITEMS(XS)
 ACTIVE(repItems(nil)) -> MARK(nil)
 ACTIVE(tail(cons(X,XS))) -> MARK(XS)
 ACTIVE(take(s(N),cons(X,XS))) -> CONS(X,take(N,XS))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> TAKE(N,XS)
 ACTIVE(take(num0,XS)) -> MARK(nil)
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> CONS(pair(X,Y),zip(XS,YS))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> PAIR(X,Y)
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> ZIP(XS,YS)
 ACTIVE(zip(nil,XS)) -> MARK(nil)
 ACTIVE(zip(X,nil)) -> MARK(nil)
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 INCR(active(X)) -> INCR(X)
 INCR(mark(X)) -> INCR(X)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(pair(X1,X2)) -> PAIR(mark(X1),mark(X2))
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(repItems(X)) -> REPITEMS(mark(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(tail(X)) -> TAIL(mark(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(take(X1,X2)) -> TAKE(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ZIP(mark(X1),mark(X2))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
 PAIR(active(X1),X2) -> PAIR(X1,X2)
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
 REPITEMS(active(X)) -> REPITEMS(X)
 REPITEMS(mark(X)) -> REPITEMS(X)
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
 TAIL(active(X)) -> TAIL(X)
 TAIL(mark(X)) -> TAIL(X)
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
 ZIP(active(X1),X2) -> ZIP(X1,X2)
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> CONS(s(X),incr(XS))
 ACTIVE(incr(cons(X,XS))) -> INCR(XS)
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(incr(cons(X,XS))) -> S(X)
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,cons(X,repItems(XS)))
 ACTIVE(repItems(cons(X,XS))) -> CONS(X,repItems(XS))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(repItems(cons(X,XS))) -> REPITEMS(XS)
 ACTIVE(repItems(nil)) -> MARK(nil)
 ACTIVE(tail(cons(X,XS))) -> MARK(XS)
 ACTIVE(take(s(N),cons(X,XS))) -> CONS(X,take(N,XS))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> TAKE(N,XS)
 ACTIVE(take(num0,XS)) -> MARK(nil)
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> CONS(pair(X,Y),zip(XS,YS))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> PAIR(X,Y)
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> ZIP(XS,YS)
 ACTIVE(zip(nil,XS)) -> MARK(nil)
 ACTIVE(zip(X,nil)) -> MARK(nil)
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
 INCR(active(X)) -> INCR(X)
 INCR(mark(X)) -> INCR(X)
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> CONS(mark(X1),X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> INCR(mark(X))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(pair(X1,X2)) -> PAIR(mark(X1),mark(X2))
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(repItems(X)) -> REPITEMS(mark(X))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(s(X)) -> S(mark(X))
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(tail(X)) -> TAIL(mark(X))
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(take(X1,X2)) -> TAKE(mark(X1),mark(X2))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ZIP(mark(X1),mark(X2))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
 PAIR(active(X1),X2) -> PAIR(X1,X2)
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
 REPITEMS(active(X)) -> REPITEMS(X)
 REPITEMS(mark(X)) -> REPITEMS(X)
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
 TAIL(active(X)) -> TAIL(X)
 TAIL(mark(X)) -> TAIL(X)
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
 ZIP(active(X1),X2) -> ZIP(X1,X2)
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZIP(active(X1),X2) -> ZIP(X1,X2)
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 TAIL(active(X)) -> TAIL(X)
 TAIL(mark(X)) -> TAIL(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 REPITEMS(active(X)) -> REPITEMS(X)
 REPITEMS(mark(X)) -> REPITEMS(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 PAIR(active(X1),X2) -> PAIR(X1,X2)
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 INCR(active(X)) -> INCR(X)
 INCR(mark(X)) -> INCR(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(tail(cons(X,XS))) -> MARK(XS)
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)


The problem is decomposed in 9 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZIP(active(X1),X2) -> ZIP(X1,X2)
 ZIP(mark(X1),X2) -> ZIP(X1,X2)
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(ZIP) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.1: 

Subterm Processor:
-> Pairs:
 ZIP(X1,active(X2)) -> ZIP(X1,X2)
 ZIP(X1,mark(X2)) -> ZIP(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(ZIP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 TAKE(active(X1),X2) -> TAKE(X1,X2)
 TAKE(mark(X1),X2) -> TAKE(X1,X2)
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(TAKE) = 1

Problem 1.2: 

SCC Processor:
-> Pairs:
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.2: 

Subterm Processor:
-> Pairs:
 TAKE(X1,active(X2)) -> TAKE(X1,X2)
 TAKE(X1,mark(X2)) -> TAKE(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(TAKE) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 TAIL(active(X)) -> TAIL(X)
 TAIL(mark(X)) -> TAIL(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(TAIL) = 1

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.4: 

Subterm Processor:
-> Pairs:
 S(active(X)) -> S(X)
 S(mark(X)) -> S(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(S) = 1

Problem 1.4: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.5: 

Subterm Processor:
-> Pairs:
 REPITEMS(active(X)) -> REPITEMS(X)
 REPITEMS(mark(X)) -> REPITEMS(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(REPITEMS) = 1

Problem 1.5: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.6: 

Subterm Processor:
-> Pairs:
 PAIR(active(X1),X2) -> PAIR(X1,X2)
 PAIR(mark(X1),X2) -> PAIR(X1,X2)
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(PAIR) = 1

Problem 1.6: 

SCC Processor:
-> Pairs:
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.6: 

Subterm Processor:
-> Pairs:
 PAIR(X1,active(X2)) -> PAIR(X1,X2)
 PAIR(X1,mark(X2)) -> PAIR(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(PAIR) = 2

Problem 1.6: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.7: 

Subterm Processor:
-> Pairs:
 INCR(active(X)) -> INCR(X)
 INCR(mark(X)) -> INCR(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(INCR) = 1

Problem 1.7: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.8: 

Subterm Processor:
-> Pairs:
 CONS(active(X1),X2) -> CONS(X1,X2)
 CONS(mark(X1),X2) -> CONS(X1,X2)
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(CONS) = 1

Problem 1.8: 

SCC Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.8: 

Subterm Processor:
-> Pairs:
 CONS(X1,active(X2)) -> CONS(X1,X2)
 CONS(X1,mark(X2)) -> CONS(X1,X2)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(CONS) = 2

Problem 1.8: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(tail(cons(X,XS))) -> MARK(XS)
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = 2.X1 + 2.X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> ACTIVE(cons(mark(X1),X2))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2
[cons](X1,X2) = 0
[incr](X) = 1
[mark](X) = 2
[pair](X1,X2) = 0
[repItems](X) = 1
[s](X) = 1
[tail](X) = 1
[take](X1,X2) = 1
[zip](X1,X2) = 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 0
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> ACTIVE(pair(mark(X1),mark(X2)))
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X
[cons](X1,X2) = 0
[incr](X) = 1
[mark](X) = 2
[pair](X1,X2) = 0
[repItems](X) = 1
[s](X) = 1
[tail](X) = 1
[take](X1,X2) = 1
[zip](X1,X2) = 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 1
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = 2.X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(repItems(X)) -> MARK(X)
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = X1 + 2.X2 + 2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> ACTIVE(s(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2.X
[cons](X1,X2) = 0
[incr](X) = 1
[mark](X) = 2
[pair](X1,X2) = 1
[repItems](X) = 1
[s](X) = 0
[tail](X) = 1
[take](X1,X2) = 1
[zip](X1,X2) = 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 0
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = 2.X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> ACTIVE(tail(mark(X)))
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2
[cons](X1,X2) = 0
[incr](X) = 1
[mark](X) = 2
[pair](X1,X2) = 2
[repItems](X) = 1
[s](X) = 0
[tail](X) = 0
[take](X1,X2) = 1
[zip](X1,X2) = 1
[num0] = 1
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = 2.X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(tail(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = 2.X1 + 2.X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 1
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X1)
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X1 + X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + 2.X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = X + 1
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 1
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(take(X1,X2)) -> MARK(X2)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + X2
[incr](X) = 2.X
[mark](X) = X
[pair](X1,X2) = 2.X1 + 2.X2
[repItems](X) = 2.X + 2
[s](X) = 2.X
[tail](X) = 2.X + 2
[take](X1,X2) = X1 + X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 0
[pairNs] = 0
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X1)
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X1 + X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = 2.X1 + X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + X2 + 2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> MARK(X2)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = 2.X1 + X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = X1 + 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 1
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(repItems(cons(X,XS))) -> MARK(cons(X,cons(X,repItems(XS))))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + 1/2.X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X
[take](X1,X2) = 1/2.X1 + X2 + 2
[zip](X1,X2) = 2.X1 + X2 + 1
[num0] = 1/2
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 1/2.X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 1/2.X
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(repItems(X)) -> ACTIVE(repItems(mark(X)))
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X2
[incr](X) = 2
[mark](X) = X
[pair](X1,X2) = X1 + 2
[repItems](X) = 0
[s](X) = 2
[tail](X) = X + 2
[take](X1,X2) = 2
[zip](X1,X2) = 2
[num0] = 1
[fSNonEmpty] = 0
[nil] = 0
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(take(s(N),cons(X,XS))) -> MARK(cons(X,take(N,XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + 1/2.X2 + 1/2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + X2 + 1
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 1/2
[take](X1,X2) = X2 + 1
[zip](X1,X2) = X1 + 2.X2 + 2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 1
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = 2.X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 1
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(take(X1,X2)) -> ACTIVE(take(mark(X1),mark(X2)))
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 2
[cons](X1,X2) = 1
[incr](X) = 2
[mark](X) = 2
[pair](X1,X2) = 0
[repItems](X) = 2
[s](X) = 0
[tail](X) = 2
[take](X1,X2) = 0
[zip](X1,X2) = 2
[num0] = 2
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(zip(cons(X,XS),cons(Y,YS))) -> MARK(cons(pair(X,Y),zip(XS,YS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X1 + 1/2.X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + 2.X2
[repItems](X) = 2.X
[s](X) = X
[tail](X) = 2.X + 1
[take](X1,X2) = X1 + X2 + 2
[zip](X1,X2) = X1 + 2.X2 + 1
[num0] = 0
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 1
[ACTIVE](X) = X
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = X
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(zip(X1,X2)) -> ACTIVE(zip(mark(X1),mark(X2)))
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = 1
[cons](X1,X2) = 0
[incr](X) = 1
[mark](X) = 1
[pair](X1,X2) = 0
[repItems](X) = 1
[s](X) = 2
[tail](X) = 1
[take](X1,X2) = 2
[zip](X1,X2) = 0
[num0] = 2
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(oddNs) -> MARK(incr(pairNs))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + 1/2.X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + X2
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 1/2
[take](X1,X2) = 1/2.X1 + 2.X2 + 1
[zip](X1,X2) = X1 + X2 + 1/2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 1/2
[oddNs] = 2
[pairNs] = 1
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(oddNs) -> ACTIVE(oddNs)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(pairNs) -> ACTIVE(pairNs)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 ACTIVE(pairNs) -> MARK(cons(num0,incr(oddNs)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X1 + 1/2.X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = 2.X1 + 2.X2
[repItems](X) = 2.X + 1
[s](X) = X
[tail](X) = 2.X
[take](X1,X2) = 2.X1 + X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 1/2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 1/2
[oddNs] = 1/2
[pairNs] = 1/2
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
 MARK(pairNs) -> ACTIVE(pairNs)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X1 + 1/2.X2 + 1/2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = X1 + X2 + 1
[repItems](X) = 2.X + 2
[s](X) = X
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + X2 + 1
[zip](X1,X2) = X1 + 2.X2
[num0] = 0
[fSNonEmpty] = 0
[nil] = 1
[oddNs] = 1
[pairNs] = 1
[ACTIVE](X) = 1/2.X + 1
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 1/2.X + 1
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X1)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X2
[incr](X) = 2.X
[mark](X) = X
[pair](X1,X2) = 2.X1 + X2 + 2
[repItems](X) = 0
[s](X) = 2.X + 2
[tail](X) = 2.X + 1
[take](X1,X2) = 2.X2
[zip](X1,X2) = 2.X1
[num0] = 1
[fSNonEmpty] = 0
[nil] = 0
[oddNs] = 0
[pairNs] = 0
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(pair(X1,X2)) -> MARK(X2)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 2.X2
[incr](X) = 2.X
[mark](X) = X
[pair](X1,X2) = X1 + 2.X2 + 2
[repItems](X) = 0
[s](X) = 2.X + 1
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 1
[zip](X1,X2) = 2.X1 + 2.X2
[num0] = 2
[fSNonEmpty] = 0
[nil] = 0
[oddNs] = 0
[pairNs] = 0
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
 MARK(s(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = X2
[incr](X) = X
[mark](X) = X
[pair](X1,X2) = 2.X1 + 2
[repItems](X) = 2.X + 1
[s](X) = X + 2
[tail](X) = 2.X + 2
[take](X1,X2) = 2.X2 + 2
[zip](X1,X2) = 2.X1 + 2.X2 + 2
[num0] = 1
[fSNonEmpty] = 0
[nil] = 2
[oddNs] = 2
[pairNs] = 2
[ACTIVE](X) = 2.X + 2
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 2.X + 2
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Reduction Pair Processor:
-> Pairs:
 ACTIVE(incr(cons(X,XS))) -> MARK(cons(s(X),incr(XS)))
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
-> Usable rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 4
->Interpretation:
 
[active](X) = X
[cons](X1,X2) = 1/2.X2 + 1/3
[incr](X) = X + 1/2
[mark](X) = X
[pair](X1,X2) = 3/2.X1 + 3/2.X2
[repItems](X) = 4/3
[s](X) = 1/4.X + 1/3
[tail](X) = 4.X + 2
[take](X1,X2) = 2.X2 + 3
[zip](X1,X2) = 4.X1 + 3
[num0] = 1/3
[fSNonEmpty] = 0
[nil] = 1/3
[oddNs] = 4
[pairNs] = 3
[ACTIVE](X) = 3/2.X + 4/3
[CONS](X1,X2) = 0
[INCR](X) = 0
[MARK](X) = 3/2.X + 4/3
[PAIR](X1,X2) = 0
[REPITEMS](X) = 0
[S](X) = 0
[TAIL](X) = 0
[TAKE](X1,X2) = 0
[ZIP](X1,X2) = 0

Problem 1.9: 

SCC Processor:
-> Pairs:
 MARK(incr(X)) -> ACTIVE(incr(mark(X)))
 MARK(incr(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(incr(X)) -> MARK(X)
->->-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)

Problem 1.9: 

Subterm Processor:
-> Pairs:
 MARK(incr(X)) -> MARK(X)
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Projection:
 pi(MARK) = 1

Problem 1.9: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 active(incr(cons(X,XS))) -> mark(cons(s(X),incr(XS)))
 active(repItems(cons(X,XS))) -> mark(cons(X,cons(X,repItems(XS))))
 active(repItems(nil)) -> mark(nil)
 active(tail(cons(X,XS))) -> mark(XS)
 active(take(s(N),cons(X,XS))) -> mark(cons(X,take(N,XS)))
 active(take(num0,XS)) -> mark(nil)
 active(zip(cons(X,XS),cons(Y,YS))) -> mark(cons(pair(X,Y),zip(XS,YS)))
 active(zip(nil,XS)) -> mark(nil)
 active(zip(X,nil)) -> mark(nil)
 active(oddNs) -> mark(incr(pairNs))
 active(pairNs) -> mark(cons(num0,incr(oddNs)))
 cons(active(X1),X2) -> cons(X1,X2)
 cons(mark(X1),X2) -> cons(X1,X2)
 cons(X1,active(X2)) -> cons(X1,X2)
 cons(X1,mark(X2)) -> cons(X1,X2)
 incr(active(X)) -> incr(X)
 incr(mark(X)) -> incr(X)
 mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
 mark(incr(X)) -> active(incr(mark(X)))
 mark(pair(X1,X2)) -> active(pair(mark(X1),mark(X2)))
 mark(repItems(X)) -> active(repItems(mark(X)))
 mark(s(X)) -> active(s(mark(X)))
 mark(tail(X)) -> active(tail(mark(X)))
 mark(take(X1,X2)) -> active(take(mark(X1),mark(X2)))
 mark(zip(X1,X2)) -> active(zip(mark(X1),mark(X2)))
 mark(num0) -> active(num0)
 mark(nil) -> active(nil)
 mark(oddNs) -> active(oddNs)
 mark(pairNs) -> active(pairNs)
 pair(active(X1),X2) -> pair(X1,X2)
 pair(mark(X1),X2) -> pair(X1,X2)
 pair(X1,active(X2)) -> pair(X1,X2)
 pair(X1,mark(X2)) -> pair(X1,X2)
 repItems(active(X)) -> repItems(X)
 repItems(mark(X)) -> repItems(X)
 s(active(X)) -> s(X)
 s(mark(X)) -> s(X)
 tail(active(X)) -> tail(X)
 tail(mark(X)) -> tail(X)
 take(active(X1),X2) -> take(X1,X2)
 take(mark(X1),X2) -> take(X1,X2)
 take(X1,active(X2)) -> take(X1,X2)
 take(X1,mark(X2)) -> take(X1,X2)
 zip(active(X1),X2) -> zip(X1,X2)
 zip(mark(X1),X2) -> zip(X1,X2)
 zip(X1,active(X2)) -> zip(X1,X2)
 zip(X1,mark(X2)) -> zip(X1,X2)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
