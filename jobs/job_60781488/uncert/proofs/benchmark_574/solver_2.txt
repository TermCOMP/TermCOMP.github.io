YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/oUJcW.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 2 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPOrderProof [EQUIVALENT, 18 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (36) YES
    (37) QDP
        (38) UsableRulesProof [EQUIVALENT, 0 ms]
        (39) QDP
        (40) QReductionProof [EQUIVALENT, 0 ms]
        (41) QDP
        (42) QDPOrderProof [EQUIVALENT, 0 ms]
        (43) QDP
        (44) DependencyGraphProof [EQUIVALENT, 0 ms]
        (45) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(X), s(Y)) -> EQ(X, Y)
   LE(s(X), s(Y)) -> LE(X, Y)
   MIN(cons(N, cons(M, L))) -> IFMIN(le(N, M), cons(N, cons(M, L)))
   MIN(cons(N, cons(M, L))) -> LE(N, M)
   IFMIN(true, cons(N, cons(M, L))) -> MIN(cons(N, L))
   IFMIN(false, cons(N, cons(M, L))) -> MIN(cons(M, L))
   REPLACE(N, M, cons(K, L)) -> IFREPL(eq(N, K), N, M, cons(K, L))
   REPLACE(N, M, cons(K, L)) -> EQ(N, K)
   IFREPL(false, N, M, cons(K, L)) -> REPLACE(N, M, L)
   SELSORT(cons(N, L)) -> IFSELSORT(eq(N, min(cons(N, L))), cons(N, L))
   SELSORT(cons(N, L)) -> EQ(N, min(cons(N, L)))
   SELSORT(cons(N, L)) -> MIN(cons(N, L))
   IFSELSORT(true, cons(N, L)) -> SELSORT(L)
   IFSELSORT(false, cons(N, L)) -> MIN(cons(N, L))
   IFSELSORT(false, cons(N, L)) -> SELSORT(replace(min(cons(N, L)), N, L))
   IFSELSORT(false, cons(N, L)) -> REPLACE(min(cons(N, L)), N, L)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(X), s(Y)) -> LE(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(X), s(Y)) -> LE(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(N, cons(M, L))) -> IFMIN(le(N, M), cons(N, cons(M, L)))
   IFMIN(true, cons(N, cons(M, L))) -> MIN(cons(N, L))
   IFMIN(false, cons(N, cons(M, L))) -> MIN(cons(M, L))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(N, cons(M, L))) -> IFMIN(le(N, M), cons(N, cons(M, L)))
   IFMIN(true, cons(N, cons(M, L))) -> MIN(cons(N, L))
   IFMIN(false, cons(N, cons(M, L))) -> MIN(cons(M, L))

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(N, cons(M, L))) -> IFMIN(le(N, M), cons(N, cons(M, L)))
   IFMIN(true, cons(N, cons(M, L))) -> MIN(cons(N, L))
   IFMIN(false, cons(N, cons(M, L))) -> MIN(cons(M, L))

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IFMIN(true, cons(N, cons(M, L))) -> MIN(cons(N, L))
   IFMIN(false, cons(N, cons(M, L))) -> MIN(cons(M, L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MIN(x1)  =  x1

cons(x1, x2)  =  cons(x2)

IFMIN(x1, x2)  =  x2


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   dummyConstant=1
   cons_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MIN(cons(N, cons(M, L))) -> IFMIN(le(N, M), cons(N, cons(M, L)))

The TRS R consists of the following rules:

   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(22)
TRUE

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(X), s(Y)) -> EQ(X, Y)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(X), s(Y)) -> EQ(X, Y)

R is empty.
The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(X), s(Y)) -> EQ(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(X), s(Y)) -> EQ(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REPLACE(N, M, cons(K, L)) -> IFREPL(eq(N, K), N, M, cons(K, L))
   IFREPL(false, N, M, cons(K, L)) -> REPLACE(N, M, L)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REPLACE(N, M, cons(K, L)) -> IFREPL(eq(N, K), N, M, cons(K, L))
   IFREPL(false, N, M, cons(K, L)) -> REPLACE(N, M, L)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REPLACE(N, M, cons(K, L)) -> IFREPL(eq(N, K), N, M, cons(K, L))
   IFREPL(false, N, M, cons(K, L)) -> REPLACE(N, M, L)

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*IFREPL(false, N, M, cons(K, L)) -> REPLACE(N, M, L)
The graph contains the following edges 2 >= 1, 3 >= 2, 4 > 3


*REPLACE(N, M, cons(K, L)) -> IFREPL(eq(N, K), N, M, cons(K, L))
The graph contains the following edges 1 >= 2, 2 >= 3, 3 >= 4


----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFSELSORT(true, cons(N, L)) -> SELSORT(L)
   SELSORT(cons(N, L)) -> IFSELSORT(eq(N, min(cons(N, L))), cons(N, L))
   IFSELSORT(false, cons(N, L)) -> SELSORT(replace(min(cons(N, L)), N, L))

The TRS R consists of the following rules:

   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)
   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   selsort(nil) -> nil
   selsort(cons(N, L)) -> ifselsort(eq(N, min(cons(N, L))), cons(N, L))
   ifselsort(true, cons(N, L)) -> cons(N, selsort(L))
   ifselsort(false, cons(N, L)) -> cons(min(cons(N, L)), selsort(replace(min(cons(N, L)), N, L)))

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFSELSORT(true, cons(N, L)) -> SELSORT(L)
   SELSORT(cons(N, L)) -> IFSELSORT(eq(N, min(cons(N, L))), cons(N, L))
   IFSELSORT(false, cons(N, L)) -> SELSORT(replace(min(cons(N, L)), N, L))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))
   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   selsort(nil)
   selsort(cons(x0, x1))
   ifselsort(true, cons(x0, x1))
   ifselsort(false, cons(x0, x1))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFSELSORT(true, cons(N, L)) -> SELSORT(L)
   SELSORT(cons(N, L)) -> IFSELSORT(eq(N, min(cons(N, L))), cons(N, L))
   IFSELSORT(false, cons(N, L)) -> SELSORT(replace(min(cons(N, L)), N, L))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(42) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   IFSELSORT(true, cons(N, L)) -> SELSORT(L)
   IFSELSORT(false, cons(N, L)) -> SELSORT(replace(min(cons(N, L)), N, L))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
IFSELSORT(x1, x2)  =  x2

cons(x1, x2)  =  cons(x2)

SELSORT(x1)  =  x1

replace(x1, x2, x3)  =  x3

nil  =  nil

ifrepl(x1, x2, x3, x4)  =  x4


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   cons_1=1
   nil=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELSORT(cons(N, L)) -> IFSELSORT(eq(N, min(cons(N, L))), cons(N, L))

The TRS R consists of the following rules:

   min(cons(0, nil)) -> 0
   min(cons(s(N), nil)) -> s(N)
   min(cons(N, cons(M, L))) -> ifmin(le(N, M), cons(N, cons(M, L)))
   ifmin(true, cons(N, cons(M, L))) -> min(cons(N, L))
   ifmin(false, cons(N, cons(M, L))) -> min(cons(M, L))
   replace(N, M, nil) -> nil
   replace(N, M, cons(K, L)) -> ifrepl(eq(N, K), N, M, cons(K, L))
   eq(0, 0) -> true
   eq(0, s(Y)) -> false
   eq(s(X), 0) -> false
   eq(s(X), s(Y)) -> eq(X, Y)
   ifrepl(true, N, M, cons(K, L)) -> cons(M, L)
   ifrepl(false, N, M, cons(K, L)) -> cons(K, replace(N, M, L))
   le(0, Y) -> true
   le(s(X), 0) -> false
   le(s(X), s(Y)) -> le(X, Y)

The set Q consists of the following terms:

   eq(0, 0)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   min(cons(0, nil))
   min(cons(s(x0), nil))
   min(cons(x0, cons(x1, x2)))
   ifmin(true, cons(x0, cons(x1, x2)))
   ifmin(false, cons(x0, cons(x1, x2)))
   replace(x0, x1, nil)
   replace(x0, x1, cons(x2, x3))
   ifrepl(true, x0, x1, cons(x2, x3))
   ifrepl(false, x0, x1, cons(x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(45)
TRUE
