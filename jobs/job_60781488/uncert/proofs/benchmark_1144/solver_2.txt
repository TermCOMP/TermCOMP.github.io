YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jszWT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 34 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 8 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 3 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) MRRProof [EQUIVALENT, 0 ms]
(14) QDP
(15) MRRProof [EQUIVALENT, 0 ms]
(16) QDP
(17) MRRProof [EQUIVALENT, 5 ms]
(18) QDP
(19) DependencyGraphProof [EQUIVALENT, 0 ms]
(20) QDP
(21) QDPOrderProof [EQUIVALENT, 13 ms]
(22) QDP
(23) PisEmptyProof [EQUIVALENT, 0 ms]
(24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(nil) -> nil
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__nats -> a__adx(a__zeros)
   a__zeros -> cons(0, zeros)
   a__head(cons(X, L)) -> mark(X)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 1
   POL(a__tail(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__nats -> a__adx(a__zeros)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(nil) -> nil
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__head(cons(X, L)) -> mark(X)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = 1 + 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(head(x_1)) = 1 + 2*x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__head(cons(X, L)) -> mark(X)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(nil) -> nil
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = 1 + x_1
   POL(a__head(x_1)) = 2*x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = 1 + x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__adx(nil) -> nil




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__tail(cons(X, L)) -> mark(L)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 1 + 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(head(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a__tail(cons(X, L)) -> mark(L)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.

----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, L)) -> MARK(X)
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   MARK(adx(X)) -> MARK(X)
   MARK(nats) -> A__NATS
   MARK(zeros) -> A__ZEROS
   MARK(head(X)) -> A__HEAD(mark(X))
   MARK(head(X)) -> MARK(X)
   MARK(tail(X)) -> A__TAIL(mark(X))
   MARK(tail(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)
   MARK(head(X)) -> MARK(X)
   MARK(tail(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(tail(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__ADX(x_1)) = x_1
   POL(A__INCR(x_1)) = x_1
   POL(MARK(x_1)) = x_1
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 1 + 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(head(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(zeros) = 0


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)
   MARK(head(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(head(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__ADX(x_1)) = 2*x_1
   POL(A__INCR(x_1)) = 2*x_1
   POL(MARK(x_1)) = 2*x_1
   POL(a__adx(x_1)) = x_1
   POL(a__head(x_1)) = 1 + x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 1 + x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(zeros) = 0


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MARK(adx(X)) -> A__ADX(mark(X))
   A__ADX(cons(X, L)) -> MARK(X)
   MARK(adx(X)) -> MARK(X)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(A__ADX(x_1)) = 1 + 2*x_1
   POL(A__INCR(x_1)) = x_1
   POL(MARK(x_1)) = 2*x_1
   POL(a__adx(x_1)) = 1 + x_1
   POL(a__head(x_1)) = x_1
   POL(a__incr(x_1)) = x_1
   POL(a__nats) = 0
   POL(a__tail(x_1)) = 2*x_1
   POL(a__zeros) = 0
   POL(adx(x_1)) = 1 + x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(head(x_1)) = x_1
   POL(incr(x_1)) = x_1
   POL(mark(x_1)) = x_1
   POL(nats) = 0
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 2*x_1
   POL(zeros) = 0


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(incr(X)) -> A__INCR(mark(X))
   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> MARK(X)
   A__ADX(cons(X, L)) -> A__INCR(cons(mark(X), adx(L)))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__INCR(cons(X, L)) -> MARK(X)
   MARK(incr(X)) -> A__INCR(mark(X))
   MARK(incr(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(s(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__INCR_1(x_1) ) = 2x_1 + 1
POL( mark_1(x_1) ) = x_1
POL( incr_1(x_1) ) = 2x_1 + 2
POL( a__incr_1(x_1) ) = 2x_1 + 2
POL( adx_1(x_1) ) = 2x_1 + 2
POL( a__adx_1(x_1) ) = 2x_1 + 2
POL( nats ) = 2
POL( a__nats ) = 2
POL( zeros ) = 1
POL( a__zeros ) = 1
POL( head_1(x_1) ) = 0
POL( a__head_1(x_1) ) = max{0, -2}
POL( tail_1(x_1) ) = 0
POL( a__tail_1(x_1) ) = 0
POL( nil ) = 0
POL( cons_2(x_1, x_2) ) = x_1 + 1
POL( s_1(x_1) ) = 2x_1 + 1
POL( 0 ) = 0
POL( MARK_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__adx(X) -> adx(X)
   a__incr(nil) -> nil
   a__incr(X) -> incr(X)
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   a__zeros -> zeros
   a__nats -> nats


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a__incr(nil) -> nil
   a__incr(cons(X, L)) -> cons(s(mark(X)), incr(L))
   a__adx(cons(X, L)) -> a__incr(cons(mark(X), adx(L)))
   a__zeros -> cons(0, zeros)
   mark(incr(X)) -> a__incr(mark(X))
   mark(adx(X)) -> a__adx(mark(X))
   mark(nats) -> a__nats
   mark(zeros) -> a__zeros
   mark(head(X)) -> a__head(mark(X))
   mark(tail(X)) -> a__tail(mark(X))
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   mark(s(X)) -> s(mark(X))
   mark(0) -> 0
   a__incr(X) -> incr(X)
   a__adx(X) -> adx(X)
   a__nats -> nats
   a__zeros -> zeros
   a__head(X) -> head(X)
   a__tail(X) -> tail(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
