YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lH70D.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 30 ms]
(2) QTRS
(3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QReductionProof [EQUIVALENT, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   not(true) -> false
   not(false) -> true
   evenodd(x, 0) -> not(evenodd(x, s(0)))
   evenodd(0, s(0)) -> false
   evenodd(s(x), s(0)) -> evenodd(x, 0)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(evenodd(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(false) = 0
   POL(not(x_1)) = x_1
   POL(s(x_1)) = 2*x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   evenodd(0, s(0)) -> false




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   not(true) -> false
   not(false) -> true
   evenodd(x, 0) -> not(evenodd(x, s(0)))
   evenodd(s(x), s(0)) -> evenodd(x, 0)

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   not(true) -> false
   not(false) -> true
   evenodd(x, 0) -> not(evenodd(x, s(0)))
   evenodd(s(x), s(0)) -> evenodd(x, 0)

The set Q consists of the following terms:

   not(true)
   not(false)
   evenodd(x0, 0)
   evenodd(s(x0), s(0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVENODD(x, 0) -> NOT(evenodd(x, s(0)))
   EVENODD(x, 0) -> EVENODD(x, s(0))
   EVENODD(s(x), s(0)) -> EVENODD(x, 0)

The TRS R consists of the following rules:

   not(true) -> false
   not(false) -> true
   evenodd(x, 0) -> not(evenodd(x, s(0)))
   evenodd(s(x), s(0)) -> evenodd(x, 0)

The set Q consists of the following terms:

   not(true)
   not(false)
   evenodd(x0, 0)
   evenodd(s(x0), s(0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVENODD(s(x), s(0)) -> EVENODD(x, 0)
   EVENODD(x, 0) -> EVENODD(x, s(0))

The TRS R consists of the following rules:

   not(true) -> false
   not(false) -> true
   evenodd(x, 0) -> not(evenodd(x, s(0)))
   evenodd(s(x), s(0)) -> evenodd(x, 0)

The set Q consists of the following terms:

   not(true)
   not(false)
   evenodd(x0, 0)
   evenodd(s(x0), s(0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVENODD(s(x), s(0)) -> EVENODD(x, 0)
   EVENODD(x, 0) -> EVENODD(x, s(0))

R is empty.
The set Q consists of the following terms:

   not(true)
   not(false)
   evenodd(x0, 0)
   evenodd(s(x0), s(0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   not(true)
   not(false)
   evenodd(x0, 0)
   evenodd(s(x0), s(0))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVENODD(s(x), s(0)) -> EVENODD(x, 0)
   EVENODD(x, 0) -> EVENODD(x, s(0))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EVENODD(x, 0) -> EVENODD(x, s(0))
The graph contains the following edges 1 >= 1


*EVENODD(s(x), s(0)) -> EVENODD(x, 0)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(14)
YES
