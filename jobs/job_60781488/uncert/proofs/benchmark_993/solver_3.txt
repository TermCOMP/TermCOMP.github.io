YES

Problem 1: 

(VAR vu95NonEmpty X X1 X2 Y Z)
(RULES
au95u95add(num0,X) -> mark(X)
au95u95add(s(X),Y) -> s(add(X,Y))
au95u95add(X1,X2) -> add(X1,X2)
au95u95from(X) -> cons(mark(X),from(s(X)))
au95u95from(X) -> from(X)
au95u95fst(num0,Z) -> nil
au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
au95u95fst(X1,X2) -> fst(X1,X2)
au95u95len(cons(X,Z)) -> s(len(Z))
au95u95len(nil) -> num0
au95u95len(X) -> len(X)
mark(num0) -> num0
mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
mark(cons(X1,X2)) -> cons(mark(X1),X2)
mark(from(X)) -> au95u95from(mark(X))
mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
mark(len(X)) -> au95u95len(mark(X))
mark(nil) -> nil
mark(s(X)) -> s(X)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> AU95U95LEN(mark(X))
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> AU95U95LEN(mark(X))
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95ADD(num0,X) -> MARK(X)
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
-> Usable rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95add](X1,X2) = X1 + 2.X2 + 2
[au95u95from](X) = 2.X + 2
[au95u95fst](X1,X2) = X1 + 2.X2 + 2
[au95u95len](X) = X + 2
[mark](X) = 2.X + 1
[num0] = 2
[add](X1,X2) = X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 1
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[fst](X1,X2) = X1 + 2.X2 + 2
[len](X) = X + 2
[nil] = 0
[s](X) = 2
[AU95U95ADD](X1,X2) = X1 + 2.X2 + 2
[AU95U95FROM](X) = 2.X + 1
[AU95U95FST](X1,X2) = X1 + 2.X2 + 2
[AU95U95LEN](X) = 0
[MARK](X) = 2.X + 1

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> AU95U95ADD(mark(X1),mark(X2))
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95FROM(X) -> MARK(X)
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
-> Usable rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95add](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95from](X) = 2.X + 2
[au95u95fst](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95len](X) = 2.X + 2
[mark](X) = 2.X
[num0] = 2
[add](X1,X2) = 2.X1 + 2.X2 + 2
[cons](X1,X2) = X1 + 2
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X + 2
[nil] = 0
[s](X) = 2
[AU95U95ADD](X1,X2) = 0
[AU95U95FROM](X) = 2.X + 1
[AU95U95FST](X1,X2) = X1 + 2.X2
[AU95U95LEN](X) = 0
[MARK](X) = 2.X

Problem 1: 

SCC Processor:
-> Pairs:
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> AU95U95FROM(mark(X))
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)

Problem 1: 

Reduction Pair Processor:
-> Pairs:
 AU95U95FST(s(X),cons(Y,Z)) -> MARK(Y)
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
-> Usable rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[au95u95add](X1,X2) = X1 + 2.X2
[au95u95from](X) = 2.X + 2
[au95u95fst](X1,X2) = 2.X1 + 2.X2 + 2
[au95u95len](X) = 2.X + 2
[mark](X) = 2.X
[num0] = 1
[add](X1,X2) = X1 + 2.X2
[cons](X1,X2) = X1 + 1
[fSNonEmpty] = 0
[from](X) = 2.X + 2
[fst](X1,X2) = 2.X1 + 2.X2 + 2
[len](X) = 2.X + 1
[nil] = 0
[s](X) = 2
[AU95U95ADD](X1,X2) = 0
[AU95U95FROM](X) = 0
[AU95U95FST](X1,X2) = X1 + X2 + 2
[AU95U95LEN](X) = 0
[MARK](X) = X + 2

Problem 1: 

SCC Processor:
-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> AU95U95FST(mark(X1),mark(X2))
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
->->-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)

Problem 1: 

Subterm Processor:
-> Pairs:
 MARK(add(X1,X2)) -> MARK(X1)
 MARK(add(X1,X2)) -> MARK(X2)
 MARK(cons(X1,X2)) -> MARK(X1)
 MARK(from(X)) -> MARK(X)
 MARK(fst(X1,X2)) -> MARK(X1)
 MARK(fst(X1,X2)) -> MARK(X2)
 MARK(len(X)) -> MARK(X)
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Projection:
 pi(MARK) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 au95u95add(num0,X) -> mark(X)
 au95u95add(s(X),Y) -> s(add(X,Y))
 au95u95add(X1,X2) -> add(X1,X2)
 au95u95from(X) -> cons(mark(X),from(s(X)))
 au95u95from(X) -> from(X)
 au95u95fst(num0,Z) -> nil
 au95u95fst(s(X),cons(Y,Z)) -> cons(mark(Y),fst(X,Z))
 au95u95fst(X1,X2) -> fst(X1,X2)
 au95u95len(cons(X,Z)) -> s(len(Z))
 au95u95len(nil) -> num0
 au95u95len(X) -> len(X)
 mark(num0) -> num0
 mark(add(X1,X2)) -> au95u95add(mark(X1),mark(X2))
 mark(cons(X1,X2)) -> cons(mark(X1),X2)
 mark(from(X)) -> au95u95from(mark(X))
 mark(fst(X1,X2)) -> au95u95fst(mark(X1),mark(X2))
 mark(len(X)) -> au95u95len(mark(X))
 mark(nil) -> nil
 mark(s(X)) -> s(X)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
