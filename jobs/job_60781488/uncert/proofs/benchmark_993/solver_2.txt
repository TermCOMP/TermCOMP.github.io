YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ooOtR.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 1 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 31 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 16 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a__fst(0, Z) -> nil
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__fst(X1, X2) -> fst(X1, X2)
   a__from(X) -> from(X)
   a__add(X1, X2) -> add(X1, X2)
   a__len(X) -> len(X)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FST(s(X), cons(Y, Z)) -> MARK(Y)
   A__FROM(X) -> MARK(X)
   A__ADD(0, X) -> MARK(X)
   MARK(fst(X1, X2)) -> A__FST(mark(X1), mark(X2))
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> A__FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> A__LEN(mark(X))
   MARK(len(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   a__fst(0, Z) -> nil
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__fst(X1, X2) -> fst(X1, X2)
   a__from(X) -> from(X)
   a__add(X1, X2) -> add(X1, X2)
   a__len(X) -> len(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(fst(X1, X2)) -> A__FST(mark(X1), mark(X2))
   A__FST(s(X), cons(Y, Z)) -> MARK(Y)
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> A__FROM(mark(X))
   A__FROM(X) -> MARK(X)
   MARK(from(X)) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   A__ADD(0, X) -> MARK(X)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)

The TRS R consists of the following rules:

   a__fst(0, Z) -> nil
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__fst(X1, X2) -> fst(X1, X2)
   a__from(X) -> from(X)
   a__add(X1, X2) -> add(X1, X2)
   a__len(X) -> len(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(fst(X1, X2)) -> A__FST(mark(X1), mark(X2))
   A__FST(s(X), cons(Y, Z)) -> MARK(Y)
   MARK(fst(X1, X2)) -> MARK(X1)
   MARK(fst(X1, X2)) -> MARK(X2)
   MARK(from(X)) -> A__FROM(mark(X))
   MARK(from(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> MARK(X1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__ADD_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( A__FROM_1(x_1) ) = x_1
POL( A__FST_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 1}
POL( mark_1(x_1) ) = x_1
POL( fst_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( a__fst_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( from_1(x_1) ) = x_1 + 2
POL( a__from_1(x_1) ) = x_1 + 2
POL( add_2(x_1, x_2) ) = x_1 + 2x_2
POL( a__add_2(x_1, x_2) ) = x_1 + 2x_2
POL( 0 ) = 2
POL( len_1(x_1) ) = 2x_1
POL( a__len_1(x_1) ) = 2x_1
POL( s_1(x_1) ) = 2
POL( nil ) = 1
POL( cons_2(x_1, x_2) ) = x_1 + 2
POL( MARK_1(x_1) ) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   a__add(0, X) -> mark(X)
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__from(X) -> from(X)
   a__fst(0, Z) -> nil
   a__fst(X1, X2) -> fst(X1, X2)
   a__add(s(X), Y) -> s(add(X, Y))
   a__add(X1, X2) -> add(X1, X2)
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   a__len(X) -> len(X)
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__FROM(X) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   A__ADD(0, X) -> MARK(X)
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__fst(0, Z) -> nil
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__fst(X1, X2) -> fst(X1, X2)
   a__from(X) -> from(X)
   a__add(X1, X2) -> add(X1, X2)
   a__len(X) -> len(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A__ADD(0, X) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> MARK(X)

The TRS R consists of the following rules:

   a__fst(0, Z) -> nil
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__fst(X1, X2) -> fst(X1, X2)
   a__from(X) -> from(X)
   a__add(X1, X2) -> add(X1, X2)
   a__len(X) -> len(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A__ADD(0, X) -> MARK(X)
   MARK(add(X1, X2)) -> A__ADD(mark(X1), mark(X2))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(len(X)) -> MARK(X)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A__ADD_2(x_1, x_2) ) = 2x_2 + 1
POL( mark_1(x_1) ) = 2x_1 + 1
POL( fst_2(x_1, x_2) ) = 1
POL( a__fst_2(x_1, x_2) ) = 1
POL( from_1(x_1) ) = 2
POL( a__from_1(x_1) ) = 2
POL( add_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( a__add_2(x_1, x_2) ) = x_1 + 2x_2 + 2
POL( 0 ) = 0
POL( len_1(x_1) ) = 2x_1 + 2
POL( a__len_1(x_1) ) = 2x_1 + 2
POL( s_1(x_1) ) = 1
POL( nil ) = 0
POL( cons_2(x_1, x_2) ) = x_2
POL( MARK_1(x_1) ) = 2x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   a__add(0, X) -> mark(X)
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__from(X) -> from(X)
   a__fst(0, Z) -> nil
   a__fst(X1, X2) -> fst(X1, X2)
   a__add(s(X), Y) -> s(add(X, Y))
   a__add(X1, X2) -> add(X1, X2)
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   a__len(X) -> len(X)
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))


----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a__fst(0, Z) -> nil
   a__fst(s(X), cons(Y, Z)) -> cons(mark(Y), fst(X, Z))
   a__from(X) -> cons(mark(X), from(s(X)))
   a__add(0, X) -> mark(X)
   a__add(s(X), Y) -> s(add(X, Y))
   a__len(nil) -> 0
   a__len(cons(X, Z)) -> s(len(Z))
   mark(fst(X1, X2)) -> a__fst(mark(X1), mark(X2))
   mark(from(X)) -> a__from(mark(X))
   mark(add(X1, X2)) -> a__add(mark(X1), mark(X2))
   mark(len(X)) -> a__len(mark(X))
   mark(0) -> 0
   mark(s(X)) -> s(X)
   mark(nil) -> nil
   mark(cons(X1, X2)) -> cons(mark(X1), X2)
   a__fst(X1, X2) -> fst(X1, X2)
   a__from(X) -> from(X)
   a__add(X1, X2) -> add(X1, X2)
   a__len(X) -> len(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
