NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/QcWYD.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 7 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) MNOCProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) NonLoopProof [COMPLETE, 50 ms]
        (34) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The TRS R 2 is 
   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))

The signature Sigma is {f_2}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, xs) -> F(isList(xs), append(cons(a, nil), xs))
   F(true, xs) -> ISLIST(xs)
   F(true, xs) -> APPEND(cons(a, nil), xs)
   ISLIST(cons(x, xs)) -> ISLIST(xs)
   APPEND(xs, ys) -> APPENDAKK(reverse(xs), ys)
   APPEND(xs, ys) -> REVERSE(xs)
   APPENDAKK(cons(x, xs), ys) -> APPENDAKK(xs, cons(x, ys))
   REVERSE(cons(x, xs)) -> APPEND(reverse(xs), cons(x, nil))
   REVERSE(cons(x, xs)) -> REVERSE(xs)

The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDAKK(cons(x, xs), ys) -> APPENDAKK(xs, cons(x, ys))

The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDAKK(cons(x, xs), ys) -> APPENDAKK(xs, cons(x, ys))

R is empty.
The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDAKK(cons(x, xs), ys) -> APPENDAKK(xs, cons(x, ys))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPENDAKK(cons(x, xs), ys) -> APPENDAKK(xs, cons(x, ys))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(xs, ys) -> REVERSE(xs)
   REVERSE(cons(x, xs)) -> APPEND(reverse(xs), cons(x, nil))
   REVERSE(cons(x, xs)) -> REVERSE(xs)

The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(xs, ys) -> REVERSE(xs)
   REVERSE(cons(x, xs)) -> APPEND(reverse(xs), cons(x, nil))
   REVERSE(cons(x, xs)) -> REVERSE(xs)

The TRS R consists of the following rules:

   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(xs, ys) -> REVERSE(xs)
   REVERSE(cons(x, xs)) -> APPEND(reverse(xs), cons(x, nil))
   REVERSE(cons(x, xs)) -> REVERSE(xs)

The TRS R consists of the following rules:

   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))

The set Q consists of the following terms:

   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   REVERSE(cons(x, xs)) -> APPEND(reverse(xs), cons(x, nil))
   REVERSE(cons(x, xs)) -> REVERSE(xs)


Used ordering: Polynomial interpretation [POLO]:

   POL(APPEND(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(REVERSE(x_1)) = 2 + 2*x_1
   POL(append(x_1, x_2)) = x_1 + x_2
   POL(appendAkk(x_1, x_2)) = x_1 + x_2
   POL(cons(x_1, x_2)) = 2 + x_1 + x_2
   POL(nil) = 0
   POL(reverse(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(xs, ys) -> REVERSE(xs)

The TRS R consists of the following rules:

   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))

The set Q consists of the following terms:

   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(22)
TRUE

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLIST(cons(x, xs)) -> ISLIST(xs)

The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLIST(cons(x, xs)) -> ISLIST(xs)

R is empty.
The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLIST(cons(x, xs)) -> ISLIST(xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLIST(cons(x, xs)) -> ISLIST(xs)
The graph contains the following edges 1 > 1


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, xs) -> F(isList(xs), append(cons(a, nil), xs))

The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

The set Q consists of the following terms:

   f(true, x0)
   isList(nil)
   isList(cons(x0, x1))
   append(x0, x1)
   appendAkk(nil, x0)
   appendAkk(cons(x0, x1), x2)
   reverse(nil)
   reverse(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(true, xs) -> F(isList(xs), append(cons(a, nil), xs))

The TRS R consists of the following rules:

   f(true, xs) -> f(isList(xs), append(cons(a, nil), xs))
   isList(nil) -> true
   isList(cons(x, xs)) -> isList(xs)
   append(xs, ys) -> appendAkk(reverse(xs), ys)
   appendAkk(nil, ys) -> ys
   appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))
   reverse(nil) -> nil
   reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [ ] on the rule
F(true, cons(a, zr1))[zr1 / cons(a, zr1)]^n[zr1 / nil] -> F(true, cons(a, cons(a, zr1)))[zr1 / cons(a, zr1)]^n[zr1 / nil]
This rule is correct for the QDP as the following derivation shows:

F(true, cons(a, zr1))[zr1 / cons(a, zr1)]^n[zr1 / nil] -> F(true, cons(a, cons(a, zr1)))[zr1 / cons(a, zr1)]^n[zr1 / nil]
    by Equivalence by Domain Renaming of the lhs with [zl0 / zr1]
    intermediate steps: Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
    F(true, cons(x1, zl1))[zl1 / cons(x1, zl1)]^n[zl1 / nil] -> F(true, cons(a, cons(x1, zr1)))[zr1 / cons(x1, zr1)]^n[zr1 / nil]
        by Rewrite t with the rewrite sequence <Pos,Rule>: [([1],append(xs, ys) -> appendAkk(reverse(xs), ys)), ([1,0],reverse(cons(x, xs)) -> append(reverse(xs), cons(x, nil))), ([1,0],append(xs, ys) -> appendAkk(reverse(xs), ys)), ([1,0,0,0],reverse(nil) -> nil), ([1,0,0],reverse(nil) -> nil), ([1,0],appendAkk(nil, ys) -> ys), ([1],appendAkk(cons(x, xs), ys) -> appendAkk(xs, cons(x, ys))), ([1],appendAkk(nil, ys) -> ys)]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs)
        F(true, cons(x1, zl1))[zr1 / cons(x1, zr1), zl1 / cons(x1, zl1)]^n[zr1 / nil, zl1 / nil] -> F(true, append(cons(a, nil), cons(x1, zr1)))[zr1 / cons(x1, zr1), zl1 / cons(x1, zl1)]^n[zr1 / nil, zl1 / nil]
            by Narrowing at position: [0]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
            F(true, cons(y0, zs1))[zs1 / cons(y0, zs1)]^n[zs1 / y1] -> F(isList(y1), append(cons(a, nil), cons(y0, zs1)))[zs1 / cons(y0, zs1)]^n[zs1 / y1]
                by Narrowing at position: [0]
                intermediate steps: Instantiate mu - Instantiate Sigma - Instantiation - Instantiation
                F(true, xs)[ ]^n[ ] -> F(isList(xs), append(cons(a, nil), xs))[ ]^n[ ]
                    by Rule from TRS P

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (rhs) - Instantiation - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
                isList(cons(x, xs))[xs / cons(x, xs)]^n[ ] -> isList(xs)[ ]^n[ ]
                    by PatternCreation I with delta: [ ], theta: [ ], sigma: [xs / cons(x, xs)]
                    isList(cons(x, xs))[ ]^n[ ] -> isList(xs)[ ]^n[ ]
                        by Rule from TRS R

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            isList(nil)[ ]^n[ ] -> true[ ]^n[ ]
                by Rule from TRS R
----------------------------------------

(34)
NO
