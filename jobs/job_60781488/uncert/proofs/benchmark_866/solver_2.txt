NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/a9NLl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) NonTerminationLoopProof [COMPLETE, 1210 ms]
        (12) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   +(X, 0) -> X
   +(X, s(Y)) -> s(+(X, Y))
   double(X) -> +(X, X)
   f(0, s(0), X) -> f(X, double(X), X)
   g(X, Y) -> X
   g(X, Y) -> Y

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(X, s(Y)) -> +^1(X, Y)
   DOUBLE(X) -> +^1(X, X)
   F(0, s(0), X) -> F(X, double(X), X)
   F(0, s(0), X) -> DOUBLE(X)

The TRS R consists of the following rules:

   +(X, 0) -> X
   +(X, s(Y)) -> s(+(X, Y))
   double(X) -> +(X, X)
   f(0, s(0), X) -> f(X, double(X), X)
   g(X, Y) -> X
   g(X, Y) -> Y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(X, s(Y)) -> +^1(X, Y)

The TRS R consists of the following rules:

   +(X, 0) -> X
   +(X, s(Y)) -> s(+(X, Y))
   double(X) -> +(X, X)
   f(0, s(0), X) -> f(X, double(X), X)
   g(X, Y) -> X
   g(X, Y) -> Y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(X, s(Y)) -> +^1(X, Y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*+^1(X, s(Y)) -> +^1(X, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(0, s(0), X) -> F(X, double(X), X)

The TRS R consists of the following rules:

   +(X, 0) -> X
   +(X, s(Y)) -> s(+(X, Y))
   double(X) -> +(X, X)
   f(0, s(0), X) -> f(X, double(X), X)
   g(X, Y) -> X
   g(X, Y) -> Y

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(g(0, Y), double(g(0, s(0))), X) evaluates to  t =F(X, double(X), X)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [Y / s(0), X / g(0, s(0))]

--------------------------------------------------------------------------------
Rewriting sequence

F(g(0, s(0)), double(g(0, s(0))), g(0, s(0))) -> F(g(0, s(0)), +(g(0, s(0)), g(0, s(0))), g(0, s(0)))
with rule double(X'') -> +(X'', X'') at position [1] and matcher [X'' / g(0, s(0))]

F(g(0, s(0)), +(g(0, s(0)), g(0, s(0))), g(0, s(0))) -> F(g(0, s(0)), +(g(0, s(0)), 0), g(0, s(0)))
with rule g(X'', Y') -> X'' at position [1,1] and matcher [X'' / 0, Y' / s(0)]

F(g(0, s(0)), +(g(0, s(0)), 0), g(0, s(0))) -> F(g(0, s(0)), +(s(0), 0), g(0, s(0)))
with rule g(X', Y') -> Y' at position [1,0] and matcher [X' / 0, Y' / s(0)]

F(g(0, s(0)), +(s(0), 0), g(0, s(0))) -> F(g(0, s(0)), s(0), g(0, s(0)))
with rule +(X', 0) -> X' at position [1] and matcher [X' / s(0)]

F(g(0, s(0)), s(0), g(0, s(0))) -> F(0, s(0), g(0, s(0)))
with rule g(X', Y) -> X' at position [0] and matcher [X' / 0, Y / s(0)]

F(0, s(0), g(0, s(0))) -> F(g(0, s(0)), double(g(0, s(0))), g(0, s(0)))
with rule F(0, s(0), X) -> F(X, double(X), X)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(12)
NO
