YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dsDKj.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 1 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 1 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(perfectp, 0) -> false
   app(perfectp, app(s, x)) -> app(app(app(app(f, x), app(s, 0)), app(s, x)), app(s, x))
   app(app(app(app(f, 0), y), 0), u) -> true
   app(app(app(app(f, 0), y), app(s, z)), u) -> false
   app(app(app(app(f, app(s, x)), 0), z), u) -> app(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)
   app(app(app(app(f, app(s, x)), app(s, y)), z), u) -> app(app(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)), app(app(app(app(f, x), u), z), u))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(perfectp, 0) -> false
   app(perfectp, app(s, x)) -> app(app(app(app(f, x), app(s, 0)), app(s, x)), app(s, x))
   app(app(app(app(f, 0), y), 0), u) -> true
   app(app(app(app(f, 0), y), app(s, z)), u) -> false
   app(app(app(app(f, app(s, x)), 0), z), u) -> app(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)
   app(app(app(app(f, app(s, x)), app(s, y)), z), u) -> app(app(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)), app(app(app(app(f, x), u), z), u))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(perfectp, 0)
   app(perfectp, app(s, x0))
   app(app(app(app(f, 0), x0), 0), x1)
   app(app(app(app(f, 0), x0), app(s, x1)), x2)
   app(app(app(app(f, app(s, x0)), 0), x1), x2)
   app(app(app(app(f, app(s, x0)), app(s, x1)), x2), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(perfectp, app(s, x)) -> APP(app(app(app(f, x), app(s, 0)), app(s, x)), app(s, x))
   APP(perfectp, app(s, x)) -> APP(app(app(f, x), app(s, 0)), app(s, x))
   APP(perfectp, app(s, x)) -> APP(app(f, x), app(s, 0))
   APP(perfectp, app(s, x)) -> APP(f, x)
   APP(perfectp, app(s, x)) -> APP(s, 0)
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(app(app(f, x), u), app(app(minus, z), app(s, x)))
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(app(f, x), u)
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(f, x)
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(app(minus, z), app(s, x))
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(minus, z)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)), app(app(app(app(f, x), u), z), u))
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u))
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(if, app(app(le, x), y))
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(le, x), y)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(le, x)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(f, app(s, x)), app(app(minus, y), x)), z)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(f, app(s, x)), app(app(minus, y), x))
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(minus, y), x)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(minus, y)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(app(f, x), u), z), u)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(f, x), u), z)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(f, x), u)
   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(f, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(cons, app(fun, x)), app(app(map, fun), xs))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(cons, app(fun, x))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(filter2, app(fun, x)), fun), x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(filter2, app(fun, x)), fun)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(filter2, app(fun, x))
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(cons, x), app(app(filter, fun), xs))
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(filter, fun)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(filter, fun)

The TRS R consists of the following rules:

   app(perfectp, 0) -> false
   app(perfectp, app(s, x)) -> app(app(app(app(f, x), app(s, 0)), app(s, x)), app(s, x))
   app(app(app(app(f, 0), y), 0), u) -> true
   app(app(app(app(f, 0), y), app(s, z)), u) -> false
   app(app(app(app(f, app(s, x)), 0), z), u) -> app(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)
   app(app(app(app(f, app(s, x)), app(s, y)), z), u) -> app(app(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)), app(app(app(app(f, x), u), z), u))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(perfectp, 0)
   app(perfectp, app(s, x0))
   app(app(app(app(f, 0), x0), 0), x1)
   app(app(app(app(f, 0), x0), app(s, x1)), x2)
   app(app(app(app(f, app(s, x0)), 0), x1), x2)
   app(app(app(app(f, app(s, x0)), app(s, x1)), x2), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 32 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(app(f, x), u), z), u)
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)

The TRS R consists of the following rules:

   app(perfectp, 0) -> false
   app(perfectp, app(s, x)) -> app(app(app(app(f, x), app(s, 0)), app(s, x)), app(s, x))
   app(app(app(app(f, 0), y), 0), u) -> true
   app(app(app(app(f, 0), y), app(s, z)), u) -> false
   app(app(app(app(f, app(s, x)), 0), z), u) -> app(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)
   app(app(app(app(f, app(s, x)), app(s, y)), z), u) -> app(app(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)), app(app(app(app(f, x), u), z), u))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(perfectp, 0)
   app(perfectp, app(s, x0))
   app(app(app(app(f, 0), x0), 0), x1)
   app(app(app(app(f, 0), x0), app(s, x1)), x2)
   app(app(app(app(f, app(s, x0)), 0), x1), x2)
   app(app(app(app(f, app(s, x0)), app(s, x1)), x2), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(app(f, app(s, x)), app(s, y)), z), u) -> APP(app(app(app(f, x), u), z), u)
   APP(app(app(app(f, app(s, x)), 0), z), u) -> APP(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)

R is empty.
The set Q consists of the following terms:

   app(perfectp, 0)
   app(perfectp, app(s, x0))
   app(app(app(app(f, 0), x0), 0), x1)
   app(app(app(app(f, 0), x0), app(s, x1)), x2)
   app(app(app(app(f, app(s, x0)), 0), x1), x2)
   app(app(app(app(f, app(s, x0)), app(s, x1)), x2), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(s(x), s(y), z, u) -> f1(x, u, z, u)
   f1(s(x), 0, z, u) -> f1(x, u, minus(z, s(x)), u)

R is empty.
The set Q consists of the following terms:

   perfectp(0)
   perfectp(s(x0))
   f(0, x0, 0, x1)
   f(0, x0, s(x1), x2)
   f(s(x0), 0, x1, x2)
   f(s(x0), s(x1), x2, x3)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   perfectp(0)
   perfectp(s(x0))
   f(0, x0, 0, x1)
   f(0, x0, s(x1), x2)
   f(s(x0), 0, x1, x2)
   f(s(x0), s(x1), x2, x3)
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f1(s(x), s(y), z, u) -> f1(x, u, z, u)
   f1(s(x), 0, z, u) -> f1(x, u, minus(z, s(x)), u)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f1(s(x), s(y), z, u) -> f1(x, u, z, u)
The graph contains the following edges 1 > 1, 4 >= 2, 3 >= 3, 4 >= 4


*f1(s(x), 0, z, u) -> f1(x, u, minus(z, s(x)), u)
The graph contains the following edges 1 > 1, 4 >= 2, 4 >= 4


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

The TRS R consists of the following rules:

   app(perfectp, 0) -> false
   app(perfectp, app(s, x)) -> app(app(app(app(f, x), app(s, 0)), app(s, x)), app(s, x))
   app(app(app(app(f, 0), y), 0), u) -> true
   app(app(app(app(f, 0), y), app(s, z)), u) -> false
   app(app(app(app(f, app(s, x)), 0), z), u) -> app(app(app(app(f, x), u), app(app(minus, z), app(s, x))), u)
   app(app(app(app(f, app(s, x)), app(s, y)), z), u) -> app(app(app(if, app(app(le, x), y)), app(app(app(app(f, app(s, x)), app(app(minus, y), x)), z), u)), app(app(app(app(f, x), u), z), u))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(perfectp, 0)
   app(perfectp, app(s, x0))
   app(app(app(app(f, 0), x0), 0), x1)
   app(app(app(app(f, 0), x0), app(s, x1)), x2)
   app(app(app(app(f, app(s, x0)), 0), x1), x2)
   app(app(app(app(f, app(s, x0)), app(s, x1)), x2), x3)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(18)
YES
