NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/fPtTo.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) NonTerminationLoopProof [COMPLETE, 0 ms]
(4) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(g(X), Y) -> f(X, n__f(g(X), activate(Y)))
   f(X1, X2) -> n__f(X1, X2)
   activate(n__f(X1, X2)) -> f(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(g(X), Y) -> F(X, n__f(g(X), activate(Y)))
   F(g(X), Y) -> ACTIVATE(Y)
   ACTIVATE(n__f(X1, X2)) -> F(X1, X2)

The TRS R consists of the following rules:

   f(g(X), Y) -> f(X, n__f(g(X), activate(Y)))
   f(X1, X2) -> n__f(X1, X2)
   activate(n__f(X1, X2)) -> f(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(g(X'), n__f(g(X), X2)) evaluates to  t =F(X, n__f(g(X), activate(X2)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [X' / X'', X2 / activate(X2)]
* Semiunifier: [X / g(X'')]

--------------------------------------------------------------------------------
Rewriting sequence

F(g(X'), n__f(g(g(X'')), X2)) -> ACTIVATE(n__f(g(g(X'')), X2))
with rule F(g(X'''), Y) -> ACTIVATE(Y) at position [] and matcher [X''' / X', Y / n__f(g(g(X'')), X2)]

ACTIVATE(n__f(g(g(X'')), X2)) -> F(g(g(X'')), X2)
with rule ACTIVATE(n__f(X1, X2')) -> F(X1, X2') at position [] and matcher [X1 / g(g(X'')), X2' / X2]

F(g(g(X'')), X2) -> F(g(X''), n__f(g(g(X'')), activate(X2)))
with rule F(g(X), Y) -> F(X, n__f(g(X), activate(Y)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(4)
NO
