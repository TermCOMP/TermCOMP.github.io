YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hbqn3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 13 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 46 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 13 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) QDPOrderProof [EQUIVALENT, 18 ms]
        (16) QDP
        (17) DependencyGraphProof [EQUIVALENT, 0 ms]
        (18) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(tt, V2) -> U12^1(isNat(activate(V2)))
   U11^1(tt, V2) -> ISNAT(activate(V2))
   U11^1(tt, V2) -> ACTIVATE(V2)
   U31^1(tt, N) -> ACTIVATE(N)
   U41^1(tt, M, N) -> U42^1(isNat(activate(N)), activate(M), activate(N))
   U41^1(tt, M, N) -> ISNAT(activate(N))
   U41^1(tt, M, N) -> ACTIVATE(N)
   U41^1(tt, M, N) -> ACTIVATE(M)
   U42^1(tt, M, N) -> S(plus(activate(N), activate(M)))
   U42^1(tt, M, N) -> PLUS(activate(N), activate(M))
   U42^1(tt, M, N) -> ACTIVATE(N)
   U42^1(tt, M, N) -> ACTIVATE(M)
   ISNAT(n__plus(V1, V2)) -> U11^1(isNat(activate(V1)), activate(V2))
   ISNAT(n__plus(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__plus(V1, V2)) -> ACTIVATE(V1)
   ISNAT(n__plus(V1, V2)) -> ACTIVATE(V2)
   ISNAT(n__s(V1)) -> U21^1(isNat(activate(V1)))
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   PLUS(N, 0) -> U31^1(isNat(N), N)
   PLUS(N, 0) -> ISNAT(N)
   PLUS(N, s(M)) -> U41^1(isNat(M), M, N)
   PLUS(N, s(M)) -> ISNAT(M)
   ACTIVATE(n__0) -> 0^1
   ACTIVATE(n__plus(X1, X2)) -> PLUS(X1, X2)
   ACTIVATE(n__s(X)) -> S(X)

The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(tt, V2) -> ISNAT(activate(V2))
   ISNAT(n__plus(V1, V2)) -> U11^1(isNat(activate(V1)), activate(V2))
   U11^1(tt, V2) -> ACTIVATE(V2)
   ACTIVATE(n__plus(X1, X2)) -> PLUS(X1, X2)
   PLUS(N, 0) -> U31^1(isNat(N), N)
   U31^1(tt, N) -> ACTIVATE(N)
   PLUS(N, 0) -> ISNAT(N)
   ISNAT(n__plus(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__plus(V1, V2)) -> ACTIVATE(V1)
   ISNAT(n__plus(V1, V2)) -> ACTIVATE(V2)
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   PLUS(N, s(M)) -> U41^1(isNat(M), M, N)
   U41^1(tt, M, N) -> U42^1(isNat(activate(N)), activate(M), activate(N))
   U42^1(tt, M, N) -> PLUS(activate(N), activate(M))
   PLUS(N, s(M)) -> ISNAT(M)
   U42^1(tt, M, N) -> ACTIVATE(N)
   U42^1(tt, M, N) -> ACTIVATE(M)
   U41^1(tt, M, N) -> ISNAT(activate(N))
   U41^1(tt, M, N) -> ACTIVATE(N)
   U41^1(tt, M, N) -> ACTIVATE(M)

The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNAT(n__plus(V1, V2)) -> U11^1(isNat(activate(V1)), activate(V2))
   ACTIVATE(n__plus(X1, X2)) -> PLUS(X1, X2)
   U31^1(tt, N) -> ACTIVATE(N)
   PLUS(N, 0) -> ISNAT(N)
   ISNAT(n__plus(V1, V2)) -> ISNAT(activate(V1))
   ISNAT(n__plus(V1, V2)) -> ACTIVATE(V1)
   ISNAT(n__plus(V1, V2)) -> ACTIVATE(V2)
   PLUS(N, s(M)) -> ISNAT(M)
   U42^1(tt, M, N) -> ACTIVATE(N)
   U42^1(tt, M, N) -> ACTIVATE(M)
   U41^1(tt, M, N) -> ISNAT(activate(N))
   U41^1(tt, M, N) -> ACTIVATE(N)
   U41^1(tt, M, N) -> ACTIVATE(M)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNAT_1(x_1) ) = 2x_1 + 1
POL( PLUS_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( U11^1_2(x_1, x_2) ) = 2x_2 + 1
POL( U31^1_2(x_1, x_2) ) = 2x_2 + 2
POL( U41^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U42^1_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( activate_1(x_1) ) = x_1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__plus_2(x_1, x_2) ) = x_1 + 2x_2 + 1
POL( plus_2(x_1, x_2) ) = x_1 + 2x_2 + 1
POL( U31_2(x_1, x_2) ) = x_2
POL( isNat_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( n__s_1(x_1) ) = x_1
POL( s_1(x_1) ) = x_1
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( U12_1(x_1) ) = max{0, -2}
POL( U21_1(x_1) ) = 0
POL( U41_3(x_1, ..., x_3) ) = 2x_2 + x_3 + 1
POL( U42_3(x_1, ..., x_3) ) = 2x_2 + x_3 + 1
POL( ACTIVATE_1(x_1) ) = 2x_1 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   plus(N, 0) -> U31(isNat(N), N)
   U31(tt, N) -> activate(N)
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(X1, X2) -> n__plus(X1, X2)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   U21(tt) -> tt
   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   s(X) -> n__s(X)
   0 -> n__0


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(tt, V2) -> ISNAT(activate(V2))
   U11^1(tt, V2) -> ACTIVATE(V2)
   PLUS(N, 0) -> U31^1(isNat(N), N)
   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
   ISNAT(n__s(V1)) -> ACTIVATE(V1)
   PLUS(N, s(M)) -> U41^1(isNat(M), M, N)
   U41^1(tt, M, N) -> U42^1(isNat(activate(N)), activate(M), activate(N))
   U42^1(tt, M, N) -> PLUS(activate(N), activate(M))

The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT(n__s(V1)) -> ISNAT(activate(V1))

The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   ISNAT(n__s(V1)) -> ISNAT(activate(V1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ISNAT_1(x_1) ) = max{0, 2x_1 - 2}
POL( activate_1(x_1) ) = x_1
POL( n__0 ) = 0
POL( 0 ) = 0
POL( n__plus_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( plus_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U31_2(x_1, x_2) ) = x_2
POL( isNat_1(x_1) ) = max{0, -2}
POL( tt ) = 0
POL( n__s_1(x_1) ) = x_1 + 2
POL( s_1(x_1) ) = x_1 + 2
POL( U11_2(x_1, x_2) ) = max{0, -2}
POL( U12_1(x_1) ) = max{0, -2}
POL( U21_1(x_1) ) = 0
POL( U41_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U42_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   plus(N, 0) -> U31(isNat(N), N)
   U31(tt, N) -> activate(N)
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   plus(X1, X2) -> n__plus(X1, X2)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   U21(tt) -> tt
   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   s(X) -> n__s(X)
   0 -> n__0


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(N, s(M)) -> U41^1(isNat(M), M, N)
   U41^1(tt, M, N) -> U42^1(isNat(activate(N)), activate(M), activate(N))
   U42^1(tt, M, N) -> PLUS(activate(N), activate(M))

The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PLUS(N, s(M)) -> U41^1(isNat(M), M, N)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U41^1_3(x_1, ..., x_3) ) = x_2
POL( U42^1_3(x_1, ..., x_3) ) = max{0, x_1 + x_2 - 2}
POL( PLUS_2(x_1, x_2) ) = max{0, x_2 - 1}
POL( U11_2(x_1, x_2) ) = max{0, 2x_1 - 2}
POL( U12_1(x_1) ) = x_1
POL( U21_1(x_1) ) = 2
POL( U31_2(x_1, x_2) ) = x_2 + 1
POL( U41_3(x_1, ..., x_3) ) = 2x_1 + x_2 + 2x_3
POL( U42_3(x_1, ..., x_3) ) = 2x_1 + x_2 + 2x_3
POL( isNat_1(x_1) ) = 2
POL( n__0 ) = 0
POL( tt ) = 2
POL( n__plus_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( activate_1(x_1) ) = x_1
POL( n__s_1(x_1) ) = x_1 + 2
POL( 0 ) = 0
POL( plus_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( s_1(x_1) ) = x_1 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   plus(N, 0) -> U31(isNat(N), N)
   U31(tt, N) -> activate(N)
   activate(n__s(X)) -> s(X)
   activate(X) -> X
   plus(X1, X2) -> n__plus(X1, X2)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   U21(tt) -> tt
   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   s(X) -> n__s(X)
   0 -> n__0


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U41^1(tt, M, N) -> U42^1(isNat(activate(N)), activate(M), activate(N))
   U42^1(tt, M, N) -> PLUS(activate(N), activate(M))

The TRS R consists of the following rules:

   U11(tt, V2) -> U12(isNat(activate(V2)))
   U12(tt) -> tt
   U21(tt) -> tt
   U31(tt, N) -> activate(N)
   U41(tt, M, N) -> U42(isNat(activate(N)), activate(M), activate(N))
   U42(tt, M, N) -> s(plus(activate(N), activate(M)))
   isNat(n__0) -> tt
   isNat(n__plus(V1, V2)) -> U11(isNat(activate(V1)), activate(V2))
   isNat(n__s(V1)) -> U21(isNat(activate(V1)))
   plus(N, 0) -> U31(isNat(N), N)
   plus(N, s(M)) -> U41(isNat(M), M, N)
   0 -> n__0
   plus(X1, X2) -> n__plus(X1, X2)
   s(X) -> n__s(X)
   activate(n__0) -> 0
   activate(n__plus(X1, X2)) -> plus(X1, X2)
   activate(n__s(X)) -> s(X)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(18)
TRUE
