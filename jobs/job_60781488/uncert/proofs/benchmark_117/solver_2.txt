YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/RJa0d.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 1 ms]
        (7) QDP
        (8) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) QDPApplicativeOrderProof [EQUIVALENT, 9 ms]
        (14) QDP
        (15) QDPOrderProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 1 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, x), app(app(+, y), z)) -> APP(app(+, app(app(*, x), y)), app(app(*, x), z))
   APP(app(*, x), app(app(+, y), z)) -> APP(+, app(app(*, x), y))
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), y)
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), z)
   APP(app(*, app(app(+, y), z)), x) -> APP(app(+, app(app(*, x), y)), app(app(*, x), z))
   APP(app(*, app(app(+, y), z)), x) -> APP(+, app(app(*, x), y))
   APP(app(*, app(app(+, y), z)), x) -> APP(app(*, x), y)
   APP(app(*, app(app(+, y), z)), x) -> APP(*, x)
   APP(app(*, app(app(+, y), z)), x) -> APP(app(*, x), z)
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, x), app(app(*, y), z))
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, y), z)
   APP(app(*, app(app(*, x), y)), z) -> APP(*, y)
   APP(app(+, app(app(+, x), y)), z) -> APP(app(+, x), app(app(+, y), z))
   APP(app(+, app(app(+, x), y)), z) -> APP(app(+, y), z)
   APP(app(+, app(app(+, x), y)), z) -> APP(+, y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 17 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(+, app(app(+, x), y)), z) -> APP(app(+, y), z)
   APP(app(+, app(app(+, x), y)), z) -> APP(app(+, x), app(app(+, y), z))

The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(+, app(app(+, x), y)), z) -> APP(app(+, y), z)
   APP(app(+, app(app(+, x), y)), z) -> APP(app(+, x), app(app(+, y), z))

The TRS R consists of the following rules:

   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesReductionPairsProof (EQUIVALENT)
First, we A-transformed [FROCOS05] the QDP-Problem.
Then we obtain the following A-transformed DP problem.

The pairs P are: 

   +1(+(x, y), z) -> +1(y, z)
   +1(+(x, y), z) -> +1(x, +(y, z))

and the Q and R are:
Q restricted rewrite system:
The TRS R consists of the following rules:

   +(+(x, y), z) -> +(x, +(y, z))

Q is empty.

By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   +1(+(x, y), z) -> +1(y, z)
   +1(+(x, y), z) -> +1(x, +(y, z))
The following rules are removed from R:

   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(+(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(+1(x_1, x_2)) = 2*x_1 + x_2


----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), z)
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), y)
   APP(app(*, app(app(+, y), z)), x) -> APP(app(*, x), y)
   APP(app(*, app(app(+, y), z)), x) -> APP(app(*, x), z)
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, x), app(app(*, y), z))
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, y), z)

The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPApplicativeOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04].Here, we combined the reduction pair processor [LPAR04,JAR06] with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   (*1(x, +(y, z)),*1(x, z))
   (*1(x, +(y, z)),*1(x, y))
   (*1(+(y, z), x),*1(x, y))
   (*1(+(y, z), x),*1(x, z))
   (*1(*(x, y), z),*1(x, *(y, z)))
   (*1(*(x, y), z),*1(y, z))

 The a-transformed usable rules are 

   *(*(x, y), z) -> *(x, *(y, z))
   *(+(y, z), x) -> +(*(x, y), *(x, z))
   *(x, +(y, z)) -> +(*(x, y), *(x, z))
   +(+(x, y), z) -> +(x, +(y, z))




The following pairs can be oriented strictly and are deleted.

   APP(app(*, app(app(+, y), z)), x) -> APP(app(*, x), y)
   APP(app(*, app(app(+, y), z)), x) -> APP(app(*, x), z)
The remaining pairs can at least be oriented weakly.

   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), z)
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), y)
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, x), app(app(*, y), z))
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, y), z)
Used ordering:  Polynomial interpretation [POLO]:

   POL(*(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(*1(x_1, x_2)) = x_1 + x_1*x_2
   POL(+(x_1, x_2)) = 1 + x_1 + x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), z)
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), y)
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, x), app(app(*, y), z))
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, y), z)

The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06]. Here, we combined the reduction pair processor with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   *1(x, +(y, z)) -> *1(x, z)
   *1(x, +(y, z)) -> *1(x, y)
   *1(*(x, y), z) -> *1(x, *(y, z))
   *1(*(x, y), z) -> *1(y, z)

 The a-transformed usable rules are 

   *(x, +(y, z)) -> +(*(x, y), *(x, z))
   *(+(y, z), x) -> +(*(x, y), *(x, z))
   *(*(x, y), z) -> *(x, *(y, z))
   +(+(x, y), z) -> +(x, +(y, z))




The following pairs can be oriented strictly and are deleted.

   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, x), app(app(*, y), z))
   APP(app(*, app(app(*, x), y)), z) -> APP(app(*, y), z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
*1(x1, x2)  =  x1

*(x1, x2)  =  *(x1, x2)

+(x1, x2)  =  +


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   +=1
   *_2=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), z)
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), y)

The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), z)
   APP(app(*, x), app(app(+, y), z)) -> APP(app(*, x), y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *(x, +(y, z)) -> *(x, z)
   *(x, +(y, z)) -> *(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**(x, +(y, z)) -> *(x, z)
The graph contains the following edges 1 >= 1, 2 > 2


**(x, +(y, z)) -> *(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(*, x), app(app(+, y), z)) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(+, y), z)), x) -> app(app(+, app(app(*, x), y)), app(app(*, x), z))
   app(app(*, app(app(*, x), y)), z) -> app(app(*, x), app(app(*, y), z))
   app(app(+, app(app(+, x), y)), z) -> app(app(+, x), app(app(+, y), z))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(27)
YES
