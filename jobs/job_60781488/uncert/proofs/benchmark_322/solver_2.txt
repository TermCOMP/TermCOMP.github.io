NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/xsaKl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QReductionProof [EQUIVALENT, 0 ms]
(10) QDP
(11) TransformationProof [EQUIVALENT, 0 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) QDP
(15) UsableRulesProof [EQUIVALENT, 0 ms]
(16) QDP
(17) QReductionProof [EQUIVALENT, 0 ms]
(18) QDP
(19) TransformationProof [EQUIVALENT, 0 ms]
(20) QDP
(21) UsableRulesProof [EQUIVALENT, 0 ms]
(22) QDP
(23) QReductionProof [EQUIVALENT, 0 ms]
(24) QDP
(25) NonTerminationLoopProof [COMPLETE, 0 ms]
(26) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   hd(cons(x, l)) -> x
   tl(cons(x, l)) -> cons(x, l)
   append(l1, l2) -> ifappend(l1, l2, is_empty(l1))
   ifappend(l1, l2, true) -> l2
   ifappend(l1, l2, false) -> cons(hd(l1), append(tl(l1), l2))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   hd(cons(x, l)) -> x
   tl(cons(x, l)) -> cons(x, l)
   append(l1, l2) -> ifappend(l1, l2, is_empty(l1))
   ifappend(l1, l2, true) -> l2
   ifappend(l1, l2, false) -> cons(hd(l1), append(tl(l1), l2))

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   hd(cons(x0, x1))
   tl(cons(x0, x1))
   append(x0, x1)
   ifappend(x0, x1, true)
   ifappend(x0, x1, false)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(l1, l2) -> IFAPPEND(l1, l2, is_empty(l1))
   APPEND(l1, l2) -> IS_EMPTY(l1)
   IFAPPEND(l1, l2, false) -> HD(l1)
   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)
   IFAPPEND(l1, l2, false) -> TL(l1)

The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   hd(cons(x, l)) -> x
   tl(cons(x, l)) -> cons(x, l)
   append(l1, l2) -> ifappend(l1, l2, is_empty(l1))
   ifappend(l1, l2, true) -> l2
   ifappend(l1, l2, false) -> cons(hd(l1), append(tl(l1), l2))

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   hd(cons(x0, x1))
   tl(cons(x0, x1))
   append(x0, x1)
   ifappend(x0, x1, true)
   ifappend(x0, x1, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)
   APPEND(l1, l2) -> IFAPPEND(l1, l2, is_empty(l1))

The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   hd(cons(x, l)) -> x
   tl(cons(x, l)) -> cons(x, l)
   append(l1, l2) -> ifappend(l1, l2, is_empty(l1))
   ifappend(l1, l2, true) -> l2
   ifappend(l1, l2, false) -> cons(hd(l1), append(tl(l1), l2))

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   hd(cons(x0, x1))
   tl(cons(x0, x1))
   append(x0, x1)
   ifappend(x0, x1, true)
   ifappend(x0, x1, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)
   APPEND(l1, l2) -> IFAPPEND(l1, l2, is_empty(l1))

The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   hd(cons(x0, x1))
   tl(cons(x0, x1))
   append(x0, x1)
   ifappend(x0, x1, true)
   ifappend(x0, x1, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   hd(cons(x0, x1))
   append(x0, x1)
   ifappend(x0, x1, true)
   ifappend(x0, x1, false)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)
   APPEND(l1, l2) -> IFAPPEND(l1, l2, is_empty(l1))

The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule APPEND(l1, l2) -> IFAPPEND(l1, l2, is_empty(l1)) at position [2] we obtained the following new rules [LPAR04]:

   (APPEND(nil, y1) -> IFAPPEND(nil, y1, true),APPEND(nil, y1) -> IFAPPEND(nil, y1, true))
   (APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false),APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)
   APPEND(nil, y1) -> IFAPPEND(nil, y1, true)
   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)

The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)
   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)

The TRS R consists of the following rules:

   is_empty(nil) -> true
   is_empty(cons(x, l)) -> false
   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)
   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)

The TRS R consists of the following rules:

   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   is_empty(nil)
   is_empty(cons(x0, x1))
   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_empty(nil)
   is_empty(cons(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)
   IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2)

The TRS R consists of the following rules:

   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IFAPPEND(l1, l2, false) -> APPEND(tl(l1), l2) at position [0] we obtained the following new rules [LPAR04]:

   (IFAPPEND(cons(x0, x1), y1, false) -> APPEND(cons(x0, x1), y1),IFAPPEND(cons(x0, x1), y1, false) -> APPEND(cons(x0, x1), y1))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)
   IFAPPEND(cons(x0, x1), y1, false) -> APPEND(cons(x0, x1), y1)

The TRS R consists of the following rules:

   tl(cons(x, l)) -> cons(x, l)

The set Q consists of the following terms:

   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)
   IFAPPEND(cons(x0, x1), y1, false) -> APPEND(cons(x0, x1), y1)

R is empty.
The set Q consists of the following terms:

   tl(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   tl(cons(x0, x1))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)
   IFAPPEND(cons(x0, x1), y1, false) -> APPEND(cons(x0, x1), y1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = IFAPPEND(cons(x0', x1'), y1', false) evaluates to  t =IFAPPEND(cons(x0', x1'), y1', false)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

IFAPPEND(cons(x0', x1'), y1', false) -> APPEND(cons(x0', x1'), y1')
with rule IFAPPEND(cons(x0'', x1''), y1'', false) -> APPEND(cons(x0'', x1''), y1'') at position [] and matcher [x0'' / x0', x1'' / x1', y1'' / y1']

APPEND(cons(x0', x1'), y1') -> IFAPPEND(cons(x0', x1'), y1', false)
with rule APPEND(cons(x0, x1), y1) -> IFAPPEND(cons(x0, x1), y1, false)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(26)
NO
