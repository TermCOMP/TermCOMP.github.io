YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eaRDY.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSToCSRProof [EQUIVALENT, 0 ms]
(2) CSR
(3) CSRInnermostProof [EQUIVALENT, 0 ms]
(4) CSR
(5) CSDependencyPairsProof [EQUIVALENT, 0 ms]
(6) QCSDP
(7) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QCSDP
        (10) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (11) QCSDP
        (12) PIsEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QCSDP
        (15) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (16) QCSDP
        (17) PIsEmptyProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(natsFrom(N)) -> mark(cons(N, natsFrom(s(N))))
   active(fst(pair(XS, YS))) -> mark(XS)
   active(snd(pair(XS, YS))) -> mark(YS)
   active(splitAt(0, XS)) -> mark(pair(nil, XS))
   active(splitAt(s(N), cons(X, XS))) -> mark(u(splitAt(N, XS), N, X, XS))
   active(u(pair(YS, ZS), N, X, XS)) -> mark(pair(cons(X, YS), ZS))
   active(head(cons(N, XS))) -> mark(N)
   active(tail(cons(N, XS))) -> mark(XS)
   active(sel(N, XS)) -> mark(head(afterNth(N, XS)))
   active(take(N, XS)) -> mark(fst(splitAt(N, XS)))
   active(afterNth(N, XS)) -> mark(snd(splitAt(N, XS)))
   active(natsFrom(X)) -> natsFrom(active(X))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(s(X)) -> s(active(X))
   active(fst(X)) -> fst(active(X))
   active(pair(X1, X2)) -> pair(active(X1), X2)
   active(pair(X1, X2)) -> pair(X1, active(X2))
   active(snd(X)) -> snd(active(X))
   active(splitAt(X1, X2)) -> splitAt(active(X1), X2)
   active(splitAt(X1, X2)) -> splitAt(X1, active(X2))
   active(u(X1, X2, X3, X4)) -> u(active(X1), X2, X3, X4)
   active(head(X)) -> head(active(X))
   active(tail(X)) -> tail(active(X))
   active(sel(X1, X2)) -> sel(active(X1), X2)
   active(sel(X1, X2)) -> sel(X1, active(X2))
   active(afterNth(X1, X2)) -> afterNth(active(X1), X2)
   active(afterNth(X1, X2)) -> afterNth(X1, active(X2))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   natsFrom(mark(X)) -> mark(natsFrom(X))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   s(mark(X)) -> mark(s(X))
   fst(mark(X)) -> mark(fst(X))
   pair(mark(X1), X2) -> mark(pair(X1, X2))
   pair(X1, mark(X2)) -> mark(pair(X1, X2))
   snd(mark(X)) -> mark(snd(X))
   splitAt(mark(X1), X2) -> mark(splitAt(X1, X2))
   splitAt(X1, mark(X2)) -> mark(splitAt(X1, X2))
   u(mark(X1), X2, X3, X4) -> mark(u(X1, X2, X3, X4))
   head(mark(X)) -> mark(head(X))
   tail(mark(X)) -> mark(tail(X))
   sel(mark(X1), X2) -> mark(sel(X1, X2))
   sel(X1, mark(X2)) -> mark(sel(X1, X2))
   afterNth(mark(X1), X2) -> mark(afterNth(X1, X2))
   afterNth(X1, mark(X2)) -> mark(afterNth(X1, X2))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   proper(natsFrom(X)) -> natsFrom(proper(X))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(s(X)) -> s(proper(X))
   proper(fst(X)) -> fst(proper(X))
   proper(pair(X1, X2)) -> pair(proper(X1), proper(X2))
   proper(snd(X)) -> snd(proper(X))
   proper(splitAt(X1, X2)) -> splitAt(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(nil) -> ok(nil)
   proper(u(X1, X2, X3, X4)) -> u(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(head(X)) -> head(proper(X))
   proper(tail(X)) -> tail(proper(X))
   proper(sel(X1, X2)) -> sel(proper(X1), proper(X2))
   proper(afterNth(X1, X2)) -> afterNth(proper(X1), proper(X2))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   natsFrom(ok(X)) -> ok(natsFrom(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   s(ok(X)) -> ok(s(X))
   fst(ok(X)) -> ok(fst(X))
   pair(ok(X1), ok(X2)) -> ok(pair(X1, X2))
   snd(ok(X)) -> ok(snd(X))
   splitAt(ok(X1), ok(X2)) -> ok(splitAt(X1, X2))
   u(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(u(X1, X2, X3, X4))
   head(ok(X)) -> ok(head(X))
   tail(ok(X)) -> ok(tail(X))
   sel(ok(X1), ok(X2)) -> ok(sel(X1, X2))
   afterNth(ok(X1), ok(X2)) -> ok(afterNth(X1, X2))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.

----------------------------------------

(1) QTRSToCSRProof (EQUIVALENT)
The following Q TRS is given: Q restricted rewrite system:
The TRS R consists of the following rules:

   active(natsFrom(N)) -> mark(cons(N, natsFrom(s(N))))
   active(fst(pair(XS, YS))) -> mark(XS)
   active(snd(pair(XS, YS))) -> mark(YS)
   active(splitAt(0, XS)) -> mark(pair(nil, XS))
   active(splitAt(s(N), cons(X, XS))) -> mark(u(splitAt(N, XS), N, X, XS))
   active(u(pair(YS, ZS), N, X, XS)) -> mark(pair(cons(X, YS), ZS))
   active(head(cons(N, XS))) -> mark(N)
   active(tail(cons(N, XS))) -> mark(XS)
   active(sel(N, XS)) -> mark(head(afterNth(N, XS)))
   active(take(N, XS)) -> mark(fst(splitAt(N, XS)))
   active(afterNth(N, XS)) -> mark(snd(splitAt(N, XS)))
   active(natsFrom(X)) -> natsFrom(active(X))
   active(cons(X1, X2)) -> cons(active(X1), X2)
   active(s(X)) -> s(active(X))
   active(fst(X)) -> fst(active(X))
   active(pair(X1, X2)) -> pair(active(X1), X2)
   active(pair(X1, X2)) -> pair(X1, active(X2))
   active(snd(X)) -> snd(active(X))
   active(splitAt(X1, X2)) -> splitAt(active(X1), X2)
   active(splitAt(X1, X2)) -> splitAt(X1, active(X2))
   active(u(X1, X2, X3, X4)) -> u(active(X1), X2, X3, X4)
   active(head(X)) -> head(active(X))
   active(tail(X)) -> tail(active(X))
   active(sel(X1, X2)) -> sel(active(X1), X2)
   active(sel(X1, X2)) -> sel(X1, active(X2))
   active(afterNth(X1, X2)) -> afterNth(active(X1), X2)
   active(afterNth(X1, X2)) -> afterNth(X1, active(X2))
   active(take(X1, X2)) -> take(active(X1), X2)
   active(take(X1, X2)) -> take(X1, active(X2))
   natsFrom(mark(X)) -> mark(natsFrom(X))
   cons(mark(X1), X2) -> mark(cons(X1, X2))
   s(mark(X)) -> mark(s(X))
   fst(mark(X)) -> mark(fst(X))
   pair(mark(X1), X2) -> mark(pair(X1, X2))
   pair(X1, mark(X2)) -> mark(pair(X1, X2))
   snd(mark(X)) -> mark(snd(X))
   splitAt(mark(X1), X2) -> mark(splitAt(X1, X2))
   splitAt(X1, mark(X2)) -> mark(splitAt(X1, X2))
   u(mark(X1), X2, X3, X4) -> mark(u(X1, X2, X3, X4))
   head(mark(X)) -> mark(head(X))
   tail(mark(X)) -> mark(tail(X))
   sel(mark(X1), X2) -> mark(sel(X1, X2))
   sel(X1, mark(X2)) -> mark(sel(X1, X2))
   afterNth(mark(X1), X2) -> mark(afterNth(X1, X2))
   afterNth(X1, mark(X2)) -> mark(afterNth(X1, X2))
   take(mark(X1), X2) -> mark(take(X1, X2))
   take(X1, mark(X2)) -> mark(take(X1, X2))
   proper(natsFrom(X)) -> natsFrom(proper(X))
   proper(cons(X1, X2)) -> cons(proper(X1), proper(X2))
   proper(s(X)) -> s(proper(X))
   proper(fst(X)) -> fst(proper(X))
   proper(pair(X1, X2)) -> pair(proper(X1), proper(X2))
   proper(snd(X)) -> snd(proper(X))
   proper(splitAt(X1, X2)) -> splitAt(proper(X1), proper(X2))
   proper(0) -> ok(0)
   proper(nil) -> ok(nil)
   proper(u(X1, X2, X3, X4)) -> u(proper(X1), proper(X2), proper(X3), proper(X4))
   proper(head(X)) -> head(proper(X))
   proper(tail(X)) -> tail(proper(X))
   proper(sel(X1, X2)) -> sel(proper(X1), proper(X2))
   proper(afterNth(X1, X2)) -> afterNth(proper(X1), proper(X2))
   proper(take(X1, X2)) -> take(proper(X1), proper(X2))
   natsFrom(ok(X)) -> ok(natsFrom(X))
   cons(ok(X1), ok(X2)) -> ok(cons(X1, X2))
   s(ok(X)) -> ok(s(X))
   fst(ok(X)) -> ok(fst(X))
   pair(ok(X1), ok(X2)) -> ok(pair(X1, X2))
   snd(ok(X)) -> ok(snd(X))
   splitAt(ok(X1), ok(X2)) -> ok(splitAt(X1, X2))
   u(ok(X1), ok(X2), ok(X3), ok(X4)) -> ok(u(X1, X2, X3, X4))
   head(ok(X)) -> ok(head(X))
   tail(ok(X)) -> ok(tail(X))
   sel(ok(X1), ok(X2)) -> ok(sel(X1, X2))
   afterNth(ok(X1), ok(X2)) -> ok(afterNth(X1, X2))
   take(ok(X1), ok(X2)) -> ok(take(X1, X2))
   top(mark(X)) -> top(proper(X))
   top(ok(X)) -> top(active(X))

Q is empty.
Special symbols used for the transformation (see [GM04]):
top: top_1, active: active_1, mark: mark_1, ok: ok_1, proper: proper_1
The replacement map contains the following entries:

natsFrom: {1}
cons: {1}
s: {1}
fst: {1}
pair: {1, 2}
snd: {1}
splitAt: {1, 2}
0: empty set
nil: empty set
u: {1}
head: {1}
tail: {1}
sel: {1, 2}
afterNth: {1, 2}
take: {1, 2}
The QTRS contained all rules created by the complete Giesl-Middeldorp transformation. Therefore, the inverse transformation is complete (and sound).
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The replacement map contains the following entries:

natsFrom: {1}
cons: {1}
s: {1}
fst: {1}
pair: {1, 2}
snd: {1}
splitAt: {1, 2}
0: empty set
nil: empty set
u: {1}
head: {1}
tail: {1}
sel: {1, 2}
afterNth: {1, 2}
take: {1, 2}

----------------------------------------

(3) CSRInnermostProof (EQUIVALENT)
The CSR is orthogonal. By [CS_Inn] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The replacement map contains the following entries:

natsFrom: {1}
cons: {1}
s: {1}
fst: {1}
pair: {1, 2}
snd: {1}
splitAt: {1, 2}
0: empty set
nil: empty set
u: {1}
head: {1}
tail: {1}
sel: {1, 2}
afterNth: {1, 2}
take: {1, 2}


Innermost Strategy.

----------------------------------------

(5) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(6)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {natsFrom_1, s_1, fst_1, pair_2, snd_1, splitAt_2, head_1, tail_1, sel_2, afterNth_2, take_2, SPLITAT_2, HEAD_1, SEL_2, AFTERNTH_2, FST_1, TAKE_2, SND_1, TAIL_1, NATSFROM_1} are replacing on all positions.
For all symbols f in {cons_2, u_4, U_4} we have mu(f) = {1}.
The symbols in {U'_1} are not replacing on any position.

The ordinary context-sensitive dependency pairs DP_o are:
   SPLITAT(s(N), cons(X, XS)) -> U(splitAt(N, XS), N, X, XS)
   SPLITAT(s(N), cons(X, XS)) -> SPLITAT(N, XS)
   SEL(N, XS) -> HEAD(afterNth(N, XS))
   SEL(N, XS) -> AFTERNTH(N, XS)
   TAKE(N, XS) -> FST(splitAt(N, XS))
   TAKE(N, XS) -> SPLITAT(N, XS)
   AFTERNTH(N, XS) -> SND(splitAt(N, XS))
   AFTERNTH(N, XS) -> SPLITAT(N, XS)

The collapsing dependency pairs are DP_c:
   SPLITAT(s(N), cons(X, XS)) -> XS
   U(pair(YS, ZS), N, X, XS) -> X
   TAIL(cons(N, XS)) -> XS


The hidden terms of R are:

   natsFrom(s(x0))

Every hiding context is built from:
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@63287389
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@10dacc1f

Hence, the new unhiding pairs DP_u are :
   SPLITAT(s(N), cons(X, XS)) -> U'(XS)
   U(pair(YS, ZS), N, X, XS) -> U'(X)
   TAIL(cons(N, XS)) -> U'(XS)
   U'(s(x_0)) -> U'(x_0)
   U'(natsFrom(x_0)) -> U'(x_0)
   U'(natsFrom(s(x0))) -> NATSFROM(s(x0))

The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The set Q consists of the following terms:

   natsFrom(x0)
   fst(pair(x0, x1))
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   u(pair(x0, x1), x2, x3, x4)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   sel(x0, x1)
   take(x0, x1)
   afterNth(x0, x1)


----------------------------------------

(7) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 2 SCCs with 9 less nodes.

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {natsFrom_1, s_1, fst_1, pair_2, snd_1, splitAt_2, head_1, tail_1, sel_2, afterNth_2, take_2} are replacing on all positions.
For all symbols f in {cons_2, u_4} we have mu(f) = {1}.
The symbols in {U'_1} are not replacing on any position.

The TRS P consists of the following rules:

   U'(s(x_0)) -> U'(x_0)
   U'(natsFrom(x_0)) -> U'(x_0)

The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The set Q consists of the following terms:

   natsFrom(x0)
   fst(pair(x0, x1))
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   u(pair(x0, x1), x2, x3, x4)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   sel(x0, x1)
   take(x0, x1)
   afterNth(x0, x1)


----------------------------------------

(10) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   U'(s(x_0)) -> U'(x_0)
   U'(natsFrom(x_0)) -> U'(x_0)
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Combined order from the following AFS and order.
U'(x1)  =  x1


Subterm Order

----------------------------------------

(11)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {natsFrom_1, s_1, fst_1, pair_2, snd_1, splitAt_2, head_1, tail_1, sel_2, afterNth_2, take_2} are replacing on all positions.
For all symbols f in {cons_2, u_4} we have mu(f) = {1}.

The TRS P consists of the following rules:
none

The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The set Q consists of the following terms:

   natsFrom(x0)
   fst(pair(x0, x1))
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   u(pair(x0, x1), x2, x3, x4)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   sel(x0, x1)
   take(x0, x1)
   afterNth(x0, x1)


----------------------------------------

(12) PIsEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R,mu)-chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {natsFrom_1, s_1, fst_1, pair_2, snd_1, splitAt_2, head_1, tail_1, sel_2, afterNth_2, take_2, SPLITAT_2} are replacing on all positions.
For all symbols f in {cons_2, u_4} we have mu(f) = {1}.

The TRS P consists of the following rules:

   SPLITAT(s(N), cons(X, XS)) -> SPLITAT(N, XS)

The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The set Q consists of the following terms:

   natsFrom(x0)
   fst(pair(x0, x1))
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   u(pair(x0, x1), x2, x3, x4)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   sel(x0, x1)
   take(x0, x1)
   afterNth(x0, x1)


----------------------------------------

(15) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   SPLITAT(s(N), cons(X, XS)) -> SPLITAT(N, XS)
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Combined order from the following AFS and order.
SPLITAT(x1, x2)  =  x1


Subterm Order

----------------------------------------

(16)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {natsFrom_1, s_1, fst_1, pair_2, snd_1, splitAt_2, head_1, tail_1, sel_2, afterNth_2, take_2} are replacing on all positions.
For all symbols f in {cons_2, u_4} we have mu(f) = {1}.

The TRS P consists of the following rules:
none

The TRS R consists of the following rules:

   natsFrom(N) -> cons(N, natsFrom(s(N)))
   fst(pair(XS, YS)) -> XS
   snd(pair(XS, YS)) -> YS
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> u(splitAt(N, XS), N, X, XS)
   u(pair(YS, ZS), N, X, XS) -> pair(cons(X, YS), ZS)
   head(cons(N, XS)) -> N
   tail(cons(N, XS)) -> XS
   sel(N, XS) -> head(afterNth(N, XS))
   take(N, XS) -> fst(splitAt(N, XS))
   afterNth(N, XS) -> snd(splitAt(N, XS))

The set Q consists of the following terms:

   natsFrom(x0)
   fst(pair(x0, x1))
   snd(pair(x0, x1))
   splitAt(0, x0)
   splitAt(s(x0), cons(x1, x2))
   u(pair(x0, x1), x2, x3, x4)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   sel(x0, x1)
   take(x0, x1)
   afterNth(x0, x1)


----------------------------------------

(17) PIsEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R,mu)-chain.
----------------------------------------

(18)
YES
