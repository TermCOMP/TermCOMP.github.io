NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/0nnOG.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 30 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 0 ms]
(8) QTRS
(9) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(10) QTRS
(11) DependencyPairsProof [EQUIVALENT, 0 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) AND
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QReductionProof [EQUIVALENT, 0 ms]
        (19) QDP
        (20) NonTerminationLoopProof [COMPLETE, 0 ms]
        (21) NO
    (22) QDP
        (23) UsableRulesProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QReductionProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(nil) -> nil
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   nats -> adx(zeros)
   zeros -> cons(0, zeros)
   head(cons(X, L)) -> X
   tail(cons(X, L)) -> L

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 2*x_1
   POL(incr(x_1)) = x_1
   POL(nats) = 2
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   nats -> adx(zeros)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(nil) -> nil
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)
   head(cons(X, L)) -> X
   tail(cons(X, L)) -> L

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(head(x_1)) = 1 + 2*x_1
   POL(incr(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   head(cons(X, L)) -> X




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(nil) -> nil
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)
   tail(cons(X, L)) -> L

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(adx(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(incr(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(tail(x_1)) = 1 + 2*x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   tail(cons(X, L)) -> L




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(nil) -> nil
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(adx(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(incr(x_1)) = x_1
   POL(nil) = 2
   POL(s(x_1)) = x_1
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   adx(nil) -> nil




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

Q is empty.

----------------------------------------

(9) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros


----------------------------------------

(11) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INCR(cons(X, L)) -> INCR(L)
   ADX(cons(X, L)) -> INCR(cons(X, adx(L)))
   ADX(cons(X, L)) -> ADX(L)
   ZEROS -> ZEROS

The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 1 less node.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ZEROS -> ZEROS

The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ZEROS -> ZEROS

R is empty.
The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ZEROS -> ZEROS

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = ZEROS evaluates to  t =ZEROS

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from ZEROS to ZEROS.




----------------------------------------

(21)
NO

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INCR(cons(X, L)) -> INCR(L)

The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INCR(cons(X, L)) -> INCR(L)

R is empty.
The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INCR(cons(X, L)) -> INCR(L)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INCR(cons(X, L)) -> INCR(L)
The graph contains the following edges 1 > 1


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADX(cons(X, L)) -> ADX(L)

The TRS R consists of the following rules:

   incr(nil) -> nil
   incr(cons(X, L)) -> cons(s(X), incr(L))
   adx(cons(X, L)) -> incr(cons(X, adx(L)))
   zeros -> cons(0, zeros)

The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADX(cons(X, L)) -> ADX(L)

R is empty.
The set Q consists of the following terms:

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   incr(nil)
   incr(cons(x0, x1))
   adx(cons(x0, x1))
   zeros


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADX(cons(X, L)) -> ADX(L)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADX(cons(X, L)) -> ADX(L)
The graph contains the following edges 1 > 1


----------------------------------------

(35)
YES
