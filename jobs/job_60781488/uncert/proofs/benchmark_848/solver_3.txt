NO

Problem 1: 

(VAR vu95NonEmpty L X)
(RULES
adx(cons(X,L)) -> incr(cons(X,adx(L)))
adx(nil) -> nil
head(cons(X,L)) -> X
incr(cons(X,L)) -> cons(s(X),incr(L))
incr(nil) -> nil
nats -> adx(zeros)
tail(cons(X,L)) -> L
zeros -> cons(num0,zeros)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 ADX(cons(X,L)) -> ADX(L)
 ADX(cons(X,L)) -> INCR(cons(X,adx(L)))
 INCR(cons(X,L)) -> INCR(L)
 NATS -> ADX(zeros)
 NATS -> ZEROS
 ZEROS -> ZEROS
-> Rules:
 adx(cons(X,L)) -> incr(cons(X,adx(L)))
 adx(nil) -> nil
 head(cons(X,L)) -> X
 incr(cons(X,L)) -> cons(s(X),incr(L))
 incr(nil) -> nil
 nats -> adx(zeros)
 tail(cons(X,L)) -> L
 zeros -> cons(num0,zeros)

Problem 1: 

Infiniteness Processor:
-> Pairs:
 ADX(cons(X,L)) -> ADX(L)
 ADX(cons(X,L)) -> INCR(cons(X,adx(L)))
 INCR(cons(X,L)) -> INCR(L)
 NATS -> ADX(zeros)
 NATS -> ZEROS
 ZEROS -> ZEROS
-> Rules:
 adx(cons(X,L)) -> incr(cons(X,adx(L)))
 adx(nil) -> nil
 head(cons(X,L)) -> X
 incr(cons(X,L)) -> cons(s(X),incr(L))
 incr(nil) -> nil
 nats -> adx(zeros)
 tail(cons(X,L)) -> L
 zeros -> cons(num0,zeros)
-> Pairs in cycle:
 ZEROS -> ZEROS

The problem is infinite.
