YES

Problem 1: 

(VAR vu95NonEmpty p x xs y)
(RULES
app(app(and,ffalse),y) -> ffalse
app(app(and,ftrue),ftrue) -> ftrue
app(app(and,x),ffalse) -> ffalse
app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
app(app(forall,p),nil) -> ftrue
app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
app(app(forsome,p),nil) -> ffalse
app(app(or,ffalse),ffalse) -> ffalse
app(app(or,ftrue),y) -> ftrue
app(app(or,x),ftrue) -> ftrue
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(and,app(p,x)),app(app(forall,p),xs))
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(and,app(p,x))
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(p,x)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(or,app(p,x)),app(app(forsome,p),xs))
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(or,app(p,x))
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(p,x)
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(and,app(p,x)),app(app(forall,p),xs))
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(and,app(p,x))
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(p,x)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(or,app(p,x)),app(app(forsome,p),xs))
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(or,app(p,x))
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(p,x)
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(p,x)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(p,x)
->->-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue

Problem 1: 

Subterm Processor:
-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(p,x)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(p,x)
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Projection:
 pi(APP) = 1

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
->->-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->->Cycle:
->->-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
->->-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(app(forsome,p),app(app(cons,x),xs)) -> APP(app(forsome,p),xs)
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(forall,p),app(app(cons,x),xs)) -> APP(app(forall,p),xs)
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(and,ffalse),y) -> ffalse
 app(app(and,ftrue),ftrue) -> ftrue
 app(app(and,x),ffalse) -> ffalse
 app(app(forall,p),app(app(cons,x),xs)) -> app(app(and,app(p,x)),app(app(forall,p),xs))
 app(app(forall,p),nil) -> ftrue
 app(app(forsome,p),app(app(cons,x),xs)) -> app(app(or,app(p,x)),app(app(forsome,p),xs))
 app(app(forsome,p),nil) -> ffalse
 app(app(or,ffalse),ffalse) -> ffalse
 app(app(or,ftrue),y) -> ftrue
 app(app(or,x),ftrue) -> ftrue
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
