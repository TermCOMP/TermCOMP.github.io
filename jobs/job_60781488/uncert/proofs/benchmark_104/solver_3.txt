YES

Problem 1: 

(VAR vu95NonEmpty f x xs y ys)
(RULES
app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
app(app(le,app(s,x)),num0) -> ffalse
app(app(le,num0),y) -> ftrue
app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
app(app(map,f),nil) -> nil
app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
app(app(maxlist,x),nil) -> x
app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(le,app(s,x)),app(s,y)) -> APP(app(le,x),y)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(le,x),y)
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(maxlist,y),ys)
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(if,app(app(le,x),y))
 APP(height,app(app(node,x),xs)) -> APP(app(map,height),xs)
 APP(height,app(app(node,x),xs)) -> APP(app(maxlist,num0),app(app(map,height),xs))
 APP(height,app(app(node,x),xs)) -> APP(s,app(app(maxlist,num0),app(app(map,height),xs)))
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(le,app(s,x)),app(s,y)) -> APP(app(le,x),y)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(le,x),y)
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(maxlist,y),ys)
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(if,app(app(le,x),y))
 APP(height,app(app(node,x),xs)) -> APP(app(map,height),xs)
 APP(height,app(app(node,x),xs)) -> APP(app(maxlist,num0),app(app(map,height),xs))
 APP(height,app(app(node,x),xs)) -> APP(s,app(app(maxlist,num0),app(app(map,height),xs)))
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(le,app(s,x)),app(s,y)) -> APP(app(le,x),y)
->->-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->->Cycle:
->->-> Pairs:
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(maxlist,y),ys)
->->-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->->Cycle:
->->-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(height,app(app(node,x),xs)) -> APP(app(map,height),xs)
->->-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(app(le,app(s,x)),app(s,y)) -> APP(app(le,x),y)
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(maxlist,x),app(app(cons,y),ys)) -> APP(app(maxlist,y),ys)
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(height,app(app(node,x),xs)) -> APP(app(map,height),xs)
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Projection:
 pi(APP) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(le,app(s,x)),app(s,y)) -> app(app(le,x),y)
 app(app(le,app(s,x)),num0) -> ffalse
 app(app(le,num0),y) -> ftrue
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(maxlist,x),app(app(cons,y),ys)) -> app(app(if,app(app(le,x),y)),app(app(maxlist,y),ys))
 app(app(maxlist,x),nil) -> x
 app(height,app(app(node,x),xs)) -> app(s,app(app(maxlist,num0),app(app(map,height),xs)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
