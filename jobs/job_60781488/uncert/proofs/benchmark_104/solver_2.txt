YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gpJH0.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 4 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(app(maxlist, x), app(app(cons, y), ys)) -> app(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   app(app(maxlist, x), nil) -> x
   app(height, app(app(node, x), xs)) -> app(s, app(app(maxlist, 0), app(app(map, height), xs)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(app(maxlist, x), app(app(cons, y), ys)) -> app(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   app(app(maxlist, x), nil) -> x
   app(height, app(app(node, x), xs)) -> app(s, app(app(maxlist, 0), app(app(map, height), xs)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(le, app(s, x)), app(s, y)) -> APP(app(le, x), y)
   APP(app(le, app(s, x)), app(s, y)) -> APP(le, x)
   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(if, app(app(le, x), y))
   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(app(le, x), y)
   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(le, x)
   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(app(maxlist, y), ys)
   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(maxlist, y)
   APP(height, app(app(node, x), xs)) -> APP(s, app(app(maxlist, 0), app(app(map, height), xs)))
   APP(height, app(app(node, x), xs)) -> APP(app(maxlist, 0), app(app(map, height), xs))
   APP(height, app(app(node, x), xs)) -> APP(maxlist, 0)
   APP(height, app(app(node, x), xs)) -> APP(app(map, height), xs)
   APP(height, app(app(node, x), xs)) -> APP(map, height)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(app(maxlist, x), app(app(cons, y), ys)) -> app(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   app(app(maxlist, x), nil) -> x
   app(height, app(app(node, x), xs)) -> app(s, app(app(maxlist, 0), app(app(map, height), xs)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 12 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, x)), app(s, y)) -> APP(app(le, x), y)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(app(maxlist, x), app(app(cons, y), ys)) -> app(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   app(app(maxlist, x), nil) -> x
   app(height, app(app(node, x), xs)) -> app(s, app(app(maxlist, 0), app(app(map, height), xs)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(le, app(s, x)), app(s, y)) -> APP(app(le, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(x), s(y)) -> le1(x, y)

R is empty.
The set Q consists of the following terms:

   map(x0, nil)
   map(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   maxlist(x0, cons(x1, x2))
   maxlist(x0, nil)
   height(node(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   maxlist(x0, cons(x1, x2))
   maxlist(x0, nil)
   height(node(x0, x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(x), s(y)) -> le1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*le1(s(x), s(y)) -> le1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(app(maxlist, y), ys)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(app(maxlist, x), app(app(cons, y), ys)) -> app(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   app(app(maxlist, x), nil) -> x
   app(height, app(app(node, x), xs)) -> app(s, app(app(maxlist, 0), app(app(map, height), xs)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(maxlist, x), app(app(cons, y), ys)) -> APP(app(maxlist, y), ys)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   maxlist1(x, cons(y, ys)) -> maxlist1(y, ys)

R is empty.
The set Q consists of the following terms:

   map(x0, nil)
   map(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   maxlist(x0, cons(x1, x2))
   maxlist(x0, nil)
   height(node(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   map(x0, nil)
   map(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   maxlist(x0, cons(x1, x2))
   maxlist(x0, nil)
   height(node(x0, x1))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   maxlist1(x, cons(y, ys)) -> maxlist1(y, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*maxlist1(x, cons(y, ys)) -> maxlist1(y, ys)
The graph contains the following edges 2 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(height, app(app(node, x), xs)) -> APP(app(map, height), xs)

The TRS R consists of the following rules:

   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(le, 0), y) -> true
   app(app(le, app(s, x)), 0) -> false
   app(app(le, app(s, x)), app(s, y)) -> app(app(le, x), y)
   app(app(maxlist, x), app(app(cons, y), ys)) -> app(app(if, app(app(le, x), y)), app(app(maxlist, y), ys))
   app(app(maxlist, x), nil) -> x
   app(height, app(app(node, x), xs)) -> app(s, app(app(maxlist, 0), app(app(map, height), xs)))

The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(height, app(app(node, x), xs)) -> APP(app(map, height), xs)

R is empty.
The set Q consists of the following terms:

   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(le, 0), x0)
   app(app(le, app(s, x0)), 0)
   app(app(le, app(s, x0)), app(s, x1))
   app(app(maxlist, x0), app(app(cons, x1), x2))
   app(app(maxlist, x0), nil)
   app(height, app(app(node, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(height, app(app(node, x), xs)) -> APP(app(map, height), xs)
The graph contains the following edges 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(29)
YES
