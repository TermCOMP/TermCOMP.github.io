YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xnplO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 6 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) QDPOrderProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) PisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (12) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(f, app(app(cons, nil), y)) -> y
   app(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> app(app(app(copy, n), y), z)
   app(app(app(copy, 0), y), z) -> app(f, z)
   app(app(app(copy, app(s, x)), y), z) -> app(app(app(copy, x), y), app(app(cons, app(f, y)), z))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> APP(app(app(copy, n), y), z)
   APP(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> APP(app(copy, n), y)
   APP(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> APP(copy, n)
   APP(app(app(copy, 0), y), z) -> APP(f, z)
   APP(app(app(copy, app(s, x)), y), z) -> APP(app(app(copy, x), y), app(app(cons, app(f, y)), z))
   APP(app(app(copy, app(s, x)), y), z) -> APP(app(copy, x), y)
   APP(app(app(copy, app(s, x)), y), z) -> APP(copy, x)
   APP(app(app(copy, app(s, x)), y), z) -> APP(app(cons, app(f, y)), z)
   APP(app(app(copy, app(s, x)), y), z) -> APP(cons, app(f, y))
   APP(app(app(copy, app(s, x)), y), z) -> APP(f, y)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(cons, app(fun, x)), app(app(map, fun), xs))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(cons, app(fun, x))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(filter2, app(fun, x)), fun), x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(filter2, app(fun, x)), fun)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(filter2, app(fun, x))
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(cons, x), app(app(filter, fun), xs))
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(filter, fun)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(filter, fun)

The TRS R consists of the following rules:

   app(f, app(app(cons, nil), y)) -> y
   app(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> app(app(app(copy, n), y), z)
   app(app(app(copy, 0), y), z) -> app(f, z)
   app(app(app(copy, app(s, x)), y), z) -> app(app(app(copy, x), y), app(app(cons, app(f, y)), z))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 18 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(app(copy, app(s, x)), y), z) -> APP(app(app(copy, x), y), app(app(cons, app(f, y)), z))

The TRS R consists of the following rules:

   app(f, app(app(cons, nil), y)) -> y
   app(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> app(app(app(copy, n), y), z)
   app(app(app(copy, 0), y), z) -> app(f, z)
   app(app(app(copy, app(s, x)), y), z) -> app(app(app(copy, x), y), app(app(cons, app(f, y)), z))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06]. Here, we combined the reduction pair processor with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   copy1(s(x), y, z) -> copy1(x, y, cons(f(y), z))

 The a-transformed usable rules are 

   f(cons(nil, y)) -> y
   f(cons(f(cons(nil, y)), z)) -> copy(n, y, z)




The following pairs can be oriented strictly and are deleted.

   APP(app(app(copy, app(s, x)), y), z) -> APP(app(app(copy, x), y), app(app(cons, app(f, y)), z))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
copy1(x1, x2, x3)  =  copy1(x1)

s(x1)  =  s(x1)

cons(x1, x2)  =  cons(x1, x2)

f(x1)  =  x1

nil  =  nil

copy(x1, x2, x3)  =  copy

n  =  n


Recursive path order with status [RPO].
Quasi-Precedence: [copy1_1, s_1]
[nil, n] > copy

Status: copy1_1: multiset status
s_1: multiset status
cons_2: multiset status
nil: multiset status
copy: multiset status
n: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   app(f, app(app(cons, nil), y)) -> y
   app(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> app(app(app(copy, n), y), z)


----------------------------------------

(7)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   app(f, app(app(cons, nil), y)) -> y
   app(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> app(app(app(copy, n), y), z)
   app(app(app(copy, 0), y), z) -> app(f, z)
   app(app(app(copy, app(s, x)), y), z) -> app(app(app(copy, x), y), app(app(cons, app(f, y)), z))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

The TRS R consists of the following rules:

   app(f, app(app(cons, nil), y)) -> y
   app(f, app(app(cons, app(f, app(app(cons, nil), y))), z)) -> app(app(app(copy, n), y), z)
   app(app(app(copy, 0), y), z) -> app(f, z)
   app(app(app(copy, app(s, x)), y), z) -> app(app(app(copy, x), y), app(app(cons, app(f, y)), z))
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(12)
YES
