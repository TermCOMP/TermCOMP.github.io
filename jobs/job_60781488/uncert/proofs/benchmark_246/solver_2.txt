YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/a7YlH.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) UsableRulesReductionPairsProof [EQUIVALENT, 2 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QReductionProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) NonInfProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   times(x, y) -> sum(generate(x, y))
   generate(x, y) -> gen(x, y, 0)
   gen(x, y, z) -> if(ge(z, x), x, y, z)
   if(true, x, y, z) -> nil
   if(false, x, y, z) -> cons(y, gen(x, y, s(z)))
   sum(nil) -> 0
   sum(cons(0, xs)) -> sum(xs)
   sum(cons(s(x), xs)) -> s(sum(cons(x, xs)))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   times(x, y) -> sum(generate(x, y))
   generate(x, y) -> gen(x, y, 0)
   gen(x, y, z) -> if(ge(z, x), x, y, z)
   if(true, x, y, z) -> nil
   if(false, x, y, z) -> cons(y, gen(x, y, s(z)))
   sum(nil) -> 0
   sum(cons(0, xs)) -> sum(xs)
   sum(cons(s(x), xs)) -> s(sum(cons(x, xs)))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(x, y) -> SUM(generate(x, y))
   TIMES(x, y) -> GENERATE(x, y)
   GENERATE(x, y) -> GEN(x, y, 0)
   GEN(x, y, z) -> IF(ge(z, x), x, y, z)
   GEN(x, y, z) -> GE(z, x)
   IF(false, x, y, z) -> GEN(x, y, s(z))
   SUM(cons(0, xs)) -> SUM(xs)
   SUM(cons(s(x), xs)) -> SUM(cons(x, xs))
   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   times(x, y) -> sum(generate(x, y))
   generate(x, y) -> gen(x, y, 0)
   gen(x, y, z) -> if(ge(z, x), x, y, z)
   if(true, x, y, z) -> nil
   if(false, x, y, z) -> cons(y, gen(x, y, s(z)))
   sum(nil) -> 0
   sum(cons(0, xs)) -> sum(xs)
   sum(cons(s(x), xs)) -> s(sum(cons(x, xs)))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

The TRS R consists of the following rules:

   times(x, y) -> sum(generate(x, y))
   generate(x, y) -> gen(x, y, 0)
   gen(x, y, z) -> if(ge(z, x), x, y, z)
   if(true, x, y, z) -> nil
   if(false, x, y, z) -> cons(y, gen(x, y, s(z)))
   sum(nil) -> 0
   sum(cons(0, xs)) -> sum(xs)
   sum(cons(s(x), xs)) -> s(sum(cons(x, xs)))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(s(x), s(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(s(x), s(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(s(x), xs)) -> SUM(cons(x, xs))
   SUM(cons(0, xs)) -> SUM(xs)

The TRS R consists of the following rules:

   times(x, y) -> sum(generate(x, y))
   generate(x, y) -> gen(x, y, 0)
   gen(x, y, z) -> if(ge(z, x), x, y, z)
   if(true, x, y, z) -> nil
   if(false, x, y, z) -> cons(y, gen(x, y, s(z)))
   sum(nil) -> 0
   sum(cons(0, xs)) -> sum(xs)
   sum(cons(s(x), xs)) -> s(sum(cons(x, xs)))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(s(x), xs)) -> SUM(cons(x, xs))
   SUM(cons(0, xs)) -> SUM(xs)

R is empty.
The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(s(x), xs)) -> SUM(cons(x, xs))
   SUM(cons(0, xs)) -> SUM(xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   SUM(cons(s(x), xs)) -> SUM(cons(x, xs))
   SUM(cons(0, xs)) -> SUM(xs)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(SUM(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> GEN(x, y, s(z))
   GEN(x, y, z) -> IF(ge(z, x), x, y, z)

The TRS R consists of the following rules:

   times(x, y) -> sum(generate(x, y))
   generate(x, y) -> gen(x, y, 0)
   gen(x, y, z) -> if(ge(z, x), x, y, z)
   if(true, x, y, z) -> nil
   if(false, x, y, z) -> cons(y, gen(x, y, s(z)))
   sum(nil) -> 0
   sum(cons(0, xs)) -> sum(xs)
   sum(cons(s(x), xs)) -> s(sum(cons(x, xs)))
   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> GEN(x, y, s(z))
   GEN(x, y, z) -> IF(ge(z, x), x, y, z)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))
   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   times(x0, x1)
   generate(x0, x1)
   gen(x0, x1, x2)
   if(true, x0, x1, x2)
   if(false, x0, x1, x2)
   sum(nil)
   sum(cons(0, x0))
   sum(cons(s(x0), x1))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(false, x, y, z) -> GEN(x, y, s(z))
   GEN(x, y, z) -> IF(ge(z, x), x, y, z)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF(false, x, y, z) -> GEN(x, y, s(z)) the following chains were created:
*We consider the chain GEN(x3, x4, x5) -> IF(ge(x5, x3), x3, x4, x5), IF(false, x6, x7, x8) -> GEN(x6, x7, s(x8)) which results in the following constraint:

(1)    (IF(ge(x5, x3), x3, x4, x5)=IF(false, x6, x7, x8)  ==>  IF(false, x6, x7, x8)_>=_GEN(x6, x7, s(x8)))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (ge(x5, x3)=false  ==>  IF(false, x3, x4, x5)_>=_GEN(x3, x4, s(x5)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on ge(x5, x3)=false which results in the following new constraints:

(3)    (false=false  ==>  IF(false, s(x19), x4, 0)_>=_GEN(s(x19), x4, s(0)))

(4)    (ge(x21, x20)=false & (\/x22:ge(x21, x20)=false  ==>  IF(false, x20, x22, x21)_>=_GEN(x20, x22, s(x21)))  ==>  IF(false, s(x20), x4, s(x21))_>=_GEN(s(x20), x4, s(s(x21))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IF(false, s(x19), x4, 0)_>=_GEN(s(x19), x4, s(0)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (\/x22:ge(x21, x20)=false  ==>  IF(false, x20, x22, x21)_>=_GEN(x20, x22, s(x21))) with sigma = [x22 / x4] which results in the following new constraint:

(6)    (IF(false, x20, x4, x21)_>=_GEN(x20, x4, s(x21))  ==>  IF(false, s(x20), x4, s(x21))_>=_GEN(s(x20), x4, s(s(x21))))








For Pair GEN(x, y, z) -> IF(ge(z, x), x, y, z) the following chains were created:
*We consider the chain IF(false, x9, x10, x11) -> GEN(x9, x10, s(x11)), GEN(x12, x13, x14) -> IF(ge(x14, x12), x12, x13, x14) which results in the following constraint:

(1)    (GEN(x9, x10, s(x11))=GEN(x12, x13, x14)  ==>  GEN(x12, x13, x14)_>=_IF(ge(x14, x12), x12, x13, x14))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (GEN(x9, x10, s(x11))_>=_IF(ge(s(x11), x9), x9, x10, s(x11)))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF(false, x, y, z) -> GEN(x, y, s(z))

*(IF(false, s(x19), x4, 0)_>=_GEN(s(x19), x4, s(0)))


*(IF(false, x20, x4, x21)_>=_GEN(x20, x4, s(x21))  ==>  IF(false, s(x20), x4, s(x21))_>=_GEN(s(x20), x4, s(s(x21))))




*GEN(x, y, z) -> IF(ge(z, x), x, y, z)

*(GEN(x9, x10, s(x11))_>=_IF(ge(s(x11), x9), x9, x10, s(x11)))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(GEN(x_1, x_2, x_3)) = -1 + x_1 + x_2 - x_3
   POL(IF(x_1, x_2, x_3, x_4)) = -1 - x_1 + x_2 + x_3 - x_4
   POL(c) = -2
   POL(false) = 0
   POL(ge(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   IF(false, x, y, z) -> GEN(x, y, s(z))
The following pairs are in P_bound:
   IF(false, x, y, z) -> GEN(x, y, s(z))
The following rules are usable:
   true -> ge(x, 0)
   false -> ge(0, s(y))
   ge(x, y) -> ge(s(x), s(y))

----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEN(x, y, z) -> IF(ge(z, x), x, y, z)

The TRS R consists of the following rules:

   ge(x, 0) -> true
   ge(0, s(y)) -> false
   ge(s(x), s(y)) -> ge(x, y)

The set Q consists of the following terms:

   ge(x0, 0)
   ge(0, s(x0))
   ge(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(31)
TRUE
