YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mXB4J.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 32 ms]
(2) QTRS
(3) RisEmptyProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   xor(x, F) -> x
   xor(x, neg(x)) -> F
   and(x, T) -> x
   and(x, F) -> F
   and(x, x) -> x
   and(xor(x, y), z) -> xor(and(x, z), and(y, z))
   xor(x, x) -> F
   impl(x, y) -> xor(and(x, y), xor(x, T))
   or(x, y) -> xor(and(x, y), xor(x, y))
   equiv(x, y) -> xor(x, xor(y, T))
   neg(x) -> xor(x, T)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Quasi precedence:
impl_2 > [neg_1, T] > [xor_2, F]
impl_2 > and_2 > [xor_2, F]
or_2 > and_2 > [xor_2, F]
equiv_2 > [neg_1, T] > [xor_2, F]


Status:
xor_2: multiset status
F: multiset status
neg_1: multiset status
and_2: multiset status
T: multiset status
impl_2: multiset status
or_2: multiset status
equiv_2: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   xor(x, F) -> x
   xor(x, neg(x)) -> F
   and(x, T) -> x
   and(x, F) -> F
   and(x, x) -> x
   and(xor(x, y), z) -> xor(and(x, z), and(y, z))
   xor(x, x) -> F
   impl(x, y) -> xor(and(x, y), xor(x, T))
   or(x, y) -> xor(and(x, y), xor(x, y))
   equiv(x, y) -> xor(x, xor(y, T))
   neg(x) -> xor(x, T)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(3) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(4)
YES
