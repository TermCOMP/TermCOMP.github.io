YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DL0wQ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 8 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) ATransformationProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) MRRProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) DependencyGraphProof [EQUIVALENT, 0 ms]
        (35) TRUE
    (36) QDP
        (37) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (38) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(fact, 0) -> APP(s, 0)
   APP(fact, app(s, x)) -> APP(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   APP(fact, app(s, x)) -> APP(*, app(s, x))
   APP(fact, app(s, x)) -> APP(fact, app(p, app(s, x)))
   APP(fact, app(s, x)) -> APP(p, app(s, x))
   APP(app(*, app(s, x)), y) -> APP(app(+, app(app(*, x), y)), y)
   APP(app(*, app(s, x)), y) -> APP(+, app(app(*, x), y))
   APP(app(*, app(s, x)), y) -> APP(app(*, x), y)
   APP(app(*, app(s, x)), y) -> APP(*, x)
   APP(app(+, x), app(s, y)) -> APP(s, app(app(+, x), y))
   APP(app(+, x), app(s, y)) -> APP(app(+, x), y)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 17 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(+, x), app(s, y)) -> APP(app(+, x), y)

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(+, x), app(s, y)) -> APP(app(+, x), y)

R is empty.
The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +1(x, s(y)) -> +1(x, y)

R is empty.
The set Q consists of the following terms:

   p(s(x0))
   fact(0)
   fact(s(x0))
   *(0, x0)
   *(s(x0), x1)
   +(x0, 0)
   +(x0, s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(s(x0))
   fact(0)
   fact(s(x0))
   *(0, x0)
   *(s(x0), x1)
   +(x0, 0)
   +(x0, s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +1(x, s(y)) -> +1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*+1(x, s(y)) -> +1(x, y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, app(s, x)), y) -> APP(app(*, x), y)

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(*, app(s, x)), y) -> APP(app(*, x), y)

R is empty.
The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *1(s(x), y) -> *1(x, y)

R is empty.
The set Q consists of the following terms:

   p(s(x0))
   fact(0)
   fact(s(x0))
   *(0, x0)
   *(s(x0), x1)
   +(x0, 0)
   +(x0, s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(s(x0))
   fact(0)
   fact(s(x0))
   *(0, x0)
   *(s(x0), x1)
   +(x0, 0)
   +(x0, s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *1(s(x), y) -> *1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**1(s(x), y) -> *1(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(fact, app(s, x)) -> APP(fact, app(p, app(s, x)))

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(fact, app(s, x)) -> APP(fact, app(p, app(s, x)))

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   fact1(s(x)) -> fact1(p(s(x)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(s(x0))
   fact(0)
   fact(s(x0))
   *(0, x0)
   *(s(x0), x1)
   +(x0, 0)
   +(x0, s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   fact(0)
   fact(s(x0))
   *(0, x0)
   *(s(x0), x1)
   +(x0, 0)
   +(x0, s(x1))
   map(x0, nil)
   map(x0, cons(x1, x2))
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   filter2(true, x0, x1, x2)
   filter2(false, x0, x1, x2)


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   fact1(s(x)) -> fact1(p(s(x)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   p(s(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(fact1(x_1)) = 2*x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2 + x_1


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   fact1(s(x)) -> fact1(p(s(x)))

R is empty.
The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(35)
TRUE

----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(p, app(s, x)) -> x
   app(fact, 0) -> app(s, 0)
   app(fact, app(s, x)) -> app(app(*, app(s, x)), app(fact, app(p, app(s, x))))
   app(app(*, 0), y) -> 0
   app(app(*, app(s, x)), y) -> app(app(+, app(app(*, x), y)), y)
   app(app(+, x), 0) -> x
   app(app(+, x), app(s, y)) -> app(s, app(app(+, x), y))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

The set Q consists of the following terms:

   app(p, app(s, x0))
   app(fact, 0)
   app(fact, app(s, x0))
   app(app(*, 0), x0)
   app(app(*, app(s, x0)), x1)
   app(app(+, x0), 0)
   app(app(+, x0), app(s, x1))
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
The graph contains the following edges 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(38)
YES
