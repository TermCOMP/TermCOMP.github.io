NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/GppoJ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) MNOCProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) NonLoopProof [COMPLETE, 58 ms]
        (25) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

The TRS R 2 is 
   f(tt, x) -> f(swap(x, 0), s(x))

The signature Sigma is {f_2}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(tt, x) -> F(swap(x, 0), s(x))
   F(tt, x) -> SWAP(x, 0)
   SWAP(s(x), y) -> SWAP(x, s(y))
   SWAP(0, s(y)) -> DECR(s(y))
   DECR(s(y)) -> DECR(y)

The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DECR(s(y)) -> DECR(y)

The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DECR(s(y)) -> DECR(y)

R is empty.
The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DECR(s(y)) -> DECR(y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DECR(s(y)) -> DECR(y)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SWAP(s(x), y) -> SWAP(x, s(y))

The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SWAP(s(x), y) -> SWAP(x, s(y))

R is empty.
The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SWAP(s(x), y) -> SWAP(x, s(y))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SWAP(s(x), y) -> SWAP(x, s(y))
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(tt, x) -> F(swap(x, 0), s(x))

The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

The set Q consists of the following terms:

   f(tt, x0)
   swap(s(x0), x1)
   swap(0, s(x0))
   decr(s(x0))
   decr(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(tt, x) -> F(swap(x, 0), s(x))

The TRS R consists of the following rules:

   f(tt, x) -> f(swap(x, 0), s(x))
   swap(s(x), y) -> swap(x, s(y))
   swap(0, s(y)) -> decr(s(y))
   decr(s(y)) -> decr(y)
   decr(0) -> tt

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 1, 
?' = [ ], and ?' = [ ] on the rule
F(tt, s(zr0))[zr0 / s(zr0)]^n[zr0 / 0] -> F(tt, s(s(zr0)))[zr0 / s(zr0)]^n[zr0 / 0]
This rule is correct for the QDP as the following derivation shows:

F(tt, s(zr0))[zr0 / s(zr0)]^n[zr0 / 0] -> F(tt, s(s(zr0)))[zr0 / s(zr0)]^n[zr0 / 0]
    by Equivalence by Domain Renaming of the lhs with [zl0 / zr0]
    intermediate steps: Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
    F(tt, s(zl1))[zr1 / s(zr1), zl1 / s(zl1)]^n[zr1 / 0, zl1 / 0] -> F(tt, s(s(zr1)))[zr1 / s(zr1), zl1 / s(zl1)]^n[zr1 / 0, zl1 / 0]
        by Narrowing at position: [0]
        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv Smu (rhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
        F(tt, s(zl1))[zr2 / s(zr2), zr3 / s(zr3), zl1 / s(zl1)]^n[zr2 / 0, zr3 / 0, y0 / 0, zl1 / 0] -> F(decr(y0), s(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3), zl1 / s(zl1)]^n[zr2 / 0, zr3 / 0, y0 / 0, zl1 / 0]
            by Narrowing at position: [0]
            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
            F(tt, s(zl1))[zr2 / s(zr2), zr3 / s(zr3), zl1 / s(zl1)]^n[zr2 / 0, zr3 / 0, zl1 / 0] -> F(decr(s(zr2)), s(s(zr3)))[zr2 / s(zr2), zr3 / s(zr3), zl1 / s(zl1)]^n[zr2 / 0, zr3 / 0, zl1 / 0]
                by Narrowing at position: [0]
                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Equiv IPS (lhs)
                F(tt, s(zs1))[zt1 / s(zt1), zs1 / s(zs1)]^n[zt1 / 0, zs1 / y1] -> F(swap(y1, s(zt1)), s(s(zs1)))[zt1 / s(zt1), zs1 / s(zs1)]^n[zt1 / 0, zs1 / y1]
                    by Narrowing at position: [0]
                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
                    F(tt, x)[ ]^n[ ] -> F(swap(x, 0), s(x))[ ]^n[ ]
                        by Rule from TRS P

                    intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiation - Instantiation - Equiv DR (rhs) - Equiv DR (lhs) - Instantiation - Equiv DR (rhs) - Equiv DR (lhs)
                    swap(s(x), y)[x / s(x)]^n[ ] -> swap(x, s(y))[y / s(y)]^n[ ]
                        by PatternCreation I with delta: [ ], theta: [y / s(y)], sigma: [x / s(x)]
                        swap(s(x), y)[ ]^n[ ] -> swap(x, s(y))[ ]^n[ ]
                            by Rule from TRS R

                intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate Sigma - Instantiation - Instantiation
                swap(0, s(y))[ ]^n[ ] -> decr(s(y))[ ]^n[ ]
                    by Rule from TRS R

            intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Instantiate mu - Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv DR (lhs) - Equiv DR (lhs) - Instantiation - Equiv DR (lhs)
            decr(s(y))[y / s(y)]^n[ ] -> decr(y)[ ]^n[ ]
                by PatternCreation I with delta: [ ], theta: [ ], sigma: [y / s(y)]
                decr(s(y))[ ]^n[ ] -> decr(y)[ ]^n[ ]
                    by Rule from TRS R

        intermediate steps: Equiv IPS (rhs) - Equiv IPS (lhs) - Equiv IPS (rhs) - Equiv IPS (lhs)
        decr(0)[ ]^n[ ] -> tt[ ]^n[ ]
            by Rule from TRS R
----------------------------------------

(25)
NO
