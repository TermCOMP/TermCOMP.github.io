YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/L9Vir.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) AAECC Innermost [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QReductionProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) NonInfProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

Q is empty.

----------------------------------------

(1) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The TRS R 2 is 
   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))

The signature Sigma is {cond_3}
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> COND(gr(x, y), x, add(x, y))
   COND(true, x, y) -> GR(x, y)
   COND(true, x, y) -> ADD(x, y)
   GR(s(x), s(y)) -> GR(x, y)
   ADD(s(x), y) -> ADD(x, y)

The TRS R consists of the following rules:

   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(x), y) -> ADD(x, y)

The TRS R consists of the following rules:

   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(x), y) -> ADD(x, y)

R is empty.
The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(s(x), y) -> ADD(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(s(x), y) -> ADD(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

The TRS R consists of the following rules:

   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

R is empty.
The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GR(s(x), s(y)) -> GR(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GR(s(x), s(y)) -> GR(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> COND(gr(x, y), x, add(x, y))

The TRS R consists of the following rules:

   cond(true, x, y) -> cond(gr(x, y), x, add(x, y))
   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> COND(gr(x, y), x, add(x, y))

The TRS R consists of the following rules:

   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   cond(true, x0, x1)
   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   cond(true, x0, x1)


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COND(true, x, y) -> COND(gr(x, y), x, add(x, y))

The TRS R consists of the following rules:

   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND(true, x, y) -> COND(gr(x, y), x, add(x, y)) the following chains were created:
*We consider the chain COND(true, x0, x1) -> COND(gr(x0, x1), x0, add(x0, x1)), COND(true, x2, x3) -> COND(gr(x2, x3), x2, add(x2, x3)) which results in the following constraint:

(1)    (COND(gr(x0, x1), x0, add(x0, x1))=COND(true, x2, x3)  ==>  COND(true, x0, x1)_>=_COND(gr(x0, x1), x0, add(x0, x1)))



We simplified constraint (1) using rules (I), (II), (IV) which results in the following new constraint:

(2)    (gr(x0, x1)=true  ==>  COND(true, x0, x1)_>=_COND(gr(x0, x1), x0, add(x0, x1)))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on gr(x0, x1)=true which results in the following new constraints:

(3)    (true=true  ==>  COND(true, s(x5), 0)_>=_COND(gr(s(x5), 0), s(x5), add(s(x5), 0)))

(4)    (gr(x7, x6)=true & (gr(x7, x6)=true  ==>  COND(true, x7, x6)_>=_COND(gr(x7, x6), x7, add(x7, x6)))  ==>  COND(true, s(x7), s(x6))_>=_COND(gr(s(x7), s(x6)), s(x7), add(s(x7), s(x6))))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (COND(true, s(x5), 0)_>=_COND(gr(s(x5), 0), s(x5), add(s(x5), 0)))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (gr(x7, x6)=true  ==>  COND(true, x7, x6)_>=_COND(gr(x7, x6), x7, add(x7, x6))) with sigma = [ ] which results in the following new constraint:

(6)    (COND(true, x7, x6)_>=_COND(gr(x7, x6), x7, add(x7, x6))  ==>  COND(true, s(x7), s(x6))_>=_COND(gr(s(x7), s(x6)), s(x7), add(s(x7), s(x6))))








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND(true, x, y) -> COND(gr(x, y), x, add(x, y))

*(COND(true, s(x5), 0)_>=_COND(gr(s(x5), 0), s(x5), add(s(x5), 0)))


*(COND(true, x7, x6)_>=_COND(gr(x7, x6), x7, add(x7, x6))  ==>  COND(true, s(x7), s(x6))_>=_COND(gr(s(x7), s(x6)), s(x7), add(s(x7), s(x6))))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(COND(x_1, x_2, x_3)) = -1 - x_1 + x_2 - x_3
   POL(add(x_1, x_2)) = x_1
   POL(c) = -1
   POL(false) = 0
   POL(gr(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + x_1
   POL(true) = 0


The following pairs  are in P_>:
   COND(true, x, y) -> COND(gr(x, y), x, add(x, y))
The following pairs are in P_bound:
   COND(true, x, y) -> COND(gr(x, y), x, add(x, y))
The following rules are usable:
   false -> gr(0, x)
   true -> gr(s(x), 0)
   gr(x, y) -> gr(s(x), s(y))
   x -> add(0, x)
   s(add(x, y)) -> add(s(x), y)

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gr(0, x) -> false
   gr(s(x), 0) -> true
   gr(s(x), s(y)) -> gr(x, y)
   add(0, x) -> x
   add(s(x), y) -> s(add(x, y))

The set Q consists of the following terms:

   gr(0, x0)
   gr(s(x0), 0)
   gr(s(x0), s(x1))
   add(0, x0)
   add(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
