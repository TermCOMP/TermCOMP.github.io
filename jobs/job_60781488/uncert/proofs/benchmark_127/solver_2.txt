YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uhMkH.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) QDPOrderProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) PisEmptyProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(:, app(app(:, x), y)), z) -> app(app(:, x), app(app(:, y), z))
   app(app(:, app(app(+, x), y)), z) -> app(app(+, app(app(:, x), z)), app(app(:, y), z))
   app(app(:, z), app(app(+, x), app(f, y))) -> app(app(:, app(app(g, z), y)), app(app(+, x), a))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(:, app(app(:, x), y)), z) -> APP(app(:, x), app(app(:, y), z))
   APP(app(:, app(app(:, x), y)), z) -> APP(app(:, y), z)
   APP(app(:, app(app(:, x), y)), z) -> APP(:, y)
   APP(app(:, app(app(+, x), y)), z) -> APP(app(+, app(app(:, x), z)), app(app(:, y), z))
   APP(app(:, app(app(+, x), y)), z) -> APP(+, app(app(:, x), z))
   APP(app(:, app(app(+, x), y)), z) -> APP(app(:, x), z)
   APP(app(:, app(app(+, x), y)), z) -> APP(:, x)
   APP(app(:, app(app(+, x), y)), z) -> APP(app(:, y), z)
   APP(app(:, app(app(+, x), y)), z) -> APP(:, y)
   APP(app(:, z), app(app(+, x), app(f, y))) -> APP(app(:, app(app(g, z), y)), app(app(+, x), a))
   APP(app(:, z), app(app(+, x), app(f, y))) -> APP(:, app(app(g, z), y))
   APP(app(:, z), app(app(+, x), app(f, y))) -> APP(app(g, z), y)
   APP(app(:, z), app(app(+, x), app(f, y))) -> APP(g, z)
   APP(app(:, z), app(app(+, x), app(f, y))) -> APP(app(+, x), a)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(cons, app(f, x)), app(app(map, f), xs))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(cons, app(f, x))
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(f, x)), f), x), xs)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(app(filter2, app(f, x)), f), x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(app(filter2, app(f, x)), f)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(filter2, app(f, x))
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(cons, x), app(app(filter, f), xs))
   APP(app(app(app(filter2, true), f), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(filter, f)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(filter, f)

The TRS R consists of the following rules:

   app(app(:, app(app(:, x), y)), z) -> app(app(:, x), app(app(:, y), z))
   app(app(:, app(app(+, x), y)), z) -> app(app(+, app(app(:, x), z)), app(app(:, y), z))
   app(app(:, z), app(app(+, x), app(f, y))) -> app(app(:, app(app(g, z), y)), app(app(+, x), a))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 20 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(:, app(app(:, x), y)), z) -> APP(app(:, y), z)
   APP(app(:, app(app(:, x), y)), z) -> APP(app(:, x), app(app(:, y), z))
   APP(app(:, app(app(+, x), y)), z) -> APP(app(:, x), z)
   APP(app(:, app(app(+, x), y)), z) -> APP(app(:, y), z)

The TRS R consists of the following rules:

   app(app(:, app(app(:, x), y)), z) -> app(app(:, x), app(app(:, y), z))
   app(app(:, app(app(+, x), y)), z) -> app(app(+, app(app(:, x), z)), app(app(:, y), z))
   app(app(:, z), app(app(+, x), app(f, y))) -> app(app(:, app(app(g, z), y)), app(app(+, x), a))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   APP(app(:, app(app(:, x), y)), z) -> APP(app(:, y), z)
   APP(app(:, app(app(:, x), y)), z) -> APP(app(:, x), app(app(:, y), z))
   APP(app(:, app(app(+, x), y)), z) -> APP(app(:, x), z)
   APP(app(:, app(app(+, x), y)), z) -> APP(app(:, y), z)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
APP(x1, x2)  =  x1

app(x1, x2)  =  app(x1, x2)

:  =  :

+  =  +


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   +=2
   app_2=1
   :=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(7)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   app(app(:, app(app(:, x), y)), z) -> app(app(:, x), app(app(:, y), z))
   app(app(:, app(app(+, x), y)), z) -> app(app(+, app(app(:, x), z)), app(app(:, y), z))
   app(app(:, z), app(app(+, x), app(f, y))) -> app(app(:, app(app(g, z), y)), app(app(+, x), a))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

The TRS R consists of the following rules:

   app(app(:, app(app(:, x), y)), z) -> app(app(:, x), app(app(:, y), z))
   app(app(:, app(app(+, x), y)), z) -> app(app(+, app(app(:, x), z)), app(app(:, y), z))
   app(app(:, z), app(app(+, x), app(f, y))) -> app(app(:, app(app(g, z), y)), app(app(+, x), a))
   app(app(map, f), nil) -> nil
   app(app(map, f), app(app(cons, x), xs)) -> app(app(cons, app(f, x)), app(app(map, f), xs))
   app(app(filter, f), nil) -> nil
   app(app(filter, f), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(f, x)), f), x), xs)
   app(app(app(app(filter2, true), f), x), xs) -> app(app(cons, x), app(app(filter, f), xs))
   app(app(app(app(filter2, false), f), x), xs) -> app(app(filter, f), xs)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
   APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
   APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
   APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(f, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, f), app(app(cons, x), xs)) -> APP(app(map, f), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), f), x), xs) -> APP(app(filter, f), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(14)
YES
