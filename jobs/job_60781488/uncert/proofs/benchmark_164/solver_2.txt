YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/BmBp9.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 31 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) RFCMatchBoundsDPProof [EQUIVALENT, 0 ms]
        (16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(sent(x)) -> top(check(rest(x)))
   rest(nil) -> sent(nil)
   rest(cons(x, y)) -> sent(y)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))
   check(cons(x, y)) -> cons(check(x), y)
   check(cons(x, y)) -> cons(x, check(y))
   check(cons(x, y)) -> cons(x, y)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(check(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(nil) = 0
   POL(rest(x_1)) = x_1
   POL(sent(x_1)) = 2*x_1
   POL(top(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   rest(cons(x, y)) -> sent(y)
   check(cons(x, y)) -> cons(check(x), y)
   check(cons(x, y)) -> cons(x, check(y))
   check(cons(x, y)) -> cons(x, y)




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   top(sent(x)) -> top(check(rest(x)))
   rest(nil) -> sent(nil)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(sent(x)) -> TOP(check(rest(x)))
   TOP(sent(x)) -> CHECK(rest(x))
   TOP(sent(x)) -> REST(x)
   CHECK(sent(x)) -> CHECK(x)
   CHECK(rest(x)) -> REST(check(x))
   CHECK(rest(x)) -> CHECK(x)

The TRS R consists of the following rules:

   top(sent(x)) -> top(check(rest(x)))
   rest(nil) -> sent(nil)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(rest(x)) -> CHECK(x)
   CHECK(sent(x)) -> CHECK(x)

The TRS R consists of the following rules:

   top(sent(x)) -> top(check(rest(x)))
   rest(nil) -> sent(nil)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CHECK(rest(x)) -> CHECK(x)
   CHECK(sent(x)) -> CHECK(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CHECK(rest(x)) -> CHECK(x)
The graph contains the following edges 1 > 1


*CHECK(sent(x)) -> CHECK(x)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(sent(x)) -> TOP(check(rest(x)))

The TRS R consists of the following rules:

   top(sent(x)) -> top(check(rest(x)))
   rest(nil) -> sent(nil)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TOP(sent(x)) -> TOP(check(rest(x)))

The TRS R consists of the following rules:

   rest(nil) -> sent(nil)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) RFCMatchBoundsDPProof (EQUIVALENT)
Finiteness of the DP problem can be shown by a matchbound of 2. 
As the DP problem is minimal we only have to initialize the certificate graph by the rules of P:

   TOP(sent(x)) -> TOP(check(rest(x)))

To find matches we regarded all rules of R and P:

   rest(nil) -> sent(nil)
   check(sent(x)) -> sent(check(x))
   check(rest(x)) -> rest(check(x))
   TOP(sent(x)) -> TOP(check(rest(x)))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
46, 47, 48, 49, 50, 51, 52, 53, 54, 55

Node 46 is start node and node 47 is final node.

Those nodes are connected through the following edges:

* 46 to 48 labelled TOP_1(0)* 46 to 53 labelled TOP_1(1)* 47 to 47 labelled #_1(0)* 48 to 49 labelled check_1(0)* 48 to 50 labelled rest_1(1)* 48 to 52 labelled sent_1(1)* 49 to 47 labelled rest_1(0)* 49 to 51 labelled sent_1(1)* 50 to 47 labelled check_1(1)* 50 to 50 labelled sent_1(1), rest_1(1)* 51 to 47 labelled nil(1)* 52 to 51 labelled check_1(1)* 53 to 54 labelled check_1(1)* 53 to 55 labelled rest_1(2)* 54 to 52 labelled rest_1(1)* 55 to 52 labelled check_1(2)


----------------------------------------

(16)
YES
