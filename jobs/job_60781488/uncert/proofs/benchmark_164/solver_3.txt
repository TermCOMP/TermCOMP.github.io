YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
check(rest(x)) -> rest(check(x))
check(cons(x,y)) -> cons(check(x),y)
check(cons(x,y)) -> cons(x,check(y))
check(cons(x,y)) -> cons(x,y)
check(sent(x)) -> sent(check(x))
rest(cons(x,y)) -> sent(y)
rest(nil) -> sent(nil)
top(sent(x)) -> top(check(rest(x)))
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 CHECK(rest(x)) -> CHECK(x)
 CHECK(rest(x)) -> REST(check(x))
 CHECK(cons(x,y)) -> CHECK(x)
 CHECK(cons(x,y)) -> CHECK(y)
 CHECK(sent(x)) -> CHECK(x)
 TOP(sent(x)) -> CHECK(rest(x))
 TOP(sent(x)) -> REST(x)
 TOP(sent(x)) -> TOP(check(rest(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))

Problem 1: 

SCC Processor:
-> Pairs:
 CHECK(rest(x)) -> CHECK(x)
 CHECK(rest(x)) -> REST(check(x))
 CHECK(cons(x,y)) -> CHECK(x)
 CHECK(cons(x,y)) -> CHECK(y)
 CHECK(sent(x)) -> CHECK(x)
 TOP(sent(x)) -> CHECK(rest(x))
 TOP(sent(x)) -> REST(x)
 TOP(sent(x)) -> TOP(check(rest(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 CHECK(rest(x)) -> CHECK(x)
 CHECK(cons(x,y)) -> CHECK(x)
 CHECK(cons(x,y)) -> CHECK(y)
 CHECK(sent(x)) -> CHECK(x)
->->-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->->Cycle:
->->-> Pairs:
 TOP(sent(x)) -> TOP(check(rest(x)))
->->-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 CHECK(rest(x)) -> CHECK(x)
 CHECK(cons(x,y)) -> CHECK(x)
 CHECK(cons(x,y)) -> CHECK(y)
 CHECK(sent(x)) -> CHECK(x)
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Projection:
 pi(CHECK) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Narrowing Processor:
-> Pairs:
 TOP(sent(x)) -> TOP(check(rest(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Narrowed Pairs:
->->Original Pair:
 TOP(sent(x)) -> TOP(check(rest(x)))
->-> Narrowed pairs:
 TOP(sent(cons(x,y))) -> TOP(check(sent(y)))
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))

Problem 1.2: 

SCC Processor:
-> Pairs:
 TOP(sent(cons(x,y))) -> TOP(check(sent(y)))
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(sent(cons(x,y))) -> TOP(check(sent(y)))
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))
->->-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 TOP(sent(cons(x,y))) -> TOP(check(sent(y)))
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
-> Usable rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[check](X) = X
[rest](X) = 2.X
[top](X) = 0
[cons](X1,X2) = X1 + 2.X2 + 1
[fSNonEmpty] = 0
[nil] = 2
[sent](X) = 2.X
[CHECK](X) = 0
[REST](X) = 0
[TOP](X) = 2.X

Problem 1.2: 

SCC Processor:
-> Pairs:
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))
->->-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 TOP(sent(nil)) -> TOP(check(sent(nil)))
 TOP(sent(x)) -> TOP(rest(check(x)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
-> Usable rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 2
->Bound:
 1
->Interpretation:
 
[check](X) = [1 0;0 0].X
[rest](X) = [1 1;0 0].X
[top](X) = 0
[cons](X1,X2) = [1 1;0 0].X1 + [1 1;0 0].X2 + [1;0]
[fSNonEmpty] = 0
[nil] = [1;1]
[sent](X) = [1 0;0 0].X + [1;0]
[CHECK](X) = 0
[REST](X) = 0
[TOP](X) = [1 0;1 1].X

Problem 1.2: 

SCC Processor:
-> Pairs:
 TOP(sent(nil)) -> TOP(check(sent(nil)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 TOP(sent(nil)) -> TOP(check(sent(nil)))
->->-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))

Problem 1.2: 

Reduction Pair Processor:
-> Pairs:
 TOP(sent(nil)) -> TOP(check(sent(nil)))
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
-> Usable rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
->Interpretation type:
 Simple mixed
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[check](X) = X.X
[rest](X) = X + 2
[top](X) = 0
[cons](X1,X2) = 2.X1.X2 + 2.X1 + X2 + 1
[fSNonEmpty] = 0
[nil] = 1/2
[sent](X) = X
[CHECK](X) = 0
[REST](X) = 0
[TOP](X) = X.X

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 check(rest(x)) -> rest(check(x))
 check(cons(x,y)) -> cons(check(x),y)
 check(cons(x,y)) -> cons(x,check(y))
 check(cons(x,y)) -> cons(x,y)
 check(sent(x)) -> sent(check(x))
 rest(cons(x,y)) -> sent(y)
 rest(nil) -> sent(nil)
 top(sent(x)) -> top(check(rest(x)))
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
