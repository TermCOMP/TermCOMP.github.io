YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0PuIw.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 17 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(lt, app(s, x)), app(s, y)) -> app(app(lt, x), y)
   app(app(lt, 0), app(s, y)) -> true
   app(app(lt, y), 0) -> false
   app(app(eq, x), x) -> true
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, 0), app(s, x)) -> false
   app(app(member, w), null) -> false
   app(app(member, w), app(app(app(fork, x), y), z)) -> app(app(app(if, app(app(lt, w), y)), app(app(member, w), x)), app(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z)))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(app(lt, app(s, x)), app(s, y)) -> app(app(lt, x), y)
   app(app(lt, 0), app(s, y)) -> true
   app(app(lt, y), 0) -> false
   app(app(eq, x), x) -> true
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, 0), app(s, x)) -> false
   app(app(member, w), null) -> false
   app(app(member, w), app(app(app(fork, x), y), z)) -> app(app(app(if, app(app(lt, w), y)), app(app(member, w), x)), app(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z)))

The set Q consists of the following terms:

   app(app(lt, app(s, x0)), app(s, x1))
   app(app(lt, 0), app(s, x0))
   app(app(lt, x0), 0)
   app(app(eq, x0), x0)
   app(app(eq, app(s, x0)), 0)
   app(app(eq, 0), app(s, x0))
   app(app(member, x0), null)
   app(app(member, x0), app(app(app(fork, x1), x2), x3))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(lt, app(s, x)), app(s, y)) -> APP(app(lt, x), y)
   APP(app(lt, app(s, x)), app(s, y)) -> APP(lt, x)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(app(if, app(app(lt, w), y)), app(app(member, w), x)), app(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z)))
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(if, app(app(lt, w), y)), app(app(member, w), x))
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(if, app(app(lt, w), y))
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(lt, w), y)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(lt, w)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(member, w), x)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z))
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(if, app(app(eq, w), y)), true)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(if, app(app(eq, w), y))
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(eq, w), y)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(eq, w)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(member, w), z)

The TRS R consists of the following rules:

   app(app(lt, app(s, x)), app(s, y)) -> app(app(lt, x), y)
   app(app(lt, 0), app(s, y)) -> true
   app(app(lt, y), 0) -> false
   app(app(eq, x), x) -> true
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, 0), app(s, x)) -> false
   app(app(member, w), null) -> false
   app(app(member, w), app(app(app(fork, x), y), z)) -> app(app(app(if, app(app(lt, w), y)), app(app(member, w), x)), app(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z)))

The set Q consists of the following terms:

   app(app(lt, app(s, x0)), app(s, x1))
   app(app(lt, 0), app(s, x0))
   app(app(lt, x0), 0)
   app(app(eq, x0), x0)
   app(app(eq, app(s, x0)), 0)
   app(app(eq, 0), app(s, x0))
   app(app(member, x0), null)
   app(app(member, x0), app(app(app(fork, x1), x2), x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 11 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(lt, app(s, x)), app(s, y)) -> APP(app(lt, x), y)

The TRS R consists of the following rules:

   app(app(lt, app(s, x)), app(s, y)) -> app(app(lt, x), y)
   app(app(lt, 0), app(s, y)) -> true
   app(app(lt, y), 0) -> false
   app(app(eq, x), x) -> true
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, 0), app(s, x)) -> false
   app(app(member, w), null) -> false
   app(app(member, w), app(app(app(fork, x), y), z)) -> app(app(app(if, app(app(lt, w), y)), app(app(member, w), x)), app(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z)))

The set Q consists of the following terms:

   app(app(lt, app(s, x0)), app(s, x1))
   app(app(lt, 0), app(s, x0))
   app(app(lt, x0), 0)
   app(app(eq, x0), x0)
   app(app(eq, app(s, x0)), 0)
   app(app(eq, 0), app(s, x0))
   app(app(member, x0), null)
   app(app(member, x0), app(app(app(fork, x1), x2), x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(lt, app(s, x)), app(s, y)) -> APP(app(lt, x), y)

R is empty.
The set Q consists of the following terms:

   app(app(lt, app(s, x0)), app(s, x1))
   app(app(lt, 0), app(s, x0))
   app(app(lt, x0), 0)
   app(app(eq, x0), x0)
   app(app(eq, app(s, x0)), 0)
   app(app(eq, 0), app(s, x0))
   app(app(member, x0), null)
   app(app(member, x0), app(app(app(fork, x1), x2), x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   lt1(s(x), s(y)) -> lt1(x, y)

R is empty.
The set Q consists of the following terms:

   lt(s(x0), s(x1))
   lt(0, s(x0))
   lt(x0, 0)
   eq(x0, x0)
   eq(s(x0), 0)
   eq(0, s(x0))
   member(x0, null)
   member(x0, fork(x1, x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(s(x0), s(x1))
   lt(0, s(x0))
   lt(x0, 0)
   eq(x0, x0)
   eq(s(x0), 0)
   eq(0, s(x0))
   member(x0, null)
   member(x0, fork(x1, x2, x3))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   lt1(s(x), s(y)) -> lt1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*lt1(s(x), s(y)) -> lt1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(member, w), z)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(member, w), x)

The TRS R consists of the following rules:

   app(app(lt, app(s, x)), app(s, y)) -> app(app(lt, x), y)
   app(app(lt, 0), app(s, y)) -> true
   app(app(lt, y), 0) -> false
   app(app(eq, x), x) -> true
   app(app(eq, app(s, x)), 0) -> false
   app(app(eq, 0), app(s, x)) -> false
   app(app(member, w), null) -> false
   app(app(member, w), app(app(app(fork, x), y), z)) -> app(app(app(if, app(app(lt, w), y)), app(app(member, w), x)), app(app(app(if, app(app(eq, w), y)), true), app(app(member, w), z)))

The set Q consists of the following terms:

   app(app(lt, app(s, x0)), app(s, x1))
   app(app(lt, 0), app(s, x0))
   app(app(lt, x0), 0)
   app(app(eq, x0), x0)
   app(app(eq, app(s, x0)), 0)
   app(app(eq, 0), app(s, x0))
   app(app(member, x0), null)
   app(app(member, x0), app(app(app(fork, x1), x2), x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(member, w), z)
   APP(app(member, w), app(app(app(fork, x), y), z)) -> APP(app(member, w), x)

R is empty.
The set Q consists of the following terms:

   app(app(lt, app(s, x0)), app(s, x1))
   app(app(lt, 0), app(s, x0))
   app(app(lt, x0), 0)
   app(app(eq, x0), x0)
   app(app(eq, app(s, x0)), 0)
   app(app(eq, 0), app(s, x0))
   app(app(member, x0), null)
   app(app(member, x0), app(app(app(fork, x1), x2), x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   member1(w, fork(x, y, z)) -> member1(w, z)
   member1(w, fork(x, y, z)) -> member1(w, x)

R is empty.
The set Q consists of the following terms:

   lt(s(x0), s(x1))
   lt(0, s(x0))
   lt(x0, 0)
   eq(x0, x0)
   eq(s(x0), 0)
   eq(0, s(x0))
   member(x0, null)
   member(x0, fork(x1, x2, x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lt(s(x0), s(x1))
   lt(0, s(x0))
   lt(x0, 0)
   eq(x0, x0)
   eq(s(x0), 0)
   eq(0, s(x0))
   member(x0, null)
   member(x0, fork(x1, x2, x3))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   member1(w, fork(x, y, z)) -> member1(w, z)
   member1(w, fork(x, y, z)) -> member1(w, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*member1(w, fork(x, y, z)) -> member1(w, z)
The graph contains the following edges 1 >= 1, 2 > 2


*member1(w, fork(x, y, z)) -> member1(w, x)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(24)
YES
