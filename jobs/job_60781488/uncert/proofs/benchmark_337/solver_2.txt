YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PdTkv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 41 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 10 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) MRRProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) PisEmptyProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) QDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) MRRProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) PisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) QDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (37) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log(x) -> -(log'(x), 1(#))
   log'(#) -> #
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(#) = 0
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(-(x_1, x_2)) = x_1 + x_2
   POL(0(x_1)) = 2*x_1
   POL(1(x_1)) = 2*x_1
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + 2*x_2
   POL(if(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(log(x_1)) = 2 + 2*x_1
   POL(log'(x_1)) = 2*x_1
   POL(not(x_1)) = x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   log(x) -> -(log'(x), 1(#))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(#) -> #
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(#) = 0
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(-(x_1, x_2)) = x_1 + x_2
   POL(0(x_1)) = 2*x_1
   POL(1(x_1)) = 2*x_1
   POL(false) = 0
   POL(ge(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(log'(x_1)) = 1 + 2*x_1
   POL(not(x_1)) = x_1
   POL(true) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   log'(#) -> #




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 0(y)) -> 0^1(+(x, y))
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> 0^1(+(+(x, y), 1(#)))
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)
   -^1(0(x), 0(y)) -> 0^1(-(x, y))
   -^1(0(x), 0(y)) -> -^1(x, y)
   -^1(0(x), 1(y)) -> -^1(-(x, y), 1(#))
   -^1(0(x), 1(y)) -> -^1(x, y)
   -^1(1(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 1(y)) -> 0^1(-(x, y))
   -^1(1(x), 1(y)) -> -^1(x, y)
   GE(0(x), 0(y)) -> GE(x, y)
   GE(0(x), 1(y)) -> NOT(ge(y, x))
   GE(0(x), 1(y)) -> GE(y, x)
   GE(1(x), 0(y)) -> GE(x, y)
   GE(1(x), 1(y)) -> GE(x, y)
   GE(#, 0(x)) -> GE(#, x)
   LOG'(1(x)) -> +^1(log'(x), 1(#))
   LOG'(1(x)) -> LOG'(x)
   LOG'(0(x)) -> IF(ge(x, 1(#)), +(log'(x), 1(#)), #)
   LOG'(0(x)) -> GE(x, 1(#))
   LOG'(0(x)) -> +^1(log'(x), 1(#))
   LOG'(0(x)) -> LOG'(x)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 5 SCCs with 9 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(#, 0(x)) -> GE(#, x)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(#, 0(x)) -> GE(#, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(#, 0(x)) -> GE(#, x)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0(x), 1(y)) -> GE(y, x)
   GE(0(x), 0(y)) -> GE(x, y)
   GE(1(x), 0(y)) -> GE(x, y)
   GE(1(x), 1(y)) -> GE(x, y)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GE(0(x), 1(y)) -> GE(y, x)
   GE(0(x), 0(y)) -> GE(x, y)
   GE(1(x), 0(y)) -> GE(x, y)
   GE(1(x), 1(y)) -> GE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GE(0(x), 1(y)) -> GE(y, x)
The graph contains the following edges 2 > 1, 1 > 2


*GE(0(x), 0(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


*GE(1(x), 0(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


*GE(1(x), 1(y)) -> GE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(0(x), 1(y)) -> -^1(-(x, y), 1(#))
   -^1(0(x), 1(y)) -> -^1(x, y)
   -^1(0(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 1(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   -^1(0(x), 1(y)) -> -^1(-(x, y), 1(#))
   -^1(0(x), 1(y)) -> -^1(x, y)
   -^1(0(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 1(y)) -> -^1(x, y)

The TRS R consists of the following rules:

   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   0(#) -> #

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   -^1(0(x), 1(y)) -> -^1(-(x, y), 1(#))
   -^1(0(x), 1(y)) -> -^1(x, y)
   -^1(0(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 0(y)) -> -^1(x, y)
   -^1(1(x), 1(y)) -> -^1(x, y)

Strictly oriented rules of the TRS R:

   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   0(#) -> #

Used ordering: Knuth-Bendix order [KBO] with precedence:-_2 > -^1_2 > 0_1 > 1_1 > #

and weight map:

   #=2
   0_1=5
   1_1=3
   -_2=0
   -^1_2=0

The variable weight is 1

----------------------------------------

(23)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)

The TRS R consists of the following rules:

   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   0(#) -> #

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   +^1(0(x), 1(y)) -> +^1(x, y)
   +^1(0(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 0(y)) -> +^1(x, y)
   +^1(1(x), 1(y)) -> +^1(+(x, y), 1(#))
   +^1(1(x), 1(y)) -> +^1(x, y)
   +^1(+(x, y), z) -> +^1(x, +(y, z))
   +^1(+(x, y), z) -> +^1(y, z)

Strictly oriented rules of the TRS R:

   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   0(#) -> #

Used ordering: Knuth-Bendix order [KBO] with precedence:# > +_2 > 1_1 > 0_1 > +^1_2

and weight map:

   #=2
   0_1=1
   1_1=3
   +_2=0
   +^1_2=0

The variable weight is 1

----------------------------------------

(30)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG'(0(x)) -> LOG'(x)
   LOG'(1(x)) -> LOG'(x)

The TRS R consists of the following rules:

   0(#) -> #
   +(#, x) -> x
   +(x, #) -> x
   +(0(x), 0(y)) -> 0(+(x, y))
   +(0(x), 1(y)) -> 1(+(x, y))
   +(1(x), 0(y)) -> 1(+(x, y))
   +(1(x), 1(y)) -> 0(+(+(x, y), 1(#)))
   +(+(x, y), z) -> +(x, +(y, z))
   -(#, x) -> #
   -(x, #) -> x
   -(0(x), 0(y)) -> 0(-(x, y))
   -(0(x), 1(y)) -> 1(-(-(x, y), 1(#)))
   -(1(x), 0(y)) -> 1(-(x, y))
   -(1(x), 1(y)) -> 0(-(x, y))
   not(true) -> false
   not(false) -> true
   if(true, x, y) -> x
   if(false, x, y) -> y
   ge(0(x), 0(y)) -> ge(x, y)
   ge(0(x), 1(y)) -> not(ge(y, x))
   ge(1(x), 0(y)) -> ge(x, y)
   ge(1(x), 1(y)) -> ge(x, y)
   ge(x, #) -> true
   ge(#, 0(x)) -> ge(#, x)
   ge(#, 1(x)) -> false
   log'(1(x)) -> +(log'(x), 1(#))
   log'(0(x)) -> if(ge(x, 1(#)), +(log'(x), 1(#)), #)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOG'(0(x)) -> LOG'(x)
   LOG'(1(x)) -> LOG'(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LOG'(0(x)) -> LOG'(x)
The graph contains the following edges 1 > 1


*LOG'(1(x)) -> LOG'(x)
The graph contains the following edges 1 > 1


----------------------------------------

(37)
YES
