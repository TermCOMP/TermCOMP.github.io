NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/4g5pl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) NonTerminationLoopProof [COMPLETE, 0 ms]
        (9) NO
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(nil, YS) -> YS
   app(cons(X, XS), YS) -> cons(X, n__app(activate(XS), YS))
   from(X) -> cons(X, n__from(s(X)))
   zWadr(nil, YS) -> nil
   zWadr(XS, nil) -> nil
   zWadr(cons(X, XS), cons(Y, YS)) -> cons(app(Y, cons(X, n__nil)), n__zWadr(activate(XS), activate(YS)))
   prefix(L) -> cons(nil, n__zWadr(L, prefix(L)))
   app(X1, X2) -> n__app(X1, X2)
   from(X) -> n__from(X)
   nil -> n__nil
   zWadr(X1, X2) -> n__zWadr(X1, X2)
   activate(n__app(X1, X2)) -> app(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__nil) -> nil
   activate(n__zWadr(X1, X2)) -> zWadr(X1, X2)
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(X, XS), YS) -> ACTIVATE(XS)
   ZWADR(cons(X, XS), cons(Y, YS)) -> APP(Y, cons(X, n__nil))
   ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
   ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)
   PREFIX(L) -> NIL
   PREFIX(L) -> PREFIX(L)
   ACTIVATE(n__app(X1, X2)) -> APP(X1, X2)
   ACTIVATE(n__from(X)) -> FROM(X)
   ACTIVATE(n__nil) -> NIL
   ACTIVATE(n__zWadr(X1, X2)) -> ZWADR(X1, X2)

The TRS R consists of the following rules:

   app(nil, YS) -> YS
   app(cons(X, XS), YS) -> cons(X, n__app(activate(XS), YS))
   from(X) -> cons(X, n__from(s(X)))
   zWadr(nil, YS) -> nil
   zWadr(XS, nil) -> nil
   zWadr(cons(X, XS), cons(Y, YS)) -> cons(app(Y, cons(X, n__nil)), n__zWadr(activate(XS), activate(YS)))
   prefix(L) -> cons(nil, n__zWadr(L, prefix(L)))
   app(X1, X2) -> n__app(X1, X2)
   from(X) -> n__from(X)
   nil -> n__nil
   zWadr(X1, X2) -> n__zWadr(X1, X2)
   activate(n__app(X1, X2)) -> app(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__nil) -> nil
   activate(n__zWadr(X1, X2)) -> zWadr(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PREFIX(L) -> PREFIX(L)

The TRS R consists of the following rules:

   app(nil, YS) -> YS
   app(cons(X, XS), YS) -> cons(X, n__app(activate(XS), YS))
   from(X) -> cons(X, n__from(s(X)))
   zWadr(nil, YS) -> nil
   zWadr(XS, nil) -> nil
   zWadr(cons(X, XS), cons(Y, YS)) -> cons(app(Y, cons(X, n__nil)), n__zWadr(activate(XS), activate(YS)))
   prefix(L) -> cons(nil, n__zWadr(L, prefix(L)))
   app(X1, X2) -> n__app(X1, X2)
   from(X) -> n__from(X)
   nil -> n__nil
   zWadr(X1, X2) -> n__zWadr(X1, X2)
   activate(n__app(X1, X2)) -> app(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__nil) -> nil
   activate(n__zWadr(X1, X2)) -> zWadr(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PREFIX(L) -> PREFIX(L)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = PREFIX(L) evaluates to  t =PREFIX(L)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from PREFIX(L) to PREFIX(L).




----------------------------------------

(9)
NO

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__app(X1, X2)) -> APP(X1, X2)
   APP(cons(X, XS), YS) -> ACTIVATE(XS)
   ACTIVATE(n__zWadr(X1, X2)) -> ZWADR(X1, X2)
   ZWADR(cons(X, XS), cons(Y, YS)) -> APP(Y, cons(X, n__nil))
   ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
   ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)

The TRS R consists of the following rules:

   app(nil, YS) -> YS
   app(cons(X, XS), YS) -> cons(X, n__app(activate(XS), YS))
   from(X) -> cons(X, n__from(s(X)))
   zWadr(nil, YS) -> nil
   zWadr(XS, nil) -> nil
   zWadr(cons(X, XS), cons(Y, YS)) -> cons(app(Y, cons(X, n__nil)), n__zWadr(activate(XS), activate(YS)))
   prefix(L) -> cons(nil, n__zWadr(L, prefix(L)))
   app(X1, X2) -> n__app(X1, X2)
   from(X) -> n__from(X)
   nil -> n__nil
   zWadr(X1, X2) -> n__zWadr(X1, X2)
   activate(n__app(X1, X2)) -> app(X1, X2)
   activate(n__from(X)) -> from(X)
   activate(n__nil) -> nil
   activate(n__zWadr(X1, X2)) -> zWadr(X1, X2)
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__app(X1, X2)) -> APP(X1, X2)
   APP(cons(X, XS), YS) -> ACTIVATE(XS)
   ACTIVATE(n__zWadr(X1, X2)) -> ZWADR(X1, X2)
   ZWADR(cons(X, XS), cons(Y, YS)) -> APP(Y, cons(X, n__nil))
   ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
   ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(X, XS), YS) -> ACTIVATE(XS)
The graph contains the following edges 1 > 1


*ACTIVATE(n__app(X1, X2)) -> APP(X1, X2)
The graph contains the following edges 1 > 1, 1 > 2


*ACTIVATE(n__zWadr(X1, X2)) -> ZWADR(X1, X2)
The graph contains the following edges 1 > 1, 1 > 2


*ZWADR(cons(X, XS), cons(Y, YS)) -> APP(Y, cons(X, n__nil))
The graph contains the following edges 2 > 1


*ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(XS)
The graph contains the following edges 1 > 1


*ZWADR(cons(X, XS), cons(Y, YS)) -> ACTIVATE(YS)
The graph contains the following edges 2 > 1


----------------------------------------

(14)
YES
