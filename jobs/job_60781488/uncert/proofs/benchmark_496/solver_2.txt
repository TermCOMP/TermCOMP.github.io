YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Bsdc0.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) MRRProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 0 ms]
        (14) QDP
        (15) QDPOrderProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))
   L(f(s(s(y)), f(z, w))) -> L(f(s(0), f(y, f(s(z), w))))
   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, f(s(s(y)), f(z, w))) -> F(s(x), f(y, f(s(z), w)))
   F(x, f(s(s(y)), f(z, w))) -> F(y, f(s(z), w))
   F(x, f(s(s(y)), f(z, w))) -> F(s(z), w)
   L^1(f(s(s(y)), f(z, w))) -> L^1(f(s(0), f(y, f(s(z), w))))
   L^1(f(s(s(y)), f(z, w))) -> F(s(0), f(y, f(s(z), w)))
   L^1(f(s(s(y)), f(z, w))) -> F(y, f(s(z), w))
   L^1(f(s(s(y)), f(z, w))) -> F(s(z), w)
   F(x, f(s(s(y)), nil)) -> F(s(x), f(y, f(s(0), nil)))
   F(x, f(s(s(y)), nil)) -> F(y, f(s(0), nil))
   F(x, f(s(s(y)), nil)) -> F(s(0), nil)

The TRS R consists of the following rules:

   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))
   L(f(s(s(y)), f(z, w))) -> L(f(s(0), f(y, f(s(z), w))))
   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, f(s(s(y)), f(z, w))) -> F(y, f(s(z), w))
   F(x, f(s(s(y)), f(z, w))) -> F(s(x), f(y, f(s(z), w)))
   F(x, f(s(s(y)), f(z, w))) -> F(s(z), w)
   F(x, f(s(s(y)), nil)) -> F(s(x), f(y, f(s(0), nil)))

The TRS R consists of the following rules:

   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))
   L(f(s(s(y)), f(z, w))) -> L(f(s(0), f(y, f(s(z), w))))
   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x, f(s(s(y)), f(z, w))) -> F(y, f(s(z), w))
   F(x, f(s(s(y)), f(z, w))) -> F(s(x), f(y, f(s(z), w)))
   F(x, f(s(s(y)), f(z, w))) -> F(s(z), w)
   F(x, f(s(s(y)), nil)) -> F(s(x), f(y, f(s(0), nil)))

The TRS R consists of the following rules:

   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))
   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   F(x, f(s(s(y)), f(z, w))) -> F(y, f(s(z), w))
   F(x, f(s(s(y)), f(z, w))) -> F(s(x), f(y, f(s(z), w)))
   F(x, f(s(s(y)), f(z, w))) -> F(s(z), w)
   F(x, f(s(s(y)), nil)) -> F(s(x), f(y, f(s(0), nil)))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(F(x_1, x_2)) = x_1 + 2*x_2
   POL(f(x_1, x_2)) = 2*x_1 + x_2
   POL(nil) = 0
   POL(s(x_1)) = 1 + x_1


----------------------------------------

(9)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))
   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   L^1(f(s(s(y)), f(z, w))) -> L^1(f(s(0), f(y, f(s(z), w))))

The TRS R consists of the following rules:

   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))
   L(f(s(s(y)), f(z, w))) -> L(f(s(0), f(y, f(s(z), w))))
   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   L^1(f(s(s(y)), f(z, w))) -> L^1(f(s(0), f(y, f(s(z), w))))

The TRS R consists of the following rules:

   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))
   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   L^1(f(s(s(y)), f(z, w))) -> L^1(f(s(0), f(y, f(s(z), w))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( L^1_1(x_1) ) = max{0, x_1 - 1}
POL( f_2(x_1, x_2) ) = max{0, x_1 + x_2 - 1}
POL( s_1(x_1) ) = x_1 + 2
POL( nil ) = 0
POL( 0 ) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))
   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))


----------------------------------------

(16)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f(x, f(s(s(y)), nil)) -> f(s(x), f(y, f(s(0), nil)))
   f(x, f(s(s(y)), f(z, w))) -> f(s(x), f(y, f(s(z), w)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(18)
YES
