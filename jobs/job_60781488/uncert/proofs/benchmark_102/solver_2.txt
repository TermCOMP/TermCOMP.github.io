NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/1HqXP.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPOrderProof [EQUIVALENT, 0 ms]
(8) QDP
(9) TransformationProof [EQUIVALENT, 0 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QDP
        (14) MNOCProof [EQUIVALENT, 0 ms]
        (15) QDP
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) NonTerminationLoopProof [COMPLETE, 0 ms]
        (20) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, x), y), ap(s, z)) -> AP(ap(ap(g, x), y), ap(ap(x, y), 0))
   AP(ap(ap(g, x), y), ap(s, z)) -> AP(ap(x, y), 0)
   AP(ap(ap(g, x), y), ap(s, z)) -> AP(x, y)

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, x), y), ap(s, z)) -> AP(x, y)
   AP(ap(ap(g, x), y), ap(s, z)) -> AP(ap(ap(g, x), y), ap(ap(x, y), 0))

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   AP(ap(ap(g, x), y), ap(s, z)) -> AP(x, y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
AP(x1, x2)  =  x1

ap(x1, x2)  =  ap(x1, x2)

g  =  g


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   ap_2=1
   g=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, x), y), ap(s, z)) -> AP(ap(ap(g, x), y), ap(ap(x, y), 0))

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule AP(ap(ap(g, x), y), ap(s, z)) -> AP(ap(ap(g, x), y), ap(ap(x, y), 0)) at position [1] we obtained the following new rules [LPAR04]:

   (AP(ap(ap(g, f), x0), ap(s, y2)) -> AP(ap(ap(g, f), x0), ap(x0, 0)),AP(ap(ap(g, f), x0), ap(s, y2)) -> AP(ap(ap(g, f), x0), ap(x0, 0)))
   (AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(s, y2)) -> AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(ap(ap(ap(g, x0), x1), ap(ap(x0, x1), 0)), 0)),AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(s, y2)) -> AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(ap(ap(ap(g, x0), x1), ap(ap(x0, x1), 0)), 0)))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, f), x0), ap(s, y2)) -> AP(ap(ap(g, f), x0), ap(x0, 0))
   AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(s, y2)) -> AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(ap(ap(ap(g, x0), x1), ap(ap(x0, x1), 0)), 0))

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(s, y2)) -> AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(ap(ap(ap(g, x0), x1), ap(ap(x0, x1), 0)), 0))

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(s, y2)) -> AP(ap(ap(g, ap(ap(g, x0), x1)), ap(s, x2)), ap(ap(ap(ap(g, x0), x1), ap(ap(x0, x1), 0)), 0))

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, f), x0), ap(s, y2)) -> AP(ap(ap(g, f), x0), ap(x0, 0))

The TRS R consists of the following rules:

   ap(f, x) -> x
   ap(ap(ap(g, x), y), ap(s, z)) -> ap(ap(ap(g, x), y), ap(ap(x, y), 0))

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP(ap(ap(g, f), x0), ap(s, y2)) -> AP(ap(ap(g, f), x0), ap(x0, 0))

The TRS R consists of the following rules:

   ap(f, x) -> x

The set Q consists of the following terms:

   ap(f, x0)
   ap(ap(ap(g, x0), x1), ap(s, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = AP(ap(ap(g, f), x0), ap(s, y2)) evaluates to  t =AP(ap(ap(g, f), x0), ap(x0, 0))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [x0 / s, y2 / 0]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from AP(ap(ap(g, f), s), ap(s, 0)) to AP(ap(ap(g, f), s), ap(s, 0)).




----------------------------------------

(20)
NO
