YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GrEqv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 10 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) ATransformationProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) ATransformationProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) QDPApplicativeOrderProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) AND
            (30) QDP
                (31) QDPApplicativeOrderProof [EQUIVALENT, 0 ms]
                (32) QDP
                (33) QDPApplicativeOrderProof [EQUIVALENT, 0 ms]
                (34) QDP
                (35) PisEmptyProof [EQUIVALENT, 0 ms]
                (36) YES
            (37) QDP
                (38) UsableRulesProof [EQUIVALENT, 0 ms]
                (39) QDP
                (40) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (41) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(append, a(a(cons, x), xs)), ys) -> A(a(cons, x), a(a(append, xs), ys))
   A(a(append, a(a(cons, x), xs)), ys) -> A(a(append, xs), ys)
   A(a(append, a(a(cons, x), xs)), ys) -> A(append, xs)
   A(a(filter, f), a(a(cons, x), xs)) -> A(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   A(a(filter, f), a(a(cons, x), xs)) -> A(a(if, a(f, x)), x)
   A(a(filter, f), a(a(cons, x), xs)) -> A(if, a(f, x))
   A(a(filter, f), a(a(cons, x), xs)) -> A(f, x)
   A(a(filter, f), a(a(cons, x), xs)) -> A(a(filter, f), xs)
   A(a(le, a(s, x)), a(s, y)) -> A(a(le, x), y)
   A(a(le, a(s, x)), a(s, y)) -> A(le, x)
   A(a(a(if, true), x), xs) -> A(a(cons, x), xs)
   A(a(a(if, true), x), xs) -> A(cons, x)
   A(a(not, f), b) -> A(not2, a(f, b))
   A(a(not, f), b) -> A(f, b)
   A(qs, a(a(cons, x), xs)) -> A(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))
   A(qs, a(a(cons, x), xs)) -> A(append, a(qs, a(a(filter, a(le, x)), xs)))
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))
   A(qs, a(a(cons, x), xs)) -> A(a(filter, a(le, x)), xs)
   A(qs, a(a(cons, x), xs)) -> A(filter, a(le, x))
   A(qs, a(a(cons, x), xs)) -> A(le, x)
   A(qs, a(a(cons, x), xs)) -> A(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs)))
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(not, a(le, x))), xs))
   A(qs, a(a(cons, x), xs)) -> A(a(filter, a(not, a(le, x))), xs)
   A(qs, a(a(cons, x), xs)) -> A(filter, a(not, a(le, x)))
   A(qs, a(a(cons, x), xs)) -> A(not, a(le, x))

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 16 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(le, a(s, x)), a(s, y)) -> A(a(le, x), y)

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(le, a(s, x)), a(s, y)) -> A(a(le, x), y)

R is empty.
The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(x), s(y)) -> le1(x, y)

R is empty.
The set Q consists of the following terms:

   append(nil, x0)
   append(cons(x0, x1), x2)
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   not(x0, x1)
   not2(true)
   not2(false)
   qs(nil)
   qs(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   append(nil, x0)
   append(cons(x0, x1), x2)
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   not(x0, x1)
   not2(true)
   not2(false)
   qs(nil)
   qs(cons(x0, x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   le1(s(x), s(y)) -> le1(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*le1(s(x), s(y)) -> le1(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(append, a(a(cons, x), xs)), ys) -> A(a(append, xs), ys)

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(append, a(a(cons, x), xs)), ys) -> A(a(append, xs), ys)

R is empty.
The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) ATransformationProof (EQUIVALENT)
We have applied the A-Transformation [FROCOS05] to get from an applicative problem to a standard problem. 
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(x, xs), ys) -> append1(xs, ys)

R is empty.
The set Q consists of the following terms:

   append(nil, x0)
   append(cons(x0, x1), x2)
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   not(x0, x1)
   not2(true)
   not2(false)
   qs(nil)
   qs(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   append(nil, x0)
   append(cons(x0, x1), x2)
   filter(x0, nil)
   filter(x0, cons(x1, x2))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   if(true, x0, x1)
   if(false, x0, x1)
   not(x0, x1)
   not2(true)
   not2(false)
   qs(nil)
   qs(cons(x0, x1))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   append1(cons(x, xs), ys) -> append1(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*append1(cons(x, xs), ys) -> append1(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(filter, f), a(a(cons, x), xs)) -> A(a(filter, f), xs)
   A(a(filter, f), a(a(cons, x), xs)) -> A(f, x)
   A(a(not, f), b) -> A(f, b)
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))
   A(qs, a(a(cons, x), xs)) -> A(a(filter, a(le, x)), xs)
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(not, a(le, x))), xs))
   A(qs, a(a(cons, x), xs)) -> A(a(filter, a(not, a(le, x))), xs)

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPApplicativeOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04].First, we preprocessed all pairs by applying the argument filter which replaces every head symbol by its second argument. Then we combined the reduction pair processor [LPAR04,JAR06] with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   (cons(x, xs),xs)
   (cons(x, xs),x)
   (b,b)
   (cons(x, xs),filter(le(x), xs))
   (cons(x, xs),xs)
   (cons(x, xs),filter(not(le(x)), xs))
   (cons(x, xs),xs)

 The a-transformed usable rules are 

   filter(f, cons(x, xs)) -> if(notProper, x, filter(f, xs))
   if(true, x, xs) -> cons(x, xs)
   filter(f, nil) -> nil
   if(false, x, xs) -> xs




The following pairs can be oriented strictly and are deleted.

   A(a(filter, f), a(a(cons, x), xs)) -> A(a(filter, f), xs)
   A(a(filter, f), a(a(cons, x), xs)) -> A(f, x)
   A(qs, a(a(cons, x), xs)) -> A(a(filter, a(le, x)), xs)
   A(qs, a(a(cons, x), xs)) -> A(a(filter, a(not, a(le, x))), xs)
The remaining pairs can at least be oriented weakly.

   A(a(not, f), b) -> A(f, b)
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(not, a(le, x))), xs))
Used ordering:  Polynomial interpretation [POLO]:

   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(false) = 1
   POL(filter(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(le(x_1)) = 1 + x_1
   POL(nil) = 1
   POL(not(x_1)) = x_1
   POL(notProper) = 1
   POL(true) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(filter, f), nil) -> nil
   a(a(a(if, false), x), xs) -> xs


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(not, f), b) -> A(f, b)
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(not, a(le, x))), xs))

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(29)
Complex Obligation (AND)

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(not, a(le, x))), xs))
   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QDPApplicativeOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04].Here, we combined the reduction pair processor [LPAR04,JAR06] with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   (qs1(cons(x, xs)),qs1(filter(not(le(x)), xs)))
   (qs1(cons(x, xs)),qs1(filter(le(x), xs)))

 The a-transformed usable rules are 

   filter(f, cons(x, xs)) -> if(notProper, x, filter(f, xs))
   if(true, x, xs) -> cons(x, xs)
   filter(f, nil) -> nil
   if(false, x, xs) -> xs




The following pairs can be oriented strictly and are deleted.

   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(not, a(le, x))), xs))
The remaining pairs can at least be oriented weakly.

   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))
Used ordering:  Polynomial interpretation [POLO]:

   POL(cons(x_1, x_2)) = 1 + x_1 + x_2
   POL(false) = 1
   POL(filter(x_1, x_2)) = x_1 + x_2
   POL(if(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(le(x_1)) = 1 + x_1
   POL(nil) = 1
   POL(not(x_1)) = 0
   POL(notProper) = 1
   POL(qs1(x_1)) = x_1
   POL(true) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(filter, f), nil) -> nil
   a(a(a(if, false), x), xs) -> xs


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPApplicativeOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04].Here, we combined the reduction pair processor [LPAR04,JAR06] with the A-transformation [FROCOS05] which results in the following intermediate Q-DP Problem.
 The a-transformed P is 

   (qs1(cons(x, xs)),qs1(filter(le(x), xs)))

 The a-transformed usable rules are 

   filter(f, cons(x, xs)) -> if(notProper, x, filter(f, xs))
   if(true, x, xs) -> cons(x, xs)
   filter(f, nil) -> nil
   if(false, x, xs) -> xs




The following pairs can be oriented strictly and are deleted.

   A(qs, a(a(cons, x), xs)) -> A(qs, a(a(filter, a(le, x)), xs))
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( filter_2(x_1, x_2) ) = max{0, 2x_2 - 2}
POL( cons_2(x_1, x_2) ) = 2x_2 + 2
POL( if_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( notProper ) = 2
POL( true ) = 2
POL( nil ) = 0
POL( false ) = 2
POL( qs1_1(x_1) ) = max{0, 2x_1 - 2}
POL( le_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(filter, f), nil) -> nil
   a(a(a(if, false), x), xs) -> xs


----------------------------------------

(34)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(36)
YES

----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(not, f), b) -> A(f, b)

The TRS R consists of the following rules:

   a(a(append, nil), ys) -> ys
   a(a(append, a(a(cons, x), xs)), ys) -> a(a(cons, x), a(a(append, xs), ys))
   a(a(filter, f), nil) -> nil
   a(a(filter, f), a(a(cons, x), xs)) -> a(a(a(if, a(f, x)), x), a(a(filter, f), xs))
   a(a(le, 0), y) -> true
   a(a(le, a(s, x)), 0) -> false
   a(a(le, a(s, x)), a(s, y)) -> a(a(le, x), y)
   a(a(a(if, true), x), xs) -> a(a(cons, x), xs)
   a(a(a(if, false), x), xs) -> xs
   a(a(not, f), b) -> a(not2, a(f, b))
   a(not2, true) -> false
   a(not2, false) -> true
   a(qs, nil) -> nil
   a(qs, a(a(cons, x), xs)) -> a(a(append, a(qs, a(a(filter, a(le, x)), xs))), a(a(cons, x), a(qs, a(a(filter, a(not, a(le, x))), xs))))

The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(not, f), b) -> A(f, b)

R is empty.
The set Q consists of the following terms:

   a(a(append, nil), x0)
   a(a(append, a(a(cons, x0), x1)), x2)
   a(a(filter, x0), nil)
   a(a(filter, x0), a(a(cons, x1), x2))
   a(a(le, 0), x0)
   a(a(le, a(s, x0)), 0)
   a(a(le, a(s, x0)), a(s, x1))
   a(a(a(if, true), x0), x1)
   a(a(a(if, false), x0), x1)
   a(a(not, x0), x1)
   a(not2, true)
   a(not2, false)
   a(qs, nil)
   a(qs, a(a(cons, x0), x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(40) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A(a(not, f), b) -> A(f, b)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(41)
YES
