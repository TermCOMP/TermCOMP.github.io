YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/64TKt.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(f, a) -> app(f, b)
   app(g, b) -> app(g, a)
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   app(f, a) -> app(f, b)
   app(g, b) -> app(g, a)
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(f, a)
   app(g, b)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(f, a) -> APP(f, b)
   APP(g, b) -> APP(g, a)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(cons, app(fun, x)), app(app(map, fun), xs))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(cons, app(fun, x))
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(app(filter2, app(fun, x)), fun), x), xs)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(app(filter2, app(fun, x)), fun), x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(app(filter2, app(fun, x)), fun)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(filter2, app(fun, x))
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(cons, x), app(app(filter, fun), xs))
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(cons, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(filter, fun)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(filter, fun)

The TRS R consists of the following rules:

   app(f, a) -> app(f, b)
   app(g, b) -> app(g, a)
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(f, a)
   app(g, b)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 12 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

The TRS R consists of the following rules:

   app(f, a) -> app(f, b)
   app(g, b) -> app(g, a)
   app(app(map, fun), nil) -> nil
   app(app(map, fun), app(app(cons, x), xs)) -> app(app(cons, app(fun, x)), app(app(map, fun), xs))
   app(app(filter, fun), nil) -> nil
   app(app(filter, fun), app(app(cons, x), xs)) -> app(app(app(app(filter2, app(fun, x)), fun), x), xs)
   app(app(app(app(filter2, true), fun), x), xs) -> app(app(cons, x), app(app(filter, fun), xs))
   app(app(app(app(filter2, false), fun), x), xs) -> app(app(filter, fun), xs)

The set Q consists of the following terms:

   app(f, a)
   app(g, b)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
   APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
   APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
   APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)

R is empty.
The set Q consists of the following terms:

   app(f, a)
   app(g, b)
   app(app(map, x0), nil)
   app(app(map, x0), app(app(cons, x1), x2))
   app(app(filter, x0), nil)
   app(app(filter, x0), app(app(cons, x1), x2))
   app(app(app(app(filter2, true), x0), x1), x2)
   app(app(app(app(filter2, false), x0), x1), x2)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(app(filter, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(fun, x)
The graph contains the following edges 1 > 1, 2 > 2


*APP(app(map, fun), app(app(cons, x), xs)) -> APP(app(map, fun), xs)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(app(app(app(filter2, true), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


*APP(app(app(app(filter2, false), fun), x), xs) -> APP(app(filter, fun), xs)
The graph contains the following edges 2 >= 2


----------------------------------------

(10)
YES
