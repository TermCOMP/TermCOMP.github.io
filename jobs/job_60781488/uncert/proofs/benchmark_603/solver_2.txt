YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ljo7W.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) MRRProof [EQUIVALENT, 0 ms]
(6) QDP
(7) QDPOrderProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   c(c(b(c(x)))) -> b(a(0, c(x)))
   c(c(x)) -> b(c(b(c(x))))
   a(0, x) -> c(c(x))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(b(c(x)))) -> A(0, c(x))
   C(c(x)) -> C(b(c(x)))
   A(0, x) -> C(c(x))
   A(0, x) -> C(x)

The TRS R consists of the following rules:

   c(c(b(c(x)))) -> b(a(0, c(x)))
   c(c(x)) -> b(c(b(c(x))))
   a(0, x) -> c(c(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(0, x) -> C(c(x))
   C(c(b(c(x)))) -> A(0, c(x))
   A(0, x) -> C(x)

The TRS R consists of the following rules:

   c(c(b(c(x)))) -> b(a(0, c(x)))
   c(c(x)) -> b(c(b(c(x))))
   a(0, x) -> c(c(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A(0, x) -> C(x)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(A(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(C(x_1)) = 2*x_1
   POL(a(x_1, x_2)) = 2*x_1 + x_2
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 2 + x_1


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(0, x) -> C(c(x))
   C(c(b(c(x)))) -> A(0, c(x))

The TRS R consists of the following rules:

   c(c(b(c(x)))) -> b(a(0, c(x)))
   c(c(x)) -> b(c(b(c(x))))
   a(0, x) -> c(c(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(c(b(c(x)))) -> A(0, c(x))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] to (N^2, +, *, >=, >) :

   <<<
 POL(A(x_1, x_2)) =  	[[0]] 	 +  	[[0, 1]] 	* 	x_1 	 +  	[[0, 1]] 	* 	x_2
>>>

   <<<
 POL(0) =  	[[1], [1]]
>>>

   <<<
 POL(C(x_1)) =  	[[0]] 	 +  	[[1, 0]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1], [1]] 	 +  	[[0, 1], [1, 0]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0], [1]] 	 +  	[[0, 0], [0, 1]] 	* 	x_1
>>>

   <<<
 POL(a(x_1, x_2)) =  	[[1], [1]] 	 +  	[[1, 1], [0, 1]] 	* 	x_1 	 +  	[[1, 0], [0, 1]] 	* 	x_2
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(b(c(x)))) -> b(a(0, c(x)))
   c(c(x)) -> b(c(b(c(x))))
   a(0, x) -> c(c(x))


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(0, x) -> C(c(x))

The TRS R consists of the following rules:

   c(c(b(c(x)))) -> b(a(0, c(x)))
   c(c(x)) -> b(c(b(c(x))))
   a(0, x) -> c(c(x))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
