NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/O2qVv.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 26 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) NonTerminationLoopProof [COMPLETE, 0 ms]
(10) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(n__b, X, n__c) -> f(X, c, X)
   c -> b
   b -> n__b
   c -> n__c
   activate(n__b) -> b
   activate(n__c) -> c
   activate(X) -> X

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(activate(x_1)) = 2 + 2*x_1
   POL(b) = 0
   POL(c) = 0
   POL(f(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(n__b) = 0
   POL(n__c) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   activate(n__b) -> b
   activate(n__c) -> c
   activate(X) -> X




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(n__b, X, n__c) -> f(X, c, X)
   c -> b
   b -> n__b
   c -> n__c

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(n__b, X, n__c) -> F(X, c, X)
   F(n__b, X, n__c) -> C
   C -> B

The TRS R consists of the following rules:

   f(n__b, X, n__c) -> f(X, c, X)
   c -> b
   b -> n__b
   c -> n__c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(n__b, X, n__c) -> F(X, c, X)

The TRS R consists of the following rules:

   f(n__b, X, n__c) -> f(X, c, X)
   c -> b
   b -> n__b
   c -> n__c

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   f(n__b, X, n__c) -> f(X, c, X)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(F(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(b) = 0
   POL(c) = 0
   POL(n__b) = 0
   POL(n__c) = 0


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(n__b, X, n__c) -> F(X, c, X)

The TRS R consists of the following rules:

   c -> b
   c -> n__c
   b -> n__b

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F(c, X, c) evaluates to  t =F(X, c, X)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [X / c]

--------------------------------------------------------------------------------
Rewriting sequence

F(c, c, c) -> F(c, c, n__c)
with rule c -> n__c at position [2] and matcher [ ]

F(c, c, n__c) -> F(b, c, n__c)
with rule c -> b at position [0] and matcher [ ]

F(b, c, n__c) -> F(n__b, c, n__c)
with rule b -> n__b at position [0] and matcher [ ]

F(n__b, c, n__c) -> F(c, c, c)
with rule F(n__b, X, n__c) -> F(X, c, X)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(10)
NO
