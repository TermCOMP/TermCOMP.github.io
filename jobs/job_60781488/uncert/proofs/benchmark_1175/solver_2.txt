YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4IayF.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) UsableRulesProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) QDP
        (26) UsableRulesProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (29) YES
    (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) QDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) QDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (44) YES
    (45) QDP
        (46) UsableRulesProof [EQUIVALENT, 0 ms]
        (47) QDP
        (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (49) YES
    (50) QDP
        (51) QDPOrderProof [EQUIVALENT, 118 ms]
        (52) QDP
        (53) QDPOrderProof [EQUIVALENT, 169 ms]
        (54) QDP
        (55) UsableRulesProof [EQUIVALENT, 0 ms]
        (56) QDP
        (57) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (58) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(terms(N)) -> MARK(cons(recip(sqr(N)), terms(s(N))))
   ACTIVE(terms(N)) -> CONS(recip(sqr(N)), terms(s(N)))
   ACTIVE(terms(N)) -> RECIP(sqr(N))
   ACTIVE(terms(N)) -> SQR(N)
   ACTIVE(terms(N)) -> TERMS(s(N))
   ACTIVE(terms(N)) -> S(N)
   ACTIVE(sqr(0)) -> MARK(0)
   ACTIVE(sqr(s(X))) -> MARK(s(add(sqr(X), dbl(X))))
   ACTIVE(sqr(s(X))) -> S(add(sqr(X), dbl(X)))
   ACTIVE(sqr(s(X))) -> ADD(sqr(X), dbl(X))
   ACTIVE(sqr(s(X))) -> SQR(X)
   ACTIVE(sqr(s(X))) -> DBL(X)
   ACTIVE(dbl(0)) -> MARK(0)
   ACTIVE(dbl(s(X))) -> MARK(s(s(dbl(X))))
   ACTIVE(dbl(s(X))) -> S(s(dbl(X)))
   ACTIVE(dbl(s(X))) -> S(dbl(X))
   ACTIVE(dbl(s(X))) -> DBL(X)
   ACTIVE(add(0, X)) -> MARK(X)
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   ACTIVE(add(s(X), Y)) -> S(add(X, Y))
   ACTIVE(add(s(X), Y)) -> ADD(X, Y)
   ACTIVE(first(0, X)) -> MARK(nil)
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   ACTIVE(first(s(X), cons(Y, Z))) -> CONS(Y, first(X, Z))
   ACTIVE(first(s(X), cons(Y, Z))) -> FIRST(X, Z)
   ACTIVE(half(0)) -> MARK(0)
   ACTIVE(half(s(0))) -> MARK(0)
   ACTIVE(half(s(s(X)))) -> MARK(s(half(X)))
   ACTIVE(half(s(s(X)))) -> S(half(X))
   ACTIVE(half(s(s(X)))) -> HALF(X)
   ACTIVE(half(dbl(X))) -> MARK(X)
   MARK(terms(X)) -> ACTIVE(terms(mark(X)))
   MARK(terms(X)) -> TERMS(mark(X))
   MARK(terms(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(cons(X1, X2)) -> CONS(mark(X1), X2)
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(recip(X)) -> ACTIVE(recip(mark(X)))
   MARK(recip(X)) -> RECIP(mark(X))
   MARK(recip(X)) -> MARK(X)
   MARK(sqr(X)) -> ACTIVE(sqr(mark(X)))
   MARK(sqr(X)) -> SQR(mark(X))
   MARK(sqr(X)) -> MARK(X)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   MARK(s(X)) -> S(mark(X))
   MARK(s(X)) -> MARK(X)
   MARK(0) -> ACTIVE(0)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   MARK(add(X1, X2)) -> ADD(mark(X1), mark(X2))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(dbl(X)) -> ACTIVE(dbl(mark(X)))
   MARK(dbl(X)) -> DBL(mark(X))
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   MARK(first(X1, X2)) -> FIRST(mark(X1), mark(X2))
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(nil) -> ACTIVE(nil)
   MARK(half(X)) -> ACTIVE(half(mark(X)))
   MARK(half(X)) -> HALF(mark(X))
   MARK(half(X)) -> MARK(X)
   TERMS(mark(X)) -> TERMS(X)
   TERMS(active(X)) -> TERMS(X)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)
   RECIP(mark(X)) -> RECIP(X)
   RECIP(active(X)) -> RECIP(X)
   SQR(mark(X)) -> SQR(X)
   SQR(active(X)) -> SQR(X)
   S(mark(X)) -> S(X)
   S(active(X)) -> S(X)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)
   DBL(mark(X)) -> DBL(X)
   DBL(active(X)) -> DBL(X)
   FIRST(mark(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, mark(X2)) -> FIRST(X1, X2)
   FIRST(active(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, active(X2)) -> FIRST(X1, X2)
   HALF(mark(X)) -> HALF(X)
   HALF(active(X)) -> HALF(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 10 SCCs with 34 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(active(X)) -> HALF(X)
   HALF(mark(X)) -> HALF(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF(active(X)) -> HALF(X)
   HALF(mark(X)) -> HALF(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF(active(X)) -> HALF(X)
The graph contains the following edges 1 > 1


*HALF(mark(X)) -> HALF(X)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(X1, mark(X2)) -> FIRST(X1, X2)
   FIRST(mark(X1), X2) -> FIRST(X1, X2)
   FIRST(active(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, active(X2)) -> FIRST(X1, X2)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FIRST(X1, mark(X2)) -> FIRST(X1, X2)
   FIRST(mark(X1), X2) -> FIRST(X1, X2)
   FIRST(active(X1), X2) -> FIRST(X1, X2)
   FIRST(X1, active(X2)) -> FIRST(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FIRST(X1, mark(X2)) -> FIRST(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*FIRST(mark(X1), X2) -> FIRST(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*FIRST(active(X1), X2) -> FIRST(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*FIRST(X1, active(X2)) -> FIRST(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(active(X)) -> DBL(X)
   DBL(mark(X)) -> DBL(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DBL(active(X)) -> DBL(X)
   DBL(mark(X)) -> DBL(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DBL(active(X)) -> DBL(X)
The graph contains the following edges 1 > 1


*DBL(mark(X)) -> DBL(X)
The graph contains the following edges 1 > 1


----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD(X1, mark(X2)) -> ADD(X1, X2)
   ADD(mark(X1), X2) -> ADD(X1, X2)
   ADD(active(X1), X2) -> ADD(X1, X2)
   ADD(X1, active(X2)) -> ADD(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD(X1, mark(X2)) -> ADD(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*ADD(mark(X1), X2) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ADD(active(X1), X2) -> ADD(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*ADD(X1, active(X2)) -> ADD(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(active(X)) -> S(X)
   S(mark(X)) -> S(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(active(X)) -> S(X)
The graph contains the following edges 1 > 1


*S(mark(X)) -> S(X)
The graph contains the following edges 1 > 1


----------------------------------------

(29)
YES

----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(active(X)) -> SQR(X)
   SQR(mark(X)) -> SQR(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SQR(active(X)) -> SQR(X)
   SQR(mark(X)) -> SQR(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SQR(active(X)) -> SQR(X)
The graph contains the following edges 1 > 1


*SQR(mark(X)) -> SQR(X)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RECIP(active(X)) -> RECIP(X)
   RECIP(mark(X)) -> RECIP(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RECIP(active(X)) -> RECIP(X)
   RECIP(mark(X)) -> RECIP(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*RECIP(active(X)) -> RECIP(X)
The graph contains the following edges 1 > 1


*RECIP(mark(X)) -> RECIP(X)
The graph contains the following edges 1 > 1


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONS(X1, mark(X2)) -> CONS(X1, X2)
   CONS(mark(X1), X2) -> CONS(X1, X2)
   CONS(active(X1), X2) -> CONS(X1, X2)
   CONS(X1, active(X2)) -> CONS(X1, X2)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONS(X1, mark(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


*CONS(mark(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(active(X1), X2) -> CONS(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


*CONS(X1, active(X2)) -> CONS(X1, X2)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(active(X)) -> TERMS(X)
   TERMS(mark(X)) -> TERMS(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERMS(active(X)) -> TERMS(X)
   TERMS(mark(X)) -> TERMS(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TERMS(active(X)) -> TERMS(X)
The graph contains the following edges 1 > 1


*TERMS(mark(X)) -> TERMS(X)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(terms(X)) -> ACTIVE(terms(mark(X)))
   ACTIVE(terms(N)) -> MARK(cons(recip(sqr(N)), terms(s(N))))
   MARK(terms(X)) -> MARK(X)
   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   ACTIVE(sqr(s(X))) -> MARK(s(add(sqr(X), dbl(X))))
   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(recip(X)) -> ACTIVE(recip(mark(X)))
   ACTIVE(dbl(s(X))) -> MARK(s(s(dbl(X))))
   MARK(recip(X)) -> MARK(X)
   MARK(sqr(X)) -> ACTIVE(sqr(mark(X)))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(sqr(X)) -> MARK(X)
   MARK(s(X)) -> ACTIVE(s(mark(X)))
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   MARK(s(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(dbl(X)) -> ACTIVE(dbl(mark(X)))
   ACTIVE(half(s(s(X)))) -> MARK(s(half(X)))
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   ACTIVE(half(dbl(X))) -> MARK(X)
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(half(X)) -> ACTIVE(half(mark(X)))
   MARK(half(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(cons(X1, X2)) -> ACTIVE(cons(mark(X1), X2))
   MARK(recip(X)) -> ACTIVE(recip(mark(X)))
   MARK(s(X)) -> ACTIVE(s(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( ACTIVE_1(x_1) ) = max{0, 2x_1 - 2}
POL( add_2(x_1, x_2) ) = 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( dbl_1(x_1) ) = 2
POL( first_2(x_1, x_2) ) = 2
POL( half_1(x_1) ) = 2
POL( recip_1(x_1) ) = 0
POL( s_1(x_1) ) = max{0, -2}
POL( sqr_1(x_1) ) = 2
POL( terms_1(x_1) ) = 2
POL( mark_1(x_1) ) = max{0, -2}
POL( active_1(x_1) ) = 2
POL( 0 ) = 0
POL( nil ) = 0
POL( MARK_1(x_1) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   terms(active(X)) -> terms(X)
   terms(mark(X)) -> terms(X)
   sqr(active(X)) -> sqr(X)
   sqr(mark(X)) -> sqr(X)
   recip(active(X)) -> recip(X)
   recip(mark(X)) -> recip(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   dbl(active(X)) -> dbl(X)
   dbl(mark(X)) -> dbl(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(mark(X1), X2) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(active(X)) -> half(X)
   half(mark(X)) -> half(X)


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(terms(X)) -> ACTIVE(terms(mark(X)))
   ACTIVE(terms(N)) -> MARK(cons(recip(sqr(N)), terms(s(N))))
   MARK(terms(X)) -> MARK(X)
   ACTIVE(sqr(s(X))) -> MARK(s(add(sqr(X), dbl(X))))
   MARK(cons(X1, X2)) -> MARK(X1)
   ACTIVE(dbl(s(X))) -> MARK(s(s(dbl(X))))
   MARK(recip(X)) -> MARK(X)
   MARK(sqr(X)) -> ACTIVE(sqr(mark(X)))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(sqr(X)) -> MARK(X)
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   MARK(s(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(dbl(X)) -> ACTIVE(dbl(mark(X)))
   ACTIVE(half(s(s(X)))) -> MARK(s(half(X)))
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   ACTIVE(half(dbl(X))) -> MARK(X)
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(half(X)) -> ACTIVE(half(mark(X)))
   MARK(half(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(terms(X)) -> ACTIVE(terms(mark(X)))
   ACTIVE(terms(N)) -> MARK(cons(recip(sqr(N)), terms(s(N))))
   MARK(terms(X)) -> MARK(X)
   ACTIVE(sqr(s(X))) -> MARK(s(add(sqr(X), dbl(X))))
   ACTIVE(dbl(s(X))) -> MARK(s(s(dbl(X))))
   MARK(sqr(X)) -> ACTIVE(sqr(mark(X)))
   ACTIVE(add(0, X)) -> MARK(X)
   MARK(sqr(X)) -> MARK(X)
   ACTIVE(add(s(X), Y)) -> MARK(s(add(X, Y)))
   MARK(s(X)) -> MARK(X)
   MARK(add(X1, X2)) -> ACTIVE(add(mark(X1), mark(X2)))
   ACTIVE(first(s(X), cons(Y, Z))) -> MARK(cons(Y, first(X, Z)))
   MARK(add(X1, X2)) -> MARK(X1)
   MARK(add(X1, X2)) -> MARK(X2)
   MARK(dbl(X)) -> ACTIVE(dbl(mark(X)))
   ACTIVE(half(s(s(X)))) -> MARK(s(half(X)))
   MARK(dbl(X)) -> MARK(X)
   MARK(first(X1, X2)) -> ACTIVE(first(mark(X1), mark(X2)))
   ACTIVE(half(dbl(X))) -> MARK(X)
   MARK(first(X1, X2)) -> MARK(X1)
   MARK(first(X1, X2)) -> MARK(X2)
   MARK(half(X)) -> ACTIVE(half(mark(X)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  MARK(x1)

terms(x1)  =  terms(x1)

ACTIVE(x1)  =  ACTIVE(x1)

mark(x1)  =  x1

cons(x1, x2)  =  x1

recip(x1)  =  x1

sqr(x1)  =  sqr(x1)

s(x1)  =  s(x1)

add(x1, x2)  =  add(x1, x2)

dbl(x1)  =  dbl(x1)

0  =  0

first(x1, x2)  =  first(x1, x2)

half(x1)  =  x1

active(x1)  =  x1

nil  =  nil


Recursive path order with status [RPO].
Quasi-Precedence: terms_1 > sqr_1 > add_2 > [MARK_1, s_1] > ACTIVE_1
terms_1 > sqr_1 > dbl_1 > [MARK_1, s_1] > ACTIVE_1
[0, nil] > [MARK_1, s_1] > ACTIVE_1
first_2 > [MARK_1, s_1] > ACTIVE_1

Status: MARK_1: multiset status
terms_1: [1]
ACTIVE_1: multiset status
sqr_1: [1]
s_1: multiset status
add_2: multiset status
dbl_1: [1]
0: multiset status
first_2: multiset status
nil: multiset status


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(terms(X)) -> active(terms(mark(X)))
   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   mark(recip(X)) -> active(recip(mark(X)))
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   mark(sqr(X)) -> active(sqr(mark(X)))
   active(add(0, X)) -> mark(X)
   mark(s(X)) -> active(s(mark(X)))
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   active(half(s(s(X)))) -> mark(s(half(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   active(half(dbl(X))) -> mark(X)
   mark(half(X)) -> active(half(mark(X)))
   mark(0) -> active(0)
   mark(nil) -> active(nil)
   terms(active(X)) -> terms(X)
   terms(mark(X)) -> terms(X)
   sqr(active(X)) -> sqr(X)
   sqr(mark(X)) -> sqr(X)
   recip(active(X)) -> recip(X)
   recip(mark(X)) -> recip(X)
   s(active(X)) -> s(X)
   s(mark(X)) -> s(X)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   dbl(active(X)) -> dbl(X)
   dbl(mark(X)) -> dbl(X)
   add(X1, mark(X2)) -> add(X1, X2)
   add(mark(X1), X2) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(mark(X1), X2) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(active(X)) -> half(X)
   half(mark(X)) -> half(X)
   active(sqr(0)) -> mark(0)
   active(dbl(0)) -> mark(0)
   active(first(0, X)) -> mark(nil)
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(recip(X)) -> MARK(X)
   MARK(half(X)) -> MARK(X)

The TRS R consists of the following rules:

   active(terms(N)) -> mark(cons(recip(sqr(N)), terms(s(N))))
   active(sqr(0)) -> mark(0)
   active(sqr(s(X))) -> mark(s(add(sqr(X), dbl(X))))
   active(dbl(0)) -> mark(0)
   active(dbl(s(X))) -> mark(s(s(dbl(X))))
   active(add(0, X)) -> mark(X)
   active(add(s(X), Y)) -> mark(s(add(X, Y)))
   active(first(0, X)) -> mark(nil)
   active(first(s(X), cons(Y, Z))) -> mark(cons(Y, first(X, Z)))
   active(half(0)) -> mark(0)
   active(half(s(0))) -> mark(0)
   active(half(s(s(X)))) -> mark(s(half(X)))
   active(half(dbl(X))) -> mark(X)
   mark(terms(X)) -> active(terms(mark(X)))
   mark(cons(X1, X2)) -> active(cons(mark(X1), X2))
   mark(recip(X)) -> active(recip(mark(X)))
   mark(sqr(X)) -> active(sqr(mark(X)))
   mark(s(X)) -> active(s(mark(X)))
   mark(0) -> active(0)
   mark(add(X1, X2)) -> active(add(mark(X1), mark(X2)))
   mark(dbl(X)) -> active(dbl(mark(X)))
   mark(first(X1, X2)) -> active(first(mark(X1), mark(X2)))
   mark(nil) -> active(nil)
   mark(half(X)) -> active(half(mark(X)))
   terms(mark(X)) -> terms(X)
   terms(active(X)) -> terms(X)
   cons(mark(X1), X2) -> cons(X1, X2)
   cons(X1, mark(X2)) -> cons(X1, X2)
   cons(active(X1), X2) -> cons(X1, X2)
   cons(X1, active(X2)) -> cons(X1, X2)
   recip(mark(X)) -> recip(X)
   recip(active(X)) -> recip(X)
   sqr(mark(X)) -> sqr(X)
   sqr(active(X)) -> sqr(X)
   s(mark(X)) -> s(X)
   s(active(X)) -> s(X)
   add(mark(X1), X2) -> add(X1, X2)
   add(X1, mark(X2)) -> add(X1, X2)
   add(active(X1), X2) -> add(X1, X2)
   add(X1, active(X2)) -> add(X1, X2)
   dbl(mark(X)) -> dbl(X)
   dbl(active(X)) -> dbl(X)
   first(mark(X1), X2) -> first(X1, X2)
   first(X1, mark(X2)) -> first(X1, X2)
   first(active(X1), X2) -> first(X1, X2)
   first(X1, active(X2)) -> first(X1, X2)
   half(mark(X)) -> half(X)
   half(active(X)) -> half(X)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(cons(X1, X2)) -> MARK(X1)
   MARK(recip(X)) -> MARK(X)
   MARK(half(X)) -> MARK(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MARK(cons(X1, X2)) -> MARK(X1)
The graph contains the following edges 1 > 1


*MARK(recip(X)) -> MARK(X)
The graph contains the following edges 1 > 1


*MARK(half(X)) -> MARK(X)
The graph contains the following edges 1 > 1


----------------------------------------

(58)
YES
