YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7Js6c.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (14) YES
    (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   Term_sub(Case(m, xi, n), s) -> Frozen(m, Sum_sub(xi, s), n, s)
   Frozen(m, Sum_constant(Left), n, s) -> Term_sub(m, s)
   Frozen(m, Sum_constant(Right), n, s) -> Term_sub(n, s)
   Frozen(m, Sum_term_var(xi), n, s) -> Case(Term_sub(m, s), xi, Term_sub(n, s))
   Term_sub(Term_app(m, n), s) -> Term_app(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_pair(m, n), s) -> Term_pair(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_inl(m), s) -> Term_inl(Term_sub(m, s))
   Term_sub(Term_inr(m), s) -> Term_inr(Term_sub(m, s))
   Term_sub(Term_var(x), Id) -> Term_var(x)
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> m
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_var(x), Cons_sum(xi, k, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_sub(m, s), t) -> Term_sub(m, Concat(s, t))
   Sum_sub(xi, Id) -> Sum_term_var(xi)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_constant(k)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_sub(xi, s)
   Sum_sub(xi, Cons_usual(y, m, s)) -> Sum_sub(xi, s)
   Concat(Concat(s, t), u) -> Concat(s, Concat(t, u))
   Concat(Cons_usual(x, m, s), t) -> Cons_usual(x, Term_sub(m, t), Concat(s, t))
   Concat(Cons_sum(xi, k, s), t) -> Cons_sum(xi, k, Concat(s, t))
   Concat(Id, s) -> s

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERM_SUB(Case(m, xi, n), s) -> FROZEN(m, Sum_sub(xi, s), n, s)
   TERM_SUB(Case(m, xi, n), s) -> SUM_SUB(xi, s)
   FROZEN(m, Sum_constant(Left), n, s) -> TERM_SUB(m, s)
   FROZEN(m, Sum_constant(Right), n, s) -> TERM_SUB(n, s)
   FROZEN(m, Sum_term_var(xi), n, s) -> TERM_SUB(m, s)
   FROZEN(m, Sum_term_var(xi), n, s) -> TERM_SUB(n, s)
   TERM_SUB(Term_app(m, n), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_app(m, n), s) -> TERM_SUB(n, s)
   TERM_SUB(Term_pair(m, n), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_pair(m, n), s) -> TERM_SUB(n, s)
   TERM_SUB(Term_inl(m), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_inr(m), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_var(x), Cons_usual(y, m, s)) -> TERM_SUB(Term_var(x), s)
   TERM_SUB(Term_var(x), Cons_sum(xi, k, s)) -> TERM_SUB(Term_var(x), s)
   TERM_SUB(Term_sub(m, s), t) -> TERM_SUB(m, Concat(s, t))
   TERM_SUB(Term_sub(m, s), t) -> CONCAT(s, t)
   SUM_SUB(xi, Cons_sum(psi, k, s)) -> SUM_SUB(xi, s)
   SUM_SUB(xi, Cons_usual(y, m, s)) -> SUM_SUB(xi, s)
   CONCAT(Concat(s, t), u) -> CONCAT(s, Concat(t, u))
   CONCAT(Concat(s, t), u) -> CONCAT(t, u)
   CONCAT(Cons_usual(x, m, s), t) -> TERM_SUB(m, t)
   CONCAT(Cons_usual(x, m, s), t) -> CONCAT(s, t)
   CONCAT(Cons_sum(xi, k, s), t) -> CONCAT(s, t)

The TRS R consists of the following rules:

   Term_sub(Case(m, xi, n), s) -> Frozen(m, Sum_sub(xi, s), n, s)
   Frozen(m, Sum_constant(Left), n, s) -> Term_sub(m, s)
   Frozen(m, Sum_constant(Right), n, s) -> Term_sub(n, s)
   Frozen(m, Sum_term_var(xi), n, s) -> Case(Term_sub(m, s), xi, Term_sub(n, s))
   Term_sub(Term_app(m, n), s) -> Term_app(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_pair(m, n), s) -> Term_pair(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_inl(m), s) -> Term_inl(Term_sub(m, s))
   Term_sub(Term_inr(m), s) -> Term_inr(Term_sub(m, s))
   Term_sub(Term_var(x), Id) -> Term_var(x)
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> m
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_var(x), Cons_sum(xi, k, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_sub(m, s), t) -> Term_sub(m, Concat(s, t))
   Sum_sub(xi, Id) -> Sum_term_var(xi)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_constant(k)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_sub(xi, s)
   Sum_sub(xi, Cons_usual(y, m, s)) -> Sum_sub(xi, s)
   Concat(Concat(s, t), u) -> Concat(s, Concat(t, u))
   Concat(Cons_usual(x, m, s), t) -> Cons_usual(x, Term_sub(m, t), Concat(s, t))
   Concat(Cons_sum(xi, k, s), t) -> Cons_sum(xi, k, Concat(s, t))
   Concat(Id, s) -> s

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 1 less node.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM_SUB(xi, Cons_usual(y, m, s)) -> SUM_SUB(xi, s)
   SUM_SUB(xi, Cons_sum(psi, k, s)) -> SUM_SUB(xi, s)

The TRS R consists of the following rules:

   Term_sub(Case(m, xi, n), s) -> Frozen(m, Sum_sub(xi, s), n, s)
   Frozen(m, Sum_constant(Left), n, s) -> Term_sub(m, s)
   Frozen(m, Sum_constant(Right), n, s) -> Term_sub(n, s)
   Frozen(m, Sum_term_var(xi), n, s) -> Case(Term_sub(m, s), xi, Term_sub(n, s))
   Term_sub(Term_app(m, n), s) -> Term_app(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_pair(m, n), s) -> Term_pair(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_inl(m), s) -> Term_inl(Term_sub(m, s))
   Term_sub(Term_inr(m), s) -> Term_inr(Term_sub(m, s))
   Term_sub(Term_var(x), Id) -> Term_var(x)
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> m
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_var(x), Cons_sum(xi, k, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_sub(m, s), t) -> Term_sub(m, Concat(s, t))
   Sum_sub(xi, Id) -> Sum_term_var(xi)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_constant(k)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_sub(xi, s)
   Sum_sub(xi, Cons_usual(y, m, s)) -> Sum_sub(xi, s)
   Concat(Concat(s, t), u) -> Concat(s, Concat(t, u))
   Concat(Cons_usual(x, m, s), t) -> Cons_usual(x, Term_sub(m, t), Concat(s, t))
   Concat(Cons_sum(xi, k, s), t) -> Cons_sum(xi, k, Concat(s, t))
   Concat(Id, s) -> s

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM_SUB(xi, Cons_usual(y, m, s)) -> SUM_SUB(xi, s)
   SUM_SUB(xi, Cons_sum(psi, k, s)) -> SUM_SUB(xi, s)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUM_SUB(xi, Cons_usual(y, m, s)) -> SUM_SUB(xi, s)
The graph contains the following edges 1 >= 1, 2 > 2


*SUM_SUB(xi, Cons_sum(psi, k, s)) -> SUM_SUB(xi, s)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERM_SUB(Term_var(x), Cons_sum(xi, k, s)) -> TERM_SUB(Term_var(x), s)
   TERM_SUB(Term_var(x), Cons_usual(y, m, s)) -> TERM_SUB(Term_var(x), s)

The TRS R consists of the following rules:

   Term_sub(Case(m, xi, n), s) -> Frozen(m, Sum_sub(xi, s), n, s)
   Frozen(m, Sum_constant(Left), n, s) -> Term_sub(m, s)
   Frozen(m, Sum_constant(Right), n, s) -> Term_sub(n, s)
   Frozen(m, Sum_term_var(xi), n, s) -> Case(Term_sub(m, s), xi, Term_sub(n, s))
   Term_sub(Term_app(m, n), s) -> Term_app(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_pair(m, n), s) -> Term_pair(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_inl(m), s) -> Term_inl(Term_sub(m, s))
   Term_sub(Term_inr(m), s) -> Term_inr(Term_sub(m, s))
   Term_sub(Term_var(x), Id) -> Term_var(x)
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> m
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_var(x), Cons_sum(xi, k, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_sub(m, s), t) -> Term_sub(m, Concat(s, t))
   Sum_sub(xi, Id) -> Sum_term_var(xi)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_constant(k)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_sub(xi, s)
   Sum_sub(xi, Cons_usual(y, m, s)) -> Sum_sub(xi, s)
   Concat(Concat(s, t), u) -> Concat(s, Concat(t, u))
   Concat(Cons_usual(x, m, s), t) -> Cons_usual(x, Term_sub(m, t), Concat(s, t))
   Concat(Cons_sum(xi, k, s), t) -> Cons_sum(xi, k, Concat(s, t))
   Concat(Id, s) -> s

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TERM_SUB(Term_var(x), Cons_sum(xi, k, s)) -> TERM_SUB(Term_var(x), s)
   TERM_SUB(Term_var(x), Cons_usual(y, m, s)) -> TERM_SUB(Term_var(x), s)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TERM_SUB(Term_var(x), Cons_sum(xi, k, s)) -> TERM_SUB(Term_var(x), s)
The graph contains the following edges 1 >= 1, 2 > 2


*TERM_SUB(Term_var(x), Cons_usual(y, m, s)) -> TERM_SUB(Term_var(x), s)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(14)
YES

----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FROZEN(m, Sum_constant(Left), n, s) -> TERM_SUB(m, s)
   TERM_SUB(Case(m, xi, n), s) -> FROZEN(m, Sum_sub(xi, s), n, s)
   FROZEN(m, Sum_constant(Right), n, s) -> TERM_SUB(n, s)
   TERM_SUB(Term_app(m, n), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_app(m, n), s) -> TERM_SUB(n, s)
   TERM_SUB(Term_pair(m, n), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_pair(m, n), s) -> TERM_SUB(n, s)
   TERM_SUB(Term_inl(m), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_inr(m), s) -> TERM_SUB(m, s)
   TERM_SUB(Term_sub(m, s), t) -> TERM_SUB(m, Concat(s, t))
   TERM_SUB(Term_sub(m, s), t) -> CONCAT(s, t)
   CONCAT(Concat(s, t), u) -> CONCAT(s, Concat(t, u))
   CONCAT(Concat(s, t), u) -> CONCAT(t, u)
   CONCAT(Cons_usual(x, m, s), t) -> TERM_SUB(m, t)
   CONCAT(Cons_usual(x, m, s), t) -> CONCAT(s, t)
   CONCAT(Cons_sum(xi, k, s), t) -> CONCAT(s, t)
   FROZEN(m, Sum_term_var(xi), n, s) -> TERM_SUB(m, s)
   FROZEN(m, Sum_term_var(xi), n, s) -> TERM_SUB(n, s)

The TRS R consists of the following rules:

   Term_sub(Case(m, xi, n), s) -> Frozen(m, Sum_sub(xi, s), n, s)
   Frozen(m, Sum_constant(Left), n, s) -> Term_sub(m, s)
   Frozen(m, Sum_constant(Right), n, s) -> Term_sub(n, s)
   Frozen(m, Sum_term_var(xi), n, s) -> Case(Term_sub(m, s), xi, Term_sub(n, s))
   Term_sub(Term_app(m, n), s) -> Term_app(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_pair(m, n), s) -> Term_pair(Term_sub(m, s), Term_sub(n, s))
   Term_sub(Term_inl(m), s) -> Term_inl(Term_sub(m, s))
   Term_sub(Term_inr(m), s) -> Term_inr(Term_sub(m, s))
   Term_sub(Term_var(x), Id) -> Term_var(x)
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> m
   Term_sub(Term_var(x), Cons_usual(y, m, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_var(x), Cons_sum(xi, k, s)) -> Term_sub(Term_var(x), s)
   Term_sub(Term_sub(m, s), t) -> Term_sub(m, Concat(s, t))
   Sum_sub(xi, Id) -> Sum_term_var(xi)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_constant(k)
   Sum_sub(xi, Cons_sum(psi, k, s)) -> Sum_sub(xi, s)
   Sum_sub(xi, Cons_usual(y, m, s)) -> Sum_sub(xi, s)
   Concat(Concat(s, t), u) -> Concat(s, Concat(t, u))
   Concat(Cons_usual(x, m, s), t) -> Cons_usual(x, Term_sub(m, t), Concat(s, t))
   Concat(Cons_sum(xi, k, s), t) -> Cons_sum(xi, k, Concat(s, t))
   Concat(Id, s) -> s

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TERM_SUB(Case(m, xi, n), s) -> FROZEN(m, Sum_sub(xi, s), n, s)
The graph contains the following edges 1 > 1, 1 > 3, 2 >= 4


*TERM_SUB(Term_sub(m, s), t) -> CONCAT(s, t)
The graph contains the following edges 1 > 1, 2 >= 2


*CONCAT(Cons_usual(x, m, s), t) -> TERM_SUB(m, t)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_app(m, n), s) -> TERM_SUB(m, s)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_app(m, n), s) -> TERM_SUB(n, s)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_pair(m, n), s) -> TERM_SUB(m, s)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_pair(m, n), s) -> TERM_SUB(n, s)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_inl(m), s) -> TERM_SUB(m, s)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_inr(m), s) -> TERM_SUB(m, s)
The graph contains the following edges 1 > 1, 2 >= 2


*TERM_SUB(Term_sub(m, s), t) -> TERM_SUB(m, Concat(s, t))
The graph contains the following edges 1 > 1


*FROZEN(m, Sum_constant(Left), n, s) -> TERM_SUB(m, s)
The graph contains the following edges 1 >= 1, 4 >= 2


*FROZEN(m, Sum_constant(Right), n, s) -> TERM_SUB(n, s)
The graph contains the following edges 3 >= 1, 4 >= 2


*FROZEN(m, Sum_term_var(xi), n, s) -> TERM_SUB(m, s)
The graph contains the following edges 1 >= 1, 4 >= 2


*FROZEN(m, Sum_term_var(xi), n, s) -> TERM_SUB(n, s)
The graph contains the following edges 3 >= 1, 4 >= 2


*CONCAT(Concat(s, t), u) -> CONCAT(s, Concat(t, u))
The graph contains the following edges 1 > 1


*CONCAT(Concat(s, t), u) -> CONCAT(t, u)
The graph contains the following edges 1 > 1, 2 >= 2


*CONCAT(Cons_usual(x, m, s), t) -> CONCAT(s, t)
The graph contains the following edges 1 > 1, 2 >= 2


*CONCAT(Cons_sum(xi, k, s), t) -> CONCAT(s, t)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(17)
YES
