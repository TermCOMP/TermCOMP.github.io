NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/dLtFM.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be disproven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) NonTerminationLoopProof [COMPLETE, 829 ms]
        (14) NO


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   active(f(a, b, X)) -> mark(f(X, X, X))
   active(c) -> mark(a)
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, X2, mark(X3)))
   mark(a) -> active(a)
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVE(f(a, b, X)) -> MARK(f(X, X, X))
   ACTIVE(f(a, b, X)) -> F(X, X, X)
   ACTIVE(c) -> MARK(a)
   ACTIVE(c) -> MARK(b)
   MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, X2, mark(X3)))
   MARK(f(X1, X2, X3)) -> F(X1, X2, mark(X3))
   MARK(f(X1, X2, X3)) -> MARK(X3)
   MARK(a) -> ACTIVE(a)
   MARK(b) -> ACTIVE(b)
   MARK(c) -> ACTIVE(c)
   F(mark(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, mark(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, mark(X3)) -> F(X1, X2, X3)
   F(active(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, active(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, active(X3)) -> F(X1, X2, X3)

The TRS R consists of the following rules:

   active(f(a, b, X)) -> mark(f(X, X, X))
   active(c) -> mark(a)
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, X2, mark(X3)))
   mark(a) -> active(a)
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 7 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2), X3) -> F(X1, X2, X3)
   F(mark(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, X2, mark(X3)) -> F(X1, X2, X3)
   F(active(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, active(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, active(X3)) -> F(X1, X2, X3)

The TRS R consists of the following rules:

   active(f(a, b, X)) -> mark(f(X, X, X))
   active(c) -> mark(a)
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, X2, mark(X3)))
   mark(a) -> active(a)
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(X1, mark(X2), X3) -> F(X1, X2, X3)
   F(mark(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, X2, mark(X3)) -> F(X1, X2, X3)
   F(active(X1), X2, X3) -> F(X1, X2, X3)
   F(X1, active(X2), X3) -> F(X1, X2, X3)
   F(X1, X2, active(X3)) -> F(X1, X2, X3)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(X1, mark(X2), X3) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*F(mark(X1), X2, X3) -> F(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*F(X1, X2, mark(X3)) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*F(active(X1), X2, X3) -> F(X1, X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*F(X1, active(X2), X3) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 > 2, 3 >= 3


*F(X1, X2, active(X3)) -> F(X1, X2, X3)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, X2, mark(X3)))
   ACTIVE(f(a, b, X)) -> MARK(f(X, X, X))
   MARK(f(X1, X2, X3)) -> MARK(X3)

The TRS R consists of the following rules:

   active(f(a, b, X)) -> mark(f(X, X, X))
   active(c) -> mark(a)
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, X2, mark(X3)))
   mark(a) -> active(a)
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   MARK(f(X1, X2, X3)) -> MARK(X3)
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
MARK(x1)  =  x1

f(x1, x2, x3)  =  f(x3)

ACTIVE(x1)  =  x1

mark(x1)  =  x1

active(x1)  =  x1

a  =  a

b  =  b

c  =  c


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   a=1
   b=2
   c=3
   f_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   mark(f(X1, X2, X3)) -> active(f(X1, X2, mark(X3)))
   active(f(a, b, X)) -> mark(f(X, X, X))
   mark(a) -> active(a)
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)
   active(c) -> mark(a)
   active(c) -> mark(b)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, X2, mark(X3)))
   ACTIVE(f(a, b, X)) -> MARK(f(X, X, X))

The TRS R consists of the following rules:

   active(f(a, b, X)) -> mark(f(X, X, X))
   active(c) -> mark(a)
   active(c) -> mark(b)
   mark(f(X1, X2, X3)) -> active(f(X1, X2, mark(X3)))
   mark(a) -> active(a)
   mark(b) -> active(b)
   mark(c) -> active(c)
   f(mark(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, mark(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, mark(X3)) -> f(X1, X2, X3)
   f(active(X1), X2, X3) -> f(X1, X2, X3)
   f(X1, active(X2), X3) -> f(X1, X2, X3)
   f(X1, X2, active(X3)) -> f(X1, X2, X3)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = ACTIVE(f(active(c), active(c), mark(X3))) evaluates to  t =ACTIVE(f(X3, X3, mark(X3)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [X3 / active(c)]

--------------------------------------------------------------------------------
Rewriting sequence

ACTIVE(f(active(c), active(c), mark(active(c)))) -> ACTIVE(f(active(c), mark(b), mark(active(c))))
with rule active(c) -> mark(b) at position [0,1] and matcher [ ]

ACTIVE(f(active(c), mark(b), mark(active(c)))) -> ACTIVE(f(mark(a), mark(b), mark(active(c))))
with rule active(c) -> mark(a) at position [0,0] and matcher [ ]

ACTIVE(f(mark(a), mark(b), mark(active(c)))) -> ACTIVE(f(mark(a), mark(b), active(c)))
with rule f(X1, X2, mark(X3)) -> f(X1, X2, X3) at position [0] and matcher [X1 / mark(a), X2 / mark(b), X3 / active(c)]

ACTIVE(f(mark(a), mark(b), active(c))) -> ACTIVE(f(mark(a), b, active(c)))
with rule f(X1, mark(X2), X3') -> f(X1, X2, X3') at position [0] and matcher [X1 / mark(a), X2 / b, X3' / active(c)]

ACTIVE(f(mark(a), b, active(c))) -> ACTIVE(f(a, b, active(c)))
with rule f(mark(X1), X2, X3) -> f(X1, X2, X3) at position [0] and matcher [X1 / a, X2 / b, X3 / active(c)]

ACTIVE(f(a, b, active(c))) -> MARK(f(active(c), active(c), active(c)))
with rule ACTIVE(f(a, b, X)) -> MARK(f(X, X, X)) at position [] and matcher [X / active(c)]

MARK(f(active(c), active(c), active(c))) -> ACTIVE(f(active(c), active(c), mark(active(c))))
with rule MARK(f(X1, X2, X3)) -> ACTIVE(f(X1, X2, mark(X3)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(14)
NO
