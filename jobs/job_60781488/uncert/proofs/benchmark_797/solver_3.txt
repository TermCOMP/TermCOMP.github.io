YES

Problem 1: 

(VAR vu95NonEmpty x y)
(RULES
if(ffalse,x,y) -> y
if(ftrue,x,y) -> x
le(num0,y) -> ftrue
le(s(x),num0) -> ffalse
le(s(x),s(y)) -> le(x,y)
minus(x,num0) -> x
minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
p(num0) -> num0
p(s(x)) -> x
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
 MINUS(x,s(y)) -> IF(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 MINUS(x,s(y)) -> LE(x,s(y))
 MINUS(x,s(y)) -> MINUS(x,p(s(y)))
 MINUS(x,s(y)) -> P(minus(x,p(s(y))))
 MINUS(x,s(y)) -> P(s(y))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x

Problem 1: 

SCC Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
 MINUS(x,s(y)) -> IF(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 MINUS(x,s(y)) -> LE(x,s(y))
 MINUS(x,s(y)) -> MINUS(x,p(s(y)))
 MINUS(x,s(y)) -> P(minus(x,p(s(y))))
 MINUS(x,s(y)) -> P(s(y))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
->->-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
->->Cycle:
->->-> Pairs:
 MINUS(x,s(y)) -> MINUS(x,p(s(y)))
->->-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 LE(s(x),s(y)) -> LE(x,y)
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
->Projection:
 pi(LE) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Reduction Pairs Processor:
-> Pairs:
 MINUS(x,s(y)) -> MINUS(x,p(s(y)))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
-> Usable rules:
 p(num0) -> num0
 p(s(x)) -> x
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[if](X1,X2,X3) = 0
[le](X1,X2) = 0
[minus](X1,X2) = 0
[p](X) = 1/2.X + 1/2
[num0] = 1/2
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 2
[ftrue] = 0
[IF](X1,X2,X3) = 0
[LE](X1,X2) = 0
[MINUS](X1,X2) = 2.X2
[P](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 le(num0,y) -> ftrue
 le(s(x),num0) -> ffalse
 le(s(x),s(y)) -> le(x,y)
 minus(x,num0) -> x
 minus(x,s(y)) -> if(le(x,s(y)),num0,p(minus(x,p(s(y)))))
 p(num0) -> num0
 p(s(x)) -> x
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
