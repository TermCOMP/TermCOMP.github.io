YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9JWlU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(x, s(y)) -> if(le(x, s(y)), 0, p(minus(x, p(s(y)))))
   if(true, x, y) -> x
   if(false, x, y) -> y

Q is empty.

----------------------------------------

(1) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(x, s(y)) -> if(le(x, s(y)), 0, p(minus(x, p(s(y)))))
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)
   MINUS(x, s(y)) -> IF(le(x, s(y)), 0, p(minus(x, p(s(y)))))
   MINUS(x, s(y)) -> LE(x, s(y))
   MINUS(x, s(y)) -> P(minus(x, p(s(y))))
   MINUS(x, s(y)) -> MINUS(x, p(s(y)))
   MINUS(x, s(y)) -> P(s(y))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(x, s(y)) -> if(le(x, s(y)), 0, p(minus(x, p(s(y)))))
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(x, s(y)) -> if(le(x, s(y)), 0, p(minus(x, p(s(y)))))
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
The set Q consists of the following terms:

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE(s(x), s(y)) -> LE(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE(s(x), s(y)) -> LE(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, s(y)) -> MINUS(x, p(s(y)))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   le(0, y) -> true
   le(s(x), 0) -> false
   le(s(x), s(y)) -> le(x, y)
   minus(x, 0) -> x
   minus(x, s(y)) -> if(le(x, s(y)), 0, p(minus(x, p(s(y)))))
   if(true, x, y) -> x
   if(false, x, y) -> y

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, s(y)) -> MINUS(x, p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(0)
   p(s(x0))
   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   le(0, x0)
   le(s(x0), 0)
   le(s(x0), s(x1))
   minus(x0, 0)
   minus(x0, s(x1))
   if(true, x0, x1)
   if(false, x0, x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, s(y)) -> MINUS(x, p(s(y)))

The TRS R consists of the following rules:

   p(s(x)) -> x

The set Q consists of the following terms:

   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   p(s(x)) -> x

Used ordering: Polynomial interpretation [POLO]:

   POL(MINUS(x_1, x_2)) = x_1 + 2*x_2
   POL(p(x_1)) = x_1
   POL(s(x_1)) = 2 + x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(x, s(y)) -> MINUS(x, p(s(y)))

R is empty.
The set Q consists of the following terms:

   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(22)
TRUE
