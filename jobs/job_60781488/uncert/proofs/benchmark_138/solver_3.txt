YES

Problem 1: 

(VAR vu95NonEmpty fun x xs y)
(RULES
app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
app(app(filter,fun),nil) -> nil
app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
app(app(map,fun),nil) -> nil
app(f,app(s,x)) -> app(f,x)
app(f,num0) -> ftrue
app(f,num1) -> ffalse
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(g,x),app(c,y)) -> APP(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y))
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,x)),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 APP(app(g,x),app(c,y)) -> APP(app(g,x),y)
 APP(app(g,x),app(c,y)) -> APP(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y)))
 APP(app(g,x),app(c,y)) -> APP(c,app(app(g,app(s,x)),y))
 APP(app(g,x),app(c,y)) -> APP(c,app(app(g,x),y))
 APP(app(g,x),app(c,y)) -> APP(f,x)
 APP(app(g,x),app(c,y)) -> APP(if,app(f,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(cons,x),app(app(filter,fun),xs))
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(filter2,app(fun,x)),fun),x)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(filter2,app(fun,x)),fun)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(filter2,app(fun,x))
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(g,x),app(c,y)) -> APP(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y))
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,x)),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 APP(app(g,x),app(c,y)) -> APP(app(g,x),y)
 APP(app(g,x),app(c,y)) -> APP(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y)))
 APP(app(g,x),app(c,y)) -> APP(c,app(app(g,app(s,x)),y))
 APP(app(g,x),app(c,y)) -> APP(c,app(app(g,x),y))
 APP(app(g,x),app(c,y)) -> APP(f,x)
 APP(app(g,x),app(c,y)) -> APP(if,app(f,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(cons,app(fun,x)),app(app(map,fun),xs))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(cons,app(fun,x))
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(f,app(s,x)) -> APP(f,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->->Cycle:
->->-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,x)),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),y)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->->Cycle:
->->-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
->->-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Subterm Processor:
-> Pairs:
 APP(f,app(s,x)) -> APP(f,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Projection:
 pi(APP) = 2

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(g,x),app(c,y)) -> APP(app(g,app(s,x)),y)
 APP(app(g,x),app(c,y)) -> APP(app(g,x),y)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Subterm Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(app(app(app(filter2,app(fun,x)),fun),x),xs)
 APP(app(filter,fun),app(app(cons,x),xs)) -> APP(fun,x)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(app(map,fun),xs)
 APP(app(map,fun),app(app(cons,x),xs)) -> APP(fun,x)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Projection:
 pi(APP) = 2

Problem 1.3: 

SCC Processor:
-> Pairs:
 APP(app(app(app(filter2,ffalse),fun),x),xs) -> APP(app(filter,fun),xs)
 APP(app(app(app(filter2,ftrue),fun),x),xs) -> APP(app(filter,fun),xs)
-> Rules:
 app(app(app(app(filter2,ffalse),fun),x),xs) -> app(app(filter,fun),xs)
 app(app(app(app(filter2,ftrue),fun),x),xs) -> app(app(cons,x),app(app(filter,fun),xs))
 app(app(app(if,ffalse),app(s,x)),app(s,y)) -> app(s,y)
 app(app(app(if,ftrue),app(s,x)),app(s,y)) -> app(s,x)
 app(app(filter,fun),app(app(cons,x),xs)) -> app(app(app(app(filter2,app(fun,x)),fun),x),xs)
 app(app(filter,fun),nil) -> nil
 app(app(g,x),app(c,y)) -> app(app(g,x),app(app(app(if,app(f,x)),app(c,app(app(g,app(s,x)),y))),app(c,y)))
 app(app(g,x),app(c,y)) -> app(c,app(app(g,x),y))
 app(app(map,fun),app(app(cons,x),xs)) -> app(app(cons,app(fun,x)),app(app(map,fun),xs))
 app(app(map,fun),nil) -> nil
 app(f,app(s,x)) -> app(f,x)
 app(f,num0) -> ftrue
 app(f,num1) -> ffalse
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
