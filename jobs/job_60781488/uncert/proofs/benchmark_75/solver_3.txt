YES

Problem 1: 

(VAR vu95NonEmpty f x xs y)
(RULES
app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
app(app(map,f),nil) -> nil
app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
app(app(plus,num0),y) -> y
app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
-> The term rewriting system is non-overlaping or locally confluent overlay system. Therefore, innermost termination implies termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(plus,app(s,x)),y) -> APP(app(plus,x),y)
 APP(app(plus,app(s,x)),y) -> APP(s,app(app(plus,x),y))
 APP(inc,xs) -> APP(app(map,app(plus,app(s,num0))),xs)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)

Problem 1: 

SCC Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(cons,app(f,x)),app(app(map,f),xs))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(cons,app(f,x))
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(app(plus,app(s,x)),y) -> APP(app(plus,x),y)
 APP(app(plus,app(s,x)),y) -> APP(s,app(app(plus,x),y))
 APP(inc,xs) -> APP(app(map,app(plus,app(s,num0))),xs)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 APP(app(plus,app(s,x)),y) -> APP(app(plus,x),y)
->->-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
->->Cycle:
->->-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(inc,xs) -> APP(app(map,app(plus,app(s,num0))),xs)
->->-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Reduction Pairs Processor:
-> Pairs:
 APP(app(plus,app(s,x)),y) -> APP(app(plus,x),y)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
-> Usable rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
->Interpretation type:
 Simple mixed
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[app](X1,X2) = 2.X1.X2 + 2.X1
[num0] = 2
[cons] = 0
[fSNonEmpty] = 0
[inc] = 0
[map] = 0
[nil] = 0
[plus] = 2
[s] = 2
[APP](X1,X2) = 2.X1

Problem 1.1: 

SCC Processor:
-> Pairs:
 Empty
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

Subterm Processor:
-> Pairs:
 APP(app(map,f),app(app(cons,x),xs)) -> APP(app(map,f),xs)
 APP(app(map,f),app(app(cons,x),xs)) -> APP(f,x)
 APP(inc,xs) -> APP(app(map,app(plus,app(s,num0))),xs)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
->Projection:
 pi(APP) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 APP(inc,xs) -> APP(app(map,app(plus,app(s,num0))),xs)
-> Rules:
 app(app(map,f),app(app(cons,x),xs)) -> app(app(cons,app(f,x)),app(app(map,f),xs))
 app(app(map,f),nil) -> nil
 app(app(plus,app(s,x)),y) -> app(s,app(app(plus,x),y))
 app(app(plus,num0),y) -> y
 app(inc,xs) -> app(app(map,app(plus,app(s,num0))),xs)
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
