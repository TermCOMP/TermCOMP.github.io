YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5yJC3.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) QDPOrderProof [EQUIVALENT, 16 ms]
        (12) QDP
        (13) DependencyGraphProof [EQUIVALENT, 0 ms]
        (14) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   U11(tt, N, XS) -> U12(tt, activate(N), activate(XS))
   U12(tt, N, XS) -> snd(splitAt(activate(N), activate(XS)))
   U21(tt, X) -> U22(tt, activate(X))
   U22(tt, X) -> activate(X)
   U31(tt, N) -> U32(tt, activate(N))
   U32(tt, N) -> activate(N)
   U41(tt, N, XS) -> U42(tt, activate(N), activate(XS))
   U42(tt, N, XS) -> head(afterNth(activate(N), activate(XS)))
   U51(tt, Y) -> U52(tt, activate(Y))
   U52(tt, Y) -> activate(Y)
   U61(tt, N, X, XS) -> U62(tt, activate(N), activate(X), activate(XS))
   U62(tt, N, X, XS) -> U63(tt, activate(N), activate(X), activate(XS))
   U63(tt, N, X, XS) -> U64(splitAt(activate(N), activate(XS)), activate(X))
   U64(pair(YS, ZS), X) -> pair(cons(activate(X), YS), ZS)
   U71(tt, XS) -> U72(tt, activate(XS))
   U72(tt, XS) -> activate(XS)
   U81(tt, N, XS) -> U82(tt, activate(N), activate(XS))
   U82(tt, N, XS) -> fst(splitAt(activate(N), activate(XS)))
   afterNth(N, XS) -> U11(tt, N, XS)
   fst(pair(X, Y)) -> U21(tt, X)
   head(cons(N, XS)) -> U31(tt, N)
   natsFrom(N) -> cons(N, n__natsFrom(n__s(N)))
   sel(N, XS) -> U41(tt, N, XS)
   snd(pair(X, Y)) -> U51(tt, Y)
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U61(tt, N, X, activate(XS))
   tail(cons(N, XS)) -> U71(tt, activate(XS))
   take(N, XS) -> U81(tt, N, XS)
   natsFrom(X) -> n__natsFrom(X)
   s(X) -> n__s(X)
   activate(n__natsFrom(X)) -> natsFrom(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11^1(tt, N, XS) -> U12^1(tt, activate(N), activate(XS))
   U11^1(tt, N, XS) -> ACTIVATE(N)
   U11^1(tt, N, XS) -> ACTIVATE(XS)
   U12^1(tt, N, XS) -> SND(splitAt(activate(N), activate(XS)))
   U12^1(tt, N, XS) -> SPLITAT(activate(N), activate(XS))
   U12^1(tt, N, XS) -> ACTIVATE(N)
   U12^1(tt, N, XS) -> ACTIVATE(XS)
   U21^1(tt, X) -> U22^1(tt, activate(X))
   U21^1(tt, X) -> ACTIVATE(X)
   U22^1(tt, X) -> ACTIVATE(X)
   U31^1(tt, N) -> U32^1(tt, activate(N))
   U31^1(tt, N) -> ACTIVATE(N)
   U32^1(tt, N) -> ACTIVATE(N)
   U41^1(tt, N, XS) -> U42^1(tt, activate(N), activate(XS))
   U41^1(tt, N, XS) -> ACTIVATE(N)
   U41^1(tt, N, XS) -> ACTIVATE(XS)
   U42^1(tt, N, XS) -> HEAD(afterNth(activate(N), activate(XS)))
   U42^1(tt, N, XS) -> AFTERNTH(activate(N), activate(XS))
   U42^1(tt, N, XS) -> ACTIVATE(N)
   U42^1(tt, N, XS) -> ACTIVATE(XS)
   U51^1(tt, Y) -> U52^1(tt, activate(Y))
   U51^1(tt, Y) -> ACTIVATE(Y)
   U52^1(tt, Y) -> ACTIVATE(Y)
   U61^1(tt, N, X, XS) -> U62^1(tt, activate(N), activate(X), activate(XS))
   U61^1(tt, N, X, XS) -> ACTIVATE(N)
   U61^1(tt, N, X, XS) -> ACTIVATE(X)
   U61^1(tt, N, X, XS) -> ACTIVATE(XS)
   U62^1(tt, N, X, XS) -> U63^1(tt, activate(N), activate(X), activate(XS))
   U62^1(tt, N, X, XS) -> ACTIVATE(N)
   U62^1(tt, N, X, XS) -> ACTIVATE(X)
   U62^1(tt, N, X, XS) -> ACTIVATE(XS)
   U63^1(tt, N, X, XS) -> U64^1(splitAt(activate(N), activate(XS)), activate(X))
   U63^1(tt, N, X, XS) -> SPLITAT(activate(N), activate(XS))
   U63^1(tt, N, X, XS) -> ACTIVATE(N)
   U63^1(tt, N, X, XS) -> ACTIVATE(XS)
   U63^1(tt, N, X, XS) -> ACTIVATE(X)
   U64^1(pair(YS, ZS), X) -> ACTIVATE(X)
   U71^1(tt, XS) -> U72^1(tt, activate(XS))
   U71^1(tt, XS) -> ACTIVATE(XS)
   U72^1(tt, XS) -> ACTIVATE(XS)
   U81^1(tt, N, XS) -> U82^1(tt, activate(N), activate(XS))
   U81^1(tt, N, XS) -> ACTIVATE(N)
   U81^1(tt, N, XS) -> ACTIVATE(XS)
   U82^1(tt, N, XS) -> FST(splitAt(activate(N), activate(XS)))
   U82^1(tt, N, XS) -> SPLITAT(activate(N), activate(XS))
   U82^1(tt, N, XS) -> ACTIVATE(N)
   U82^1(tt, N, XS) -> ACTIVATE(XS)
   AFTERNTH(N, XS) -> U11^1(tt, N, XS)
   FST(pair(X, Y)) -> U21^1(tt, X)
   HEAD(cons(N, XS)) -> U31^1(tt, N)
   SEL(N, XS) -> U41^1(tt, N, XS)
   SND(pair(X, Y)) -> U51^1(tt, Y)
   SPLITAT(s(N), cons(X, XS)) -> U61^1(tt, N, X, activate(XS))
   SPLITAT(s(N), cons(X, XS)) -> ACTIVATE(XS)
   TAIL(cons(N, XS)) -> U71^1(tt, activate(XS))
   TAIL(cons(N, XS)) -> ACTIVATE(XS)
   TAKE(N, XS) -> U81^1(tt, N, XS)
   ACTIVATE(n__natsFrom(X)) -> NATSFROM(activate(X))
   ACTIVATE(n__natsFrom(X)) -> ACTIVATE(X)
   ACTIVATE(n__s(X)) -> S(activate(X))
   ACTIVATE(n__s(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   U11(tt, N, XS) -> U12(tt, activate(N), activate(XS))
   U12(tt, N, XS) -> snd(splitAt(activate(N), activate(XS)))
   U21(tt, X) -> U22(tt, activate(X))
   U22(tt, X) -> activate(X)
   U31(tt, N) -> U32(tt, activate(N))
   U32(tt, N) -> activate(N)
   U41(tt, N, XS) -> U42(tt, activate(N), activate(XS))
   U42(tt, N, XS) -> head(afterNth(activate(N), activate(XS)))
   U51(tt, Y) -> U52(tt, activate(Y))
   U52(tt, Y) -> activate(Y)
   U61(tt, N, X, XS) -> U62(tt, activate(N), activate(X), activate(XS))
   U62(tt, N, X, XS) -> U63(tt, activate(N), activate(X), activate(XS))
   U63(tt, N, X, XS) -> U64(splitAt(activate(N), activate(XS)), activate(X))
   U64(pair(YS, ZS), X) -> pair(cons(activate(X), YS), ZS)
   U71(tt, XS) -> U72(tt, activate(XS))
   U72(tt, XS) -> activate(XS)
   U81(tt, N, XS) -> U82(tt, activate(N), activate(XS))
   U82(tt, N, XS) -> fst(splitAt(activate(N), activate(XS)))
   afterNth(N, XS) -> U11(tt, N, XS)
   fst(pair(X, Y)) -> U21(tt, X)
   head(cons(N, XS)) -> U31(tt, N)
   natsFrom(N) -> cons(N, n__natsFrom(n__s(N)))
   sel(N, XS) -> U41(tt, N, XS)
   snd(pair(X, Y)) -> U51(tt, Y)
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U61(tt, N, X, activate(XS))
   tail(cons(N, XS)) -> U71(tt, activate(XS))
   take(N, XS) -> U81(tt, N, XS)
   natsFrom(X) -> n__natsFrom(X)
   s(X) -> n__s(X)
   activate(n__natsFrom(X)) -> natsFrom(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 55 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__natsFrom(X)) -> ACTIVATE(X)

The TRS R consists of the following rules:

   U11(tt, N, XS) -> U12(tt, activate(N), activate(XS))
   U12(tt, N, XS) -> snd(splitAt(activate(N), activate(XS)))
   U21(tt, X) -> U22(tt, activate(X))
   U22(tt, X) -> activate(X)
   U31(tt, N) -> U32(tt, activate(N))
   U32(tt, N) -> activate(N)
   U41(tt, N, XS) -> U42(tt, activate(N), activate(XS))
   U42(tt, N, XS) -> head(afterNth(activate(N), activate(XS)))
   U51(tt, Y) -> U52(tt, activate(Y))
   U52(tt, Y) -> activate(Y)
   U61(tt, N, X, XS) -> U62(tt, activate(N), activate(X), activate(XS))
   U62(tt, N, X, XS) -> U63(tt, activate(N), activate(X), activate(XS))
   U63(tt, N, X, XS) -> U64(splitAt(activate(N), activate(XS)), activate(X))
   U64(pair(YS, ZS), X) -> pair(cons(activate(X), YS), ZS)
   U71(tt, XS) -> U72(tt, activate(XS))
   U72(tt, XS) -> activate(XS)
   U81(tt, N, XS) -> U82(tt, activate(N), activate(XS))
   U82(tt, N, XS) -> fst(splitAt(activate(N), activate(XS)))
   afterNth(N, XS) -> U11(tt, N, XS)
   fst(pair(X, Y)) -> U21(tt, X)
   head(cons(N, XS)) -> U31(tt, N)
   natsFrom(N) -> cons(N, n__natsFrom(n__s(N)))
   sel(N, XS) -> U41(tt, N, XS)
   snd(pair(X, Y)) -> U51(tt, Y)
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U61(tt, N, X, activate(XS))
   tail(cons(N, XS)) -> U71(tt, activate(XS))
   take(N, XS) -> U81(tt, N, XS)
   natsFrom(X) -> n__natsFrom(X)
   s(X) -> n__s(X)
   activate(n__natsFrom(X)) -> natsFrom(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACTIVATE(n__s(X)) -> ACTIVATE(X)
   ACTIVATE(n__natsFrom(X)) -> ACTIVATE(X)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACTIVATE(n__s(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


*ACTIVATE(n__natsFrom(X)) -> ACTIVATE(X)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(tt, N, X, XS) -> U63^1(tt, activate(N), activate(X), activate(XS))
   U63^1(tt, N, X, XS) -> SPLITAT(activate(N), activate(XS))
   SPLITAT(s(N), cons(X, XS)) -> U61^1(tt, N, X, activate(XS))
   U61^1(tt, N, X, XS) -> U62^1(tt, activate(N), activate(X), activate(XS))

The TRS R consists of the following rules:

   U11(tt, N, XS) -> U12(tt, activate(N), activate(XS))
   U12(tt, N, XS) -> snd(splitAt(activate(N), activate(XS)))
   U21(tt, X) -> U22(tt, activate(X))
   U22(tt, X) -> activate(X)
   U31(tt, N) -> U32(tt, activate(N))
   U32(tt, N) -> activate(N)
   U41(tt, N, XS) -> U42(tt, activate(N), activate(XS))
   U42(tt, N, XS) -> head(afterNth(activate(N), activate(XS)))
   U51(tt, Y) -> U52(tt, activate(Y))
   U52(tt, Y) -> activate(Y)
   U61(tt, N, X, XS) -> U62(tt, activate(N), activate(X), activate(XS))
   U62(tt, N, X, XS) -> U63(tt, activate(N), activate(X), activate(XS))
   U63(tt, N, X, XS) -> U64(splitAt(activate(N), activate(XS)), activate(X))
   U64(pair(YS, ZS), X) -> pair(cons(activate(X), YS), ZS)
   U71(tt, XS) -> U72(tt, activate(XS))
   U72(tt, XS) -> activate(XS)
   U81(tt, N, XS) -> U82(tt, activate(N), activate(XS))
   U82(tt, N, XS) -> fst(splitAt(activate(N), activate(XS)))
   afterNth(N, XS) -> U11(tt, N, XS)
   fst(pair(X, Y)) -> U21(tt, X)
   head(cons(N, XS)) -> U31(tt, N)
   natsFrom(N) -> cons(N, n__natsFrom(n__s(N)))
   sel(N, XS) -> U41(tt, N, XS)
   snd(pair(X, Y)) -> U51(tt, Y)
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U61(tt, N, X, activate(XS))
   tail(cons(N, XS)) -> U71(tt, activate(XS))
   take(N, XS) -> U81(tt, N, XS)
   natsFrom(X) -> n__natsFrom(X)
   s(X) -> n__s(X)
   activate(n__natsFrom(X)) -> natsFrom(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   SPLITAT(s(N), cons(X, XS)) -> U61^1(tt, N, X, activate(XS))
   U61^1(tt, N, X, XS) -> U62^1(tt, activate(N), activate(X), activate(XS))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( SPLITAT_2(x_1, x_2) ) = 2x_1
POL( U61^1_4(x_1, ..., x_4) ) = max{0, 2x_1 + 2x_2 - 2}
POL( U62^1_4(x_1, ..., x_4) ) = max{0, x_1 + 2x_2 - 2}
POL( U63^1_4(x_1, ..., x_4) ) = max{0, x_1 + 2x_2 - 2}
POL( activate_1(x_1) ) = x_1
POL( n__natsFrom_1(x_1) ) = 0
POL( natsFrom_1(x_1) ) = max{0, -2}
POL( n__s_1(x_1) ) = x_1 + 2
POL( s_1(x_1) ) = x_1 + 2
POL( cons_2(x_1, x_2) ) = max{0, -2}
POL( tt ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   activate(n__natsFrom(X)) -> natsFrom(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X
   s(X) -> n__s(X)
   natsFrom(N) -> cons(N, n__natsFrom(n__s(N)))
   natsFrom(X) -> n__natsFrom(X)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U62^1(tt, N, X, XS) -> U63^1(tt, activate(N), activate(X), activate(XS))
   U63^1(tt, N, X, XS) -> SPLITAT(activate(N), activate(XS))

The TRS R consists of the following rules:

   U11(tt, N, XS) -> U12(tt, activate(N), activate(XS))
   U12(tt, N, XS) -> snd(splitAt(activate(N), activate(XS)))
   U21(tt, X) -> U22(tt, activate(X))
   U22(tt, X) -> activate(X)
   U31(tt, N) -> U32(tt, activate(N))
   U32(tt, N) -> activate(N)
   U41(tt, N, XS) -> U42(tt, activate(N), activate(XS))
   U42(tt, N, XS) -> head(afterNth(activate(N), activate(XS)))
   U51(tt, Y) -> U52(tt, activate(Y))
   U52(tt, Y) -> activate(Y)
   U61(tt, N, X, XS) -> U62(tt, activate(N), activate(X), activate(XS))
   U62(tt, N, X, XS) -> U63(tt, activate(N), activate(X), activate(XS))
   U63(tt, N, X, XS) -> U64(splitAt(activate(N), activate(XS)), activate(X))
   U64(pair(YS, ZS), X) -> pair(cons(activate(X), YS), ZS)
   U71(tt, XS) -> U72(tt, activate(XS))
   U72(tt, XS) -> activate(XS)
   U81(tt, N, XS) -> U82(tt, activate(N), activate(XS))
   U82(tt, N, XS) -> fst(splitAt(activate(N), activate(XS)))
   afterNth(N, XS) -> U11(tt, N, XS)
   fst(pair(X, Y)) -> U21(tt, X)
   head(cons(N, XS)) -> U31(tt, N)
   natsFrom(N) -> cons(N, n__natsFrom(n__s(N)))
   sel(N, XS) -> U41(tt, N, XS)
   snd(pair(X, Y)) -> U51(tt, Y)
   splitAt(0, XS) -> pair(nil, XS)
   splitAt(s(N), cons(X, XS)) -> U61(tt, N, X, activate(XS))
   tail(cons(N, XS)) -> U71(tt, activate(XS))
   take(N, XS) -> U81(tt, N, XS)
   natsFrom(X) -> n__natsFrom(X)
   s(X) -> n__s(X)
   activate(n__natsFrom(X)) -> natsFrom(activate(X))
   activate(n__s(X)) -> s(activate(X))
   activate(X) -> X

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(14)
TRUE
