Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: minus(x,x) -> 0()
    5: minus(x,0()) -> x
    6: minus(0(),x) -> 0()
    7: minus(s(x),s(y)) -> minus(x,y)
    8: isZero(0()) -> true()
    9: isZero(s(x)) -> false()
    10: mod(x,y) -> if_mod(isZero(y),le(y,x),x,y,minus(x,y))
    11: if_mod(true(),b,x,y,z) -> divByZeroError()
    12: if_mod(false(),false(),x,y,z) -> x
    13: if_mod(false(),true(),x,y,z) -> mod(z,y)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #if_mod(false(),true(),x,y,z) -> #mod(z,y)
   #2: #minus(s(x),s(y)) -> #minus(x,y)
   #3: #mod(x,y) -> #if_mod(isZero(y),le(y,x),x,y,minus(x,y))
   #4: #mod(x,y) -> #isZero(y)
   #5: #mod(x,y) -> #le(y,x)
   #6: #mod(x,y) -> #minus(x,y)
   #7: #le(s(x),s(y)) -> #le(x,y)
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
#isZero(x1)	weight: 0
divByZeroError()	weight: 0
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
if_mod(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
#minus(x1,x2)	weight: x2
 #mod(x1,x2)	weight: 0
#if_mod(x1,x2,x3,x4,x5)	weight: 0
isZero(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
#isZero(x1)	weight: 0
divByZeroError()	weight: 0
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
if_mod(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
#if_mod(x1,x2,x3,x4,x5)	weight: 0
isZero(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #1 #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
