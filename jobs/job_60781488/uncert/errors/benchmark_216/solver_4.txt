Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: zero(0()) -> true()
    5: zero(s(x)) -> false()
    6: id(0()) -> 0()
    7: id(s(x)) -> s(id(x))
    8: minus(x,0()) -> x
    9: minus(s(x),s(y)) -> minus(x,y)
    10: mod(x,y) -> if_mod(zero(x),zero(y),le(y,x),id(x),id(y))
    11: if_mod(true(),b1,b2,x,y) -> 0()
    12: if_mod(false(),b1,b2,x,y) -> if2(b1,b2,x,y)
    13: if2(true(),b2,x,y) -> 0()
    14: if2(false(),b2,x,y) -> if3(b2,x,y)
    15: if3(true(),x,y) -> mod(minus(x,y),s(y))
    16: if3(false(),x,y) -> x
Number of strict rules: 16
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #if_mod(false(),b1,b2,x,y) -> #if2(b1,b2,x,y)
   #3: #if2(false(),b2,x,y) -> #if3(b2,x,y)
   #4: #id(s(x)) -> #id(x)
   #5: #mod(x,y) -> #if_mod(zero(x),zero(y),le(y,x),id(x),id(y))
   #6: #mod(x,y) -> #zero(x)
   #7: #mod(x,y) -> #zero(y)
   #8: #mod(x,y) -> #le(y,x)
   #9: #mod(x,y) -> #id(x)
   #10: #mod(x,y) -> #id(y)
   #11: #le(s(x),s(y)) -> #le(x,y)
   #12: #if3(true(),x,y) -> #mod(minus(x,y),s(y))
   #13: #if3(true(),x,y) -> #minus(x,y)
Number of SCCs: 4, DPs: 7, edges: 7
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: x1
  true()	weight: 0
   if2(x1,x2,x3,x4)	weight: 0
if_mod(x1,x2,x3,x4,x5)	weight: 0
 #if3(x1,x2,x3)	weight: 0
     0()	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
#if_mod(x1,x2,x3,x4,x5)	weight: 0
   if3(x1,x2,x3)	weight: 0
    id(x1)	weight: 0
#zero(x1)	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 3, DPs: 6, edges: 6
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3,x4)	weight: 0
if_mod(x1,x2,x3,x4,x5)	weight: 0
 #if3(x1,x2,x3)	weight: 0
     0()	weight: 0
#minus(x1,x2)	weight: x2
 #mod(x1,x2)	weight: 0
#if_mod(x1,x2,x3,x4,x5)	weight: 0
   if3(x1,x2,x3)	weight: 0
    id(x1)	weight: 0
#zero(x1)	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 5, edges: 5
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3,x4)	weight: 0
if_mod(x1,x2,x3,x4,x5)	weight: 0
 #if3(x1,x2,x3)	weight: 0
     0()	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
#if_mod(x1,x2,x3,x4,x5)	weight: 0
   if3(x1,x2,x3)	weight: 0
    id(x1)	weight: 0
#zero(x1)	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #11
Number of SCCs: 1, DPs: 4, edges: 4
	SCC { #2 #3 #5 #12 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
