Input TRS:
    1: app(app(neq(),0()),0()) -> false()
    2: app(app(neq(),0()),app(s(),y)) -> true()
    3: app(app(neq(),app(s(),x)),0()) -> true()
    4: app(app(neq(),app(s(),x)),app(s(),y)) -> app(app(neq(),x),y)
    5: app(app(filter(),f),nil()) -> nil()
    6: app(app(filter(),f),app(app(cons(),y),ys)) -> app(app(app(filtersub(),app(f,y)),f),app(app(cons(),y),ys))
    7: app(app(app(filtersub(),true()),f),app(app(cons(),y),ys)) -> app(app(cons(),y),app(app(filter(),f),ys))
    8: app(app(app(filtersub(),false()),f),app(app(cons(),y),ys)) -> app(app(filter(),f),ys)
    9: nonzero() -> app(filter(),app(neq(),0()))
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_neq(0(),0()) -> false()
2: app❆2_neq(0(),app❆1_s(y)) -> true()
3: app❆2_neq(app❆1_s(x),0()) -> true()
4: app❆2_neq(app❆1_s(x),app❆1_s(y)) -> app❆2_neq(x,y)
5: app❆2_filter(f,nil()) -> nil()
6: app❆2_filter(f,app❆2_cons(y,ys)) -> app❆3_filtersub(app(f,y),f,app❆2_cons(y,ys))
7: app❆3_filtersub(true(),f,app❆2_cons(y,ys)) -> app❆2_cons(y,app❆2_filter(f,ys))
8: app❆3_filtersub(false(),f,app❆2_cons(y,ys)) -> app❆2_filter(f,ys)
9: nonzero() -> app❆1_filter(app❆1_neq(0()))
10: app(cons(),_1) ->= app❆1_cons(_1)
11: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
12: app(neq(),_1) ->= app❆1_neq(_1)
13: app(app❆1_neq(_1),_2) ->= app❆2_neq(_1,_2)
14: app(s(),_1) ->= app❆1_s(_1)
15: app(filter(),_1) ->= app❆1_filter(_1)
16: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
17: app(filtersub(),_1) ->= app❆1_filtersub(_1)
18: app(app❆1_filtersub(_1),_2) ->= app❆2_filtersub(_1,_2)
19: app(app❆2_filtersub(_1,_2),_3) ->= app❆3_filtersub(_1,_2,_3)
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_filter(f,app❆2_cons(y,ys)) -> #app❆3_filtersub(app(f,y),f,app❆2_cons(y,ys))
   #2: #app❆2_filter(f,app❆2_cons(y,ys)) -> #app(f,y)
   #3: #app(app❆1_neq(_1),_2) ->? #app❆2_neq(_1,_2)
   #4: #app❆3_filtersub(true(),f,app❆2_cons(y,ys)) -> #app❆2_filter(f,ys)
   #5: #app(app❆2_filtersub(_1,_2),_3) ->? #app❆3_filtersub(_1,_2,_3)
   #6: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #7: #app❆3_filtersub(false(),f,app❆2_cons(y,ys)) -> #app❆2_filter(f,ys)
   #8: #app❆2_neq(app❆1_s(x),app❆1_s(y)) -> #app❆2_neq(x,y)
Number of SCCs: 2, DPs: 7, edges: 13
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   neq()	weight: 0
     s()	weight: 0
app❆1_filtersub(x1)	weight: 0
app❆2_filtersub(x1,x2)	weight: 0
 false()	weight: 0
nonzero()	weight: 0
  true()	weight: 0
app❆2_filter(x1,x2)	weight: 0
filtersub()	weight: 0
app❆2_neq(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
#app❆2_neq(x1,x2)	weight: x2
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
app❆1_neq(x1)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
#nonzero()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆3_filtersub(x1,x2,x3)	weight: 0
#app❆3_filtersub(x1,x2,x3)	weight: 0
app❆1_cons(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 1, DPs: 6, edges: 12
	SCC { #1 #2 #4..7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   neq()	weight: 0
     s()	weight: 0
app❆1_filtersub(x1)	weight: (/ 3 4)
app❆2_filtersub(x1,x2)	weight: (/ 3 2) + x2
 false()	weight: 0
nonzero()	weight: 0
  true()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 5 2) + x2
filtersub()	weight: 0
app❆2_neq(x1,x2)	weight: (/ 3 2) + x1
     0()	weight: 0
   nil()	weight: 0
#app❆2_neq(x1,x2)	weight: 0
app❆1_filter(x1)	weight: (/ 3 4) + x1
 #app(x1,x2)	weight: (/ 1 2) + x2
app❆1_neq(x1)	weight: (/ 3 4)
#app❆2_filter(x1,x2)	weight: (/ 1 4) + x2
#nonzero()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 2) + x1 + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 3 4) + x1
app❆3_filtersub(x1,x2,x3)	weight: (/ 9 4) + x1 + x3
#app❆3_filtersub(x1,x2,x3)	weight: x3
app❆1_cons(x1)	weight: (/ 3 4)
   app(x1,x2)	weight: (/ 1 2) + x1
    Usable rules: { }
    Removed DPs: #1 #2 #4..7
Number of SCCs: 0, DPs: 0, edges: 0
