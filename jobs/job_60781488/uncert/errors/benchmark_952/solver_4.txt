Input TRS:
    1: g(X) -> h(activate(X))
    2: c() -> d()
    3: h(n__d()) -> g(n__c())
    4: d() -> n__d()
    5: c() -> n__c()
    6: activate(n__d()) -> d()
    7: activate(n__c()) -> c()
    8: activate(X) -> X
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #c() -> #d()
   #2: #activate(n__d()) -> #d()
   #3: #activate(n__c()) -> #c()
   #4: #h(n__d()) -> #g(n__c())
   #5: #g(X) -> #h(activate(X))
   #6: #g(X) -> #activate(X)
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #4 #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #h(n__d())	-#4->
  #g(n__c())	--->*
  #g(n__c())	-#5->
  #h(activate(n__c()))	--->*
  #h(n__d())
  Looping with: [ ]
