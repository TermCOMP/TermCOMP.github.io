Input TRS:
    1: ge(x,0()) -> true()
    2: ge(0(),s(x)) -> false()
    3: ge(s(x),s(y)) -> ge(x,y)
    4: minus(x,0()) -> x
    5: minus(s(x),s(y)) -> minus(x,y)
    6: div(x,y) -> ify(ge(y,s(0())),x,y)
    7: ify(false(),x,y) -> divByZeroError()
    8: ify(true(),x,y) -> if(ge(x,y),x,y)
    9: if(false(),x,y) -> 0()
    10: if(true(),x,y) -> s(div(minus(x,y),y))
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #div(x,y) -> #ify(ge(y,s(0())),x,y)
   #2: #div(x,y) -> #ge(y,s(0()))
   #3: #if(true(),x,y) -> #div(minus(x,y),y)
   #4: #if(true(),x,y) -> #minus(x,y)
   #5: #minus(s(x),s(y)) -> #minus(x,y)
   #6: #ge(s(x),s(y)) -> #ge(x,y)
   #7: #ify(true(),x,y) -> #if(ge(x,y),x,y)
   #8: #ify(true(),x,y) -> #ge(x,y)
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
divByZeroError()	weight: 0
 minus(x1,x2)	weight: 0
 #ify(x1,x2,x3)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
  #ge(x1,x2)	weight: x2
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
    ge(x1,x2)	weight: 0
   ify(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #div(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
divByZeroError()	weight: 0
 minus(x1,x2)	weight: 0
 #ify(x1,x2,x3)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
  #ge(x1,x2)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
    ge(x1,x2)	weight: 0
   ify(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: x2
  #if(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #5
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #1 #3 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
