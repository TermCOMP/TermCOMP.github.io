Input TRS:
    1: app(nil(),YS) -> YS
    2: app(cons(X,XS),YS) -> cons(X,app(XS,YS))
    3: from(X) -> cons(X,from(s(X)))
    4: zWadr(nil(),YS) -> nil()
    5: zWadr(XS,nil()) -> nil()
    6: zWadr(cons(X,XS),cons(Y,YS)) -> cons(app(Y,cons(X,nil())),zWadr(XS,YS))
    7: prefix(L) -> cons(nil(),zWadr(L,prefix(L)))
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #app(cons(X,XS),YS) -> #app(XS,YS)
   #2: #zWadr(cons(X,XS),cons(Y,YS)) -> #app(Y,cons(X,nil()))
   #3: #zWadr(cons(X,XS),cons(Y,YS)) -> #zWadr(XS,YS)
   #4: #prefix(L) -> #zWadr(L,prefix(L))
   #5: #prefix(L) -> #prefix(L)
   #6: #from(X) -> #from(s(X))
Number of SCCs: 4, DPs: 4, edges: 4
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #prefix(L_{1})	-#5->
  #prefix(L_{1})	--->*
  #prefix(L_{1})
  Looping with: [ L_{1} := L_{1}; ]
