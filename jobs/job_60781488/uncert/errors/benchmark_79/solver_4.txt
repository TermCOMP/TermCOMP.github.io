Input TRS:
    1: app(app(lt(),app(s(),x)),app(s(),y)) -> app(app(lt(),x),y)
    2: app(app(lt(),0()),app(s(),y)) -> true()
    3: app(app(lt(),y),0()) -> false()
    4: app(app(eq(),x),x) -> true()
    5: app(app(eq(),app(s(),x)),0()) -> false()
    6: app(app(eq(),0()),app(s(),x)) -> false()
    7: app(app(member(),w),null()) -> false()
    8: app(app(member(),w),app(app(app(fork(),x),y),z)) -> app(app(app(if(),app(app(lt(),w),y)),app(app(member(),w),x)),app(app(app(if(),app(app(eq(),w),y)),true()),app(app(member(),w),z)))
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_lt(app❆1_s(x),app❆1_s(y)) -> app❆2_lt(x,y)
2: app❆2_lt(0(),app❆1_s(y)) -> true()
3: app❆2_lt(y,0()) -> false()
4: app❆2_eq(x,x) -> true()
5: app❆2_eq(app❆1_s(x),0()) -> false()
6: app❆2_eq(0(),app❆1_s(x)) -> false()
7: app❆2_member(w,null()) -> false()
8: app❆2_member(w,app❆3_fork(x,y,z)) -> app❆3_if(app❆2_lt(w,y),app❆2_member(w,x),app❆3_if(app❆2_eq(w,y),true(),app❆2_member(w,z)))
9: app(eq(),_1) ->= app❆1_eq(_1)
10: app(app❆1_eq(_1),_2) ->= app❆2_eq(_1,_2)
11: app(if(),_1) ->= app❆1_if(_1)
12: app(app❆1_if(_1),_2) ->= app❆2_if(_1,_2)
13: app(app❆2_if(_1,_2),_3) ->= app❆3_if(_1,_2,_3)
14: app(s(),_1) ->= app❆1_s(_1)
15: app(fork(),_1) ->= app❆1_fork(_1)
16: app(app❆1_fork(_1),_2) ->= app❆2_fork(_1,_2)
17: app(app❆2_fork(_1,_2),_3) ->= app❆3_fork(_1,_2,_3)
18: app(member(),_1) ->= app❆1_member(_1)
19: app(app❆1_member(_1),_2) ->= app❆2_member(_1,_2)
20: app(lt(),_1) ->= app❆1_lt(_1)
21: app(app❆1_lt(_1),_2) ->= app❆2_lt(_1,_2)
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_eq(_1),_2) ->? #app❆2_eq(_1,_2)
   #2: #app(app❆1_member(_1),_2) ->? #app❆2_member(_1,_2)
   #3: #app(app❆1_lt(_1),_2) ->? #app❆2_lt(_1,_2)
   #4: #app❆2_lt(app❆1_s(x),app❆1_s(y)) -> #app❆2_lt(x,y)
   #5: #app❆2_member(w,app❆3_fork(x,y,z)) -> #app❆2_lt(w,y)
   #6: #app❆2_member(w,app❆3_fork(x,y,z)) -> #app❆2_member(w,x)
   #7: #app❆2_member(w,app❆3_fork(x,y,z)) -> #app❆2_eq(w,y)
   #8: #app❆2_member(w,app❆3_fork(x,y,z)) -> #app❆2_member(w,z)
Number of SCCs: 2, DPs: 3, edges: 5
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_fork(x1,x2)	weight: 0
     s()	weight: 0
app❆1_if(x1)	weight: 0
#app❆2_member(x1,x2)	weight: 0
member()	weight: 0
#app❆2_eq(x1,x2)	weight: 0
    eq()	weight: 0
app❆2_member(x1,x2)	weight: 0
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
  fork()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆1_eq(x1)	weight: 0
  null()	weight: 0
#app❆2_lt(x1,x2)	weight: x2
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
app❆1_fork(x1)	weight: 0
app❆1_member(x1)	weight: 0
app❆2_lt(x1,x2)	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
    lt()	weight: 0
app❆3_fork(x1,x2,x3)	weight: 0
app❆1_lt(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #6 #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_fork(x1,x2)	weight: 0
     s()	weight: 0
app❆1_if(x1)	weight: 0
#app❆2_member(x1,x2)	weight: x2
member()	weight: 0
#app❆2_eq(x1,x2)	weight: 0
    eq()	weight: 0
app❆2_member(x1,x2)	weight: 0
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
  fork()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆1_eq(x1)	weight: 0
  null()	weight: 0
#app❆2_lt(x1,x2)	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
app❆1_fork(x1)	weight: 0
app❆1_member(x1)	weight: 0
app❆2_lt(x1,x2)	weight: 0
app❆1_s(x1)	weight: (/ 1 2)
    lt()	weight: 0
app❆3_fork(x1,x2,x3)	weight: (/ 1 2) + x1 + x3
app❆1_lt(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6 #8
Number of SCCs: 0, DPs: 0, edges: 0
