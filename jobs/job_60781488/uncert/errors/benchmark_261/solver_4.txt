Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: eq(0(),0()) -> true()
    5: eq(0(),s(y)) -> false()
    6: eq(s(x),0()) -> false()
    7: eq(s(x),s(y)) -> eq(x,y)
    8: if1(true(),x,y,xs) -> min(x,xs)
    9: if1(false(),x,y,xs) -> min(y,xs)
    10: if2(true(),x,y,xs) -> xs
    11: if2(false(),x,y,xs) -> cons(y,del(x,xs))
    12: minsort(nil()) -> nil()
    13: minsort(cons(x,y)) -> cons(min(x,y),minsort(del(min(x,y),cons(x,y))))
    14: min(x,nil()) -> x
    15: min(x,cons(y,z)) -> if1(le(x,y),x,y,z)
    16: del(x,nil()) -> nil()
    17: del(x,cons(y,z)) -> if2(eq(x,y),x,y,z)
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minsort(cons(x,y)) -> #min(x,y)
   #2: #minsort(cons(x,y)) -> #minsort(del(min(x,y),cons(x,y)))
   #3: #minsort(cons(x,y)) -> #del(min(x,y),cons(x,y))
   #4: #minsort(cons(x,y)) -> #min(x,y)
   #5: #if1(false(),x,y,xs) -> #min(y,xs)
   #6: #if2(false(),x,y,xs) -> #del(x,xs)
   #7: #eq(s(x),s(y)) -> #eq(x,y)
   #8: #del(x,cons(y,z)) -> #if2(eq(x,y),x,y,z)
   #9: #del(x,cons(y,z)) -> #eq(x,y)
   #10: #le(s(x),s(y)) -> #le(x,y)
   #11: #if1(true(),x,y,xs) -> #min(x,xs)
   #12: #min(x,cons(y,z)) -> #if1(le(x,y),x,y,z)
   #13: #min(x,cons(y,z)) -> #le(x,y)
Number of SCCs: 5, DPs: 8, edges: 9
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 #del(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
 #min(x1,x2)	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
   if2(x1,x2,x3,x4)	weight: 0
     0()	weight: 0
   del(x1,x2)	weight: 0
   nil()	weight: 0
   min(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
#minsort(x1)	weight: 0
minsort(x1)	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 4, DPs: 7, edges: 8
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 #del(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
 #min(x1,x2)	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: x2
 #if1(x1,x2,x3,x4)	weight: 0
   if2(x1,x2,x3,x4)	weight: 0
     0()	weight: 0
   del(x1,x2)	weight: 0
   nil()	weight: 0
   min(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
#minsort(x1)	weight: 0
minsort(x1)	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 3, DPs: 6, edges: 7
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
