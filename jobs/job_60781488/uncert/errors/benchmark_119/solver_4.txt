Input TRS:
    1: app(app(*(),x),app(app(+(),y),z)) -> app(app(+(),app(app(*(),x),y)),app(app(*(),x),z))
    2: app(app(map(),f),nil()) -> nil()
    3: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    4: app(app(filter(),f),nil()) -> nil()
    5: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    6: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    7: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_*(x,app❆2_+(y,z)) -> app❆2_+(app❆2_*(x,y),app❆2_*(x,z))
2: app❆2_map(f,nil()) -> nil()
3: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
4: app❆2_filter(f,nil()) -> nil()
5: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
6: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
7: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
8: app(cons(),_1) ->= app❆1_cons(_1)
9: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
10: app(filter(),_1) ->= app❆1_filter(_1)
11: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
12: app(+(),_1) ->= app❆1_+(_1)
13: app(app❆1_+(_1),_2) ->= app❆2_+(_1,_2)
14: app(map(),_1) ->= app❆1_map(_1)
15: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
16: app(filter2(),_1) ->= app❆1_filter2(_1)
17: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
18: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
19: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
20: app(*(),_1) ->= app❆1_*(_1)
21: app(app❆1_*(_1),_2) ->= app❆2_*(_1,_2)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #2: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #3: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #4: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #5: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #6: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #7: #app(app❆1_*(_1),_2) ->? #app❆2_*(_1,_2)
   #8: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #9: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #10: #app❆2_*(x,app❆2_+(y,z)) -> #app❆2_*(x,y)
   #11: #app❆2_*(x,app❆2_+(y,z)) -> #app❆2_*(x,z)
   #12: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
Number of SCCs: 2, DPs: 10, edges: 19
	SCC { #10 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆2_+(x1,x2)	weight: (/ 1 2) + x1 + x2
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆1_*(x1)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
#app❆2_*(x1,x2)	weight: x2
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #10 #11
Number of SCCs: 1, DPs: 8, edges: 15
	SCC { #1..3 #5 #6 #8 #9 #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: (/ 1 4) + x2
app❆1_map(x1)	weight: (/ 1 4)
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆2_+(x1,x2)	weight: (/ 1 4)
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 4)
 #app(x1,x2)	weight: (/ 1 2) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 4) + x4
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: x2
app❆1_*(x1)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 4) + x1 + x2
filter()	weight: 0
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
#app❆2_*(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 1 4)
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1..3 #5 #6 #8 #9 #12
Number of SCCs: 0, DPs: 0, edges: 0
