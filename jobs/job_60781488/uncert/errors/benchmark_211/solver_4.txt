Input TRS:
    1: p(s(x)) -> x
    2: p(0()) -> 0()
    3: le(0(),y) -> true()
    4: le(s(x),0()) -> false()
    5: le(s(x),s(y)) -> le(x,y)
    6: average(x,y) -> if(le(x,0()),le(y,0()),le(y,s(0())),le(y,s(s(0()))),x,y)
    7: if(true(),b1,b2,b3,x,y) -> if2(b1,b2,b3,x,y)
    8: if(false(),b1,b2,b3,x,y) -> average(p(x),s(y))
    9: if2(true(),b2,b3,x,y) -> 0()
    10: if2(false(),b2,b3,x,y) -> if3(b2,b3,x,y)
    11: if3(true(),b3,x,y) -> 0()
    12: if3(false(),b3,x,y) -> if4(b3,x,y)
    13: if4(true(),x,y) -> s(0())
    14: if4(false(),x,y) -> average(s(x),p(p(y)))
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #average(x,y) -> #if(le(x,0()),le(y,0()),le(y,s(0())),le(y,s(s(0()))),x,y)
   #2: #average(x,y) -> #le(x,0())
   #3: #average(x,y) -> #le(y,0())
   #4: #average(x,y) -> #le(y,s(0()))
   #5: #average(x,y) -> #le(y,s(s(0())))
   #6: #if3(false(),b3,x,y) -> #if4(b3,x,y)
   #7: #if4(false(),x,y) -> #average(s(x),p(p(y)))
   #8: #if4(false(),x,y) -> #p(p(y))
   #9: #if4(false(),x,y) -> #p(y)
   #10: #if(true(),b1,b2,b3,x,y) -> #if2(b1,b2,b3,x,y)
   #11: #if2(false(),b2,b3,x,y) -> #if3(b2,b3,x,y)
   #12: #le(s(x),s(y)) -> #le(x,y)
   #13: #if(false(),b1,b2,b3,x,y) -> #average(p(x),s(y))
   #14: #if(false(),b1,b2,b3,x,y) -> #p(x)
Number of SCCs: 2, DPs: 7, edges: 8
	SCC { #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 #if4(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
average(x1,x2)	weight: 0
 false()	weight: 0
   #p(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3,x4,x5)	weight: 0
     p(x1)	weight: 0
 #if3(x1,x2,x3,x4)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5,x6)	weight: 0
   if4(x1,x2,x3)	weight: 0
#average(x1,x2)	weight: 0
   if3(x1,x2,x3,x4)	weight: 0
  #if(x1,x2,x3,x4,x5,x6)	weight: 0
 #if2(x1,x2,x3,x4,x5)	weight: 0
    Usable rules: { }
    Removed DPs: #12
Number of SCCs: 1, DPs: 6, edges: 7
	SCC { #1 #6 #7 #10 #11 #13 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
