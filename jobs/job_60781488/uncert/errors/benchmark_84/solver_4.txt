Input TRS:
    1: app(app(append(),nil()),l) -> l
    2: app(app(append(),app(app(cons(),h),t)),l) -> app(app(cons(),h),app(app(append(),t),l))
    3: app(app(map(),f),nil()) -> nil()
    4: app(app(map(),f),app(app(cons(),h),t)) -> app(app(cons(),app(f,h)),app(app(map(),f),t))
    5: app(app(append(),app(app(append(),l1),l2)),l3) -> app(app(append(),l1),app(app(append(),l2),l3))
    6: app(app(map(),f),app(app(append(),l1),l2)) -> app(app(append(),app(app(map(),f),l1)),app(app(map(),f),l2))
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_append(nil(),l) -> l
2: app❆2_append(app❆2_cons(h,t),l) -> app❆2_cons(h,app❆2_append(t,l))
3: app❆2_map(f,nil()) -> nil()
4: app❆2_map(f,app❆2_cons(h,t)) -> app❆2_cons(app(f,h),app❆2_map(f,t))
5: app❆2_append(app❆2_append(l1,l2),l3) -> app❆2_append(l1,app❆2_append(l2,l3))
6: app❆2_map(f,app❆2_append(l1,l2)) -> app❆2_append(app❆2_map(f,l1),app❆2_map(f,l2))
7: app(append(),_1) ->= app❆1_append(_1)
8: app(app❆1_append(_1),_2) ->= app❆2_append(_1,_2)
9: app(cons(),_1) ->= app❆1_cons(_1)
10: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
11: app(map(),_1) ->= app❆1_map(_1)
12: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_append(app❆2_cons(h,t),l) -> #app❆2_append(t,l)
   #2: #app❆2_map(f,app❆2_append(l1,l2)) -> #app❆2_append(app❆2_map(f,l1),app❆2_map(f,l2))
   #3: #app❆2_map(f,app❆2_append(l1,l2)) -> #app❆2_map(f,l1)
   #4: #app❆2_map(f,app❆2_append(l1,l2)) -> #app❆2_map(f,l2)
   #5: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #6: #app❆2_append(app❆2_append(l1,l2),l3) -> #app❆2_append(l1,app❆2_append(l2,l3))
   #7: #app❆2_append(app❆2_append(l1,l2),l3) -> #app❆2_append(l2,l3)
   #8: #app(app❆1_append(_1),_2) ->? #app❆2_append(_1,_2)
   #9: #app❆2_map(f,app❆2_cons(h,t)) -> #app(f,h)
   #10: #app❆2_map(f,app❆2_cons(h,t)) -> #app❆2_map(f,t)
Number of SCCs: 2, DPs: 8, edges: 26
	SCC { #1 #6 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_append(x1)	weight: 0
append()	weight: 0
#app❆2_append(x1,x2)	weight: x1
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x1 + x2
app❆2_append(x1,x2)	weight: (/ 1 2) + x1 + x2
app❆1_cons(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { 1 2 5 }
    Removed DPs: #1 #6 #7
Number of SCCs: 1, DPs: 5, edges: 17
	SCC { #3..5 #9 #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: (/ 1 4) + x1
app❆1_map(x1)	weight: (/ 1 2) + x1
app❆2_map(x1,x2)	weight: 0
app❆1_append(x1)	weight: 0
append()	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: x1
   map()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4)
app❆2_append(x1,x2)	weight: (/ 1 4)
app❆1_cons(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #5 #9
Number of SCCs: 1, DPs: 3, edges: 9
	SCC { #3 #4 #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: (/ 1 4) + x2
app❆1_map(x1)	weight: (/ 1 2)
app❆2_map(x1,x2)	weight: 0
app❆1_append(x1)	weight: 0
append()	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x2
app❆2_append(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆1_cons(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3 #4 #10
Number of SCCs: 0, DPs: 0, edges: 0
