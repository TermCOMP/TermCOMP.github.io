Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: minus(x,0()) -> x
    5: minus(0(),s(y)) -> 0()
    6: minus(s(x),s(y)) -> minus(x,y)
    7: plus(x,0()) -> x
    8: plus(x,s(y)) -> s(plus(x,y))
    9: mod(s(x),0()) -> 0()
    10: mod(x,s(y)) -> help(x,s(y),0())
    11: help(x,s(y),c) -> if(le(c,x),x,s(y),c)
    12: if(true(),x,s(y),c) -> help(x,s(y),plus(c,s(y)))
    13: if(false(),x,s(y),c) -> minus(x,minus(c,s(y)))
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #if(false(),x,s(y),c) -> #minus(x,minus(c,s(y)))
   #3: #if(false(),x,s(y),c) -> #minus(c,s(y))
   #4: #help(x,s(y),c) -> #if(le(c,x),x,s(y),c)
   #5: #help(x,s(y),c) -> #le(c,x)
   #6: #if(true(),x,s(y),c) -> #help(x,s(y),plus(c,s(y)))
   #7: #if(true(),x,s(y),c) -> #plus(c,s(y))
   #8: #mod(x,s(y)) -> #help(x,s(y),0())
   #9: #le(s(x),s(y)) -> #le(x,y)
   #10: #plus(x,s(y)) -> #plus(x,y)
Number of SCCs: 4, DPs: 5, edges: 5
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
#help(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: x2
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
  help(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
#help(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#minus(x1,x2)	weight: x2
 #mod(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
  help(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
#help(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
  help(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #4 #6 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
