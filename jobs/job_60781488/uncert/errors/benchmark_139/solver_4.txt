Input TRS:
    1: app(app(app(f(),0()),1()),x) -> app(app(app(f(),app(s(),x)),x),x)
    2: app(app(app(f(),x),y),app(s(),z)) -> app(s(),app(app(app(f(),0()),1()),z))
    3: app(app(map(),fun),nil()) -> nil()
    4: app(app(map(),fun),app(app(cons(),x),xs)) -> app(app(cons(),app(fun,x)),app(app(map(),fun),xs))
    5: app(app(filter(),fun),nil()) -> nil()
    6: app(app(filter(),fun),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(fun,x)),fun),x),xs)
    7: app(app(app(app(filter2(),true()),fun),x),xs) -> app(app(cons(),x),app(app(filter(),fun),xs))
    8: app(app(app(app(filter2(),false()),fun),x),xs) -> app(app(filter(),fun),xs)
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆3_f(0(),1(),x) -> app❆3_f(app❆1_s(x),x,x)
2: app❆3_f(x,y,app❆1_s(z)) -> app❆1_s(app❆3_f(0(),1(),z))
3: app❆2_map(fun,nil()) -> nil()
4: app❆2_map(fun,app❆2_cons(x,xs)) -> app❆2_cons(app(fun,x),app❆2_map(fun,xs))
5: app❆2_filter(fun,nil()) -> nil()
6: app❆2_filter(fun,app❆2_cons(x,xs)) -> app❆4_filter2(app(fun,x),fun,x,xs)
7: app❆4_filter2(true(),fun,x,xs) -> app❆2_cons(x,app❆2_filter(fun,xs))
8: app❆4_filter2(false(),fun,x,xs) -> app❆2_filter(fun,xs)
9: app(cons(),_1) ->= app❆1_cons(_1)
10: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
11: app(s(),_1) ->= app❆1_s(_1)
12: app(filter(),_1) ->= app❆1_filter(_1)
13: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
14: app(map(),_1) ->= app❆1_map(_1)
15: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
16: app(f(),_1) ->= app❆1_f(_1)
17: app(app❆1_f(_1),_2) ->= app❆2_f(_1,_2)
18: app(app❆2_f(_1,_2),_3) ->= app❆3_f(_1,_2,_3)
19: app(filter2(),_1) ->= app❆1_filter2(_1)
20: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
21: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
22: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆3_f(x,y,app❆1_s(z)) -> #app❆3_f(0(),1(),z)
   #2: #app❆2_filter(fun,app❆2_cons(x,xs)) -> #app❆4_filter2(app(fun,x),fun,x,xs)
   #3: #app❆2_filter(fun,app❆2_cons(x,xs)) -> #app(fun,x)
   #4: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #5: #app❆4_filter2(true(),fun,x,xs) -> #app❆2_filter(fun,xs)
   #6: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #7: #app❆3_f(0(),1(),x) -> #app❆3_f(app❆1_s(x),x,x)
   #8: #app❆4_filter2(false(),fun,x,xs) -> #app❆2_filter(fun,xs)
   #9: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #10: #app❆2_map(fun,app❆2_cons(x,xs)) -> #app(fun,x)
   #11: #app❆2_map(fun,app❆2_cons(x,xs)) -> #app❆2_map(fun,xs)
   #12: #app(app❆2_f(_1,_2),_3) ->? #app❆3_f(_1,_2,_3)
Number of SCCs: 2, DPs: 10, edges: 18
	SCC { #1 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     1()	weight: 0
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
#app❆3_f(x1,x2,x3)	weight: x3
app❆2_f(x1,x2)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     f()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1)	weight: 0
app❆3_f(x1,x2,x3)	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 1, DPs: 8, edges: 15
	SCC { #3..6 #8..11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     1()	weight: 0
#app❆2_map(x1,x2)	weight: x2
     s()	weight: 0
app❆1_map(x1)	weight: (/ 1 4)
#app❆3_f(x1,x2,x3)	weight: 0
app❆2_f(x1,x2)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     f()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1)	weight: 0
app❆3_f(x1,x2,x3)	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 4)
 #app(x1,x2)	weight: (/ 1 2) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 4) + x4
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 4) + x1 + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 4)
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 1 4)
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3..6 #8..11
Number of SCCs: 0, DPs: 0, edges: 0
