Input TRS:
    1: app(app(app(if(),true()),xs),ys) -> xs
    2: app(app(app(if(),false()),xs),ys) -> ys
    3: app(app(lt(),app(s(),x)),app(s(),y)) -> app(app(lt(),x),y)
    4: app(app(lt(),0()),app(s(),y)) -> true()
    5: app(app(lt(),y),0()) -> false()
    6: app(app(eq(),x),x) -> true()
    7: app(app(eq(),app(s(),x)),0()) -> false()
    8: app(app(eq(),0()),app(s(),x)) -> false()
    9: app(app(merge(),xs),nil()) -> xs
    10: app(app(merge(),nil()),ys) -> ys
    11: app(app(merge(),app(app(cons(),x),xs)),app(app(cons(),y),ys)) -> app(app(app(if(),app(app(lt(),x),y)),app(app(cons(),x),app(app(merge(),xs),app(app(cons(),y),ys)))),app(app(app(if(),app(app(eq(),x),y)),app(app(cons(),x),app(app(merge(),xs),ys))),app(app(cons(),y),app(app(merge(),app(app(cons(),x),xs)),ys))))
    12: app(app(map(),f),nil()) -> nil()
    13: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    14: app(app(mult(),0()),x) -> 0()
    15: app(app(mult(),app(s(),x)),y) -> app(app(plus(),y),app(app(mult(),x),y))
    16: app(app(plus(),0()),x) -> 0()
    17: app(app(plus(),app(s(),x)),y) -> app(s(),app(app(plus(),x),y))
    18: list1() -> app(app(map(),app(mult(),app(s(),app(s(),0())))),hamming())
    19: list2() -> app(app(map(),app(mult(),app(s(),app(s(),app(s(),0()))))),hamming())
    20: list3() -> app(app(map(),app(mult(),app(s(),app(s(),app(s(),app(s(),app(s(),0()))))))),hamming())
    21: hamming() -> app(app(cons(),app(s(),0())),app(app(merge(),list1()),app(app(merge(),list2()),list3())))
Number of strict rules: 21
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆3_if(true(),xs,ys) -> xs
2: app❆3_if(false(),xs,ys) -> ys
3: app❆2_lt(app❆1_s(x),app❆1_s(y)) -> app❆2_lt(x,y)
4: app❆2_lt(0(),app❆1_s(y)) -> true()
5: app❆2_lt(y,0()) -> false()
6: app❆2_eq(x,x) -> true()
7: app❆2_eq(app❆1_s(x),0()) -> false()
8: app❆2_eq(0(),app❆1_s(x)) -> false()
9: app❆2_merge(xs,nil()) -> xs
10: app❆2_merge(nil(),ys) -> ys
11: app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> app❆3_if(app❆2_lt(x,y),app❆2_cons(x,app❆2_merge(xs,app❆2_cons(y,ys))),app❆3_if(app❆2_eq(x,y),app❆2_cons(x,app❆2_merge(xs,ys)),app❆2_cons(y,app❆2_merge(app❆2_cons(x,xs),ys))))
12: app❆2_map(f,nil()) -> nil()
13: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
14: app❆2_mult(0(),x) -> 0()
15: app❆2_mult(app❆1_s(x),y) -> app❆2_plus(y,app❆2_mult(x,y))
16: app❆2_plus(0(),x) -> 0()
17: app❆2_plus(app❆1_s(x),y) -> app❆1_s(app❆2_plus(x,y))
18: list1() -> app❆2_map(app❆1_mult(app❆1_s(app❆1_s(0()))),hamming())
19: list2() -> app❆2_map(app❆1_mult(app❆1_s(app❆1_s(app❆1_s(0())))),hamming())
20: list3() -> app❆2_map(app❆1_mult(app❆1_s(app❆1_s(app❆1_s(app❆1_s(app❆1_s(0())))))),hamming())
21: hamming() -> app❆2_cons(app❆1_s(0()),app❆2_merge(list1(),app❆2_merge(list2(),list3())))
22: app(eq(),_1) ->= app❆1_eq(_1)
23: app(app❆1_eq(_1),_2) ->= app❆2_eq(_1,_2)
24: app(plus(),_1) ->= app❆1_plus(_1)
25: app(app❆1_plus(_1),_2) ->= app❆2_plus(_1,_2)
26: app(if(),_1) ->= app❆1_if(_1)
27: app(app❆1_if(_1),_2) ->= app❆2_if(_1,_2)
28: app(app❆2_if(_1,_2),_3) ->= app❆3_if(_1,_2,_3)
29: app(cons(),_1) ->= app❆1_cons(_1)
30: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
31: app(merge(),_1) ->= app❆1_merge(_1)
32: app(app❆1_merge(_1),_2) ->= app❆2_merge(_1,_2)
33: app(s(),_1) ->= app❆1_s(_1)
34: app(map(),_1) ->= app❆1_map(_1)
35: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
36: app(lt(),_1) ->= app❆1_lt(_1)
37: app(app❆1_lt(_1),_2) ->= app❆2_lt(_1,_2)
38: app(mult(),_1) ->= app❆1_mult(_1)
39: app(app❆1_mult(_1),_2) ->= app❆2_mult(_1,_2)
Number of strict rules: 21
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #2: #app(app❆1_lt(_1),_2) ->? #app❆2_lt(_1,_2)
   #3: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #4: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #5: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆3_if(app❆2_lt(x,y),app❆2_cons(x,app❆2_merge(xs,app❆2_cons(y,ys))),app❆3_if(app❆2_eq(x,y),app❆2_cons(x,app❆2_merge(xs,ys)),app❆2_cons(y,app❆2_merge(app❆2_cons(x,xs),ys))))
   #6: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆2_lt(x,y)
   #7: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆2_merge(xs,app❆2_cons(y,ys))
   #8: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆3_if(app❆2_eq(x,y),app❆2_cons(x,app❆2_merge(xs,ys)),app❆2_cons(y,app❆2_merge(app❆2_cons(x,xs),ys)))
   #9: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆2_eq(x,y)
   #10: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆2_merge(xs,ys)
   #11: #app❆2_merge(app❆2_cons(x,xs),app❆2_cons(y,ys)) -> #app❆2_merge(app❆2_cons(x,xs),ys)
   #12: #app(app❆1_eq(_1),_2) ->? #app❆2_eq(_1,_2)
   #13: #app(app❆1_plus(_1),_2) ->? #app❆2_plus(_1,_2)
   #14: #list3() -> #app❆2_map(app❆1_mult(app❆1_s(app❆1_s(app❆1_s(app❆1_s(app❆1_s(0())))))),hamming())
   #15: #list3() -> #hamming()
   #16: #app(app❆1_mult(_1),_2) ->? #app❆2_mult(_1,_2)
   #17: #app(app❆2_if(_1,_2),_3) ->? #app❆3_if(_1,_2,_3)
   #18: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(x,y)
   #19: #app(app❆1_merge(_1),_2) ->? #app❆2_merge(_1,_2)
   #20: #list2() -> #app❆2_map(app❆1_mult(app❆1_s(app❆1_s(app❆1_s(0())))),hamming())
   #21: #list2() -> #hamming()
   #22: #hamming() -> #app❆2_merge(list1(),app❆2_merge(list2(),list3()))
   #23: #hamming() -> #list1()
   #24: #hamming() -> #app❆2_merge(list2(),list3())
   #25: #hamming() -> #list2()
   #26: #hamming() -> #list3()
   #27: #app❆2_lt(app❆1_s(x),app❆1_s(y)) -> #app❆2_lt(x,y)
   #28: #app❆2_mult(app❆1_s(x),y) -> #app❆2_plus(y,app❆2_mult(x,y))
   #29: #app❆2_mult(app❆1_s(x),y) -> #app❆2_mult(x,y)
   #30: #list1() -> #app❆2_map(app❆1_mult(app❆1_s(app❆1_s(0()))),hamming())
   #31: #list1() -> #hamming()
Number of SCCs: 6, DPs: 15, edges: 29
	SCC { #18 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
 list3()	weight: 0
 merge()	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆1_if(x1)	weight: 0
app❆2_mult(x1,x2)	weight: 0
app❆2_merge(x1,x2)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
app❆2_plus(x1,x2)	weight: 0
#app❆2_eq(x1,x2)	weight: 0
#list1()	weight: 0
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
 list1()	weight: 0
 false()	weight: 0
#hamming()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
#list2()	weight: 0
  mult()	weight: 0
    if()	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: 0
#app❆2_plus(x1,x2)	weight: x1
#app❆2_mult(x1,x2)	weight: 0
#app❆2_lt(x1,x2)	weight: 0
hamming()	weight: 0
   nil()	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
  plus()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
#list3()	weight: 0
app❆2_lt(x1,x2)	weight: 0
#app❆2_merge(x1,x2)	weight: 0
app❆1_merge(x1)	weight: 0
 list2()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_mult(x1)	weight: 0
app❆1_cons(x1)	weight: 0
    lt()	weight: 0
app❆1_lt(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #18
Number of SCCs: 5, DPs: 14, edges: 28
	SCC { #29 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
 list3()	weight: 0
 merge()	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆1_if(x1)	weight: 0
app❆2_mult(x1,x2)	weight: 0
app❆2_merge(x1,x2)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
app❆2_plus(x1,x2)	weight: 0
#app❆2_eq(x1,x2)	weight: 0
#list1()	weight: 0
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
 list1()	weight: 0
 false()	weight: 0
#hamming()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
#list2()	weight: 0
  mult()	weight: 0
    if()	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: 0
#app❆2_plus(x1,x2)	weight: 0
#app❆2_mult(x1,x2)	weight: x1
#app❆2_lt(x1,x2)	weight: 0
hamming()	weight: 0
   nil()	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
  plus()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
#list3()	weight: 0
app❆2_lt(x1,x2)	weight: 0
#app❆2_merge(x1,x2)	weight: 0
app❆1_merge(x1)	weight: 0
 list2()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_mult(x1)	weight: 0
app❆1_cons(x1)	weight: 0
    lt()	weight: 0
app❆1_lt(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #29
Number of SCCs: 4, DPs: 13, edges: 27
	SCC { #27 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
 list3()	weight: 0
 merge()	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆1_if(x1)	weight: 0
app❆2_mult(x1,x2)	weight: 0
app❆2_merge(x1,x2)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
app❆2_plus(x1,x2)	weight: 0
#app❆2_eq(x1,x2)	weight: 0
#list1()	weight: 0
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
 list1()	weight: 0
 false()	weight: 0
#hamming()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
#list2()	weight: 0
  mult()	weight: 0
    if()	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: 0
#app❆2_plus(x1,x2)	weight: 0
#app❆2_mult(x1,x2)	weight: 0
#app❆2_lt(x1,x2)	weight: x2
hamming()	weight: 0
   nil()	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
  plus()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
#list3()	weight: 0
app❆2_lt(x1,x2)	weight: 0
#app❆2_merge(x1,x2)	weight: 0
app❆1_merge(x1)	weight: 0
 list2()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_mult(x1)	weight: 0
app❆1_cons(x1)	weight: 0
    lt()	weight: 0
app❆1_lt(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #27
Number of SCCs: 3, DPs: 12, edges: 26
	SCC { #15 #21 #23 #25 #26 #31 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #hamming()	-#25->
  #list2()	--->*
  #list2()	-#21->
  #hamming()	--->*
  #hamming()
  Looping with: [ ]
