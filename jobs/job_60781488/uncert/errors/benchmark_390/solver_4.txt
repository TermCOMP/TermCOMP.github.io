Input TRS:
    1: f(true(),xs) -> f(eq(s(length(xs)),length(cons(a(),xs))),append(xs,cons(a(),nil())))
    2: length(nil()) -> 0()
    3: length(cons(x,xs)) -> s(length(xs))
    4: eq(0(),0()) -> true()
    5: eq(s(x),0()) -> false()
    6: eq(0(),s(y)) -> false()
    7: eq(s(x),s(y)) -> eq(x,y)
    8: append(nil(),ys) -> ys
    9: append(cons(x,xs),ys) -> cons(x,append(xs,ys))
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Freezing length eq
1: f(true(),xs) -> f(eq❆1_s(length(xs),length❆1_cons(a(),xs)),append(xs,cons(a(),nil())))
2: length❆1_nil() -> 0()
3: length❆1_cons(x,xs) -> s(length(xs))
4: eq❆1_0(0()) -> true()
5: eq❆1_s(x,0()) -> false()
6: eq❆1_0(s(y)) -> false()
7: eq❆1_s(x,s(y)) -> eq(x,y)
8: append(nil(),ys) -> ys
9: append(cons(x,xs),ys) -> cons(x,append(xs,ys))
10: eq(0(),_1) ->= eq❆1_0(_1)
11: eq(s(_1),_2) ->= eq❆1_s(_1,_2)
12: length(cons(_1,_2)) ->= length❆1_cons(_1,_2)
13: length(nil()) ->= length❆1_nil()
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #length(nil()) ->? #length❆1_nil()
   #2: #append(cons(x,xs),ys) -> #append(xs,ys)
   #3: #eq(s(_1),_2) ->? #eq❆1_s(_1,_2)
   #4: #length(cons(_1,_2)) ->? #length❆1_cons(_1,_2)
   #5: #eq❆1_s(x,s(y)) -> #eq(x,y)
   #6: #eq(0(),_1) ->? #eq❆1_0(_1)
   #7: #length❆1_cons(x,xs) -> #length(xs)
   #8: #f(true(),xs) -> #f(eq❆1_s(length(xs),length❆1_cons(a(),xs)),append(xs,cons(a(),nil())))
   #9: #f(true(),xs) -> #eq❆1_s(length(xs),length❆1_cons(a(),xs))
   #10: #f(true(),xs) -> #length(xs)
   #11: #f(true(),xs) -> #length❆1_cons(a(),xs)
   #12: #f(true(),xs) -> #append(xs,cons(a(),nil()))
Number of SCCs: 4, DPs: 6, edges: 6
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     a()	weight: 0
     s(x1)	weight: 0
#append(x1,x2)	weight: x1
length❆1_nil()	weight: 0
    eq(x1,x2)	weight: 0
#length❆1_nil()	weight: 0
 false()	weight: 0
  true()	weight: 0
#eq❆1_0(x1)	weight: 0
     f(x1,x2)	weight: 0
  #eq(x1,x2)	weight: 0
eq❆1_s(x1,x2)	weight: 0
append(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
#eq❆1_s(x1,x2)	weight: 0
eq❆1_0(x1)	weight: 0
   #f(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
length❆1_cons(x1,x2)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
#length❆1_cons(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #4 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     a()	weight: 0
     s(x1)	weight: 0
#append(x1,x2)	weight: 0
length❆1_nil()	weight: 0
    eq(x1,x2)	weight: 0
#length❆1_nil()	weight: 0
 false()	weight: 0
  true()	weight: 0
#eq❆1_0(x1)	weight: 0
     f(x1,x2)	weight: 0
  #eq(x1,x2)	weight: 0
eq❆1_s(x1,x2)	weight: 0
append(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
#eq❆1_s(x1,x2)	weight: 0
eq❆1_0(x1)	weight: 0
   #f(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
length❆1_cons(x1,x2)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
#length❆1_cons(x1,x2)	weight: (/ 1 4) + x2
    Usable rules: { }
    Removed DPs: #4 #7
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #3 #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     a()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#append(x1,x2)	weight: 0
length❆1_nil()	weight: 0
    eq(x1,x2)	weight: 0
#length❆1_nil()	weight: 0
 false()	weight: 0
  true()	weight: 0
#eq❆1_0(x1)	weight: 0
     f(x1,x2)	weight: 0
  #eq(x1,x2)	weight: (/ 1 4) + x2
eq❆1_s(x1,x2)	weight: 0
append(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
#eq❆1_s(x1,x2)	weight: x2
eq❆1_0(x1)	weight: 0
   #f(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
length❆1_cons(x1,x2)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
#length❆1_cons(x1,x2)	weight: (/ 1 4)
    Usable rules: { }
    Removed DPs: #3 #5
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
