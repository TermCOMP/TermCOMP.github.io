Input TRS:
    1: minus(0(),x) -> 0()
    2: minus(s(x),0()) -> s(x)
    3: minus(s(x),s(y)) -> minus(x,y)
    4: mod(x,0()) -> 0()
    5: mod(x,s(y)) -> if(lt(x,s(y)),x,s(y))
    6: if(true(),x,y) -> x
    7: if(false(),x,y) -> mod(minus(x,y),y)
    8: gcd(x,0()) -> x
    9: gcd(0(),s(y)) -> s(y)
    10: gcd(s(x),s(y)) -> gcd(mod(s(x),s(y)),mod(s(y),s(x)))
    11: lt(x,0()) -> false()
    12: lt(0(),s(x)) -> true()
    13: lt(s(x),s(y)) -> lt(x,y)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #lt(s(x),s(y)) -> #lt(x,y)
   #2: #if(false(),x,y) -> #mod(minus(x,y),y)
   #3: #if(false(),x,y) -> #minus(x,y)
   #4: #gcd(s(x),s(y)) -> #gcd(mod(s(x),s(y)),mod(s(y),s(x)))
   #5: #gcd(s(x),s(y)) -> #mod(s(x),s(y))
   #6: #gcd(s(x),s(y)) -> #mod(s(y),s(x))
   #7: #mod(x,s(y)) -> #if(lt(x,s(y)),x,s(y))
   #8: #mod(x,s(y)) -> #lt(x,s(y))
   #9: #minus(s(x),s(y)) -> #minus(x,y)
Number of SCCs: 4, DPs: 5, edges: 5
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
  #lt(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    lt(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
  #lt(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: x2
 #mod(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    lt(x1,x2)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
