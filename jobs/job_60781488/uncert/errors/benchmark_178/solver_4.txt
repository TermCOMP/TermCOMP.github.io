Input TRS:
    1: minus(x,0()) -> x
    2: minus(s(x),s(y)) -> minus(x,y)
    3: quot(0(),s(y)) -> 0()
    4: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
    5: le(0(),y) -> true()
    6: le(s(x),0()) -> false()
    7: le(s(x),s(y)) -> le(x,y)
    8: inc(s(x)) -> s(inc(x))
    9: inc(0()) -> s(0())
    10: log(x) -> logIter(x,0())
    11: logIter(x,y) -> if(le(s(0()),x),le(s(s(0())),x),quot(x,s(s(0()))),inc(y))
    12: if(false(),b,x,y) -> logZeroError()
    13: if(true(),false(),x,s(y)) -> y
    14: if(true(),true(),x,y) -> logIter(x,y)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing le
1: minus(x,0()) -> x
2: minus(s(x),s(y)) -> minus(x,y)
3: quot(0(),s(y)) -> 0()
4: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
5: le❆1_0(y) -> true()
6: le❆1_s(x,0()) -> false()
7: le❆1_s(x,s(y)) -> le(x,y)
8: inc(s(x)) -> s(inc(x))
9: inc(0()) -> s(0())
10: log(x) -> logIter(x,0())
11: logIter(x,y) -> if(le❆1_s(0(),x),le❆1_s(s(0()),x),quot(x,s(s(0()))),inc(y))
12: if(false(),b,x,y) -> logZeroError()
13: if(true(),false(),x,s(y)) -> y
14: if(true(),true(),x,y) -> logIter(x,y)
15: le(0(),_1) ->= le❆1_0(_1)
16: le(s(_1),_2) ->= le❆1_s(_1,_2)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #logIter(x,y) -> #if(le❆1_s(0(),x),le❆1_s(s(0()),x),quot(x,s(s(0()))),inc(y))
   #3: #logIter(x,y) -> #le❆1_s(0(),x)
   #4: #logIter(x,y) -> #le❆1_s(s(0()),x)
   #5: #logIter(x,y) -> #quot(x,s(s(0())))
   #6: #logIter(x,y) -> #inc(y)
   #7: #if(true(),true(),x,y) -> #logIter(x,y)
   #8: #le❆1_s(x,s(y)) -> #le(x,y)
   #9: #log(x) -> #logIter(x,0())
   #10: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
   #11: #inc(s(x)) -> #inc(x)
   #12: #le(0(),_1) ->? #le❆1_0(_1)
   #13: #quot(s(x),s(y)) -> #quot(minus(x,y),s(y))
   #14: #quot(s(x),s(y)) -> #minus(x,y)
Number of SCCs: 5, DPs: 7, edges: 7
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: x1
   inc(x1)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: 0
logIter(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#logIter(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: 0
le❆1_0(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #11
Number of SCCs: 4, DPs: 6, edges: 6
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: 0
logIter(x1,x2)	weight: 0
#minus(x1,x2)	weight: x2
#logIter(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: 0
le❆1_0(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: 0
logIter(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#logIter(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: x1
le❆1_0(x1)	weight: 0
    Usable rules: { 1 2 }
    Removed DPs: #13
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #8 #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x1
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 4) + x1
logIter(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#logIter(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: x1
le❆1_0(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #8 #10
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #2 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
