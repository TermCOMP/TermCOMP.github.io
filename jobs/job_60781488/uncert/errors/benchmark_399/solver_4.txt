Input TRS:
    1: while(true(),x,y) -> cond(gt(x,0()),x,y)
    2: cond(true(),s(x),y) -> while(gt(y,0()),x,y)
    3: cond(false(),x,y) -> while(gt(s(y),0()),s(y),s(y))
    4: gt(s(x),0()) -> true()
    5: gt(0(),x) -> false()
    6: gt(s(x),s(y)) -> gt(x,y)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing gt
1: while(true(),x,y) -> cond(gt(x,0()),x,y)
2: cond(true(),s(x),y) -> while(gt(y,0()),x,y)
3: cond(false(),x,y) -> while(gt❆1_s(y,0()),s(y),s(y))
4: gt❆1_s(x,0()) -> true()
5: gt❆1_0(x) -> false()
6: gt❆1_s(x,s(y)) -> gt(x,y)
7: gt(0(),_1) ->= gt❆1_0(_1)
8: gt(s(_1),_2) ->= gt❆1_s(_1,_2)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #cond(true(),s(x),y) -> #while(gt(y,0()),x,y)
   #2: #cond(true(),s(x),y) -> #gt(y,0())
   #3: #gt❆1_s(x,s(y)) -> #gt(x,y)
   #4: #gt(0(),_1) ->? #gt❆1_0(_1)
   #5: #cond(false(),x,y) -> #while(gt❆1_s(y,0()),s(y),s(y))
   #6: #cond(false(),x,y) -> #gt❆1_s(y,0())
   #7: #while(true(),x,y) -> #cond(gt(x,0()),x,y)
   #8: #while(true(),x,y) -> #gt(x,0())
   #9: #gt(s(_1),_2) ->? #gt❆1_s(_1,_2)
Number of SCCs: 2, DPs: 5, edges: 6
	SCC { #3 #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
gt❆1_0(x1)	weight: 0
    gt(x1,x2)	weight: 0
 false()	weight: 0
#while(x1,x2,x3)	weight: 0
  true()	weight: 0
#cond(x1,x2,x3)	weight: 0
     0()	weight: 0
 while(x1,x2,x3)	weight: 0
#gt❆1_0(x1)	weight: 0
  #gt(x1,x2)	weight: x1
#gt❆1_s(x1,x2)	weight: (/ 1 4) + x1
gt❆1_s(x1,x2)	weight: 0
  cond(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #3 #9
Number of SCCs: 1, DPs: 3, edges: 4
	SCC { #1 #5 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
