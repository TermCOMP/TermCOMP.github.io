Input TRS:
    1: le(s(x),0()) -> false()
    2: le(0(),y) -> true()
    3: le(s(x),s(y)) -> le(x,y)
    4: plus(0(),y) -> y
    5: plus(s(x),y) -> s(plus(x,y))
    6: times(0(),y) -> 0()
    7: times(s(x),y) -> plus(y,times(x,y))
    8: log(x,0()) -> baseError()
    9: log(x,s(0())) -> baseError()
    10: log(0(),s(s(b))) -> logZeroError()
    11: log(s(x),s(s(b))) -> loop(s(x),s(s(b)),s(0()),0())
    12: loop(x,s(s(b)),s(y),z) -> if(le(x,s(y)),x,s(s(b)),s(y),z)
    13: if(true(),x,b,y,z) -> z
    14: if(false(),x,b,y,z) -> loop(x,b,times(b,y),s(z))
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #log(s(x),s(s(b))) -> #loop(s(x),s(s(b)),s(0()),0())
   #2: #loop(x,s(s(b)),s(y),z) -> #if(le(x,s(y)),x,s(s(b)),s(y),z)
   #3: #loop(x,s(s(b)),s(y),z) -> #le(x,s(y))
   #4: #if(false(),x,b,y,z) -> #loop(x,b,times(b,y),s(z))
   #5: #if(false(),x,b,y,z) -> #times(b,y)
   #6: #times(s(x),y) -> #plus(y,times(x,y))
   #7: #times(s(x),y) -> #times(x,y)
   #8: #plus(s(x),y) -> #plus(x,y)
   #9: #le(s(x),s(y)) -> #le(x,y)
Number of SCCs: 4, DPs: 5, edges: 5
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
#plus(x1,x2)	weight: x1
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1,x2)	weight: 0
  true()	weight: 0
baseError()	weight: 0
#times(x1,x2)	weight: 0
   log(x1,x2)	weight: 0
#loop(x1,x2,x3,x4)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
 times(x1,x2)	weight: 0
  loop(x1,x2,x3,x4)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4,x5)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
#plus(x1,x2)	weight: 0
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1,x2)	weight: 0
  true()	weight: 0
baseError()	weight: 0
#times(x1,x2)	weight: x1
   log(x1,x2)	weight: 0
#loop(x1,x2,x3,x4)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
 times(x1,x2)	weight: 0
  loop(x1,x2,x3,x4)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4,x5)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
#plus(x1,x2)	weight: 0
 false()	weight: 0
logZeroError()	weight: 0
 #log(x1,x2)	weight: 0
  true()	weight: 0
baseError()	weight: 0
#times(x1,x2)	weight: 0
   log(x1,x2)	weight: 0
#loop(x1,x2,x3,x4)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
 times(x1,x2)	weight: 0
  loop(x1,x2,x3,x4)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4,x5)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #2 #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
