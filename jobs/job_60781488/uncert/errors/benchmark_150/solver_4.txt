Input TRS:
    1: fstsplit(0(),x) -> nil()
    2: fstsplit(s(n),nil()) -> nil()
    3: fstsplit(s(n),cons(h,t)) -> cons(h,fstsplit(n,t))
    4: sndsplit(0(),x) -> x
    5: sndsplit(s(n),nil()) -> nil()
    6: sndsplit(s(n),cons(h,t)) -> sndsplit(n,t)
    7: empty(nil()) -> true()
    8: empty(cons(h,t)) -> false()
    9: leq(0(),m) -> true()
    10: leq(s(n),0()) -> false()
    11: leq(s(n),s(m)) -> leq(n,m)
    12: length(nil()) -> 0()
    13: length(cons(h,t)) -> s(length(t))
    14: app(nil(),x) -> x
    15: app(cons(h,t),x) -> cons(h,app(t,x))
    16: map_f(pid,nil()) -> nil()
    17: map_f(pid,cons(h,t)) -> app(f(pid,h),map_f(pid,t))
    18: head(cons(h,t)) -> h
    19: tail(cons(h,t)) -> t
    20: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_1(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_1)))
    21: if_1(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(sndsplit(m,st_1),cons(fstsplit(m,st_1),in_2),st_2,in_3,st_3,m)
    22: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_2(st_1,in_2,st_2,in_3,st_3,m,leq(m,length(st_2)))
    23: if_2(st_1,in_2,st_2,in_3,st_3,m,true()) -> if_3(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_2)))
    24: if_3(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,in_2,sndsplit(m,st_2),cons(fstsplit(m,st_2),in_3),st_3,m)
    25: if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> if_4(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,app(map_f(two(),head(in_2)),st_2))))
    26: if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,tail(in_2),sndsplit(m,app(map_f(two(),head(in_2)),st_2)),cons(fstsplit(m,app(map_f(two(),head(in_2)),st_2)),in_3),st_3,m)
    27: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_5(st_1,in_2,st_2,in_3,st_3,m,empty(map_f(two(),head(in_2))))
    28: if_5(st_1,in_2,st_2,in_3,st_3,m,true()) -> ring(st_1,tail(in_2),st_2,in_3,st_3,m)
    29: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_6(st_1,in_2,st_2,in_3,st_3,m,leq(m,length(st_3)))
    30: if_6(st_1,in_2,st_2,in_3,st_3,m,true()) -> if_7(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_3)))
    31: if_7(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,in_2,st_2,in_3,sndsplit(m,st_3),m)
    32: if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> if_8(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,app(map_f(three(),head(in_3)),st_3))))
    33: if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,in_2,st_2,tail(in_3),sndsplit(m,app(map_f(three(),head(in_3)),st_3)),m)
    34: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_9(st_1,in_2,st_2,in_3,st_3,m,empty(map_f(three(),head(in_3))))
    35: if_9(st_1,in_2,st_2,in_3,st_3,m,true()) -> ring(st_1,in_2,st_2,tail(in_3),st_3,m)
Number of strict rules: 35
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: fstsplit(0(),x) -> nil()
2: fstsplit(s(n),nil()) -> nil()
3: fstsplit(s(n),cons(h,t)) -> cons(h,fstsplit(n,t))
4: sndsplit(0(),x) -> x
5: sndsplit(s(n),nil()) -> nil()
6: sndsplit(s(n),cons(h,t)) -> sndsplit(n,t)
7: empty(nil()) -> true()
8: empty(cons(h,t)) -> false()
9: leq(0(),m) -> true()
10: leq(s(n),0()) -> false()
11: leq(s(n),s(m)) -> leq(n,m)
12: length(nil()) -> 0()
13: length(cons(h,t)) -> s(length(t))
14: app❆1_nil(x) -> x
15: app❆1_cons(h,t,x) -> cons(h,app(t,x))
16: map_f(pid,nil()) -> nil()
17: map_f(pid,cons(h,t)) -> app❆1_f(pid,h,map_f(pid,t))
18: head(cons(h,t)) -> h
19: tail(cons(h,t)) -> t
20: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_1(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_1)))
21: if_1(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(sndsplit(m,st_1),cons(fstsplit(m,st_1),in_2),st_2,in_3,st_3,m)
22: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_2(st_1,in_2,st_2,in_3,st_3,m,leq(m,length(st_2)))
23: if_2(st_1,in_2,st_2,in_3,st_3,m,true()) -> if_3(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_2)))
24: if_3(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,in_2,sndsplit(m,st_2),cons(fstsplit(m,st_2),in_3),st_3,m)
25: if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> if_4(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,app(map_f(two(),head(in_2)),st_2))))
26: if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,tail(in_2),sndsplit(m,app(map_f(two(),head(in_2)),st_2)),cons(fstsplit(m,app(map_f(two(),head(in_2)),st_2)),in_3),st_3,m)
27: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_5(st_1,in_2,st_2,in_3,st_3,m,empty(map_f(two(),head(in_2))))
28: if_5(st_1,in_2,st_2,in_3,st_3,m,true()) -> ring(st_1,tail(in_2),st_2,in_3,st_3,m)
29: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_6(st_1,in_2,st_2,in_3,st_3,m,leq(m,length(st_3)))
30: if_6(st_1,in_2,st_2,in_3,st_3,m,true()) -> if_7(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_3)))
31: if_7(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,in_2,st_2,in_3,sndsplit(m,st_3),m)
32: if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> if_8(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,app(map_f(three(),head(in_3)),st_3))))
33: if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> ring(st_1,in_2,st_2,tail(in_3),sndsplit(m,app(map_f(three(),head(in_3)),st_3)),m)
34: ring(st_1,in_2,st_2,in_3,st_3,m) -> if_9(st_1,in_2,st_2,in_3,st_3,m,empty(map_f(three(),head(in_3))))
35: if_9(st_1,in_2,st_2,in_3,st_3,m,true()) -> ring(st_1,in_2,st_2,tail(in_3),st_3,m)
36: app(cons(_1,_2),_3) ->= app❆1_cons(_1,_2,_3)
37: app(nil(),_1) ->= app❆1_nil(_1)
38: app(f(_1,_2),_3) ->= app❆1_f(_1,_2,_3)
Number of strict rules: 35
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #if_6(st_1,in_2,st_2,in_3,st_3,m,leq(m,length(st_3)))
   #2: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #leq(m,length(st_3))
   #3: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #length(st_3)
   #4: #if_9(st_1,in_2,st_2,in_3,st_3,m,true()) -> #ring(st_1,in_2,st_2,tail(in_3),st_3,m)
   #5: #if_9(st_1,in_2,st_2,in_3,st_3,m,true()) -> #tail(in_3)
   #6: #app(nil(),_1) ->? #app❆1_nil(_1)
   #7: #sndsplit(s(n),cons(h,t)) -> #sndsplit(n,t)
   #8: #length(cons(h,t)) -> #length(t)
   #9: #leq(s(n),s(m)) -> #leq(n,m)
   #10: #if_3(st_1,in_2,st_2,in_3,st_3,m,false()) -> #ring(st_1,in_2,sndsplit(m,st_2),cons(fstsplit(m,st_2),in_3),st_3,m)
   #11: #if_3(st_1,in_2,st_2,in_3,st_3,m,false()) -> #sndsplit(m,st_2)
   #12: #if_3(st_1,in_2,st_2,in_3,st_3,m,false()) -> #fstsplit(m,st_2)
   #13: #if_2(st_1,in_2,st_2,in_3,st_3,m,true()) -> #if_3(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_2)))
   #14: #if_2(st_1,in_2,st_2,in_3,st_3,m,true()) -> #empty(fstsplit(m,st_2))
   #15: #if_2(st_1,in_2,st_2,in_3,st_3,m,true()) -> #fstsplit(m,st_2)
   #16: #if_7(st_1,in_2,st_2,in_3,st_3,m,false()) -> #ring(st_1,in_2,st_2,in_3,sndsplit(m,st_3),m)
   #17: #if_7(st_1,in_2,st_2,in_3,st_3,m,false()) -> #sndsplit(m,st_3)
   #18: #if_6(st_1,in_2,st_2,in_3,st_3,m,true()) -> #if_7(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_3)))
   #19: #if_6(st_1,in_2,st_2,in_3,st_3,m,true()) -> #empty(fstsplit(m,st_3))
   #20: #if_6(st_1,in_2,st_2,in_3,st_3,m,true()) -> #fstsplit(m,st_3)
   #21: #if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> #if_4(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,app(map_f(two(),head(in_2)),st_2))))
   #22: #if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> #empty(fstsplit(m,app(map_f(two(),head(in_2)),st_2)))
   #23: #if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> #fstsplit(m,app(map_f(two(),head(in_2)),st_2))
   #24: #if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> #app(map_f(two(),head(in_2)),st_2)
   #25: #if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> #map_f(two(),head(in_2))
   #26: #if_2(st_1,in_2,st_2,in_3,st_3,m,false()) -> #head(in_2)
   #27: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #if_1(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,st_1)))
   #28: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #empty(fstsplit(m,st_1))
   #29: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #fstsplit(m,st_1)
   #30: #if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> #ring(st_1,in_2,st_2,tail(in_3),sndsplit(m,app(map_f(three(),head(in_3)),st_3)),m)
   #31: #if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> #tail(in_3)
   #32: #if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> #sndsplit(m,app(map_f(three(),head(in_3)),st_3))
   #33: #if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> #app(map_f(three(),head(in_3)),st_3)
   #34: #if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> #map_f(three(),head(in_3))
   #35: #if_8(st_1,in_2,st_2,in_3,st_3,m,false()) -> #head(in_3)
   #36: #if_5(st_1,in_2,st_2,in_3,st_3,m,true()) -> #ring(st_1,tail(in_2),st_2,in_3,st_3,m)
   #37: #if_5(st_1,in_2,st_2,in_3,st_3,m,true()) -> #tail(in_2)
   #38: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #if_2(st_1,in_2,st_2,in_3,st_3,m,leq(m,length(st_2)))
   #39: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #leq(m,length(st_2))
   #40: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #length(st_2)
   #41: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #if_9(st_1,in_2,st_2,in_3,st_3,m,empty(map_f(three(),head(in_3))))
   #42: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #empty(map_f(three(),head(in_3)))
   #43: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #map_f(three(),head(in_3))
   #44: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #head(in_3)
   #45: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #if_5(st_1,in_2,st_2,in_3,st_3,m,empty(map_f(two(),head(in_2))))
   #46: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #empty(map_f(two(),head(in_2)))
   #47: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #map_f(two(),head(in_2))
   #48: #ring(st_1,in_2,st_2,in_3,st_3,m) -> #head(in_2)
   #49: #map_f(pid,cons(h,t)) -> #map_f(pid,t)
   #50: #if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> #if_8(st_1,in_2,st_2,in_3,st_3,m,empty(fstsplit(m,app(map_f(three(),head(in_3)),st_3))))
   #51: #if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> #empty(fstsplit(m,app(map_f(three(),head(in_3)),st_3)))
   #52: #if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> #fstsplit(m,app(map_f(three(),head(in_3)),st_3))
   #53: #if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> #app(map_f(three(),head(in_3)),st_3)
   #54: #if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> #map_f(three(),head(in_3))
   #55: #if_6(st_1,in_2,st_2,in_3,st_3,m,false()) -> #head(in_3)
   #56: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #ring(st_1,tail(in_2),sndsplit(m,app(map_f(two(),head(in_2)),st_2)),cons(fstsplit(m,app(map_f(two(),head(in_2)),st_2)),in_3),st_3,m)
   #57: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #tail(in_2)
   #58: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #sndsplit(m,app(map_f(two(),head(in_2)),st_2))
   #59: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #app(map_f(two(),head(in_2)),st_2)
   #60: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #map_f(two(),head(in_2))
   #61: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #head(in_2)
   #62: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #fstsplit(m,app(map_f(two(),head(in_2)),st_2))
   #63: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #app(map_f(two(),head(in_2)),st_2)
   #64: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #map_f(two(),head(in_2))
   #65: #if_4(st_1,in_2,st_2,in_3,st_3,m,false()) -> #head(in_2)
   #66: #app(cons(_1,_2),_3) ->? #app❆1_cons(_1,_2,_3)
   #67: #if_1(st_1,in_2,st_2,in_3,st_3,m,false()) -> #ring(sndsplit(m,st_1),cons(fstsplit(m,st_1),in_2),st_2,in_3,st_3,m)
   #68: #if_1(st_1,in_2,st_2,in_3,st_3,m,false()) -> #sndsplit(m,st_1)
   #69: #if_1(st_1,in_2,st_2,in_3,st_3,m,false()) -> #fstsplit(m,st_1)
   #70: #fstsplit(s(n),cons(h,t)) -> #fstsplit(n,t)
   #71: #app❆1_cons(h,t,x) -> #app(t,x)
Number of SCCs: 7, DPs: 23, edges: 53
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#empty(x1)	weight: 0
     s(x1)	weight: 0
#if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#sndsplit(x1,x2)	weight: 0
 three()	weight: 0
app❆1_nil(x1)	weight: 0
#if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_cons(x1,x2,x3)	weight: 0
sndsplit(x1,x2)	weight: 0
  if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
 false()	weight: 0
#head(x1)	weight: 0
   two()	weight: 0
#if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
   leq(x1,x2)	weight: 0
  if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
 #leq(x1,x2)	weight: 0
  tail(x1)	weight: 0
#fstsplit(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1,x2,x3)	weight: 0
#map_f(x1,x2)	weight: 0
#if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_nil(x1)	weight: 0
   nil()	weight: 0
  if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#tail(x1)	weight: 0
 #app(x1,x2)	weight: 0
fstsplit(x1,x2)	weight: 0
 map_f(x1,x2)	weight: 0
#if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  ring(x1,x2,x3,x4,x5,x6)	weight: 0
  if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  head(x1)	weight: 0
#if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
 empty(x1)	weight: 0
#ring(x1,x2,x3,x4,x5,x6)	weight: 0
app❆1_cons(x1,x2,x3)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 6, DPs: 22, edges: 52
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#empty(x1)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#sndsplit(x1,x2)	weight: 0
 three()	weight: 0
app❆1_nil(x1)	weight: 0
#if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_cons(x1,x2,x3)	weight: 0
sndsplit(x1,x2)	weight: 0
  if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
 false()	weight: 0
#head(x1)	weight: 0
   two()	weight: 0
#if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
   leq(x1,x2)	weight: 0
  if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
 #leq(x1,x2)	weight: x2
  tail(x1)	weight: 0
#fstsplit(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1,x2,x3)	weight: 0
#map_f(x1,x2)	weight: 0
#if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_nil(x1)	weight: 0
   nil()	weight: 0
  if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#tail(x1)	weight: 0
 #app(x1,x2)	weight: 0
fstsplit(x1,x2)	weight: 0
 map_f(x1,x2)	weight: 0
#if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  ring(x1,x2,x3,x4,x5,x6)	weight: 0
  if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  head(x1)	weight: 0
#if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
 empty(x1)	weight: 0
#ring(x1,x2,x3,x4,x5,x6)	weight: 0
app❆1_cons(x1,x2,x3)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 5, DPs: 21, edges: 51
	SCC { #49 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#empty(x1)	weight: 0
     s(x1)	weight: (/ 1 2)
#if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#sndsplit(x1,x2)	weight: 0
 three()	weight: 0
app❆1_nil(x1)	weight: 0
#if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_cons(x1,x2,x3)	weight: 0
sndsplit(x1,x2)	weight: 0
  if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
 false()	weight: 0
#head(x1)	weight: 0
   two()	weight: 0
#if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
   leq(x1,x2)	weight: 0
  if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
 #leq(x1,x2)	weight: 0
  tail(x1)	weight: 0
#fstsplit(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1,x2,x3)	weight: 0
#map_f(x1,x2)	weight: x2
#if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_nil(x1)	weight: 0
   nil()	weight: 0
  if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#tail(x1)	weight: 0
 #app(x1,x2)	weight: 0
fstsplit(x1,x2)	weight: 0
 map_f(x1,x2)	weight: 0
#if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  ring(x1,x2,x3,x4,x5,x6)	weight: 0
  if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  head(x1)	weight: 0
#if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
 empty(x1)	weight: 0
#ring(x1,x2,x3,x4,x5,x6)	weight: 0
app❆1_cons(x1,x2,x3)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #49
Number of SCCs: 4, DPs: 20, edges: 50
	SCC { #70 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#empty(x1)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#sndsplit(x1,x2)	weight: 0
 three()	weight: 0
app❆1_nil(x1)	weight: 0
#if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_cons(x1,x2,x3)	weight: 0
sndsplit(x1,x2)	weight: 0
  if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
 false()	weight: 0
#head(x1)	weight: 0
   two()	weight: 0
#if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
   leq(x1,x2)	weight: 0
  if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
 #leq(x1,x2)	weight: 0
  tail(x1)	weight: 0
#fstsplit(x1,x2)	weight: x1
     0()	weight: 0
app❆1_f(x1,x2,x3)	weight: 0
#map_f(x1,x2)	weight: 0
#if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_nil(x1)	weight: 0
   nil()	weight: 0
  if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#tail(x1)	weight: 0
 #app(x1,x2)	weight: 0
fstsplit(x1,x2)	weight: 0
 map_f(x1,x2)	weight: 0
#if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  ring(x1,x2,x3,x4,x5,x6)	weight: 0
  if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  head(x1)	weight: 0
#if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
 empty(x1)	weight: 0
#ring(x1,x2,x3,x4,x5,x6)	weight: 0
app❆1_cons(x1,x2,x3)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #70
Number of SCCs: 3, DPs: 19, edges: 49
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#empty(x1)	weight: 0
     s(x1)	weight: (/ 1 2)
#if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#sndsplit(x1,x2)	weight: x2
 three()	weight: 0
app❆1_nil(x1)	weight: 0
#if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_cons(x1,x2,x3)	weight: 0
sndsplit(x1,x2)	weight: 0
  if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
 false()	weight: 0
#head(x1)	weight: 0
   two()	weight: 0
#if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
   leq(x1,x2)	weight: 0
  if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
 #leq(x1,x2)	weight: 0
  tail(x1)	weight: 0
#fstsplit(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1,x2,x3)	weight: 0
#map_f(x1,x2)	weight: 0
#if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_nil(x1)	weight: 0
   nil()	weight: 0
  if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#tail(x1)	weight: 0
 #app(x1,x2)	weight: 0
fstsplit(x1,x2)	weight: 0
 map_f(x1,x2)	weight: 0
#if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  ring(x1,x2,x3,x4,x5,x6)	weight: 0
  if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  head(x1)	weight: 0
#if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
 empty(x1)	weight: 0
#ring(x1,x2,x3,x4,x5,x6)	weight: 0
app❆1_cons(x1,x2,x3)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 2, DPs: 18, edges: 48
	SCC { #66 #71 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#empty(x1)	weight: 0
     s(x1)	weight: (/ 1 4)
#if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#sndsplit(x1,x2)	weight: 0
 three()	weight: 0
app❆1_nil(x1)	weight: 0
#if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_cons(x1,x2,x3)	weight: (/ 1 4) + x2
sndsplit(x1,x2)	weight: 0
  if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
 false()	weight: 0
#head(x1)	weight: 0
   two()	weight: 0
#if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_2(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_3(x1,x2,x3,x4,x5,x6,x7)	weight: 0
   leq(x1,x2)	weight: 0
  if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
 #leq(x1,x2)	weight: 0
  tail(x1)	weight: 0
#fstsplit(x1,x2)	weight: 0
     0()	weight: 0
app❆1_f(x1,x2,x3)	weight: 0
#map_f(x1,x2)	weight: 0
#if_1(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#app❆1_nil(x1)	weight: 0
   nil()	weight: 0
  if_9(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
#tail(x1)	weight: 0
 #app(x1,x2)	weight: x1
fstsplit(x1,x2)	weight: 0
 map_f(x1,x2)	weight: 0
#if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_7(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_4(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  ring(x1,x2,x3,x4,x5,x6)	weight: 0
  if_5(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  if_6(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  head(x1)	weight: 0
#if_8(x1,x2,x3,x4,x5,x6,x7)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
 empty(x1)	weight: 0
#ring(x1,x2,x3,x4,x5,x6)	weight: 0
app❆1_cons(x1,x2,x3)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #66 #71
Number of SCCs: 1, DPs: 16, edges: 46
	SCC { #1 #4 #10 #13 #16 #18 #21 #27 #30 #36 #38 #41 #45 #50 #56 #67 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)...