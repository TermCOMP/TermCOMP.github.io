Input TRS:
    1: U11(tt(),V2) -> U12(isNat(activate(V2)))
    2: U12(tt()) -> tt()
    3: U21(tt()) -> tt()
    4: U31(tt(),N) -> activate(N)
    5: U41(tt(),M,N) -> U42(isNat(activate(N)),activate(M),activate(N))
    6: U42(tt(),M,N) -> s(plus(activate(N),activate(M)))
    7: isNat(n__0()) -> tt()
    8: isNat(n__plus(V1,V2)) -> U11(isNat(activate(V1)),activate(V2))
    9: isNat(n__s(V1)) -> U21(isNat(activate(V1)))
    10: plus(N,0()) -> U31(isNat(N),N)
    11: plus(N,s(M)) -> U41(isNat(M),M,N)
    12: 0() -> n__0()
    13: plus(X1,X2) -> n__plus(X1,X2)
    14: s(X) -> n__s(X)
    15: activate(n__0()) -> 0()
    16: activate(n__plus(X1,X2)) -> plus(activate(X1),activate(X2))
    17: activate(n__s(X)) -> s(activate(X))
    18: activate(X) -> X
Number of strict rules: 18
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U42(tt(),M,N) -> #s(plus(activate(N),activate(M)))
   #2: #U42(tt(),M,N) -> #plus(activate(N),activate(M))
   #3: #U42(tt(),M,N) -> #activate(N)
   #4: #U42(tt(),M,N) -> #activate(M)
   #5: #isNat(n__s(V1)) -> #U21(isNat(activate(V1)))
   #6: #isNat(n__s(V1)) -> #isNat(activate(V1))
   #7: #isNat(n__s(V1)) -> #activate(V1)
   #8: #plus(N,s(M)) -> #U41(isNat(M),M,N)
   #9: #plus(N,s(M)) -> #isNat(M)
   #10: #plus(N,0()) -> #U31(isNat(N),N)
   #11: #plus(N,0()) -> #isNat(N)
   #12: #U41(tt(),M,N) -> #U42(isNat(activate(N)),activate(M),activate(N))
   #13: #U41(tt(),M,N) -> #isNat(activate(N))
   #14: #U41(tt(),M,N) -> #activate(N)
   #15: #U41(tt(),M,N) -> #activate(M)
   #16: #U41(tt(),M,N) -> #activate(N)
   #17: #activate(n__s(X)) -> #s(activate(X))
   #18: #activate(n__s(X)) -> #activate(X)
   #19: #activate(n__plus(X1,X2)) -> #plus(activate(X1),activate(X2))
   #20: #activate(n__plus(X1,X2)) -> #activate(X1)
   #21: #activate(n__plus(X1,X2)) -> #activate(X2)
   #22: #U11(tt(),V2) -> #U12(isNat(activate(V2)))
   #23: #U11(tt(),V2) -> #isNat(activate(V2))
   #24: #U11(tt(),V2) -> #activate(V2)
   #25: #isNat(n__plus(V1,V2)) -> #U11(isNat(activate(V1)),activate(V2))
   #26: #isNat(n__plus(V1,V2)) -> #isNat(activate(V1))
   #27: #isNat(n__plus(V1,V2)) -> #activate(V1)
   #28: #isNat(n__plus(V1,V2)) -> #activate(V2)
   #29: #activate(n__0()) -> #0()
   #30: #U31(tt(),N) -> #activate(N)
Number of SCCs: 1, DPs: 25, edges: 107
	SCC { #2..4 #6..16 #18..21 #23..28 #30 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
   U21(x1)	weight: 0
   U11(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#isNat(x1)	weight: (/ 1 8) + x1
   U42(x1,x2,x3)	weight: (/ 7 8) + x2 + x3
activate(x1)	weight: x1
#plus(x1,x2)	weight: (/ 1 4) + x1 + x2
#activate(x1)	weight: x1
   U12(x1)	weight: 0
  n__s(x1)	weight: (/ 1 2) + x1
 #U42(x1,x2,x3)	weight: (/ 3 8) + x2 + x3
 #U12(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
n__plus(x1,x2)	weight: (/ 3 8) + x1 + x2
  n__0()	weight: 0
 isNat(x1)	weight: (/ 1 8)
  plus(x1,x2)	weight: (/ 3 8) + x1 + x2
 #U11(x1,x2)	weight: (/ 1 4) + x1 + x2
   U31(x1,x2)	weight: x2
 #U41(x1,x2,x3)	weight: (/ 1 2) + x1 + x2 + x3
 #U21(x1)	weight: 0
    tt()	weight: 0
   U41(x1,x2,x3)	weight: (/ 7 8) + x2 + x3
 #U31(x1,x2)	weight: (/ 1 8) + x2
    Usable rules: { 1..18 }
    Removed DPs: #2..4 #6..16 #18..21 #23..28 #30
Number of SCCs: 0, DPs: 0, edges: 0
