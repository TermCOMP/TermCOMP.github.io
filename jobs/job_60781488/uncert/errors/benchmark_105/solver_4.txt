Input TRS:
    1: app(app(map(),f),nil()) -> nil()
    2: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    3: app(app(append(),xs),nil()) -> xs
    4: app(app(append(),nil()),ys) -> ys
    5: app(app(append(),app(app(cons(),x),xs)),ys) -> app(app(cons(),x),app(app(append(),xs),ys))
    6: app(app(zip(),nil()),yss) -> yss
    7: app(app(zip(),xss),nil()) -> xss
    8: app(app(zip(),app(app(cons(),xs),xss)),app(app(cons(),ys),yss)) -> app(app(cons(),app(app(append(),xs),ys)),app(app(zip(),xss),yss))
    9: app(app(combine(),xs),nil()) -> xs
    10: app(app(combine(),xs),app(app(cons(),ys),yss)) -> app(app(combine(),app(app(zip(),xs),ys)),yss)
    11: app(levels(),app(app(node(),x),xs)) -> app(app(cons(),app(app(cons(),x),nil())),app(app(combine(),nil()),app(app(map(),levels()),xs)))
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_map(f,nil()) -> nil()
2: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
3: app❆2_append(xs,nil()) -> xs
4: app❆2_append(nil(),ys) -> ys
5: app❆2_append(app❆2_cons(x,xs),ys) -> app❆2_cons(x,app❆2_append(xs,ys))
6: app❆2_zip(nil(),yss) -> yss
7: app❆2_zip(xss,nil()) -> xss
8: app❆2_zip(app❆2_cons(xs,xss),app❆2_cons(ys,yss)) -> app❆2_cons(app❆2_append(xs,ys),app❆2_zip(xss,yss))
9: app❆2_combine(xs,nil()) -> xs
10: app❆2_combine(xs,app❆2_cons(ys,yss)) -> app❆2_combine(app❆2_zip(xs,ys),yss)
11: app❆1_levels(app❆2_node(x,xs)) -> app❆2_cons(app❆2_cons(x,nil()),app❆2_combine(nil(),app❆2_map(levels(),xs)))
12: app(append(),_1) ->= app❆1_append(_1)
13: app(app❆1_append(_1),_2) ->= app❆2_append(_1,_2)
14: app(combine(),_1) ->= app❆1_combine(_1)
15: app(app❆1_combine(_1),_2) ->= app❆2_combine(_1,_2)
16: app(levels(),_1) ->= app❆1_levels(_1)
17: app(cons(),_1) ->= app❆1_cons(_1)
18: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
19: app(map(),_1) ->= app❆1_map(_1)
20: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
21: app(zip(),_1) ->= app❆1_zip(_1)
22: app(app❆1_zip(_1),_2) ->= app❆2_zip(_1,_2)
23: app(node(),_1) ->= app❆1_node(_1)
24: app(app❆1_node(_1),_2) ->= app❆2_node(_1,_2)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #2: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #3: #app(app❆1_append(_1),_2) ->? #app❆2_append(_1,_2)
   #4: #app❆1_levels(app❆2_node(x,xs)) -> #app❆2_combine(nil(),app❆2_map(levels(),xs))
   #5: #app❆1_levels(app❆2_node(x,xs)) -> #app❆2_map(levels(),xs)
   #6: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #7: #app❆2_combine(xs,app❆2_cons(ys,yss)) -> #app❆2_combine(app❆2_zip(xs,ys),yss)
   #8: #app❆2_combine(xs,app❆2_cons(ys,yss)) -> #app❆2_zip(xs,ys)
   #9: #app❆2_append(app❆2_cons(x,xs),ys) -> #app❆2_append(xs,ys)
   #10: #app(app❆1_zip(_1),_2) ->? #app❆2_zip(_1,_2)
   #11: #app(levels(),_1) ->? #app❆1_levels(_1)
   #12: #app❆2_zip(app❆2_cons(xs,xss),app❆2_cons(ys,yss)) -> #app❆2_append(xs,ys)
   #13: #app❆2_zip(app❆2_cons(xs,xss),app❆2_cons(ys,yss)) -> #app❆2_zip(xss,yss)
   #14: #app(app❆1_combine(_1),_2) ->? #app❆2_combine(_1,_2)
Number of SCCs: 4, DPs: 8, edges: 12
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆2_zip(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
#app❆1_levels(x1)	weight: 0
app❆2_zip(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_levels(x1)	weight: 0
app❆1_append(x1)	weight: 0
app❆1_combine(x1)	weight: 0
app❆1_zip(x1)	weight: 0
append()	weight: 0
combine()	weight: 0
levels()	weight: 0
#app❆2_append(x1,x2)	weight: x1
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
app❆2_node(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆2_append(x1,x2)	weight: 0
#app❆2_combine(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
   zip()	weight: 0
  node()	weight: 0
app❆2_combine(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 3, DPs: 7, edges: 11
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆2_zip(x1,x2)	weight: x2
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
#app❆1_levels(x1)	weight: 0
app❆2_zip(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_levels(x1)	weight: 0
app❆1_append(x1)	weight: 0
app❆1_combine(x1)	weight: 0
app❆1_zip(x1)	weight: 0
append()	weight: 0
combine()	weight: 0
levels()	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
app❆2_node(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆2_append(x1,x2)	weight: 0
#app❆2_combine(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
   zip()	weight: 0
  node()	weight: 0
app❆2_combine(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13
Number of SCCs: 2, DPs: 6, edges: 10
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆2_zip(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
#app❆1_levels(x1)	weight: 0
app❆2_zip(x1,x2)	weight: (/ 1 2)
app❆2_map(x1,x2)	weight: 0
app❆1_levels(x1)	weight: 0
app❆1_append(x1)	weight: 0
app❆1_combine(x1)	weight: 0
app❆1_zip(x1)	weight: 0
append()	weight: 0
combine()	weight: 0
levels()	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
app❆2_node(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆2_append(x1,x2)	weight: (/ 1 2)
#app❆2_combine(x1,x2)	weight: x2
app❆1_cons(x1)	weight: 0
   zip()	weight: 0
  node()	weight: 0
app❆2_combine(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 1, DPs: 5, edges: 9
	SCC { #1 #2 #5 #6 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆2_zip(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: x1
app❆1_map(x1)	weight: (/ 1 2) + x1
#app❆1_levels(x1)	weight: 0
app❆2_zip(x1,x2)	weight: (/ 1 2)
app❆2_map(x1,x2)	weight: 0
app❆1_levels(x1)	weight: 0
app❆1_append(x1)	weight: 0
app❆1_combine(x1)	weight: 0
app❆1_zip(x1)	weight: 0
append()	weight: 0
combine()	weight: 0
levels()	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: x1
   map()	weight: 0
app❆2_node(x1,x2)	weight: (/ 1 2)
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆2_append(x1,x2)	weight: (/ 1 2)
#app❆2_combine(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
   zip()	weight: 0
  node()	weight: 0
app❆2_combine(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 1, DPs: 4, edges: 6
	SCC { #1 #2 #5 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆2_zip(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: (/ 1 4) + x2
app❆1_map(x1)	weight: (/ 1 4)
#app❆1_levels(x1)	weight: x1
app❆2_zip(x1,x2)	weight: (/ 1 4)
app❆2_map(x1,x2)	weight: 0
app❆1_levels(x1)	weight: 0
app❆1_append(x1)	weight: 0
app❆1_combine(x1)	weight: 0
app❆1_zip(x1)	weight: 0
append()	weight: 0
combine()	weight: 0
levels()	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: (/ 1 4) + x2
   map()	weight: 0
app❆2_node(x1,x2)	weight: (/ 1 2) + x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_append(x1,x2)	weight: (/ 1 4) + x2
#app❆2_combine(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
   zip()	weight: 0
  node()	weight: 0
app❆2_combine(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1 #2 #5 #11
Number of SCCs: 0, DPs: 0, edges: 0
