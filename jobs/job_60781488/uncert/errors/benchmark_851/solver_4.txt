Input TRS:
    1: fact(X) -> if(zero(X),s(0()),prod(X,fact(p(X))))
    2: add(0(),X) -> X
    3: add(s(X),Y) -> s(add(X,Y))
    4: prod(0(),X) -> 0()
    5: prod(s(X),Y) -> add(Y,prod(X,Y))
    6: if(true(),X,Y) -> X
    7: if(false(),X,Y) -> Y
    8: zero(0()) -> true()
    9: zero(s(X)) -> false()
    10: p(s(X)) -> X
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #prod(s(X),Y) -> #add(Y,prod(X,Y))
   #2: #prod(s(X),Y) -> #prod(X,Y)
   #3: #add(s(X),Y) -> #add(X,Y)
   #4: #fact(X) -> #if(zero(X),s(0()),prod(X,fact(p(X))))
   #5: #fact(X) -> #zero(X)
   #6: #fact(X) -> #prod(X,fact(p(X)))
   #7: #fact(X) -> #fact(p(X))
   #8: #fact(X) -> #p(X)
Number of SCCs: 3, DPs: 3, edges: 3
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #fact(X)	-#7->
  #fact(p(X))	--->*
  #fact(p(X))
  Looping with: [ X := p(X); ]
