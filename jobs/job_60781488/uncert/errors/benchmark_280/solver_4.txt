Input TRS:
    1: sub(0(),0()) -> 0()
    2: sub(s(x),0()) -> s(x)
    3: sub(0(),s(x)) -> 0()
    4: sub(s(x),s(y)) -> sub(x,y)
    5: zero(nil()) -> zero2(0(),nil())
    6: zero(cons(x,xs)) -> zero2(sub(x,x),cons(x,xs))
    7: zero2(0(),nil()) -> nil()
    8: zero2(0(),cons(x,xs)) -> cons(sub(x,x),zero(xs))
    9: zero2(s(y),nil()) -> zero(nil())
    10: zero2(s(y),cons(x,xs)) -> zero(cons(x,xs))
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing zero2 zero
1: sub(0(),0()) -> 0()
2: sub(s(x),0()) -> s(x)
3: sub(0(),s(x)) -> 0()
4: sub(s(x),s(y)) -> sub(x,y)
5: zero❆1_nil() -> zero2❆1_0(nil())
6: zero❆1_cons(x,xs) -> zero2(sub(x,x),cons(x,xs))
7: zero2❆1_0(nil()) -> nil()
8: zero2❆1_0(cons(x,xs)) -> cons(sub(x,x),zero(xs))
9: zero2❆1_s(y,nil()) -> zero❆1_nil()
10: zero2❆1_s(y,cons(x,xs)) -> zero❆1_cons(x,xs)
11: zero(cons(_1,_2)) ->= zero❆1_cons(_1,_2)
12: zero(nil()) ->= zero❆1_nil()
13: zero2(0(),_1) ->= zero2❆1_0(_1)
14: zero2(s(_1),_2) ->= zero2❆1_s(_1,_2)
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #zero❆1_cons(x,xs) -> #zero2(sub(x,x),cons(x,xs))
   #2: #zero❆1_cons(x,xs) -> #sub(x,x)
   #3: #zero2(0(),_1) ->? #zero2❆1_0(_1)
   #4: #zero2❆1_s(y,nil()) -> #zero❆1_nil()
   #5: #zero(cons(_1,_2)) ->? #zero❆1_cons(_1,_2)
   #6: #zero(nil()) ->? #zero❆1_nil()
   #7: #zero2(s(_1),_2) ->? #zero2❆1_s(_1,_2)
   #8: #zero2❆1_s(y,cons(x,xs)) -> #zero❆1_cons(x,xs)
   #9: #zero❆1_nil() -> #zero2❆1_0(nil())
   #10: #zero2❆1_0(cons(x,xs)) -> #sub(x,x)
   #11: #zero2❆1_0(cons(x,xs)) -> #zero(xs)
   #12: #sub(s(x),s(y)) -> #sub(x,y)
Number of SCCs: 2, DPs: 7, edges: 8
	SCC { #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
zero2❆1_s(x1,x2)	weight: 0
zero❆1_cons(x1,x2)	weight: 0
   sub(x1,x2)	weight: 0
 #sub(x1,x2)	weight: x2
#zero❆1_nil()	weight: 0
 zero2(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
zero2❆1_0(x1)	weight: 0
#zero2❆1_0(x1)	weight: 0
#zero❆1_cons(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
#zero2❆1_s(x1,x2)	weight: 0
#zero(x1)	weight: 0
zero❆1_nil()	weight: 0
#zero2(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #12
Number of SCCs: 1, DPs: 6, edges: 7
	SCC { #1 #3 #5 #7 #8 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
     s(x1)	weight: (/ 1 8)
zero2❆1_s(x1,x2)	weight: 0
zero❆1_cons(x1,x2)	weight: 0
   sub(x1,x2)	weight: (/ 1 8)
 #sub(x1,x2)	weight: 0
#zero❆1_nil()	weight: 0
 zero2(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
zero2❆1_0(x1)	weight: 0
#zero2❆1_0(x1)	weight: x1
#zero❆1_cons(x1,x2)	weight: (/ 3 4) + x2
  cons(x1,x2)	weight: (/ 1 2) + x2
#zero2❆1_s(x1,x2)	weight: (/ 1 4) + x2
#zero(x1)	weight: (/ 3 8) + x1
zero❆1_nil()	weight: 0
#zero2(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { 1..4 }
    Removed DPs: #3 #5 #11
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #1 #7 #8 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
