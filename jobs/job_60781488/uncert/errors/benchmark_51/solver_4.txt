Input TRS:
    1: app(app(iterate(),f),x) -> app(app(cons(),x),app(app(iterate(),f),app(f,x)))
Number of strict rules: 1
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_iterate(f,x) -> app❆2_cons(x,app❆2_iterate(f,app(f,x)))
2: app(cons(),_1) ->= app❆1_cons(_1)
3: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
4: app(iterate(),_1) ->= app❆1_iterate(_1)
5: app(app❆1_iterate(_1),_2) ->= app❆2_iterate(_1,_2)
Number of strict rules: 1
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_iterate(_1),_2) ->? #app❆2_iterate(_1,_2)
   #2: #app❆2_iterate(f,x) -> #app❆2_iterate(f,app(f,x))
   #3: #app❆2_iterate(f,x) -> #app(f,x)
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #1..3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_iterate(x1,x2)	weight: (/ 1 2)
app❆1_iterate(x1)	weight: (/ 1 2) + x1
 #app(x1,x2)	weight: x1
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 4)
app❆1_cons(x1)	weight: (/ 1 2)
#app❆2_iterate(x1,x2)	weight: (/ 1 4) + x1
iterate()	weight: 0
   app(x1,x2)	weight: (/ 1 4)
    Usable rules: { }
    Removed DPs: #1 #3
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #app❆2_iterate(f_{1},x)	-#2->
  #app❆2_iterate(f_{1},app(f_{1},x))	--->*
  #app❆2_iterate(f_{1},app(f_{1},x))
  Looping with: [ f_{1} := f_{1}; x := app(f_{1},x); ]
