Input TRS:
    1: U11(tt(),V1,V2) -> U12(isNatKind(activate(V1)),activate(V1),activate(V2))
    2: U12(tt(),V1,V2) -> U13(isNatKind(activate(V2)),activate(V1),activate(V2))
    3: U13(tt(),V1,V2) -> U14(isNatKind(activate(V2)),activate(V1),activate(V2))
    4: U14(tt(),V1,V2) -> U15(isNat(activate(V1)),activate(V2))
    5: U15(tt(),V2) -> U16(isNat(activate(V2)))
    6: U16(tt()) -> tt()
    7: U21(tt(),V1) -> U22(isNatKind(activate(V1)),activate(V1))
    8: U22(tt(),V1) -> U23(isNat(activate(V1)))
    9: U23(tt()) -> tt()
    10: U31(tt(),V2) -> U32(isNatKind(activate(V2)))
    11: U32(tt()) -> tt()
    12: U41(tt()) -> tt()
    13: U51(tt(),N) -> U52(isNatKind(activate(N)),activate(N))
    14: U52(tt(),N) -> activate(N)
    15: U61(tt(),M,N) -> U62(isNatKind(activate(M)),activate(M),activate(N))
    16: U62(tt(),M,N) -> U63(isNat(activate(N)),activate(M),activate(N))
    17: U63(tt(),M,N) -> U64(isNatKind(activate(N)),activate(M),activate(N))
    18: U64(tt(),M,N) -> s(plus(activate(N),activate(M)))
    19: isNat(n__0()) -> tt()
    20: isNat(n__plus(V1,V2)) -> U11(isNatKind(activate(V1)),activate(V1),activate(V2))
    21: isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
    22: isNatKind(n__0()) -> tt()
    23: isNatKind(n__plus(V1,V2)) -> U31(isNatKind(activate(V1)),activate(V2))
    24: isNatKind(n__s(V1)) -> U41(isNatKind(activate(V1)))
    25: plus(N,0()) -> U51(isNat(N),N)
    26: plus(N,s(M)) -> U61(isNat(M),M,N)
    27: 0() -> n__0()
    28: plus(X1,X2) -> n__plus(X1,X2)
    29: s(X) -> n__s(X)
    30: activate(n__0()) -> 0()
    31: activate(n__plus(X1,X2)) -> plus(X1,X2)
    32: activate(n__s(X)) -> s(X)
    33: activate(X) -> X
Number of strict rules: 33
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U12(tt(),V1,V2) -> #U13(isNatKind(activate(V2)),activate(V1),activate(V2))
   #2: #U12(tt(),V1,V2) -> #isNatKind(activate(V2))
   #3: #U12(tt(),V1,V2) -> #activate(V2)
   #4: #U12(tt(),V1,V2) -> #activate(V1)
   #5: #U12(tt(),V1,V2) -> #activate(V2)
   #6: #U51(tt(),N) -> #U52(isNatKind(activate(N)),activate(N))
   #7: #U51(tt(),N) -> #isNatKind(activate(N))
   #8: #U51(tt(),N) -> #activate(N)
   #9: #U51(tt(),N) -> #activate(N)
   #10: #isNatKind(n__s(V1)) -> #U41(isNatKind(activate(V1)))
   #11: #isNatKind(n__s(V1)) -> #isNatKind(activate(V1))
   #12: #isNatKind(n__s(V1)) -> #activate(V1)
   #13: #isNatKind(n__plus(V1,V2)) -> #U31(isNatKind(activate(V1)),activate(V2))
   #14: #isNatKind(n__plus(V1,V2)) -> #isNatKind(activate(V1))
   #15: #isNatKind(n__plus(V1,V2)) -> #activate(V1)
   #16: #isNatKind(n__plus(V1,V2)) -> #activate(V2)
   #17: #activate(n__plus(X1,X2)) -> #plus(X1,X2)
   #18: #U52(tt(),N) -> #activate(N)
   #19: #activate(n__0()) -> #0()
   #20: #plus(N,0()) -> #U51(isNat(N),N)
   #21: #plus(N,0()) -> #isNat(N)
   #22: #isNat(n__plus(V1,V2)) -> #U11(isNatKind(activate(V1)),activate(V1),activate(V2))
   #23: #isNat(n__plus(V1,V2)) -> #isNatKind(activate(V1))
   #24: #isNat(n__plus(V1,V2)) -> #activate(V1)
   #25: #isNat(n__plus(V1,V2)) -> #activate(V1)
   #26: #isNat(n__plus(V1,V2)) -> #activate(V2)
   #27: #U21(tt(),V1) -> #U22(isNatKind(activate(V1)),activate(V1))
   #28: #U21(tt(),V1) -> #isNatKind(activate(V1))
   #29: #U21(tt(),V1) -> #activate(V1)
   #30: #U21(tt(),V1) -> #activate(V1)
   #31: #U31(tt(),V2) -> #U32(isNatKind(activate(V2)))
   #32: #U31(tt(),V2) -> #isNatKind(activate(V2))
   #33: #U31(tt(),V2) -> #activate(V2)
   #34: #U15(tt(),V2) -> #U16(isNat(activate(V2)))
   #35: #U15(tt(),V2) -> #isNat(activate(V2))
   #36: #U15(tt(),V2) -> #activate(V2)
   #37: #U63(tt(),M,N) -> #U64(isNatKind(activate(N)),activate(M),activate(N))
   #38: #U63(tt(),M,N) -> #isNatKind(activate(N))
   #39: #U63(tt(),M,N) -> #activate(N)
   #40: #U63(tt(),M,N) -> #activate(M)
   #41: #U63(tt(),M,N) -> #activate(N)
   #42: #activate(n__s(X)) -> #s(X)
   #43: #plus(N,s(M)) -> #U61(isNat(M),M,N)
   #44: #plus(N,s(M)) -> #isNat(M)
   #45: #isNat(n__s(V1)) -> #U21(isNatKind(activate(V1)),activate(V1))
   #46: #isNat(n__s(V1)) -> #isNatKind(activate(V1))
   #47: #isNat(n__s(V1)) -> #activate(V1)
   #48: #isNat(n__s(V1)) -> #activate(V1)
   #49: #U62(tt(),M,N) -> #U63(isNat(activate(N)),activate(M),activate(N))
   #50: #U62(tt(),M,N) -> #isNat(activate(N))
   #51: #U62(tt(),M,N) -> #activate(N)
   #52: #U62(tt(),M,N) -> #activate(M)
   #53: #U62(tt(),M,N) -> #activate(N)
   #54: #U13(tt(),V1,V2) -> #U14(isNatKind(activate(V2)),activate(V1),activate(V2))
   #55: #U13(tt(),V1,V2) -> #isNatKind(activate(V2))
   #56: #U13(tt(),V1,V2) -> #activate(V2)
   #57: #U13(tt(),V1,V2) -> #activate(V1)
   #58: #U13(tt(),V1,V2) -> #activate(V2)
   #59: #U11(tt(),V1,V2) -> #U12(isNatKind(activate(V1)),activate(V1),activate(V2))
   #60: #U11(tt(),V1,V2) -> #isNatKind(activate(V1))
   #61: #U11(tt(),V1,V2) -> #activate(V1)
   #62: #U11(tt(),V1,V2) -> #activate(V1)
   #63: #U11(tt(),V1,V2) -> #activate(V2)
   #64: #U22(tt(),V1) -> #U23(isNat(activate(V1)))
   #65: #U22(tt(),V1) -> #isNat(activate(V1))
   #66: #U22(tt(),V1) -> #activate(V1)
   #67: #U61(tt(),M,N) -> #U62(isNatKind(activate(M)),activate(M),activate(N))
   #68: #U61(tt(),M,N) -> #isNatKind(activate(M))
   #69: #U61(tt(),M,N) -> #activate(M)
   #70: #U61(tt(),M,N) -> #activate(M)
   #71: #U61(tt(),M,N) -> #activate(N)
   #72: #U14(tt(),V1,V2) -> #U15(isNat(activate(V1)),activate(V2))
   #73: #U14(tt(),V1,V2) -> #isNat(activate(V1))
   #74: #U14(tt(),V1,V2) -> #activate(V1)
   #75: #U14(tt(),V1,V2) -> #activate(V2)
   #76: #U64(tt(),M,N) -> #s(plus(activate(N),activate(M)))
   #77: #U64(tt(),M,N) -> #plus(activate(N),activate(M))
   #78: #U64(tt(),M,N) -> #activate(N)
   #79: #U64(tt(),M,N) -> #activate(M)
Number of SCCs: 1, DPs: 72, edges: 224
	SCC { #1..9 #11..18 #20..30 #32 #33 #35..41 #43..63 #65..75 #77..79 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #U32(x1)	weight: 0
isNatKind(x1)	weight: (/ 1 16)
   U16(x1)	weight: 0
   U21(x1,x2)	weight: 0
   U11(x1,x2,x3)	weight: (/ 1 16)
   U64(x1,x2,x3)	weight: (/ 11 16) + x2 + x3
     s(x1)	weight: (/ 5 16) + x1
#isNat(x1)	weight: (/ 3 16) + x1
activate(x1)	weight: x1
#plus(x1,x2)	weight: (/ 1 4) + x1 + x2
#activate(x1)	weight: x1
 #U23(x1)	weight: 0
   U23(x1)	weight: 0
   U63(x1,x2,x3)	weight: (/ 11 16) + x2 + x3
 #U13(x1,x2,x3)	weight: (/ 3 8) + x2 + x3
 #U52(x1,x2)	weight: (/ 1 16) + x2
   U12(x1,x2,x3)	weight: (/ 1 16)
 #U16(x1)	weight: 0
  n__s(x1)	weight: (/ 5 16) + x1
 #U12(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
 #U62(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
     0()	weight: 0
 #U14(x1,x2,x3)	weight: (/ 5 16) + x2 + x3
   #s(x1)	weight: 0
   U62(x1,x2,x3)	weight: (/ 11 16) + x2 + x3
n__plus(x1,x2)	weight: (/ 3 8) + x1 + x2
 #U63(x1,x2,x3)	weight: (/ 3 8) + x2 + x3
 #U15(x1,x2)	weight: (/ 1 4) + x2
   U32(x1)	weight: x1
  n__0()	weight: 0
   U14(x1,x2,x3)	weight: x1
 isNat(x1)	weight: (/ 1 16)
   U52(x1,x2)	weight: x2
   U15(x1,x2)	weight: 0
   U61(x1,x2,x3)	weight: (/ 11 16) + x2 + x3
  plus(x1,x2)	weight: (/ 3 8) + x1 + x2
 #U51(x1,x2)	weight: (/ 1 8) + x1 + x2
 #U11(x1,x2,x3)	weight: (/ 1 2) + x2 + x3
 #U64(x1,x2,x3)	weight: (/ 5 16) + x2 + x3
   U31(x1,x2)	weight: (/ 1 16)
 #U41(x1)	weight: 0
 #U21(x1,x2)	weight: (/ 5 16) + x2
 #U22(x1,x2)	weight: (/ 1 4) + x2
    tt()	weight: 0
   U13(x1,x2,x3)	weight: (/ 1 16)
   U22(x1,x2)	weight: 0
   U51(x1,x2)	weight: x2
#isNatKind(x1)	weight: (/ 1 16) + x1
   U41(x1)	weight: 0
 #U31(x1,x2)	weight: (/ 1 8) + x1 + x2
 #U61(x1,x2,x3)	weight: (/ 1 2) + x2 + x3
    Usable rules: { 1..33 }
    Removed DPs: #1..9 #11..18 #20..30 #32 #33 #35..41 #43..63 #65..75 #77..79
Number of SCCs: 0, DPs: 0, edges: 0
