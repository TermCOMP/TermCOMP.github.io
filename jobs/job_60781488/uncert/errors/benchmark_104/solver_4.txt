Input TRS:
    1: app(app(map(),f),nil()) -> nil()
    2: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    3: app(app(le(),0()),y) -> true()
    4: app(app(le(),app(s(),x)),0()) -> false()
    5: app(app(le(),app(s(),x)),app(s(),y)) -> app(app(le(),x),y)
    6: app(app(maxlist(),x),app(app(cons(),y),ys)) -> app(app(if(),app(app(le(),x),y)),app(app(maxlist(),y),ys))
    7: app(app(maxlist(),x),nil()) -> x
    8: app(height(),app(app(node(),x),xs)) -> app(s(),app(app(maxlist(),0()),app(app(map(),height()),xs)))
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_map(f,nil()) -> nil()
2: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
3: app❆2_le(0(),y) -> true()
4: app❆2_le(app❆1_s(x),0()) -> false()
5: app❆2_le(app❆1_s(x),app❆1_s(y)) -> app❆2_le(x,y)
6: app❆2_maxlist(x,app❆2_cons(y,ys)) -> app❆2_if(app❆2_le(x,y),app❆2_maxlist(y,ys))
7: app❆2_maxlist(x,nil()) -> x
8: app❆1_height(app❆2_node(x,xs)) -> app❆1_s(app❆2_maxlist(0(),app❆2_map(height(),xs)))
9: app(le(),_1) ->= app❆1_le(_1)
10: app(app❆1_le(_1),_2) ->= app❆2_le(_1,_2)
11: app(if(),_1) ->= app❆1_if(_1)
12: app(app❆1_if(_1),_2) ->= app❆2_if(_1,_2)
13: app(cons(),_1) ->= app❆1_cons(_1)
14: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
15: app(s(),_1) ->= app❆1_s(_1)
16: app(map(),_1) ->= app❆1_map(_1)
17: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
18: app(maxlist(),_1) ->= app❆1_maxlist(_1)
19: app(app❆1_maxlist(_1),_2) ->= app❆2_maxlist(_1,_2)
20: app(height(),_1) ->= app❆1_height(_1)
21: app(node(),_1) ->= app❆1_node(_1)
22: app(app❆1_node(_1),_2) ->= app❆2_node(_1,_2)
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #2: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #3: #app❆2_maxlist(x,app❆2_cons(y,ys)) -> #app❆2_le(x,y)
   #4: #app❆2_maxlist(x,app❆2_cons(y,ys)) -> #app❆2_maxlist(y,ys)
   #5: #app(height(),_1) ->? #app❆1_height(_1)
   #6: #app(app❆1_le(_1),_2) ->? #app❆2_le(_1,_2)
   #7: #app❆2_le(app❆1_s(x),app❆1_s(y)) -> #app❆2_le(x,y)
   #8: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #9: #app(app❆1_maxlist(_1),_2) ->? #app❆2_maxlist(_1,_2)
   #10: #app❆1_height(app❆2_node(x,xs)) -> #app❆2_maxlist(0(),app❆2_map(height(),xs))
   #11: #app❆1_height(app❆2_node(x,xs)) -> #app❆2_map(height(),xs)
Number of SCCs: 3, DPs: 7, edges: 11
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆1_height(x1)	weight: 0
    le()	weight: 0
app❆1_le(x1)	weight: 0
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_if(x1)	weight: 0
app❆1_maxlist(x1)	weight: 0
height()	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_height(x1)	weight: 0
 false()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆2_maxlist(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
maxlist()	weight: 0
app❆2_node(x1,x2)	weight: 0
#app❆2_maxlist(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_cons(x1)	weight: 0
#app❆2_le(x1,x2)	weight: x2
  node()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 2, DPs: 6, edges: 10
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆1_height(x1)	weight: 0
    le()	weight: 0
app❆1_le(x1)	weight: 0
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_if(x1)	weight: 0
app❆1_maxlist(x1)	weight: 0
height()	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_height(x1)	weight: 0
 false()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆2_maxlist(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
maxlist()	weight: 0
app❆2_node(x1,x2)	weight: 0
#app❆2_maxlist(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆1_s(x1)	weight: (/ 1 2)
app❆1_cons(x1)	weight: 0
#app❆2_le(x1,x2)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 1, DPs: 5, edges: 9
	SCC { #1 #2 #5 #8 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆1_height(x1)	weight: 0
    le()	weight: 0
app❆1_le(x1)	weight: 0
#app❆2_map(x1,x2)	weight: x1
     s()	weight: 0
app❆1_map(x1)	weight: (/ 1 2) + x1
app❆1_if(x1)	weight: 0
app❆1_maxlist(x1)	weight: 0
height()	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_height(x1)	weight: 0
 false()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆2_maxlist(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: x1
   map()	weight: 0
maxlist()	weight: 0
app❆2_node(x1,x2)	weight: (/ 1 2)
#app❆2_maxlist(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2)
app❆1_s(x1)	weight: (/ 1 2)
app❆1_cons(x1)	weight: 0
#app❆2_le(x1,x2)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 1, DPs: 4, edges: 6
	SCC { #1 #2 #5 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆1_height(x1)	weight: x1
    le()	weight: 0
app❆1_le(x1)	weight: 0
#app❆2_map(x1,x2)	weight: x2
     s()	weight: 0
app❆1_map(x1)	weight: (/ 1 4)
app❆1_if(x1)	weight: 0
app❆1_maxlist(x1)	weight: 0
height()	weight: 0
app❆2_map(x1,x2)	weight: 0
app❆1_height(x1)	weight: 0
 false()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆2_maxlist(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: (/ 1 4) + x2
   map()	weight: 0
maxlist()	weight: 0
app❆2_node(x1,x2)	weight: (/ 1 4) + x2
#app❆2_maxlist(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x1 + x2
app❆1_s(x1)	weight: (/ 1 4)
app❆1_cons(x1)	weight: 0
#app❆2_le(x1,x2)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1 #2 #5 #11
Number of SCCs: 0, DPs: 0, edges: 0
