Input TRS:
    1: app(app(app(if(),true()),x),y) -> x
    2: app(app(app(if(),false()),x),y) -> y
    3: app(app(filter(),f),nil()) -> nil()
    4: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(if(),app(f,x)),app(app(cons(),x),app(app(filter(),f),xs))),app(app(filter(),f),xs))
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆3_if(true(),x,y) -> x
2: app❆3_if(false(),x,y) -> y
3: app❆2_filter(f,nil()) -> nil()
4: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆3_if(app(f,x),app❆2_cons(x,app❆2_filter(f,xs)),app❆2_filter(f,xs))
5: app(if(),_1) ->= app❆1_if(_1)
6: app(app❆1_if(_1),_2) ->= app❆2_if(_1,_2)
7: app(app❆2_if(_1,_2),_3) ->= app❆3_if(_1,_2,_3)
8: app(cons(),_1) ->= app❆1_cons(_1)
9: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
10: app(filter(),_1) ->= app❆1_filter(_1)
11: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #2: #app(app❆2_if(_1,_2),_3) ->? #app❆3_if(_1,_2,_3)
   #3: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆3_if(app(f,x),app❆2_cons(x,app❆2_filter(f,xs)),app❆2_filter(f,xs))
   #4: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #5: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆2_filter(f,xs)
   #6: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆2_filter(f,xs)
Number of SCCs: 1, DPs: 4, edges: 10
	SCC { #1 #4..6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_if(x1)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
 false()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
app❆2_filter(x1,x2)	weight: 0
    if()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2) + x1
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: x1
#app❆2_filter(x1,x2)	weight: (/ 1 4) + x1
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4)
filter()	weight: 0
app❆1_cons(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1 #4
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #5 #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_if(x1)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
 false()	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
app❆2_filter(x1,x2)	weight: 0
    if()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2)
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4) + x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x2
filter()	weight: 0
app❆1_cons(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #5 #6
Number of SCCs: 0, DPs: 0, edges: 0
