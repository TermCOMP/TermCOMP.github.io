Input TRS:
    1: and(true(),X) -> X
    2: and(false(),Y) -> false()
    3: if(true(),X,Y) -> X
    4: if(false(),X,Y) -> Y
    5: add(0(),X) -> X
    6: add(s(X),Y) -> s(add(X,Y))
    7: first(0(),X) -> nil()
    8: first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
    9: from(X) -> cons(X,from(s(X)))
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #add(s(X),Y) -> #add(X,Y)
   #2: #from(X) -> #from(s(X))
   #3: #first(s(X),cons(Y,Z)) -> #first(X,Z)
Number of SCCs: 3, DPs: 3, edges: 3
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#2->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
