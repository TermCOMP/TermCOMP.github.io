Input TRS:
    1: sel(s(X),cons(Y,Z)) -> sel(X,activate(Z))
    2: sel(0(),cons(X,Z)) -> X
    3: first(0(),Z) -> nil()
    4: first(s(X),cons(Y,Z)) -> cons(Y,n__first(X,activate(Z)))
    5: from(X) -> cons(X,n__from(s(X)))
    6: sel1(s(X),cons(Y,Z)) -> sel1(X,activate(Z))
    7: sel1(0(),cons(X,Z)) -> quote(X)
    8: first1(0(),Z) -> nil1()
    9: first1(s(X),cons(Y,Z)) -> cons1(quote(Y),first1(X,activate(Z)))
    10: quote(n__0()) -> 01()
    11: quote1(n__cons(X,Z)) -> cons1(quote(activate(X)),quote1(activate(Z)))
    12: quote1(n__nil()) -> nil1()
    13: quote(n__s(X)) -> s1(quote(activate(X)))
    14: quote(n__sel(X,Z)) -> sel1(activate(X),activate(Z))
    15: quote1(n__first(X,Z)) -> first1(activate(X),activate(Z))
    16: unquote(01()) -> 0()
    17: unquote(s1(X)) -> s(unquote(X))
    18: unquote1(nil1()) -> nil()
    19: unquote1(cons1(X,Z)) -> fcons(unquote(X),unquote1(Z))
    20: fcons(X,Z) -> cons(X,Z)
    21: first(X1,X2) -> n__first(X1,X2)
    22: from(X) -> n__from(X)
    23: 0() -> n__0()
    24: cons(X1,X2) -> n__cons(X1,X2)
    25: nil() -> n__nil()
    26: s(X) -> n__s(X)
    27: sel(X1,X2) -> n__sel(X1,X2)
    28: activate(n__first(X1,X2)) -> first(X1,X2)
    29: activate(n__from(X)) -> from(X)
    30: activate(n__0()) -> 0()
    31: activate(n__cons(X1,X2)) -> cons(X1,X2)
    32: activate(n__nil()) -> nil()
    33: activate(n__s(X)) -> s(X)
    34: activate(n__sel(X1,X2)) -> sel(X1,X2)
    35: activate(X) -> X
Number of strict rules: 35
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__from(X)) -> #from(X)
   #2: #sel1(s(X),cons(Y,Z)) -> #sel1(X,activate(Z))
   #3: #sel1(s(X),cons(Y,Z)) -> #activate(Z)
   #4: #quote(n__s(X)) -> #quote(activate(X))
   #5: #quote(n__s(X)) -> #activate(X)
   #6: #first1(s(X),cons(Y,Z)) -> #quote(Y)
   #7: #first1(s(X),cons(Y,Z)) -> #first1(X,activate(Z))
   #8: #first1(s(X),cons(Y,Z)) -> #activate(Z)
   #9: #quote1(n__cons(X,Z)) -> #quote(activate(X))
   #10: #quote1(n__cons(X,Z)) -> #activate(X)
   #11: #quote1(n__cons(X,Z)) -> #quote1(activate(Z))
   #12: #quote1(n__cons(X,Z)) -> #activate(Z)
   #13: #activate(n__cons(X1,X2)) -> #cons(X1,X2)
   #14: #quote(n__sel(X,Z)) -> #sel1(activate(X),activate(Z))
   #15: #quote(n__sel(X,Z)) -> #activate(X)
   #16: #quote(n__sel(X,Z)) -> #activate(Z)
   #17: #activate(n__0()) -> #0()
   #18: #fcons(X,Z) -> #cons(X,Z)
   #19: #sel1(0(),cons(X,Z)) -> #quote(X)
   #20: #activate(n__s(X)) -> #s(X)
   #21: #from(X) -> #cons(X,n__from(s(X)))
   #22: #from(X) -> #s(X)
   #23: #activate(n__first(X1,X2)) -> #first(X1,X2)
   #24: #activate(n__sel(X1,X2)) -> #sel(X1,X2)
   #25: #unquote(s1(X)) -> #s(unquote(X))
   #26: #unquote(s1(X)) -> #unquote(X)
   #27: #activate(n__nil()) -> #nil()
   #28: #unquote1(cons1(X,Z)) -> #fcons(unquote(X),unquote1(Z))
   #29: #unquote1(cons1(X,Z)) -> #unquote(X)
   #30: #unquote1(cons1(X,Z)) -> #unquote1(Z)
   #31: #unquote(01()) -> #0()
   #32: #first(0(),Z) -> #nil()
   #33: #sel(s(X),cons(Y,Z)) -> #sel(X,activate(Z))
   #34: #sel(s(X),cons(Y,Z)) -> #activate(Z)
   #35: #quote1(n__first(X,Z)) -> #first1(activate(X),activate(Z))
   #36: #quote1(n__first(X,Z)) -> #activate(X)
   #37: #quote1(n__first(X,Z)) -> #activate(Z)
   #38: #first(s(X),cons(Y,Z)) -> #cons(Y,n__first(X,activate(Z)))
   #39: #first(s(X),cons(Y,Z)) -> #activate(Z)
   #40: #unquote1(nil1()) -> #nil()
Number of SCCs: 6, DPs: 13, edges: 21
	SCC { #26 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
    01()	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
unquote1(x1)	weight: 0
#quote1(x1)	weight: 0
n__first(x1,x2)	weight: 0
activate(x1)	weight: 0
#unquote1(x1)	weight: 0
n__from(x1)	weight: 0
#activate(x1)	weight: 0
#fcons(x1,x2)	weight: 0
#first1(x1,x2)	weight: 0
n__nil()	weight: 0
  n__s(x1)	weight: 0
 cons1(x1,x2)	weight: 0
     0()	weight: 0
 #sel(x1,x2)	weight: 0
   sel(x1,x2)	weight: 0
  from(x1)	weight: 0
   #s(x1)	weight: 0
n__cons(x1,x2)	weight: 0
#first(x1,x2)	weight: 0
   nil()	weight: 0
#sel1(x1,x2)	weight: 0
quote1(x1)	weight: 0
n__sel(x1,x2)	weight: 0
 #nil()	weight: 0
  nil1()	weight: 0
 first(x1,x2)	weight: 0
  n__0()	weight: 0
first1(x1,x2)	weight: 0
#unquote(x1)	weight: x1
#from(x1)	weight: 0
 quote(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quote(x1)	weight: 0
  sel1(x1,x2)	weight: 0
    s1(x1)	weight: (/ 1 2) + x1
unquote(x1)	weight: 0
 fcons(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #26
Number of SCCs: 5, DPs: 12, edges: 20
	SCC { #30 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
    01()	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
unquote1(x1)	weight: 0
#quote1(x1)	weight: 0
n__first(x1,x2)	weight: 0
activate(x1)	weight: 0
#unquote1(x1)	weight: x1
n__from(x1)	weight: 0
#activate(x1)	weight: 0
#fcons(x1,x2)	weight: 0
#first1(x1,x2)	weight: 0
n__nil()	weight: 0
  n__s(x1)	weight: 0
 cons1(x1,x2)	weight: (/ 1 2) + x2
     0()	weight: 0
 #sel(x1,x2)	weight: 0
   sel(x1,x2)	weight: 0
  from(x1)	weight: 0
   #s(x1)	weight: 0
n__cons(x1,x2)	weight: 0
#first(x1,x2)	weight: 0
   nil()	weight: 0
#sel1(x1,x2)	weight: 0
quote1(x1)	weight: 0
n__sel(x1,x2)	weight: 0
 #nil()	weight: 0
  nil1()	weight: 0
 first(x1,x2)	weight: 0
  n__0()	weight: 0
first1(x1,x2)	weight: 0
#unquote(x1)	weight: 0
#from(x1)	weight: 0
 quote(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quote(x1)	weight: 0
  sel1(x1,x2)	weight: 0
    s1(x1)	weight: (/ 1 2)
unquote(x1)	weight: 0
 fcons(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #30
Number of SCCs: 4, DPs: 11, edges: 19
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #quote1(n__cons(X,n__from(X_{1})))	-#11->
  #quote1(activate(n__from(X_{1})))	--->*
  #quote1(n__cons(X_{1},n__from(s(X_{1}))))
  Looping with: [ X := X_{1}; X_{1} := s(X_{1}); ]
