Input TRS:
    1: minus(x,0()) -> x
    2: minus(s(x),s(y)) -> minus(x,y)
    3: quot(0(),s(y)) -> 0()
    4: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
    5: plus(0(),y) -> y
    6: plus(s(x),y) -> s(plus(x,y))
    7: minus(minus(x,y),z) -> minus(x,plus(y,z))
    8: app(nil(),k) -> k
    9: app(l,nil()) -> l
    10: app(cons(x,l),k) -> cons(x,app(l,k))
    11: sum(cons(x,nil())) -> cons(x,nil())
    12: sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
    13: sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #plus(s(x),y) -> #plus(x,y)
   #3: #sum(app(l,cons(x,cons(y,k)))) -> #sum(app(l,sum(cons(x,cons(y,k)))))
   #4: #sum(app(l,cons(x,cons(y,k)))) -> #app(l,sum(cons(x,cons(y,k))))
   #5: #sum(app(l,cons(x,cons(y,k)))) -> #sum(cons(x,cons(y,k)))
   #6: #sum(cons(x,cons(y,l))) -> #sum(cons(plus(x,y),l))
   #7: #sum(cons(x,cons(y,l))) -> #plus(x,y)
   #8: #minus(minus(x,y),z) -> #minus(x,plus(y,z))
   #9: #minus(minus(x,y),z) -> #plus(y,z)
   #10: #app(cons(x,l),k) -> #app(l,k)
   #11: #quot(s(x),s(y)) -> #quot(minus(x,y),s(y))
   #12: #quot(s(x),s(y)) -> #minus(x,y)
Number of SCCs: 6, DPs: 7, edges: 9
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: 0
#plus(x1,x2)	weight: x1
   sum(x1)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
#quot(x1,x2)	weight: 0
 #sum(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 5, DPs: 6, edges: 8
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2)
 minus(x1,x2)	weight: 0
#plus(x1,x2)	weight: 0
   sum(x1)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: x1
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
#quot(x1,x2)	weight: 0
 #sum(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 4, DPs: 5, edges: 7
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: (/ 1 4) + x1
#plus(x1,x2)	weight: 0
   sum(x1)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 4)
  cons(x1,x2)	weight: (/ 1 4)
#quot(x1,x2)	weight: x1
 #sum(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { 1 2 7 }
    Removed DPs: #11
Number of SCCs: 3, DPs: 4, edges: 6
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
 minus(x1,x2)	weight: (/ 1 4) + x1
#plus(x1,x2)	weight: 0
   sum(x1)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 4)
  cons(x1,x2)	weight: (/ 1 4) + x2
#quot(x1,x2)	weight: x1
 #sum(x1)	weight: x1
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 2, DPs: 3, edges: 5
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
 minus(x1,x2)	weight: (/ 1 4) + x1
#plus(x1,x2)	weight: 0
   sum(x1)	weight: (/ 1 4)
     0()	weight: 0
  quot(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 4)
  cons(x1,x2)	weight: (/ 1 4) + x2
#quot(x1,x2)	weight: x1
 #sum(x1)	weight: x1
   app(x1,x2)	weight: (/ 1 4) + x1 + x2
    Usable rules: { 8..12 }
    Removed DPs: #3
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #1 #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
 minus(x1,x2)	weight: (/ 1 4) + x1
#plus(x1,x2)	weight: 0
   sum(x1)	weight: (/ 1 4)
     0()	weight: 0
  quot(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#minus(x1,x2)	weight: x1
  plus(x1,x2)	weight: (/ 1 4)
  cons(x1,x2)	weight: (/ 1 4) + x2
#quot(x1,x2)	weight: x1
 #sum(x1)	weight: x1
   app(x1,x2)	weight: (/ 1 4) + x1 + x2
    Usable rules: { }
    Removed DPs: #1 #8
Number of SCCs: 0, DPs: 0, edges: 0
