Input TRS:
    1: isEmpty(empty()) -> true()
    2: isEmpty(node(l,x,r)) -> false()
    3: left(empty()) -> empty()
    4: left(node(l,x,r)) -> l
    5: right(empty()) -> empty()
    6: right(node(l,x,r)) -> r
    7: elem(node(l,x,r)) -> x
    8: append(nil(),x) -> cons(x,nil())
    9: append(cons(y(),ys),x) -> cons(y(),append(ys,x))
    10: listify(n,xs) -> if(isEmpty(n),isEmpty(left(n)),right(n),node(left(left(n)),elem(left(n)),node(right(left(n)),elem(n),right(n))),xs,append(xs,n))
    11: if(true(),b,n,m,xs,ys) -> xs
    12: if(false(),false(),n,m,xs,ys) -> listify(m,xs)
    13: if(false(),true(),n,m,xs,ys) -> listify(n,ys)
    14: toList(n) -> listify(n,nil())
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #if(false(),true(),n,m,xs,ys) -> #listify(n,ys)
   #2: #append(cons(y(),ys),x) -> #append(ys,x)
   #3: #if(false(),false(),n,m,xs,ys) -> #listify(m,xs)
   #4: #toList(n) -> #listify(n,nil())
   #5: #listify(n,xs) -> #if(isEmpty(n),isEmpty(left(n)),right(n),node(left(left(n)),elem(left(n)),node(right(left(n)),elem(n),right(n))),xs,append(xs,n))
   #6: #listify(n,xs) -> #isEmpty(n)
   #7: #listify(n,xs) -> #isEmpty(left(n))
   #8: #listify(n,xs) -> #left(n)
   #9: #listify(n,xs) -> #right(n)
   #10: #listify(n,xs) -> #left(left(n))
   #11: #listify(n,xs) -> #left(n)
   #12: #listify(n,xs) -> #elem(left(n))
   #13: #listify(n,xs) -> #left(n)
   #14: #listify(n,xs) -> #right(left(n))
   #15: #listify(n,xs) -> #left(n)
   #16: #listify(n,xs) -> #elem(n)
   #17: #listify(n,xs) -> #right(n)
   #18: #listify(n,xs) -> #append(xs,n)
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#left(x1)	weight: 0
  left(x1)	weight: 0
#append(x1,x2)	weight: x1
  elem(x1)	weight: 0
     y()	weight: 0
#isEmpty(x1)	weight: 0
 false()	weight: 0
isEmpty(x1)	weight: 0
  true()	weight: 0
#listify(x1,x2)	weight: 0
toList(x1)	weight: 0
append(x1,x2)	weight: 0
    if(x1,x2,x3,x4,x5,x6)	weight: 0
#toList(x1)	weight: 0
   nil()	weight: 0
#elem(x1)	weight: 0
 right(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
  #if(x1,x2,x3,x4,x5,x6)	weight: 0
 empty()	weight: 0
#right(x1)	weight: 0
listify(x1,x2)	weight: 0
  node(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 1, DPs: 3, edges: 4
	SCC { #1 #3 #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
