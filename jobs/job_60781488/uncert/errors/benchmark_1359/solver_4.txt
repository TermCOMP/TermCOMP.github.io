Input TRS:
    1: U11(tt(),V1,V2) -> U12(isNat(activate(V1)),activate(V2))
    2: U12(tt(),V2) -> U13(isNat(activate(V2)))
    3: U13(tt()) -> tt()
    4: U21(tt(),V1) -> U22(isNat(activate(V1)))
    5: U22(tt()) -> tt()
    6: U31(tt(),N) -> activate(N)
    7: U41(tt(),M,N) -> s(plus(activate(N),activate(M)))
    8: and(tt(),X) -> activate(X)
    9: isNat(n__0()) -> tt()
    10: isNat(n__plus(V1,V2)) -> U11(and(isNatKind(activate(V1)),n__isNatKind(activate(V2))),activate(V1),activate(V2))
    11: isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
    12: isNatKind(n__0()) -> tt()
    13: isNatKind(n__plus(V1,V2)) -> and(isNatKind(activate(V1)),n__isNatKind(activate(V2)))
    14: isNatKind(n__s(V1)) -> isNatKind(activate(V1))
    15: plus(N,0()) -> U31(and(isNat(N),n__isNatKind(N)),N)
    16: plus(N,s(M)) -> U41(and(and(isNat(M),n__isNatKind(M)),n__and(n__isNat(N),n__isNatKind(N))),M,N)
    17: 0() -> n__0()
    18: plus(X1,X2) -> n__plus(X1,X2)
    19: isNatKind(X) -> n__isNatKind(X)
    20: s(X) -> n__s(X)
    21: and(X1,X2) -> n__and(X1,X2)
    22: isNat(X) -> n__isNat(X)
    23: activate(n__0()) -> 0()
    24: activate(n__plus(X1,X2)) -> plus(activate(X1),activate(X2))
    25: activate(n__isNatKind(X)) -> isNatKind(X)
    26: activate(n__s(X)) -> s(activate(X))
    27: activate(n__and(X1,X2)) -> and(activate(X1),X2)
    28: activate(n__isNat(X)) -> isNat(X)
    29: activate(X) -> X
Number of strict rules: 29
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U12(tt(),V2) -> #U13(isNat(activate(V2)))
   #2: #U12(tt(),V2) -> #isNat(activate(V2))
   #3: #U12(tt(),V2) -> #activate(V2)
   #4: #U31(tt(),N) -> #activate(N)
   #5: #isNatKind(n__plus(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatKind(activate(V2)))
   #6: #isNatKind(n__plus(V1,V2)) -> #isNatKind(activate(V1))
   #7: #isNatKind(n__plus(V1,V2)) -> #activate(V1)
   #8: #isNatKind(n__plus(V1,V2)) -> #activate(V2)
   #9: #isNat(n__s(V1)) -> #U21(isNatKind(activate(V1)),activate(V1))
   #10: #isNat(n__s(V1)) -> #isNatKind(activate(V1))
   #11: #isNat(n__s(V1)) -> #activate(V1)
   #12: #isNat(n__s(V1)) -> #activate(V1)
   #13: #activate(n__plus(X1,X2)) -> #plus(activate(X1),activate(X2))
   #14: #activate(n__plus(X1,X2)) -> #activate(X1)
   #15: #activate(n__plus(X1,X2)) -> #activate(X2)
   #16: #activate(n__0()) -> #0()
   #17: #isNatKind(n__s(V1)) -> #isNatKind(activate(V1))
   #18: #isNatKind(n__s(V1)) -> #activate(V1)
   #19: #activate(n__isNatKind(X)) -> #isNatKind(X)
   #20: #U41(tt(),M,N) -> #s(plus(activate(N),activate(M)))
   #21: #U41(tt(),M,N) -> #plus(activate(N),activate(M))
   #22: #U41(tt(),M,N) -> #activate(N)
   #23: #U41(tt(),M,N) -> #activate(M)
   #24: #isNat(n__plus(V1,V2)) -> #U11(and(isNatKind(activate(V1)),n__isNatKind(activate(V2))),activate(V1),activate(V2))
   #25: #isNat(n__plus(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatKind(activate(V2)))
   #26: #isNat(n__plus(V1,V2)) -> #isNatKind(activate(V1))
   #27: #isNat(n__plus(V1,V2)) -> #activate(V1)
   #28: #isNat(n__plus(V1,V2)) -> #activate(V2)
   #29: #isNat(n__plus(V1,V2)) -> #activate(V1)
   #30: #isNat(n__plus(V1,V2)) -> #activate(V2)
   #31: #activate(n__isNat(X)) -> #isNat(X)
   #32: #activate(n__and(X1,X2)) -> #and(activate(X1),X2)
   #33: #activate(n__and(X1,X2)) -> #activate(X1)
   #34: #activate(n__s(X)) -> #s(activate(X))
   #35: #activate(n__s(X)) -> #activate(X)
   #36: #plus(N,s(M)) -> #U41(and(and(isNat(M),n__isNatKind(M)),n__and(n__isNat(N),n__isNatKind(N))),M,N)
   #37: #plus(N,s(M)) -> #and(and(isNat(M),n__isNatKind(M)),n__and(n__isNat(N),n__isNatKind(N)))
   #38: #plus(N,s(M)) -> #and(isNat(M),n__isNatKind(M))
   #39: #plus(N,s(M)) -> #isNat(M)
   #40: #U11(tt(),V1,V2) -> #U12(isNat(activate(V1)),activate(V2))
   #41: #U11(tt(),V1,V2) -> #isNat(activate(V1))
   #42: #U11(tt(),V1,V2) -> #activate(V1)
   #43: #U11(tt(),V1,V2) -> #activate(V2)
   #44: #and(tt(),X) -> #activate(X)
   #45: #plus(N,0()) -> #U31(and(isNat(N),n__isNatKind(N)),N)
   #46: #plus(N,0()) -> #and(isNat(N),n__isNatKind(N))
   #47: #plus(N,0()) -> #isNat(N)
   #48: #U21(tt(),V1) -> #U22(isNat(activate(V1)))
   #49: #U21(tt(),V1) -> #isNat(activate(V1))
   #50: #U21(tt(),V1) -> #activate(V1)
Number of SCCs: 1, DPs: 45, edges: 296
	SCC { #2..15 #17..19 #21..33 #35..47 #49 #50 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
   #0()	weight: 0
isNatKind(x1)	weight: x1
   U21(x1,x2)	weight: 0
   U11(x1,x2,x3)	weight: max{0, (/ 3 4) + x3}
     s(x1)	weight: x1
#isNat(x1)	weight: x1
activate(x1)	weight: x1
n__isNatKind(x1)	weight: x1
   and(x1,x2)	weight: max{x2, x1}
#plus(x1,x2)	weight: max{x2, x1}
#activate(x1)	weight: x1
 #U13(x1)	weight: 0
   U12(x1,x2)	weight: 0
  n__s(x1)	weight: x1
 #U12(x1,x2)	weight: max{(/ 1 8) + x2, (/ 3 8) + x1}
     0()	weight: 0
   #s(x1)	weight: 0
n__isNat(x1)	weight: x1
n__plus(x1,x2)	weight: max{(/ 3 4) + x2, (/ 5 8) + x1}
  n__0()	weight: 0
 isNat(x1)	weight: x1
  plus(x1,x2)	weight: max{(/ 3 4) + x2, (/ 5 8) + x1}
 #U11(x1,x2,x3)	weight: max{(/ 1 4) + x3, (/ 1 2) + x2, (/ 1 4) + x1}
   U31(x1,x2)	weight: max{0, (/ 5 8) + x2}
 #U41(x1,x2,x3)	weight: max{0, x3, x2}
 #U21(x1,x2)	weight: max{0, x2}
 #U22(x1)	weight: 0
    tt()	weight: 0
n__and(x1,x2)	weight: max{x2, x1}
   U13(x1)	weight: 0
   U22(x1)	weight: 0
#isNatKind(x1)	weight: x1
   U41(x1,x2,x3)	weight: max{(/ 5 8) + x3, (/ 3 4) + x2, (/ 5 8) + x1}
 #U31(x1,x2)	weight: max{0, x2}
 #and(x1,x2)	weight: max{0, x2}
    Usable rules: { 1..29 }
    Removed DPs: #2 #3 #5..8 #13..15 #24..30 #40..43
Number of SCCs: 2, DPs: 16, edges: 54
	SCC { #21 #36 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
isNatKind(x1)	weight: (/ 1 4)
   U21(x1,x2)	weight: 0
   U11(x1,x2,x3)	weight: (/ 1 4)
     s(x1)	weight: (/ 1 2) + x1
#isNat(x1)	weight: 0
activate(x1)	weight: x1
n__isNatKind(x1)	weight: (/ 1 4)
   and(x1,x2)	weight: x2
#plus(x1,x2)	weight: x2
#activate(x1)	weight: 0
 #U13(x1)	weight: 0
   U12(x1,x2)	weight: (/ 1 4)
  n__s(x1)	weight: (/ 1 2) + x1
 #U12(x1,x2)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
n__isNat(x1)	weight: (/ 1 4)
n__plus(x1,x2)	weight: (/ 1 4) + x1 + x2
  n__0()	weight: 0
 isNat(x1)	weight: (/ 1 4)
  plus(x1,x2)	weight: (/ 1 4) + x1 + x2
 #U11(x1,x2,x3)	weight: 0
   U31(x1,x2)	weight: x2
 #U41(x1,x2,x3)	weight: (/ 1 4) + x2
 #U21(x1,x2)	weight: 0
 #U22(x1)	weight: 0
    tt()	weight: 0
n__and(x1,x2)	weight: x2
   U13(x1)	weight: x1
   U22(x1)	weight: 0
#isNatKind(x1)	weight: 0
   U41(x1,x2,x3)	weight: (/ 3 4) + x2 + x3
 #U31(x1,x2)	weight: 0
 #and(x1,x2)	weight: 0
    Usable rules: { 1..29 }
    Removed DPs: #21 #36
Number of SCCs: 1, DPs: 14, edges: 52
	SCC { #9..12 #17..19 #31..33 #35 #44 #49 #50 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
isNatKind(x1)	weight: (/ 1 8) + x1
   U21(x1,x2)	weight: 0
   U11(x1,x2,x3)	weight: x1
     s(x1)	weight: (/ 1 4) + x1
#isNat(x1)	weight: x1
activate(x1)	weight: x1
n__isNatKind(x1)	weight: (/ 1 8) + x1
   and(x1,x2)	weight: (/ 1 4) + x1 + x2
#plus(x1,x2)	weight: 0
#activate(x1)	weight: x1
 #U13(x1)	weight: 0
   U12(x1,x2)	weight: 0
  n__s(x1)	weight: (/ 1 4) + x1
 #U12(x1,x2)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
n__isNat(x1)	weight: (/ 1 8) + x1
n__plus(x1,x2)	weight: (/ 3 8) + x1 + x2
  n__0()	weight: 0
 isNat(x1)	weight: (/ 1 8) + x1
  plus(x1,x2)	weight: (/ 3 8) + x1 + x2
 #U11(x1,x2,x3)	weight: 0
   U31(x1,x2)	weight: x2
 #U41(x1,x2,x3)	weight: (/ 1 8)
 #U21(x1,x2)	weight: (/ 1 8) + x2
 #U22(x1)	weight: 0
    tt()	weight: 0
n__and(x1,x2)	weight: (/ 1 4) + x1 + x2
   U13(x1)	weight: 0
   U22(x1)	weight: 0
#isNatKind(x1)	weight: x1
   U41(x1,x2,x3)	weight: (/ 5 8) + x2 + x3
 #U31(x1,x2)	weight: 0
 #and(x1,x2)	weight: (/ 1 8) + x2
    Usable rules: { 1..29 }
    Removed DPs: #9..12 #17..19 #31..33 #35 #44 #49 #50
Number of SCCs: 0, DPs: 0, edges: 0
