Input TRS:
    1: app(x,y) -> helpa(0(),plus(length(x),length(y)),x,y)
    2: plus(x,0()) -> x
    3: plus(x,s(y)) -> s(plus(x,y))
    4: length(nil()) -> 0()
    5: length(cons(x,y)) -> s(length(y))
    6: helpa(c,l,ys,zs) -> if(ge(c,l),c,l,ys,zs)
    7: ge(x,0()) -> true()
    8: ge(0(),s(x)) -> false()
    9: ge(s(x),s(y)) -> ge(x,y)
    10: if(true(),c,l,ys,zs) -> nil()
    11: if(false(),c,l,ys,zs) -> helpb(c,l,ys,zs)
    12: take(0(),cons(x,xs()),ys) -> x
    13: take(0(),nil(),cons(y,ys)) -> y
    14: take(s(c),cons(x,xs()),ys) -> take(c,xs(),ys)
    15: take(s(c),nil(),cons(y,ys)) -> take(c,nil(),ys)
    16: helpb(c,l,ys,zs) -> cons(take(c,ys,zs),helpa(s(c),l,ys,zs))
Number of strict rules: 16
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #helpa(c,l,ys,zs) -> #if(ge(c,l),c,l,ys,zs)
   #2: #helpa(c,l,ys,zs) -> #ge(c,l)
   #3: #ge(s(x),s(y)) -> #ge(x,y)
   #4: #if(false(),c,l,ys,zs) -> #helpb(c,l,ys,zs)
   #5: #take(s(c),cons(x,xs()),ys) -> #take(c,xs(),ys)
   #6: #length(cons(x,y)) -> #length(y)
   #7: #helpb(c,l,ys,zs) -> #take(c,ys,zs)
   #8: #helpb(c,l,ys,zs) -> #helpa(s(c),l,ys,zs)
   #9: #plus(x,s(y)) -> #plus(x,y)
   #10: #app(x,y) -> #helpa(0(),plus(length(x),length(y)),x,y)
   #11: #app(x,y) -> #plus(length(x),length(y))
   #12: #app(x,y) -> #length(x)
   #13: #app(x,y) -> #length(y)
   #14: #take(s(c),nil(),cons(y,ys)) -> #take(c,nil(),ys)
Number of SCCs: 5, DPs: 7, edges: 7
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: 0
#take(x1,x2,x3)	weight: 0
  take(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
#helpa(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
  #ge(x1,x2)	weight: 0
 helpb(x1,x2,x3,x4)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
    ge(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
  #if(x1,x2,x3,x4,x5)	weight: 0
    xs()	weight: 0
 helpa(x1,x2,x3,x4)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
#helpb(x1,x2,x3,x4)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 4, DPs: 6, edges: 6
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
#take(x1,x2,x3)	weight: 0
  take(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: x2
#helpa(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
  #ge(x1,x2)	weight: 0
 helpb(x1,x2,x3,x4)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
    ge(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
  #if(x1,x2,x3,x4,x5)	weight: 0
    xs()	weight: 0
 helpa(x1,x2,x3,x4)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
#helpb(x1,x2,x3,x4)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
#take(x1,x2,x3)	weight: 0
  take(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
#helpa(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
  #ge(x1,x2)	weight: x2
 helpb(x1,x2,x3,x4)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
    ge(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
  #if(x1,x2,x3,x4,x5)	weight: 0
    xs()	weight: 0
 helpa(x1,x2,x3,x4)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
#helpb(x1,x2,x3,x4)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2)
#take(x1,x2,x3)	weight: x3
  take(x1,x2,x3)	weight: 0
#plus(x1,x2)	weight: 0
#helpa(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
  #ge(x1,x2)	weight: 0
 helpb(x1,x2,x3,x4)	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
    ge(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
  #if(x1,x2,x3,x4,x5)	weight: 0
    xs()	weight: 0
 helpa(x1,x2,x3,x4)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
#helpb(x1,x2,x3,x4)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #14
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #1 #4 #8 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
