Input TRS:
    1: f(X) -> if(X,c(),n__f(n__true()))
    2: if(true(),X,Y) -> X
    3: if(false(),X,Y) -> activate(Y)
    4: f(X) -> n__f(X)
    5: true() -> n__true()
    6: activate(n__f(X)) -> f(activate(X))
    7: activate(n__true()) -> true()
    8: activate(X) -> X
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... removes: 4
activate(x1)	weight: 2 * x1
n__true()	weight: 0
 false()	weight: 0
     c()	weight: 0
  true()	weight: 0
     f(x1)	weight: (/ 1 2) + x1
    if(x1,x2,x3)	weight: x1 + x2 + 2 * x3
  n__f(x1)	weight: (/ 1 4) + x1
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__f(X)) -> #f(activate(X))
   #2: #activate(n__f(X)) -> #activate(X)
   #3: #activate(n__true()) -> #true()
   #4: #if(false(),X,Y) -> #activate(Y)
   #5: #f(X) -> #if(X,c(),n__f(n__true()))
Number of SCCs: 1, DPs: 4, edges: 6
	SCC { #1 #2 #4 #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
activate(x1)	weight: (/ 3 4)
n__true()	weight: 0
#activate(x1)	weight: x1
 false()	weight: 0
     c()	weight: 0
  true()	weight: 0
     f(x1)	weight: (/ 1 4) + x1
    if(x1,x2,x3)	weight: (/ 1 2)
  n__f(x1)	weight: (/ 1 4) + x1
   #f(x1)	weight: (/ 1 4)
  #if(x1,x2,x3)	weight: x3
#true()	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #1 #4 #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... succeeded.
activate(x1)	weight: max{0, (/ 1 2) + x1}
n__true()	weight: 0
#activate(x1)	weight: max{0, (/ 7 4) + x1}
 false()	weight: (/ 3 2)
     c()	weight: (/ 1 4)
  true()	weight: (/ 1 2)
     f(x1)	weight: max{0, (- (/ 1 4)) + x1}
    if(x1,x2,x3)	weight: max{0, (- (/ 1 2)) + x3 + x2 + x1}
  n__f(x1)	weight: max{0, (- (/ 1 4)) + x1}
   #f(x1)	weight: max{0, (/ 3 4) + x1}
  #if(x1,x2,x3)	weight: max{0, (/ 1 2) + x3 + x1}
#true()	weight: 0
    Usable rules: { 1..3 5..8 }
    Removed DPs: #1 #4 #5
Number of SCCs: 0, DPs: 0, edges: 0
