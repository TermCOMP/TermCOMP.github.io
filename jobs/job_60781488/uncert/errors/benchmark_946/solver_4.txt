Input TRS:
    1: nats() -> cons(0(),n__incr(n__nats()))
    2: pairs() -> cons(0(),n__incr(n__odds()))
    3: odds() -> incr(pairs())
    4: incr(cons(X,XS)) -> cons(s(X),n__incr(activate(XS)))
    5: head(cons(X,XS)) -> X
    6: tail(cons(X,XS)) -> activate(XS)
    7: incr(X) -> n__incr(X)
    8: nats() -> n__nats()
    9: odds() -> n__odds()
    10: activate(n__incr(X)) -> incr(activate(X))
    11: activate(n__nats()) -> nats()
    12: activate(n__odds()) -> odds()
    13: activate(X) -> X
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... removes: 5 6
  incr(x1)	weight: x1
     s(x1)	weight: x1
activate(x1)	weight: x1
 pairs()	weight: 0
n__nats()	weight: 0
  tail(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
  odds()	weight: 0
  nats()	weight: 0
  head(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: x1 + x2
n__incr(x1)	weight: x1
n__odds()	weight: 0
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__nats()) -> #nats()
   #2: #activate(n__odds()) -> #odds()
   #3: #activate(n__incr(X)) -> #incr(activate(X))
   #4: #activate(n__incr(X)) -> #activate(X)
   #5: #odds() -> #incr(pairs())
   #6: #odds() -> #pairs()
   #7: #incr(cons(X,XS)) -> #activate(XS)
Number of SCCs: 1, DPs: 5, edges: 9
	SCC { #2..5 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #activate(n__incr(n__nats()))	-#3->
  #incr(activate(n__nats()))	--->*
  #incr(cons(0(),n__incr(n__nats())))	-#7->
  #activate(n__incr(n__nats()))	--->*
  #activate(n__incr(n__nats()))
  Looping with: [ ]
