Input TRS:
    1: active(zeros()) -> mark(cons(0(),zeros()))
    2: active(U11(tt(),L)) -> mark(U12(tt(),L))
    3: active(U12(tt(),L)) -> mark(s(length(L)))
    4: active(length(nil())) -> mark(0())
    5: active(length(cons(N,L))) -> mark(U11(tt(),L))
    6: mark(zeros()) -> active(zeros())
    7: mark(cons(X1,X2)) -> active(cons(mark(X1),X2))
    8: mark(0()) -> active(0())
    9: mark(U11(X1,X2)) -> active(U11(mark(X1),X2))
    10: mark(tt()) -> active(tt())
    11: mark(U12(X1,X2)) -> active(U12(mark(X1),X2))
    12: mark(s(X)) -> active(s(mark(X)))
    13: mark(length(X)) -> active(length(mark(X)))
    14: mark(nil()) -> active(nil())
    15: cons(mark(X1),X2) -> cons(X1,X2)
    16: cons(X1,mark(X2)) -> cons(X1,X2)
    17: cons(active(X1),X2) -> cons(X1,X2)
    18: cons(X1,active(X2)) -> cons(X1,X2)
    19: U11(mark(X1),X2) -> U11(X1,X2)
    20: U11(X1,mark(X2)) -> U11(X1,X2)
    21: U11(active(X1),X2) -> U11(X1,X2)
    22: U11(X1,active(X2)) -> U11(X1,X2)
    23: U12(mark(X1),X2) -> U12(X1,X2)
    24: U12(X1,mark(X2)) -> U12(X1,X2)
    25: U12(active(X1),X2) -> U12(X1,X2)
    26: U12(X1,active(X2)) -> U12(X1,X2)
    27: s(mark(X)) -> s(X)
    28: s(active(X)) -> s(X)
    29: length(mark(X)) -> length(X)
    30: length(active(X)) -> length(X)
Number of strict rules: 30
Direct Order(PosReal,>,Poly) ... removes: 4
   U11(x1,x2)	weight: (/ 1 8) + x1 + x2
     s(x1)	weight: x1
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 1 8) + x1 + x2
     0()	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
length(x1)	weight: (/ 1 8) + x1
Number of strict rules: 29
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #active(U11(tt(),L)) -> #mark(U12(tt(),L))
   #2: #active(U11(tt(),L)) -> #U12(tt(),L)
   #3: #length(mark(X)) -> #length(X)
   #4: #mark(zeros()) -> #active(zeros())
   #5: #mark(length(X)) -> #active(length(mark(X)))
   #6: #mark(length(X)) -> #length(mark(X))
   #7: #mark(length(X)) -> #mark(X)
   #8: #mark(U11(X1,X2)) -> #active(U11(mark(X1),X2))
   #9: #mark(U11(X1,X2)) -> #U11(mark(X1),X2)
   #10: #mark(U11(X1,X2)) -> #mark(X1)
   #11: #mark(U12(X1,X2)) -> #active(U12(mark(X1),X2))
   #12: #mark(U12(X1,X2)) -> #U12(mark(X1),X2)
   #13: #mark(U12(X1,X2)) -> #mark(X1)
   #14: #U12(X1,mark(X2)) -> #U12(X1,X2)
   #15: #U12(mark(X1),X2) -> #U12(X1,X2)
   #16: #mark(s(X)) -> #active(s(mark(X)))
   #17: #mark(s(X)) -> #s(mark(X))
   #18: #mark(s(X)) -> #mark(X)
   #19: #mark(nil()) -> #active(nil())
   #20: #length(active(X)) -> #length(X)
   #21: #U12(active(X1),X2) -> #U12(X1,X2)
   #22: #U11(X1,mark(X2)) -> #U11(X1,X2)
   #23: #mark(cons(X1,X2)) -> #active(cons(mark(X1),X2))
   #24: #mark(cons(X1,X2)) -> #cons(mark(X1),X2)
   #25: #mark(cons(X1,X2)) -> #mark(X1)
   #26: #mark(tt()) -> #active(tt())
   #27: #active(length(cons(N,L))) -> #mark(U11(tt(),L))
   #28: #active(length(cons(N,L))) -> #U11(tt(),L)
   #29: #s(active(X)) -> #s(X)
   #30: #U11(X1,active(X2)) -> #U11(X1,X2)
   #31: #s(mark(X)) -> #s(X)
   #32: #cons(active(X1),X2) -> #cons(X1,X2)
   #33: #U11(mark(X1),X2) -> #U11(X1,X2)
   #34: #U12(X1,active(X2)) -> #U12(X1,X2)
   #35: #U11(active(X1),X2) -> #U11(X1,X2)
   #36: #cons(X1,mark(X2)) -> #cons(X1,X2)
   #37: #active(U12(tt(),L)) -> #mark(s(length(L)))
   #38: #active(U12(tt(),L)) -> #s(length(L))
   #39: #active(U12(tt(),L)) -> #length(L)
   #40: #active(zeros()) -> #mark(cons(0(),zeros()))
   #41: #active(zeros()) -> #cons(0(),zeros())
   #42: #mark(0()) -> #active(0())
   #43: #cons(mark(X1),X2) -> #cons(X1,X2)
   #44: #cons(X1,active(X2)) -> #cons(X1,X2)
Number of SCCs: 6, DPs: 29, edges: 111
	SCC { #3 #20 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
    Usable rules: { }
    Removed DPs: #3 #20
Number of SCCs: 5, DPs: 27, edges: 107
	SCC { #29 #31 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: x1
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #29 #31
Number of SCCs: 4, DPs: 25, edges: 103
	SCC { #14 #15 #21 #34 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: x1
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #15 #21
Number of SCCs: 4, DPs: 23, edges: 91
	SCC { #14 #34 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: x2
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #14 #34
Number of SCCs: 3, DPs: 21, edges: 87
	SCC { #32 #36 #43 #44 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: x2
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #36 #44
Number of SCCs: 4, DPs: 19, edges: 75
	SCC { #32 #43 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: x1
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #32 #43
Number of SCCs: 3, DPs: 17, edges: 71
	SCC { #22 #30 #33 #35 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: x2
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #22 #30
Number of SCCs: 4, DPs: 15, edges: 59
	SCC { #33 #35 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
 #U11(x1,x2)	weight: x1
active(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #33 #35
Number of SCCs: 3, DPs: 13, edges: 55
	SCC { #1 #4 #5 #7 #8 #10 #11 #13 #18 #25 #27 #37 #40 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: (/ 1 2) + x1 + x2
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 1 2) + x1 + x2
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: x1
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
 #U11(x1,x2)	weight: 0
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + x2
#active(x1)	weight: x1
    tt()	weight: 0
length(x1)	weight: (/ 1 2) + x1
#length(x1)	weight: 0
    Usable rules: { 1..3 5..30 }
    Removed DPs: #7 #10 #13
Number of SCCs: 4, DPs: 10, edges: 20
	SCC { #1 #4 #5 #8 #11 #18 #25 #27 #37 #40 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
 zeros()	weight: (/ 1 2)
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: x1
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: (/ 1 2)
  mark(x1)	weight: (/ 1 2)
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: max{0, x1}
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { 19..26 29 30 }
    Removed DPs: #4
Number of SCCs: 4, DPs: 8, edges: 16
	SCC { #1 #5 #8 #11 #18 #25 #27 #37 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U11(x1,x2)	weight: (/ 1 4)
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 1 4)
 #U12(x1,x2)	weight: 0
#mark(x1)	weight: x1
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 4)
 #U11(x1,x2)	weight: 0
active(x1)	weight: (/ 1 2)
  cons(x1,x2)	weight: (/ 1 4) + x1
#active(x1)	weight: (/ 1 4)
    tt()	weight: 0
length(x1)	weight: (/ 1 4)
#length(x1)	weight: 0
    Usable rules: { 19..26 29 30 }
    Removed DPs: #25
Number of SCCs: 4, DPs: 7, edges: 10
	SCC { #1 #5 #8 #11 #18 #27 #37 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
