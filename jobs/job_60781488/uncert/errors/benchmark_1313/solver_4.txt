Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: and(tt(),X) -> activate(X)
    3: length(nil()) -> 0()
    4: length(cons(N,L)) -> s(length(activate(L)))
    5: take(0(),IL) -> nil()
    6: take(s(M),cons(N,IL)) -> cons(N,n__take(M,activate(IL)))
    7: zeros() -> n__zeros()
    8: take(X1,X2) -> n__take(X1,X2)
    9: activate(n__zeros()) -> zeros()
    10: activate(n__take(X1,X2)) -> take(activate(X1),activate(X2))
    11: activate(X) -> X
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... removes: 3 5 2
     s(x1)	weight: x1
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 4) + x1 + x2
   and(x1,x2)	weight: (/ 1 4) + x1 + x2
n__zeros()	weight: 0
 zeros()	weight: 0
     0()	weight: 0
n__take(x1,x2)	weight: (/ 1 4) + x1 + x2
   nil()	weight: 0
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
length(x1)	weight: (/ 1 4) + x1
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #take(s(M),cons(N,IL)) -> #activate(IL)
   #2: #activate(n__zeros()) -> #zeros()
   #3: #activate(n__take(X1,X2)) -> #take(activate(X1),activate(X2))
   #4: #activate(n__take(X1,X2)) -> #activate(X1)
   #5: #activate(n__take(X1,X2)) -> #activate(X2)
   #6: #length(cons(N,L)) -> #length(activate(L))
   #7: #length(cons(N,L)) -> #activate(L)
Number of SCCs: 2, DPs: 5, edges: 11
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #length(cons(N,n__zeros()))	-#6->
  #length(activate(n__zeros()))	--->*
  #length(cons(0(),n__zeros()))
  Looping with: [ N := 0(); ]
