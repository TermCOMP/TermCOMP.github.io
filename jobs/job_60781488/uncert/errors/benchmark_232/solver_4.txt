Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: int(x,y) -> if(le(x,y),x,y)
    5: if(true(),x,y) -> cons(x,int(s(x),y))
    6: if(false(),x,y) -> nil()
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #if(true(),x,y) -> #int(s(x),y)
   #2: #le(s(x),s(y)) -> #le(x,y)
   #3: #int(x,y) -> #if(le(x,y),x,y)
   #4: #int(x,y) -> #le(x,y)
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
   nil()	weight: 0
   int(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
 #int(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #1 #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
