Input TRS:
    1: from(X) -> cons(X,from(s(X)))
    2: first(0(),Z) -> nil()
    3: first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
    4: sel(0(),cons(X,Z)) -> X
    5: sel(s(X),cons(Y,Z)) -> sel(X,Z)
Number of strict rules: 5
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #sel(s(X),cons(Y,Z)) -> #sel(X,Z)
   #2: #first(s(X),cons(Y,Z)) -> #first(X,Z)
   #3: #from(X) -> #from(s(X))
Number of SCCs: 3, DPs: 3, edges: 3
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#3->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
