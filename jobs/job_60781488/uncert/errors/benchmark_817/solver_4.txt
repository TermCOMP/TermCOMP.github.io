Input TRS:
    1: from(X) -> cons(X,from(s(X)))
    2: length(nil()) -> 0()
    3: length(cons(X,Y)) -> s(length1(Y))
    4: length1(X) -> length(X)
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #length(cons(X,Y)) -> #length1(Y)
   #2: #from(X) -> #from(s(X))
   #3: #length1(X) -> #length(X)
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#2->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
