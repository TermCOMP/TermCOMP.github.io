Input TRS:
    1: active(zeros()) -> mark(cons(0(),zeros()))
    2: active(U11(tt(),L)) -> mark(s(length(L)))
    3: active(and(tt(),X)) -> mark(X)
    4: active(isNat(0())) -> mark(tt())
    5: active(isNat(length(V1))) -> mark(isNatList(V1))
    6: active(isNat(s(V1))) -> mark(isNat(V1))
    7: active(isNatIList(V)) -> mark(isNatList(V))
    8: active(isNatIList(zeros())) -> mark(tt())
    9: active(isNatIList(cons(V1,V2))) -> mark(and(isNat(V1),isNatIList(V2)))
    10: active(isNatList(nil())) -> mark(tt())
    11: active(isNatList(cons(V1,V2))) -> mark(and(isNat(V1),isNatList(V2)))
    12: active(length(nil())) -> mark(0())
    13: active(length(cons(N,L))) -> mark(U11(and(isNatList(L),isNat(N)),L))
    14: active(cons(X1,X2)) -> cons(active(X1),X2)
    15: active(U11(X1,X2)) -> U11(active(X1),X2)
    16: active(s(X)) -> s(active(X))
    17: active(length(X)) -> length(active(X))
    18: active(and(X1,X2)) -> and(active(X1),X2)
    19: cons(mark(X1),X2) -> mark(cons(X1,X2))
    20: U11(mark(X1),X2) -> mark(U11(X1,X2))
    21: s(mark(X)) -> mark(s(X))
    22: length(mark(X)) -> mark(length(X))
    23: and(mark(X1),X2) -> mark(and(X1,X2))
    24: proper(zeros()) -> ok(zeros())
    25: proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
    26: proper(0()) -> ok(0())
    27: proper(U11(X1,X2)) -> U11(proper(X1),proper(X2))
    28: proper(tt()) -> ok(tt())
    29: proper(s(X)) -> s(proper(X))
    30: proper(length(X)) -> length(proper(X))
    31: proper(and(X1,X2)) -> and(proper(X1),proper(X2))
    32: proper(isNat(X)) -> isNat(proper(X))
    33: proper(isNatList(X)) -> isNatList(proper(X))
    34: proper(isNatIList(X)) -> isNatIList(proper(X))
    35: proper(nil()) -> ok(nil())
    36: cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
    37: U11(ok(X1),ok(X2)) -> ok(U11(X1,X2))
    38: s(ok(X)) -> ok(s(X))
    39: length(ok(X)) -> ok(length(X))
    40: and(ok(X1),ok(X2)) -> ok(and(X1,X2))
    41: isNat(ok(X)) -> ok(isNat(X))
    42: isNatList(ok(X)) -> ok(isNatList(X))
    43: isNatIList(ok(X)) -> ok(isNatIList(X))
    44: top(mark(X)) -> top(proper(X))
    45: top(ok(X)) -> top(active(X))
Number of strict rules: 45
Direct Order(PosReal,>,Poly) ... removes: 8 7
isNatList(x1)	weight: x1
   U11(x1,x2)	weight: x1 + x2
     s(x1)	weight: x1
   top(x1)	weight: x1
   and(x1,x2)	weight: x1 + x2
isNatIList(x1)	weight: 17702 + x1
 zeros()	weight: 0
proper(x1)	weight: x1
    ok(x1)	weight: x1
     0()	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
 isNat(x1)	weight: x1
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + 2 * x2
    tt()	weight: 0
length(x1)	weight: x1
Number of strict rules: 43
Direct Order(PosReal,>,Poly) ... removes: 5 12
isNatList(x1)	weight: x1
   U11(x1,x2)	weight: 13314 + x1 + x2
     s(x1)	weight: x1
   top(x1)	weight: x1
   and(x1,x2)	weight: x1 + x2
isNatIList(x1)	weight: x1
 zeros()	weight: 0
proper(x1)	weight: x1
    ok(x1)	weight: x1
     0()	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
 isNat(x1)	weight: x1
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + 2 * x2
    tt()	weight: 0
length(x1)	weight: 13314 + x1
Number of strict rules: 41
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #active(U11(tt(),L)) -> #s(length(L))
   #2: #active(U11(tt(),L)) -> #length(L)
   #3: #isNatIList(ok(X)) -> #isNatIList(X)
   #4: #proper(s(X)) -> #s(proper(X))
   #5: #proper(s(X)) -> #proper(X)
   #6: #isNatList(ok(X)) -> #isNatList(X)
   #7: #isNat(ok(X)) -> #isNat(X)
   #8: #U11(ok(X1),ok(X2)) -> #U11(X1,X2)
   #9: #s(ok(X)) -> #s(X)
   #10: #active(isNat(s(V1))) -> #isNat(V1)
   #11: #and(ok(X1),ok(X2)) -> #and(X1,X2)
   #12: #active(length(cons(N,L))) -> #U11(and(isNatList(L),isNat(N)),L)
   #13: #active(length(cons(N,L))) -> #and(isNatList(L),isNat(N))
   #14: #active(length(cons(N,L))) -> #isNatList(L)
   #15: #active(length(cons(N,L))) -> #isNat(N)
   #16: #active(isNatIList(cons(V1,V2))) -> #and(isNat(V1),isNatIList(V2))
   #17: #active(isNatIList(cons(V1,V2))) -> #isNat(V1)
   #18: #active(isNatIList(cons(V1,V2))) -> #isNatIList(V2)
   #19: #active(isNatList(cons(V1,V2))) -> #and(isNat(V1),isNatList(V2))
   #20: #active(isNatList(cons(V1,V2))) -> #isNat(V1)
   #21: #active(isNatList(cons(V1,V2))) -> #isNatList(V2)
   #22: #and(mark(X1),X2) -> #and(X1,X2)
   #23: #top(ok(X)) -> #top(active(X))
   #24: #top(ok(X)) -> #active(X)
   #25: #proper(and(X1,X2)) -> #and(proper(X1),proper(X2))
   #26: #proper(and(X1,X2)) -> #proper(X1)
   #27: #proper(and(X1,X2)) -> #proper(X2)
   #28: #active(cons(X1,X2)) -> #cons(active(X1),X2)
   #29: #active(cons(X1,X2)) -> #active(X1)
   #30: #proper(length(X)) -> #length(proper(X))
   #31: #proper(length(X)) -> #proper(X)
   #32: #proper(cons(X1,X2)) -> #cons(proper(X1),proper(X2))
   #33: #proper(cons(X1,X2)) -> #proper(X1)
   #34: #proper(cons(X1,X2)) -> #proper(X2)
   #35: #U11(mark(X1),X2) -> #U11(X1,X2)
   #36: #length(ok(X)) -> #length(X)
   #37: #proper(isNatList(X)) -> #isNatList(proper(X))
   #38: #proper(isNatList(X)) -> #proper(X)
   #39: #top(mark(X)) -> #top(proper(X))
   #40: #top(mark(X)) -> #proper(X)
   #41: #length(mark(X)) -> #length(X)
   #42: #proper(isNatIList(X)) -> #isNatIList(proper(X))
   #43: #proper(isNatIList(X)) -> #proper(X)
   #44: #proper(U11(X1,X2)) -> #U11(proper(X1),proper(X2))
   #45: #proper(U11(X1,X2)) -> #proper(X1)
   #46: #proper(U11(X1,X2)) -> #proper(X2)
   #47: #active(length(X)) -> #length(active(X))
   #48: #active(length(X)) -> #active(X)
   #49: #proper(isNat(X)) -> #isNat(proper(X))
   #50: #proper(isNat(X)) -> #proper(X)
   #51: #cons(mark(X1),X2) -> #cons(X1,X2)
   #52: #cons(ok(X1),ok(X2)) -> #cons(X1,X2)
   #53: #s(mark(X)) -> #s(X)
   #54: #active(s(X)) -> #s(active(X))
   #55: #active(s(X)) -> #active(X)
   #56: #active(zeros()) -> #cons(0(),zeros())
   #57: #active(U11(X1,X2)) -> #U11(active(X1),X2)
   #58: #active(U11(X1,X2)) -> #active(X1)
   #59: #active(and(X1,X2)) -> #and(active(X1),X2)
   #60: #active(and(X1,X2)) -> #active(X1)
Number of SCCs: 11, DPs: 31, edges: 173
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
isNatList(x1)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#isNat(x1)	weight: x1
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
isNatIList(x1)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
#isNatList(x1)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: 0
#proper(x1)	weight: 0
 isNat(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
#isNatIList(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 10, DPs: 30, edges: 172
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
isNatList(x1)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#isNat(x1)	weight: 0
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
isNatIList(x1)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
#isNatList(x1)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: 0
#proper(x1)	weight: 0
 isNat(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
#isNatIList(x1)	weight: x1
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3
Number of SCCs: 9, DPs: 29, edges: 171
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
isNatList(x1)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#isNat(x1)	weight: 0
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
isNatIList(x1)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
#isNatList(x1)	weight: x1
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: 0
#proper(x1)	weight: 0
 isNat(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
#isNatIList(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 8, DPs: 28, edges: 170
	SCC { #36 #41 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
isNatList(x1)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#isNat(x1)	weight: 0
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
isNatIList(x1)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
#isNatList(x1)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
 isNat(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
#isNatIList(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #36 #41
Number of SCCs: 7, DPs: 26, edges: 166
	SCC { #9 #53 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
isNatList(x1)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#isNat(x1)	weight: 0
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
isNatIList(x1)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
#isNatList(x1)	weight: 0
   #s(x1)	weight: x1
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
 isNat(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
#isNatIList(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9 #53
Number of SCCs: 6, DPs: 24, edges: 162
	SCC { #23 #39 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
