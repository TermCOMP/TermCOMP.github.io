Input TRS:
    1: app(app(app(if(),true()),x),y) -> x
    2: app(app(app(if(),false()),x),y) -> y
    3: app(app(app(until(),p),f),x) -> app(app(app(if(),app(p,x)),x),app(app(app(until(),p),f),app(f,x)))
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆3_if(true(),x,y) -> x
2: app❆3_if(false(),x,y) -> y
3: app❆3_until(p,f,x) -> app❆3_if(app(p,x),x,app❆3_until(p,f,app(f,x)))
4: app(if(),_1) ->= app❆1_if(_1)
5: app(app❆1_if(_1),_2) ->= app❆2_if(_1,_2)
6: app(app❆2_if(_1,_2),_3) ->= app❆3_if(_1,_2,_3)
7: app(until(),_1) ->= app❆1_until(_1)
8: app(app❆1_until(_1),_2) ->= app❆2_until(_1,_2)
9: app(app❆2_until(_1,_2),_3) ->= app❆3_until(_1,_2,_3)
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆2_if(_1,_2),_3) ->? #app❆3_if(_1,_2,_3)
   #2: #app(app❆2_until(_1,_2),_3) ->? #app❆3_until(_1,_2,_3)
   #3: #app❆3_until(p,f,x) -> #app❆3_if(app(p,x),x,app❆3_until(p,f,app(f,x)))
   #4: #app❆3_until(p,f,x) -> #app(p,x)
   #5: #app❆3_until(p,f,x) -> #app❆3_until(p,f,app(f,x))
   #6: #app❆3_until(p,f,x) -> #app(f,x)
Number of SCCs: 1, DPs: 4, edges: 8
	SCC { #2 #4..6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_if(x1)	weight: (/ 1 4)
#app❆3_if(x1,x2,x3)	weight: 0
app❆3_until(x1,x2,x3)	weight: (/ 3 4) + x3
 false()	weight: 0
app❆1_until(x1)	weight: (/ 1 4) + x1
app❆2_if(x1,x2)	weight: (/ 1 2) + x1 + x2
#app❆3_until(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
  true()	weight: 0
    if()	weight: 0
app❆3_if(x1,x2,x3)	weight: (/ 3 4) + x3
app❆2_until(x1,x2)	weight: (/ 1 2) + x1 + x2
 #app(x1,x2)	weight: x1
 until()	weight: 0
   app(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { }
    Removed DPs: #2 #4 #6
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #app❆3_until(p_{1},f_{1},x)	-#5->
  #app❆3_until(p_{1},f_{1},app(f_{1},x))	--->*
  #app❆3_until(p_{1},f_{1},app(f_{1},x))
  Looping with: [ p_{1} := p_{1}; f_{1} := f_{1}; x := app(f_{1},x); ]
