Input TRS:
    1: app(app(app(sort(),f),g),nil()) -> nil()
    2: app(app(app(sort(),f),g),app(app(cons(),x),y)) -> app(app(app(app(insert(),f),g),app(app(app(sort(),f),g),y)),x)
    3: app(app(app(app(insert(),f),g),nil()),y) -> app(app(cons(),y),nil())
    4: app(app(app(app(insert(),f),g),app(app(cons(),x),z)),y) -> app(app(cons(),app(app(f,x),y)),app(app(app(app(insert(),f),g),z),app(app(g,x),y)))
    5: app(app(max(),0()),y) -> y
    6: app(app(max(),x),0()) -> x
    7: app(app(max(),app(s(),x)),app(s(),y)) -> app(app(max(),x),y)
    8: app(app(min(),0()),y) -> 0()
    9: app(app(min(),x),0()) -> 0()
    10: app(app(min(),app(s(),x)),app(s(),y)) -> app(app(min(),x),y)
    11: app(asort(),z) -> app(app(app(sort(),min()),max()),z)
    12: app(dsort(),z) -> app(app(app(sort(),max()),min()),z)
Number of strict rules: 12
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆3_sort(f,g,nil()) -> nil()
2: app❆3_sort(f,g,app❆2_cons(x,y)) -> app❆4_insert(f,g,app❆3_sort(f,g,y),x)
3: app❆4_insert(f,g,nil(),y) -> app❆2_cons(y,nil())
4: app❆4_insert(f,g,app❆2_cons(x,z),y) -> app❆2_cons(app(app(f,x),y),app❆4_insert(f,g,z,app(app(g,x),y)))
5: app❆2_max(0(),y) -> y
6: app❆2_max(x,0()) -> x
7: app❆2_max(app❆1_s(x),app❆1_s(y)) -> app❆2_max(x,y)
8: app❆2_min(0(),y) -> 0()
9: app❆2_min(x,0()) -> 0()
10: app❆2_min(app❆1_s(x),app❆1_s(y)) -> app❆2_min(x,y)
11: app❆1_asort(z) -> app❆3_sort(min(),max(),z)
12: app❆1_dsort(z) -> app❆3_sort(max(),min(),z)
13: app(min(),_1) ->= app❆1_min(_1)
14: app(app❆1_min(_1),_2) ->= app❆2_min(_1,_2)
15: app(cons(),_1) ->= app❆1_cons(_1)
16: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
17: app(max(),_1) ->= app❆1_max(_1)
18: app(app❆1_max(_1),_2) ->= app❆2_max(_1,_2)
19: app(s(),_1) ->= app❆1_s(_1)
20: app(asort(),_1) ->= app❆1_asort(_1)
21: app(sort(),_1) ->= app❆1_sort(_1)
22: app(app❆1_sort(_1),_2) ->= app❆2_sort(_1,_2)
23: app(app❆2_sort(_1,_2),_3) ->= app❆3_sort(_1,_2,_3)
24: app(dsort(),_1) ->= app❆1_dsort(_1)
25: app(insert(),_1) ->= app❆1_insert(_1)
26: app(app❆1_insert(_1),_2) ->= app❆2_insert(_1,_2)
27: app(app❆2_insert(_1,_2),_3) ->= app❆3_insert(_1,_2,_3)
28: app(app❆3_insert(_1,_2,_3),_4) ->= app❆4_insert(_1,_2,_3,_4)
Number of strict rules: 12
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆3_sort(f,g,app❆2_cons(x,y)) -> #app❆4_insert(f,g,app❆3_sort(f,g,y),x)
   #2: #app❆3_sort(f,g,app❆2_cons(x,y)) -> #app❆3_sort(f,g,y)
   #3: #app❆1_asort(z) -> #app❆3_sort(min(),max(),z)
   #4: #app(dsort(),_1) ->? #app❆1_dsort(_1)
   #5: #app(app❆2_sort(_1,_2),_3) ->? #app❆3_sort(_1,_2,_3)
   #6: #app❆1_dsort(z) -> #app❆3_sort(max(),min(),z)
   #7: #app(app❆1_min(_1),_2) ->? #app❆2_min(_1,_2)
   #8: #app(asort(),_1) ->? #app❆1_asort(_1)
   #9: #app❆2_max(app❆1_s(x),app❆1_s(y)) -> #app❆2_max(x,y)
   #10: #app❆2_min(app❆1_s(x),app❆1_s(y)) -> #app❆2_min(x,y)
   #11: #app(app❆3_insert(_1,_2,_3),_4) ->? #app❆4_insert(_1,_2,_3,_4)
   #12: #app❆4_insert(f,g,app❆2_cons(x,z),y) -> #app(app(f,x),y)
   #13: #app❆4_insert(f,g,app❆2_cons(x,z),y) -> #app(f,x)
   #14: #app❆4_insert(f,g,app❆2_cons(x,z),y) -> #app❆4_insert(f,g,z,app(app(g,x),y))
   #15: #app❆4_insert(f,g,app❆2_cons(x,z),y) -> #app(app(g,x),y)
   #16: #app❆4_insert(f,g,app❆2_cons(x,z),y) -> #app(g,x)
   #17: #app(app❆1_max(_1),_2) ->? #app❆2_max(_1,_2)
Number of SCCs: 3, DPs: 15, edges: 43
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_asort(x1)	weight: 0
     s()	weight: 0
app❆2_insert(x1,x2)	weight: 0
insert()	weight: 0
app❆2_sort(x1,x2)	weight: 0
#app❆2_max(x1,x2)	weight: x1
app❆1_sort(x1)	weight: 0
app❆2_max(x1,x2)	weight: 0
app❆1_min(x1)	weight: 0
app❆3_sort(x1,x2,x3)	weight: 0
app❆4_insert(x1,x2,x3,x4)	weight: 0
app❆3_insert(x1,x2,x3)	weight: 0
#app❆1_dsort(x1)	weight: 0
#app❆4_insert(x1,x2,x3,x4)	weight: 0
#app❆1_asort(x1)	weight: 0
app❆1_insert(x1)	weight: 0
     0()	weight: 0
   max()	weight: 0
   nil()	weight: 0
app❆2_min(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
  sort()	weight: 0
 dsort()	weight: 0
   min()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
#app❆3_sort(x1,x2,x3)	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
 asort()	weight: 0
app❆1_cons(x1)	weight: 0
#app❆2_min(x1,x2)	weight: 0
app❆1_max(x1)	weight: 0
app❆1_dsort(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 2, DPs: 14, edges: 42
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_asort(x1)	weight: 0
     s()	weight: 0
app❆2_insert(x1,x2)	weight: 0
insert()	weight: 0
app❆2_sort(x1,x2)	weight: 0
#app❆2_max(x1,x2)	weight: 0
app❆1_sort(x1)	weight: 0
app❆2_max(x1,x2)	weight: 0
app❆1_min(x1)	weight: 0
app❆3_sort(x1,x2,x3)	weight: 0
app❆4_insert(x1,x2,x3,x4)	weight: 0
app❆3_insert(x1,x2,x3)	weight: 0
#app❆1_dsort(x1)	weight: 0
#app❆4_insert(x1,x2,x3,x4)	weight: 0
#app❆1_asort(x1)	weight: 0
app❆1_insert(x1)	weight: 0
     0()	weight: 0
   max()	weight: 0
   nil()	weight: 0
app❆2_min(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
  sort()	weight: 0
 dsort()	weight: 0
   min()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
#app❆3_sort(x1,x2,x3)	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
 asort()	weight: 0
app❆1_cons(x1)	weight: 0
#app❆2_min(x1,x2)	weight: x2
app❆1_max(x1)	weight: 0
app❆1_dsort(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 1, DPs: 13, edges: 41
	SCC { #1..6 #8 #11..16 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
