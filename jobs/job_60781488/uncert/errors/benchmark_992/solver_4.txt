Input TRS:
    1: fst(0(),Z) -> nil()
    2: fst(s(X),cons(Y,Z)) -> cons(Y,n__fst(activate(X),activate(Z)))
    3: from(X) -> cons(X,n__from(n__s(X)))
    4: add(0(),X) -> X
    5: add(s(X),Y) -> s(n__add(activate(X),Y))
    6: len(nil()) -> 0()
    7: len(cons(X,Z)) -> s(n__len(activate(Z)))
    8: fst(X1,X2) -> n__fst(X1,X2)
    9: from(X) -> n__from(X)
    10: s(X) -> n__s(X)
    11: add(X1,X2) -> n__add(X1,X2)
    12: len(X) -> n__len(X)
    13: activate(n__fst(X1,X2)) -> fst(activate(X1),activate(X2))
    14: activate(n__from(X)) -> from(activate(X))
    15: activate(n__s(X)) -> s(X)
    16: activate(n__add(X1,X2)) -> add(activate(X1),activate(X2))
    17: activate(n__len(X)) -> len(activate(X))
    18: activate(X) -> X
Number of strict rules: 18
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #fst(s(X),cons(Y,Z)) -> #activate(X)
   #2: #fst(s(X),cons(Y,Z)) -> #activate(Z)
   #3: #activate(n__fst(X1,X2)) -> #fst(activate(X1),activate(X2))
   #4: #activate(n__fst(X1,X2)) -> #activate(X1)
   #5: #activate(n__fst(X1,X2)) -> #activate(X2)
   #6: #activate(n__from(X)) -> #from(activate(X))
   #7: #activate(n__from(X)) -> #activate(X)
   #8: #len(cons(X,Z)) -> #s(n__len(activate(Z)))
   #9: #len(cons(X,Z)) -> #activate(Z)
   #10: #add(s(X),Y) -> #s(n__add(activate(X),Y))
   #11: #add(s(X),Y) -> #activate(X)
   #12: #activate(n__len(X)) -> #len(activate(X))
   #13: #activate(n__len(X)) -> #activate(X)
   #14: #activate(n__add(X1,X2)) -> #add(activate(X1),activate(X2))
   #15: #activate(n__add(X1,X2)) -> #activate(X1)
   #16: #activate(n__add(X1,X2)) -> #activate(X2)
   #17: #activate(n__s(X)) -> #s(X)
Number of SCCs: 1, DPs: 13, edges: 94
	SCC { #1..5 #7 #9 #11..16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 #len(x1)	weight: (/ 1 4) + x1
     s(x1)	weight: x1
activate(x1)	weight: x1
n__from(x1)	weight: (/ 1 4) + x1
   fst(x1,x2)	weight: (/ 1 2) + x1 + x2
#activate(x1)	weight: x1
n__add(x1,x2)	weight: (/ 1 2) + x1 + x2
 #fst(x1,x2)	weight: (/ 1 4) + x1 + x2
  n__s(x1)	weight: x1
     0()	weight: 0
  from(x1)	weight: (/ 1 4) + x1
   #s(x1)	weight: 0
   nil()	weight: 0
n__len(x1)	weight: (/ 1 2) + x1
n__fst(x1,x2)	weight: (/ 1 2) + x1 + x2
#from(x1)	weight: 0
  cons(x1,x2)	weight: x2
 #add(x1,x2)	weight: (/ 1 4) + x1
   add(x1,x2)	weight: (/ 1 2) + x1 + x2
   len(x1)	weight: (/ 1 2) + x1
    Usable rules: { 1..18 }
    Removed DPs: #1..5 #7 #9 #11..16
Number of SCCs: 0, DPs: 0, edges: 0
