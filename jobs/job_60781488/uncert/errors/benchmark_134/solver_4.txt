Input TRS:
    1: app(rev(),nil()) -> nil()
    2: app(rev(),app(app(cons(),x),l)) -> app(app(cons(),app(app(rev1(),x),l)),app(app(rev2(),x),l))
    3: app(app(rev1(),0()),nil()) -> 0()
    4: app(app(rev1(),app(s(),x)),nil()) -> app(s(),x)
    5: app(app(rev1(),x),app(app(cons(),y),l)) -> app(app(rev1(),y),l)
    6: app(app(rev2(),x),nil()) -> nil()
    7: app(app(rev2(),x),app(app(cons(),y),l)) -> app(rev(),app(app(cons(),x),app(app(rev2(),y),l)))
    8: app(app(map(),f),nil()) -> nil()
    9: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    10: app(app(filter(),f),nil()) -> nil()
    11: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    12: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    13: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆1_rev(nil()) -> nil()
2: app❆1_rev(app❆2_cons(x,l)) -> app❆2_cons(app❆2_rev1(x,l),app❆2_rev2(x,l))
3: app❆2_rev1(0(),nil()) -> 0()
4: app❆2_rev1(app❆1_s(x),nil()) -> app❆1_s(x)
5: app❆2_rev1(x,app❆2_cons(y,l)) -> app❆2_rev1(y,l)
6: app❆2_rev2(x,nil()) -> nil()
7: app❆2_rev2(x,app❆2_cons(y,l)) -> app❆1_rev(app❆2_cons(x,app❆2_rev2(y,l)))
8: app❆2_map(f,nil()) -> nil()
9: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
10: app❆2_filter(f,nil()) -> nil()
11: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
12: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
13: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
14: app(cons(),_1) ->= app❆1_cons(_1)
15: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
16: app(s(),_1) ->= app❆1_s(_1)
17: app(filter(),_1) ->= app❆1_filter(_1)
18: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
19: app(rev2(),_1) ->= app❆1_rev2(_1)
20: app(app❆1_rev2(_1),_2) ->= app❆2_rev2(_1,_2)
21: app(rev1(),_1) ->= app❆1_rev1(_1)
22: app(app❆1_rev1(_1),_2) ->= app❆2_rev1(_1,_2)
23: app(map(),_1) ->= app❆1_map(_1)
24: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
25: app(rev(),_1) ->= app❆1_rev(_1)
26: app(filter2(),_1) ->= app❆1_filter2(_1)
27: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
28: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
29: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆1_rev(app❆2_cons(x,l)) -> #app❆2_rev1(x,l)
   #2: #app❆1_rev(app❆2_cons(x,l)) -> #app❆2_rev2(x,l)
   #3: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #4: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #5: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #6: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #7: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #8: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #9: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #10: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #11: #app(rev(),_1) ->? #app❆1_rev(_1)
   #12: #app(app❆1_rev2(_1),_2) ->? #app❆2_rev2(_1,_2)
   #13: #app❆2_rev2(x,app❆2_cons(y,l)) -> #app❆1_rev(app❆2_cons(x,app❆2_rev2(y,l)))
   #14: #app❆2_rev2(x,app❆2_cons(y,l)) -> #app❆2_rev2(y,l)
   #15: #app❆2_rev1(x,app❆2_cons(y,l)) -> #app❆2_rev1(y,l)
   #16: #app(app❆1_rev1(_1),_2) ->? #app❆2_rev1(_1,_2)
   #17: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
Number of SCCs: 3, DPs: 12, edges: 21
	SCC { #15 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆2_rev2(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
  rev1()	weight: 0
app❆2_rev1(x1,x2)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_rev1(x1)	weight: 0
#app❆2_rev1(x1,x2)	weight: x2
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆1_rev(x1)	weight: 0
     0()	weight: 0
#app❆2_rev2(x1,x2)	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
   rev()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆1_rev(x1)	weight: 0
app❆1_rev2(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
filter()	weight: 0
app❆1_s(x1)	weight: 0
  rev2()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #15
Number of SCCs: 2, DPs: 11, edges: 20
	SCC { #2 #13 #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆2_rev2(x1,x2)	weight: x2
app❆1_map(x1)	weight: 0
  rev1()	weight: 0
app❆2_rev1(x1,x2)	weight: (/ 1 4)
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_rev1(x1)	weight: 0
#app❆2_rev1(x1,x2)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆1_rev(x1)	weight: x1
     0()	weight: 0
#app❆2_rev2(x1,x2)	weight: (/ 1 4) + x2
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
   rev()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆1_rev(x1)	weight: x1
app❆1_rev2(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
  rev2()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { 2 6 7 }
    Removed DPs: #2 #13 #14
Number of SCCs: 1, DPs: 8, edges: 15
	SCC { #3..6 #8..10 #17 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: (/ 1 4) + x1
     s()	weight: 0
app❆2_rev2(x1,x2)	weight: x2
app❆1_map(x1)	weight: (/ 1 2) + x1
  rev1()	weight: 0
app❆2_rev1(x1,x2)	weight: (/ 1 4)
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_rev1(x1)	weight: 0
#app❆2_rev1(x1,x2)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆1_rev(x1)	weight: x1
     0()	weight: 0
#app❆2_rev2(x1,x2)	weight: (/ 1 4)
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2) + x1
 #app(x1,x2)	weight: x1
   map()	weight: 0
   rev()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2) + x2
#app❆1_rev(x1)	weight: x1
app❆1_rev2(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4) + x1
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
  rev2()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4) + x2
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3..5 #8..10 #17
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: (/ 1 4) + x2
     s()	weight: 0
app❆2_rev2(x1,x2)	weight: x2
app❆1_map(x1)	weight: (/ 1 2)
  rev1()	weight: 0
app❆2_rev1(x1,x2)	weight: (/ 1 4)
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_rev1(x1)	weight: 0
#app❆2_rev1(x1,x2)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆1_rev(x1)	weight: x1
     0()	weight: 0
#app❆2_rev2(x1,x2)	weight: (/ 1 4)
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2)
 #app(x1,x2)	weight: 0
   map()	weight: 0
   rev()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2)
#app❆1_rev(x1)	weight: x1
app❆1_rev2(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4)
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
  rev2()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4)
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 0, DPs: 0, edges: 0
