Input TRS:
    1: app(app(h(),z),app(e(),x)) -> app(app(h(),app(c(),z)),app(app(d(),z),x))
    2: app(app(d(),z),app(app(g(),0()),0())) -> app(e(),0())
    3: app(app(d(),z),app(app(g(),x),y)) -> app(app(g(),app(e(),x)),app(app(d(),z),y))
    4: app(app(d(),app(c(),z)),app(app(g(),app(app(g(),x),y)),0())) -> app(app(g(),app(app(d(),app(c(),z)),app(app(g(),x),y))),app(app(d(),z),app(app(g(),x),y)))
    5: app(app(g(),app(e(),x)),app(e(),y)) -> app(e(),app(app(g(),x),y))
    6: app(app(map(),f),nil()) -> nil()
    7: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    8: app(app(filter(),f),nil()) -> nil()
    9: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    10: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    11: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_h(z,app❆1_e(x)) -> app❆2_h(app❆1_c(z),app❆2_d(z,x))
2: app❆2_d(z,app❆2_g(0(),0())) -> app❆1_e(0())
3: app❆2_d(z,app❆2_g(x,y)) -> app❆2_g(app❆1_e(x),app❆2_d(z,y))
4: app❆2_d(app❆1_c(z),app❆2_g(app❆2_g(x,y),0())) -> app❆2_g(app❆2_d(app❆1_c(z),app❆2_g(x,y)),app❆2_d(z,app❆2_g(x,y)))
5: app❆2_g(app❆1_e(x),app❆1_e(y)) -> app❆1_e(app❆2_g(x,y))
6: app❆2_map(f,nil()) -> nil()
7: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
8: app❆2_filter(f,nil()) -> nil()
9: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
10: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
11: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
12: app(h(),_1) ->= app❆1_h(_1)
13: app(app❆1_h(_1),_2) ->= app❆2_h(_1,_2)
14: app(e(),_1) ->= app❆1_e(_1)
15: app(cons(),_1) ->= app❆1_cons(_1)
16: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
17: app(d(),_1) ->= app❆1_d(_1)
18: app(app❆1_d(_1),_2) ->= app❆2_d(_1,_2)
19: app(filter(),_1) ->= app❆1_filter(_1)
20: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
21: app(c(),_1) ->= app❆1_c(_1)
22: app(map(),_1) ->= app❆1_map(_1)
23: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
24: app(g(),_1) ->= app❆1_g(_1)
25: app(app❆1_g(_1),_2) ->= app❆2_g(_1,_2)
26: app(filter2(),_1) ->= app❆1_filter2(_1)
27: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
28: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
29: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #2: #app(app❆1_h(_1),_2) ->? #app❆2_h(_1,_2)
   #3: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #4: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #5: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #6: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #7: #app(app❆1_g(_1),_2) ->? #app❆2_g(_1,_2)
   #8: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #9: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #10: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #11: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #12: #app❆2_g(app❆1_e(x),app❆1_e(y)) -> #app❆2_g(x,y)
   #13: #app❆2_d(z,app❆2_g(x,y)) -> #app❆2_g(app❆1_e(x),app❆2_d(z,y))
   #14: #app❆2_d(z,app❆2_g(x,y)) -> #app❆2_d(z,y)
   #15: #app❆2_h(z,app❆1_e(x)) -> #app❆2_h(app❆1_c(z),app❆2_d(z,x))
   #16: #app❆2_h(z,app❆1_e(x)) -> #app❆2_d(z,x)
   #17: #app❆2_d(app❆1_c(z),app❆2_g(app❆2_g(x,y),0())) -> #app❆2_g(app❆2_d(app❆1_c(z),app❆2_g(x,y)),app❆2_d(z,app❆2_g(x,y)))
   #18: #app❆2_d(app❆1_c(z),app❆2_g(app❆2_g(x,y),0())) -> #app❆2_d(app❆1_c(z),app❆2_g(x,y))
   #19: #app❆2_d(app❆1_c(z),app❆2_g(app❆2_g(x,y),0())) -> #app❆2_d(z,app❆2_g(x,y))
   #20: #app(app❆1_d(_1),_2) ->? #app❆2_d(_1,_2)
Number of SCCs: 4, DPs: 13, edges: 26
	SCC { #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_h(x1)	weight: 0
     h()	weight: 0
#app❆2_map(x1,x2)	weight: 0
#app❆2_h(x1,x2)	weight: 0
     d()	weight: 0
app❆1_c(x1)	weight: 0
app❆1_map(x1)	weight: 0
app❆1_d(x1)	weight: 0
app❆2_h(x1,x2)	weight: 0
app❆1_e(x1)	weight: (/ 1 2) + x1
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
     c()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
#app❆2_d(x1,x2)	weight: 0
     0()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆2_g(x1,x2)	weight: x2
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
     e()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆2_d(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_g(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
     g()	weight: 0
app❆2_g(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #12
Number of SCCs: 3, DPs: 12, edges: 25
	SCC { #15 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
