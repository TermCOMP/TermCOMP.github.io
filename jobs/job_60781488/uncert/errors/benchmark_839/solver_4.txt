Input TRS:
    1: sel(s(X),cons(Y,Z)) -> sel(X,Z)
    2: sel(0(),cons(X,Z)) -> X
    3: first(0(),Z) -> nil()
    4: first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
    5: from(X) -> cons(X,from(s(X)))
    6: sel1(s(X),cons(Y,Z)) -> sel1(X,Z)
    7: sel1(0(),cons(X,Z)) -> quote(X)
    8: first1(0(),Z) -> nil1()
    9: first1(s(X),cons(Y,Z)) -> cons1(quote(Y),first1(X,Z))
    10: quote(0()) -> 01()
    11: quote1(cons(X,Z)) -> cons1(quote(X),quote1(Z))
    12: quote1(nil()) -> nil1()
    13: quote(s(X)) -> s1(quote(X))
    14: quote(sel(X,Z)) -> sel1(X,Z)
    15: quote1(first(X,Z)) -> first1(X,Z)
    16: unquote(01()) -> 0()
    17: unquote(s1(X)) -> s(unquote(X))
    18: unquote1(nil1()) -> nil()
    19: unquote1(cons1(X,Z)) -> fcons(unquote(X),unquote1(Z))
    20: fcons(X,Z) -> cons(X,Z)
Number of strict rules: 20
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #sel1(s(X),cons(Y,Z)) -> #sel1(X,Z)
   #2: #quote(s(X)) -> #quote(X)
   #3: #first1(s(X),cons(Y,Z)) -> #quote(Y)
   #4: #first1(s(X),cons(Y,Z)) -> #first1(X,Z)
   #5: #quote1(cons(X,Z)) -> #quote(X)
   #6: #quote1(cons(X,Z)) -> #quote1(Z)
   #7: #quote(sel(X,Z)) -> #sel1(X,Z)
   #8: #sel1(0(),cons(X,Z)) -> #quote(X)
   #9: #from(X) -> #from(s(X))
   #10: #unquote(s1(X)) -> #unquote(X)
   #11: #unquote1(cons1(X,Z)) -> #fcons(unquote(X),unquote1(Z))
   #12: #unquote1(cons1(X,Z)) -> #unquote(X)
   #13: #unquote1(cons1(X,Z)) -> #unquote1(Z)
   #14: #sel(s(X),cons(Y,Z)) -> #sel(X,Z)
   #15: #quote1(first(X,Z)) -> #first1(X,Z)
   #16: #first(s(X),cons(Y,Z)) -> #first(X,Z)
Number of SCCs: 8, DPs: 11, edges: 15
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    01()	weight: 0
     s(x1)	weight: 0
unquote1(x1)	weight: 0
#quote1(x1)	weight: 0
#unquote1(x1)	weight: 0
#fcons(x1,x2)	weight: 0
#first1(x1,x2)	weight: 0
 cons1(x1,x2)	weight: 0
     0()	weight: 0
 #sel(x1,x2)	weight: 0
   sel(x1,x2)	weight: 0
  from(x1)	weight: 0
#first(x1,x2)	weight: 0
   nil()	weight: 0
#sel1(x1,x2)	weight: 0
quote1(x1)	weight: 0
  nil1()	weight: 0
 first(x1,x2)	weight: 0
first1(x1,x2)	weight: 0
#unquote(x1)	weight: x1
#from(x1)	weight: 0
 quote(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quote(x1)	weight: 0
  sel1(x1,x2)	weight: 0
    s1(x1)	weight: (/ 1 2) + x1
unquote(x1)	weight: 0
 fcons(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 7, DPs: 10, edges: 14
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#9->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
