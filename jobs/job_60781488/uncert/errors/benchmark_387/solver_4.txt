Input TRS:
    1: f(true(),xs) -> f(isList(xs),append(cons(a(),nil()),xs))
    2: isList(nil()) -> true()
    3: isList(cons(x,xs)) -> isList(xs)
    4: append(xs,ys) -> appendAkk(reverse(xs),ys)
    5: appendAkk(nil(),ys) -> ys
    6: appendAkk(cons(x,xs),ys) -> appendAkk(xs,cons(x,ys))
    7: reverse(nil()) -> nil()
    8: reverse(cons(x,xs)) -> append(reverse(xs),cons(x,nil()))
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #appendAkk(cons(x,xs),ys) -> #appendAkk(xs,cons(x,ys))
   #2: #isList(cons(x,xs)) -> #isList(xs)
   #3: #f(true(),xs) -> #f(isList(xs),append(cons(a(),nil()),xs))
   #4: #f(true(),xs) -> #isList(xs)
   #5: #f(true(),xs) -> #append(cons(a(),nil()),xs)
   #6: #reverse(cons(x,xs)) -> #append(reverse(xs),cons(x,nil()))
   #7: #reverse(cons(x,xs)) -> #reverse(xs)
   #8: #append(xs,ys) -> #appendAkk(reverse(xs),ys)
   #9: #append(xs,ys) -> #reverse(xs)
Number of SCCs: 4, DPs: 6, edges: 8
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     a()	weight: 0
#append(x1,x2)	weight: 0
#reverse(x1)	weight: 0
appendAkk(x1,x2)	weight: 0
reverse(x1)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
append(x1,x2)	weight: 0
isList(x1)	weight: 0
   nil()	weight: 0
   #f(x1,x2)	weight: 0
#isList(x1)	weight: x1
  cons(x1,x2)	weight: (/ 1 2) + x2
#appendAkk(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 3, DPs: 5, edges: 7
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     a()	weight: 0
#append(x1,x2)	weight: 0
#reverse(x1)	weight: 0
appendAkk(x1,x2)	weight: 0
reverse(x1)	weight: 0
  true()	weight: 0
     f(x1,x2)	weight: 0
append(x1,x2)	weight: 0
isList(x1)	weight: 0
   nil()	weight: 0
   #f(x1,x2)	weight: 0
#isList(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
#appendAkk(x1,x2)	weight: x1
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 4, edges: 6
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
