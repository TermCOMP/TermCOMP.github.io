Input TRS:
    1: terms(N) -> cons(recip(sqr(N)),n__terms(s(N)))
    2: sqr(0()) -> 0()
    3: sqr(s(X)) -> s(n__add(sqr(activate(X)),dbl(activate(X))))
    4: dbl(0()) -> 0()
    5: dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
    6: add(0(),X) -> X
    7: add(s(X),Y) -> s(n__add(activate(X),Y))
    8: first(0(),X) -> nil()
    9: first(s(X),cons(Y,Z)) -> cons(Y,n__first(activate(X),activate(Z)))
    10: terms(X) -> n__terms(X)
    11: add(X1,X2) -> n__add(X1,X2)
    12: s(X) -> n__s(X)
    13: dbl(X) -> n__dbl(X)
    14: first(X1,X2) -> n__first(X1,X2)
    15: activate(n__terms(X)) -> terms(X)
    16: activate(n__add(X1,X2)) -> add(X1,X2)
    17: activate(n__s(X)) -> s(X)
    18: activate(n__dbl(X)) -> dbl(X)
    19: activate(n__first(X1,X2)) -> first(X1,X2)
    20: activate(X) -> X
Number of strict rules: 20
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #first(s(X),cons(Y,Z)) -> #activate(X)
   #2: #first(s(X),cons(Y,Z)) -> #activate(Z)
   #3: #add(s(X),Y) -> #s(n__add(activate(X),Y))
   #4: #add(s(X),Y) -> #activate(X)
   #5: #dbl(s(X)) -> #s(n__s(n__dbl(activate(X))))
   #6: #dbl(s(X)) -> #activate(X)
   #7: #activate(n__s(X)) -> #s(X)
   #8: #activate(n__first(X1,X2)) -> #first(X1,X2)
   #9: #activate(n__add(X1,X2)) -> #add(X1,X2)
   #10: #sqr(s(X)) -> #s(n__add(sqr(activate(X)),dbl(activate(X))))
   #11: #sqr(s(X)) -> #sqr(activate(X))
   #12: #sqr(s(X)) -> #activate(X)
   #13: #sqr(s(X)) -> #dbl(activate(X))
   #14: #sqr(s(X)) -> #activate(X)
   #15: #terms(N) -> #sqr(N)
   #16: #terms(N) -> #s(N)
   #17: #activate(n__terms(X)) -> #terms(X)
   #18: #activate(n__dbl(X)) -> #dbl(X)
Number of SCCs: 1, DPs: 13, edges: 38
	SCC { #1 #2 #4 #6 #8 #9 #11..15 #17 #18 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 8) + x1
n__first(x1,x2)	weight: (/ 1 8) + x1 + x2
 recip(x1)	weight: (/ 1 8)
activate(x1)	weight: (/ 1 8) + x1
   dbl(x1)	weight: (/ 1 4) + x1
 #dbl(x1)	weight: x1
#terms(x1)	weight: (/ 1 4) + x1
#activate(x1)	weight: x1
n__add(x1,x2)	weight: (/ 1 8) + x1 + x2
  n__s(x1)	weight: x1
 #sqr(x1)	weight: (/ 1 8) + x1
n__dbl(x1)	weight: (/ 1 8) + x1
     0()	weight: 0
   #s(x1)	weight: 0
#first(x1,x2)	weight: x1 + x2
   nil()	weight: 0
 first(x1,x2)	weight: (/ 1 4) + x1 + x2
n__terms(x1)	weight: (/ 3 8) + x1
  cons(x1,x2)	weight: x2
 #add(x1,x2)	weight: x1
   add(x1,x2)	weight: (/ 1 4) + x1 + x2
   sqr(x1)	weight: (/ 1 8) + x1
 terms(x1)	weight: (/ 1 2) + x1
    Usable rules: { 1 4..20 }
    Removed DPs: #1 #2 #4 #6 #8 #9 #12..15 #17 #18
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above: activate n__s sqr
n__first(x1,x2)	status: []	precedence above: nil first
 recip(x1)	status: [x1]	precedence above:
activate(x1)	status: [x1]	precedence above:
   dbl(x1)	status: [x1]	precedence above: s activate n__s n__dbl sqr
 #dbl(x1)	status: []	precedence above:
#terms(x1)	status: []	precedence above:
#activate(x1)	status: []	precedence above:
n__add(x1,x2)	status: [x2,x1]	precedence above: s activate n__s add sqr
  n__s(x1)	status: [x1]	precedence above: s activate sqr
 #sqr(x1)	status: [x1]	precedence above:
n__dbl(x1)	status: [x1]	precedence above: s activate dbl n__s sqr
     0()	status: []	precedence above:
   #s(x1)	status: []	precedence above:
#first(x1,x2)	status: []	precedence above:
   nil()	status: []	precedence above:
 first(x1,x2)	status: []	precedence above: n__first nil
n__terms(x1)	status: []	precedence above: cons terms
  cons(x1,x2)	status: x2
 #add(x1,x2)	status: [x2,x1]	precedence above:
   add(x1,x2)	status: [x2,x1]	precedence above: s activate n__add n__s sqr
   sqr(x1)	status: []	precedence above:
 terms(x1)	status: []	precedence above: n__terms cons
    Usable rules: { 1 4..20 }
    Removed DPs: #11
Number of SCCs: 0, DPs: 0, edges: 0
