Input TRS:
    1: active(zeros()) -> mark(cons(0(),zeros()))
    2: active(U11(tt(),L)) -> mark(U12(tt(),L))
    3: active(U12(tt(),L)) -> mark(s(length(L)))
    4: active(U21(tt(),IL,M,N)) -> mark(U22(tt(),IL,M,N))
    5: active(U22(tt(),IL,M,N)) -> mark(U23(tt(),IL,M,N))
    6: active(U23(tt(),IL,M,N)) -> mark(cons(N,take(M,IL)))
    7: active(length(nil())) -> mark(0())
    8: active(length(cons(N,L))) -> mark(U11(tt(),L))
    9: active(take(0(),IL)) -> mark(nil())
    10: active(take(s(M),cons(N,IL))) -> mark(U21(tt(),IL,M,N))
    11: active(cons(X1,X2)) -> cons(active(X1),X2)
    12: active(U11(X1,X2)) -> U11(active(X1),X2)
    13: active(U12(X1,X2)) -> U12(active(X1),X2)
    14: active(s(X)) -> s(active(X))
    15: active(length(X)) -> length(active(X))
    16: active(U21(X1,X2,X3,X4)) -> U21(active(X1),X2,X3,X4)
    17: active(U22(X1,X2,X3,X4)) -> U22(active(X1),X2,X3,X4)
    18: active(U23(X1,X2,X3,X4)) -> U23(active(X1),X2,X3,X4)
    19: active(take(X1,X2)) -> take(active(X1),X2)
    20: active(take(X1,X2)) -> take(X1,active(X2))
    21: cons(mark(X1),X2) -> mark(cons(X1,X2))
    22: U11(mark(X1),X2) -> mark(U11(X1,X2))
    23: U12(mark(X1),X2) -> mark(U12(X1,X2))
    24: s(mark(X)) -> mark(s(X))
    25: length(mark(X)) -> mark(length(X))
    26: U21(mark(X1),X2,X3,X4) -> mark(U21(X1,X2,X3,X4))
    27: U22(mark(X1),X2,X3,X4) -> mark(U22(X1,X2,X3,X4))
    28: U23(mark(X1),X2,X3,X4) -> mark(U23(X1,X2,X3,X4))
    29: take(mark(X1),X2) -> mark(take(X1,X2))
    30: take(X1,mark(X2)) -> mark(take(X1,X2))
    31: proper(zeros()) -> ok(zeros())
    32: proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
    33: proper(0()) -> ok(0())
    34: proper(U11(X1,X2)) -> U11(proper(X1),proper(X2))
    35: proper(tt()) -> ok(tt())
    36: proper(U12(X1,X2)) -> U12(proper(X1),proper(X2))
    37: proper(s(X)) -> s(proper(X))
    38: proper(length(X)) -> length(proper(X))
    39: proper(U21(X1,X2,X3,X4)) -> U21(proper(X1),proper(X2),proper(X3),proper(X4))
    40: proper(U22(X1,X2,X3,X4)) -> U22(proper(X1),proper(X2),proper(X3),proper(X4))
    41: proper(U23(X1,X2,X3,X4)) -> U23(proper(X1),proper(X2),proper(X3),proper(X4))
    42: proper(take(X1,X2)) -> take(proper(X1),proper(X2))
    43: proper(nil()) -> ok(nil())
    44: cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
    45: U11(ok(X1),ok(X2)) -> ok(U11(X1,X2))
    46: U12(ok(X1),ok(X2)) -> ok(U12(X1,X2))
    47: s(ok(X)) -> ok(s(X))
    48: length(ok(X)) -> ok(length(X))
    49: U21(ok(X1),ok(X2),ok(X3),ok(X4)) -> ok(U21(X1,X2,X3,X4))
    50: U22(ok(X1),ok(X2),ok(X3),ok(X4)) -> ok(U22(X1,X2,X3,X4))
    51: U23(ok(X1),ok(X2),ok(X3),ok(X4)) -> ok(U23(X1,X2,X3,X4))
    52: take(ok(X1),ok(X2)) -> ok(take(X1,X2))
    53: top(mark(X)) -> top(proper(X))
    54: top(ok(X)) -> top(active(X))
Number of strict rules: 54
Direct Order(PosReal,>,Poly) ... removes: 9
   U21(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x3 + x4
   U11(x1,x2)	weight: x1 + x2
     s(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 8) + x1 + x2
   top(x1)	weight: x1
   U23(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x3 + x4
 zeros()	weight: 0
   U12(x1,x2)	weight: x1 + x2
proper(x1)	weight: x1
    ok(x1)	weight: x1
     0()	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
   U22(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x3 + x4
length(x1)	weight: x1
Number of strict rules: 53
Direct Order(PosReal,>,Poly) ... removes: 7
   U21(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x3 + x4
   U11(x1,x2)	weight: (/ 43481 8) + x1 + x2
     s(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 8) + x1 + x2
   top(x1)	weight: x1
   U23(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x3 + x4
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 43481 8) + x1 + x2
proper(x1)	weight: x1
    ok(x1)	weight: x1
     0()	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
   U22(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x3 + x4
length(x1)	weight: (/ 43481 8) + x1
Number of strict rules: 52
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #active(U11(tt(),L)) -> #U12(tt(),L)
   #2: #take(mark(X1),X2) -> #take(X1,X2)
   #3: #U12(ok(X1),ok(X2)) -> #U12(X1,X2)
   #4: #proper(take(X1,X2)) -> #take(proper(X1),proper(X2))
   #5: #proper(take(X1,X2)) -> #proper(X1)
   #6: #proper(take(X1,X2)) -> #proper(X2)
   #7: #proper(U23(X1,X2,X3,X4)) -> #U23(proper(X1),proper(X2),proper(X3),proper(X4))
   #8: #proper(U23(X1,X2,X3,X4)) -> #proper(X1)
   #9: #proper(U23(X1,X2,X3,X4)) -> #proper(X2)
   #10: #proper(U23(X1,X2,X3,X4)) -> #proper(X3)
   #11: #proper(U23(X1,X2,X3,X4)) -> #proper(X4)
   #12: #proper(s(X)) -> #s(proper(X))
   #13: #proper(s(X)) -> #proper(X)
   #14: #s(ok(X)) -> #s(X)
   #15: #top(mark(X)) -> #top(proper(X))
   #16: #top(mark(X)) -> #proper(X)
   #17: #length(ok(X)) -> #length(X)
   #18: #proper(length(X)) -> #length(proper(X))
   #19: #proper(length(X)) -> #proper(X)
   #20: #active(U23(tt(),IL,M,N)) -> #cons(N,take(M,IL))
   #21: #active(U23(tt(),IL,M,N)) -> #take(M,IL)
   #22: #proper(U22(X1,X2,X3,X4)) -> #U22(proper(X1),proper(X2),proper(X3),proper(X4))
   #23: #proper(U22(X1,X2,X3,X4)) -> #proper(X1)
   #24: #proper(U22(X1,X2,X3,X4)) -> #proper(X2)
   #25: #proper(U22(X1,X2,X3,X4)) -> #proper(X3)
   #26: #proper(U22(X1,X2,X3,X4)) -> #proper(X4)
   #27: #U23(ok(X1),ok(X2),ok(X3),ok(X4)) -> #U23(X1,X2,X3,X4)
   #28: #active(U12(X1,X2)) -> #U12(active(X1),X2)
   #29: #active(U12(X1,X2)) -> #active(X1)
   #30: #active(cons(X1,X2)) -> #cons(active(X1),X2)
   #31: #active(cons(X1,X2)) -> #active(X1)
   #32: #s(mark(X)) -> #s(X)
   #33: #U12(mark(X1),X2) -> #U12(X1,X2)
   #34: #U11(ok(X1),ok(X2)) -> #U11(X1,X2)
   #35: #active(U11(X1,X2)) -> #U11(active(X1),X2)
   #36: #active(U11(X1,X2)) -> #active(X1)
   #37: #active(s(X)) -> #s(active(X))
   #38: #active(s(X)) -> #active(X)
   #39: #take(X1,mark(X2)) -> #take(X1,X2)
   #40: #take(ok(X1),ok(X2)) -> #take(X1,X2)
   #41: #U21(ok(X1),ok(X2),ok(X3),ok(X4)) -> #U21(X1,X2,X3,X4)
   #42: #length(mark(X)) -> #length(X)
   #43: #active(take(X1,X2)) -> #take(X1,active(X2))
   #44: #active(take(X1,X2)) -> #active(X2)
   #45: #proper(U21(X1,X2,X3,X4)) -> #U21(proper(X1),proper(X2),proper(X3),proper(X4))
   #46: #proper(U21(X1,X2,X3,X4)) -> #proper(X1)
   #47: #proper(U21(X1,X2,X3,X4)) -> #proper(X2)
   #48: #proper(U21(X1,X2,X3,X4)) -> #proper(X3)
   #49: #proper(U21(X1,X2,X3,X4)) -> #proper(X4)
   #50: #active(take(s(M),cons(N,IL))) -> #U21(tt(),IL,M,N)
   #51: #active(U22(tt(),IL,M,N)) -> #U23(tt(),IL,M,N)
   #52: #cons(ok(X1),ok(X2)) -> #cons(X1,X2)
   #53: #U23(mark(X1),X2,X3,X4) -> #U23(X1,X2,X3,X4)
   #54: #U11(mark(X1),X2) -> #U11(X1,X2)
   #55: #proper(U11(X1,X2)) -> #U11(proper(X1),proper(X2))
   #56: #proper(U11(X1,X2)) -> #proper(X1)
   #57: #proper(U11(X1,X2)) -> #proper(X2)
   #58: #U22(mark(X1),X2,X3,X4) -> #U22(X1,X2,X3,X4)
   #59: #active(U22(X1,X2,X3,X4)) -> #U22(active(X1),X2,X3,X4)
   #60: #active(U22(X1,X2,X3,X4)) -> #active(X1)
   #61: #proper(cons(X1,X2)) -> #cons(proper(X1),proper(X2))
   #62: #proper(cons(X1,X2)) -> #proper(X1)
   #63: #proper(cons(X1,X2)) -> #proper(X2)
   #64: #active(take(X1,X2)) -> #take(active(X1),X2)
   #65: #active(take(X1,X2)) -> #active(X1)
   #66: #U21(mark(X1),X2,X3,X4) -> #U21(X1,X2,X3,X4)
   #67: #proper(U12(X1,X2)) -> #U12(proper(X1),proper(X2))
   #68: #proper(U12(X1,X2)) -> #proper(X1)
   #69: #proper(U12(X1,X2)) -> #proper(X2)
   #70: #cons(mark(X1),X2) -> #cons(X1,X2)
   #71: #active(U21(X1,X2,X3,X4)) -> #U21(active(X1),X2,X3,X4)
   #72: #active(U21(X1,X2,X3,X4)) -> #active(X1)
   #73: #active(U12(tt(),L)) -> #s(length(L))
   #74: #active(U12(tt(),L)) -> #length(L)
   #75: #active(zeros()) -> #cons(0(),zeros())
   #76: #top(ok(X)) -> #top(active(X))
   #77: #top(ok(X)) -> #active(X)
   #78: #active(length(cons(N,L))) -> #U11(tt(),L)
   #79: #active(length(X)) -> #length(active(X))
   #80: #active(length(X)) -> #active(X)
   #81: #active(U21(tt(),IL,M,N)) -> #U22(tt(),IL,M,N)
   #82: #U22(ok(X1),ok(X2),ok(X3),ok(X4)) -> #U22(X1,X2,X3,X4)
   #83: #active(U23(X1,X2,X3,X4)) -> #U23(active(X1),X2,X3,X4)
   #84: #active(U23(X1,X2,X3,X4)) -> #active(X1)
Number of SCCs: 12, DPs: 53, edges: 629
	SCC { #17 #42 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U21(x1,x2,x3,x4)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#take(x1,x2)	weight: 0
  take(x1,x2)	weight: 0
   top(x1)	weight: 0
 #U23(x1,x2,x3,x4)	weight: 0
 #top(x1)	weight: 0
   U23(x1,x2,x3,x4)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
 #U21(x1,x2,x3,x4)	weight: 0
 #U22(x1,x2,x3,x4)	weight: 0
    tt()	weight: 0
   U22(x1,x2,x3,x4)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
    Usable rules: { }
    Removed DPs: #17 #42
Number of SCCs: 11, DPs: 51, edges: 625
	SCC { #14 #32 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   U21(x1,x2,x3,x4)	weight: 0
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#take(x1,x2)	weight: 0
  take(x1,x2)	weight: 0
   top(x1)	weight: 0
 #U23(x1,x2,x3,x4)	weight: 0
 #top(x1)	weight: 0
   U23(x1,x2,x3,x4)	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: 0
 #U12(x1,x2)	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
   #s(x1)	weight: x1
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
 #U11(x1,x2)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
 #U21(x1,x2,x3,x4)	weight: 0
 #U22(x1,x2,x3,x4)	weight: 0
    tt()	weight: 0
   U22(x1,x2,x3,x4)	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #14 #32
Number of SCCs: 10, DPs: 49, edges: 621
	SCC { #15 #76 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
