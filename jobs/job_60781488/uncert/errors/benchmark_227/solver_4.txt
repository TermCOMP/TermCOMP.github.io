Input TRS:
    1: le(s(x),0()) -> false()
    2: le(0(),y) -> true()
    3: le(s(x),s(y)) -> le(x,y)
    4: double(0()) -> 0()
    5: double(s(x)) -> s(s(double(x)))
    6: log(0()) -> logError()
    7: log(s(x)) -> loop(s(x),s(0()),0())
    8: loop(x,s(y),z) -> if(le(x,s(y)),x,s(y),z)
    9: if(true(),x,y,z) -> z
    10: if(false(),x,y,z) -> loop(x,double(y),s(z))
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #log(s(x)) -> #loop(s(x),s(0()),0())
   #2: #if(false(),x,y,z) -> #loop(x,double(y),s(z))
   #3: #if(false(),x,y,z) -> #double(y)
   #4: #double(s(x)) -> #double(x)
   #5: #le(s(x),s(y)) -> #le(x,y)
   #6: #loop(x,s(y),z) -> #if(le(x,s(y)),x,s(y),z)
   #7: #loop(x,s(y),z) -> #le(x,s(y))
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
logError()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 false()	weight: 0
 #log(x1)	weight: 0
  true()	weight: 0
   log(x1)	weight: 0
#loop(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#double(x1)	weight: x1
double(x1)	weight: 0
  loop(x1,x2,x3)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
logError()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 false()	weight: 0
 #log(x1)	weight: 0
  true()	weight: 0
   log(x1)	weight: 0
#loop(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#double(x1)	weight: 0
double(x1)	weight: 0
  loop(x1,x2,x3)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #5
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #2 #6 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
