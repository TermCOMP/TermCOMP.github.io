Input TRS:
    1: app(app(map(),f),nil()) -> nil()
    2: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    3: app(app(treemap(),f),app(app(node(),x),xs)) -> app(app(node(),app(f,x)),app(app(map(),app(treemap(),f)),xs))
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_map(f,nil()) -> nil()
2: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
3: app❆2_treemap(f,app❆2_node(x,xs)) -> app❆2_node(app(f,x),app❆2_map(app❆1_treemap(f),xs))
4: app(treemap(),_1) ->= app❆1_treemap(_1)
5: app(app❆1_treemap(_1),_2) ->= app❆2_treemap(_1,_2)
6: app(cons(),_1) ->= app❆1_cons(_1)
7: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
8: app(map(),_1) ->= app❆1_map(_1)
9: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
10: app(node(),_1) ->= app❆1_node(_1)
11: app(app❆1_node(_1),_2) ->= app❆2_node(_1,_2)
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #2: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #3: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #4: #app(app❆1_treemap(_1),_2) ->? #app❆2_treemap(_1,_2)
   #5: #app❆2_treemap(f,app❆2_node(x,xs)) -> #app(f,x)
   #6: #app❆2_treemap(f,app❆2_node(x,xs)) -> #app❆2_map(app❆1_treemap(f),xs)
Number of SCCs: 1, DPs: 6, edges: 12
	SCC { #1..6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆1_node(x1)	weight: 0
#app❆2_map(x1,x2)	weight: x2
app❆1_map(x1)	weight: (/ 1 4)
app❆2_map(x1,x2)	weight: 0
app❆2_treemap(x1,x2)	weight: 0
app❆1_treemap(x1)	weight: (/ 1 4)
   nil()	weight: 0
#app❆2_treemap(x1,x2)	weight: x2
 #app(x1,x2)	weight: (/ 1 4) + x2
   map()	weight: 0
app❆2_node(x1,x2)	weight: (/ 1 2) + x1 + x2
treemap()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x1 + x2
app❆1_cons(x1)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1..6
Number of SCCs: 0, DPs: 0, edges: 0
