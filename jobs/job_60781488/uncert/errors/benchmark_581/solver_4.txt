Input TRS:
    1: p(0()) -> s(s(0()))
    2: p(s(x)) -> x
    3: p(p(s(x))) -> p(x)
    4: le(p(s(x)),x) -> le(x,x)
    5: le(0(),y) -> true()
    6: le(s(x),0()) -> false()
    7: le(s(x),s(y)) -> le(x,y)
    8: minus(x,y) -> if(le(x,y),x,y)
    9: if(true(),x,y) -> 0()
    10: if(false(),x,y) -> s(minus(p(x),y))
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #le(s(x),s(y)) -> #le(x,y)
   #2: #if(false(),x,y) -> #minus(p(x),y)
   #3: #if(false(),x,y) -> #p(x)
   #4: #p(p(s(x))) -> #p(x)
   #5: #minus(x,y) -> #if(le(x,y),x,y)
   #6: #minus(x,y) -> #le(x,y)
   #7: #le(p(s(x)),x) -> #le(x,x)
Number of SCCs: 3, DPs: 5, edges: 7
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
 false()	weight: 0
   #p(x1)	weight: x1
  true()	weight: 0
     p(x1)	weight: x1
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 2, DPs: 4, edges: 6
	SCC { #1 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
 false()	weight: 0
   #p(x1)	weight: 0
  true()	weight: 0
     p(x1)	weight: (/ 1 2)
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 4) + x1
  #le(x1,x2)	weight: x1
 minus(x1,x2)	weight: 0
 false()	weight: 0
   #p(x1)	weight: 0
  true()	weight: 0
     p(x1)	weight: (/ 1 4) + x1
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #2 #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
