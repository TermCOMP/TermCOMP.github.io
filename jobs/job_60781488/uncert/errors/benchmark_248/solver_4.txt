Input TRS:
    1: app(nil(),k) -> k
    2: app(l,nil()) -> l
    3: app(cons(x,l),k) -> cons(x,app(l,k))
    4: sum(cons(x,nil())) -> cons(x,nil())
    5: sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
    6: sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
    7: plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
    8: plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
    9: plus(zero(),y) -> y
    10: plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
    11: id(x) -> x
    12: if(true(),x,y) -> x
    13: if(false(),x,y) -> y
    14: not(x) -> if(x,false(),true())
    15: gt(s(x),zero()) -> true()
    16: gt(zero(),y) -> false()
    17: gt(s(x),s(y)) -> gt(x,y)
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing gt
1: app(nil(),k) -> k
2: app(l,nil()) -> l
3: app(cons(x,l),k) -> cons(x,app(l,k))
4: sum(cons(x,nil())) -> cons(x,nil())
5: sum(cons(x,cons(y,l))) -> sum(cons(plus(x,y),l))
6: sum(app(l,cons(x,cons(y,k)))) -> sum(app(l,sum(cons(x,cons(y,k)))))
7: plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
8: plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
9: plus(zero(),y) -> y
10: plus(id(x),s(y)) -> s(plus(x,if(gt❆1_s(y,y),y,s(y))))
11: id(x) -> x
12: if(true(),x,y) -> x
13: if(false(),x,y) -> y
14: not(x) -> if(x,false(),true())
15: gt❆1_s(x,zero()) -> true()
16: gt❆1_zero(y) -> false()
17: gt❆1_s(x,s(y)) -> gt(x,y)
18: gt(zero(),_1) ->= gt❆1_zero(_1)
19: gt(s(_1),_2) ->= gt❆1_s(_1,_2)
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #sum(app(l,cons(x,cons(y,k)))) -> #sum(app(l,sum(cons(x,cons(y,k)))))
   #2: #sum(app(l,cons(x,cons(y,k)))) -> #app(l,sum(cons(x,cons(y,k))))
   #3: #sum(app(l,cons(x,cons(y,k)))) -> #sum(cons(x,cons(y,k)))
   #4: #not(x) -> #if(x,false(),true())
   #5: #plus(s(x),s(y)) -> #plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
   #6: #plus(s(x),s(y)) -> #if(gt(x,y),x,y)
   #7: #plus(s(x),s(y)) -> #gt(x,y)
   #8: #plus(s(x),s(y)) -> #if(not(gt(x,y)),id(x),id(y))
   #9: #plus(s(x),s(y)) -> #not(gt(x,y))
   #10: #plus(s(x),s(y)) -> #gt(x,y)
   #11: #plus(s(x),s(y)) -> #id(x)
   #12: #plus(s(x),s(y)) -> #id(y)
   #13: #plus(id(x),s(y)) -> #plus(x,if(gt❆1_s(y,y),y,s(y)))
   #14: #plus(id(x),s(y)) -> #if(gt❆1_s(y,y),y,s(y))
   #15: #plus(id(x),s(y)) -> #gt❆1_s(y,y)
   #16: #sum(cons(x,cons(y,l))) -> #sum(cons(plus(x,y),l))
   #17: #sum(cons(x,cons(y,l))) -> #plus(x,y)
   #18: #gt❆1_s(x,s(y)) -> #gt(x,y)
   #19: #gt(s(_1),_2) ->? #gt❆1_s(_1,_2)
   #20: #app(cons(x,l),k) -> #app(l,k)
   #21: #plus(s(x),x) -> #plus(if(gt(x,x),id(x),id(x)),s(x))
   #22: #plus(s(x),x) -> #if(gt(x,x),id(x),id(x))
   #23: #plus(s(x),x) -> #gt(x,x)
   #24: #plus(s(x),x) -> #id(x)
   #25: #plus(s(x),x) -> #id(x)
   #26: #gt(zero(),_1) ->? #gt❆1_zero(_1)
Number of SCCs: 5, DPs: 8, edges: 14
	SCC { #20 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: 0
    gt(x1,x2)	weight: 0
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: 0
   sum(x1)	weight: 0
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
    if(x1,x2,x3)	weight: 0
   nil()	weight: 0
  #gt(x1,x2)	weight: 0
 #app(x1,x2)	weight: x1
#gt❆1_s(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: 0
 #sum(x1)	weight: 0
gt❆1_s(x1,x2)	weight: 0
   not(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #20
Number of SCCs: 4, DPs: 7, edges: 13
	SCC { #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 8)
    gt(x1,x2)	weight: (/ 3 8)
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 1 2)
   sum(x1)	weight: 0
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
    if(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
   nil()	weight: 0
  #gt(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 8) + x2
  cons(x1,x2)	weight: (/ 1 8) + x2
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8) + x1
 #sum(x1)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8) + x2
   not(x1)	weight: (/ 1 8)
   app(x1,x2)	weight: 0
    Usable rules: { 7 9 10 12 13 }
    Removed DPs: #16
Number of SCCs: 3, DPs: 6, edges: 12
	SCC { #18 #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 8) + x1
    gt(x1,x2)	weight: (/ 3 8)
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 1 2)
   sum(x1)	weight: 0
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
    if(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
   nil()	weight: 0
  #gt(x1,x2)	weight: x1 + x2
 #app(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: x1 + x2
  plus(x1,x2)	weight: x2
  cons(x1,x2)	weight: (/ 1 8)
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8)
 #sum(x1)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8) + x2
   not(x1)	weight: (/ 1 8)
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #18 #19
Number of SCCs: 2, DPs: 4, edges: 10
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 8) + x1
    gt(x1,x2)	weight: (/ 3 8)
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 1 2)
   sum(x1)	weight: (/ 1 8)
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
    if(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
   nil()	weight: 0
  #gt(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 8) + x2
  cons(x1,x2)	weight: (/ 1 8) + x2
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8)
 #sum(x1)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8) + x2
   not(x1)	weight: (/ 1 8)
   app(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { 1..5 9 12 13 }
    Removed DPs: #1
Number of SCCs: 1, DPs: 3, edges: 9
	SCC { #5 #13 #21 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 3 8) + x1
    gt(x1,x2)	weight: max{0, (/ 1 8) + x2}
#plus(x1,x2)	weight: max{(/ 1 8) + x2, (/ 1 4) + x1}
 false()	weight: (/ 1 4)
  #id(x1)	weight: 0
  true()	weight: (/ 1 8)
gt❆1_zero(x1)	weight: (/ 1 8)
   sum(x1)	weight: 0
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
    if(x1,x2,x3)	weight: max{0, x3, (/ 1 8) + x2}
   nil()	weight: 0
  #gt(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  cons(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8) + x1
 #sum(x1)	weight: 0
gt❆1_s(x1,x2)	weight: 0
   not(x1)	weight: x1
   app(x1,x2)	weight: 0
    Usable rules: { 11..13 }
    Removed DPs: #5 #21
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: x1
    gt(x1,x2)	weight: (/ 1 4)
#plus(x1,x2)	weight: x1
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 3 8) + x1
   sum(x1)	weight: (/ 1 8)
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
    if(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
   nil()	weight: 0
  #gt(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 8) + x2
  cons(x1,x2)	weight: (/ 1 8) + x2
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8) + x1
 #sum(x1)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8)
   not(x1)	weight: (/ 1 8)
   app(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { 12 13 }
    Removed DPs: #13
Number of SCCs: 0, DPs: 0, edges: 0
