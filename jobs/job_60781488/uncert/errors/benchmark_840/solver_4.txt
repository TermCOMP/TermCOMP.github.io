Input TRS:
    1: 2nd(cons1(X,cons(Y,Z))) -> Y
    2: 2nd(cons(X,X1)) -> 2nd(cons1(X,X1))
    3: from(X) -> cons(X,from(s(X)))
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Freezing 2nd
1: 2nd❆1_cons1(X,cons(Y,Z)) -> Y
2: 2nd❆1_cons(X,X1) -> 2nd❆1_cons1(X,X1)
3: from(X) -> cons(X,from(s(X)))
4: 2nd(cons(_1,_2)) ->= 2nd❆1_cons(_1,_2)
5: 2nd(cons1(_1,_2)) ->= 2nd❆1_cons1(_1,_2)
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #2nd❆1_cons(X,X1) -> #2nd❆1_cons1(X,X1)
   #2: #2nd(cons1(_1,_2)) ->? #2nd❆1_cons1(_1,_2)
   #3: #from(X) -> #from(s(X))
   #4: #2nd(cons(_1,_2)) ->? #2nd❆1_cons(_1,_2)
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#3->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
