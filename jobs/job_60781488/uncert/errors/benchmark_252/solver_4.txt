Input TRS:
    1: times(x,plus(y,s(z))) -> plus(times(x,plus(y,times(s(z),0()))),times(x,s(z)))
    2: times(x,0()) -> 0()
    3: times(x,s(y)) -> plus(times(x,y),x)
    4: plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
    5: plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
    6: plus(zero(),y) -> y
    7: plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
    8: id(x) -> x
    9: if(true(),x,y) -> x
    10: if(false(),x,y) -> y
    11: not(x) -> if(x,false(),true())
    12: gt(s(x),zero()) -> true()
    13: gt(zero(),y) -> false()
    14: gt(s(x),s(y)) -> gt(x,y)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing gt
1: times(x,plus(y,s(z))) -> plus(times(x,plus(y,times(s(z),0()))),times(x,s(z)))
2: times(x,0()) -> 0()
3: times(x,s(y)) -> plus(times(x,y),x)
4: plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
5: plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
6: plus(zero(),y) -> y
7: plus(id(x),s(y)) -> s(plus(x,if(gt❆1_s(y,y),y,s(y))))
8: id(x) -> x
9: if(true(),x,y) -> x
10: if(false(),x,y) -> y
11: not(x) -> if(x,false(),true())
12: gt❆1_s(x,zero()) -> true()
13: gt❆1_zero(y) -> false()
14: gt❆1_s(x,s(y)) -> gt(x,y)
15: gt(zero(),_1) ->= gt❆1_zero(_1)
16: gt(s(_1),_2) ->= gt❆1_s(_1,_2)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #not(x) -> #if(x,false(),true())
   #2: #gt❆1_s(x,s(y)) -> #gt(x,y)
   #3: #plus(id(x),s(y)) -> #plus(x,if(gt❆1_s(y,y),y,s(y)))
   #4: #plus(id(x),s(y)) -> #if(gt❆1_s(y,y),y,s(y))
   #5: #plus(id(x),s(y)) -> #gt❆1_s(y,y)
   #6: #plus(s(x),x) -> #plus(if(gt(x,x),id(x),id(x)),s(x))
   #7: #plus(s(x),x) -> #if(gt(x,x),id(x),id(x))
   #8: #plus(s(x),x) -> #gt(x,x)
   #9: #plus(s(x),x) -> #id(x)
   #10: #plus(s(x),x) -> #id(x)
   #11: #gt(s(_1),_2) ->? #gt❆1_s(_1,_2)
   #12: #times(x,s(y)) -> #plus(times(x,y),x)
   #13: #times(x,s(y)) -> #times(x,y)
   #14: #times(x,plus(y,s(z))) -> #plus(times(x,plus(y,times(s(z),0()))),times(x,s(z)))
   #15: #times(x,plus(y,s(z))) -> #times(x,plus(y,times(s(z),0())))
   #16: #times(x,plus(y,s(z))) -> #plus(y,times(s(z),0()))
   #17: #times(x,plus(y,s(z))) -> #times(s(z),0())
   #18: #times(x,plus(y,s(z))) -> #times(x,s(z))
   #19: #gt(zero(),_1) ->? #gt❆1_zero(_1)
   #20: #plus(s(x),s(y)) -> #plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
   #21: #plus(s(x),s(y)) -> #if(gt(x,y),x,y)
   #22: #plus(s(x),s(y)) -> #gt(x,y)
   #23: #plus(s(x),s(y)) -> #if(not(gt(x,y)),id(x),id(y))
   #24: #plus(s(x),s(y)) -> #not(gt(x,y))
   #25: #plus(s(x),s(y)) -> #gt(x,y)
   #26: #plus(s(x),s(y)) -> #id(x)
   #27: #plus(s(x),s(y)) -> #id(y)
Number of SCCs: 3, DPs: 8, edges: 18
	SCC { #2 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
    gt(x1,x2)	weight: 0
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: 0
 #not(x1)	weight: 0
#times(x1,x2)	weight: 0
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
 times(x1,x2)	weight: 0
  #gt(x1,x2)	weight: (/ 1 4) + x2
#gt❆1_s(x1,x2)	weight: x2
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: 0
gt❆1_s(x1,x2)	weight: 0
   not(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #2 #11
Number of SCCs: 2, DPs: 6, edges: 16
	SCC { #13 #15 #18 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
  zero()	weight: 0
     s(x1)	weight: x1
    gt(x1,x2)	weight: max{(/ 1 4) + x2, (/ 1 2) + x1}
#plus(x1,x2)	weight: 0
 false()	weight: (/ 1 2)
  #id(x1)	weight: 0
  true()	weight: (/ 1 2)
gt❆1_zero(x1)	weight: (/ 3 8)
 #not(x1)	weight: 0
#times(x1,x2)	weight: max{0, (/ 1 8) + x2}
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: max{0, x3, x2}
 times(x1,x2)	weight: 0
  #gt(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
  plus(x1,x2)	weight: max{(/ 1 8) + x2, (/ 1 8) + x1}
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: x1
gt❆1_s(x1,x2)	weight: max{(/ 1 8) + x2, (/ 3 8) + x1}
   not(x1)	weight: x1
    Usable rules: { 2 4..10 }
    Removed DPs: #18
Number of SCCs: 2, DPs: 5, edges: 13
	SCC { #13 #15 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
