Input TRS:
    1: isEmpty(empty()) -> true()
    2: isEmpty(node(l,r)) -> false()
    3: left(empty()) -> empty()
    4: left(node(l,r)) -> l
    5: right(empty()) -> empty()
    6: right(node(l,r)) -> r
    7: inc(0()) -> s(0())
    8: inc(s(x)) -> s(inc(x))
    9: count(n,x) -> if(isEmpty(n),isEmpty(left(n)),right(n),node(left(left(n)),node(right(left(n)),right(n))),x,inc(x))
    10: if(true(),b,n,m,x,y) -> x
    11: if(false(),false(),n,m,x,y) -> count(m,x)
    12: if(false(),true(),n,m,x,y) -> count(n,y)
    13: nrOfNodes(n) -> count(n,0())
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #nrOfNodes(n) -> #count(n,0())
   #2: #count(n,x) -> #if(isEmpty(n),isEmpty(left(n)),right(n),node(left(left(n)),node(right(left(n)),right(n))),x,inc(x))
   #3: #count(n,x) -> #isEmpty(n)
   #4: #count(n,x) -> #isEmpty(left(n))
   #5: #count(n,x) -> #left(n)
   #6: #count(n,x) -> #right(n)
   #7: #count(n,x) -> #left(left(n))
   #8: #count(n,x) -> #left(n)
   #9: #count(n,x) -> #right(left(n))
   #10: #count(n,x) -> #left(n)
   #11: #count(n,x) -> #right(n)
   #12: #count(n,x) -> #inc(x)
   #13: #if(false(),false(),n,m,x,y) -> #count(m,x)
   #14: #if(false(),true(),n,m,x,y) -> #count(n,y)
   #15: #inc(s(x)) -> #inc(x)
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #15 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#left(x1)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  left(x1)	weight: 0
#isEmpty(x1)	weight: 0
 false()	weight: 0
isEmpty(x1)	weight: 0
 #inc(x1)	weight: x1
#nrOfNodes(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
#count(x1,x2)	weight: 0
 count(x1,x2)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5,x6)	weight: 0
 right(x1)	weight: 0
  #if(x1,x2,x3,x4,x5,x6)	weight: 0
 empty()	weight: 0
nrOfNodes(x1)	weight: 0
#right(x1)	weight: 0
  node(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #15
Number of SCCs: 1, DPs: 3, edges: 4
	SCC { #2 #13 #14 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
