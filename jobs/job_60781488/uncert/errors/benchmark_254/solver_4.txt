Input TRS:
    1: minus(x,0()) -> x
    2: minus(s(x),s(y)) -> minus(x,y)
    3: quot(0(),s(y)) -> 0()
    4: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
    5: minus(minus(x,y),z) -> minus(x,plus(y,z))
    6: plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
    7: plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
    8: plus(zero(),y) -> y
    9: plus(id(x),s(y)) -> s(plus(x,if(gt(s(y),y),y,s(y))))
    10: id(x) -> x
    11: if(true(),x,y) -> x
    12: if(false(),x,y) -> y
    13: not(x) -> if(x,false(),true())
    14: gt(s(x),zero()) -> true()
    15: gt(zero(),y) -> false()
    16: gt(s(x),s(y)) -> gt(x,y)
Number of strict rules: 16
Direct Order(PosReal,>,Poly) ... failed.
Freezing gt
1: minus(x,0()) -> x
2: minus(s(x),s(y)) -> minus(x,y)
3: quot(0(),s(y)) -> 0()
4: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
5: minus(minus(x,y),z) -> minus(x,plus(y,z))
6: plus(s(x),s(y)) -> s(s(plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))))
7: plus(s(x),x) -> plus(if(gt(x,x),id(x),id(x)),s(x))
8: plus(zero(),y) -> y
9: plus(id(x),s(y)) -> s(plus(x,if(gt❆1_s(y,y),y,s(y))))
10: id(x) -> x
11: if(true(),x,y) -> x
12: if(false(),x,y) -> y
13: not(x) -> if(x,false(),true())
14: gt❆1_s(x,zero()) -> true()
15: gt❆1_zero(y) -> false()
16: gt❆1_s(x,s(y)) -> gt(x,y)
17: gt(zero(),_1) ->= gt❆1_zero(_1)
18: gt(s(_1),_2) ->= gt❆1_s(_1,_2)
Number of strict rules: 16
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #plus(s(x),s(y)) -> #plus(if(gt(x,y),x,y),if(not(gt(x,y)),id(x),id(y)))
   #3: #plus(s(x),s(y)) -> #if(gt(x,y),x,y)
   #4: #plus(s(x),s(y)) -> #gt(x,y)
   #5: #plus(s(x),s(y)) -> #if(not(gt(x,y)),id(x),id(y))
   #6: #plus(s(x),s(y)) -> #not(gt(x,y))
   #7: #plus(s(x),s(y)) -> #gt(x,y)
   #8: #plus(s(x),s(y)) -> #id(x)
   #9: #plus(s(x),s(y)) -> #id(y)
   #10: #not(x) -> #if(x,false(),true())
   #11: #plus(id(x),s(y)) -> #plus(x,if(gt❆1_s(y,y),y,s(y)))
   #12: #plus(id(x),s(y)) -> #if(gt❆1_s(y,y),y,s(y))
   #13: #plus(id(x),s(y)) -> #gt❆1_s(y,y)
   #14: #plus(s(x),x) -> #plus(if(gt(x,x),id(x),id(x)),s(x))
   #15: #plus(s(x),x) -> #if(gt(x,x),id(x),id(x))
   #16: #plus(s(x),x) -> #gt(x,x)
   #17: #plus(s(x),x) -> #id(x)
   #18: #plus(s(x),x) -> #id(x)
   #19: #minus(minus(x,y),z) -> #minus(x,plus(y,z))
   #20: #minus(minus(x,y),z) -> #plus(y,z)
   #21: #gt(zero(),_1) ->? #gt❆1_zero(_1)
   #22: #gt❆1_s(x,s(y)) -> #gt(x,y)
   #23: #quot(s(x),s(y)) -> #quot(minus(x,y),s(y))
   #24: #quot(s(x),s(y)) -> #minus(x,y)
   #25: #gt(s(_1),_2) ->? #gt❆1_s(_1,_2)
Number of SCCs: 4, DPs: 8, edges: 16
	SCC { #23 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 4) + x1
    gt(x1,x2)	weight: (/ 1 2)
 minus(x1,x2)	weight: (/ 1 8) + x1
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 5 8) + x1
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
  quot(x1,x2)	weight: 0
  #gt(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 8)
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8)
#quot(x1,x2)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8) + x2
   not(x1)	weight: (/ 1 8)
    Usable rules: { 1 2 5 }
    Removed DPs: #23
Number of SCCs: 3, DPs: 7, edges: 15
	SCC { #22 #25 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 4) + x1
    gt(x1,x2)	weight: (/ 1 2)
 minus(x1,x2)	weight: (/ 1 8) + x1
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 5 8) + x1
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
  quot(x1,x2)	weight: 0
  #gt(x1,x2)	weight: (/ 1 8) + x2
#gt❆1_s(x1,x2)	weight: x2
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 8)
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8)
#quot(x1,x2)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8) + x2
   not(x1)	weight: (/ 1 8)
    Usable rules: { }
    Removed DPs: #22 #25
Number of SCCs: 2, DPs: 5, edges: 13
	SCC { #1 #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 4) + x1
    gt(x1,x2)	weight: (/ 1 2)
 minus(x1,x2)	weight: (/ 1 8) + x1
#plus(x1,x2)	weight: 0
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 5 8) + x1
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
  quot(x1,x2)	weight: 0
  #gt(x1,x2)	weight: (/ 1 8)
#gt❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: x1
  plus(x1,x2)	weight: (/ 1 8)
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8)
#quot(x1,x2)	weight: x1
gt❆1_s(x1,x2)	weight: (/ 1 8) + x2
   not(x1)	weight: (/ 1 8)
    Usable rules: { }
    Removed DPs: #1 #19
Number of SCCs: 1, DPs: 3, edges: 9
	SCC { #2 #11 #14 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 5 16) + x1
    gt(x1,x2)	weight: max{0, (/ 7 16) + x1}
 minus(x1,x2)	weight: 0
#plus(x1,x2)	weight: max{(/ 1 16) + x2, (/ 1 4) + x1}
 false()	weight: (/ 1 16)
  #id(x1)	weight: 0
  true()	weight: (/ 1 8)
gt❆1_zero(x1)	weight: 0
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: max{0, x3, (/ 1 16) + x2}
  quot(x1,x2)	weight: 0
  #gt(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 3 16) + x1
#quot(x1,x2)	weight: 0
gt❆1_s(x1,x2)	weight: max{0, (/ 1 16) + x2}
   not(x1)	weight: x1
    Usable rules: { 10..12 }
    Removed DPs: #2 #14
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero()	weight: 0
     s(x1)	weight: (/ 1 8)
    gt(x1,x2)	weight: (/ 1 8)
 minus(x1,x2)	weight: 0
#plus(x1,x2)	weight: x1
 false()	weight: 0
  #id(x1)	weight: 0
  true()	weight: 0
gt❆1_zero(x1)	weight: (/ 1 8)
 #not(x1)	weight: 0
#gt❆1_zero(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: x2 + x3
  quot(x1,x2)	weight: 0
  #gt(x1,x2)	weight: (/ 1 8)
#gt❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
  plus(x1,x2)	weight: (/ 1 8) + x1 + x2
  #if(x1,x2,x3)	weight: 0
    id(x1)	weight: (/ 1 8) + x1
#quot(x1,x2)	weight: 0
gt❆1_s(x1,x2)	weight: (/ 1 8)
   not(x1)	weight: (/ 1 8)
    Usable rules: { 11 12 14..18 }
    Removed DPs: #11
Number of SCCs: 0, DPs: 0, edges: 0
