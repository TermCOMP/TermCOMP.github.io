Input TRS:
    1: app(app(append(),nil()),ys) -> ys
    2: app(app(append(),app(app(cons(),x),xs)),ys) -> app(app(cons(),x),app(app(append(),xs),ys))
    3: app(app(flatwith(),f),app(leaf(),x)) -> app(app(cons(),app(f,x)),nil())
    4: app(app(flatwith(),f),app(node(),xs)) -> app(app(flatwithsub(),f),xs)
    5: app(app(flatwithsub(),f),nil()) -> nil()
    6: app(app(flatwithsub(),f),app(app(cons(),x),xs)) -> app(app(append(),app(app(flatwith(),f),x)),app(app(flatwithsub(),f),xs))
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_append(nil(),ys) -> ys
2: app❆2_append(app❆2_cons(x,xs),ys) -> app❆2_cons(x,app❆2_append(xs,ys))
3: app❆2_flatwith(f,app❆1_leaf(x)) -> app❆2_cons(app(f,x),nil())
4: app❆2_flatwith(f,app❆1_node(xs)) -> app❆2_flatwithsub(f,xs)
5: app❆2_flatwithsub(f,nil()) -> nil()
6: app❆2_flatwithsub(f,app❆2_cons(x,xs)) -> app❆2_append(app❆2_flatwith(f,x),app❆2_flatwithsub(f,xs))
7: app(flatwithsub(),_1) ->= app❆1_flatwithsub(_1)
8: app(app❆1_flatwithsub(_1),_2) ->= app❆2_flatwithsub(_1,_2)
9: app(append(),_1) ->= app❆1_append(_1)
10: app(app❆1_append(_1),_2) ->= app❆2_append(_1,_2)
11: app(cons(),_1) ->= app❆1_cons(_1)
12: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
13: app(flatwith(),_1) ->= app❆1_flatwith(_1)
14: app(app❆1_flatwith(_1),_2) ->= app❆2_flatwith(_1,_2)
15: app(leaf(),_1) ->= app❆1_leaf(_1)
16: app(node(),_1) ->= app❆1_node(_1)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_append(app❆2_cons(x,xs),ys) -> #app❆2_append(xs,ys)
   #2: #app❆2_flatwithsub(f,app❆2_cons(x,xs)) -> #app❆2_append(app❆2_flatwith(f,x),app❆2_flatwithsub(f,xs))
   #3: #app❆2_flatwithsub(f,app❆2_cons(x,xs)) -> #app❆2_flatwith(f,x)
   #4: #app❆2_flatwithsub(f,app❆2_cons(x,xs)) -> #app❆2_flatwithsub(f,xs)
   #5: #app(app❆1_flatwith(_1),_2) ->? #app❆2_flatwith(_1,_2)
   #6: #app(app❆1_append(_1),_2) ->? #app❆2_append(_1,_2)
   #7: #app❆2_flatwith(f,app❆1_leaf(x)) -> #app(f,x)
   #8: #app(app❆1_flatwithsub(_1),_2) ->? #app❆2_flatwithsub(_1,_2)
   #9: #app❆2_flatwith(f,app❆1_node(xs)) -> #app❆2_flatwithsub(f,xs)
Number of SCCs: 2, DPs: 7, edges: 13
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
flatwithsub()	weight: 0
app❆1_node(x1)	weight: 0
flatwith()	weight: 0
app❆1_flatwithsub(x1)	weight: 0
app❆2_flatwithsub(x1,x2)	weight: 0
#app❆2_flatwithsub(x1,x2)	weight: 0
app❆1_append(x1)	weight: 0
app❆1_flatwith(x1)	weight: 0
append()	weight: 0
app❆2_flatwith(x1,x2)	weight: 0
#app❆2_append(x1,x2)	weight: x1
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#app❆2_flatwith(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆2_append(x1,x2)	weight: 0
  leaf()	weight: 0
app❆1_cons(x1)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
app❆1_leaf(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 1, DPs: 6, edges: 12
	SCC { #3..5 #7..9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
flatwithsub()	weight: 0
app❆1_node(x1)	weight: (/ 1 4)
flatwith()	weight: 0
app❆1_flatwithsub(x1)	weight: (/ 1 2) + x1
app❆2_flatwithsub(x1,x2)	weight: 0
#app❆2_flatwithsub(x1,x2)	weight: (/ 1 4) + x1
app❆1_append(x1)	weight: 0
app❆1_flatwith(x1)	weight: (/ 1 2) + x1
append()	weight: 0
app❆2_flatwith(x1,x2)	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: x1
#app❆2_flatwith(x1,x2)	weight: (/ 1 4) + x1
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4)
app❆2_append(x1,x2)	weight: 0
  leaf()	weight: 0
app❆1_cons(x1)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
app❆1_leaf(x1)	weight: (/ 1 4)
    Usable rules: { }
    Removed DPs: #5 #7 #8
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #3 #4 #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
flatwithsub()	weight: 0
app❆1_node(x1)	weight: (/ 1 4) + x1
flatwith()	weight: 0
app❆1_flatwithsub(x1)	weight: (/ 1 2)
app❆2_flatwithsub(x1,x2)	weight: 0
#app❆2_flatwithsub(x1,x2)	weight: (/ 1 4) + x2
app❆1_append(x1)	weight: 0
app❆1_flatwith(x1)	weight: (/ 1 2)
append()	weight: 0
app❆2_flatwith(x1,x2)	weight: 0
#app❆2_append(x1,x2)	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
#app❆2_flatwith(x1,x2)	weight: (/ 1 4) + x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_append(x1,x2)	weight: 0
  leaf()	weight: 0
app❆1_cons(x1)	weight: 0
  node()	weight: 0
   app(x1,x2)	weight: 0
app❆1_leaf(x1)	weight: (/ 1 4)
    Usable rules: { }
    Removed DPs: #3 #4 #9
Number of SCCs: 0, DPs: 0, edges: 0
