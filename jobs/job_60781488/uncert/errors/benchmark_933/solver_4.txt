Input TRS:
    1: p(0()) -> 0()
    2: p(s(X)) -> X
    3: leq(0(),Y) -> true()
    4: leq(s(X),0()) -> false()
    5: leq(s(X),s(Y)) -> leq(X,Y)
    6: if(true(),X,Y) -> activate(X)
    7: if(false(),X,Y) -> activate(Y)
    8: diff(X,Y) -> if(leq(X,Y),n__0(),n__s(diff(p(X),Y)))
    9: 0() -> n__0()
    10: s(X) -> n__s(X)
    11: activate(n__0()) -> 0()
    12: activate(n__s(X)) -> s(X)
    13: activate(X) -> X
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #if(true(),X,Y) -> #activate(X)
   #2: #activate(n__0()) -> #0()
   #3: #activate(n__s(X)) -> #s(X)
   #4: #if(false(),X,Y) -> #activate(Y)
   #5: #leq(s(X),s(Y)) -> #leq(X,Y)
   #6: #diff(X,Y) -> #if(leq(X,Y),n__0(),n__s(diff(p(X),Y)))
   #7: #diff(X,Y) -> #leq(X,Y)
   #8: #diff(X,Y) -> #diff(p(X),Y)
   #9: #diff(X,Y) -> #p(X)
Number of SCCs: 2, DPs: 2, edges: 2
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #diff(X,Y_{1})	-#8->
  #diff(p(X),Y_{1})	--->*
  #diff(p(X),Y_{1})
  Looping with: [ Y_{1} := Y_{1}; X := p(X); ]
