Input TRS:
    1: from(X) -> cons(X,n__from(s(X)))
    2: first(0(),Z) -> nil()
    3: first(s(X),cons(Y,Z)) -> cons(Y,n__first(X,activate(Z)))
    4: sel(0(),cons(X,Z)) -> X
    5: sel(s(X),cons(Y,Z)) -> sel(X,activate(Z))
    6: from(X) -> n__from(X)
    7: first(X1,X2) -> n__first(X1,X2)
    8: activate(n__from(X)) -> from(X)
    9: activate(n__first(X1,X2)) -> first(X1,X2)
    10: activate(X) -> X
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__first(X1,X2)) -> #first(X1,X2)
   #2: #sel(s(X),cons(Y,Z)) -> #sel(X,activate(Z))
   #3: #sel(s(X),cons(Y,Z)) -> #activate(Z)
   #4: #first(s(X),cons(Y,Z)) -> #activate(Z)
   #5: #activate(n__from(X)) -> #from(X)
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
n__first(x1,x2)	weight: (/ 3 4) + x1
activate(x1)	weight: (/ 1 4)
n__from(x1)	weight: (/ 3 4)
#activate(x1)	weight: 0
     0()	weight: 0
 #sel(x1,x2)	weight: x1
  from(x1)	weight: (/ 1 2)
   sel(x1,x2)	weight: 0
#first(x1,x2)	weight: 0
   nil()	weight: 0
 first(x1,x2)	weight: (/ 1 2)
#from(x1)	weight: 0
  cons(x1,x2)	weight: (/ 3 4) + x1
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #1 #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 8) + x1
n__first(x1,x2)	weight: (/ 3 8) + x1 + x2
activate(x1)	weight: (/ 1 8)
n__from(x1)	weight: 0
#activate(x1)	weight: x1
     0()	weight: 0
 #sel(x1,x2)	weight: 0
  from(x1)	weight: (/ 1 4)
   sel(x1,x2)	weight: 0
#first(x1,x2)	weight: (/ 1 4) + x1 + x2
   nil()	weight: 0
 first(x1,x2)	weight: (/ 1 4) + x1
#from(x1)	weight: 0
  cons(x1,x2)	weight: (/ 3 8) + x1 + x2
    Usable rules: { }
    Removed DPs: #1 #4
Number of SCCs: 0, DPs: 0, edges: 0
