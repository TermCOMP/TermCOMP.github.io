Input TRS:
    1: app(p(),app(s(),x)) -> x
    2: app(fact(),0()) -> app(s(),0())
    3: app(fact(),app(s(),x)) -> app(app(*(),app(s(),x)),app(fact(),app(p(),app(s(),x))))
    4: app(app(*(),0()),y) -> 0()
    5: app(app(*(),app(s(),x)),y) -> app(app(+(),app(app(*(),x),y)),y)
    6: app(app(+(),x),0()) -> x
    7: app(app(+(),x),app(s(),y)) -> app(s(),app(app(+(),x),y))
    8: app(app(map(),f),nil()) -> nil()
    9: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    10: app(app(filter(),f),nil()) -> nil()
    11: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    12: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    13: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆1_p(app❆1_s(x)) -> x
2: app❆1_fact(0()) -> app❆1_s(0())
3: app❆1_fact(app❆1_s(x)) -> app❆2_*(app❆1_s(x),app❆1_fact(app❆1_p(app❆1_s(x))))
4: app❆2_*(0(),y) -> 0()
5: app❆2_*(app❆1_s(x),y) -> app❆2_+(app❆2_*(x,y),y)
6: app❆2_+(x,0()) -> x
7: app❆2_+(x,app❆1_s(y)) -> app❆1_s(app❆2_+(x,y))
8: app❆2_map(f,nil()) -> nil()
9: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
10: app❆2_filter(f,nil()) -> nil()
11: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
12: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
13: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
14: app(p(),_1) ->= app❆1_p(_1)
15: app(cons(),_1) ->= app❆1_cons(_1)
16: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
17: app(s(),_1) ->= app❆1_s(_1)
18: app(filter(),_1) ->= app❆1_filter(_1)
19: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
20: app(fact(),_1) ->= app❆1_fact(_1)
21: app(+(),_1) ->= app❆1_+(_1)
22: app(app❆1_+(_1),_2) ->= app❆2_+(_1,_2)
23: app(map(),_1) ->= app❆1_map(_1)
24: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
25: app(filter2(),_1) ->= app❆1_filter2(_1)
26: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
27: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
28: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
29: app(*(),_1) ->= app❆1_*(_1)
30: app(app❆1_*(_1),_2) ->= app❆2_*(_1,_2)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #2: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #3: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #4: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #5: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #6: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #7: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #8: #app(p(),_1) ->? #app❆1_p(_1)
   #9: #app(app❆1_*(_1),_2) ->? #app❆2_*(_1,_2)
   #10: #app(fact(),_1) ->? #app❆1_fact(_1)
   #11: #app❆2_+(x,app❆1_s(y)) -> #app❆2_+(x,y)
   #12: #app❆2_*(app❆1_s(x),y) -> #app❆2_+(app❆2_*(x,y),y)
   #13: #app❆2_*(app❆1_s(x),y) -> #app❆2_*(x,y)
   #14: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #15: #app(app❆1_+(_1),_2) ->? #app❆2_+(_1,_2)
   #16: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #17: #app❆1_fact(app❆1_s(x)) -> #app❆2_*(app❆1_s(x),app❆1_fact(app❆1_p(app❆1_s(x))))
   #18: #app❆1_fact(app❆1_s(x)) -> #app❆1_fact(app❆1_p(app❆1_s(x)))
   #19: #app❆1_fact(app❆1_s(x)) -> #app❆1_p(app❆1_s(x))
Number of SCCs: 4, DPs: 12, edges: 23
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
#app❆1_p(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_fact(x1)	weight: 0
app❆1_p(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     p()	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: 0
   nil()	weight: 0
  fact()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆1_fact(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆1_*(x1)	weight: 0
#app❆2_+(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
#app❆2_*(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #11
Number of SCCs: 3, DPs: 11, edges: 22
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
#app❆1_p(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_fact(x1)	weight: 0
app❆1_p(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     p()	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: 0
   nil()	weight: 0
  fact()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆1_fact(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆1_*(x1)	weight: 0
#app❆2_+(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
#app❆2_*(x1,x2)	weight: x1
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13
Number of SCCs: 2, DPs: 10, edges: 21
	SCC { #18 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
#app❆1_p(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆1_fact(x1)	weight: 0
app❆1_p(x1)	weight: max{0, (- (/ 1 2)) + x1}
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     p()	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: 0
   nil()	weight: 0
  fact()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆1_fact(x1)	weight: max{0, (- (/ 1 2)) + x1}
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆1_*(x1)	weight: 0
#app❆2_+(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: max{0, (/ 3 4) + x1}
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
#app❆2_*(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { 1 }
    Removed DPs: #18
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #1..7 #14 #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: x2
     s()	weight: 0
app❆1_map(x1)	weight: (/ 3 8)
#app❆1_p(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 2) + x1
app❆2_*(x1,x2)	weight: (/ 3 4)
app❆2_map(x1,x2)	weight: (/ 3 4) + x1
 false()	weight: 0
app❆1_fact(x1)	weight: (/ 3 8) + x1
app❆1_p(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 25 16) + x1 + x2
     p()	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: (/ 13 16)
   nil()	weight: 0
  fact()	weight: 0
app❆1_filter(x1)	weight: (/ 3 8)
 #app(x1,x2)	weight: (/ 1 8) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16) + x4
#app❆1_fact(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: (/ 3 4) + x1
#app❆2_filter(x1,x2)	weight: x2
app❆1_*(x1)	weight: (/ 3 8) + x1
#app❆2_+(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 16) + x1 + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 7 8)
     +()	weight: 0
app❆1_+(x1)	weight: (/ 3 8)
app❆1_filter2(x1)	weight: (/ 3 8) + x1
#app❆2_*(x1,x2)	weight: 0
app❆1_cons(x1)	weight: (/ 3 8)
app❆3_filter2(x1,x2,x3)	weight: (/ 9 8) + x2
     *()	weight: 0
   app(x1,x2)	weight: (/ 5 16) + x1 + x2
    Usable rules: { }
    Removed DPs: #1..7 #14 #16
Number of SCCs: 0, DPs: 0, edges: 0
