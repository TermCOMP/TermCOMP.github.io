Input TRS:
    1: app(not(),app(not(),x)) -> x
    2: app(not(),app(app(or(),x),y)) -> app(app(and(),app(not(),x)),app(not(),y))
    3: app(not(),app(app(and(),x),y)) -> app(app(or(),app(not(),x)),app(not(),y))
    4: app(app(and(),x),app(app(or(),y),z)) -> app(app(or(),app(app(and(),x),y)),app(app(and(),x),z))
    5: app(app(and(),app(app(or(),y),z)),x) -> app(app(or(),app(app(and(),x),y)),app(app(and(),x),z))
    6: app(app(map(),f),nil()) -> nil()
    7: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    8: app(app(filter(),f),nil()) -> nil()
    9: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    10: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    11: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆1_not(app❆1_not(x)) -> x
2: app❆1_not(app❆2_or(x,y)) -> app❆2_and(app❆1_not(x),app❆1_not(y))
3: app❆1_not(app❆2_and(x,y)) -> app❆2_or(app❆1_not(x),app❆1_not(y))
4: app❆2_and(x,app❆2_or(y,z)) -> app❆2_or(app❆2_and(x,y),app❆2_and(x,z))
5: app❆2_and(app❆2_or(y,z),x) -> app❆2_or(app❆2_and(x,y),app❆2_and(x,z))
6: app❆2_map(f,nil()) -> nil()
7: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
8: app❆2_filter(f,nil()) -> nil()
9: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
10: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
11: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
12: app(cons(),_1) ->= app❆1_cons(_1)
13: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
14: app(filter(),_1) ->= app❆1_filter(_1)
15: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
16: app(or(),_1) ->= app❆1_or(_1)
17: app(app❆1_or(_1),_2) ->= app❆2_or(_1,_2)
18: app(map(),_1) ->= app❆1_map(_1)
19: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
20: app(not(),_1) ->= app❆1_not(_1)
21: app(filter2(),_1) ->= app❆1_filter2(_1)
22: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
23: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
24: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
25: app(and(),_1) ->= app❆1_and(_1)
26: app(app❆1_and(_1),_2) ->= app❆2_and(_1,_2)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆1_not(app❆2_or(x,y)) -> #app❆2_and(app❆1_not(x),app❆1_not(y))
   #2: #app❆1_not(app❆2_or(x,y)) -> #app❆1_not(x)
   #3: #app❆1_not(app❆2_or(x,y)) -> #app❆1_not(y)
   #4: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #5: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #6: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #7: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #8: #app(not(),_1) ->? #app❆1_not(_1)
   #9: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #10: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #11: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #12: #app❆2_and(app❆2_or(y,z),x) -> #app❆2_and(x,y)
   #13: #app❆2_and(app❆2_or(y,z),x) -> #app❆2_and(x,z)
   #14: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #15: #app(app❆1_and(_1),_2) ->? #app❆2_and(_1,_2)
   #16: #app❆1_not(app❆2_and(x,y)) -> #app❆1_not(x)
   #17: #app❆1_not(app❆2_and(x,y)) -> #app❆1_not(y)
   #18: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #19: #app❆2_and(x,app❆2_or(y,z)) -> #app❆2_and(x,y)
   #20: #app❆2_and(x,app❆2_or(y,z)) -> #app❆2_and(x,z)
Number of SCCs: 3, DPs: 17, edges: 52
	SCC { #2 #3 #16 #17 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
app❆1_and(x1)	weight: 0
app❆1_not(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
   and()	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆2_and(x1,x2)	weight: (/ 1 2) + x1 + x2
  true()	weight: 0
app❆1_or(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
#app❆1_not(x1)	weight: x1
#app❆2_and(x1,x2)	weight: 0
app❆2_or(x1,x2)	weight: (/ 1 2) + x1 + x2
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
    or()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   not()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2 #3 #16 #17
Number of SCCs: 2, DPs: 13, edges: 36
	SCC { #12 #13 #19 #20 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
app❆1_map(x1)	weight: 0
app❆1_and(x1)	weight: 0
app❆1_not(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
   and()	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
app❆2_and(x1,x2)	weight: (/ 1 2)
  true()	weight: 0
app❆1_or(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
#app❆1_not(x1)	weight: 0
#app❆2_and(x1,x2)	weight: x1 + x2
app❆2_or(x1,x2)	weight: (/ 1 2) + x1 + x2
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
    or()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   not()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #12 #13 #19 #20
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #4..7 #9..11 #14 #18 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: x2
app❆1_map(x1)	weight: (/ 1 8)
app❆1_and(x1)	weight: (/ 1 8) + x1
app❆1_not(x1)	weight: (/ 1 8)
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2) + x3 + x4
   and()	weight: 0
app❆2_map(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
app❆2_and(x1,x2)	weight: (/ 1 4)
  true()	weight: 0
app❆1_or(x1)	weight: (/ 1 8)
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 1 4) + x2
#app❆1_not(x1)	weight: 0
#app❆2_and(x1,x2)	weight: 0
app❆2_or(x1,x2)	weight: (/ 1 4) + x2
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 8)
    or()	weight: 0
 #app(x1,x2)	weight: (/ 1 8) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16) + x4
app❆2_filter2(x1,x2)	weight: (/ 1 4)
#app❆2_filter(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x1 + x2
filter()	weight: 0
app❆1_filter2(x1)	weight: (/ 1 8) + x1
app❆1_cons(x1)	weight: (/ 1 8) + x1
app❆3_filter2(x1,x2,x3)	weight: (/ 3 8) + x1 + x2
   not()	weight: 0
   app(x1,x2)	weight: (/ 1 16) + x1
    Usable rules: { 8..11 }
    Removed DPs: #4..7 #9..11 #14 #18
Number of SCCs: 0, DPs: 0, edges: 0
