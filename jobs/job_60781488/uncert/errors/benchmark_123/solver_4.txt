Input TRS:
    1: app'(app'(eq(),0()),0()) -> true()
    2: app'(app'(eq(),0()),app'(s(),x)) -> false()
    3: app'(app'(eq(),app'(s(),x)),0()) -> false()
    4: app'(app'(eq(),app'(s(),x)),app'(s(),y)) -> app'(app'(eq(),x),y)
    5: app'(app'(le(),0()),y) -> true()
    6: app'(app'(le(),app'(s(),x)),0()) -> false()
    7: app'(app'(le(),app'(s(),x)),app'(s(),y)) -> app'(app'(le(),x),y)
    8: app'(app'(app(),nil()),y) -> y
    9: app'(app'(app(),app'(app'(add(),n),x)),y) -> app'(app'(add(),n),app'(app'(app(),x),y))
    10: app'(min(),app'(app'(add(),n),nil())) -> n
    11: app'(min(),app'(app'(add(),n),app'(app'(add(),m),x))) -> app'(app'(if_min(),app'(app'(le(),n),m)),app'(app'(add(),n),app'(app'(add(),m),x)))
    12: app'(app'(if_min(),true()),app'(app'(add(),n),app'(app'(add(),m),x))) -> app'(min(),app'(app'(add(),n),x))
    13: app'(app'(if_min(),false()),app'(app'(add(),n),app'(app'(add(),m),x))) -> app'(min(),app'(app'(add(),m),x))
    14: app'(app'(rm(),n),nil()) -> nil()
    15: app'(app'(rm(),n),app'(app'(add(),m),x)) -> app'(app'(app'(if_rm(),app'(app'(eq(),n),m)),n),app'(app'(add(),m),x))
    16: app'(app'(app'(if_rm(),true()),n),app'(app'(add(),m),x)) -> app'(app'(rm(),n),x)
    17: app'(app'(app'(if_rm(),false()),n),app'(app'(add(),m),x)) -> app'(app'(add(),m),app'(app'(rm(),n),x))
    18: app'(app'(minsort(),nil()),nil()) -> nil()
    19: app'(app'(minsort(),app'(app'(add(),n),x)),y) -> app'(app'(app'(if_minsort(),app'(app'(eq(),n),app'(min(),app'(app'(add(),n),x)))),app'(app'(add(),n),x)),y)
    20: app'(app'(app'(if_minsort(),true()),app'(app'(add(),n),x)),y) -> app'(app'(add(),n),app'(app'(minsort(),app'(app'(app(),app'(app'(rm(),n),x)),y)),nil()))
    21: app'(app'(app'(if_minsort(),false()),app'(app'(add(),n),x)),y) -> app'(app'(minsort(),x),app'(app'(add(),n),y))
    22: app'(app'(map(),f),nil()) -> nil()
    23: app'(app'(map(),f),app'(app'(add(),x),xs)) -> app'(app'(add(),app'(f,x)),app'(app'(map(),f),xs))
    24: app'(app'(filter(),f),nil()) -> nil()
    25: app'(app'(filter(),f),app'(app'(add(),x),xs)) -> app'(app'(app'(app'(filter2(),app'(f,x)),f),x),xs)
    26: app'(app'(app'(app'(filter2(),true()),f),x),xs) -> app'(app'(add(),x),app'(app'(filter(),f),xs))
    27: app'(app'(app'(app'(filter2(),false()),f),x),xs) -> app'(app'(filter(),f),xs)
Number of strict rules: 27
Direct Order(PosReal,>,Poly) ... failed.
Freezing app'❆1_min app'
1: app'❆2_eq(0(),0()) -> true()
2: app'❆2_eq(0(),app'❆1_s(x)) -> false()
3: app'❆2_eq(app'❆1_s(x),0()) -> false()
4: app'❆2_eq(app'❆1_s(x),app'❆1_s(y)) -> app'❆2_eq(x,y)
5: app'❆2_le(0(),y) -> true()
6: app'❆2_le(app'❆1_s(x),0()) -> false()
7: app'❆2_le(app'❆1_s(x),app'❆1_s(y)) -> app'❆2_le(x,y)
8: app'❆2_app(nil(),y) -> y
9: app'❆2_app(app'❆2_add(n,x),y) -> app'❆2_add(n,app'❆2_app(x,y))
10: app'❆1_min❆1_app'❆2_add(n,nil()) -> n
11: app'❆1_min❆1_app'❆2_add(n,app'❆2_add(m,x)) -> app'❆2_if_min(app'❆2_le(n,m),app'❆2_add(n,app'❆2_add(m,x)))
12: app'❆2_if_min(true(),app'❆2_add(n,app'❆2_add(m,x))) -> app'❆1_min❆1_app'❆2_add(n,x)
13: app'❆2_if_min(false(),app'❆2_add(n,app'❆2_add(m,x))) -> app'❆1_min❆1_app'❆2_add(m,x)
14: app'❆2_rm(n,nil()) -> nil()
15: app'❆2_rm(n,app'❆2_add(m,x)) -> app'❆3_if_rm(app'❆2_eq(n,m),n,app'❆2_add(m,x))
16: app'❆3_if_rm(true(),n,app'❆2_add(m,x)) -> app'❆2_rm(n,x)
17: app'❆3_if_rm(false(),n,app'❆2_add(m,x)) -> app'❆2_add(m,app'❆2_rm(n,x))
18: app'❆2_minsort(nil(),nil()) -> nil()
19: app'❆2_minsort(app'❆2_add(n,x),y) -> app'❆3_if_minsort(app'❆2_eq(n,app'❆1_min❆1_app'❆2_add(n,x)),app'❆2_add(n,x),y)
20: app'❆3_if_minsort(true(),app'❆2_add(n,x),y) -> app'❆2_add(n,app'❆2_minsort(app'❆2_app(app'❆2_rm(n,x),y),nil()))
21: app'❆3_if_minsort(false(),app'❆2_add(n,x),y) -> app'❆2_minsort(x,app'❆2_add(n,y))
22: app'❆2_map(f,nil()) -> nil()
23: app'❆2_map(f,app'❆2_add(x,xs)) -> app'❆2_add(app'(f,x),app'❆2_map(f,xs))
24: app'❆2_filter(f,nil()) -> nil()
25: app'❆2_filter(f,app'❆2_add(x,xs)) -> app'❆4_filter2(app'(f,x),f,x,xs)
26: app'❆4_filter2(true(),f,x,xs) -> app'❆2_add(x,app'❆2_filter(f,xs))
27: app'❆4_filter2(false(),f,x,xs) -> app'❆2_filter(f,xs)
28: app'(eq(),_1) ->= app'❆1_eq(_1)
29: app'(app'❆1_eq(_1),_2) ->= app'❆2_eq(_1,_2)
30: app'(min(),_1) ->= app'❆1_min(_1)
31: app'(le(),_1) ->= app'❆1_le(_1)
32: app'(app'❆1_le(_1),_2) ->= app'❆2_le(_1,_2)
33: app'(if_rm(),_1) ->= app'❆1_if_rm(_1)
34: app'(app'❆1_if_rm(_1),_2) ->= app'❆2_if_rm(_1,_2)
35: app'(app'❆2_if_rm(_1,_2),_3) ->= app'❆3_if_rm(_1,_2,_3)
36: app'(add(),_1) ->= app'❆1_add(_1)
37: app'(app'❆1_add(_1),_2) ->= app'❆2_add(_1,_2)
38: app'(if_min(),_1) ->= app'❆1_if_min(_1)
39: app'(app'❆1_if_min(_1),_2) ->= app'❆2_if_min(_1,_2)
40: app'(s(),_1) ->= app'❆1_s(_1)
41: app'(if_minsort(),_1) ->= app'❆1_if_minsort(_1)
42: app'(app'❆1_if_minsort(_1),_2) ->= app'❆2_if_minsort(_1,_2)
43: app'(app'❆2_if_minsort(_1,_2),_3) ->= app'❆3_if_minsort(_1,_2,_3)
44: app'(filter(),_1) ->= app'❆1_filter(_1)
45: app'(app'❆1_filter(_1),_2) ->= app'❆2_filter(_1,_2)
46: app'(minsort(),_1) ->= app'❆1_minsort(_1)
47: app'(app'❆1_minsort(_1),_2) ->= app'❆2_minsort(_1,_2)
48: app'(map(),_1) ->= app'❆1_map(_1)
49: app'(app'❆1_map(_1),_2) ->= app'❆2_map(_1,_2)
50: app'(filter2(),_1) ->= app'❆1_filter2(_1)
51: app'(app'❆1_filter2(_1),_2) ->= app'❆2_filter2(_1,_2)
52: app'(app'❆2_filter2(_1,_2),_3) ->= app'❆3_filter2(_1,_2,_3)
53: app'(app'❆3_filter2(_1,_2,_3),_4) ->= app'❆4_filter2(_1,_2,_3,_4)
54: app'(rm(),_1) ->= app'❆1_rm(_1)
55: app'(app'❆1_rm(_1),_2) ->= app'❆2_rm(_1,_2)
56: app'(app(),_1) ->= app'❆1_app(_1)
57: app'(app'❆1_app(_1),_2) ->= app'❆2_app(_1,_2)
58: app'❆1_min(app'❆2_add(_1,_2)) ->= app'❆1_min❆1_app'❆2_add(_1,_2)
Number of strict rules: 27
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app'(app'❆2_if_minsort(_1,_2),_3) ->? #app'❆3_if_minsort(_1,_2,_3)
   #2: #app'(app'❆1_eq(_1),_2) ->? #app'❆2_eq(_1,_2)
   #3: #app'(app'❆2_if_rm(_1,_2),_3) ->? #app'❆3_if_rm(_1,_2,_3)
   #4: #app'(app'❆1_minsort(_1),_2) ->? #app'❆2_minsort(_1,_2)
   #5: #app'(app'❆3_filter2(_1,_2,_3),_4) ->? #app'❆4_filter2(_1,_2,_3,_4)
   #6: #app'❆1_min(app'❆2_add(_1,_2)) ->? #app'❆1_min❆1_app'❆2_add(_1,_2)
   #7: #app'(app'❆1_rm(_1),_2) ->? #app'❆2_rm(_1,_2)
   #8: #app'❆2_if_min(false(),app'❆2_add(n,app'❆2_add(m,x))) -> #app'❆1_min❆1_app'❆2_add(m,x)
   #9: #app'❆2_app(app'❆2_add(n,x),y) -> #app'❆2_app(x,y)
   #10: #app'❆1_min❆1_app'❆2_add(n,app'❆2_add(m,x)) -> #app'❆2_if_min(app'❆2_le(n,m),app'❆2_add(n,app'❆2_add(m,x)))
   #11: #app'❆1_min❆1_app'❆2_add(n,app'❆2_add(m,x)) -> #app'❆2_le(n,m)
   #12: #app'(app'❆1_app(_1),_2) ->? #app'❆2_app(_1,_2)
   #13: #app'❆2_map(f,app'❆2_add(x,xs)) -> #app'(f,x)
   #14: #app'❆2_map(f,app'❆2_add(x,xs)) -> #app'❆2_map(f,xs)
   #15: #app'(app'❆1_filter(_1),_2) ->? #app'❆2_filter(_1,_2)
   #16: #app'❆2_if_min(true(),app'❆2_add(n,app'❆2_add(m,x))) -> #app'❆1_min❆1_app'❆2_add(n,x)
   #17: #app'(min(),_1) ->? #app'❆1_min(_1)
   #18: #app'(app'❆1_map(_1),_2) ->? #app'❆2_map(_1,_2)
   #19: #app'❆2_filter(f,app'❆2_add(x,xs)) -> #app'❆4_filter2(app'(f,x),f,x,xs)
   #20: #app'❆2_filter(f,app'❆2_add(x,xs)) -> #app'(f,x)
   #21: #app'❆3_if_minsort(true(),app'❆2_add(n,x),y) -> #app'❆2_minsort(app'❆2_app(app'❆2_rm(n,x),y),nil())
   #22: #app'❆3_if_minsort(true(),app'❆2_add(n,x),y) -> #app'❆2_app(app'❆2_rm(n,x),y)
   #23: #app'❆3_if_minsort(true(),app'❆2_add(n,x),y) -> #app'❆2_rm(n,x)
   #24: #app'❆2_le(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_le(x,y)
   #25: #app'(app'❆1_if_min(_1),_2) ->? #app'❆2_if_min(_1,_2)
   #26: #app'❆4_filter2(false(),f,x,xs) -> #app'❆2_filter(f,xs)
   #27: #app'❆3_if_rm(false(),n,app'❆2_add(m,x)) -> #app'❆2_rm(n,x)
   #28: #app'(app'❆1_le(_1),_2) ->? #app'❆2_le(_1,_2)
   #29: #app'❆2_minsort(app'❆2_add(n,x),y) -> #app'❆3_if_minsort(app'❆2_eq(n,app'❆1_min❆1_app'❆2_add(n,x)),app'❆2_add(n,x),y)
   #30: #app'❆2_minsort(app'❆2_add(n,x),y) -> #app'❆2_eq(n,app'❆1_min❆1_app'❆2_add(n,x))
   #31: #app'❆2_minsort(app'❆2_add(n,x),y) -> #app'❆1_min❆1_app'❆2_add(n,x)
   #32: #app'❆4_filter2(true(),f,x,xs) -> #app'❆2_filter(f,xs)
   #33: #app'❆3_if_minsort(false(),app'❆2_add(n,x),y) -> #app'❆2_minsort(x,app'❆2_add(n,y))
   #34: #app'❆3_if_rm(true(),n,app'❆2_add(m,x)) -> #app'❆2_rm(n,x)
   #35: #app'❆2_rm(n,app'❆2_add(m,x)) -> #app'❆3_if_rm(app'❆2_eq(n,m),n,app'❆2_add(m,x))
   #36: #app'❆2_rm(n,app'❆2_add(m,x)) -> #app'❆2_eq(n,m)
   #37: #app'❆2_eq(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_eq(x,y)
Number of SCCs: 7, DPs: 21, edges: 35
	SCC { #24 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: 0
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: 0
#app'❆2_minsort(x1,x2)	weight: 0
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: x2
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: 0
#app'❆2_rm(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: 0
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆2_add(x1,x2)	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #24
Number of SCCs: 6, DPs: 20, edges: 34
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: 0
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: 0
#app'❆2_minsort(x1,x2)	weight: 0
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: x1
app'❆2_app(x1,x2)	weight: 0
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: 0
#app'❆2_rm(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: 0
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2) + x2
app'❆1_s(x1)	weight: (/ 1 2)
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 5, DPs: 19, edges: 33
	SCC { #37 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: x1
app'❆3_if_rm(x1,x2,x3)	weight: 0
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: 0
#app'❆2_minsort(x1,x2)	weight: 0
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: 0
#app'❆2_rm(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: 0
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2)
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #37
Number of SCCs: 4, DPs: 18, edges: 32
	SCC { #27 #34 #35 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: 0
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: 0
#app'❆2_minsort(x1,x2)	weight: 0
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: x3
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: (/ 1 4) + x1
#app'❆2_rm(x1,x2)	weight: (/ 1 4) + x2
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: 0
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4)
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #27 #34 #35
Number of SCCs: 3, DPs: 15, edges: 28
	SCC { #8 #10 #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: 0
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: 0
#app'❆2_minsort(x1,x2)	weight: 0
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: x2
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 1 8)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: (/ 1 8) + x1
#app'❆2_rm(x1,x2)	weight: (/ 1 8)
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 3 8) + x2
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: 0
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 4) + x2
app'❆1_s(x1)	weight: (/ 1 8)
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #8 #10 #16
Number of SCCs: 2, DPs: 12, edges: 24
	SCC { #21 #29 #33 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: x2 + x3
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: x2
#app'❆2_minsort(x1,x2)	weight: x1 + x2
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 1 4)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: (/ 1 4) + x1
#app'❆2_rm(x1,x2)	weight: (/ 1 4)
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 3 4)
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 5 4)
app'❆2_add(x1,x2)	weight: (/ 3 4) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4) + x1
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { 1..4 8 9 14..17 }
    Removed DPs: #21
Number of SCCs: 2, DPs: 11, edges: 22
	SCC { #29 #33 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: x2
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_min(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
app'❆2_if_min(x1,x2)	weight: x2
#app'❆2_minsort(x1,x2)	weight: (/ 1 4) + x1
app'❆1_if_minsort(x1)	weight: 0
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: 0
app'❆2_if_minsort(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_rm(x1)	weight: 0
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: 0
app'❆1_eq(x1)	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 1 4)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: (/ 1 4) + x1
#app'❆2_rm(x1,x2)	weight: (/ 1 4)
   map()	weight: 0
app'❆1_app(x1)	weight: 0
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 3 4)
app'❆3_filter2(x1,x2,x3)	weight: 0
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_minsort(x1,x2)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_min(x1)	weight: 0
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 5 4)
app'❆2_add(x1,x2)	weight: (/ 3 4) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4) + x1
app'❆1_filter(x1)	weight: 0
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { 1..4 }
    Removed DPs: #29 #33
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #5 #13..15 #18..20 #26 #32 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app'❆3_if_minsort(x1,x2,x3)	weight: 0
app'❆2_filter(x1,x2)	weight: (/ 1 2)
app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 8) + x1 + x3 + x4
    le()	weight: 0
#app'❆2_eq(x1,x2)	weight: 0
app'❆3_if_rm(x1,x2,x3)	weight: (/ 3 8) + x2 + x3
 if_rm()	weight: 0
app'❆1_filter2(x1)	weight: (/ 3 8) + x1
     s()	weight: 0
app'❆1_map(x1)	weight: (/ 3 8) + x1
app'❆1_min(x1)	weight: (/ 3 8)
#app'❆2_map(x1,x2)	weight: (/ 1 8) + x2
#app'❆2_filter(x1,x2)	weight: x2
app'❆2_if_min(x1,x2)	weight: (/ 3 8) + x2
#app'❆2_minsort(x1,x2)	weight: (/ 1 8) + x1
app'❆1_if_minsort(x1)	weight: (/ 3 8) + x1
    eq()	weight: 0
app'❆2_if_rm(x1,x2)	weight: (/ 3 8) + x1
app'❆2_if_minsort(x1,x2)	weight: (/ 3 8) + x1 + x2
#app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8) + x4
#app'(x1,x2)	weight: (/ 1 4) + x2
 false()	weight: 0
#app'❆1_min(x1)	weight: 0
app'❆1_rm(x1)	weight: (/ 3 8) + x1
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 3 8) + x1 + x2
app'❆1_if_rm(x1)	weight: (/ 3 8) + x1
#app'❆3_if_rm(x1,x2,x3)	weight: 0
app'❆1_add(x1)	weight: (/ 3 8) + x1
app'❆1_eq(x1)	weight: (/ 3 8) + x1
  true()	weight: 0
app'❆1_le(x1)	weight: (/ 3 8) + x1
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
#app'❆2_if_min(x1,x2)	weight: 0
app'❆1_minsort(x1)	weight: (/ 3 8) + x1
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 3 8)
  app'(x1,x2)	weight: (/ 1 4)
app'❆2_map(x1,x2)	weight: (/ 3 8) + x1
   nil()	weight: 0
app'❆2_eq(x1,x2)	weight: (/ 3 8) + x1
#app'❆2_rm(x1,x2)	weight: (/ 1 8)
   map()	weight: 0
app'❆1_app(x1)	weight: (/ 3 8) + x1
#app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 3 8)
app'❆3_filter2(x1,x2,x3)	weight: (/ 3 8) + x1 + x3
   min()	weight: 0
app'❆3_if_minsort(x1,x2,x3)	weight: (/ 1 2) + x2 + x3
app'❆2_minsort(x1,x2)	weight: (/ 3 8) + x1
app'❆2_filter2(x1,x2)	weight: (/ 3 8)
   add()	weight: 0
if_min()	weight: 0
if_minsort()	weight: 0
filter()	weight: 0
minsort()	weight: 0
app'❆2_rm(x1,x2)	weight: (/ 3 8) + x1 + x2
app'❆1_if_min(x1)	weight: (/ 3 8)
app'❆1_min❆1_app'❆2_add(x1,x2)	weight: (/ 1 2)
app'❆2_add(x1,x2)	weight: (/ 3 8) + x1 + x2
app'❆1_s(x1)	weight: (/ 3 8) + x1
app'❆1_filter(x1)	weight: (/ 3 8)
    rm()	weight: 0
   app()	weight: 0
    Usable rules: { 1..4 8 9 14..17 }
    Removed DPs: #5 #13..15 #18..20 #26 #32
Number of SCCs: 1, DPs: 0, edges: 0
