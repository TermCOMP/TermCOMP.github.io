Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: minus(0(),y) -> 0()
    5: minus(s(x),y) -> if_minus(le(s(x),y),s(x),y)
    6: if_minus(true(),s(x),y) -> 0()
    7: if_minus(false(),s(x),y) -> s(minus(x,y))
    8: gcd(0(),y) -> y
    9: gcd(s(x),0()) -> s(x)
    10: gcd(s(x),s(y)) -> if_gcd(le(y,x),s(x),s(y))
    11: if_gcd(true(),s(x),s(y)) -> gcd(minus(x,y),s(y))
    12: if_gcd(false(),s(x),s(y)) -> gcd(minus(y,x),s(x))
Number of strict rules: 12
Direct Order(PosReal,>,Poly) ... failed.
Freezing le
1: le❆1_0(y) -> true()
2: le❆1_s(x,0()) -> false()
3: le❆1_s(x,s(y)) -> le(x,y)
4: minus(0(),y) -> 0()
5: minus(s(x),y) -> if_minus(le❆1_s(x,y),s(x),y)
6: if_minus(true(),s(x),y) -> 0()
7: if_minus(false(),s(x),y) -> s(minus(x,y))
8: gcd(0(),y) -> y
9: gcd(s(x),0()) -> s(x)
10: gcd(s(x),s(y)) -> if_gcd(le(y,x),s(x),s(y))
11: if_gcd(true(),s(x),s(y)) -> gcd(minus(x,y),s(y))
12: if_gcd(false(),s(x),s(y)) -> gcd(minus(y,x),s(x))
13: le(0(),_1) ->= le❆1_0(_1)
14: le(s(_1),_2) ->= le❆1_s(_1,_2)
Number of strict rules: 12
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #le(0(),_1) ->? #le❆1_0(_1)
   #2: #if_gcd(true(),s(x),s(y)) -> #gcd(minus(x,y),s(y))
   #3: #if_gcd(true(),s(x),s(y)) -> #minus(x,y)
   #4: #if_gcd(false(),s(x),s(y)) -> #gcd(minus(y,x),s(x))
   #5: #if_gcd(false(),s(x),s(y)) -> #minus(y,x)
   #6: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
   #7: #if_minus(false(),s(x),y) -> #minus(x,y)
   #8: #gcd(s(x),s(y)) -> #if_gcd(le(y,x),s(x),s(y))
   #9: #gcd(s(x),s(y)) -> #le(y,x)
   #10: #minus(s(x),y) -> #if_minus(le❆1_s(x,y),s(x),y)
   #11: #minus(s(x),y) -> #le❆1_s(x,y)
   #12: #le❆1_s(x,s(y)) -> #le(x,y)
Number of SCCs: 3, DPs: 7, edges: 8
	SCC { #6 #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x1
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
     0()	weight: 0
#if_minus(x1,x2,x3)	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 4) + x1
#minus(x1,x2)	weight: 0
if_minus(x1,x2,x3)	weight: 0
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: 0
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6 #12
Number of SCCs: 2, DPs: 5, edges: 6
	SCC { #7 #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   gcd(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4) + x2
     0()	weight: 0
#if_minus(x1,x2,x3)	weight: x2
#le❆1_s(x1,x2)	weight: (/ 1 4)
#minus(x1,x2)	weight: (/ 1 4) + x1
if_minus(x1,x2,x3)	weight: 0
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: (/ 1 4) + x1
 #gcd(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7 #10
Number of SCCs: 1, DPs: 3, edges: 4
	SCC { #2 #4 #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 8)
     s(x1)	weight: (/ 3 8) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 8) + x1
   gcd(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4) + x2
     0()	weight: 0
#if_minus(x1,x2,x3)	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 8)
#minus(x1,x2)	weight: (/ 1 8)
if_minus(x1,x2,x3)	weight: (/ 1 8) + x2
if_gcd(x1,x2,x3)	weight: 0
#if_gcd(x1,x2,x3)	weight: x2 + x3
le❆1_0(x1)	weight: (/ 1 4) + x1
 #gcd(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { 4..7 }
    Removed DPs: #2 #4 #8
Number of SCCs: 0, DPs: 0, edges: 0
