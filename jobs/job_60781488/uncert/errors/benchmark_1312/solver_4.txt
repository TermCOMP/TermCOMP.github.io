Input TRS:
    1: active(zeros()) -> mark(cons(0(),zeros()))
    2: active(and(tt(),X)) -> mark(X)
    3: active(length(nil())) -> mark(0())
    4: active(length(cons(N,L))) -> mark(s(length(L)))
    5: active(take(0(),IL)) -> mark(nil())
    6: active(take(s(M),cons(N,IL))) -> mark(cons(N,take(M,IL)))
    7: active(cons(X1,X2)) -> cons(active(X1),X2)
    8: active(and(X1,X2)) -> and(active(X1),X2)
    9: active(length(X)) -> length(active(X))
    10: active(s(X)) -> s(active(X))
    11: active(take(X1,X2)) -> take(active(X1),X2)
    12: active(take(X1,X2)) -> take(X1,active(X2))
    13: cons(mark(X1),X2) -> mark(cons(X1,X2))
    14: and(mark(X1),X2) -> mark(and(X1,X2))
    15: length(mark(X)) -> mark(length(X))
    16: s(mark(X)) -> mark(s(X))
    17: take(mark(X1),X2) -> mark(take(X1,X2))
    18: take(X1,mark(X2)) -> mark(take(X1,X2))
    19: proper(zeros()) -> ok(zeros())
    20: proper(cons(X1,X2)) -> cons(proper(X1),proper(X2))
    21: proper(0()) -> ok(0())
    22: proper(and(X1,X2)) -> and(proper(X1),proper(X2))
    23: proper(tt()) -> ok(tt())
    24: proper(length(X)) -> length(proper(X))
    25: proper(nil()) -> ok(nil())
    26: proper(s(X)) -> s(proper(X))
    27: proper(take(X1,X2)) -> take(proper(X1),proper(X2))
    28: cons(ok(X1),ok(X2)) -> ok(cons(X1,X2))
    29: and(ok(X1),ok(X2)) -> ok(and(X1,X2))
    30: length(ok(X)) -> ok(length(X))
    31: s(ok(X)) -> ok(s(X))
    32: take(ok(X1),ok(X2)) -> ok(take(X1,X2))
    33: top(mark(X)) -> top(proper(X))
    34: top(ok(X)) -> top(active(X))
Number of strict rules: 34
Direct Order(PosReal,>,Poly) ... removes: 3 5 2
     s(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 8) + x1 + x2
   top(x1)	weight: x1
   and(x1,x2)	weight: (/ 1 8) + x1 + x2
 zeros()	weight: 0
proper(x1)	weight: x1
    ok(x1)	weight: x1
     0()	weight: 0
   nil()	weight: 0
  mark(x1)	weight: x1
active(x1)	weight: x1
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
length(x1)	weight: (/ 1 8) + x1
Number of strict rules: 31
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #and(ok(X1),ok(X2)) -> #and(X1,X2)
   #2: #active(take(s(M),cons(N,IL))) -> #cons(N,take(M,IL))
   #3: #active(take(s(M),cons(N,IL))) -> #take(M,IL)
   #4: #cons(mark(X1),X2) -> #cons(X1,X2)
   #5: #active(length(X)) -> #length(active(X))
   #6: #active(length(X)) -> #active(X)
   #7: #active(take(X1,X2)) -> #take(active(X1),X2)
   #8: #active(take(X1,X2)) -> #active(X1)
   #9: #proper(length(X)) -> #length(proper(X))
   #10: #proper(length(X)) -> #proper(X)
   #11: #active(take(X1,X2)) -> #take(X1,active(X2))
   #12: #active(take(X1,X2)) -> #active(X2)
   #13: #s(ok(X)) -> #s(X)
   #14: #and(mark(X1),X2) -> #and(X1,X2)
   #15: #length(ok(X)) -> #length(X)
   #16: #proper(cons(X1,X2)) -> #cons(proper(X1),proper(X2))
   #17: #proper(cons(X1,X2)) -> #proper(X1)
   #18: #proper(cons(X1,X2)) -> #proper(X2)
   #19: #active(cons(X1,X2)) -> #cons(active(X1),X2)
   #20: #active(cons(X1,X2)) -> #active(X1)
   #21: #active(s(X)) -> #s(active(X))
   #22: #active(s(X)) -> #active(X)
   #23: #top(mark(X)) -> #top(proper(X))
   #24: #top(mark(X)) -> #proper(X)
   #25: #cons(ok(X1),ok(X2)) -> #cons(X1,X2)
   #26: #proper(and(X1,X2)) -> #and(proper(X1),proper(X2))
   #27: #proper(and(X1,X2)) -> #proper(X1)
   #28: #proper(and(X1,X2)) -> #proper(X2)
   #29: #top(ok(X)) -> #top(active(X))
   #30: #top(ok(X)) -> #active(X)
   #31: #proper(take(X1,X2)) -> #take(proper(X1),proper(X2))
   #32: #proper(take(X1,X2)) -> #proper(X1)
   #33: #proper(take(X1,X2)) -> #proper(X2)
   #34: #take(mark(X1),X2) -> #take(X1,X2)
   #35: #take(ok(X1),ok(X2)) -> #take(X1,X2)
   #36: #proper(s(X)) -> #s(proper(X))
   #37: #proper(s(X)) -> #proper(X)
   #38: #s(mark(X)) -> #s(X)
   #39: #active(zeros()) -> #cons(0(),zeros())
   #40: #active(and(X1,X2)) -> #and(active(X1),X2)
   #41: #active(and(X1,X2)) -> #active(X1)
   #42: #length(mark(X)) -> #length(X)
   #43: #active(length(cons(N,L))) -> #s(length(L))
   #44: #active(length(cons(N,L))) -> #length(L)
   #45: #take(X1,mark(X2)) -> #take(X1,X2)
Number of SCCs: 8, DPs: 27, edges: 129
	SCC { #15 #42 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#take(x1,x2)	weight: 0
  take(x1,x2)	weight: 0
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: x1
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #15 #42
Number of SCCs: 7, DPs: 25, edges: 125
	SCC { #13 #38 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#cons(x1,x2)	weight: 0
     s(x1)	weight: 0
#take(x1,x2)	weight: 0
  take(x1,x2)	weight: 0
   top(x1)	weight: 0
   and(x1,x2)	weight: 0
 #top(x1)	weight: 0
 zeros()	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
   #s(x1)	weight: x1
   nil()	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
active(x1)	weight: 0
  cons(x1,x2)	weight: 0
#active(x1)	weight: 0
    tt()	weight: 0
length(x1)	weight: 0
#length(x1)	weight: 0
 #and(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13 #38
Number of SCCs: 6, DPs: 23, edges: 121
	SCC { #23 #29 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
