Input TRS:
    1: and(true(),X) -> activate(X)
    2: and(false(),Y) -> false()
    3: if(true(),X,Y) -> activate(X)
    4: if(false(),X,Y) -> activate(Y)
    5: add(0(),X) -> activate(X)
    6: add(s(X),Y) -> s(n__add(activate(X),activate(Y)))
    7: first(0(),X) -> nil()
    8: first(s(X),cons(Y,Z)) -> cons(activate(Y),n__first(activate(X),activate(Z)))
    9: from(X) -> cons(activate(X),n__from(n__s(activate(X))))
    10: add(X1,X2) -> n__add(X1,X2)
    11: first(X1,X2) -> n__first(X1,X2)
    12: from(X) -> n__from(X)
    13: s(X) -> n__s(X)
    14: activate(n__add(X1,X2)) -> add(activate(X1),X2)
    15: activate(n__first(X1,X2)) -> first(activate(X1),activate(X2))
    16: activate(n__from(X)) -> from(X)
    17: activate(n__s(X)) -> s(X)
    18: activate(X) -> X
Number of strict rules: 18
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #add(s(X),Y) -> #s(n__add(activate(X),activate(Y)))
   #2: #add(s(X),Y) -> #activate(X)
   #3: #add(s(X),Y) -> #activate(Y)
   #4: #from(X) -> #activate(X)
   #5: #from(X) -> #activate(X)
   #6: #activate(n__add(X1,X2)) -> #add(activate(X1),X2)
   #7: #activate(n__add(X1,X2)) -> #activate(X1)
   #8: #add(0(),X) -> #activate(X)
   #9: #activate(n__s(X)) -> #s(X)
   #10: #activate(n__from(X)) -> #from(X)
   #11: #if(true(),X,Y) -> #activate(X)
   #12: #and(true(),X) -> #activate(X)
   #13: #first(s(X),cons(Y,Z)) -> #activate(Y)
   #14: #first(s(X),cons(Y,Z)) -> #activate(X)
   #15: #first(s(X),cons(Y,Z)) -> #activate(Z)
   #16: #activate(n__first(X1,X2)) -> #first(activate(X1),activate(X2))
   #17: #activate(n__first(X1,X2)) -> #activate(X1)
   #18: #activate(n__first(X1,X2)) -> #activate(X2)
   #19: #if(false(),X,Y) -> #activate(Y)
Number of SCCs: 1, DPs: 14, edges: 74
	SCC { #2..8 #10 #13..18 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
     s(x1)	weight: x1
n__first(x1,x2)	weight: max{(/ 3 8) + x2, (/ 1 4) + x1}
activate(x1)	weight: x1
   and(x1,x2)	weight: 0
n__from(x1)	weight: (/ 1 2) + x1
#activate(x1)	weight: x1
 false()	weight: 0
n__add(x1,x2)	weight: max{(/ 3 8) + x2, (/ 1 4) + x1}
  true()	weight: 0
  n__s(x1)	weight: x1
    if(x1,x2,x3)	weight: 0
     0()	weight: 0
  from(x1)	weight: (/ 1 2) + x1
   #s(x1)	weight: 0
#first(x1,x2)	weight: max{(/ 1 8) + x2, (/ 1 8) + x1}
   nil()	weight: (/ 3 8)
 first(x1,x2)	weight: max{(/ 3 8) + x2, (/ 1 4) + x1}
#from(x1)	weight: (/ 1 8) + x1
  cons(x1,x2)	weight: max{x2, (/ 1 2) + x1}
  #if(x1,x2,x3)	weight: 0
 #add(x1,x2)	weight: max{(/ 1 8) + x2, (/ 1 8) + x1}
   add(x1,x2)	weight: max{(/ 3 8) + x2, (/ 1 4) + x1}
 #and(x1,x2)	weight: 0
    Usable rules: { 5..18 }
    Removed DPs: #2..8 #10 #13..18
Number of SCCs: 0, DPs: 0, edges: 0
