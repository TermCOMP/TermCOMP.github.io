Input TRS:
    1: p(0()) -> 0()
    2: p(s(X)) -> X
    3: leq(0(),Y) -> true()
    4: leq(s(X),0()) -> false()
    5: leq(s(X),s(Y)) -> leq(X,Y)
    6: if(true(),X,Y) -> activate(X)
    7: if(false(),X,Y) -> activate(Y)
    8: diff(X,Y) -> if(leq(X,Y),n__0(),n__s(n__diff(n__p(X),Y)))
    9: 0() -> n__0()
    10: s(X) -> n__s(X)
    11: diff(X1,X2) -> n__diff(X1,X2)
    12: p(X) -> n__p(X)
    13: activate(n__0()) -> 0()
    14: activate(n__s(X)) -> s(activate(X))
    15: activate(n__diff(X1,X2)) -> diff(activate(X1),activate(X2))
    16: activate(n__p(X)) -> p(activate(X))
    17: activate(X) -> X
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #if(true(),X,Y) -> #activate(X)
   #2: #activate(n__0()) -> #0()
   #3: #activate(n__s(X)) -> #s(activate(X))
   #4: #activate(n__s(X)) -> #activate(X)
   #5: #if(false(),X,Y) -> #activate(Y)
   #6: #leq(s(X),s(Y)) -> #leq(X,Y)
   #7: #activate(n__p(X)) -> #p(activate(X))
   #8: #activate(n__p(X)) -> #activate(X)
   #9: #diff(X,Y) -> #if(leq(X,Y),n__0(),n__s(n__diff(n__p(X),Y)))
   #10: #diff(X,Y) -> #leq(X,Y)
   #11: #activate(n__diff(X1,X2)) -> #diff(activate(X1),activate(X2))
   #12: #activate(n__diff(X1,X2)) -> #activate(X1)
   #13: #activate(n__diff(X1,X2)) -> #activate(X2)
Number of SCCs: 2, DPs: 9, edges: 34
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
  diff(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
activate(x1)	weight: 0
#activate(x1)	weight: 0
 false()	weight: 0
   #p(x1)	weight: 0
n__diff(x1,x2)	weight: 0
   leq(x1,x2)	weight: 0
  true()	weight: 0
 #leq(x1,x2)	weight: x2
  n__s(x1)	weight: 0
     p(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
   #s(x1)	weight: 0
  n__0()	weight: 0
#diff(x1,x2)	weight: 0
  n__p(x1)	weight: 0
  #if(x1,x2,x3)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 1, DPs: 8, edges: 33
	SCC { #1 #4 #5 #8 #9 #11..13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
  diff(x1,x2)	weight: (/ 1 2) + x1 + x2
     s(x1)	weight: x1
activate(x1)	weight: x1
#activate(x1)	weight: x1
 false()	weight: 0
   #p(x1)	weight: 0
n__diff(x1,x2)	weight: (/ 1 2) + x1 + x2
   leq(x1,x2)	weight: (/ 1 2)
  true()	weight: 0
 #leq(x1,x2)	weight: 0
  n__s(x1)	weight: x1
     p(x1)	weight: x1
     0()	weight: 0
    if(x1,x2,x3)	weight: x2 + x3
   #s(x1)	weight: 0
  n__0()	weight: 0
#diff(x1,x2)	weight: (/ 1 2) + x1 + x2
  n__p(x1)	weight: x1
  #if(x1,x2,x3)	weight: x2 + x3
    Usable rules: { 1 2 6..17 }
    Removed DPs: #12 #13
Number of SCCs: 1, DPs: 6, edges: 15
	SCC { #1 #4 #5 #8 #9 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
  diff(x1,x2)	weight: x1 + x2
     s(x1)	weight: x1
activate(x1)	weight: 0
#activate(x1)	weight: x1
 false()	weight: 0
   #p(x1)	weight: 0
n__diff(x1,x2)	weight: (/ 1 2)
   leq(x1,x2)	weight: (/ 1 2)
  true()	weight: 0
 #leq(x1,x2)	weight: 0
  n__s(x1)	weight: x1
     p(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: x2
   #s(x1)	weight: 0
  n__0()	weight: 0
#diff(x1,x2)	weight: (/ 1 2)
  n__p(x1)	weight: (/ 1 2) + x1
  #if(x1,x2,x3)	weight: x2 + x3
    Usable rules: { 1 9 10 }
    Removed DPs: #8
Number of SCCs: 1, DPs: 5, edges: 9
	SCC { #1 #4 #5 #9 #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
   #0()	weight: 0
  diff(x1,x2)	weight: max{0, (/ 1 4) + x2}
     s(x1)	weight: x1
activate(x1)	weight: x1
#activate(x1)	weight: (/ 1 4) + x1
 false()	weight: (/ 3 4)
   #p(x1)	weight: 0
n__diff(x1,x2)	weight: max{0, (/ 1 4) + x2}
   leq(x1,x2)	weight: max{(/ 1 2) + x2, (/ 1 4) + x1}
  true()	weight: (/ 3 4)
 #leq(x1,x2)	weight: 0
  n__s(x1)	weight: x1
     p(x1)	weight: x1
     0()	weight: 0
    if(x1,x2,x3)	weight: max{0, x3, (/ 1 4) + x2}
   #s(x1)	weight: 0
  n__0()	weight: 0
#diff(x1,x2)	weight: max{0, (/ 1 2) + x2}
  n__p(x1)	weight: x1
  #if(x1,x2,x3)	weight: max{0, (/ 1 4) + x3, (/ 1 2) + x2}
    Usable rules: { 1 2 6..17 }
    Removed DPs: #1
Number of SCCs: 1, DPs: 4, edges: 6
	SCC { #4 #5 #9 #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
