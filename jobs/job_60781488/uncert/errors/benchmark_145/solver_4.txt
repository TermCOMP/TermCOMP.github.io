Input TRS:
    1: app(app(le(),0()),y) -> true()
    2: app(app(le(),app(s(),x)),0()) -> false()
    3: app(app(le(),app(s(),x)),app(s(),y)) -> app(app(le(),x),y)
    4: app(app(eq(),0()),0()) -> true()
    5: app(app(eq(),0()),app(s(),y)) -> false()
    6: app(app(eq(),app(s(),x)),0()) -> false()
    7: app(app(eq(),app(s(),x)),app(s(),y)) -> app(app(eq(),x),y)
    8: app(app(app(if(),true()),x),y) -> x
    9: app(app(app(if(),false()),x),y) -> y
    10: app(minsort(),nil()) -> nil()
    11: app(minsort(),app(app(cons(),x),y)) -> app(app(cons(),app(app(min(),x),y)),app(minsort(),app(app(del(),app(app(min(),x),y)),app(app(cons(),x),y))))
    12: app(app(min(),x),nil()) -> x
    13: app(app(min(),x),app(app(cons(),y),z)) -> app(app(app(if(),app(app(le(),x),y)),app(app(min(),x),z)),app(app(min(),y),z))
    14: app(app(del(),x),nil()) -> nil()
    15: app(app(del(),x),app(app(cons(),y),z)) -> app(app(app(if(),app(app(eq(),x),y)),z),app(app(cons(),y),app(app(del(),x),z)))
    16: app(app(map(),f),nil()) -> nil()
    17: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    18: app(app(filter(),f),nil()) -> nil()
    19: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    20: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    21: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 21
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_le(0(),y) -> true()
2: app❆2_le(app❆1_s(x),0()) -> false()
3: app❆2_le(app❆1_s(x),app❆1_s(y)) -> app❆2_le(x,y)
4: app❆2_eq(0(),0()) -> true()
5: app❆2_eq(0(),app❆1_s(y)) -> false()
6: app❆2_eq(app❆1_s(x),0()) -> false()
7: app❆2_eq(app❆1_s(x),app❆1_s(y)) -> app❆2_eq(x,y)
8: app❆3_if(true(),x,y) -> x
9: app❆3_if(false(),x,y) -> y
10: app❆1_minsort(nil()) -> nil()
11: app❆1_minsort(app❆2_cons(x,y)) -> app❆2_cons(app❆2_min(x,y),app❆1_minsort(app❆2_del(app❆2_min(x,y),app❆2_cons(x,y))))
12: app❆2_min(x,nil()) -> x
13: app❆2_min(x,app❆2_cons(y,z)) -> app❆3_if(app❆2_le(x,y),app❆2_min(x,z),app❆2_min(y,z))
14: app❆2_del(x,nil()) -> nil()
15: app❆2_del(x,app❆2_cons(y,z)) -> app❆3_if(app❆2_eq(x,y),z,app❆2_cons(y,app❆2_del(x,z)))
16: app❆2_map(f,nil()) -> nil()
17: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
18: app❆2_filter(f,nil()) -> nil()
19: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
20: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
21: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
22: app(eq(),_1) ->= app❆1_eq(_1)
23: app(app❆1_eq(_1),_2) ->= app❆2_eq(_1,_2)
24: app(min(),_1) ->= app❆1_min(_1)
25: app(app❆1_min(_1),_2) ->= app❆2_min(_1,_2)
26: app(le(),_1) ->= app❆1_le(_1)
27: app(app❆1_le(_1),_2) ->= app❆2_le(_1,_2)
28: app(if(),_1) ->= app❆1_if(_1)
29: app(app❆1_if(_1),_2) ->= app❆2_if(_1,_2)
30: app(app❆2_if(_1,_2),_3) ->= app❆3_if(_1,_2,_3)
31: app(cons(),_1) ->= app❆1_cons(_1)
32: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
33: app(del(),_1) ->= app❆1_del(_1)
34: app(app❆1_del(_1),_2) ->= app❆2_del(_1,_2)
35: app(s(),_1) ->= app❆1_s(_1)
36: app(filter(),_1) ->= app❆1_filter(_1)
37: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
38: app(minsort(),_1) ->= app❆1_minsort(_1)
39: app(map(),_1) ->= app❆1_map(_1)
40: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
41: app(filter2(),_1) ->= app❆1_filter2(_1)
42: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
43: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
44: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 21
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #2: #app(minsort(),_1) ->? #app❆1_minsort(_1)
   #3: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #4: #app❆2_min(x,app❆2_cons(y,z)) -> #app❆3_if(app❆2_le(x,y),app❆2_min(x,z),app❆2_min(y,z))
   #5: #app❆2_min(x,app❆2_cons(y,z)) -> #app❆2_le(x,y)
   #6: #app❆2_min(x,app❆2_cons(y,z)) -> #app❆2_min(x,z)
   #7: #app❆2_min(x,app❆2_cons(y,z)) -> #app❆2_min(y,z)
   #8: #app❆1_minsort(app❆2_cons(x,y)) -> #app❆2_min(x,y)
   #9: #app❆1_minsort(app❆2_cons(x,y)) -> #app❆1_minsort(app❆2_del(app❆2_min(x,y),app❆2_cons(x,y)))
   #10: #app❆1_minsort(app❆2_cons(x,y)) -> #app❆2_del(app❆2_min(x,y),app❆2_cons(x,y))
   #11: #app❆1_minsort(app❆2_cons(x,y)) -> #app❆2_min(x,y)
   #12: #app(app❆1_eq(_1),_2) ->? #app❆2_eq(_1,_2)
   #13: #app(app❆2_if(_1,_2),_3) ->? #app❆3_if(_1,_2,_3)
   #14: #app(app❆1_min(_1),_2) ->? #app❆2_min(_1,_2)
   #15: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #16: #app❆2_eq(app❆1_s(x),app❆1_s(y)) -> #app❆2_eq(x,y)
   #17: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #18: #app(app❆1_del(_1),_2) ->? #app❆2_del(_1,_2)
   #19: #app(app❆1_le(_1),_2) ->? #app❆2_le(_1,_2)
   #20: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #21: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #22: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #23: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #24: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #25: #app❆2_le(app❆1_s(x),app❆1_s(y)) -> #app❆2_le(x,y)
   #26: #app❆2_del(x,app❆2_cons(y,z)) -> #app❆3_if(app❆2_eq(x,y),z,app❆2_cons(y,app❆2_del(x,z)))
   #27: #app❆2_del(x,app❆2_cons(y,z)) -> #app❆2_eq(x,y)
   #28: #app❆2_del(x,app❆2_cons(y,z)) -> #app❆2_del(x,z)
Number of SCCs: 6, DPs: 15, edges: 28
	SCC { #25 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le()	weight: 0
app❆1_le(x1)	weight: 0
app❆1_minsort(x1)	weight: 0
#app❆2_map(x1,x2)	weight: 0
app❆1_del(x1)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_if(x1)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆2_eq(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
#app❆2_del(x1,x2)	weight: 0
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆1_min(x1)	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆1_eq(x1)	weight: 0
   del()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
app❆2_min(x1,x2)	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
   min()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_del(x1,x2)	weight: 0
#app❆1_minsort(x1)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
minsort()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
#app❆2_min(x1,x2)	weight: 0
#app❆2_le(x1,x2)	weight: x2
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #25
Number of SCCs: 5, DPs: 14, edges: 27
	SCC { #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le()	weight: 0
app❆1_le(x1)	weight: 0
app❆1_minsort(x1)	weight: 0
#app❆2_map(x1,x2)	weight: 0
app❆1_del(x1)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_if(x1)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆2_eq(x1,x2)	weight: x2
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
#app❆2_del(x1,x2)	weight: 0
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆1_min(x1)	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆1_eq(x1)	weight: 0
   del()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
app❆2_min(x1,x2)	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
   min()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_del(x1,x2)	weight: 0
#app❆1_minsort(x1)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
minsort()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
#app❆2_min(x1,x2)	weight: 0
#app❆2_le(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #16
Number of SCCs: 4, DPs: 13, edges: 26
	SCC { #28 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le()	weight: 0
app❆1_le(x1)	weight: 0
app❆1_minsort(x1)	weight: 0
#app❆2_map(x1,x2)	weight: 0
app❆1_del(x1)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_if(x1)	weight: 0
#app❆3_if(x1,x2,x3)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆2_eq(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
#app❆2_del(x1,x2)	weight: x2
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆1_min(x1)	weight: 0
app❆2_if(x1,x2)	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
app❆2_le(x1,x2)	weight: 0
     0()	weight: 0
    if()	weight: 0
app❆1_eq(x1)	weight: 0
   del()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
app❆2_min(x1,x2)	weight: 0
app❆3_if(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
   min()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 2) + x2
app❆2_del(x1,x2)	weight: 0
#app❆1_minsort(x1)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2)
minsort()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
#app❆2_min(x1,x2)	weight: 0
#app❆2_le(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #28
Number of SCCs: 3, DPs: 12, edges: 25
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
