Input TRS:
    1: app(app(times(),x),0()) -> 0()
    2: app(app(times(),x),app(s(),y)) -> app(app(plus(),app(app(times(),x),y)),x)
    3: app(app(plus(),x),0()) -> x
    4: app(app(plus(),0()),x) -> x
    5: app(app(plus(),x),app(s(),y)) -> app(s(),app(app(plus(),x),y))
    6: app(app(plus(),app(s(),x)),y) -> app(s(),app(app(plus(),x),y))
    7: app(app(map(),f),nil()) -> nil()
    8: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    9: app(app(filter(),f),nil()) -> nil()
    10: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    11: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    12: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 12
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_times(x,0()) -> 0()
2: app❆2_times(x,app❆1_s(y)) -> app❆2_plus(app❆2_times(x,y),x)
3: app❆2_plus(x,0()) -> x
4: app❆2_plus(0(),x) -> x
5: app❆2_plus(x,app❆1_s(y)) -> app❆1_s(app❆2_plus(x,y))
6: app❆2_plus(app❆1_s(x),y) -> app❆1_s(app❆2_plus(x,y))
7: app❆2_map(f,nil()) -> nil()
8: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
9: app❆2_filter(f,nil()) -> nil()
10: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
11: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
12: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
13: app(plus(),_1) ->= app❆1_plus(_1)
14: app(app❆1_plus(_1),_2) ->= app❆2_plus(_1,_2)
15: app(cons(),_1) ->= app❆1_cons(_1)
16: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
17: app(times(),_1) ->= app❆1_times(_1)
18: app(app❆1_times(_1),_2) ->= app❆2_times(_1,_2)
19: app(s(),_1) ->= app❆1_s(_1)
20: app(filter(),_1) ->= app❆1_filter(_1)
21: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
22: app(map(),_1) ->= app❆1_map(_1)
23: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
24: app(filter2(),_1) ->= app❆1_filter2(_1)
25: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
26: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
27: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 12
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_times(x,app❆1_s(y)) -> #app❆2_plus(app❆2_times(x,y),x)
   #2: #app❆2_times(x,app❆1_s(y)) -> #app❆2_times(x,y)
   #3: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(x,y)
   #4: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #5: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #6: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #7: #app(app❆1_plus(_1),_2) ->? #app❆2_plus(_1,_2)
   #8: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #9: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #10: #app❆2_plus(x,app❆1_s(y)) -> #app❆2_plus(x,y)
   #11: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #12: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #13: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #14: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #15: #app(app❆1_times(_1),_2) ->? #app❆2_times(_1,_2)
Number of SCCs: 3, DPs: 12, edges: 25
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_times(x1,x2)	weight: x2
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 2, DPs: 11, edges: 24
	SCC { #3 #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x1
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3
Number of SCCs: 2, DPs: 10, edges: 21
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x2
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #4..6 #8 #9 #11..14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: x2
     s()	weight: 0
app❆1_map(x1)	weight: (/ 3 8) + x1
app❆1_plus(x1)	weight: (/ 3 8) + x1
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 8) + x1
app❆2_plus(x1,x2)	weight: (/ 3 8) + x1
app❆2_map(x1,x2)	weight: (/ 3 8)
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 7 16) + x2
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 3 8) + x1
 #app(x1,x2)	weight: (/ 1 8) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16) + x4
app❆2_filter2(x1,x2)	weight: (/ 3 8) + x2
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 16) + x1 + x2
app❆2_times(x1,x2)	weight: (/ 3 8) + x1
filter()	weight: 0
app❆1_s(x1)	weight: (/ 7 16)
app❆1_filter2(x1)	weight: (/ 3 8) + x1
app❆1_cons(x1)	weight: (/ 3 8) + x1
app❆3_filter2(x1,x2,x3)	weight: (/ 3 8) + x1 + x2
app❆1_times(x1)	weight: (/ 3 8) + x1
   app(x1,x2)	weight: (/ 5 16)
    Usable rules: { }
    Removed DPs: #4..6 #8 #9 #11..14
Number of SCCs: 1, DPs: 0, edges: 0
