Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: mod(x,0()) -> modZeroErro()
    5: mod(x,s(y)) -> modIter(x,s(y),0(),0())
    6: modIter(x,s(y),z,u) -> if(le(x,z),x,s(y),z,u)
    7: if(true(),x,y,z,u) -> u
    8: if(false(),x,y,z,u) -> if2(le(y,s(u)),x,y,s(z),s(u))
    9: if2(false(),x,y,z,u) -> modIter(x,y,z,u)
    10: if2(true(),x,y,z,u) -> modIter(x,y,z,0())
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #modIter(x,s(y),z,u) -> #if(le(x,z),x,s(y),z,u)
   #2: #modIter(x,s(y),z,u) -> #le(x,z)
   #3: #if2(false(),x,y,z,u) -> #modIter(x,y,z,u)
   #4: #if2(true(),x,y,z,u) -> #modIter(x,y,z,0())
   #5: #mod(x,s(y)) -> #modIter(x,s(y),0(),0())
   #6: #le(s(x),s(y)) -> #le(x,y)
   #7: #if(false(),x,y,z,u) -> #if2(le(y,s(u)),x,y,s(z),s(u))
   #8: #if(false(),x,y,z,u) -> #le(y,s(u))
Number of SCCs: 2, DPs: 5, edges: 6
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
   mod(x1,x2)	weight: 0
modIter(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#modIter(x1,x2,x3,x4)	weight: 0
  true()	weight: 0
modZeroErro()	weight: 0
   if2(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4,x5)	weight: 0
 #mod(x1,x2)	weight: 0
  #if(x1,x2,x3,x4,x5)	weight: 0
 #if2(x1,x2,x3,x4,x5)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 1, DPs: 4, edges: 5
	SCC { #1 #3 #4 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
