Input TRS:
    1: active(fact(X)) -> mark(if(zero(X),s(0()),prod(X,fact(p(X)))))
    2: active(add(0(),X)) -> mark(X)
    3: active(add(s(X),Y)) -> mark(s(add(X,Y)))
    4: active(prod(0(),X)) -> mark(0())
    5: active(prod(s(X),Y)) -> mark(add(Y,prod(X,Y)))
    6: active(if(true(),X,Y)) -> mark(X)
    7: active(if(false(),X,Y)) -> mark(Y)
    8: active(zero(0())) -> mark(true())
    9: active(zero(s(X))) -> mark(false())
    10: active(p(s(X))) -> mark(X)
    11: active(fact(X)) -> fact(active(X))
    12: active(if(X1,X2,X3)) -> if(active(X1),X2,X3)
    13: active(zero(X)) -> zero(active(X))
    14: active(s(X)) -> s(active(X))
    15: active(prod(X1,X2)) -> prod(active(X1),X2)
    16: active(prod(X1,X2)) -> prod(X1,active(X2))
    17: active(p(X)) -> p(active(X))
    18: active(add(X1,X2)) -> add(active(X1),X2)
    19: active(add(X1,X2)) -> add(X1,active(X2))
    20: fact(mark(X)) -> mark(fact(X))
    21: if(mark(X1),X2,X3) -> mark(if(X1,X2,X3))
    22: zero(mark(X)) -> mark(zero(X))
    23: s(mark(X)) -> mark(s(X))
    24: prod(mark(X1),X2) -> mark(prod(X1,X2))
    25: prod(X1,mark(X2)) -> mark(prod(X1,X2))
    26: p(mark(X)) -> mark(p(X))
    27: add(mark(X1),X2) -> mark(add(X1,X2))
    28: add(X1,mark(X2)) -> mark(add(X1,X2))
    29: proper(fact(X)) -> fact(proper(X))
    30: proper(if(X1,X2,X3)) -> if(proper(X1),proper(X2),proper(X3))
    31: proper(zero(X)) -> zero(proper(X))
    32: proper(s(X)) -> s(proper(X))
    33: proper(0()) -> ok(0())
    34: proper(prod(X1,X2)) -> prod(proper(X1),proper(X2))
    35: proper(p(X)) -> p(proper(X))
    36: proper(add(X1,X2)) -> add(proper(X1),proper(X2))
    37: proper(true()) -> ok(true())
    38: proper(false()) -> ok(false())
    39: fact(ok(X)) -> ok(fact(X))
    40: if(ok(X1),ok(X2),ok(X3)) -> ok(if(X1,X2,X3))
    41: zero(ok(X)) -> ok(zero(X))
    42: s(ok(X)) -> ok(s(X))
    43: prod(ok(X1),ok(X2)) -> ok(prod(X1,X2))
    44: p(ok(X)) -> ok(p(X))
    45: add(ok(X1),ok(X2)) -> ok(add(X1,X2))
    46: top(mark(X)) -> top(proper(X))
    47: top(ok(X)) -> top(active(X))
Number of strict rules: 47
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #prod(ok(X1),ok(X2)) -> #prod(X1,X2)
   #2: #proper(fact(X)) -> #fact(proper(X))
   #3: #proper(fact(X)) -> #proper(X)
   #4: #proper(p(X)) -> #p(proper(X))
   #5: #proper(p(X)) -> #proper(X)
   #6: #top(mark(X)) -> #top(proper(X))
   #7: #top(mark(X)) -> #proper(X)
   #8: #s(ok(X)) -> #s(X)
   #9: #zero(ok(X)) -> #zero(X)
   #10: #top(ok(X)) -> #top(active(X))
   #11: #top(ok(X)) -> #active(X)
   #12: #if(ok(X1),ok(X2),ok(X3)) -> #if(X1,X2,X3)
   #13: #active(zero(X)) -> #zero(active(X))
   #14: #active(zero(X)) -> #active(X)
   #15: #active(fact(X)) -> #fact(active(X))
   #16: #active(fact(X)) -> #active(X)
   #17: #prod(mark(X1),X2) -> #prod(X1,X2)
   #18: #s(mark(X)) -> #s(X)
   #19: #add(ok(X1),ok(X2)) -> #add(X1,X2)
   #20: #active(if(X1,X2,X3)) -> #if(active(X1),X2,X3)
   #21: #active(if(X1,X2,X3)) -> #active(X1)
   #22: #proper(zero(X)) -> #zero(proper(X))
   #23: #proper(zero(X)) -> #proper(X)
   #24: #active(s(X)) -> #s(active(X))
   #25: #active(s(X)) -> #active(X)
   #26: #proper(if(X1,X2,X3)) -> #if(proper(X1),proper(X2),proper(X3))
   #27: #proper(if(X1,X2,X3)) -> #proper(X1)
   #28: #proper(if(X1,X2,X3)) -> #proper(X2)
   #29: #proper(if(X1,X2,X3)) -> #proper(X3)
   #30: #prod(X1,mark(X2)) -> #prod(X1,X2)
   #31: #fact(mark(X)) -> #fact(X)
   #32: #fact(ok(X)) -> #fact(X)
   #33: #active(prod(s(X),Y)) -> #add(Y,prod(X,Y))
   #34: #active(prod(s(X),Y)) -> #prod(X,Y)
   #35: #p(ok(X)) -> #p(X)
   #36: #add(X1,mark(X2)) -> #add(X1,X2)
   #37: #zero(mark(X)) -> #zero(X)
   #38: #proper(prod(X1,X2)) -> #prod(proper(X1),proper(X2))
   #39: #proper(prod(X1,X2)) -> #proper(X1)
   #40: #proper(prod(X1,X2)) -> #proper(X2)
   #41: #add(mark(X1),X2) -> #add(X1,X2)
   #42: #active(p(X)) -> #p(active(X))
   #43: #active(p(X)) -> #active(X)
   #44: #proper(s(X)) -> #s(proper(X))
   #45: #proper(s(X)) -> #proper(X)
   #46: #active(add(X1,X2)) -> #add(X1,active(X2))
   #47: #active(add(X1,X2)) -> #active(X2)
   #48: #p(mark(X)) -> #p(X)
   #49: #proper(add(X1,X2)) -> #add(proper(X1),proper(X2))
   #50: #proper(add(X1,X2)) -> #proper(X1)
   #51: #proper(add(X1,X2)) -> #proper(X2)
   #52: #if(mark(X1),X2,X3) -> #if(X1,X2,X3)
   #53: #active(prod(X1,X2)) -> #prod(X1,active(X2))
   #54: #active(prod(X1,X2)) -> #active(X2)
   #55: #active(add(s(X),Y)) -> #s(add(X,Y))
   #56: #active(add(s(X),Y)) -> #add(X,Y)
   #57: #active(fact(X)) -> #if(zero(X),s(0()),prod(X,fact(p(X))))
   #58: #active(fact(X)) -> #zero(X)
   #59: #active(fact(X)) -> #s(0())
   #60: #active(fact(X)) -> #prod(X,fact(p(X)))
   #61: #active(fact(X)) -> #fact(p(X))
   #62: #active(fact(X)) -> #p(X)
   #63: #active(prod(X1,X2)) -> #prod(active(X1),X2)
   #64: #active(prod(X1,X2)) -> #active(X1)
   #65: #active(add(X1,X2)) -> #add(active(X1),X2)
   #66: #active(add(X1,X2)) -> #active(X1)
Number of SCCs: 10, DPs: 38, edges: 244
	SCC { #31 #32 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
  prod(x1,x2)	weight: 0
     s(x1)	weight: 0
#prod(x1,x2)	weight: 0
   top(x1)	weight: 0
 false()	weight: 0
 #top(x1)	weight: 0
#fact(x1)	weight: x1
   #p(x1)	weight: 0
  true()	weight: 0
     p(x1)	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
    if(x1,x2,x3)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
  fact(x1)	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
active(x1)	weight: 0
  #if(x1,x2,x3)	weight: 0
#active(x1)	weight: 0
 #add(x1,x2)	weight: 0
   add(x1,x2)	weight: 0
#zero(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #31 #32
Number of SCCs: 9, DPs: 36, edges: 240
	SCC { #35 #48 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
  prod(x1,x2)	weight: 0
     s(x1)	weight: 0
#prod(x1,x2)	weight: 0
   top(x1)	weight: 0
 false()	weight: 0
 #top(x1)	weight: 0
#fact(x1)	weight: 0
   #p(x1)	weight: x1
  true()	weight: 0
     p(x1)	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
    if(x1,x2,x3)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
  fact(x1)	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
active(x1)	weight: 0
  #if(x1,x2,x3)	weight: 0
#active(x1)	weight: 0
 #add(x1,x2)	weight: 0
   add(x1,x2)	weight: 0
#zero(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #35 #48
Number of SCCs: 8, DPs: 34, edges: 236
	SCC { #9 #37 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
  prod(x1,x2)	weight: 0
     s(x1)	weight: 0
#prod(x1,x2)	weight: 0
   top(x1)	weight: 0
 false()	weight: 0
 #top(x1)	weight: 0
#fact(x1)	weight: 0
   #p(x1)	weight: 0
  true()	weight: 0
     p(x1)	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
    if(x1,x2,x3)	weight: 0
     0()	weight: 0
   #s(x1)	weight: 0
  fact(x1)	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
active(x1)	weight: 0
  #if(x1,x2,x3)	weight: 0
#active(x1)	weight: 0
 #add(x1,x2)	weight: 0
   add(x1,x2)	weight: 0
#zero(x1)	weight: x1
    Usable rules: { }
    Removed DPs: #9 #37
Number of SCCs: 7, DPs: 32, edges: 232
	SCC { #8 #18 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
  zero(x1)	weight: 0
  prod(x1,x2)	weight: 0
     s(x1)	weight: 0
#prod(x1,x2)	weight: 0
   top(x1)	weight: 0
 false()	weight: 0
 #top(x1)	weight: 0
#fact(x1)	weight: 0
   #p(x1)	weight: 0
  true()	weight: 0
     p(x1)	weight: 0
proper(x1)	weight: 0
    ok(x1)	weight: (/ 1 2) + x1
    if(x1,x2,x3)	weight: 0
     0()	weight: 0
   #s(x1)	weight: x1
  fact(x1)	weight: 0
  mark(x1)	weight: (/ 1 2) + x1
#proper(x1)	weight: 0
active(x1)	weight: 0
  #if(x1,x2,x3)	weight: 0
#active(x1)	weight: 0
 #add(x1,x2)	weight: 0
   add(x1,x2)	weight: 0
#zero(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #8 #18
Number of SCCs: 6, DPs: 30, edges: 228
	SCC { #6 #10 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
