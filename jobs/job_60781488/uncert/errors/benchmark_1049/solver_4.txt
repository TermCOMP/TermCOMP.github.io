Input TRS:
    1: minus(n__0(),Y) -> 0()
    2: minus(n__s(X),n__s(Y)) -> minus(activate(X),activate(Y))
    3: geq(X,n__0()) -> true()
    4: geq(n__0(),n__s(Y)) -> false()
    5: geq(n__s(X),n__s(Y)) -> geq(activate(X),activate(Y))
    6: div(0(),n__s(Y)) -> 0()
    7: div(s(X),n__s(Y)) -> if(geq(X,activate(Y)),n__s(div(minus(X,activate(Y)),n__s(activate(Y)))),n__0())
    8: if(true(),X,Y) -> activate(X)
    9: if(false(),X,Y) -> activate(Y)
    10: 0() -> n__0()
    11: s(X) -> n__s(X)
    12: activate(n__0()) -> 0()
    13: activate(n__s(X)) -> s(X)
    14: activate(X) -> X
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(n__s(X),n__s(Y)) -> #minus(activate(X),activate(Y))
   #2: #minus(n__s(X),n__s(Y)) -> #activate(X)
   #3: #minus(n__s(X),n__s(Y)) -> #activate(Y)
   #4: #activate(n__s(X)) -> #s(X)
   #5: #if(false(),X,Y) -> #activate(Y)
   #6: #activate(n__0()) -> #0()
   #7: #div(s(X),n__s(Y)) -> #if(geq(X,activate(Y)),n__s(div(minus(X,activate(Y)),n__s(activate(Y)))),n__0())
   #8: #div(s(X),n__s(Y)) -> #geq(X,activate(Y))
   #9: #div(s(X),n__s(Y)) -> #activate(Y)
   #10: #div(s(X),n__s(Y)) -> #div(minus(X,activate(Y)),n__s(activate(Y)))
   #11: #div(s(X),n__s(Y)) -> #minus(X,activate(Y))
   #12: #div(s(X),n__s(Y)) -> #activate(Y)
   #13: #div(s(X),n__s(Y)) -> #activate(Y)
   #14: #geq(n__s(X),n__s(Y)) -> #geq(activate(X),activate(Y))
   #15: #geq(n__s(X),n__s(Y)) -> #activate(X)
   #16: #geq(n__s(X),n__s(Y)) -> #activate(Y)
   #17: #minus(n__0(),Y) -> #0()
   #18: #if(true(),X,Y) -> #activate(X)
Number of SCCs: 2, DPs: 2, edges: 2
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #div(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: 0
activate(x1)	weight: (/ 1 4) + x1
 #geq(x1,x2)	weight: 0
#activate(x1)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
   geq(x1,x2)	weight: 0
  true()	weight: 0
  n__s(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
   #s(x1)	weight: 0
  n__0()	weight: 0
#minus(x1,x2)	weight: x2
  #if(x1,x2,x3)	weight: 0
    Usable rules: { 10..14 }
    Removed DPs: #1
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #div(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
 minus(x1,x2)	weight: 0
activate(x1)	weight: (/ 1 4) + x1
 #geq(x1,x2)	weight: x1
#activate(x1)	weight: 0
 false()	weight: 0
   div(x1,x2)	weight: 0
   geq(x1,x2)	weight: 0
  true()	weight: 0
  n__s(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
   #s(x1)	weight: 0
  n__0()	weight: 0
#minus(x1,x2)	weight: x2
  #if(x1,x2,x3)	weight: 0
    Usable rules: { 10..14 }
    Removed DPs: #14
Number of SCCs: 0, DPs: 0, edges: 0
