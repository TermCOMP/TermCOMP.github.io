Input TRS:
    1: app(app(ack(),0()),y) -> app(succ(),y)
    2: app(app(ack(),app(succ(),x)),y) -> app(app(ack(),x),app(succ(),0()))
    3: app(app(ack(),app(succ(),x)),app(succ(),y)) -> app(app(ack(),x),app(app(ack(),app(succ(),x)),y))
    4: app(app(map(),f),nil()) -> nil()
    5: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    6: app(app(filter(),f),nil()) -> nil()
    7: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    8: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    9: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_ack(0(),y) -> app❆1_succ(y)
2: app❆2_ack(app❆1_succ(x),y) -> app❆2_ack(x,app❆1_succ(0()))
3: app❆2_ack(app❆1_succ(x),app❆1_succ(y)) -> app❆2_ack(x,app❆2_ack(app❆1_succ(x),y))
4: app❆2_map(f,nil()) -> nil()
5: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
6: app❆2_filter(f,nil()) -> nil()
7: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
8: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
9: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
10: app(cons(),_1) ->= app❆1_cons(_1)
11: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
12: app(succ(),_1) ->= app❆1_succ(_1)
13: app(filter(),_1) ->= app❆1_filter(_1)
14: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
15: app(map(),_1) ->= app❆1_map(_1)
16: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
17: app(ack(),_1) ->= app❆1_ack(_1)
18: app(app❆1_ack(_1),_2) ->= app❆2_ack(_1,_2)
19: app(filter2(),_1) ->= app❆1_filter2(_1)
20: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
21: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
22: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_ack(app❆1_succ(x),y) -> #app❆2_ack(x,app❆1_succ(0()))
   #2: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #3: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #4: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #5: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #6: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #7: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #8: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #9: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #10: #app❆2_ack(app❆1_succ(x),app❆1_succ(y)) -> #app❆2_ack(x,app❆2_ack(app❆1_succ(x),y))
   #11: #app❆2_ack(app❆1_succ(x),app❆1_succ(y)) -> #app❆2_ack(app❆1_succ(x),y)
   #12: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #13: #app(app❆1_ack(_1),_2) ->? #app❆2_ack(_1,_2)
Number of SCCs: 2, DPs: 11, edges: 24
	SCC { #1 #10 #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_ack(x1,x2)	weight: x1
#app❆2_map(x1,x2)	weight: 0
app❆1_succ(x1)	weight: (/ 1 2) + x1
app❆1_map(x1)	weight: 0
   ack()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
app❆1_ack(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
  succ()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
#app❆2_ack(x1,x2)	weight: x1
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1 #10
Number of SCCs: 2, DPs: 9, edges: 16
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
app❆2_ack(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
app❆1_succ(x1)	weight: (/ 1 4) + x1
app❆1_map(x1)	weight: 0
   ack()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
app❆1_ack(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
  succ()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
#app❆2_ack(x1,x2)	weight: max{0, (/ 1 4) + x2}
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
filter()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #11
Number of SCCs: 1, DPs: 8, edges: 15
	SCC { #2 #3 #5..9 #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_ack(x1,x2)	weight: x1
#app❆2_map(x1,x2)	weight: (/ 1 4) + x1
app❆1_succ(x1)	weight: (/ 1 4) + x1
app❆1_map(x1)	weight: (/ 1 2) + x1
   ack()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
app❆1_ack(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
  succ()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2) + x1
#app❆2_ack(x1,x2)	weight: 0
 #app(x1,x2)	weight: x1
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2) + x2
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4) + x1
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4)
filter()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4) + x2
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #2 #3 #5 #6 #8 #9 #12
Number of SCCs: 2, DPs: 1, edges: 1
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_ack(x1,x2)	weight: x1
#app❆2_map(x1,x2)	weight: (/ 1 4) + x2
app❆1_succ(x1)	weight: (/ 1 4) + x1
app❆1_map(x1)	weight: (/ 1 2)
   ack()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
app❆1_ack(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
  succ()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2)
#app❆2_ack(x1,x2)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2)
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4)
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x2
filter()	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4)
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 1, DPs: 0, edges: 0
