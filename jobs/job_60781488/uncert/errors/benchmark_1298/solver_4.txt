Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: U101(tt(),V1,V2) -> U102(isNatKind(activate(V1)),activate(V1),activate(V2))
    3: U102(tt(),V1,V2) -> U103(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    4: U103(tt(),V1,V2) -> U104(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    5: U104(tt(),V1,V2) -> U105(isNat(activate(V1)),activate(V2))
    6: U105(tt(),V2) -> U106(isNatIList(activate(V2)))
    7: U106(tt()) -> tt()
    8: U11(tt(),V1) -> U12(isNatIListKind(activate(V1)),activate(V1))
    9: U111(tt(),L,N) -> U112(isNatIListKind(activate(L)),activate(L),activate(N))
    10: U112(tt(),L,N) -> U113(isNat(activate(N)),activate(L),activate(N))
    11: U113(tt(),L,N) -> U114(isNatKind(activate(N)),activate(L))
    12: U114(tt(),L) -> s(length(activate(L)))
    13: U12(tt(),V1) -> U13(isNatList(activate(V1)))
    14: U121(tt(),IL) -> U122(isNatIListKind(activate(IL)))
    15: U122(tt()) -> nil()
    16: U13(tt()) -> tt()
    17: U131(tt(),IL,M,N) -> U132(isNatIListKind(activate(IL)),activate(IL),activate(M),activate(N))
    18: U132(tt(),IL,M,N) -> U133(isNat(activate(M)),activate(IL),activate(M),activate(N))
    19: U133(tt(),IL,M,N) -> U134(isNatKind(activate(M)),activate(IL),activate(M),activate(N))
    20: U134(tt(),IL,M,N) -> U135(isNat(activate(N)),activate(IL),activate(M),activate(N))
    21: U135(tt(),IL,M,N) -> U136(isNatKind(activate(N)),activate(IL),activate(M),activate(N))
    22: U136(tt(),IL,M,N) -> cons(activate(N),n__take(activate(M),activate(IL)))
    23: U21(tt(),V1) -> U22(isNatKind(activate(V1)),activate(V1))
    24: U22(tt(),V1) -> U23(isNat(activate(V1)))
    25: U23(tt()) -> tt()
    26: U31(tt(),V) -> U32(isNatIListKind(activate(V)),activate(V))
    27: U32(tt(),V) -> U33(isNatList(activate(V)))
    28: U33(tt()) -> tt()
    29: U41(tt(),V1,V2) -> U42(isNatKind(activate(V1)),activate(V1),activate(V2))
    30: U42(tt(),V1,V2) -> U43(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    31: U43(tt(),V1,V2) -> U44(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    32: U44(tt(),V1,V2) -> U45(isNat(activate(V1)),activate(V2))
    33: U45(tt(),V2) -> U46(isNatIList(activate(V2)))
    34: U46(tt()) -> tt()
    35: U51(tt(),V2) -> U52(isNatIListKind(activate(V2)))
    36: U52(tt()) -> tt()
    37: U61(tt(),V2) -> U62(isNatIListKind(activate(V2)))
    38: U62(tt()) -> tt()
    39: U71(tt()) -> tt()
    40: U81(tt()) -> tt()
    41: U91(tt(),V1,V2) -> U92(isNatKind(activate(V1)),activate(V1),activate(V2))
    42: U92(tt(),V1,V2) -> U93(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    43: U93(tt(),V1,V2) -> U94(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    44: U94(tt(),V1,V2) -> U95(isNat(activate(V1)),activate(V2))
    45: U95(tt(),V2) -> U96(isNatList(activate(V2)))
    46: U96(tt()) -> tt()
    47: isNat(n__0()) -> tt()
    48: isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)),activate(V1))
    49: isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
    50: isNatIList(V) -> U31(isNatIListKind(activate(V)),activate(V))
    51: isNatIList(n__zeros()) -> tt()
    52: isNatIList(n__cons(V1,V2)) -> U41(isNatKind(activate(V1)),activate(V1),activate(V2))
    53: isNatIListKind(n__nil()) -> tt()
    54: isNatIListKind(n__zeros()) -> tt()
    55: isNatIListKind(n__cons(V1,V2)) -> U51(isNatKind(activate(V1)),activate(V2))
    56: isNatIListKind(n__take(V1,V2)) -> U61(isNatKind(activate(V1)),activate(V2))
    57: isNatKind(n__0()) -> tt()
    58: isNatKind(n__length(V1)) -> U71(isNatIListKind(activate(V1)))
    59: isNatKind(n__s(V1)) -> U81(isNatKind(activate(V1)))
    60: isNatList(n__nil()) -> tt()
    61: isNatList(n__cons(V1,V2)) -> U91(isNatKind(activate(V1)),activate(V1),activate(V2))
    62: isNatList(n__take(V1,V2)) -> U101(isNatKind(activate(V1)),activate(V1),activate(V2))
    63: length(nil()) -> 0()
    64: length(cons(N,L)) -> U111(isNatList(activate(L)),activate(L),N)
    65: take(0(),IL) -> U121(isNatIList(IL),IL)
    66: take(s(M),cons(N,IL)) -> U131(isNatIList(activate(IL)),activate(IL),M,N)
    67: zeros() -> n__zeros()
    68: take(X1,X2) -> n__take(X1,X2)
    69: 0() -> n__0()
    70: length(X) -> n__length(X)
    71: s(X) -> n__s(X)
    72: cons(X1,X2) -> n__cons(X1,X2)
    73: nil() -> n__nil()
    74: activate(n__zeros()) -> zeros()
    75: activate(n__take(X1,X2)) -> take(X1,X2)
    76: activate(n__0()) -> 0()
    77: activate(n__length(X)) -> length(X)
    78: activate(n__s(X)) -> s(X)
    79: activate(n__cons(X1,X2)) -> cons(X1,X2)
    80: activate(n__nil()) -> nil()
    81: activate(X) -> X
Number of strict rules: 81
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U101(tt(),V1,V2) -> #U102(isNatKind(activate(V1)),activate(V1),activate(V2))
   #2: #U101(tt(),V1,V2) -> #isNatKind(activate(V1))
   #3: #U101(tt(),V1,V2) -> #activate(V1)
   #4: #U101(tt(),V1,V2) -> #activate(V1)
   #5: #U101(tt(),V1,V2) -> #activate(V2)
   #6: #U93(tt(),V1,V2) -> #U94(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #7: #U93(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #8: #U93(tt(),V1,V2) -> #activate(V2)
   #9: #U93(tt(),V1,V2) -> #activate(V1)
   #10: #U93(tt(),V1,V2) -> #activate(V2)
   #11: #U41(tt(),V1,V2) -> #U42(isNatKind(activate(V1)),activate(V1),activate(V2))
   #12: #U41(tt(),V1,V2) -> #isNatKind(activate(V1))
   #13: #U41(tt(),V1,V2) -> #activate(V1)
   #14: #U41(tt(),V1,V2) -> #activate(V1)
   #15: #U41(tt(),V1,V2) -> #activate(V2)
   #16: #U51(tt(),V2) -> #U52(isNatIListKind(activate(V2)))
   #17: #U51(tt(),V2) -> #isNatIListKind(activate(V2))
   #18: #U51(tt(),V2) -> #activate(V2)
   #19: #take(s(M),cons(N,IL)) -> #U131(isNatIList(activate(IL)),activate(IL),M,N)
   #20: #take(s(M),cons(N,IL)) -> #isNatIList(activate(IL))
   #21: #take(s(M),cons(N,IL)) -> #activate(IL)
   #22: #take(s(M),cons(N,IL)) -> #activate(IL)
   #23: #U92(tt(),V1,V2) -> #U93(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #24: #U92(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #25: #U92(tt(),V1,V2) -> #activate(V2)
   #26: #U92(tt(),V1,V2) -> #activate(V1)
   #27: #U92(tt(),V1,V2) -> #activate(V2)
   #28: #U91(tt(),V1,V2) -> #U92(isNatKind(activate(V1)),activate(V1),activate(V2))
   #29: #U91(tt(),V1,V2) -> #isNatKind(activate(V1))
   #30: #U91(tt(),V1,V2) -> #activate(V1)
   #31: #U91(tt(),V1,V2) -> #activate(V1)
   #32: #U91(tt(),V1,V2) -> #activate(V2)
   #33: #U61(tt(),V2) -> #U62(isNatIListKind(activate(V2)))
   #34: #U61(tt(),V2) -> #isNatIListKind(activate(V2))
   #35: #U61(tt(),V2) -> #activate(V2)
   #36: #isNat(n__length(V1)) -> #U11(isNatIListKind(activate(V1)),activate(V1))
   #37: #isNat(n__length(V1)) -> #isNatIListKind(activate(V1))
   #38: #isNat(n__length(V1)) -> #activate(V1)
   #39: #isNat(n__length(V1)) -> #activate(V1)
   #40: #activate(n__take(X1,X2)) -> #take(X1,X2)
   #41: #activate(n__zeros()) -> #zeros()
   #42: #isNatKind(n__length(V1)) -> #U71(isNatIListKind(activate(V1)))
   #43: #isNatKind(n__length(V1)) -> #isNatIListKind(activate(V1))
   #44: #isNatKind(n__length(V1)) -> #activate(V1)
   #45: #isNatList(n__cons(V1,V2)) -> #U91(isNatKind(activate(V1)),activate(V1),activate(V2))
   #46: #isNatList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #47: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #48: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #49: #isNatList(n__cons(V1,V2)) -> #activate(V2)
   #50: #U105(tt(),V2) -> #U106(isNatIList(activate(V2)))
   #51: #U105(tt(),V2) -> #isNatIList(activate(V2))
   #52: #U105(tt(),V2) -> #activate(V2)
   #53: #isNatKind(n__s(V1)) -> #U81(isNatKind(activate(V1)))
   #54: #isNatKind(n__s(V1)) -> #isNatKind(activate(V1))
   #55: #isNatKind(n__s(V1)) -> #activate(V1)
   #56: #isNatIListKind(n__cons(V1,V2)) -> #U51(isNatKind(activate(V1)),activate(V2))
   #57: #isNatIListKind(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #58: #isNatIListKind(n__cons(V1,V2)) -> #activate(V1)
   #59: #isNatIListKind(n__cons(V1,V2)) -> #activate(V2)
   #60: #U12(tt(),V1) -> #U13(isNatList(activate(V1)))
   #61: #U12(tt(),V1) -> #isNatList(activate(V1))
   #62: #U12(tt(),V1) -> #activate(V1)
   #63: #U111(tt(),L,N) -> #U112(isNatIListKind(activate(L)),activate(L),activate(N))
   #64: #U111(tt(),L,N) -> #isNatIListKind(activate(L))
   #65: #U111(tt(),L,N) -> #activate(L)
   #66: #U111(tt(),L,N) -> #activate(L)
   #67: #U111(tt(),L,N) -> #activate(N)
   #68: #U113(tt(),L,N) -> #U114(isNatKind(activate(N)),activate(L))
   #69: #U113(tt(),L,N) -> #isNatKind(activate(N))
   #70: #U113(tt(),L,N) -> #activate(N)
   #71: #U113(tt(),L,N) -> #activate(L)
   #72: #activate(n__0()) -> #0()
   #73: #U22(tt(),V1) -> #U23(isNat(activate(V1)))
   #74: #U22(tt(),V1) -> #isNat(activate(V1))
   #75: #U22(tt(),V1) -> #activate(V1)
   #76: #U21(tt(),V1) -> #U22(isNatKind(activate(V1)),activate(V1))
   #77: #U21(tt(),V1) -> #isNatKind(activate(V1))
   #78: #U21(tt(),V1) -> #activate(V1)
   #79: #U21(tt(),V1) -> #activate(V1)
   #80: #activate(n__s(X)) -> #s(X)
   #81: #U95(tt(),V2) -> #U96(isNatList(activate(V2)))
   #82: #U95(tt(),V2) -> #isNatList(activate(V2))
   #83: #U95(tt(),V2) -> #activate(V2)
   #84: #U114(tt(),L) -> #s(length(activate(L)))
   #85: #U114(tt(),L) -> #length(activate(L))
   #86: #U114(tt(),L) -> #activate(L)
   #87: #U43(tt(),V1,V2) -> #U44(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #88: #U43(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #89: #U43(tt(),V1,V2) -> #activate(V2)
   #90: #U43(tt(),V1,V2) -> #activate(V1)
   #91: #U43(tt(),V1,V2) -> #activate(V2)
   #92: #activate(n__cons(X1,X2)) -> #cons(X1,X2)
   #93: #isNatIListKind(n__take(V1,V2)) -> #U61(isNatKind(activate(V1)),activate(V2))
   #94: #isNatIListKind(n__take(V1,V2)) -> #isNatKind(activate(V1))
   #95: #isNatIListKind(n__take(V1,V2)) -> #activate(V1)
   #96: #isNatIListKind(n__take(V1,V2)) -> #activate(V2)
   #97: #U121(tt(),IL) -> #U122(isNatIListKind(activate(IL)))
   #98: #U121(tt(),IL) -> #isNatIListKind(activate(IL))
   #99: #U121(tt(),IL) -> #activate(IL)
   #100: #isNatList(n__take(V1,V2)) -> #U101(isNatKind(activate(V1)),activate(V1),activate(V2))
   #101: #isNatList(n__take(V1,V2)) -> #isNatKind(activate(V1))
   #102: #isNatList(n__take(V1,V2)) -> #activate(V1)
   #103: #isNatList(n__take(V1,V2)) -> #activate(V1)
   #104: #isNatList(n__take(V1,V2)) -> #activate(V2)
   #105: #U42(tt(),V1,V2) -> #U43(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #106: #U42(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #107: #U42(tt(),V1,V2) -> #activate(V2)
   #108: #U42(tt(),V1,V2) -> #activate(V1)
   #109: #U42(tt(),V1,V2) -> #activate(V2)
   #110: #isNatIList(n__cons(V1,V2)) -> #U41(isNatKind(activate(V1)),activate(V1),activate(V2))
   #111: #isNatIList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #112: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #113: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #114: #isNatIList(n__cons(V1,V2)) -> #activate(V2)
   #115: #isNat(n__s(V1)) -> #U21(isNatKind(activate(V1)),activate(V1))
   #116: #isNat(n__s(V1)) -> #isNatKind(activate(V1))
   #117: #isNat(n__s(V1)) -> #activate(V1)
   #118: #isNat(n__s(V1)) -> #activate(V1)
   #119: #U134(tt(),IL,M,N) -> #U135(isNat(activate(N)),activate(IL),activate(M),activate(N))
   #120: #U134(tt(),IL,M,N) -> #isNat(activate(N))
   #121: #U134(tt(),IL,M,N) -> #activate(N)
   #122: #U134(tt(),IL,M,N) -> #activate(IL)
   #123: #U134(tt(),IL,M,N) -> #activate(M)
   #124: #U134(tt(),IL,M,N) -> #activate(N)
   #125: #U112(tt(),L,N) -> #U113(isNat(activate(N)),activate(L),activate(N))
   #126: #U112(tt(),L,N) -> #isNat(activate(N))
   #127: #U112(tt(),L,N) -> #activate(N)
   #128: #U112(tt(),L,N) -> #activate(L)
   #129: #U112(tt(),L,N) -> #activate(N)
   #130: #length(cons(N,L)) -> #U111(isNatList(activate(L)),activate(L),N)
   #131: #length(cons(N,L)) -> #isNatList(activate(L))
   #132: #length(cons(N,L)) -> #activate(L)
   #133: #length(cons(N,L)) -> #activate(L)
   #134: #U45(tt(),V2) -> #U46(isNatIList(activate(V2)))
   #135: #U45(tt(),V2) -> #isNatIList(activate(V2))
   #136: #U45(tt(),V2) -> #activate(V2)
   #137: #U104(tt(),V1,V2) -> #U105(isNat(activate(V1)),activate(V2))
   #138: #U104(tt(),V1,V2) -> #isNat(activate(V1))
   #139: #U104(tt(),V1,V2) -> #activate(V1)
   #140: #U104(tt(),V1,V2) -> #activate(V2)
   #141: #U94(tt(),V1,V2) -> #U95(isNat(activate(V1)),activate(V2))
   #142: #U94(tt(),V1,V2) -> #isNat(activate(V1))
   #143: #U94(tt(),V1,V2) -> #activate(V1)
   #144: #U94(tt(),V1,V2) -> #activate(V2)
   #145: #take(0(),IL) -> #U121(isNatIList(IL),IL)
   #146: #take(0(),IL) -> #isNatIList(IL)
   #147: #U136(tt(),IL,M,N) -> #cons(activate(N),n__take(activate(M),activate(IL)))
   #148: #U136(tt(),IL,M,N) -> #activate(N)
   #149: #U136(tt(),IL,M,N) -> #activate(M)
   #150: #U136(tt(),IL,M,N) -> #activate(IL)
   #151: #U32(tt(),V) -> #U33(isNatList(activate(V)))
   #152: #U32(tt(),V) -> #isNatList(activate(V))
   #153: #U32(tt(),V) -> #activate(V)
   #154: #U131(tt(),IL,M,N) -> #U132(isNatIListKind(activate(IL)),activate(IL),activate(M),activate(N))
   #155: #U131(tt(),IL,M,N) -> #isNatIListKind(activate(IL))
   #156: #U131(tt(),IL,M,N) -> #activate(IL)
   #157: #U131(tt(),IL,M,N) -> #activate(IL)
   #158: #U131(tt(),IL,M,N) -> #activate(M)
   #159: #U131(tt(),IL,M,N) -> #activate(N)
   #160: #U44(tt(),V1,V2) -> #U45(isNat(activate(V1)),activate(V2))
   #161: #U44(tt(),V1,V2) -> #isNat(activate(V1))
   #162: #U44(tt(),V1,V2) -> #activate(V1)
   #163: #U44(tt(),V1,V2) -> #activate(V2)
   #164: #U133(tt(),IL,M,N) -> #U134(isNatKind(activate(M)),activate(IL),activate(M),activate(N))
   #165: #U133(tt(),IL,M,N) -> #isNatKind(activate(M))
   #166: #U133(tt(),IL,M,N) -> #activate(M)
   #167: #U133(tt(),IL,M,N) -> #activate(IL)
   #168: #U133(tt(),IL,M,N) -> #activate(M)
   #169: #U133(tt(),IL,M,N) -> #activate(N)
   #170: #length(nil()) -> #0()
   #171: #U31(tt(),V) -> #U32(isNatIListKind(activate(V)),activate(V))
   #172: #U31(tt(),V) -> #isNatIListKind(activate(V))
   #173: #U31(tt(),V) -> #activate(V)
   #174: #U31(tt(),V) -> #activate(V)
   #175: #U135(tt(),IL,M,N) -> #U136(isNatKind(activate(N)),activate(IL),activate(M),activate(N))
   #176: #U135(tt(),IL,M,N) -> #isNatKind(activate(N))
   #177: #U135(tt(),IL,M,N) -> #activate(N)
   #178: #U135(tt(),IL,M,N) -> #activate(IL)
   #179: #U135(tt(),IL,M,N) -> #activate(M)
   #180: #U135(tt(),IL,M,N) -> #activate(N)
   #181: #U102(tt(),V1,V2) -> #U103(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #182: #U102(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #183: #U102(tt(),V1,V2) -> #activate(V2)
   #184: #U102(tt(),V1,V2) -> #activate(V1)
   #185: #U102(tt(),V1,V2) -> #activate(V2)
   #186: #activate(n__length(X)) -> #length(X)
   #187: #zeros() -> #cons(0(),n__zeros())
   #188: #zeros() -> #0()
   #189: #U11(tt(),V1) -> #U12(isNatIListKind(activate(V1)),activate(V1))
   #190: #U11(tt(),V1) -> #isNatIListKind(activate(V1))
   #191: #U11(tt(),V1) -> #activate(V1)
   #192: #U11(tt(),V1) -> #activate(V1)
   #193: #U122(tt()) -> #nil()
   #194: #U103(tt(),V1,V2) -> #U104(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #195: #U103(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #196: #U103(tt(),V1,V2) -> #activate(V2)
   #197: #U103(tt(),V1,V2) -> #activate(V1)
   #198: #U103(tt(),V1,V2) -> #activate(V2)
   #199: #activate(n__nil()) -> #nil()
   #200: #isNatIList(V) -> #U31(isNatIListKind(activate(V)),activate(V))
   #201: #isNatIList(V) -> #isNatIListKind(activate(V))
   #202: #isNatIList(V) -> #activate(V)
   #203: #isNatIList(V) -> #activate(V)
   #204: #U132(tt(),IL,M,N) -> #U133(isNat(activate(M)),activate(IL),activate(M),activate(N))
   #205: #U132(tt(),IL,M,N) -> #isNat(activate(M))
   #206: #U132(tt(),IL,M,N) -> #activate(M)
   #207: #U132(tt(),IL,M,N) -> #activate(IL)
   #208: #U132(tt(),IL,M,N) -> #activate(M)
   #209: #U132(tt(),IL,M,N) -> #activate(N)
Number of SCCs: 1, DPs: 187, edges: 676
	SCC { #1..15 #17..32 #34..40 #43..49 #51 #52 #54..59 #61..71 #74..79 #82 #83 #85..91 #93..96 #98..133 #135..146 #148..150 #152..169 #171..186 #189..192 #194..198 #200..209 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #U32(x1,x2)	weight: (/ 3 16) + x1 + x2
#isNatIListKind(x1)	weight: (/ 1 16) + x1
isNatKind(x1)	weight: (/ 9 16)
   U21(x1,x2)	weight: (/ 1 8)
 #U96(x1)	weight: 0
isNatList(x1)	weight: (/ 1 16)
   U11(x1,x2)	weight: (/ 1 8)
  U136(x1,x2,x3,x4)	weight: (/ 9 16) + x2 + x3 + x4
 #U94(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
  U105(x1,x2)	weight: (/ 1 16) + x1
#isNat(x1)	weight: (/ 1 16) + x1
  U106(x1)	weight: x1
#take(x1,x2)	weight: (/ 1 2) + x1 + x2
   U42(x1,x2,x3)	weight: (/ 1 16)
   U91(x1,x2,x3)	weight: x1 + x2
#U101(x1,x2,x3)	weight: (/ 11 16) + x2 + x3
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 9 16) + x1 + x2
#U104(x1,x2,x3)	weight: (/ 9 16) + x2 + x3
   U71(x1)	weight: (/ 1 2) + x1
 #U81(x1)	weight: 0
 #U92(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
#U133(x1,x2,x3,x4)	weight: (/ 1 16) + x2 + x3 + x4
  U131(x1,x2,x3,x4)	weight: (/ 9 16) + x2 + x3 + x4
n__zeros()	weight: 0
isNatIList(x1)	weight: (/ 7 16)
  U135(x1,x2,x3,x4)	weight: (/ 9 16) + x2 + x3 + x4
  U101(x1,x2,x3)	weight: (/ 1 8)
   U95(x1,x2)	weight: (/ 1 8)
#U136(x1,x2,x3,x4)	weight: (/ 1 16) + x2 + x3 + x4
  U111(x1,x2,x3)	weight: (/ 3 8) + x2
  U132(x1,x2,x3,x4)	weight: (/ 9 16) + x2 + x3 + x4
   U43(x1,x2,x3)	weight: x1
 #U93(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
#activate(x1)	weight: x1
  U103(x1,x2,x3)	weight: x1
 #U23(x1)	weight: 0
   U44(x1,x2,x3)	weight: 0
 #U43(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
#U106(x1)	weight: 0
#U121(x1,x2)	weight: (/ 1 16) + x2
   U23(x1)	weight: (/ 1 4)
   U93(x1,x2,x3)	weight: (/ 1 16)
#U114(x1,x2)	weight: (/ 3 16) + x2
#U131(x1,x2,x3,x4)	weight: (/ 1 16) + x1 + x2 + x3 + x4
 #U13(x1)	weight: 0
   U94(x1,x2,x3)	weight: (/ 1 16) + x1 + x2
 zeros()	weight: 0
 #U95(x1,x2)	weight: (/ 1 8) + x2
n__nil()	weight: 0
 #U52(x1)	weight: 0
#U103(x1,x2,x3)	weight: (/ 5 8) + x2 + x3
   U12(x1,x2)	weight: (/ 3 16)
 #U33(x1)	weight: 0
#U135(x1,x2,x3,x4)	weight: (/ 1 16) + x2 + x3 + x4
 #U44(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
  n__s(x1)	weight: x1
  U104(x1,x2,x3)	weight: (/ 1 16) + x3
 #U42(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
  U113(x1,x2,x3)	weight: (/ 3 8) + x2
 #U12(x1,x2)	weight: (/ 3 16) + x1 + x2
 #U62(x1)	weight: 0
     0()	weight: 0
#zeros()	weight: 0
  U134(x1,x2,x3,x4)	weight: (/ 9 16) + x2 + x3 + x4
n__take(x1,x2)	weight: (/ 9 16) + x1 + x2
#isNatList(x1)	weight: (/ 1 8) + x1
#U102(x1,x2,x3)	weight: (/ 11 16) + x2 + x3
   #s(x1)	weight: 0
#U105(x1,x2)	weight: (/ 1 2) + x2
n__cons(x1,x2)	weight: x1 + x2
isNatIListKind(x1)	weight: (/ 1 16)
   nil()	weight: 0
  U114(x1,x2)	weight: (/ 3 8) + x2
   U62(x1)	weight: 0
   U45(x1,x2)	weight: 0
 #nil()	weight: 0
  U133(x1,x2,x3,x4)	weight: (/ 9 16) + x2 + x3 + x4
#U111(x1,x2,x3)	weight: (/ 3 16) + x2 + x3
   U32(x1,x2)	weight: 0
   U33(x1)	weight: 0
  n__0()	weight: 0
n__length(x1)	weight: (/ 3 8) + x1
 #U46(x1)	weight: 0
 isNat(x1)	weight: (/ 1 16)
   U46(x1)	weight: 0
   U52(x1)	weight: x1
   U61(x1,x2)	weight: 0
 #U51(x1,x2)	weight: (/ 1 16) + x2
#U134(x1,x2,x3,x4)	weight: (/ 1 16) + x2 + x3 + x4
#U113(x1,x2,x3)	weight: (/ 3 16) + x2 + x3
 #U11(x1,x2)	weight: (/ 5 16) + x1 + x2
   U96(x1)	weight: (/ 3 16)
   U31(x1,x2)	weight: 0
   U92(x1,x2,x3)	weight: x1
  U112(x1,x2,x3)	weight: (/ 3 8) + x2
 #U41(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
  cons(x1,x2)	weight: x1 + x2
  U102(x1,x2,x3)	weight: x1 + x2
#isNatIList(x1)	weight: (/ 7 16) + x1
 #U21(x1,x2)	weight: (/ 1 16) + x2
   U81(x1)	weight: x1
 #U22(x1,x2)	weight: (/ 1 16) + x2
#U112(x1,x2,x3)	weight: (/ 3 16) + x2 + x3
    tt()	weight: 0
 #U71(x1)	weight: 0
   U13(x1)	weight: (/ 3 16) + x1
   U22(x1,x2)	weight: (/ 3 16)
 #U45(x1,x2)	weight: (/ 7 16) + x2
   U51(x1,x2)	weight: (/ 1 16)
#isNatKind(x1)	weight: (/ 1 16) + x1
#U122(x1)	weight: 0
length(x1)	weight: (/ 3 8) + x1
#length(x1)	weight: (/ 3 16) + x1
   U41(x1,x2,x3)	weight: (/ 1 16)
 #U31(x1,x2)	weight: (/ 5 16) + x1 + x2
 #U91(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
#U132(x1,x2,x3,x4)	weight: (/ 1 16) + x2 + x3 + x4
  U121(x1,x2)	weight: x2
 #U61(x1,x2)	weight: (/ 1 16) + x1 + x2
  U122(x1)	weight: 0
    Usable rules: { 1 9..12 14 15 17..22 26..40 50..59 63..81 }
    Removed DPs: #2..5 #7..10 #12..15 #18 #20..22 #24..27 #29..32 #35..40 #43 #44 #46..49 #51 #52 #55 #58 #59 #61 #62 #64..67 #69..71 #75 #78 #79 #83 #86 #88..91 #94..96 #99 #101..104 #106..109 #111..114 #117 #118 #121..124 #126..129 #131..133 #136..140 #142..146 #148..150 #152 #153 #156..159 #161..163 #166..169 #171..174 #177..186 #189..192 #194..198 #200..203 #206..209
Number of SCCs: 6, DPs: 25, edges: 27
	SCC { #54 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... succeeded.
   #0()	weight: 0; 0
 #U32(x1,x2)	weight: 0; 0
#isNatIListKind(x1)	weight: 0; 0
isNatKind(x1)	weight: x1_1 + x1_2; x1_1 + x1_2
   U21(x1,x2)	weight: (/ 47 8); (/ 87 8) + x1_1 + x1_2
 #U96(x1)	weight: 0; 0
isNatList(x1)	weight: (/ 1 16); (/ 1 16) + x1_2
   U11(x1,x2)	weight: (/ 11 16); (/ 55 8)
  U136(x1,x2,x3,x4)	weight: (/ 233 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
 #U94(x1,x2,x3)	weight: 0; 0
#cons(x1,x2)	weight: 0; 0
     s(x1)	weight: (/ 93 16) + x1_1; (/ 23 4) + x1_2
  U105(x1,x2)	weight: 0; (/ 113 16)
#isNat(x1)	weight: 0; 0
  U106(x1)	weight: 0; (/ 113 16)
#take(x1,x2)	weight: 0; 0
   U42(x1,x2,x3)	weight: (/ 1 4) + x2_1 + x2_2; x3_1 + x1_1
   U91(x1,x2,x3)	weight: (/ 1 16); (/ 1 16) + x3_2
#U101(x1,x2,x3)	weight: 0; 0
activate(x1)	weight: (/ 1 4) + x1_1; x1_2
  take(x1,x2)	weight: (/ 111 16) + x2_1 + x1_1 + x1_2; (/ 113 16) + x2_2
#U104(x1,x2,x3)	weight: 0; 0
   U71(x1)	weight: (/ 11 16); 7
 #U81(x1)	weight: 0; 0
 #U92(x1,x2,x3)	weight: 0; 0
#U133(x1,x2,x3,x4)	weight: 0; 0
  U131(x1,x2,x3,x4)	weight: (/ 293 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
n__zeros()	weight: (/ 1 16); (/ 1 16)
isNatIList(x1)	weight: (/ 1 2); 0
  U135(x1,x2,x3,x4)	weight: (/ 245 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
  U101(x1,x2,x3)	weight: 0; (/ 113 16)
   U95(x1,x2)	weight: 0; (/ 1 16) + x2_2
#U136(x1,x2,x3,x4)	weight: 0; 0
  U111(x1,x2,x3)	weight: x3_2 + x2_1 + x1_2; (/ 1 4) + x2_1 + x1_1 + x1_2
  U132(x1,x2,x3,x4)	weight: (/ 281 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
   U43(x1,x2,x3)	weight: x3_1; x2_2
 #U93(x1,x2,x3)	weight: 0; 0
#activate(x1)	weight: 0; 0
  U103(x1,x2,x3)	weight: 0; (/ 113 16)
 #U23(x1)	weight: 0; 0
   U44(x1,x2,x3)	weight: (/ 1 16) + x3_2; x2_2
 #U43(x1,x2,x3)	weight: 0; 0
#U106(x1)	weight: 0; 0
#U121(x1,x2)	weight: 0; 0
   U23(x1)	weight: (/ 197 16); (/ 199 8)
   U93(x1,x2,x3)	weight: (/ 1 16); (/ 1 16) + x3_2
#U114(x1,x2)	weight: 0; 0
#U131(x1,x2,x3,x4)	weight: 0; 0
 #U13(x1)	weight: 0; 0
   U94(x1,x2,x3)	weight: 0; (/ 1 16) + x3_2
 zeros()	weight: (/ 5 16); (/ 1 16)
 #U95(x1,x2)	weight: 0; 0
n__nil()	weight: (/ 1 16); 7
 #U52(x1)	weight: 0; 0
#U103(x1,x2,x3)	weight: 0; 0
   U12(x1,x2)	weight: (/ 1 2) + x2_1 + x2_2; (/ 111 16)
 #U33(x1)	weight: 0; 0
#U135(x1,x2,x3,x4)	weight: 0; 0
 #U44(x1,x2,x3)	weight: 0; 0
  n__s(x1)	weight: (/ 89 16) + x1_1; (/ 23 4) + x1_2
  U104(x1,x2,x3)	weight: 0; (/ 113 16)
 #U42(x1,x2,x3)	weight: 0; 0
  U113(x1,x2,x3)	weight: (/ 105 16) + x2_1; (/ 109 16) + x2_1
 #U12(x1,x2)	weight: 0; 0
 #U62(x1)	weight: 0; 0
     0()	weight: (/ 1 16); (/ 1 16)
#zeros()	weight: 0; 0
  U134(x1,x2,x3,x4)	weight: (/ 257 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
n__take(x1,x2)	weight: (/ 107 16) + x2_1 + x1_1 + x1_2; (/ 113 16) + x2_2
#isNatList(x1)	weight: 0; 0
#U102(x1,x2,x3)	weight: 0; 0
   #s(x1)	weight: 0; 0
#U105(x1,x2)	weight: 0; 0
n__cons(x1,x2)	weight: (/ 1 16) + x2_1 + x2_2 + x1_1 + x1_2; x2_2
isNatIListKind(x1)	weight: (/ 113 16); (/ 113 16)
   nil()	weight: (/ 1 16); 7
  U114(x1,x2)	weight: (/ 101 16) + x2_1; (/ 105 16) + x2_1
   U62(x1)	weight: 0; x1_2
   U45(x1,x2)	weight: (/ 1 8) + x2_2; x1_2
 #nil()	weight: 0; 0
  U133(x1,x2,x3,x4)	weight: (/ 269 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
#U111(x1,x2,x3)	weight: 0; 0
   U32(x1,x2)	weight: (/ 5 8) + x2_2; (/ 111 16) + x2_1
   U33(x1)	weight: (/ 11 16); 7
  n__0()	weight: (/ 1 16); (/ 1 16)
n__length(x1)	weight: (/ 1 16) + x1_1; (/ 9 16) + x1_1
 #U46(x1)	weight: 0; 0
 isNat(x1)	weight: (/ 1 16) + x1_2; x1_1 + x1_2
   U46(x1)	weight: 0; (/ 113 16)
   U52(x1)	weight: x1_2; (/ 113 16)
   U61(x1,x2)	weight: 0; (/ 113 16)
 #U51(x1,x2)	weight: 0; 0
#U134(x1,x2,x3,x4)	weight: 0; 0
#U113(x1,x2,x3)	weight: 0; 0
 #U11(x1,x2)	weight: 0; 0
   U96(x1)	weight: 0; x1_2
   U31(x1,x2)	weight: (/ 9 16); x2_1
   U92(x1,x2,x3)	weight: (/ 1 16); (/ 1 16) + x3_2
  U112(x1,x2,x3)	weight: (/ 109 16) + x2_1; x2_1 + x1_2
 #U41(x1,x2,x3)	weight: 0; 0
  cons(x1,x2)	weight: (/ 1 16) + x2_1 + x2_2 + x1_1 + x1_2; x2_2
  U102(x1,x2,x3)	weight: 0; (/ 113 16)
#isNatIList(x1)	weight: 0; 0
 #U21(x1,x2)	weight: 0; 0
   U81(x1)	weight: (/ 91 8); (/ 91 8)
 #U22(x1,x2)	weight: 0; 0
#U112(x1,x2,x3)	weight: 0; 0
    tt()	weight: 0; (/ 113 16)
 #U71(x1)	weight: 0; 0
   U13(x1)	weight: (/ 9 16); 7
   U22(x1,x2)	weight: (/ 83 16) + x2_1 + x1_1 + x1_2; (/ 71 4) + x1_2
 #U45(x1,x2)	weight: 0; 0
   U51(x1,x2)	weight: (/ 113 16); (/ 113 16)
#isNatKind(x1)	weight: x1_1; 0
#U122(x1)	weight: 0; 0
length(x1)	weight: (/ 1 4) + x1_1; (/ 9 16) + x1_1
#length(x1)	weight: 0; 0
   U41(x1,x2,x3)	weight: (/ 1 2); 0
 #U31(x1,x2)	weight: 0; 0
 #U91(x1,x2,x3)	weight: 0; 0
#U132(x1,x2,x3,x4)	weight: 0; 0
  U121(x1,x2)	weight: (/ 113 16); (/ 113 16)
 #U61(x1,x2)	weight: 0; 0
  U122(x1)	weight: x1_2; x1_2
    Usable rules: { 1..7 9..12 14 15 17..22 33..38 41..46 53..56 60..81 }
    Removed DPs: #54
Number of SCCs: 5, DPs: 24, edges: 26
	SCC { #74 #76 #115 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... succeeded.
   #0()	weight: 0; 0
 #U32(x1,x2)	weight: 0; 0
#isNatIListKind(x1)	weight: 0; 0
isNatKind(x1)	weight: x1_1 + x1_2; x1_1 + x1_2
   U21(x1,x2)	weight: (/ 47 8); (/ 87 8) + x1_1 + x1_2
 #U96(x1)	weight: 0; 0
isNatList(x1)	weight: (/ 1 16); (/ 1 16) + x1_2
   U11(x1,x2)	weight: (/ 11 16); (/ 55 8)
  U136(x1,x2,x3,x4)	weight: (/ 233 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
 #U94(x1,x2,x3)	weight: 0; 0
#cons(x1,x2)	weight: 0; 0
     s(x1)	weight: (/ 93 16) + x1_1; (/ 23 4) + x1_2
  U105(x1,x2)	weight: 0; (/ 113 16)
#isNat(x1)	weight: x1_1; x1_1
  U106(x1)	weight: 0; (/ 113 16)
#take(x1,x2)	weight: 0; 0
   U42(x1,x2,x3)	weight: (/ 1 4) + x2_1 + x2_2; x3_1 + x1_1
   U91(x1,x2,x3)	weight: (/ 1 16); (/ 1 16) + x3_2
#U101(x1,x2,x3)	weight: 0; 0
activate(x1)	weight: (/ 1 4) + x1_1; x1_2
  take(x1,x2)	weight: (/ 111 16) + x2_1 + x1_1 + x1_2; (/ 113 16) + x2_2
#U104(x1,x2,x3)	weight: 0; 0
   U71(x1)	weight: (/ 11 16); 7
 #U81(x1)	weight: 0; 0
 #U92(x1,x2,x3)	weight: 0; 0
#U133(x1,x2,x3,x4)	weight: 0; 0
  U131(x1,x2,x3,x4)	weight: (/ 293 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
n__zeros()	weight: (/ 1 16); (/ 1 16)
isNatIList(x1)	weight: (/ 1 2); 0
  U135(x1,x2,x3,x4)	weight: (/ 245 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
  U101(x1,x2,x3)	weight: 0; (/ 113 16)
   U95(x1,x2)	weight: 0; (/ 1 16) + x2_2
#U136(x1,x2,x3,x4)	weight: 0; 0
  U111(x1,x2,x3)	weight: x3_2 + x2_1 + x1_2; (/ 1 4) + x2_1 + x1_1 + x1_2
  U132(x1,x2,x3,x4)	weight: (/ 281 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
   U43(x1,x2,x3)	weight: x3_1; x2_2
 #U93(x1,x2,x3)	weight: 0; 0
#activate(x1)	weight: 0; 0
  U103(x1,x2,x3)	weight: 0; (/ 113 16)
 #U23(x1)	weight: 0; 0
   U44(x1,x2,x3)	weight: (/ 1 16) + x3_2; x2_2
 #U43(x1,x2,x3)	weight: 0; 0
#U106(x1)	weight: 0; 0
#U121(x1,x2)	weight: 0; 0
   U23(x1)	weight: (/ 197 16); (/ 199 8)
   U93(x1,x2,x3)	weight: (/ 1 16); (/ 1 16) + x3_2
#U114(x1,x2)	weight: 0; 0
#U131(x1,x2,x3,x4)	weight: 0; 0
 #U13(x1)	weight: 0; 0
   U94(x1,x2,x3)	weight: 0; (/ 1 16) + x3_2
 zeros()	weight: (/ 5 16); (/ 1 16)
 #U95(x1,x2)	weight: 0; 0
n__nil()	weight: (/ 1 16); 7
 #U52(x1)	weight: 0; 0
#U103(x1,x2,x3)	weight: 0; 0
   U12(x1,x2)	weight: (/ 1 2) + x2_1 + x2_2; (/ 111 16)
 #U33(x1)	weight: 0; 0
#U135(x1,x2,x3,x4)	weight: 0; 0
 #U44(x1,x2,x3)	weight: 0; 0
  n__s(x1)	weight: (/ 89 16) + x1_1; (/ 23 4) + x1_2
  U104(x1,x2,x3)	weight: 0; (/ 113 16)
 #U42(x1,x2,x3)	weight: 0; 0
  U113(x1,x2,x3)	weight: (/ 105 16) + x2_1; (/ 109 16) + x2_1
 #U12(x1,x2)	weight: 0; 0
 #U62(x1)	weight: 0; 0
     0()	weight: (/ 1 16); (/ 1 16)
#zeros()	weight: 0; 0
  U134(x1,x2,x3,x4)	weight: (/ 257 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
n__take(x1,x2)	weight: (/ 107 16) + x2_1 + x1_1 + x1_2; (/ 113 16) + x2_2
#isNatList(x1)	weight: 0; 0
#U102(x1,x2,x3)	weight: 0; 0
   #s(x1)	weight: 0; 0
#U105(x1,x2)	weight: 0; 0
n__cons(x1,x2)	weight: (/ 1 16) + x2_1 + x2_2 + x1_1 + x1_2; x2_2
isNatIListKind(x1)	weight: (/ 113 16); (/ 113 16)
   nil()	weight: (/ 1 16); 7
  U114(x1,x2)	weight: (/ 101 16) + x2_1; (/ 105 16) + x2_1
   U62(x1)	weight: 0; x1_2
   U45(x1,x2)	weight: (/ 1 8) + x2_2; x1_2
 #nil()	weight: 0; 0
  U133(x1,x2,x3,x4)	weight: (/ 269 16) + x4_1 + x4_2 + x3_1 + x3_2 + x2_1 + x2_2; (/ 113 16) + x2_2
#U111(x1,x2,x3)	weight: 0; 0
   U32(x1,x2)	weight: (/ 5 8) + x2_2; (/ 111 16) + x2_1
   U33(x1)	weight: (/ 11 16); 7
  n__0()	weight: (/ 1 16); (/ 1 16)
n__length(x1)	weight: (/ 1 16) + x1_1; (/ 9 16) + x1_1
 #U46(x1)	weight: 0; 0
 isNat(x1)	weight: (/ 1 16) + x1_2; x1_1 + x1_2
   U46(x1)	weight: 0; (/ 113 16)
   U52(x1)	weight: x1_2; (/ 113 16)
   U61(x1,x2)	weight: 0; (/ 113 16)
 #U51(x1,x2)	weight: 0; 0
#U134(x1,x2,x3,x4)	weight: 0; 0
#U113(x1,x2,x3)	weight: 0; 0
 #U11(x1,x2)	weight: 0; 0
   U96(x1)	weight: 0; x1_2
   U31(x1,x2)	weight: (/ 9 16); x2_1
   U92(x1,x2,x3)	weight: (/ 1 16); (/ 1 16) + x3_2
  U112(x1,x2,x3)	weight: (/ 109 16) + x2_1; x2_1 + x1_2
 #U41(x1,x2,x3)	weight: 0; 0
  cons(x1,x2)	weight: (/ 1 16) + x2_1 + x2_2 + x1_1 + x1_2; x2_2
  U102(x1,x2,x3)	weight: 0; (/ 113 16)
#isNatIList(x1)	weight: 0; 0
 #U21(x1,x2)	weight: (/ 5 8) + x2_1; (/ 1 2) + x2_1
   U81(x1)	weight: (/ 91 8); (/ 91 8)
 #U22(x1,x2)	weight: (/ 5 16) + x2_1; (/ 1 4) + x2_1
#U112(x1,x2,x3)	weight: 0; 0
    tt()	weight: 0; (/ 113 16)
 #U71(x1)	weight: 0; 0
   U13(x1)	weight: (/ 9 16); 7
   U22(x1,x2)	weight: (/ 83 16) + x2_1 + x1_1 + x1_2; (/ 71 4) + x1_2
 #U45(x1,x2)	weight: 0; 0
   U51(x1,x2)	weight: (/ 113 16); (/ 113 16)
#isNatKind(x1)	weight: x1_1; 0
#U122(x1)	weight: 0; 0
length(x1)	weight: (/ 1 4) + x1_1; (/ 9 16) + x1_1
#length(x1)	weight: 0; 0
   U41(x1,x2,x3)	weight: (/ 1 2); 0
 #U31(x1,x2)	weight: 0; 0
 #U91(x1,x2,x3)	weight: 0; 0
#U132(x1,x2,x3,x4)	weight: 0; 0
  U121(x1,x2)	weight: (/ 113 16); (/ 113 16)
 #U61(x1,x2)	weight: 0; 0
  U122(x1)	weight: x1_2; x1_2
    Usable rules: { 1..7 9..12 14 15 17..22 33..38 41..46 53..56 60..81 }
    Removed DPs: #74 #76 #115
Number of SCCs: 4, DPs: 21, edges: 23
	SCC { #17 #34 #56 #93 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #U32(x1,x2)	weight: (/ 3 16)
#isNatIListKind(x1)	weight: (/ 1 16) + x1
isNatKind(x1)	weight: (/ 1 16)
   U21(x1,x2)	weight: (/ 1 8)
 #U96(x1)	weight: 0
isNatList(x1)	weight: (/ 1 16)
   U11(x1,x2)	weight: (/ 1 8)
  U136(x1,x2,x3,x4)	weight: (/ 1 8) + x2 + x3 + x4
 #U94(x1,x2,x3)	weight: (/ 1 8)
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
  U105(x1,x2)	weight: (/ 1 8) + x1 + x2
#isNat(x1)	weight: (/ 1 16)
  U106(x1)	weight: (/ 3 16)
#take(x1,x2)	weight: (/ 1 2)
   U42(x1,x2,x3)	weight: (/ 1 8) + x3
   U91(x1,x2,x3)	weight: (/ 1 16) + x1 + x2
#U101(x1,x2,x3)	weight: (/ 11 16)
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 8) + x1 + x2
#U104(x1,x2,x3)	weight: (/ 9 16)
   U71(x1)	weight: 0
 #U81(x1)	weight: 0
 #U92(x1,x2,x3)	weight: (/ 1 8)
#U133(x1,x2,x3,x4)	weight: (/ 1 16)
  U131(x1,x2,x3,x4)	weight: (/ 1 8) + x2 + x3 + x4
n__zeros()	weight: 0
isNatIList(x1)	weight: (/ 7 16)
  U135(x1,x2,x3,x4)	weight: (/ 1 8) + x2 + x3 + x4
  U101(x1,x2,x3)	weight: (/ 1 8)
   U95(x1,x2)	weight: (/ 3 16) + x2
#U136(x1,x2,x3,x4)	weight: (/ 1 16)
  U111(x1,x2,x3)	weight: (/ 1 16)
  U132(x1,x2,x3,x4)	weight: (/ 1 8) + x2 + x3 + x4
   U43(x1,x2,x3)	weight: (/ 1 16) + x1 + x3
 #U93(x1,x2,x3)	weight: (/ 1 8)
#activate(x1)	weight: 0
  U103(x1,x2,x3)	weight: (/ 1 8) + x1 + x2 + x3
 #U23(x1)	weight: 0
   U44(x1,x2,x3)	weight: x1
 #U43(x1,x2,x3)	weight: (/ 7 16)
#U106(x1)	weight: 0
#U121(x1,x2)	weight: (/ 1 16)
   U23(x1)	weight: (/ 1 4)
   U93(x1,x2,x3)	weight: (/ 1 8) + x2
#U114(x1,x2)	weight: (/ 3 16)
#U131(x1,x2,x3,x4)	weight: (/ 1 16)
 #U13(x1)	weight: 0
   U94(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
 zeros()	weight: 0
 #U95(x1,x2)	weight: (/ 1 8)
n__nil()	weight: 0
 #U52(x1)	weight: 0
#U103(x1,x2,x3)	weight: (/ 5 8)
   U12(x1,x2)	weight: (/ 3 16) + x2
 #U33(x1)	weight: 0
#U135(x1,x2,x3,x4)	weight: (/ 1 16)
 #U44(x1,x2,x3)	weight: (/ 7 16)
  n__s(x1)	weight: x1
  U104(x1,x2,x3)	weight: (/ 1 8) + x1 + x3
 #U42(x1,x2,x3)	weight: (/ 7 16)
  U113(x1,x2,x3)	weight: (/ 1 16)
 #U12(x1,x2)	weight: (/ 3 16)
 #U62(x1)	weight: 0
     0()	weight: 0
#zeros()	weight: 0
  U134(x1,x2,x3,x4)	weight: (/ 1 8) + x2 + x3 + x4
n__take(x1,x2)	weight: (/ 1 8) + x1 + x2
#isNatList(x1)	weight: (/ 1 8)
#U102(x1,x2,x3)	weight: (/ 11 16)
   #s(x1)	weight: 0
#U105(x1,x2)	weight: (/ 1 2)
n__cons(x1,x2)	weight: x1 + x2
isNatIListKind(x1)	weight: (/ 1 16)
   nil()	weight: 0
  U114(x1,x2)	weight: (/ 1 16)
   U62(x1)	weight: (/ 3 16)
   U45(x1,x2)	weight: 0
 #nil()	weight: 0
  U133(x1,x2,x3,x4)	weight: (/ 1 8) + x2 + x3 + x4
#U111(x1,x2,x3)	weight: (/ 3 16)
   U32(x1,x2)	weight: (/ 1 16) + x1
   U33(x1)	weight: x1
  n__0()	weight: 0
n__length(x1)	weight: (/ 1 16)
 #U46(x1)	weight: 0
 isNat(x1)	weight: (/ 1 16)
   U46(x1)	weight: 0
   U52(x1)	weight: (/ 1 8) + x1
   U61(x1,x2)	weight: (/ 1 8)
 #U51(x1,x2)	weight: (/ 1 16) + x2
#U134(x1,x2,x3,x4)	weight: (/ 1 16)
#U113(x1,x2,x3)	weight: (/ 3 16)
 #U11(x1,x2)	weight: (/ 5 16)
   U96(x1)	weight: (/ 3 16) + x1
   U31(x1,x2)	weight: (/ 1 8)
   U92(x1,x2,x3)	weight: (/ 1 16) + x1 + x2 + x3
  U112(x1,x2,x3)	weight: (/ 1 16)
 #U41(x1,x2,x3)	weight: (/ 7 16)
  cons(x1,x2)	weight: x1 + x2
  U102(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
#isNatIList(x1)	weight: (/ 7 16)
 #U21(x1,x2)	weight: (/ 1 16)
   U81(x1)	weight: x1
 #U22(x1,x2)	weight: (/ 1 16)
#U112(x1,x2,x3)	weight: (/ 3 16)
    tt()	weight: 0
 #U71(x1)	weight: 0
   U13(x1)	weight: (/ 3 16) + x1
   U22(x1,x2)	weight: (/ 3 16) + x2
 #U45(x1,x2)	weight: (/ 7 16)
   U51(x1,x2)	weight: (/ 1 8)
#isNatKind(x1)	weight: (/ 1 16)
#U122(x1)	weight: 0
length(x1)	weight: (/ 1 16)
#length(x1)	weight: (/ 3 16)
   U41(x1,x2,x3)	weight: (/ 1 8)
 #U31(x1,x2)	weight: (/ 5 16)
 #U91(x1,x2,x3)	weight: (/ 1 8)
#U132(x1,x2,x3,x4)	weight: (/ 1 16)
  U121(x1,x2)	weight: (/ 1 8) + x2
 #U61(x1,x2)	weight: (/ 1 8) + x2
  U122(x1)	weight: (/ 1 8)
    Usable rules: { 1 9..12 14 15 17..22 28 32..34 39 40 51 57..59 63..81 }
    Removed DPs: #34 #93
Number of SCCs: 4, DPs: 19, edges: 19
	SCC { #17 #56 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
