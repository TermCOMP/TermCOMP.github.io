Input TRS:
    1: incr(nil()) -> nil()
    2: incr(cons(X,L)) -> cons(s(X),incr(L))
    3: adx(nil()) -> nil()
    4: adx(cons(X,L)) -> incr(cons(X,adx(L)))
    5: nats() -> adx(zeros())
    6: zeros() -> cons(0(),zeros())
    7: head(cons(X,L)) -> X
    8: tail(cons(X,L)) -> L
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... removes: 8 7
  incr(x1)	weight: x1
     s(x1)	weight: x1
   adx(x1)	weight: x1
 zeros()	weight: 0
  tail(x1)	weight: (/ 1 2) + 2 * x1
     0()	weight: 0
   nil()	weight: 0
  nats()	weight: 0
  head(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: 2 * x1 + x2
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing incr
1: incr❆1_nil() -> nil()
2: incr❆1_cons(X,L) -> cons(s(X),incr(L))
3: adx(nil()) -> nil()
4: adx(cons(X,L)) -> incr❆1_cons(X,adx(L))
5: nats() -> adx(zeros())
6: zeros() -> cons(0(),zeros())
9: incr(cons(_1,_2)) ->= incr❆1_cons(_1,_2)
10: incr(nil()) ->= incr❆1_nil()
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #incr❆1_cons(X,L) -> #incr(L)
   #2: #zeros() -> #zeros()
   #3: #incr(cons(_1,_2)) ->? #incr❆1_cons(_1,_2)
   #4: #incr(nil()) ->? #incr❆1_nil()
   #5: #nats() -> #adx(zeros())
   #6: #nats() -> #zeros()
   #7: #adx(cons(X,L)) -> #incr❆1_cons(X,adx(L))
   #8: #adx(cons(X,L)) -> #adx(L)
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #zeros()	-#2->
  #zeros()	--->*
  #zeros()
  Looping with: [ ]
