Input TRS:
    1: sort(nil()) -> nil()
    2: sort(cons(x,y)) -> insert(x,sort(y))
    3: insert(x,nil()) -> cons(x,nil())
    4: insert(x,cons(v,w)) -> choose(x,cons(v,w),x,v)
    5: choose(x,cons(v,w),y,0()) -> cons(x,cons(v,w))
    6: choose(x,cons(v,w),0(),s(z)) -> cons(v,insert(x,w))
    7: choose(x,cons(v,w),s(y),s(z)) -> choose(x,cons(v,w),y,z)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #sort(cons(x,y)) -> #insert(x,sort(y))
   #2: #sort(cons(x,y)) -> #sort(y)
   #3: #choose(x,cons(v,w),0(),s(z)) -> #insert(x,w)
   #4: #choose(x,cons(v,w),s(y),s(z)) -> #choose(x,cons(v,w),y,z)
   #5: #insert(x,cons(v,w)) -> #choose(x,cons(v,w),x,v)
Number of SCCs: 2, DPs: 4, edges: 6
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#insert(x1,x2)	weight: 0
     s(x1)	weight: 0
insert(x1,x2)	weight: 0
#choose(x1,x2,x3,x4)	weight: 0
#sort(x1)	weight: x1
     0()	weight: 0
   nil()	weight: 0
  sort(x1)	weight: 0
choose(x1,x2,x3,x4)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #3..5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#insert(x1,x2)	weight: (/ 1 4) + x2
     s(x1)	weight: (/ 1 4)
insert(x1,x2)	weight: 0
#choose(x1,x2,x3,x4)	weight: x2
#sort(x1)	weight: 0
     0()	weight: 0
   nil()	weight: 0
  sort(x1)	weight: 0
choose(x1,x2,x3,x4)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
    Usable rules: { }
    Removed DPs: #3 #5
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#insert(x1,x2)	weight: (/ 1 4)
     s(x1)	weight: (/ 1 4) + x1
insert(x1,x2)	weight: 0
#choose(x1,x2,x3,x4)	weight: x4
#sort(x1)	weight: 0
     0()	weight: 0
   nil()	weight: 0
  sort(x1)	weight: 0
choose(x1,x2,x3,x4)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 0, DPs: 0, edges: 0
