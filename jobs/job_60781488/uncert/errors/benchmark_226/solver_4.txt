Input TRS:
    1: eq(0(),0()) -> true()
    2: eq(0(),s(y)) -> false()
    3: eq(s(x),0()) -> false()
    4: eq(s(x),s(y)) -> eq(x,y)
    5: lt(0(),s(y)) -> true()
    6: lt(x,0()) -> false()
    7: lt(s(x),s(y)) -> lt(x,y)
    8: bin2s(nil()) -> 0()
    9: bin2s(cons(x,xs)) -> bin2ss(x,xs)
    10: bin2ss(x,nil()) -> x
    11: bin2ss(x,cons(0(),xs)) -> bin2ss(double(x),xs)
    12: bin2ss(x,cons(1(),xs)) -> bin2ss(s(double(x)),xs)
    13: half(0()) -> 0()
    14: half(s(0())) -> 0()
    15: half(s(s(x))) -> s(half(x))
    16: log(0()) -> 0()
    17: log(s(0())) -> 0()
    18: log(s(s(x))) -> s(log(half(s(s(x)))))
    19: more(nil()) -> nil()
    20: more(cons(xs,ys)) -> cons(cons(0(),xs),cons(cons(1(),xs),cons(xs,ys)))
    21: s2bin(x) -> s2bin1(x,0(),cons(nil(),nil()))
    22: s2bin1(x,y,lists) -> if1(lt(y,log(x)),x,y,lists)
    23: if1(true(),x,y,lists) -> s2bin1(x,s(y),more(lists))
    24: if1(false(),x,y,lists) -> s2bin2(x,lists)
    25: s2bin2(x,nil()) -> bug_list_not()
    26: s2bin2(x,cons(xs,ys)) -> if2(eq(x,bin2s(xs)),x,xs,ys)
    27: if2(true(),x,xs,ys) -> xs
    28: if2(false(),x,xs,ys) -> s2bin2(x,ys)
Number of strict rules: 28
Direct Order(PosReal,>,Poly) ... failed.
Freezing half
1: eq(0(),0()) -> true()
2: eq(0(),s(y)) -> false()
3: eq(s(x),0()) -> false()
4: eq(s(x),s(y)) -> eq(x,y)
5: lt(0(),s(y)) -> true()
6: lt(x,0()) -> false()
7: lt(s(x),s(y)) -> lt(x,y)
8: bin2s(nil()) -> 0()
9: bin2s(cons(x,xs)) -> bin2ss(x,xs)
10: bin2ss(x,nil()) -> x
11: bin2ss(x,cons(0(),xs)) -> bin2ss(double(x),xs)
12: bin2ss(x,cons(1(),xs)) -> bin2ss(s(double(x)),xs)
13: half❆1_0() -> 0()
14: half❆1_s(0()) -> 0()
15: half❆1_s(s(x)) -> s(half(x))
16: log(0()) -> 0()
17: log(s(0())) -> 0()
18: log(s(s(x))) -> s(log(half❆1_s(s(x))))
19: more(nil()) -> nil()
20: more(cons(xs,ys)) -> cons(cons(0(),xs),cons(cons(1(),xs),cons(xs,ys)))
21: s2bin(x) -> s2bin1(x,0(),cons(nil(),nil()))
22: s2bin1(x,y,lists) -> if1(lt(y,log(x)),x,y,lists)
23: if1(true(),x,y,lists) -> s2bin1(x,s(y),more(lists))
24: if1(false(),x,y,lists) -> s2bin2(x,lists)
25: s2bin2(x,nil()) -> bug_list_not()
26: s2bin2(x,cons(xs,ys)) -> if2(eq(x,bin2s(xs)),x,xs,ys)
27: if2(true(),x,xs,ys) -> xs
28: if2(false(),x,xs,ys) -> s2bin2(x,ys)
29: half(0()) ->= half❆1_0()
30: half(s(_1)) ->= half❆1_s(_1)
Number of strict rules: 28
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #half(0()) ->? #half❆1_0()
   #2: #bin2s(cons(x,xs)) -> #bin2ss(x,xs)
   #3: #bin2ss(x,cons(0(),xs)) -> #bin2ss(double(x),xs)
   #4: #if1(false(),x,y,lists) -> #s2bin2(x,lists)
   #5: #if1(true(),x,y,lists) -> #s2bin1(x,s(y),more(lists))
   #6: #if1(true(),x,y,lists) -> #more(lists)
   #7: #bin2ss(x,cons(1(),xs)) -> #bin2ss(s(double(x)),xs)
   #8: #half(s(_1)) ->? #half❆1_s(_1)
   #9: #lt(s(x),s(y)) -> #lt(x,y)
   #10: #if2(false(),x,xs,ys) -> #s2bin2(x,ys)
   #11: #s2bin1(x,y,lists) -> #if1(lt(y,log(x)),x,y,lists)
   #12: #s2bin1(x,y,lists) -> #lt(y,log(x))
   #13: #s2bin1(x,y,lists) -> #log(x)
   #14: #s2bin2(x,cons(xs,ys)) -> #if2(eq(x,bin2s(xs)),x,xs,ys)
   #15: #s2bin2(x,cons(xs,ys)) -> #eq(x,bin2s(xs))
   #16: #s2bin2(x,cons(xs,ys)) -> #bin2s(xs)
   #17: #s2bin(x) -> #s2bin1(x,0(),cons(nil(),nil()))
   #18: #half❆1_s(s(x)) -> #half(x)
   #19: #eq(s(x),s(y)) -> #eq(x,y)
   #20: #log(s(s(x))) -> #log(half❆1_s(s(x)))
   #21: #log(s(s(x))) -> #half❆1_s(s(x))
Number of SCCs: 7, DPs: 11, edges: 13
	SCC { #20 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
bin2ss(x1,x2)	weight: 0
     1()	weight: 0
#s2bin1(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 4) + x1
#s2bin(x1)	weight: 0
  #lt(x1,x2)	weight: 0
#half❆1_s(x1)	weight: 0
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#bin2ss(x1,x2)	weight: 0
 #log(x1)	weight: x1
#half(x1)	weight: 0
#more(x1)	weight: 0
#s2bin2(x1,x2)	weight: 0
  true()	weight: 0
 bin2s(x1)	weight: 0
  more(x1)	weight: 0
  #eq(x1,x2)	weight: 0
#half❆1_0()	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
  half(x1)	weight: (/ 1 8) + x1
   if2(x1,x2,x3,x4)	weight: 0
half❆1_s(x1)	weight: (/ 1 8) + x1
   log(x1)	weight: 0
     0()	weight: 0
double(x1)	weight: 0
   nil()	weight: 0
s2bin2(x1,x2)	weight: 0
s2bin1(x1,x2,x3)	weight: 0
 s2bin(x1)	weight: 0
#bin2s(x1)	weight: 0
  cons(x1,x2)	weight: 0
bug_list_not()	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    lt(x1,x2)	weight: 0
half❆1_0()	weight: 0
    Usable rules: { 13..15 29 30 }
    Removed DPs: #20
Number of SCCs: 6, DPs: 10, edges: 12
	SCC { #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
bin2ss(x1,x2)	weight: 0
     1()	weight: 0
#s2bin1(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#s2bin(x1)	weight: 0
  #lt(x1,x2)	weight: 0
#half❆1_s(x1)	weight: 0
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#bin2ss(x1,x2)	weight: 0
 #log(x1)	weight: x1
#half(x1)	weight: 0
#more(x1)	weight: 0
#s2bin2(x1,x2)	weight: 0
  true()	weight: 0
 bin2s(x1)	weight: 0
  more(x1)	weight: 0
  #eq(x1,x2)	weight: x2
#half❆1_0()	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
  half(x1)	weight: (/ 1 2) + x1
   if2(x1,x2,x3,x4)	weight: 0
half❆1_s(x1)	weight: (/ 1 2) + x1
   log(x1)	weight: 0
     0()	weight: 0
double(x1)	weight: 0
   nil()	weight: 0
s2bin2(x1,x2)	weight: 0
s2bin1(x1,x2,x3)	weight: 0
 s2bin(x1)	weight: 0
#bin2s(x1)	weight: 0
  cons(x1,x2)	weight: 0
bug_list_not()	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    lt(x1,x2)	weight: 0
half❆1_0()	weight: 0
    Usable rules: { }
    Removed DPs: #19
Number of SCCs: 5, DPs: 9, edges: 11
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
bin2ss(x1,x2)	weight: 0
     1()	weight: 0
#s2bin1(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 4) + x1
#s2bin(x1)	weight: 0
  #lt(x1,x2)	weight: x1 + x2
#half❆1_s(x1)	weight: 0
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#bin2ss(x1,x2)	weight: 0
 #log(x1)	weight: x1
#half(x1)	weight: 0
#more(x1)	weight: 0
#s2bin2(x1,x2)	weight: 0
  true()	weight: 0
 bin2s(x1)	weight: 0
  more(x1)	weight: 0
  #eq(x1,x2)	weight: 0
#half❆1_0()	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
  half(x1)	weight: (/ 1 4) + x1
   if2(x1,x2,x3,x4)	weight: 0
half❆1_s(x1)	weight: (/ 1 4) + x1
   log(x1)	weight: 0
     0()	weight: 0
double(x1)	weight: 0
   nil()	weight: 0
s2bin2(x1,x2)	weight: 0
s2bin1(x1,x2,x3)	weight: 0
 s2bin(x1)	weight: 0
#bin2s(x1)	weight: 0
  cons(x1,x2)	weight: 0
bug_list_not()	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    lt(x1,x2)	weight: 0
half❆1_0()	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 4, DPs: 8, edges: 10
	SCC { #8 #18 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
bin2ss(x1,x2)	weight: 0
     1()	weight: 0
#s2bin1(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#s2bin(x1)	weight: 0
  #lt(x1,x2)	weight: 0
#half❆1_s(x1)	weight: x1
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#bin2ss(x1,x2)	weight: 0
 #log(x1)	weight: x1
#half(x1)	weight: x1
#more(x1)	weight: 0
#s2bin2(x1,x2)	weight: 0
  true()	weight: 0
 bin2s(x1)	weight: 0
  more(x1)	weight: 0
  #eq(x1,x2)	weight: 0
#half❆1_0()	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
  half(x1)	weight: (/ 1 2) + x1
   if2(x1,x2,x3,x4)	weight: 0
half❆1_s(x1)	weight: (/ 1 2) + x1
   log(x1)	weight: 0
     0()	weight: 0
double(x1)	weight: 0
   nil()	weight: 0
s2bin2(x1,x2)	weight: 0
s2bin1(x1,x2,x3)	weight: 0
 s2bin(x1)	weight: 0
#bin2s(x1)	weight: 0
  cons(x1,x2)	weight: 0
bug_list_not()	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    lt(x1,x2)	weight: 0
half❆1_0()	weight: 0
    Usable rules: { }
    Removed DPs: #8 #18
Number of SCCs: 3, DPs: 6, edges: 8
	SCC { #3 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
bin2ss(x1,x2)	weight: 0
     1()	weight: 0
#s2bin1(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 4) + x1
#s2bin(x1)	weight: 0
  #lt(x1,x2)	weight: 0
#half❆1_s(x1)	weight: 0
    eq(x1,x2)	weight: 0
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#bin2ss(x1,x2)	weight: x2
 #log(x1)	weight: x1
#half(x1)	weight: 0
#more(x1)	weight: 0
#s2bin2(x1,x2)	weight: 0
  true()	weight: 0
 bin2s(x1)	weight: 0
  more(x1)	weight: 0
  #eq(x1,x2)	weight: 0
#half❆1_0()	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
  half(x1)	weight: (/ 1 4) + x1
   if2(x1,x2,x3,x4)	weight: 0
half❆1_s(x1)	weight: (/ 1 4) + x1
   log(x1)	weight: 0
     0()	weight: 0
double(x1)	weight: (/ 1 4)
   nil()	weight: 0
s2bin2(x1,x2)	weight: 0
s2bin1(x1,x2,x3)	weight: 0
 s2bin(x1)	weight: 0
#bin2s(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 4) + x2
bug_list_not()	weight: 0
 #if2(x1,x2,x3,x4)	weight: 0
    lt(x1,x2)	weight: 0
half❆1_0()	weight: 0
    Usable rules: { }
    Removed DPs: #3 #7
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #10 #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
bin2ss(x1,x2)	weight: (/ 1 2) + x1
     1()	weight: 0
#s2bin1(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 4) + x1
#s2bin(x1)	weight: 0
  #lt(x1,x2)	weight: 0
#half❆1_s(x1)	weight: 0
    eq(x1,x2)	weight: (/ 1 4)
   if1(x1,x2,x3,x4)	weight: 0
 false()	weight: 0
#bin2ss(x1,x2)	weight: 0
 #log(x1)	weight: x1
#half(x1)	weight: 0
#more(x1)	weight: 0
#s2bin2(x1,x2)	weight: x1 + x2
  true()	weight: 0
 bin2s(x1)	weight: (/ 1 4)
  more(x1)	weight: 0
  #eq(x1,x2)	weight: 0
#half❆1_0()	weight: 0
 #if1(x1,x2,x3,x4)	weight: 0
  half(x1)	weight: (/ 1 4) + x1
   if2(x1,x2,x3,x4)	weight: 0
half❆1_s(x1)	weight: (/ 1 4) + x1
   log(x1)	weight: 0
     0()	weight: 0
double(x1)	weight: (/ 1 4)
   nil()	weight: 0
s2bin2(x1,x2)	weight: 0
s2bin1(x1,x2,x3)	weight: 0
 s2bin(x1)	weight: 0
#bin2s(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2) + x2
bug_list_not()	weight: 0
 #if2(x1,x2,x3,x4)	weight: (/ 1 4) + x2 + x4
    lt(x1,x2)	weight: 0
half❆1_0()	weight: 0
    Usable rules: { }
    Removed DPs: #10 #14
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #5 #11 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
