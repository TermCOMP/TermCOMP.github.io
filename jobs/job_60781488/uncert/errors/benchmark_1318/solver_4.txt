Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: U11(tt(),L) -> U12(tt(),activate(L))
    3: U12(tt(),L) -> s(length(activate(L)))
    4: U21(tt(),IL,M,N) -> U22(tt(),activate(IL),activate(M),activate(N))
    5: U22(tt(),IL,M,N) -> U23(tt(),activate(IL),activate(M),activate(N))
    6: U23(tt(),IL,M,N) -> cons(activate(N),n__take(activate(M),activate(IL)))
    7: length(nil()) -> 0()
    8: length(cons(N,L)) -> U11(tt(),activate(L))
    9: take(0(),IL) -> nil()
    10: take(s(M),cons(N,IL)) -> U21(tt(),activate(IL),M,N)
    11: zeros() -> n__zeros()
    12: take(X1,X2) -> n__take(X1,X2)
    13: activate(n__zeros()) -> zeros()
    14: activate(n__take(X1,X2)) -> take(activate(X1),activate(X2))
    15: activate(X) -> X
Number of strict rules: 15
Direct Order(PosReal,>,Poly) ... removes: 7 9
   U21(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + 2 * x2 + x3 + x4
   U11(x1,x2)	weight: (/ 97349 4) + x1 + x2
     s(x1)	weight: x1
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 4) + x1 + 2 * x2
n__zeros()	weight: 0
   U23(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + 2 * x2 + x3 + x4
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 97349 4) + x1 + x2
     0()	weight: 0
n__take(x1,x2)	weight: (/ 1 4) + x1 + 2 * x2
   nil()	weight: 0
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
   U22(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + 2 * x2 + x3 + x4
length(x1)	weight: (/ 97349 4) + x1
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing U12 U22 U23 U11 U21
1: zeros() -> cons(0(),n__zeros())
2: U11❆1_tt(L) -> U12❆1_tt(activate(L))
3: U12❆1_tt(L) -> s(length(activate(L)))
4: U21❆1_tt(IL,M,N) -> U22❆1_tt(activate(IL),activate(M),activate(N))
5: U22❆1_tt(IL,M,N) -> U23❆1_tt(activate(IL),activate(M),activate(N))
6: U23❆1_tt(IL,M,N) -> cons(activate(N),n__take(activate(M),activate(IL)))
8: length(cons(N,L)) -> U11❆1_tt(activate(L))
10: take(s(M),cons(N,IL)) -> U21❆1_tt(activate(IL),M,N)
11: zeros() -> n__zeros()
12: take(X1,X2) -> n__take(X1,X2)
13: activate(n__zeros()) -> zeros()
14: activate(n__take(X1,X2)) -> take(activate(X1),activate(X2))
15: activate(X) -> X
16: U21(tt(),_3,_4,_5) ->= U21❆1_tt(_3,_4,_5)
17: U11(tt(),_1) ->= U11❆1_tt(_1)
18: U23(tt(),_3,_4,_5) ->= U23❆1_tt(_3,_4,_5)
19: U22(tt(),_3,_4,_5) ->= U22❆1_tt(_3,_4,_5)
20: U12(tt(),_1) ->= U12❆1_tt(_1)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... removes: 18 16 19 17 20
   U21(x1,x2,x3,x4)	weight: (/ 53857 2) + x1 + 2 * x2 + x3 + x4
   U11(x1,x2)	weight: (/ 1 2) + x1 + x2
     s(x1)	weight: x1
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 107713 4) + x1 + 2 * x2
n__zeros()	weight: 0
U21❆1_tt(x1,x2,x3)	weight: (/ 107713 4) + 2 * x1 + x2 + x3
   U23(x1,x2,x3,x4)	weight: (/ 53857 2) + x1 + 2 * x2 + x3 + x4
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 1 2) + x1 + x2
U11❆1_tt(x1)	weight: (/ 1 4) + x1
U22❆1_tt(x1,x2,x3)	weight: (/ 107713 4) + 2 * x1 + x2 + x3
     0()	weight: 0
n__take(x1,x2)	weight: (/ 107713 4) + x1 + 2 * x2
   nil()	weight: 0
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
U23❆1_tt(x1,x2,x3)	weight: (/ 107713 4) + 2 * x1 + x2 + x3
U12❆1_tt(x1)	weight: (/ 1 4) + x1
   U22(x1,x2,x3,x4)	weight: (/ 53857 2) + x1 + 2 * x2 + x3 + x4
length(x1)	weight: (/ 1 4) + x1
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #U11❆1_tt(L) -> #U12❆1_tt(activate(L))
   #2: #U11❆1_tt(L) -> #activate(L)
   #3: #U23❆1_tt(IL,M,N) -> #activate(N)
   #4: #U23❆1_tt(IL,M,N) -> #activate(M)
   #5: #U23❆1_tt(IL,M,N) -> #activate(IL)
   #6: #activate(n__zeros()) -> #zeros()
   #7: #activate(n__take(X1,X2)) -> #take(activate(X1),activate(X2))
   #8: #activate(n__take(X1,X2)) -> #activate(X1)
   #9: #activate(n__take(X1,X2)) -> #activate(X2)
   #10: #take(s(M),cons(N,IL)) -> #U21❆1_tt(activate(IL),M,N)
   #11: #take(s(M),cons(N,IL)) -> #activate(IL)
   #12: #U22❆1_tt(IL,M,N) -> #U23❆1_tt(activate(IL),activate(M),activate(N))
   #13: #U22❆1_tt(IL,M,N) -> #activate(IL)
   #14: #U22❆1_tt(IL,M,N) -> #activate(M)
   #15: #U22❆1_tt(IL,M,N) -> #activate(N)
   #16: #U12❆1_tt(L) -> #length(activate(L))
   #17: #U12❆1_tt(L) -> #activate(L)
   #18: #length(cons(N,L)) -> #U11❆1_tt(activate(L))
   #19: #length(cons(N,L)) -> #activate(L)
   #20: #U21❆1_tt(IL,M,N) -> #U22❆1_tt(activate(IL),activate(M),activate(N))
   #21: #U21❆1_tt(IL,M,N) -> #activate(IL)
   #22: #U21❆1_tt(IL,M,N) -> #activate(M)
   #23: #U21❆1_tt(IL,M,N) -> #activate(N)
Number of SCCs: 2, DPs: 19, edges: 52
	SCC { #1 #16 #18 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #length(cons(N,n__zeros()))	-#18->
  #U11❆1_tt(activate(n__zeros()))	--->*
  #U11❆1_tt(activate(n__zeros()))	-#1->
  #U12❆1_tt(activate(activate(n__zeros())))	--->*
  #U12❆1_tt(activate(activate(n__zeros())))	-#16->
  #length(activate(activate(activate(n__zeros()))))	--->*
  #length(cons(0(),n__zeros()))
  Looping with: [ N := 0(); ]
