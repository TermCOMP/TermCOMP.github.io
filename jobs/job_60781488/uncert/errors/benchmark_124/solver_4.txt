Input TRS:
    1: app(app(eq(),0()),0()) -> true()
    2: app(app(eq(),0()),app(s(),x)) -> false()
    3: app(app(eq(),app(s(),x)),0()) -> false()
    4: app(app(eq(),app(s(),x)),app(s(),y)) -> app(app(eq(),x),y)
    5: app(app(or(),true()),y) -> true()
    6: app(app(or(),false()),y) -> y
    7: app(app(union(),empty()),h) -> h
    8: app(app(union(),app(app(app(edge(),x),y),i)),h) -> app(app(app(edge(),x),y),app(app(union(),i),h))
    9: app(app(app(app(reach(),x),y),empty()),h) -> false()
    10: app(app(app(app(reach(),x),y),app(app(app(edge(),u),v),i)),h) -> app(app(app(app(app(if_reach_1(),app(app(eq(),x),u)),x),y),app(app(app(edge(),u),v),i)),h)
    11: app(app(app(app(app(if_reach_1(),true()),x),y),app(app(app(edge(),u),v),i)),h) -> app(app(app(app(app(if_reach_2(),app(app(eq(),y),v)),x),y),app(app(app(edge(),u),v),i)),h)
    12: app(app(app(app(app(if_reach_1(),false()),x),y),app(app(app(edge(),u),v),i)),h) -> app(app(app(app(reach(),x),y),i),app(app(app(edge(),u),v),h))
    13: app(app(app(app(app(if_reach_2(),true()),x),y),app(app(app(edge(),u),v),i)),h) -> true()
    14: app(app(app(app(app(if_reach_2(),false()),x),y),app(app(app(edge(),u),v),i)),h) -> app(app(or(),app(app(app(app(reach(),x),y),i),h)),app(app(app(app(reach(),v),y),app(app(union(),i),h)),empty()))
    15: app(app(map(),f),nil()) -> nil()
    16: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    17: app(app(filter(),f),nil()) -> nil()
    18: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    19: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    20: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 20
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_eq(0(),0()) -> true()
2: app❆2_eq(0(),app❆1_s(x)) -> false()
3: app❆2_eq(app❆1_s(x),0()) -> false()
4: app❆2_eq(app❆1_s(x),app❆1_s(y)) -> app❆2_eq(x,y)
5: app❆2_or(true(),y) -> true()
6: app❆2_or(false(),y) -> y
7: app❆2_union(empty(),h) -> h
8: app❆2_union(app❆3_edge(x,y,i),h) -> app❆3_edge(x,y,app❆2_union(i,h))
9: app❆4_reach(x,y,empty(),h) -> false()
10: app❆4_reach(x,y,app❆3_edge(u,v,i),h) -> app❆5_if_reach_1(app❆2_eq(x,u),x,y,app❆3_edge(u,v,i),h)
11: app❆5_if_reach_1(true(),x,y,app❆3_edge(u,v,i),h) -> app❆5_if_reach_2(app❆2_eq(y,v),x,y,app❆3_edge(u,v,i),h)
12: app❆5_if_reach_1(false(),x,y,app❆3_edge(u,v,i),h) -> app❆4_reach(x,y,i,app❆3_edge(u,v,h))
13: app❆5_if_reach_2(true(),x,y,app❆3_edge(u,v,i),h) -> true()
14: app❆5_if_reach_2(false(),x,y,app❆3_edge(u,v,i),h) -> app❆2_or(app❆4_reach(x,y,i,h),app❆4_reach(v,y,app❆2_union(i,h),empty()))
15: app❆2_map(f,nil()) -> nil()
16: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
17: app❆2_filter(f,nil()) -> nil()
18: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
19: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
20: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
21: app(eq(),_1) ->= app❆1_eq(_1)
22: app(app❆1_eq(_1),_2) ->= app❆2_eq(_1,_2)
23: app(cons(),_1) ->= app❆1_cons(_1)
24: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
25: app(s(),_1) ->= app❆1_s(_1)
26: app(union(),_1) ->= app❆1_union(_1)
27: app(app❆1_union(_1),_2) ->= app❆2_union(_1,_2)
28: app(filter(),_1) ->= app❆1_filter(_1)
29: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
30: app(if_reach_1(),_1) ->= app❆1_if_reach_1(_1)
31: app(app❆1_if_reach_1(_1),_2) ->= app❆2_if_reach_1(_1,_2)
32: app(app❆2_if_reach_1(_1,_2),_3) ->= app❆3_if_reach_1(_1,_2,_3)
33: app(app❆3_if_reach_1(_1,_2,_3),_4) ->= app❆4_if_reach_1(_1,_2,_3,_4)
34: app(app❆4_if_reach_1(_1,_2,_3,_4),_5) ->= app❆5_if_reach_1(_1,_2,_3,_4,_5)
35: app(or(),_1) ->= app❆1_or(_1)
36: app(app❆1_or(_1),_2) ->= app❆2_or(_1,_2)
37: app(map(),_1) ->= app❆1_map(_1)
38: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
39: app(edge(),_1) ->= app❆1_edge(_1)
40: app(app❆1_edge(_1),_2) ->= app❆2_edge(_1,_2)
41: app(app❆2_edge(_1,_2),_3) ->= app❆3_edge(_1,_2,_3)
42: app(reach(),_1) ->= app❆1_reach(_1)
43: app(app❆1_reach(_1),_2) ->= app❆2_reach(_1,_2)
44: app(app❆2_reach(_1,_2),_3) ->= app❆3_reach(_1,_2,_3)
45: app(app❆3_reach(_1,_2,_3),_4) ->= app❆4_reach(_1,_2,_3,_4)
46: app(if_reach_2(),_1) ->= app❆1_if_reach_2(_1)
47: app(app❆1_if_reach_2(_1),_2) ->= app❆2_if_reach_2(_1,_2)
48: app(app❆2_if_reach_2(_1,_2),_3) ->= app❆3_if_reach_2(_1,_2,_3)
49: app(app❆3_if_reach_2(_1,_2,_3),_4) ->= app❆4_if_reach_2(_1,_2,_3,_4)
50: app(app❆4_if_reach_2(_1,_2,_3,_4),_5) ->= app❆5_if_reach_2(_1,_2,_3,_4,_5)
51: app(filter2(),_1) ->= app❆1_filter2(_1)
52: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
53: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
54: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 20
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #2: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #3: #app❆5_if_reach_1(true(),x,y,app❆3_edge(u,v,i),h) -> #app❆5_if_reach_2(app❆2_eq(y,v),x,y,app❆3_edge(u,v,i),h)
   #4: #app❆5_if_reach_1(true(),x,y,app❆3_edge(u,v,i),h) -> #app❆2_eq(y,v)
   #5: #app(app❆3_reach(_1,_2,_3),_4) ->? #app❆4_reach(_1,_2,_3,_4)
   #6: #app❆5_if_reach_1(false(),x,y,app❆3_edge(u,v,i),h) -> #app❆4_reach(x,y,i,app❆3_edge(u,v,h))
   #7: #app❆5_if_reach_2(false(),x,y,app❆3_edge(u,v,i),h) -> #app❆2_or(app❆4_reach(x,y,i,h),app❆4_reach(v,y,app❆2_union(i,h),empty()))
   #8: #app❆5_if_reach_2(false(),x,y,app❆3_edge(u,v,i),h) -> #app❆4_reach(x,y,i,h)
   #9: #app❆5_if_reach_2(false(),x,y,app❆3_edge(u,v,i),h) -> #app❆4_reach(v,y,app❆2_union(i,h),empty())
   #10: #app❆5_if_reach_2(false(),x,y,app❆3_edge(u,v,i),h) -> #app❆2_union(i,h)
   #11: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #12: #app❆4_reach(x,y,app❆3_edge(u,v,i),h) -> #app❆5_if_reach_1(app❆2_eq(x,u),x,y,app❆3_edge(u,v,i),h)
   #13: #app❆4_reach(x,y,app❆3_edge(u,v,i),h) -> #app❆2_eq(x,u)
   #14: #app(app❆1_eq(_1),_2) ->? #app❆2_eq(_1,_2)
   #15: #app(app❆4_if_reach_1(_1,_2,_3,_4),_5) ->? #app❆5_if_reach_1(_1,_2,_3,_4,_5)
   #16: #app(app❆1_union(_1),_2) ->? #app❆2_union(_1,_2)
   #17: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #18: #app(app❆1_or(_1),_2) ->? #app❆2_or(_1,_2)
   #19: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #20: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #21: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #22: #app❆2_union(app❆3_edge(x,y,i),h) -> #app❆2_union(i,h)
   #23: #app❆2_eq(app❆1_s(x),app❆1_s(y)) -> #app❆2_eq(x,y)
   #24: #app(app❆4_if_reach_2(_1,_2,_3,_4),_5) ->? #app❆5_if_reach_2(_1,_2,_3,_4,_5)
   #25: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #26: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
Number of SCCs: 4, DPs: 16, edges: 29
	SCC { #23 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_union(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆3_if_reach_2(x1,x2,x3)	weight: 0
app❆1_map(x1)	weight: 0
  edge()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆2_eq(x1,x2)	weight: x2
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
app❆1_edge(x1)	weight: 0
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆1_if_reach_1(x1)	weight: 0
app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: 0
app❆2_reach(x1,x2)	weight: 0
app❆4_if_reach_2(x1,x2,x3,x4)	weight: 0
#app❆4_reach(x1,x2,x3,x4)	weight: 0
 reach()	weight: 0
if_reach_2()	weight: 0
  true()	weight: 0
app❆2_edge(x1,x2)	weight: 0
app❆1_or(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
#app❆2_or(x1,x2)	weight: 0
app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: 0
#app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: 0
app❆1_union(x1)	weight: 0
app❆3_edge(x1,x2,x3)	weight: 0
 union()	weight: 0
app❆2_or(x1,x2)	weight: 0
app❆2_if_reach_1(x1,x2)	weight: 0
   nil()	weight: 0
app❆2_if_reach_2(x1,x2)	weight: 0
app❆1_filter(x1)	weight: 0
    or()	weight: 0
 #app(x1,x2)	weight: 0
app❆1_if_reach_2(x1)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
app❆2_union(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆1_reach(x1)	weight: 0
#app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆4_reach(x1,x2,x3,x4)	weight: 0
 empty()	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
if_reach_1()	weight: 0
app❆3_reach(x1,x2,x3)	weight: 0
app❆1_filter2(x1)	weight: 0
app❆3_if_reach_1(x1,x2,x3)	weight: 0
app❆1_cons(x1)	weight: 0
app❆4_if_reach_1(x1,x2,x3,x4)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #23
Number of SCCs: 3, DPs: 15, edges: 28
	SCC { #22 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_union(x1,x2)	weight: x1
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆3_if_reach_2(x1,x2,x3)	weight: 0
app❆1_map(x1)	weight: 0
  edge()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
#app❆2_eq(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
    eq()	weight: 0
app❆1_edge(x1)	weight: 0
 false()	weight: 0
app❆2_eq(x1,x2)	weight: 0
app❆1_if_reach_1(x1)	weight: 0
app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: 0
app❆2_reach(x1,x2)	weight: 0
app❆4_if_reach_2(x1,x2,x3,x4)	weight: 0
#app❆4_reach(x1,x2,x3,x4)	weight: 0
 reach()	weight: 0
if_reach_2()	weight: 0
  true()	weight: 0
app❆2_edge(x1,x2)	weight: 0
app❆1_or(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
#app❆2_or(x1,x2)	weight: 0
app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: 0
#app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: 0
app❆1_union(x1)	weight: 0
app❆3_edge(x1,x2,x3)	weight: (/ 1 2) + x3
 union()	weight: 0
app❆2_or(x1,x2)	weight: 0
app❆2_if_reach_1(x1,x2)	weight: 0
   nil()	weight: 0
app❆2_if_reach_2(x1,x2)	weight: 0
app❆1_filter(x1)	weight: 0
    or()	weight: 0
 #app(x1,x2)	weight: 0
app❆1_if_reach_2(x1)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
app❆2_union(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: 0
app❆1_reach(x1)	weight: 0
#app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆4_reach(x1,x2,x3,x4)	weight: 0
 empty()	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2)
if_reach_1()	weight: 0
app❆3_reach(x1,x2,x3)	weight: 0
app❆1_filter2(x1)	weight: 0
app❆3_if_reach_1(x1,x2,x3)	weight: 0
app❆1_cons(x1)	weight: 0
app❆4_if_reach_1(x1,x2,x3,x4)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #22
Number of SCCs: 2, DPs: 14, edges: 27
	SCC { #1 #2 #11 #17 #19..21 #25 #26 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_union(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: x2
     s()	weight: 0
app❆3_if_reach_2(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
app❆1_map(x1)	weight: (/ 1 4) + x1
  edge()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 4)
#app❆2_eq(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: (/ 1 4) + x1
    eq()	weight: 0
app❆1_edge(x1)	weight: (/ 1 4) + x1
 false()	weight: 0
app❆2_eq(x1,x2)	weight: (/ 1 2) + x1 + x2
app❆1_if_reach_1(x1)	weight: (/ 1 4) + x1
app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: (/ 1 4) + x1 + x2 + x4 + x5
app❆2_reach(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆4_if_reach_2(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + x2 + x4
#app❆4_reach(x1,x2,x3,x4)	weight: 0
 reach()	weight: 0
if_reach_2()	weight: 0
  true()	weight: 0
app❆2_edge(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆1_or(x1)	weight: (/ 1 4) + x1
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 1 4) + x1 + x2
#app❆2_or(x1,x2)	weight: 0
app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: (/ 1 4) + x1
#app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: (/ 1 4) + x1
app❆1_union(x1)	weight: (/ 1 4) + x1
app❆3_edge(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
 union()	weight: 0
app❆2_or(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_if_reach_1(x1,x2)	weight: (/ 1 4) + x1
   nil()	weight: 0
app❆2_if_reach_2(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆1_filter(x1)	weight: (/ 1 4)
    or()	weight: 0
 #app(x1,x2)	weight: (/ 1 4) + x2
app❆1_if_reach_2(x1)	weight: (/ 1 4) + x1
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8) + x4
app❆2_filter2(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_union(x1,x2)	weight: (/ 1 4) + x1 + x2
#app❆2_filter(x1,x2)	weight: x2
app❆1_reach(x1)	weight: (/ 1 4) + x1
#app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 8) + x1 + x2
app❆4_reach(x1,x2,x3,x4)	weight: (/ 3 8) + x2 + x3
 empty()	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 4) + x1
if_reach_1()	weight: 0
app❆3_reach(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
app❆1_filter2(x1)	weight: (/ 1 4) + x1
app❆3_if_reach_1(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
app❆1_cons(x1)	weight: (/ 1 4) + x1
app❆4_if_reach_1(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + x2
app❆3_filter2(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
   app(x1,x2)	weight: (/ 1 8)
    Usable rules: { }
    Removed DPs: #1 #2 #11 #17 #19..21 #25 #26
Number of SCCs: 1, DPs: 5, edges: 7
	SCC { #3 #6 #8 #9 #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_union(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆3_if_reach_2(x1,x2,x3)	weight: (/ 1 8) + x1 + x2 + x3
app❆1_map(x1)	weight: (/ 1 8) + x1
  edge()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 8)
#app❆2_eq(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: (/ 1 8) + x1
    eq()	weight: 0
app❆1_edge(x1)	weight: (/ 1 8) + x1
 false()	weight: 0
app❆2_eq(x1,x2)	weight: (/ 3 8) + x2
app❆1_if_reach_1(x1)	weight: (/ 1 8) + x1
app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: (/ 1 8) + x1 + x2 + x4 + x5
app❆2_reach(x1,x2)	weight: (/ 1 8) + x1 + x2
app❆4_if_reach_2(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2 + x4
#app❆4_reach(x1,x2,x3,x4)	weight: (/ 1 16) + x3 + x4
 reach()	weight: 0
if_reach_2()	weight: 0
  true()	weight: 0
app❆2_edge(x1,x2)	weight: (/ 1 8) + x1 + x2
app❆1_or(x1)	weight: (/ 1 8) + x1
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 1 8) + x1 + x2
#app❆2_or(x1,x2)	weight: 0
app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: (/ 1 8) + x1
#app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: x4 + x5
     0()	weight: 0
app❆1_eq(x1)	weight: (/ 1 8) + x1
app❆1_union(x1)	weight: (/ 1 8) + x1
app❆3_edge(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
 union()	weight: 0
app❆2_or(x1,x2)	weight: (/ 1 8) + x1 + x2
app❆2_if_reach_1(x1,x2)	weight: (/ 1 8) + x1
   nil()	weight: 0
app❆2_if_reach_2(x1,x2)	weight: (/ 1 8) + x1 + x2
app❆1_filter(x1)	weight: (/ 1 8)
    or()	weight: 0
 #app(x1,x2)	weight: (/ 1 8)
app❆1_if_reach_2(x1)	weight: (/ 1 8) + x1
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16)
app❆2_filter2(x1,x2)	weight: (/ 1 8) + x1 + x2
app❆2_union(x1,x2)	weight: (/ 1 8) + x1 + x2
#app❆2_filter(x1,x2)	weight: 0
app❆1_reach(x1)	weight: (/ 1 8) + x1
#app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: (/ 1 16) + x4 + x5
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 16) + x1 + x2
app❆4_reach(x1,x2,x3,x4)	weight: (/ 3 16) + x2 + x3
 empty()	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 8)
if_reach_1()	weight: 0
app❆3_reach(x1,x2,x3)	weight: (/ 1 8) + x1 + x2 + x3
app❆1_filter2(x1)	weight: (/ 1 8) + x1
app❆3_if_reach_1(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
app❆1_cons(x1)	weight: (/ 1 8) + x1
app❆4_if_reach_1(x1,x2,x3,x4)	weight: (/ 1 8) + x1 + x2
app❆3_filter2(x1,x2,x3)	weight: (/ 1 8) + x2 + x3
   app(x1,x2)	weight: (/ 1 16)
    Usable rules: { 7 8 }
    Removed DPs: #3 #8 #9
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #6 #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_union(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆3_if_reach_2(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
app❆1_map(x1)	weight: (/ 1 4) + x1
  edge()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 4)
#app❆2_eq(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: (/ 1 4) + x1
    eq()	weight: 0
app❆1_edge(x1)	weight: (/ 1 4) + x1
 false()	weight: 0
app❆2_eq(x1,x2)	weight: (/ 1 2) + x2
app❆1_if_reach_1(x1)	weight: (/ 1 4) + x1
app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: (/ 1 4) + x1 + x2 + x4 + x5
app❆2_reach(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆4_if_reach_2(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + x2 + x4
#app❆4_reach(x1,x2,x3,x4)	weight: (/ 1 4) + x3
 reach()	weight: 0
if_reach_2()	weight: 0
  true()	weight: 0
app❆2_edge(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆1_or(x1)	weight: (/ 1 4) + x1
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 1 4) + x1 + x2
#app❆2_or(x1,x2)	weight: 0
app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: (/ 1 4) + x1
#app❆5_if_reach_2(x1,x2,x3,x4,x5)	weight: 0
     0()	weight: 0
app❆1_eq(x1)	weight: (/ 1 4) + x1
app❆1_union(x1)	weight: (/ 1 4) + x1
app❆3_edge(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
 union()	weight: 0
app❆2_or(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_if_reach_1(x1,x2)	weight: (/ 1 4) + x1
   nil()	weight: 0
app❆2_if_reach_2(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆1_filter(x1)	weight: (/ 1 4)
    or()	weight: 0
 #app(x1,x2)	weight: (/ 1 4)
app❆1_if_reach_2(x1)	weight: (/ 1 4) + x1
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8)
app❆2_filter2(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_union(x1,x2)	weight: (/ 1 4) + x1 + x2
#app❆2_filter(x1,x2)	weight: 0
app❆1_reach(x1)	weight: (/ 1 4) + x1
#app❆5_if_reach_1(x1,x2,x3,x4,x5)	weight: (/ 1 8) + x4
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 8) + x1 + x2
app❆4_reach(x1,x2,x3,x4)	weight: (/ 3 8) + x2 + x3
 empty()	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 4)
if_reach_1()	weight: 0
app❆3_reach(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
app❆1_filter2(x1)	weight: (/ 1 4) + x1
app❆3_if_reach_1(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
app❆1_cons(x1)	weight: (/ 1 4) + x1
app❆4_if_reach_1(x1,x2,x3,x4)	weight: (/ 1 4) + x1 + x2
app❆3_filter2(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
   app(x1,x2)	weight: (/ 1 8)
    Usable rules: { }
    Removed DPs: #6 #12
Number of SCCs: 0, DPs: 0, edges: 0
