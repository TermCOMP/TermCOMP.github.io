Input TRS:
    1: le(0(),y) -> true()
    2: le(s(x),0()) -> false()
    3: le(s(x),s(y)) -> le(x,y)
    4: inc(0()) -> 0()
    5: inc(s(x)) -> s(inc(x))
    6: minus(0(),y) -> 0()
    7: minus(x,0()) -> x
    8: minus(s(x),s(y)) -> minus(x,y)
    9: quot(0(),s(y)) -> 0()
    10: quot(s(x),s(y)) -> s(quot(minus(x,y),s(y)))
    11: log(x) -> log2(x,0())
    12: log2(x,y) -> if(le(x,0()),le(x,s(0())),x,inc(y))
    13: if(true(),b,x,y) -> log_undefined()
    14: if(false(),b,x,y) -> if2(b,x,y)
    15: if2(true(),x,s(y)) -> y
    16: if2(false(),x,y) -> log2(quot(x,s(s(0()))),y)
Number of strict rules: 16
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #log(x) -> #log2(x,0())
   #2: #log2(x,y) -> #if(le(x,0()),le(x,s(0())),x,inc(y))
   #3: #log2(x,y) -> #le(x,0())
   #4: #log2(x,y) -> #le(x,s(0()))
   #5: #log2(x,y) -> #inc(y)
   #6: #if(false(),b,x,y) -> #if2(b,x,y)
   #7: #quot(s(x),s(y)) -> #quot(minus(x,y),s(y))
   #8: #quot(s(x),s(y)) -> #minus(x,y)
   #9: #inc(s(x)) -> #inc(x)
   #10: #if2(false(),x,y) -> #log2(quot(x,s(s(0()))),y)
   #11: #if2(false(),x,y) -> #quot(x,s(s(0())))
   #12: #le(s(x),s(y)) -> #le(x,y)
   #13: #minus(s(x),s(y)) -> #minus(x,y)
Number of SCCs: 5, DPs: 7, edges: 7
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
#log2(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
 false()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: x1
   inc(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
log_undefined()	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: 0
 #if2(x1,x2,x3)	weight: 0
  log2(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 4, DPs: 6, edges: 6
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
#log2(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
 false()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
log_undefined()	weight: 0
#minus(x1,x2)	weight: x2
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: 0
 #if2(x1,x2,x3)	weight: 0
  log2(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
#log2(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
 false()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
log_undefined()	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: 0
 #if2(x1,x2,x3)	weight: 0
  log2(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #12
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
#log2(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
 #log(x1)	weight: 0
 #inc(x1)	weight: 0
   inc(x1)	weight: 0
  true()	weight: 0
   if2(x1,x2,x3)	weight: 0
   log(x1)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
  quot(x1,x2)	weight: 0
log_undefined()	weight: 0
#minus(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
#quot(x1,x2)	weight: x1
 #if2(x1,x2,x3)	weight: 0
  log2(x1,x2)	weight: 0
    Usable rules: { 6..8 }
    Removed DPs: #7
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #2 #6 #10 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
