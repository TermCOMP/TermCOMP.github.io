Input TRS:
    1: eq(0(),0()) -> true()
    2: eq(s(X),s(Y)) -> eq(X,Y)
    3: eq(X,Y) -> false()
    4: inf(X) -> cons(X,inf(s(X)))
    5: take(0(),X) -> nil()
    6: take(s(X),cons(Y,L)) -> cons(Y,take(X,L))
    7: length(nil()) -> 0()
    8: length(cons(X,L)) -> s(length(L))
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #eq(s(X),s(Y)) -> #eq(X,Y)
   #2: #take(s(X),cons(Y,L)) -> #take(X,L)
   #3: #length(cons(X,L)) -> #length(L)
   #4: #inf(X) -> #inf(s(X))
Number of SCCs: 4, DPs: 4, edges: 4
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #inf(X)	-#4->
  #inf(s(X))	--->*
  #inf(s(X))
  Looping with: [ X := s(X); ]
