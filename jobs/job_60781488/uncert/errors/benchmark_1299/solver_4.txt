Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: U11(tt(),V1) -> U12(isNatList(activate(V1)))
    3: U12(tt()) -> tt()
    4: U21(tt(),V1) -> U22(isNat(activate(V1)))
    5: U22(tt()) -> tt()
    6: U31(tt(),V) -> U32(isNatList(activate(V)))
    7: U32(tt()) -> tt()
    8: U41(tt(),V1,V2) -> U42(isNat(activate(V1)),activate(V2))
    9: U42(tt(),V2) -> U43(isNatIList(activate(V2)))
    10: U43(tt()) -> tt()
    11: U51(tt(),V1,V2) -> U52(isNat(activate(V1)),activate(V2))
    12: U52(tt(),V2) -> U53(isNatList(activate(V2)))
    13: U53(tt()) -> tt()
    14: U61(tt(),V1,V2) -> U62(isNat(activate(V1)),activate(V2))
    15: U62(tt(),V2) -> U63(isNatIList(activate(V2)))
    16: U63(tt()) -> tt()
    17: U71(tt(),L) -> s(length(activate(L)))
    18: U81(tt()) -> nil()
    19: U91(tt(),IL,M,N) -> cons(activate(N),n__take(activate(M),activate(IL)))
    20: and(tt(),X) -> activate(X)
    21: isNat(n__0()) -> tt()
    22: isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)),activate(V1))
    23: isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
    24: isNatIList(V) -> U31(isNatIListKind(activate(V)),activate(V))
    25: isNatIList(n__zeros()) -> tt()
    26: isNatIList(n__cons(V1,V2)) -> U41(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
    27: isNatIListKind(n__nil()) -> tt()
    28: isNatIListKind(n__zeros()) -> tt()
    29: isNatIListKind(n__cons(V1,V2)) -> and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
    30: isNatIListKind(n__take(V1,V2)) -> and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
    31: isNatKind(n__0()) -> tt()
    32: isNatKind(n__length(V1)) -> isNatIListKind(activate(V1))
    33: isNatKind(n__s(V1)) -> isNatKind(activate(V1))
    34: isNatList(n__nil()) -> tt()
    35: isNatList(n__cons(V1,V2)) -> U51(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
    36: isNatList(n__take(V1,V2)) -> U61(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
    37: length(nil()) -> 0()
    38: length(cons(N,L)) -> U71(and(and(isNatList(activate(L)),n__isNatIListKind(activate(L))),n__and(isNat(N),n__isNatKind(N))),activate(L))
    39: take(0(),IL) -> U81(and(isNatIList(IL),n__isNatIListKind(IL)))
    40: take(s(M),cons(N,IL)) -> U91(and(and(isNatIList(activate(IL)),n__isNatIListKind(activate(IL))),n__and(and(isNat(M),n__isNatKind(M)),n__and(isNat(N),n__isNatKind(N)))),activate(IL),M,N)
    41: zeros() -> n__zeros()
    42: take(X1,X2) -> n__take(X1,X2)
    43: 0() -> n__0()
    44: length(X) -> n__length(X)
    45: s(X) -> n__s(X)
    46: cons(X1,X2) -> n__cons(X1,X2)
    47: isNatIListKind(X) -> n__isNatIListKind(X)
    48: nil() -> n__nil()
    49: and(X1,X2) -> n__and(X1,X2)
    50: isNatKind(X) -> n__isNatKind(X)
    51: activate(n__zeros()) -> zeros()
    52: activate(n__take(X1,X2)) -> take(X1,X2)
    53: activate(n__0()) -> 0()
    54: activate(n__length(X)) -> length(X)
    55: activate(n__s(X)) -> s(X)
    56: activate(n__cons(X1,X2)) -> cons(X1,X2)
    57: activate(n__isNatIListKind(X)) -> isNatIListKind(X)
    58: activate(n__nil()) -> nil()
    59: activate(n__and(X1,X2)) -> and(X1,X2)
    60: activate(n__isNatKind(X)) -> isNatKind(X)
    61: activate(X) -> X
Number of strict rules: 61
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U11(tt(),V1) -> #U12(isNatList(activate(V1)))
   #2: #U11(tt(),V1) -> #isNatList(activate(V1))
   #3: #U11(tt(),V1) -> #activate(V1)
   #4: #isNatIListKind(n__cons(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #5: #isNatIListKind(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #6: #isNatIListKind(n__cons(V1,V2)) -> #activate(V1)
   #7: #isNatIListKind(n__cons(V1,V2)) -> #activate(V2)
   #8: #isNatList(n__cons(V1,V2)) -> #U51(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
   #9: #isNatList(n__cons(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #10: #isNatList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #11: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #12: #isNatList(n__cons(V1,V2)) -> #activate(V2)
   #13: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #14: #isNatList(n__cons(V1,V2)) -> #activate(V2)
   #15: #length(nil()) -> #0()
   #16: #activate(n__0()) -> #0()
   #17: #activate(n__nil()) -> #nil()
   #18: #length(cons(N,L)) -> #U71(and(and(isNatList(activate(L)),n__isNatIListKind(activate(L))),n__and(isNat(N),n__isNatKind(N))),activate(L))
   #19: #length(cons(N,L)) -> #and(and(isNatList(activate(L)),n__isNatIListKind(activate(L))),n__and(isNat(N),n__isNatKind(N)))
   #20: #length(cons(N,L)) -> #and(isNatList(activate(L)),n__isNatIListKind(activate(L)))
   #21: #length(cons(N,L)) -> #isNatList(activate(L))
   #22: #length(cons(N,L)) -> #activate(L)
   #23: #length(cons(N,L)) -> #activate(L)
   #24: #length(cons(N,L)) -> #isNat(N)
   #25: #length(cons(N,L)) -> #activate(L)
   #26: #U31(tt(),V) -> #U32(isNatList(activate(V)))
   #27: #U31(tt(),V) -> #isNatList(activate(V))
   #28: #U31(tt(),V) -> #activate(V)
   #29: #activate(n__and(X1,X2)) -> #and(X1,X2)
   #30: #activate(n__s(X)) -> #s(X)
   #31: #take(s(M),cons(N,IL)) -> #U91(and(and(isNatIList(activate(IL)),n__isNatIListKind(activate(IL))),n__and(and(isNat(M),n__isNatKind(M)),n__and(isNat(N),n__isNatKind(N)))),activate(IL),M,N)
   #32: #take(s(M),cons(N,IL)) -> #and(and(isNatIList(activate(IL)),n__isNatIListKind(activate(IL))),n__and(and(isNat(M),n__isNatKind(M)),n__and(isNat(N),n__isNatKind(N))))
   #33: #take(s(M),cons(N,IL)) -> #and(isNatIList(activate(IL)),n__isNatIListKind(activate(IL)))
   #34: #take(s(M),cons(N,IL)) -> #isNatIList(activate(IL))
   #35: #take(s(M),cons(N,IL)) -> #activate(IL)
   #36: #take(s(M),cons(N,IL)) -> #activate(IL)
   #37: #take(s(M),cons(N,IL)) -> #and(isNat(M),n__isNatKind(M))
   #38: #take(s(M),cons(N,IL)) -> #isNat(M)
   #39: #take(s(M),cons(N,IL)) -> #isNat(N)
   #40: #take(s(M),cons(N,IL)) -> #activate(IL)
   #41: #activate(n__zeros()) -> #zeros()
   #42: #U42(tt(),V2) -> #U43(isNatIList(activate(V2)))
   #43: #U42(tt(),V2) -> #isNatIList(activate(V2))
   #44: #U42(tt(),V2) -> #activate(V2)
   #45: #U51(tt(),V1,V2) -> #U52(isNat(activate(V1)),activate(V2))
   #46: #U51(tt(),V1,V2) -> #isNat(activate(V1))
   #47: #U51(tt(),V1,V2) -> #activate(V1)
   #48: #U51(tt(),V1,V2) -> #activate(V2)
   #49: #activate(n__isNatIListKind(X)) -> #isNatIListKind(X)
   #50: #isNatIList(V) -> #U31(isNatIListKind(activate(V)),activate(V))
   #51: #isNatIList(V) -> #isNatIListKind(activate(V))
   #52: #isNatIList(V) -> #activate(V)
   #53: #isNatIList(V) -> #activate(V)
   #54: #isNat(n__s(V1)) -> #U21(isNatKind(activate(V1)),activate(V1))
   #55: #isNat(n__s(V1)) -> #isNatKind(activate(V1))
   #56: #isNat(n__s(V1)) -> #activate(V1)
   #57: #isNat(n__s(V1)) -> #activate(V1)
   #58: #U52(tt(),V2) -> #U53(isNatList(activate(V2)))
   #59: #U52(tt(),V2) -> #isNatList(activate(V2))
   #60: #U52(tt(),V2) -> #activate(V2)
   #61: #activate(n__cons(X1,X2)) -> #cons(X1,X2)
   #62: #U61(tt(),V1,V2) -> #U62(isNat(activate(V1)),activate(V2))
   #63: #U61(tt(),V1,V2) -> #isNat(activate(V1))
   #64: #U61(tt(),V1,V2) -> #activate(V1)
   #65: #U61(tt(),V1,V2) -> #activate(V2)
   #66: #isNatIListKind(n__take(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #67: #isNatIListKind(n__take(V1,V2)) -> #isNatKind(activate(V1))
   #68: #isNatIListKind(n__take(V1,V2)) -> #activate(V1)
   #69: #isNatIListKind(n__take(V1,V2)) -> #activate(V2)
   #70: #activate(n__take(X1,X2)) -> #take(X1,X2)
   #71: #and(tt(),X) -> #activate(X)
   #72: #take(0(),IL) -> #U81(and(isNatIList(IL),n__isNatIListKind(IL)))
   #73: #take(0(),IL) -> #and(isNatIList(IL),n__isNatIListKind(IL))
   #74: #take(0(),IL) -> #isNatIList(IL)
   #75: #isNatKind(n__s(V1)) -> #isNatKind(activate(V1))
   #76: #isNatKind(n__s(V1)) -> #activate(V1)
   #77: #isNat(n__length(V1)) -> #U11(isNatIListKind(activate(V1)),activate(V1))
   #78: #isNat(n__length(V1)) -> #isNatIListKind(activate(V1))
   #79: #isNat(n__length(V1)) -> #activate(V1)
   #80: #isNat(n__length(V1)) -> #activate(V1)
   #81: #activate(n__isNatKind(X)) -> #isNatKind(X)
   #82: #U71(tt(),L) -> #s(length(activate(L)))
   #83: #U71(tt(),L) -> #length(activate(L))
   #84: #U71(tt(),L) -> #activate(L)
   #85: #isNatKind(n__length(V1)) -> #isNatIListKind(activate(V1))
   #86: #isNatKind(n__length(V1)) -> #activate(V1)
   #87: #U91(tt(),IL,M,N) -> #cons(activate(N),n__take(activate(M),activate(IL)))
   #88: #U91(tt(),IL,M,N) -> #activate(N)
   #89: #U91(tt(),IL,M,N) -> #activate(M)
   #90: #U91(tt(),IL,M,N) -> #activate(IL)
   #91: #isNatIList(n__cons(V1,V2)) -> #U41(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
   #92: #isNatIList(n__cons(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #93: #isNatIList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #94: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #95: #isNatIList(n__cons(V1,V2)) -> #activate(V2)
   #96: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #97: #isNatIList(n__cons(V1,V2)) -> #activate(V2)
   #98: #isNatList(n__take(V1,V2)) -> #U61(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
   #99: #isNatList(n__take(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #100: #isNatList(n__take(V1,V2)) -> #isNatKind(activate(V1))
   #101: #isNatList(n__take(V1,V2)) -> #activate(V1)
   #102: #isNatList(n__take(V1,V2)) -> #activate(V2)
   #103: #isNatList(n__take(V1,V2)) -> #activate(V1)
   #104: #isNatList(n__take(V1,V2)) -> #activate(V2)
   #105: #zeros() -> #cons(0(),n__zeros())
   #106: #zeros() -> #0()
   #107: #activate(n__length(X)) -> #length(X)
   #108: #U41(tt(),V1,V2) -> #U42(isNat(activate(V1)),activate(V2))
   #109: #U41(tt(),V1,V2) -> #isNat(activate(V1))
   #110: #U41(tt(),V1,V2) -> #activate(V1)
   #111: #U41(tt(),V1,V2) -> #activate(V2)
   #112: #U62(tt(),V2) -> #U63(isNatIList(activate(V2)))
   #113: #U62(tt(),V2) -> #isNatIList(activate(V2))
   #114: #U62(tt(),V2) -> #activate(V2)
   #115: #U21(tt(),V1) -> #U22(isNat(activate(V1)))
   #116: #U21(tt(),V1) -> #isNat(activate(V1))
   #117: #U21(tt(),V1) -> #activate(V1)
   #118: #U81(tt()) -> #nil()
Number of SCCs: 1, DPs: 100, edges: 524
	SCC { #2..14 #18..25 #27..29 #31..40 #43..57 #59 #60 #62..71 #73..81 #83..86 #88..104 #107..111 #113 #114 #116 #117 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #U32(x1)	weight: 0
#isNatIListKind(x1)	weight: x1
isNatKind(x1)	weight: x1
   U21(x1,x2)	weight: 0
isNatList(x1)	weight: (/ 1 8)
   U11(x1,x2)	weight: 0
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
#isNat(x1)	weight: x1
#take(x1,x2)	weight: x1 + x2
   U42(x1,x2)	weight: (/ 3 8) + x2
   U91(x1,x2,x3,x4)	weight: x2 + x3 + x4
activate(x1)	weight: x1
n__isNatIListKind(x1)	weight: x1
  take(x1,x2)	weight: x1 + x2
   U71(x1,x2)	weight: (/ 1 4) + x1 + x2
n__isNatKind(x1)	weight: x1
 #U81(x1)	weight: 0
   and(x1,x2)	weight: x2
n__zeros()	weight: 0
isNatIList(x1)	weight: (/ 1 8)
   U43(x1)	weight: (/ 1 2)
#activate(x1)	weight: x1
 #U53(x1)	weight: 0
 #U43(x1)	weight: 0
   U63(x1)	weight: (/ 1 2)
 zeros()	weight: 0
n__nil()	weight: 0
 #U52(x1,x2)	weight: x2
   U12(x1)	weight: 0
  n__s(x1)	weight: x1
 #U42(x1,x2)	weight: x2
 #U12(x1)	weight: 0
 #U62(x1,x2)	weight: x2
     0()	weight: 0
#zeros()	weight: 0
n__take(x1,x2)	weight: x1 + x2
#isNatList(x1)	weight: x1
   #s(x1)	weight: 0
n__cons(x1,x2)	weight: x1 + x2
   nil()	weight: 0
isNatIListKind(x1)	weight: x1
   U62(x1,x2)	weight: (/ 3 8)
 #U63(x1)	weight: 0
 #nil()	weight: 0
   U32(x1)	weight: (/ 1 4) + x1
  n__0()	weight: 0
n__length(x1)	weight: (/ 1 4) + x1
 isNat(x1)	weight: (/ 1 8)
   U52(x1,x2)	weight: (/ 3 8)
   U61(x1,x2,x3)	weight: (/ 1 4) + x1
 #U51(x1,x2,x3)	weight: x2 + x3
 #U11(x1,x2)	weight: (/ 1 8) + x2
   U31(x1,x2)	weight: (/ 1 4) + x2
 #U41(x1,x2,x3)	weight: x2 + x3
  cons(x1,x2)	weight: x1 + x2
#isNatIList(x1)	weight: x1
 #U21(x1,x2)	weight: x2
   U81(x1)	weight: 0
 #U22(x1)	weight: 0
    tt()	weight: 0
n__and(x1,x2)	weight: x2
 #U71(x1,x2)	weight: x2
   U22(x1)	weight: 0
   U51(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
#isNatKind(x1)	weight: x1
   U53(x1)	weight: (/ 1 2)
length(x1)	weight: (/ 1 4) + x1
#length(x1)	weight: x1
   U41(x1,x2,x3)	weight: (/ 1 4) + x1
 #U31(x1,x2)	weight: x2
 #and(x1,x2)	weight: x2
 #U91(x1,x2,x3,x4)	weight: x2 + x3 + x4
 #U61(x1,x2,x3)	weight: x2 + x3
    Usable rules: { 1..5 17..23 27..33 37..61 }
    Removed DPs: #2 #3 #77..80 #85 #86 #107
Number of SCCs: 2, DPs: 83, edges: 333
	SCC { #18 #83 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... succeeded.
   #0()	weight: 0; 0
 #U32(x1)	weight: 0; 0
#isNatIListKind(x1)	weight: 0; 0
isNatKind(x1)	weight: max{0, (/ 1 4) + x1_1}; 0
   U21(x1,x2)	weight: max{0, (- (/ 1 8)) + x1_1}; 0
isNatList(x1)	weight: max{0, (/ 3 16) + x1_1}; x1_2
   U11(x1,x2)	weight: (max (/ 1 8) 0); 0
#cons(x1,x2)	weight: 0; 0
     s(x1)	weight: max{0, (/ 1 8) + x1_1}; x1_2
#isNat(x1)	weight: 0; 0
#take(x1,x2)	weight: 0; 0
   U42(x1,x2)	weight: max{0, (/ 7 16) + x1_1 + x1_2}; (- (/ 1 8)) + x2_2
   U91(x1,x2,x3,x4)	weight: max{0, (/ 3 16) + x3_1}; 0
activate(x1)	weight: max{0, x1_1}; x1_2
n__isNatIListKind(x1)	weight: (max (- (/ 1 8)) 0); 0
  take(x1,x2)	weight: max{0, (/ 1 16) + x1_1}; 0
   U71(x1,x2)	weight: max{0, (/ 3 16) + x2_1 + x1_2}; (- (/ 1 16))
n__isNatKind(x1)	weight: max{0, (/ 1 4) + x1_1}; 0
 #U81(x1)	weight: 0; 0
   and(x1,x2)	weight: max{0, x2_1 + x1_2}; x1_2
n__zeros()	weight: (/ 1 16); (- (/ 1 8))
isNatIList(x1)	weight: (max (/ 3 16) 0); 0
   U43(x1)	weight: max{0, (- (/ 3 16)) + x1_1}; (- (/ 1 16))
#activate(x1)	weight: 0; 0
 #U53(x1)	weight: 0; 0
 #U43(x1)	weight: 0; 0
   U63(x1)	weight: 0; 0
 zeros()	weight: (/ 1 16); (- (/ 1 8))
n__nil()	weight: (/ 1 16); 0
 #U52(x1,x2)	weight: 0; 0
   U12(x1)	weight: (max (/ 1 16) 0); 0
  n__s(x1)	weight: max{0, (/ 1 8) + x1_1}; x1_2
 #U42(x1,x2)	weight: 0; 0
 #U12(x1)	weight: 0; 0
 #U62(x1,x2)	weight: 0; 0
     0()	weight: (/ 1 16); (- (/ 1 16))
#zeros()	weight: 0; 0
n__take(x1,x2)	weight: max{0, (/ 1 16) + x1_1}; 0
#isNatList(x1)	weight: 0; 0
   #s(x1)	weight: 0; 0
n__cons(x1,x2)	weight: max{0, (/ 1 8) + x2_1 + x2_2}; x2_2
   nil()	weight: (/ 1 16); 0
isNatIListKind(x1)	weight: (max (- (/ 1 16)) 0); 0
   U62(x1,x2)	weight: 0; 0
 #U63(x1)	weight: 0; 0
 #nil()	weight: 0; 0
   U32(x1)	weight: max{0, (/ 1 16) + x1_1 + x1_2}; (- (/ 1 16))
  n__0()	weight: (/ 1 16); (- (/ 1 16))
n__length(x1)	weight: max{0, (/ 1 16) + x1_1}; (- (/ 1 16))
 isNat(x1)	weight: max{0, (/ 1 16) + x1_1}; 0
   U52(x1,x2)	weight: 0; x2_2
   U61(x1,x2,x3)	weight: 0; 0
 #U51(x1,x2,x3)	weight: 0; 0
 #U11(x1,x2)	weight: 0; 0
   U31(x1,x2)	weight: 0; (- (/ 1 8)) + x2_2
 #U41(x1,x2,x3)	weight: 0; 0
  cons(x1,x2)	weight: max{0, (/ 1 8) + x2_1 + x2_2}; x2_2
#isNatIList(x1)	weight: 0; 0
 #U21(x1,x2)	weight: 0; 0
   U81(x1)	weight: (max (/ 1 16) 0); 0
 #U22(x1)	weight: 0; 0
    tt()	weight: 0; 0
n__and(x1,x2)	weight: max{0, x2_1 + x1_2}; x1_2
 #U71(x1,x2)	weight: max{0, (/ 1 16) + x2_1 + x1_2}; 0
   U22(x1)	weight: max{0, (- (/ 1 16)) + x1_2}; 0
   U51(x1,x2,x3)	weight: max{0, (- (/ 1 16)) + x3_2 + x2_2}; x3_2
#isNatKind(x1)	weight: 0; 0
   U53(x1)	weight: max{0, (- (/ 1 16)) + x1_2}; x1_2
length(x1)	weight: max{0, (/ 1 16) + x1_1}; (- (/ 1 16))
#length(x1)	weight: max{0, (- (/ 1 16)) + x1_1}; 0
   U41(x1,x2,x3)	weight: max{0, (/ 3 8) + x3_1 + x2_1 + x2_2 + x1_1}; (- (/ 3 16)) + x3_2
 #U31(x1,x2)	weight: 0; 0
 #and(x1,x2)	weight: 0; 0
 #U91(x1,x2,x3,x4)	weight: 0; 0
 #U61(x1,x2,x3)	weight: 0; 0
    Usable rules: { 1..5 11..23 27..61 }
    Removed DPs: #83
Number of SCCs: 1, DPs: 81, edges: 331
	SCC { #4..14 #27..29 #31..40 #43..57 #59 #60 #62..71 #73..76 #81 #88..104 #108..111 #113 #114 #116 #117 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
 #U32(x1)	weight: 0
#isNatIListKind(x1)	weight: (/ 1 8) + x1
isNatKind(x1)	weight: (/ 1 8) + x1
   U21(x1,x2)	weight: (/ 1 8)
isNatList(x1)	weight: (/ 1 16)
   U11(x1,x2)	weight: x1
#cons(x1,x2)	weight: 0
     s(x1)	weight: x1
#isNat(x1)	weight: (/ 1 8) + x1
#take(x1,x2)	weight: (/ 3 8) + x1 + x2
   U42(x1,x2)	weight: (/ 1 16) + x2
   U91(x1,x2,x3,x4)	weight: (/ 7 16) + x2 + x3 + x4
activate(x1)	weight: x1
n__isNatIListKind(x1)	weight: (/ 1 8) + x1
  take(x1,x2)	weight: (/ 7 16) + x1 + x2
   U71(x1,x2)	weight: x2
n__isNatKind(x1)	weight: (/ 1 8) + x1
 #U81(x1)	weight: 0
   and(x1,x2)	weight: x2
n__zeros()	weight: 0
isNatIList(x1)	weight: (/ 1 16)
   U43(x1)	weight: (/ 1 8)
#activate(x1)	weight: x1
 #U53(x1)	weight: 0
 #U43(x1)	weight: 0
   U63(x1)	weight: x1
 zeros()	weight: 0
n__nil()	weight: 0
 #U52(x1,x2)	weight: (/ 3 16) + x2
   U12(x1)	weight: (/ 1 16)
  n__s(x1)	weight: x1
 #U42(x1,x2)	weight: (/ 5 16) + x2
 #U12(x1)	weight: 0
 #U62(x1,x2)	weight: (/ 3 8) + x2
     0()	weight: 0
#zeros()	weight: 0
n__take(x1,x2)	weight: (/ 7 16) + x1 + x2
#isNatList(x1)	weight: (/ 3 16) + x1
   #s(x1)	weight: 0
n__cons(x1,x2)	weight: x1 + x2
   nil()	weight: 0
isNatIListKind(x1)	weight: (/ 1 8) + x1
   U62(x1,x2)	weight: x1
 #U63(x1)	weight: 0
 #nil()	weight: 0
   U32(x1)	weight: x1
  n__0()	weight: 0
n__length(x1)	weight: x1
 isNat(x1)	weight: (/ 1 16)
   U52(x1,x2)	weight: (/ 1 16)
   U61(x1,x2,x3)	weight: x1
 #U51(x1,x2,x3)	weight: (/ 3 16) + x2 + x3
 #U11(x1,x2)	weight: (/ 1 16)
   U31(x1,x2)	weight: x1 + x2
 #U41(x1,x2,x3)	weight: (/ 5 16) + x2 + x3
  cons(x1,x2)	weight: x1 + x2
#isNatIList(x1)	weight: (/ 5 16) + x1
 #U21(x1,x2)	weight: (/ 1 8) + x2
   U81(x1)	weight: (/ 7 16)
 #U22(x1)	weight: 0
    tt()	weight: 0
n__and(x1,x2)	weight: x2
 #U71(x1,x2)	weight: (/ 1 16)
   U22(x1)	weight: (/ 1 8) + x1
   U51(x1,x2,x3)	weight: x1 + x2
#isNatKind(x1)	weight: (/ 1 16) + x1
   U53(x1)	weight: (/ 1 8)
length(x1)	weight: x1
#length(x1)	weight: 0
   U41(x1,x2,x3)	weight: x1 + x3
 #U31(x1,x2)	weight: (/ 1 4) + x2
 #and(x1,x2)	weight: x2
 #U91(x1,x2,x3,x4)	weight: (/ 5 16) + x2 + x3 + x4
 #U61(x1,x2,x3)	weight: (/ 7 16) + x2 + x3
    Usable rules: { 1 17..20 27..33 37..61 }
    Removed DPs: #5..7 #9..14 #27 #28 #31..40 #44 #46..48 #50..53 #55..57 #60 #62..70 #73 #74 #76 #81 #88..90 #92..104 #109..111 #113 #114 #117
Number of SCCs: 5, DPs: 13, edges: 14
	SCC { #75 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)...