Input TRS:
    1: from(X) -> cons(X,n__from(s(X)))
    2: length(n__nil()) -> 0()
    3: length(n__cons(X,Y)) -> s(length1(activate(Y)))
    4: length1(X) -> length(activate(X))
    5: from(X) -> n__from(X)
    6: nil() -> n__nil()
    7: cons(X1,X2) -> n__cons(X1,X2)
    8: activate(n__from(X)) -> from(X)
    9: activate(n__nil()) -> nil()
    10: activate(n__cons(X1,X2)) -> cons(X1,X2)
    11: activate(X) -> X
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__nil()) -> #nil()
   #2: #activate(n__cons(X1,X2)) -> #cons(X1,X2)
   #3: #length(n__cons(X,Y)) -> #length1(activate(Y))
   #4: #length(n__cons(X,Y)) -> #activate(Y)
   #5: #from(X) -> #cons(X,n__from(s(X)))
   #6: #activate(n__from(X)) -> #from(X)
   #7: #length1(X) -> #length(activate(X))
   #8: #length1(X) -> #activate(X)
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #3 #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #length(n__cons(X,n__from(X_{2})))	-#3->
  #length1(activate(n__from(X_{2})))	--->*
  #length1(activate(n__from(X_{2})))	-#7->
  #length(activate(activate(n__from(X_{2}))))	--->*
  #length(n__cons(X_{2},n__from(s(X_{2}))))
  Looping with: [ X := X_{2}; X_{2} := s(X_{2}); ]
