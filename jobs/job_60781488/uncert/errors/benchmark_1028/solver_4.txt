Input TRS:
    1: from(X) -> cons(X,n__from(n__s(X)))
    2: sel(0(),cons(X,XS)) -> X
    3: sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
    4: minus(X,0()) -> 0()
    5: minus(s(X),s(Y)) -> minus(X,Y)
    6: quot(0(),s(Y)) -> 0()
    7: quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
    8: zWquot(XS,nil()) -> nil()
    9: zWquot(nil(),XS) -> nil()
    10: zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),n__zWquot(activate(XS),activate(YS)))
    11: from(X) -> n__from(X)
    12: s(X) -> n__s(X)
    13: zWquot(X1,X2) -> n__zWquot(X1,X2)
    14: activate(n__from(X)) -> from(activate(X))
    15: activate(n__s(X)) -> s(activate(X))
    16: activate(n__zWquot(X1,X2)) -> zWquot(activate(X1),activate(X2))
    17: activate(X) -> X
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__from(X)) -> #from(activate(X))
   #2: #activate(n__from(X)) -> #activate(X)
   #3: #quot(s(X),s(Y)) -> #s(quot(minus(X,Y),s(Y)))
   #4: #quot(s(X),s(Y)) -> #quot(minus(X,Y),s(Y))
   #5: #quot(s(X),s(Y)) -> #minus(X,Y)
   #6: #zWquot(cons(X,XS),cons(Y,YS)) -> #quot(X,Y)
   #7: #zWquot(cons(X,XS),cons(Y,YS)) -> #activate(XS)
   #8: #zWquot(cons(X,XS),cons(Y,YS)) -> #activate(YS)
   #9: #minus(s(X),s(Y)) -> #minus(X,Y)
   #10: #activate(n__zWquot(X1,X2)) -> #zWquot(activate(X1),activate(X2))
   #11: #activate(n__zWquot(X1,X2)) -> #activate(X1)
   #12: #activate(n__zWquot(X1,X2)) -> #activate(X2)
   #13: #sel(s(N),cons(X,XS)) -> #sel(N,activate(XS))
   #14: #sel(s(N),cons(X,XS)) -> #activate(XS)
   #15: #activate(n__s(X)) -> #s(activate(X))
   #16: #activate(n__s(X)) -> #activate(X)
Number of SCCs: 3, DPs: 9, edges: 34
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
#zWquot(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
activate(x1)	weight: 0
n__from(x1)	weight: 0
#activate(x1)	weight: 0
zWquot(x1,x2)	weight: 0
n__zWquot(x1,x2)	weight: 0
  n__s(x1)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
 #sel(x1,x2)	weight: 0
  from(x1)	weight: 0
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: x2
#from(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quot(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 2, DPs: 8, edges: 33
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
#zWquot(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4) + x2
activate(x1)	weight: (/ 1 4)
n__from(x1)	weight: (/ 3 4)
#activate(x1)	weight: 0
zWquot(x1,x2)	weight: (/ 1 2)
n__zWquot(x1,x2)	weight: (/ 3 4) + x1 + x2
  n__s(x1)	weight: (/ 1 2)
     0()	weight: 0
  quot(x1,x2)	weight: (/ 1 4) + x1
 #sel(x1,x2)	weight: x1
  from(x1)	weight: (/ 1 2)
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: 0
#from(x1)	weight: 0
  cons(x1,x2)	weight: (/ 3 4)
#quot(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #13
Number of SCCs: 1, DPs: 7, edges: 32
	SCC { #2 #7 #8 #10..12 #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: x1
#zWquot(x1,x2)	weight: (/ 1 4) + x1 + x2
 minus(x1,x2)	weight: (/ 1 4) + x2
activate(x1)	weight: x1
n__from(x1)	weight: (/ 1 4) + x1
#activate(x1)	weight: x1
zWquot(x1,x2)	weight: (/ 1 2) + x1 + x2
n__zWquot(x1,x2)	weight: (/ 1 2) + x1 + x2
  n__s(x1)	weight: x1
     0()	weight: 0
  quot(x1,x2)	weight: (/ 1 4) + x1
 #sel(x1,x2)	weight: 0
  from(x1)	weight: (/ 1 4) + x1
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: 0
#from(x1)	weight: 0
  cons(x1,x2)	weight: x2
#quot(x1,x2)	weight: 0
    Usable rules: { 1 8..17 }
    Removed DPs: #2 #7 #8 #10..12
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: x1
#zWquot(x1,x2)	weight: (/ 1 4)
 minus(x1,x2)	weight: (/ 1 4) + x2
activate(x1)	weight: (/ 1 4)
n__from(x1)	weight: x1
#activate(x1)	weight: x1
zWquot(x1,x2)	weight: (/ 1 2)
n__zWquot(x1,x2)	weight: (/ 3 4) + x1 + x2
  n__s(x1)	weight: (/ 1 4) + x1
     0()	weight: 0
  quot(x1,x2)	weight: (/ 1 4) + x1
 #sel(x1,x2)	weight: 0
  from(x1)	weight: (/ 1 4)
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
#minus(x1,x2)	weight: 0
#from(x1)	weight: 0
  cons(x1,x2)	weight: x2
#quot(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #16
Number of SCCs: 0, DPs: 0, edges: 0
