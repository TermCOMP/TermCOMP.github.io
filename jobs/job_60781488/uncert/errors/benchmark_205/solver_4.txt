Input TRS:
    1: le(0(),y,z) -> greater(y,z)
    2: le(s(x),0(),z) -> false()
    3: le(s(x),s(y),0()) -> false()
    4: le(s(x),s(y),s(z)) -> le(x,y,z)
    5: greater(x,0()) -> first()
    6: greater(0(),s(y)) -> second()
    7: greater(s(x),s(y)) -> greater(x,y)
    8: double(0()) -> 0()
    9: double(s(x)) -> s(s(double(x)))
    10: triple(x) -> if(le(x,x,double(x)),x,0(),0())
    11: if(false(),x,y,z) -> true()
    12: if(first(),x,y,z) -> if(le(s(x),y,s(z)),s(x),y,s(z))
    13: if(second(),x,y,z) -> if(le(s(x),s(y),z),s(x),s(y),z)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing le
1: le❆1_0(y,z) -> greater(y,z)
2: le❆1_s(x,0(),z) -> false()
3: le❆1_s(x,s(y),0()) -> false()
4: le❆1_s(x,s(y),s(z)) -> le(x,y,z)
5: greater(x,0()) -> first()
6: greater(0(),s(y)) -> second()
7: greater(s(x),s(y)) -> greater(x,y)
8: double(0()) -> 0()
9: double(s(x)) -> s(s(double(x)))
10: triple(x) -> if(le(x,x,double(x)),x,0(),0())
11: if(false(),x,y,z) -> true()
12: if(first(),x,y,z) -> if(le❆1_s(x,y,s(z)),s(x),y,s(z))
13: if(second(),x,y,z) -> if(le❆1_s(x,s(y),z),s(x),s(y),z)
14: le(0(),_2,_3) ->= le❆1_0(_2,_3)
15: le(s(_1),_3,_4) ->= le❆1_s(_1,_3,_4)
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #if(second(),x,y,z) -> #if(le❆1_s(x,s(y),z),s(x),s(y),z)
   #2: #if(second(),x,y,z) -> #le❆1_s(x,s(y),z)
   #3: #double(s(x)) -> #double(x)
   #4: #if(first(),x,y,z) -> #if(le❆1_s(x,y,s(z)),s(x),y,s(z))
   #5: #if(first(),x,y,z) -> #le❆1_s(x,y,s(z))
   #6: #le(0(),_2,_3) ->? #le❆1_0(_2,_3)
   #7: #greater(s(x),s(y)) -> #greater(x,y)
   #8: #triple(x) -> #if(le(x,x,double(x)),x,0(),0())
   #9: #triple(x) -> #le(x,x,double(x))
   #10: #triple(x) -> #double(x)
   #11: #le❆1_0(y,z) -> #greater(y,z)
   #12: #le(s(_1),_3,_4) ->? #le❆1_s(_1,_3,_4)
   #13: #le❆1_s(x,s(y),s(z)) -> #le(x,y,z)
Number of SCCs: 4, DPs: 6, edges: 8
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2,x3)	weight: 0
#triple(x1)	weight: 0
greater(x1,x2)	weight: 0
 false()	weight: 0
triple(x1)	weight: 0
second()	weight: 0
  true()	weight: 0
#le❆1_0(x1,x2)	weight: 0
le❆1_s(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#double(x1)	weight: x1
double(x1)	weight: 0
#le❆1_s(x1,x2,x3)	weight: 0
 first()	weight: 0
#greater(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
le❆1_0(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3
Number of SCCs: 3, DPs: 5, edges: 7
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2,x3)	weight: 0
#triple(x1)	weight: 0
greater(x1,x2)	weight: 0
 false()	weight: 0
triple(x1)	weight: 0
second()	weight: 0
  true()	weight: 0
#le❆1_0(x1,x2)	weight: 0
le❆1_s(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#double(x1)	weight: 0
double(x1)	weight: 0
#le❆1_s(x1,x2,x3)	weight: 0
 first()	weight: 0
#greater(x1,x2)	weight: x2
  #if(x1,x2,x3,x4)	weight: 0
le❆1_0(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 2, DPs: 4, edges: 6
	SCC { #12 #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2,x3)	weight: (/ 1 4) + x3
#triple(x1)	weight: 0
greater(x1,x2)	weight: 0
 false()	weight: 0
triple(x1)	weight: 0
second()	weight: 0
  true()	weight: 0
#le❆1_0(x1,x2)	weight: 0
le❆1_s(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3,x4)	weight: 0
#double(x1)	weight: 0
double(x1)	weight: 0
#le❆1_s(x1,x2,x3)	weight: x3
 first()	weight: 0
#greater(x1,x2)	weight: 0
  #if(x1,x2,x3,x4)	weight: 0
le❆1_0(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #12 #13
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #1 #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
