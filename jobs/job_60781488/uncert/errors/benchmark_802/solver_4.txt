Input TRS:
    1: minus(x,0()) -> x
    2: minus(s(x),s(y)) -> minus(x,y)
    3: le(0(),y) -> true()
    4: le(s(x),0()) -> false()
    5: le(s(x),s(y)) -> le(x,y)
    6: quot(x,s(y)) -> if_quot(le(s(y),x),x,s(y))
    7: if_quot(true(),x,y) -> s(quot(minus(x,y),y))
    8: if_quot(false(),x,y) -> 0()
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing le
1: minus(x,0()) -> x
2: minus(s(x),s(y)) -> minus(x,y)
3: le❆1_0(y) -> true()
4: le❆1_s(x,0()) -> false()
5: le❆1_s(x,s(y)) -> le(x,y)
6: quot(x,s(y)) -> if_quot(le❆1_s(y,x),x,s(y))
7: if_quot(true(),x,y) -> s(quot(minus(x,y),y))
8: if_quot(false(),x,y) -> 0()
9: le(0(),_1) ->= le❆1_0(_1)
10: le(s(_1),_2) ->= le❆1_s(_1,_2)
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #quot(x,s(y)) -> #if_quot(le❆1_s(y,x),x,s(y))
   #3: #quot(x,s(y)) -> #le❆1_s(y,x)
   #4: #le(0(),_1) ->? #le❆1_0(_1)
   #5: #if_quot(true(),x,y) -> #quot(minus(x,y),y)
   #6: #if_quot(true(),x,y) -> #minus(x,y)
   #7: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
   #8: #le❆1_s(x,s(y)) -> #le(x,y)
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
#if_quot(x1,x2,x3)	weight: 0
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: x2
if_quot(x1,x2,x3)	weight: 0
#quot(x1,x2)	weight: 0
le❆1_0(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #7 #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x1
 minus(x1,x2)	weight: 0
#if_quot(x1,x2,x3)	weight: 0
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: (/ 1 4) + x1
#minus(x1,x2)	weight: 0
if_quot(x1,x2,x3)	weight: 0
#quot(x1,x2)	weight: 0
le❆1_0(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #7 #8
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #2 #5 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
