Input TRS:
    1: cond1(true(),x,y) -> cond2(gr(x,0()),x,y)
    2: cond2(true(),x,y) -> cond1(or(gr(x,0()),gr(y,0())),p(x),y)
    3: cond2(false(),x,y) -> cond3(gr(y,0()),x,y)
    4: cond3(true(),x,y) -> cond1(or(gr(x,0()),gr(y,0())),x,p(y))
    5: cond3(false(),x,y) -> cond1(or(gr(x,0()),gr(y,0())),x,y)
    6: gr(0(),x) -> false()
    7: gr(s(x),0()) -> true()
    8: gr(s(x),s(y)) -> gr(x,y)
    9: or(false(),false()) -> false()
    10: or(true(),x) -> true()
    11: or(x,true()) -> true()
    12: p(0()) -> 0()
    13: p(s(x)) -> x
Number of strict rules: 13
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #cond2(true(),x,y) -> #cond1(or(gr(x,0()),gr(y,0())),p(x),y)
   #2: #cond2(true(),x,y) -> #or(gr(x,0()),gr(y,0()))
   #3: #cond2(true(),x,y) -> #gr(x,0())
   #4: #cond2(true(),x,y) -> #gr(y,0())
   #5: #cond2(true(),x,y) -> #p(x)
   #6: #cond3(false(),x,y) -> #cond1(or(gr(x,0()),gr(y,0())),x,y)
   #7: #cond3(false(),x,y) -> #or(gr(x,0()),gr(y,0()))
   #8: #cond3(false(),x,y) -> #gr(x,0())
   #9: #cond3(false(),x,y) -> #gr(y,0())
   #10: #cond2(false(),x,y) -> #cond3(gr(y,0()),x,y)
   #11: #cond2(false(),x,y) -> #gr(y,0())
   #12: #cond1(true(),x,y) -> #cond2(gr(x,0()),x,y)
   #13: #cond1(true(),x,y) -> #gr(x,0())
   #14: #gr(s(x),s(y)) -> #gr(x,y)
   #15: #cond3(true(),x,y) -> #cond1(or(gr(x,0()),gr(y,0())),x,p(y))
   #16: #cond3(true(),x,y) -> #or(gr(x,0()),gr(y,0()))
   #17: #cond3(true(),x,y) -> #gr(x,0())
   #18: #cond3(true(),x,y) -> #gr(y,0())
   #19: #cond3(true(),x,y) -> #p(y)
Number of SCCs: 2, DPs: 6, edges: 8
	SCC { #14 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 cond2(x1,x2,x3)	weight: 0
#cond3(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
#cond1(x1,x2,x3)	weight: 0
 false()	weight: 0
   #p(x1)	weight: 0
  true()	weight: 0
 cond1(x1,x2,x3)	weight: 0
     p(x1)	weight: 0
     0()	weight: 0
  #gr(x1,x2)	weight: x2
    or(x1,x2)	weight: 0
 cond3(x1,x2,x3)	weight: 0
#cond2(x1,x2,x3)	weight: 0
  #or(x1,x2)	weight: 0
    gr(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #14
Number of SCCs: 1, DPs: 5, edges: 7
	SCC { #1 #6 #10 #12 #15 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... succeeded.
 cond2(x1,x2,x3)	weight: 0
#cond3(x1,x2,x3)	weight: max{0, (/ 1 4) + x2}
     s(x1)	weight: max{0, (/ 3 8) + x1}
#cond1(x1,x2,x3)	weight: max{0, (/ 1 4) + x2}
 false()	weight: (/ 1 4)
   #p(x1)	weight: 0
  true()	weight: (/ 1 2)
 cond1(x1,x2,x3)	weight: 0
     p(x1)	weight: max{0, (- (/ 3 8)) + x1}
     0()	weight: 0
  #gr(x1,x2)	weight: 0
    or(x1,x2)	weight: 0
 cond3(x1,x2,x3)	weight: 0
#cond2(x1,x2,x3)	weight: max{0, (- (/ 1 8)) + x1, (/ 1 4) + x2}
  #or(x1,x2)	weight: 0
    gr(x1,x2)	weight: max{0, (/ 1 4) + x1}
    Usable rules: { 6 7 12 13 }
    Removed DPs: #1
Number of SCCs: 1, DPs: 4, edges: 5
	SCC { #6 #10 #12 #15 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... succeeded.
 cond2(x1,x2,x3)	weight: 0
#cond3(x1,x2,x3)	weight: max{0, (- (/ 7 32)) + x1, (- (/ 1 32)) + x3}
     s(x1)	weight: max{0, (/ 3 16) + x1}
#cond1(x1,x2,x3)	weight: max{0, (- (/ 3 8)) + x1, (- (/ 1 32)) + x3}
 false()	weight: (/ 1 16)
   #p(x1)	weight: 0
  true()	weight: (/ 1 4)
 cond1(x1,x2,x3)	weight: 0
     p(x1)	weight: max{0, (- (/ 1 32)) + x1}
     0()	weight: 0
  #gr(x1,x2)	weight: 0
    or(x1,x2)	weight: max{0, (/ 1 4) + x2}
 cond3(x1,x2,x3)	weight: 0
#cond2(x1,x2,x3)	weight: max{0, (- (/ 1 32)) + x3}
  #or(x1,x2)	weight: 0
    gr(x1,x2)	weight: max{0, (/ 1 16) + x2 + x1}
    Usable rules: { 6 7 9..13 }
    Removed DPs: #15
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #6 #10 #12 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
