Input TRS:
    1: app(app(plus(),0()),y) -> y
    2: app(app(plus(),app(s(),x)),y) -> app(s(),app(app(plus(),x),y))
    3: app(app(times(),0()),y) -> 0()
    4: app(app(times(),app(s(),x)),y) -> app(app(plus(),app(app(times(),x),y)),y)
    5: app(app(app(comp(),f),g),x) -> app(f,app(g,x))
    6: app(twice(),f) -> app(app(comp(),f),f)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_plus(0(),y) -> y
2: app❆2_plus(app❆1_s(x),y) -> app❆1_s(app❆2_plus(x,y))
3: app❆2_times(0(),y) -> 0()
4: app❆2_times(app❆1_s(x),y) -> app❆2_plus(app❆2_times(x,y),y)
5: app❆3_comp(f,g,x) -> app(f,app(g,x))
6: app❆1_twice(f) -> app❆2_comp(f,f)
7: app(plus(),_1) ->= app❆1_plus(_1)
8: app(app❆1_plus(_1),_2) ->= app❆2_plus(_1,_2)
9: app(times(),_1) ->= app❆1_times(_1)
10: app(app❆1_times(_1),_2) ->= app❆2_times(_1,_2)
11: app(s(),_1) ->= app❆1_s(_1)
12: app(twice(),_1) ->= app❆1_twice(_1)
13: app(comp(),_1) ->= app❆1_comp(_1)
14: app(app❆1_comp(_1),_2) ->= app❆2_comp(_1,_2)
15: app(app❆2_comp(_1,_2),_3) ->= app❆3_comp(_1,_2,_3)
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(x,y)
   #2: #app(twice(),_1) ->? #app❆1_twice(_1)
   #3: #app(app❆1_times(_1),_2) ->? #app❆2_times(_1,_2)
   #4: #app❆3_comp(f,g,x) -> #app(f,app(g,x))
   #5: #app❆3_comp(f,g,x) -> #app(g,x)
   #6: #app(app❆1_plus(_1),_2) ->? #app❆2_plus(_1,_2)
   #7: #app(app❆2_comp(_1,_2),_3) ->? #app❆3_comp(_1,_2,_3)
   #8: #app❆2_times(app❆1_s(x),y) -> #app❆2_plus(app❆2_times(x,y),y)
   #9: #app❆2_times(app❆1_s(x),y) -> #app❆2_times(x,y)
Number of SCCs: 3, DPs: 5, edges: 6
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s()	weight: 0
app❆1_plus(x1)	weight: 0
 twice()	weight: 0
app❆2_comp(x1,x2)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆1_comp(x1)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x1
 times()	weight: 0
 #app(x1,x2)	weight: 0
#app❆3_comp(x1,x2,x3)	weight: 0
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
app❆2_times(x1,x2)	weight: 0
#app❆1_twice(x1)	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆3_comp(x1,x2,x3)	weight: 0
app❆1_twice(x1)	weight: 0
app❆1_times(x1)	weight: 0
  comp()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s()	weight: 0
app❆1_plus(x1)	weight: 0
 twice()	weight: 0
app❆2_comp(x1,x2)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆1_comp(x1)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
 #app(x1,x2)	weight: 0
#app❆3_comp(x1,x2,x3)	weight: 0
#app❆2_times(x1,x2)	weight: x1
  plus()	weight: 0
app❆2_times(x1,x2)	weight: 0
#app❆1_twice(x1)	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆3_comp(x1,x2,x3)	weight: 0
app❆1_twice(x1)	weight: 0
app❆1_times(x1)	weight: 0
  comp()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 1, DPs: 3, edges: 4
	SCC { #4 #5 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s()	weight: 0
app❆1_plus(x1)	weight: (/ 1 4) + x1
 twice()	weight: 0
app❆2_comp(x1,x2)	weight: (/ 1 2) + x1 + x2
app❆2_plus(x1,x2)	weight: (/ 5 8)
app❆1_comp(x1)	weight: (/ 1 4) + x1
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
 #app(x1,x2)	weight: x1
#app❆3_comp(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
app❆2_times(x1,x2)	weight: (/ 1 2)
#app❆1_twice(x1)	weight: 0
app❆1_s(x1)	weight: (/ 3 4)
app❆3_comp(x1,x2,x3)	weight: 0
app❆1_twice(x1)	weight: (/ 1 4)
app❆1_times(x1)	weight: (/ 1 4)
  comp()	weight: 0
   app(x1,x2)	weight: (/ 1 8) + x1
    Usable rules: { }
    Removed DPs: #4 #5 #7
Number of SCCs: 0, DPs: 0, edges: 0
