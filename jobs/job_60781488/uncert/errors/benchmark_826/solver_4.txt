Input TRS:
    1: fst(0(),Z) -> nil()
    2: fst(s(X),cons(Y,Z)) -> cons(Y,fst(X,Z))
    3: from(X) -> cons(X,from(s(X)))
    4: add(0(),X) -> X
    5: add(s(X),Y) -> s(add(X,Y))
    6: len(nil()) -> 0()
    7: len(cons(X,Z)) -> s(len(Z))
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #fst(s(X),cons(Y,Z)) -> #fst(X,Z)
   #2: #len(cons(X,Z)) -> #len(Z)
   #3: #add(s(X),Y) -> #add(X,Y)
   #4: #from(X) -> #from(s(X))
Number of SCCs: 4, DPs: 4, edges: 4
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#4->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
