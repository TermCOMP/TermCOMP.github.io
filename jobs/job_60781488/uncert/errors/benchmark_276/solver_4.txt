Input TRS:
    1: minus(0(),y) -> 0()
    2: minus(s(x),y) -> if(gt(s(x),y),x,y)
    3: if(true(),x,y) -> s(minus(x,y))
    4: if(false(),x,y) -> 0()
    5: mod(x,0()) -> 0()
    6: mod(x,s(y)) -> if1(lt(x,s(y)),x,s(y))
    7: if1(true(),x,y) -> x
    8: if1(false(),x,y) -> mod(minus(x,y),y)
    9: gt(0(),y) -> false()
    10: gt(s(x),0()) -> true()
    11: gt(s(x),s(y)) -> gt(x,y)
    12: lt(x,0()) -> false()
    13: lt(0(),s(x)) -> true()
    14: lt(s(x),s(y)) -> lt(x,y)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing gt
1: minus(0(),y) -> 0()
2: minus(s(x),y) -> if(gt❆1_s(x,y),x,y)
3: if(true(),x,y) -> s(minus(x,y))
4: if(false(),x,y) -> 0()
5: mod(x,0()) -> 0()
6: mod(x,s(y)) -> if1(lt(x,s(y)),x,s(y))
7: if1(true(),x,y) -> x
8: if1(false(),x,y) -> mod(minus(x,y),y)
9: gt❆1_0(y) -> false()
10: gt❆1_s(x,0()) -> true()
11: gt❆1_s(x,s(y)) -> gt(x,y)
12: lt(x,0()) -> false()
13: lt(0(),s(x)) -> true()
14: lt(s(x),s(y)) -> lt(x,y)
15: gt(0(),_1) ->= gt❆1_0(_1)
16: gt(s(_1),_2) ->= gt❆1_s(_1,_2)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #minus(s(x),y) -> #if(gt❆1_s(x,y),x,y)
   #2: #minus(s(x),y) -> #gt❆1_s(x,y)
   #3: #mod(x,s(y)) -> #if1(lt(x,s(y)),x,s(y))
   #4: #mod(x,s(y)) -> #lt(x,s(y))
   #5: #gt❆1_s(x,s(y)) -> #gt(x,y)
   #6: #lt(s(x),s(y)) -> #lt(x,y)
   #7: #gt(s(_1),_2) ->? #gt❆1_s(_1,_2)
   #8: #if(true(),x,y) -> #minus(x,y)
   #9: #if1(false(),x,y) -> #mod(minus(x,y),y)
   #10: #if1(false(),x,y) -> #minus(x,y)
   #11: #gt(0(),_1) ->? #gt❆1_0(_1)
Number of SCCs: 4, DPs: 7, edges: 7
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
  #lt(x1,x2)	weight: x2
gt❆1_0(x1)	weight: 0
    gt(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
   if1(x1,x2,x3)	weight: 0
 false()	weight: 0
  true()	weight: 0
 #if1(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#gt❆1_0(x1)	weight: 0
  #gt(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
gt❆1_s(x1,x2)	weight: 0
    lt(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 3, DPs: 6, edges: 6
	SCC { #5 #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
  #lt(x1,x2)	weight: 0
gt❆1_0(x1)	weight: 0
    gt(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
   if1(x1,x2,x3)	weight: 0
 false()	weight: 0
  true()	weight: 0
 #if1(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#gt❆1_0(x1)	weight: 0
  #gt(x1,x2)	weight: x1
#gt❆1_s(x1,x2)	weight: (/ 1 4) + x1
#minus(x1,x2)	weight: 0
 #mod(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: 0
gt❆1_s(x1,x2)	weight: 0
    lt(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #5 #7
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #1 #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 2) + x1
  #lt(x1,x2)	weight: 0
gt❆1_0(x1)	weight: (/ 1 4)
    gt(x1,x2)	weight: x1 + x2
 minus(x1,x2)	weight: 0
   mod(x1,x2)	weight: 0
   if1(x1,x2,x3)	weight: 0
 false()	weight: 0
  true()	weight: 0
 #if1(x1,x2,x3)	weight: 0
     0()	weight: 0
    if(x1,x2,x3)	weight: 0
#gt❆1_0(x1)	weight: 0
  #gt(x1,x2)	weight: 0
#gt❆1_s(x1,x2)	weight: (/ 1 4)
#minus(x1,x2)	weight: x1
 #mod(x1,x2)	weight: 0
  #if(x1,x2,x3)	weight: (/ 1 4) + x2
gt❆1_s(x1,x2)	weight: (/ 3 4)
    lt(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1 #8
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #3 #9 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
