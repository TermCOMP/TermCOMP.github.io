Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: U11(tt(),V1) -> U12(isNatIListKind(activate(V1)),activate(V1))
    3: U12(tt(),V1) -> U13(isNatList(activate(V1)))
    4: U13(tt()) -> tt()
    5: U21(tt(),V1) -> U22(isNatKind(activate(V1)),activate(V1))
    6: U22(tt(),V1) -> U23(isNat(activate(V1)))
    7: U23(tt()) -> tt()
    8: U31(tt(),V) -> U32(isNatIListKind(activate(V)),activate(V))
    9: U32(tt(),V) -> U33(isNatList(activate(V)))
    10: U33(tt()) -> tt()
    11: U41(tt(),V1,V2) -> U42(isNatKind(activate(V1)),activate(V1),activate(V2))
    12: U42(tt(),V1,V2) -> U43(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    13: U43(tt(),V1,V2) -> U44(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    14: U44(tt(),V1,V2) -> U45(isNat(activate(V1)),activate(V2))
    15: U45(tt(),V2) -> U46(isNatIList(activate(V2)))
    16: U46(tt()) -> tt()
    17: U51(tt(),V2) -> U52(isNatIListKind(activate(V2)))
    18: U52(tt()) -> tt()
    19: U61(tt()) -> tt()
    20: U71(tt()) -> tt()
    21: U81(tt(),V1,V2) -> U82(isNatKind(activate(V1)),activate(V1),activate(V2))
    22: U82(tt(),V1,V2) -> U83(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    23: U83(tt(),V1,V2) -> U84(isNatIListKind(activate(V2)),activate(V1),activate(V2))
    24: U84(tt(),V1,V2) -> U85(isNat(activate(V1)),activate(V2))
    25: U85(tt(),V2) -> U86(isNatList(activate(V2)))
    26: U86(tt()) -> tt()
    27: U91(tt(),L,N) -> U92(isNatIListKind(activate(L)),activate(L),activate(N))
    28: U92(tt(),L,N) -> U93(isNat(activate(N)),activate(L),activate(N))
    29: U93(tt(),L,N) -> U94(isNatKind(activate(N)),activate(L))
    30: U94(tt(),L) -> s(length(activate(L)))
    31: isNat(n__0()) -> tt()
    32: isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)),activate(V1))
    33: isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
    34: isNatIList(V) -> U31(isNatIListKind(activate(V)),activate(V))
    35: isNatIList(n__zeros()) -> tt()
    36: isNatIList(n__cons(V1,V2)) -> U41(isNatKind(activate(V1)),activate(V1),activate(V2))
    37: isNatIListKind(n__nil()) -> tt()
    38: isNatIListKind(n__zeros()) -> tt()
    39: isNatIListKind(n__cons(V1,V2)) -> U51(isNatKind(activate(V1)),activate(V2))
    40: isNatKind(n__0()) -> tt()
    41: isNatKind(n__length(V1)) -> U61(isNatIListKind(activate(V1)))
    42: isNatKind(n__s(V1)) -> U71(isNatKind(activate(V1)))
    43: isNatList(n__nil()) -> tt()
    44: isNatList(n__cons(V1,V2)) -> U81(isNatKind(activate(V1)),activate(V1),activate(V2))
    45: length(nil()) -> 0()
    46: length(cons(N,L)) -> U91(isNatList(activate(L)),activate(L),N)
    47: zeros() -> n__zeros()
    48: 0() -> n__0()
    49: length(X) -> n__length(X)
    50: s(X) -> n__s(X)
    51: cons(X1,X2) -> n__cons(X1,X2)
    52: nil() -> n__nil()
    53: activate(n__zeros()) -> zeros()
    54: activate(n__0()) -> 0()
    55: activate(n__length(X)) -> length(X)
    56: activate(n__s(X)) -> s(X)
    57: activate(n__cons(X1,X2)) -> cons(X1,X2)
    58: activate(n__nil()) -> nil()
    59: activate(X) -> X
Number of strict rules: 59
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U11(tt(),V1) -> #U12(isNatIListKind(activate(V1)),activate(V1))
   #2: #U11(tt(),V1) -> #isNatIListKind(activate(V1))
   #3: #U11(tt(),V1) -> #activate(V1)
   #4: #U11(tt(),V1) -> #activate(V1)
   #5: #U93(tt(),L,N) -> #U94(isNatKind(activate(N)),activate(L))
   #6: #U93(tt(),L,N) -> #isNatKind(activate(N))
   #7: #U93(tt(),L,N) -> #activate(N)
   #8: #U93(tt(),L,N) -> #activate(L)
   #9: #length(cons(N,L)) -> #U91(isNatList(activate(L)),activate(L),N)
   #10: #length(cons(N,L)) -> #isNatList(activate(L))
   #11: #length(cons(N,L)) -> #activate(L)
   #12: #length(cons(N,L)) -> #activate(L)
   #13: #isNatKind(n__s(V1)) -> #U71(isNatKind(activate(V1)))
   #14: #isNatKind(n__s(V1)) -> #isNatKind(activate(V1))
   #15: #isNatKind(n__s(V1)) -> #activate(V1)
   #16: #isNatKind(n__length(V1)) -> #U61(isNatIListKind(activate(V1)))
   #17: #isNatKind(n__length(V1)) -> #isNatIListKind(activate(V1))
   #18: #isNatKind(n__length(V1)) -> #activate(V1)
   #19: #activate(n__zeros()) -> #zeros()
   #20: #activate(n__nil()) -> #nil()
   #21: #U22(tt(),V1) -> #U23(isNat(activate(V1)))
   #22: #U22(tt(),V1) -> #isNat(activate(V1))
   #23: #U22(tt(),V1) -> #activate(V1)
   #24: #activate(n__length(X)) -> #length(X)
   #25: #U43(tt(),V1,V2) -> #U44(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #26: #U43(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #27: #U43(tt(),V1,V2) -> #activate(V2)
   #28: #U43(tt(),V1,V2) -> #activate(V1)
   #29: #U43(tt(),V1,V2) -> #activate(V2)
   #30: #U32(tt(),V) -> #U33(isNatList(activate(V)))
   #31: #U32(tt(),V) -> #isNatList(activate(V))
   #32: #U32(tt(),V) -> #activate(V)
   #33: #U41(tt(),V1,V2) -> #U42(isNatKind(activate(V1)),activate(V1),activate(V2))
   #34: #U41(tt(),V1,V2) -> #isNatKind(activate(V1))
   #35: #U41(tt(),V1,V2) -> #activate(V1)
   #36: #U41(tt(),V1,V2) -> #activate(V1)
   #37: #U41(tt(),V1,V2) -> #activate(V2)
   #38: #activate(n__cons(X1,X2)) -> #cons(X1,X2)
   #39: #U84(tt(),V1,V2) -> #U85(isNat(activate(V1)),activate(V2))
   #40: #U84(tt(),V1,V2) -> #isNat(activate(V1))
   #41: #U84(tt(),V1,V2) -> #activate(V1)
   #42: #U84(tt(),V1,V2) -> #activate(V2)
   #43: #U83(tt(),V1,V2) -> #U84(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #44: #U83(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #45: #U83(tt(),V1,V2) -> #activate(V2)
   #46: #U83(tt(),V1,V2) -> #activate(V1)
   #47: #U83(tt(),V1,V2) -> #activate(V2)
   #48: #length(nil()) -> #0()
   #49: #U42(tt(),V1,V2) -> #U43(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #50: #U42(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #51: #U42(tt(),V1,V2) -> #activate(V2)
   #52: #U42(tt(),V1,V2) -> #activate(V1)
   #53: #U42(tt(),V1,V2) -> #activate(V2)
   #54: #activate(n__s(X)) -> #s(X)
   #55: #U44(tt(),V1,V2) -> #U45(isNat(activate(V1)),activate(V2))
   #56: #U44(tt(),V1,V2) -> #isNat(activate(V1))
   #57: #U44(tt(),V1,V2) -> #activate(V1)
   #58: #U44(tt(),V1,V2) -> #activate(V2)
   #59: #U94(tt(),L) -> #s(length(activate(L)))
   #60: #U94(tt(),L) -> #length(activate(L))
   #61: #U94(tt(),L) -> #activate(L)
   #62: #U85(tt(),V2) -> #U86(isNatList(activate(V2)))
   #63: #U85(tt(),V2) -> #isNatList(activate(V2))
   #64: #U85(tt(),V2) -> #activate(V2)
   #65: #isNatIListKind(n__cons(V1,V2)) -> #U51(isNatKind(activate(V1)),activate(V2))
   #66: #isNatIListKind(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #67: #isNatIListKind(n__cons(V1,V2)) -> #activate(V1)
   #68: #isNatIListKind(n__cons(V1,V2)) -> #activate(V2)
   #69: #isNat(n__s(V1)) -> #U21(isNatKind(activate(V1)),activate(V1))
   #70: #isNat(n__s(V1)) -> #isNatKind(activate(V1))
   #71: #isNat(n__s(V1)) -> #activate(V1)
   #72: #isNat(n__s(V1)) -> #activate(V1)
   #73: #U21(tt(),V1) -> #U22(isNatKind(activate(V1)),activate(V1))
   #74: #U21(tt(),V1) -> #isNatKind(activate(V1))
   #75: #U21(tt(),V1) -> #activate(V1)
   #76: #U21(tt(),V1) -> #activate(V1)
   #77: #isNatList(n__cons(V1,V2)) -> #U81(isNatKind(activate(V1)),activate(V1),activate(V2))
   #78: #isNatList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #79: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #80: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #81: #isNatList(n__cons(V1,V2)) -> #activate(V2)
   #82: #U92(tt(),L,N) -> #U93(isNat(activate(N)),activate(L),activate(N))
   #83: #U92(tt(),L,N) -> #isNat(activate(N))
   #84: #U92(tt(),L,N) -> #activate(N)
   #85: #U92(tt(),L,N) -> #activate(L)
   #86: #U92(tt(),L,N) -> #activate(N)
   #87: #U82(tt(),V1,V2) -> #U83(isNatIListKind(activate(V2)),activate(V1),activate(V2))
   #88: #U82(tt(),V1,V2) -> #isNatIListKind(activate(V2))
   #89: #U82(tt(),V1,V2) -> #activate(V2)
   #90: #U82(tt(),V1,V2) -> #activate(V1)
   #91: #U82(tt(),V1,V2) -> #activate(V2)
   #92: #isNatIList(V) -> #U31(isNatIListKind(activate(V)),activate(V))
   #93: #isNatIList(V) -> #isNatIListKind(activate(V))
   #94: #isNatIList(V) -> #activate(V)
   #95: #isNatIList(V) -> #activate(V)
   #96: #U91(tt(),L,N) -> #U92(isNatIListKind(activate(L)),activate(L),activate(N))
   #97: #U91(tt(),L,N) -> #isNatIListKind(activate(L))
   #98: #U91(tt(),L,N) -> #activate(L)
   #99: #U91(tt(),L,N) -> #activate(L)
   #100: #U91(tt(),L,N) -> #activate(N)
   #101: #U51(tt(),V2) -> #U52(isNatIListKind(activate(V2)))
   #102: #U51(tt(),V2) -> #isNatIListKind(activate(V2))
   #103: #U51(tt(),V2) -> #activate(V2)
   #104: #isNat(n__length(V1)) -> #U11(isNatIListKind(activate(V1)),activate(V1))
   #105: #isNat(n__length(V1)) -> #isNatIListKind(activate(V1))
   #106: #isNat(n__length(V1)) -> #activate(V1)
   #107: #isNat(n__length(V1)) -> #activate(V1)
   #108: #isNatIList(n__cons(V1,V2)) -> #U41(isNatKind(activate(V1)),activate(V1),activate(V2))
   #109: #isNatIList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #110: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #111: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #112: #isNatIList(n__cons(V1,V2)) -> #activate(V2)
   #113: #U81(tt(),V1,V2) -> #U82(isNatKind(activate(V1)),activate(V1),activate(V2))
   #114: #U81(tt(),V1,V2) -> #isNatKind(activate(V1))
   #115: #U81(tt(),V1,V2) -> #activate(V1)
   #116: #U81(tt(),V1,V2) -> #activate(V1)
   #117: #U81(tt(),V1,V2) -> #activate(V2)
   #118: #U12(tt(),V1) -> #U13(isNatList(activate(V1)))
   #119: #U12(tt(),V1) -> #isNatList(activate(V1))
   #120: #U12(tt(),V1) -> #activate(V1)
   #121: #zeros() -> #cons(0(),n__zeros())
   #122: #zeros() -> #0()
   #123: #activate(n__0()) -> #0()
   #124: #U31(tt(),V) -> #U32(isNatIListKind(activate(V)),activate(V))
   #125: #U31(tt(),V) -> #isNatIListKind(activate(V))
   #126: #U31(tt(),V) -> #activate(V)
   #127: #U31(tt(),V) -> #activate(V)
   #128: #U45(tt(),V2) -> #U46(isNatIList(activate(V2)))
   #129: #U45(tt(),V2) -> #isNatIList(activate(V2))
   #130: #U45(tt(),V2) -> #activate(V2)
Number of SCCs: 2, DPs: 83, edges: 201
	SCC { #25 #33 #49 #55 #108 #129 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)...