Input TRS:
    1: U11(tt(),N) -> activate(N)
    2: U21(tt(),M,N) -> s(plus(activate(N),activate(M)))
    3: and(tt(),X) -> activate(X)
    4: isNat(n__0()) -> tt()
    5: isNat(n__plus(V1,V2)) -> and(isNat(activate(V1)),n__isNat(activate(V2)))
    6: isNat(n__s(V1)) -> isNat(activate(V1))
    7: plus(N,0()) -> U11(isNat(N),N)
    8: plus(N,s(M)) -> U21(and(isNat(M),n__isNat(N)),M,N)
    9: 0() -> n__0()
    10: plus(X1,X2) -> n__plus(X1,X2)
    11: isNat(X) -> n__isNat(X)
    12: s(X) -> n__s(X)
    13: activate(n__0()) -> 0()
    14: activate(n__plus(X1,X2)) -> plus(X1,X2)
    15: activate(n__isNat(X)) -> isNat(X)
    16: activate(n__s(X)) -> s(X)
    17: activate(X) -> X
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U21(tt(),M,N) -> #s(plus(activate(N),activate(M)))
   #2: #U21(tt(),M,N) -> #plus(activate(N),activate(M))
   #3: #U21(tt(),M,N) -> #activate(N)
   #4: #U21(tt(),M,N) -> #activate(M)
   #5: #isNat(n__s(V1)) -> #isNat(activate(V1))
   #6: #isNat(n__s(V1)) -> #activate(V1)
   #7: #activate(n__0()) -> #0()
   #8: #activate(n__plus(X1,X2)) -> #plus(X1,X2)
   #9: #plus(N,0()) -> #U11(isNat(N),N)
   #10: #plus(N,0()) -> #isNat(N)
   #11: #isNat(n__plus(V1,V2)) -> #and(isNat(activate(V1)),n__isNat(activate(V2)))
   #12: #isNat(n__plus(V1,V2)) -> #isNat(activate(V1))
   #13: #isNat(n__plus(V1,V2)) -> #activate(V1)
   #14: #isNat(n__plus(V1,V2)) -> #activate(V2)
   #15: #activate(n__s(X)) -> #s(X)
   #16: #and(tt(),X) -> #activate(X)
   #17: #U11(tt(),N) -> #activate(N)
   #18: #plus(N,s(M)) -> #U21(and(isNat(M),n__isNat(N)),M,N)
   #19: #plus(N,s(M)) -> #and(isNat(M),n__isNat(N))
   #20: #plus(N,s(M)) -> #isNat(M)
   #21: #activate(n__isNat(X)) -> #isNat(X)
Number of SCCs: 1, DPs: 18, edges: 60
	SCC { #2..6 #8..14 #16..21 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
   U21(x1,x2,x3)	weight: (/ 3 2) + x2 + x3
   U11(x1,x2)	weight: x2
     s(x1)	weight: x1
#isNat(x1)	weight: x1
activate(x1)	weight: x1
   and(x1,x2)	weight: x2
#plus(x1,x2)	weight: (/ 3 2) + x1 + x2
#activate(x1)	weight: x1
  n__s(x1)	weight: x1
     0()	weight: 0
   #s(x1)	weight: 0
n__isNat(x1)	weight: (/ 1 2) + x1
n__plus(x1,x2)	weight: (/ 3 2) + x1 + x2
  n__0()	weight: 0
 isNat(x1)	weight: (/ 1 2) + x1
  plus(x1,x2)	weight: (/ 3 2) + x1 + x2
 #U11(x1,x2)	weight: (/ 1 2) + x2
 #U21(x1,x2,x3)	weight: (/ 3 2) + x2 + x3
    tt()	weight: 0
 #and(x1,x2)	weight: (/ 1 2) + x2
    Usable rules: { 1..17 }
    Removed DPs: #3 #4 #9..14 #16 #17 #19..21
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
   U21(x1,x2,x3)	weight: 2 + x2 + x3
   U11(x1,x2)	weight: x2
     s(x1)	weight: (/ 1 2) + x1
#isNat(x1)	weight: x1
activate(x1)	weight: x1
   and(x1,x2)	weight: x2
#plus(x1,x2)	weight: (/ 3 2) + x1 + x2
#activate(x1)	weight: 0
  n__s(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
   #s(x1)	weight: 0
n__isNat(x1)	weight: (/ 1 2) + x1
n__plus(x1,x2)	weight: (/ 3 2) + x1 + x2
  n__0()	weight: 0
 isNat(x1)	weight: (/ 1 2) + x1
  plus(x1,x2)	weight: (/ 3 2) + x1 + x2
 #U11(x1,x2)	weight: (/ 1 2)
 #U21(x1,x2,x3)	weight: (/ 3 2)
    tt()	weight: 0
 #and(x1,x2)	weight: (/ 1 2) + x2
    Usable rules: { 1..17 }
    Removed DPs: #5
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #2 #18 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   #0()	weight: 0
   U21(x1,x2,x3)	weight: (/ 5 4) + x2 + x3
   U11(x1,x2)	weight: x2
     s(x1)	weight: (/ 1 2) + x1
#isNat(x1)	weight: x1
activate(x1)	weight: x1
   and(x1,x2)	weight: x2
#plus(x1,x2)	weight: (/ 1 2) + x2
#activate(x1)	weight: 0
  n__s(x1)	weight: (/ 1 2) + x1
     0()	weight: 0
   #s(x1)	weight: 0
n__isNat(x1)	weight: (/ 1 4) + x1
n__plus(x1,x2)	weight: (/ 3 4) + x1 + x2
  n__0()	weight: 0
 isNat(x1)	weight: (/ 1 4) + x1
  plus(x1,x2)	weight: (/ 3 4) + x1 + x2
 #U11(x1,x2)	weight: (/ 1 4)
 #U21(x1,x2,x3)	weight: (/ 3 4) + x2
    tt()	weight: 0
 #and(x1,x2)	weight: (/ 1 4) + x2
    Usable rules: { 1..17 }
    Removed DPs: #2 #18
Number of SCCs: 0, DPs: 0, edges: 0
