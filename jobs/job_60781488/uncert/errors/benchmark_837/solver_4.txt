Input TRS:
    1: dbl(0()) -> 0()
    2: dbl(s(X)) -> s(s(dbl(X)))
    3: dbls(nil()) -> nil()
    4: dbls(cons(X,Y)) -> cons(dbl(X),dbls(Y))
    5: sel(0(),cons(X,Y)) -> X
    6: sel(s(X),cons(Y,Z)) -> sel(X,Z)
    7: indx(nil(),X) -> nil()
    8: indx(cons(X,Y),Z) -> cons(sel(X,Z),indx(Y,Z))
    9: from(X) -> cons(X,from(s(X)))
    10: dbl1(0()) -> 01()
    11: dbl1(s(X)) -> s1(s1(dbl1(X)))
    12: sel1(0(),cons(X,Y)) -> X
    13: sel1(s(X),cons(Y,Z)) -> sel1(X,Z)
    14: quote(0()) -> 01()
    15: quote(s(X)) -> s1(quote(X))
    16: quote(dbl(X)) -> dbl1(X)
    17: quote(sel(X,Y)) -> sel1(X,Y)
Number of strict rules: 17
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #dbl(s(X)) -> #dbl(X)
   #2: #sel(s(X),cons(Y,Z)) -> #sel(X,Z)
   #3: #sel1(s(X),cons(Y,Z)) -> #sel1(X,Z)
   #4: #from(X) -> #from(s(X))
   #5: #dbl1(s(X)) -> #dbl1(X)
   #6: #quote(sel(X,Y)) -> #sel1(X,Y)
   #7: #quote(dbl(X)) -> #dbl1(X)
   #8: #indx(cons(X,Y),Z) -> #sel(X,Z)
   #9: #indx(cons(X,Y),Z) -> #indx(Y,Z)
   #10: #quote(s(X)) -> #quote(X)
   #11: #dbls(cons(X,Y)) -> #dbl(X)
   #12: #dbls(cons(X,Y)) -> #dbls(Y)
Number of SCCs: 8, DPs: 8, edges: 8
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#dbl1(x1)	weight: x1
    01()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  dbls(x1)	weight: 0
   dbl(x1)	weight: 0
  indx(x1,x2)	weight: 0
 #dbl(x1)	weight: 0
#dbls(x1)	weight: 0
     0()	weight: 0
 #sel(x1,x2)	weight: 0
#indx(x1,x2)	weight: 0
   sel(x1,x2)	weight: 0
  from(x1)	weight: 0
   nil()	weight: 0
  dbl1(x1)	weight: 0
#sel1(x1,x2)	weight: 0
#from(x1)	weight: 0
 quote(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quote(x1)	weight: 0
  sel1(x1,x2)	weight: 0
    s1(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #5
Number of SCCs: 7, DPs: 7, edges: 7
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#dbl1(x1)	weight: 0
    01()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  dbls(x1)	weight: 0
   dbl(x1)	weight: 0
  indx(x1,x2)	weight: 0
 #dbl(x1)	weight: 0
#dbls(x1)	weight: 0
     0()	weight: 0
 #sel(x1,x2)	weight: 0
#indx(x1,x2)	weight: 0
   sel(x1,x2)	weight: 0
  from(x1)	weight: 0
   nil()	weight: 0
  dbl1(x1)	weight: 0
#sel1(x1,x2)	weight: 0
#from(x1)	weight: 0
 quote(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quote(x1)	weight: x1
  sel1(x1,x2)	weight: 0
    s1(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 6, DPs: 6, edges: 6
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#dbl1(x1)	weight: 0
    01()	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  dbls(x1)	weight: 0
   dbl(x1)	weight: 0
  indx(x1,x2)	weight: 0
 #dbl(x1)	weight: x1
#dbls(x1)	weight: 0
     0()	weight: 0
 #sel(x1,x2)	weight: 0
#indx(x1,x2)	weight: 0
   sel(x1,x2)	weight: 0
  from(x1)	weight: 0
   nil()	weight: 0
  dbl1(x1)	weight: 0
#sel1(x1,x2)	weight: 0
#from(x1)	weight: 0
 quote(x1)	weight: 0
  cons(x1,x2)	weight: 0
#quote(x1)	weight: 0
  sel1(x1,x2)	weight: 0
    s1(x1)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 5, DPs: 5, edges: 5
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#4->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
