Input TRS:
    1: app(app(app(fold(),f),x),nil()) -> x
    2: app(app(app(fold(),f),x),app(app(cons(),y),z)) -> app(app(f,y),app(app(app(fold(),f),x),z))
    3: app(app(plus(),0()),y) -> y
    4: app(app(plus(),app(s(),x)),y) -> app(s(),app(app(plus(),x),y))
    5: app(app(times(),0()),y) -> 0()
    6: app(app(times(),app(s(),x)),y) -> app(app(plus(),app(app(times(),x),y)),y)
    7: sum() -> app(app(fold(),add()),0())
    8: prod() -> app(app(fold(),mul()),app(s(),0()))
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆3_fold(f,x,nil()) -> x
2: app❆3_fold(f,x,app❆2_cons(y,z)) -> app(app(f,y),app❆3_fold(f,x,z))
3: app❆2_plus(0(),y) -> y
4: app❆2_plus(app❆1_s(x),y) -> app❆1_s(app❆2_plus(x,y))
5: app❆2_times(0(),y) -> 0()
6: app❆2_times(app❆1_s(x),y) -> app❆2_plus(app❆2_times(x,y),y)
7: sum() -> app❆2_fold(add(),0())
8: prod() -> app❆2_fold(mul(),app❆1_s(0()))
9: app(plus(),_1) ->= app❆1_plus(_1)
10: app(app❆1_plus(_1),_2) ->= app❆2_plus(_1,_2)
11: app(cons(),_1) ->= app❆1_cons(_1)
12: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
13: app(times(),_1) ->= app❆1_times(_1)
14: app(app❆1_times(_1),_2) ->= app❆2_times(_1,_2)
15: app(s(),_1) ->= app❆1_s(_1)
16: app(fold(),_1) ->= app❆1_fold(_1)
17: app(app❆1_fold(_1),_2) ->= app❆2_fold(_1,_2)
18: app(app❆2_fold(_1,_2),_3) ->= app❆3_fold(_1,_2,_3)
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆3_fold(f,x,app❆2_cons(y,z)) -> #app(app(f,y),app❆3_fold(f,x,z))
   #2: #app❆3_fold(f,x,app❆2_cons(y,z)) -> #app(f,y)
   #3: #app❆3_fold(f,x,app❆2_cons(y,z)) -> #app❆3_fold(f,x,z)
   #4: #app❆2_times(app❆1_s(x),y) -> #app❆2_plus(app❆2_times(x,y),y)
   #5: #app❆2_times(app❆1_s(x),y) -> #app❆2_times(x,y)
   #6: #app(app❆1_times(_1),_2) ->? #app❆2_times(_1,_2)
   #7: #app(app❆1_plus(_1),_2) ->? #app❆2_plus(_1,_2)
   #8: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(x,y)
   #9: #app(app❆2_fold(_1,_2),_3) ->? #app❆3_fold(_1,_2,_3)
Number of SCCs: 3, DPs: 6, edges: 10
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   mul()	weight: 0
  prod()	weight: 0
     s()	weight: 0
app❆1_plus(x1)	weight: 0
#prod()	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆3_fold(x1,x2,x3)	weight: 0
#app❆3_fold(x1,x2,x3)	weight: 0
   sum()	weight: 0
app❆2_fold(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x1
 times()	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  fold()	weight: 0
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: 0
   add()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
 #sum()	weight: 0
app❆1_cons(x1)	weight: 0
app❆1_fold(x1)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 2, DPs: 5, edges: 9
	SCC { #5 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
   mul()	weight: 0
  prod()	weight: 0
     s()	weight: 0
app❆1_plus(x1)	weight: 0
#prod()	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆3_fold(x1,x2,x3)	weight: 0
#app❆3_fold(x1,x2,x3)	weight: 0
   sum()	weight: 0
app❆2_fold(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: 0
  fold()	weight: 0
#app❆2_times(x1,x2)	weight: x1
  plus()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: 0
   add()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
 #sum()	weight: 0
app❆1_cons(x1)	weight: 0
app❆1_fold(x1)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #5
Number of SCCs: 1, DPs: 4, edges: 8
	SCC { #1..3 #9 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
   mul()	weight: 0
  prod()	weight: 0
     s()	weight: 0
app❆1_plus(x1)	weight: x1
#prod()	weight: 0
app❆2_plus(x1,x2)	weight: max{0, x2}
app❆3_fold(x1,x2,x3)	weight: max{x3, (/ 1 4) + x2, 16731 + x1}
#app❆3_fold(x1,x2,x3)	weight: max{(/ 1 4) + x3, (/ 1 2) + x2, (/ 66925 4) + x1}
   sum()	weight: 0
app❆2_fold(x1,x2)	weight: max{x2, (/ 16731 2) + x1}
     0()	weight: (/ 1 4)
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
   nil()	weight: 0
 #app(x1,x2)	weight: max{(/ 1 4) + x2, (/ 33463 4) + x1}
  fold()	weight: 0
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: max{x2, (/ 16731 2) + x1}
app❆2_times(x1,x2)	weight: max{x2, (/ 1 4) + x1}
   add()	weight: 0
app❆1_s(x1)	weight: x1
 #sum()	weight: 0
app❆1_cons(x1)	weight: x1
app❆1_fold(x1)	weight: x1
app❆1_times(x1)	weight: x1
   app(x1,x2)	weight: max{x2, (/ 16731 2) + x1}
    Usable rules: { 1..6 9..18 }
    Removed DPs: #2
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #1 #3 #9 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
