Input TRS:
    1: app'(app'(minus(),x),0()) -> x
    2: app'(app'(minus(),app'(s(),x)),app'(s(),y)) -> app'(app'(minus(),x),y)
    3: app'(app'(minus(),app'(app'(minus(),x),y)),z) -> app'(app'(minus(),x),app'(app'(plus(),y),z))
    4: app'(app'(quot(),0()),app'(s(),y)) -> 0()
    5: app'(app'(quot(),app'(s(),x)),app'(s(),y)) -> app'(s(),app'(app'(quot(),app'(app'(minus(),x),y)),app'(s(),y)))
    6: app'(app'(plus(),0()),y) -> y
    7: app'(app'(plus(),app'(s(),x)),y) -> app'(s(),app'(app'(plus(),x),y))
    8: app'(app'(app(),nil()),k) -> k
    9: app'(app'(app(),l),nil()) -> l
    10: app'(app'(app(),app'(app'(cons(),x),l)),k) -> app'(app'(cons(),x),app'(app'(app(),l),k))
    11: app'(sum(),app'(app'(cons(),x),nil())) -> app'(app'(cons(),x),nil())
    12: app'(sum(),app'(app'(cons(),x),app'(app'(cons(),y),l))) -> app'(sum(),app'(app'(cons(),app'(app'(plus(),x),y)),l))
    13: app'(sum(),app'(app'(app(),l),app'(app'(cons(),x),app'(app'(cons(),y),k)))) -> app'(sum(),app'(app'(app(),l),app'(sum(),app'(app'(cons(),x),app'(app'(cons(),y),k)))))
    14: app'(app'(map(),f),nil()) -> nil()
    15: app'(app'(map(),f),app'(app'(cons(),x),xs)) -> app'(app'(cons(),app'(f,x)),app'(app'(map(),f),xs))
    16: app'(app'(filter(),f),nil()) -> nil()
    17: app'(app'(filter(),f),app'(app'(cons(),x),xs)) -> app'(app'(app'(app'(filter2(),app'(f,x)),f),x),xs)
    18: app'(app'(app'(app'(filter2(),true()),f),x),xs) -> app'(app'(cons(),x),app'(app'(filter(),f),xs))
    19: app'(app'(app'(app'(filter2(),false()),f),x),xs) -> app'(app'(filter(),f),xs)
Number of strict rules: 19
Direct Order(PosReal,>,Poly) ... failed.
Freezing app'
1: app'❆2_minus(x,0()) -> x
2: app'❆2_minus(app'❆1_s(x),app'❆1_s(y)) -> app'❆2_minus(x,y)
3: app'❆2_minus(app'❆2_minus(x,y),z) -> app'❆2_minus(x,app'❆2_plus(y,z))
4: app'❆2_quot(0(),app'❆1_s(y)) -> 0()
5: app'❆2_quot(app'❆1_s(x),app'❆1_s(y)) -> app'❆1_s(app'❆2_quot(app'❆2_minus(x,y),app'❆1_s(y)))
6: app'❆2_plus(0(),y) -> y
7: app'❆2_plus(app'❆1_s(x),y) -> app'❆1_s(app'❆2_plus(x,y))
8: app'❆2_app(nil(),k) -> k
9: app'❆2_app(l,nil()) -> l
10: app'❆2_app(app'❆2_cons(x,l),k) -> app'❆2_cons(x,app'❆2_app(l,k))
11: app'❆1_sum(app'❆2_cons(x,nil())) -> app'❆2_cons(x,nil())
12: app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,l))) -> app'❆1_sum(app'❆2_cons(app'❆2_plus(x,y),l))
13: app'❆1_sum(app'❆2_app(l,app'❆2_cons(x,app'❆2_cons(y,k)))) -> app'❆1_sum(app'❆2_app(l,app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,k)))))
14: app'❆2_map(f,nil()) -> nil()
15: app'❆2_map(f,app'❆2_cons(x,xs)) -> app'❆2_cons(app'(f,x),app'❆2_map(f,xs))
16: app'❆2_filter(f,nil()) -> nil()
17: app'❆2_filter(f,app'❆2_cons(x,xs)) -> app'❆4_filter2(app'(f,x),f,x,xs)
18: app'❆4_filter2(true(),f,x,xs) -> app'❆2_cons(x,app'❆2_filter(f,xs))
19: app'❆4_filter2(false(),f,x,xs) -> app'❆2_filter(f,xs)
20: app'(plus(),_1) ->= app'❆1_plus(_1)
21: app'(app'❆1_plus(_1),_2) ->= app'❆2_plus(_1,_2)
22: app'(cons(),_1) ->= app'❆1_cons(_1)
23: app'(app'❆1_cons(_1),_2) ->= app'❆2_cons(_1,_2)
24: app'(quot(),_1) ->= app'❆1_quot(_1)
25: app'(app'❆1_quot(_1),_2) ->= app'❆2_quot(_1,_2)
26: app'(s(),_1) ->= app'❆1_s(_1)
27: app'(filter(),_1) ->= app'❆1_filter(_1)
28: app'(app'❆1_filter(_1),_2) ->= app'❆2_filter(_1,_2)
29: app'(map(),_1) ->= app'❆1_map(_1)
30: app'(app'❆1_map(_1),_2) ->= app'❆2_map(_1,_2)
31: app'(minus(),_1) ->= app'❆1_minus(_1)
32: app'(app'❆1_minus(_1),_2) ->= app'❆2_minus(_1,_2)
33: app'(filter2(),_1) ->= app'❆1_filter2(_1)
34: app'(app'❆1_filter2(_1),_2) ->= app'❆2_filter2(_1,_2)
35: app'(app'❆2_filter2(_1,_2),_3) ->= app'❆3_filter2(_1,_2,_3)
36: app'(app'❆3_filter2(_1,_2,_3),_4) ->= app'❆4_filter2(_1,_2,_3,_4)
37: app'(sum(),_1) ->= app'❆1_sum(_1)
38: app'(app(),_1) ->= app'❆1_app(_1)
39: app'(app'❆1_app(_1),_2) ->= app'❆2_app(_1,_2)
Number of strict rules: 19
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app'❆2_minus(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_minus(x,y)
   #2: #app'(sum(),_1) ->? #app'❆1_sum(_1)
   #3: #app'❆1_sum(app'❆2_app(l,app'❆2_cons(x,app'❆2_cons(y,k)))) -> #app'❆1_sum(app'❆2_app(l,app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,k)))))
   #4: #app'❆1_sum(app'❆2_app(l,app'❆2_cons(x,app'❆2_cons(y,k)))) -> #app'❆2_app(l,app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,k))))
   #5: #app'❆1_sum(app'❆2_app(l,app'❆2_cons(x,app'❆2_cons(y,k)))) -> #app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,k)))
   #6: #app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,l))) -> #app'❆1_sum(app'❆2_cons(app'❆2_plus(x,y),l))
   #7: #app'❆1_sum(app'❆2_cons(x,app'❆2_cons(y,l))) -> #app'❆2_plus(x,y)
   #8: #app'(app'❆1_map(_1),_2) ->? #app'❆2_map(_1,_2)
   #9: #app'(app'❆1_quot(_1),_2) ->? #app'❆2_quot(_1,_2)
   #10: #app'❆2_plus(app'❆1_s(x),y) -> #app'❆2_plus(x,y)
   #11: #app'(app'❆1_app(_1),_2) ->? #app'❆2_app(_1,_2)
   #12: #app'❆2_app(app'❆2_cons(x,l),k) -> #app'❆2_app(l,k)
   #13: #app'❆2_quot(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_quot(app'❆2_minus(x,y),app'❆1_s(y))
   #14: #app'❆2_quot(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_minus(x,y)
   #15: #app'(app'❆1_filter(_1),_2) ->? #app'❆2_filter(_1,_2)
   #16: #app'❆2_filter(f,app'❆2_cons(x,xs)) -> #app'❆4_filter2(app'(f,x),f,x,xs)
   #17: #app'❆2_filter(f,app'❆2_cons(x,xs)) -> #app'(f,x)
   #18: #app'(app'❆1_minus(_1),_2) ->? #app'❆2_minus(_1,_2)
   #19: #app'❆4_filter2(false(),f,x,xs) -> #app'❆2_filter(f,xs)
   #20: #app'(app'❆3_filter2(_1,_2,_3),_4) ->? #app'❆4_filter2(_1,_2,_3,_4)
   #21: #app'(app'❆1_plus(_1),_2) ->? #app'❆2_plus(_1,_2)
   #22: #app'❆2_minus(app'❆2_minus(x,y),z) -> #app'❆2_minus(x,app'❆2_plus(y,z))
   #23: #app'❆2_minus(app'❆2_minus(x,y),z) -> #app'❆2_plus(y,z)
   #24: #app'❆2_map(f,app'❆2_cons(x,xs)) -> #app'(f,x)
   #25: #app'❆2_map(f,app'❆2_cons(x,xs)) -> #app'❆2_map(f,xs)
   #26: #app'❆4_filter2(true(),f,x,xs) -> #app'❆2_filter(f,xs)
Number of SCCs: 7, DPs: 16, edges: 29
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'❆2_plus(x1,x2)	weight: x1
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_sum(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_quot(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: 0
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
  plus()	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: 0
#app'❆1_sum(x1)	weight: 0
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 6, DPs: 15, edges: 28
	SCC { #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_sum(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: x1
app'❆2_app(x1,x2)	weight: 0
app'❆1_quot(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: 0
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 2) + x2
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
  plus()	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: 0
#app'❆1_sum(x1)	weight: 0
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 2)
app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #12
Number of SCCs: 5, DPs: 14, edges: 27
	SCC { #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_sum(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_quot(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: 0
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 4)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
  plus()	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: 0
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 4)
app'❆1_filter(x1)	weight: 0
   app()	weight: 0
    Usable rules: { 1..3 }
    Removed DPs: #13
Number of SCCs: 4, DPs: 13, edges: 26
	SCC { #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_sum(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
app'❆1_quot(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: 0
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 4) + x2
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
  plus()	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: x1
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 4)
app'❆1_filter(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #6
Number of SCCs: 3, DPs: 12, edges: 25
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_sum(x1)	weight: (/ 1 4)
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_quot(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: 0
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 4) + x2
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
  plus()	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: x1
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 4)
app'❆1_filter(x1)	weight: 0
   app()	weight: 0
    Usable rules: { 8..12 }
    Removed DPs: #3
Number of SCCs: 2, DPs: 11, edges: 24
	SCC { #1 #22 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
app'❆1_sum(x1)	weight: (/ 1 4)
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_quot(x1)	weight: 0
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: 0
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 4) + x2
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: x1
app'❆1_plus(x1)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
  plus()	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: x1
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 4)
app'❆1_filter(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #1 #22
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #8 #15..17 #19 #20 #24..26 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: (/ 3 16) + x2
app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8)
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: (/ 1 8) + x1
     s()	weight: 0
app'❆1_map(x1)	weight: (/ 1 8) + x1
app'❆1_sum(x1)	weight: (/ 1 8)
#app'❆2_map(x1,x2)	weight: (/ 1 16) + x1
#app'❆2_filter(x1,x2)	weight: (/ 1 16) + x1
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 8) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16) + x2
#app'(x1,x2)	weight: x1
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 8) + x1 + x2
app'❆1_quot(x1)	weight: (/ 1 8)
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: (/ 1 8) + x1
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 8) + x2
  app'(x1,x2)	weight: (/ 1 16)
app'❆2_map(x1,x2)	weight: (/ 1 8) + x1 + x2
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: (/ 1 8) + x1
   map()	weight: 0
app'❆1_app(x1)	weight: (/ 1 8) + x1
app'❆3_filter2(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
  plus()	weight: 0
app'❆1_minus(x1)	weight: (/ 1 8) + x1
app'❆2_filter2(x1,x2)	weight: (/ 1 8) + x1 + x2
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: x1
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: (/ 1 8)
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 8) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 8) + x2
app'❆1_filter(x1)	weight: (/ 1 8) + x1
   app()	weight: 0
    Usable rules: { 1..4 8..12 }
    Removed DPs: #8 #15 #17 #20 #24
Number of SCCs: 2, DPs: 4, edges: 5
	SCC { #25 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: (/ 3 16) + x2
app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8)
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: (/ 1 8) + x1
     s()	weight: 0
app'❆1_map(x1)	weight: (/ 1 8) + x1
app'❆1_sum(x1)	weight: (/ 1 8)
#app'❆2_map(x1,x2)	weight: (/ 1 16) + x2
#app'❆2_filter(x1,x2)	weight: (/ 1 16)
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 8) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16)
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 8) + x1 + x2
app'❆1_quot(x1)	weight: (/ 1 8)
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: (/ 1 8) + x1
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 8) + x2
  app'(x1,x2)	weight: (/ 1 16)
app'❆2_map(x1,x2)	weight: (/ 1 8) + x1 + x2
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: (/ 1 8) + x1
   map()	weight: 0
app'❆1_app(x1)	weight: (/ 1 8) + x1
app'❆3_filter2(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
  plus()	weight: 0
app'❆1_minus(x1)	weight: (/ 1 8) + x1
app'❆2_filter2(x1,x2)	weight: (/ 1 8) + x1 + x2
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: x1
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: (/ 1 8)
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 8) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 8) + x2
app'❆1_filter(x1)	weight: (/ 1 8) + x1
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #25
Number of SCCs: 1, DPs: 3, edges: 4
	SCC { #16 #19 #26 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: (/ 3 16) + x2
app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8)
#app'❆2_plus(x1,x2)	weight: 0
app'❆1_filter2(x1)	weight: (/ 1 8) + x1
     s()	weight: 0
app'❆1_map(x1)	weight: (/ 1 8) + x1
app'❆1_sum(x1)	weight: (/ 1 8)
#app'❆2_map(x1,x2)	weight: (/ 1 16)
#app'❆2_filter(x1,x2)	weight: (/ 1 16) + x2
 minus()	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 8) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8) + x4
#app'(x1,x2)	weight: 0
 false()	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 8) + x1 + x2
app'❆1_quot(x1)	weight: (/ 1 8)
  true()	weight: 0
filter2()	weight: 0
   sum()	weight: 0
app'❆1_cons(x1)	weight: (/ 1 8) + x1
     0()	weight: 0
app'❆2_cons(x1,x2)	weight: (/ 1 8) + x2
  app'(x1,x2)	weight: (/ 1 16)
app'❆2_map(x1,x2)	weight: (/ 1 8) + x1 + x2
  quot()	weight: 0
   nil()	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
app'❆1_plus(x1)	weight: (/ 1 8) + x1
   map()	weight: 0
app'❆1_app(x1)	weight: (/ 1 8) + x1
app'❆3_filter2(x1,x2,x3)	weight: (/ 1 8) + x1 + x2
  plus()	weight: 0
app'❆1_minus(x1)	weight: (/ 1 8) + x1
app'❆2_filter2(x1,x2)	weight: (/ 1 8) + x1 + x2
#app'❆2_quot(x1,x2)	weight: x1
#app'❆1_sum(x1)	weight: x1
  cons()	weight: 0
app'❆2_quot(x1,x2)	weight: (/ 1 8)
filter()	weight: 0
app'❆1_s(x1)	weight: (/ 1 8) + x1
app'❆2_plus(x1,x2)	weight: (/ 1 8) + x2
app'❆1_filter(x1)	weight: (/ 1 8) + x1
   app()	weight: 0
    Usable rules: { 1..4 8..12 }
    Removed DPs: #16 #19 #26
Number of SCCs: 0, DPs: 0, edges: 0
