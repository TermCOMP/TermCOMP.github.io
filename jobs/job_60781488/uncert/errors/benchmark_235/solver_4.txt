Input TRS:
    1: eq(0(),0()) -> true()
    2: eq(0(),s(x)) -> false()
    3: eq(s(x),0()) -> false()
    4: eq(s(x),s(y)) -> eq(x,y)
    5: le(0(),y) -> true()
    6: le(s(x),0()) -> false()
    7: le(s(x),s(y)) -> le(x,y)
    8: app(nil(),y) -> y
    9: app(add(n,x),y) -> add(n,app(x,y))
    10: min(nil()) -> 0()
    11: min(add(n,x)) -> minIter(add(n,x),add(n,x),0())
    12: minIter(nil(),add(n,y),m) -> minIter(add(n,y),add(n,y),s(m))
    13: minIter(add(n,x),y,m) -> if_min(le(n,m),x,y,m)
    14: if_min(true(),x,y,m) -> m
    15: if_min(false(),x,y,m) -> minIter(x,y,m)
    16: head(add(n,x)) -> n
    17: tail(add(n,x)) -> x
    18: tail(nil()) -> nil()
    19: null(nil()) -> true()
    20: null(add(n,x)) -> false()
    21: rm(n,nil()) -> nil()
    22: rm(n,add(m,x)) -> if_rm(eq(n,m),n,add(m,x))
    23: if_rm(true(),n,add(m,x)) -> rm(n,x)
    24: if_rm(false(),n,add(m,x)) -> add(m,rm(n,x))
    25: minsort(nil(),nil()) -> nil()
    26: minsort(add(n,x),y) -> if_minsort(eq(n,min(add(n,x))),add(n,x),y)
    27: if_minsort(true(),add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil()))
    28: if_minsort(false(),add(n,x),y) -> minsort(x,add(n,y))
Number of strict rules: 28
Direct Order(PosReal,>,Poly) ... failed.
Freezing minIter min
1: eq(0(),0()) -> true()
2: eq(0(),s(x)) -> false()
3: eq(s(x),0()) -> false()
4: eq(s(x),s(y)) -> eq(x,y)
5: le(0(),y) -> true()
6: le(s(x),0()) -> false()
7: le(s(x),s(y)) -> le(x,y)
8: app(nil(),y) -> y
9: app(add(n,x),y) -> add(n,app(x,y))
10: min❆1_nil() -> 0()
11: min❆1_add(n,x) -> minIter❆1_add(n,x,add(n,x),0())
12: minIter❆1_nil(add(n,y),m) -> minIter❆1_add(n,y,add(n,y),s(m))
13: minIter❆1_add(n,x,y,m) -> if_min(le(n,m),x,y,m)
14: if_min(true(),x,y,m) -> m
15: if_min(false(),x,y,m) -> minIter(x,y,m)
16: head(add(n,x)) -> n
17: tail(add(n,x)) -> x
18: tail(nil()) -> nil()
19: null(nil()) -> true()
20: null(add(n,x)) -> false()
21: rm(n,nil()) -> nil()
22: rm(n,add(m,x)) -> if_rm(eq(n,m),n,add(m,x))
23: if_rm(true(),n,add(m,x)) -> rm(n,x)
24: if_rm(false(),n,add(m,x)) -> add(m,rm(n,x))
25: minsort(nil(),nil()) -> nil()
26: minsort(add(n,x),y) -> if_minsort(eq(n,min❆1_add(n,x)),add(n,x),y)
27: if_minsort(true(),add(n,x),y) -> add(n,minsort(app(rm(n,x),y),nil()))
28: if_minsort(false(),add(n,x),y) -> minsort(x,add(n,y))
29: min(add(_1,_2)) ->= min❆1_add(_1,_2)
30: min(nil()) ->= min❆1_nil()
31: minIter(add(_1,_2),_4,_5) ->= minIter❆1_add(_1,_2,_4,_5)
32: minIter(nil(),_2,_3) ->= minIter❆1_nil(_2,_3)
Number of strict rules: 28
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #min(add(_1,_2)) ->? #min❆1_add(_1,_2)
   #2: #minIter❆1_add(n,x,y,m) -> #if_min(le(n,m),x,y,m)
   #3: #minIter❆1_add(n,x,y,m) -> #le(n,m)
   #4: #app(add(n,x),y) -> #app(x,y)
   #5: #min❆1_add(n,x) -> #minIter❆1_add(n,x,add(n,x),0())
   #6: #if_rm(false(),n,add(m,x)) -> #rm(n,x)
   #7: #if_rm(true(),n,add(m,x)) -> #rm(n,x)
   #8: #minIter❆1_nil(add(n,y),m) -> #minIter❆1_add(n,y,add(n,y),s(m))
   #9: #minIter(add(_1,_2),_4,_5) ->? #minIter❆1_add(_1,_2,_4,_5)
   #10: #min(nil()) ->? #min❆1_nil()
   #11: #le(s(x),s(y)) -> #le(x,y)
   #12: #if_minsort(false(),add(n,x),y) -> #minsort(x,add(n,y))
   #13: #rm(n,add(m,x)) -> #if_rm(eq(n,m),n,add(m,x))
   #14: #rm(n,add(m,x)) -> #eq(n,m)
   #15: #if_minsort(true(),add(n,x),y) -> #minsort(app(rm(n,x),y),nil())
   #16: #if_minsort(true(),add(n,x),y) -> #app(rm(n,x),y)
   #17: #if_minsort(true(),add(n,x),y) -> #rm(n,x)
   #18: #minIter(nil(),_2,_3) ->? #minIter❆1_nil(_2,_3)
   #19: #minsort(add(n,x),y) -> #if_minsort(eq(n,min❆1_add(n,x)),add(n,x),y)
   #20: #minsort(add(n,x),y) -> #eq(n,min❆1_add(n,x))
   #21: #minsort(add(n,x),y) -> #min❆1_add(n,x)
   #22: #if_min(false(),x,y,m) -> #minIter(x,y,m)
   #23: #eq(s(x),s(y)) -> #eq(x,y)
Number of SCCs: 6, DPs: 14, edges: 17
	SCC { #23 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 if_rm(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
#if_rm(x1,x2,x3)	weight: 0
minIter❆1_nil(x1,x2)	weight: 0
minIter(x1,x2,x3)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#minIter❆1_add(x1,x2,x3,x4)	weight: 0
    eq(x1,x2)	weight: 0
 false()	weight: 0
 #min(x1)	weight: 0
#head(x1)	weight: 0
#min❆1_nil()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: x2
min❆1_add(x1,x2)	weight: 0
  tail(x1)	weight: 0
#minIter❆1_nil(x1,x2)	weight: 0
     0()	weight: 0
  null(x1)	weight: 0
   nil()	weight: 0
#tail(x1)	weight: 0
#minIter(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
#if_minsort(x1,x2,x3)	weight: 0
min❆1_nil()	weight: 0
   min(x1)	weight: 0
#null(x1)	weight: 0
  head(x1)	weight: 0
#minsort(x1,x2)	weight: 0
   add(x1,x2)	weight: 0
if_min(x1,x2,x3,x4)	weight: 0
if_minsort(x1,x2,x3)	weight: 0
minsort(x1,x2)	weight: 0
#min❆1_add(x1,x2)	weight: 0
minIter❆1_add(x1,x2,x3,x4)	weight: 0
    rm(x1,x2)	weight: 0
  #rm(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #23
Number of SCCs: 5, DPs: 13, edges: 16
	SCC { #11 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 if_rm(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
#if_rm(x1,x2,x3)	weight: 0
minIter❆1_nil(x1,x2)	weight: 0
minIter(x1,x2,x3)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#minIter❆1_add(x1,x2,x3,x4)	weight: 0
    eq(x1,x2)	weight: 0
 false()	weight: 0
 #min(x1)	weight: 0
#head(x1)	weight: 0
#min❆1_nil()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
min❆1_add(x1,x2)	weight: 0
  tail(x1)	weight: 0
#minIter❆1_nil(x1,x2)	weight: 0
     0()	weight: 0
  null(x1)	weight: 0
   nil()	weight: 0
#tail(x1)	weight: 0
#minIter(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
#if_minsort(x1,x2,x3)	weight: 0
min❆1_nil()	weight: 0
   min(x1)	weight: 0
#null(x1)	weight: 0
  head(x1)	weight: 0
#minsort(x1,x2)	weight: 0
   add(x1,x2)	weight: 0
if_min(x1,x2,x3,x4)	weight: 0
if_minsort(x1,x2,x3)	weight: 0
minsort(x1,x2)	weight: 0
#min❆1_add(x1,x2)	weight: 0
minIter❆1_add(x1,x2,x3,x4)	weight: 0
    rm(x1,x2)	weight: 0
  #rm(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #11
Number of SCCs: 4, DPs: 12, edges: 15
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 if_rm(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 2)
  #le(x1,x2)	weight: 0
#if_rm(x1,x2,x3)	weight: 0
minIter❆1_nil(x1,x2)	weight: 0
minIter(x1,x2,x3)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#minIter❆1_add(x1,x2,x3,x4)	weight: 0
    eq(x1,x2)	weight: 0
 false()	weight: 0
 #min(x1)	weight: 0
#head(x1)	weight: 0
#min❆1_nil()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
min❆1_add(x1,x2)	weight: 0
  tail(x1)	weight: 0
#minIter❆1_nil(x1,x2)	weight: 0
     0()	weight: 0
  null(x1)	weight: 0
   nil()	weight: 0
#tail(x1)	weight: 0
#minIter(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: x1
#if_minsort(x1,x2,x3)	weight: 0
min❆1_nil()	weight: 0
   min(x1)	weight: 0
#null(x1)	weight: 0
  head(x1)	weight: 0
#minsort(x1,x2)	weight: 0
   add(x1,x2)	weight: (/ 1 2) + x2
if_min(x1,x2,x3,x4)	weight: 0
if_minsort(x1,x2,x3)	weight: 0
minsort(x1,x2)	weight: 0
#min❆1_add(x1,x2)	weight: 0
minIter❆1_add(x1,x2,x3,x4)	weight: 0
    rm(x1,x2)	weight: 0
  #rm(x1,x2)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 3, DPs: 11, edges: 14
	SCC { #6 #7 #13 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
 if_rm(x1,x2,x3)	weight: 0
     s(x1)	weight: (/ 1 4) + x1
  #le(x1,x2)	weight: 0
#if_rm(x1,x2,x3)	weight: x3
minIter❆1_nil(x1,x2)	weight: 0
minIter(x1,x2,x3)	weight: 0
#if_min(x1,x2,x3,x4)	weight: 0
#minIter❆1_add(x1,x2,x3,x4)	weight: 0
    eq(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
 #min(x1)	weight: 0
#head(x1)	weight: 0
#min❆1_nil()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
min❆1_add(x1,x2)	weight: 0
  tail(x1)	weight: 0
#minIter❆1_nil(x1,x2)	weight: 0
     0()	weight: 0
  null(x1)	weight: 0
   nil()	weight: 0
#tail(x1)	weight: 0
#minIter(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
#if_minsort(x1,x2,x3)	weight: 0
min❆1_nil()	weight: 0
   min(x1)	weight: 0
#null(x1)	weight: 0
  head(x1)	weight: 0
#minsort(x1,x2)	weight: 0
   add(x1,x2)	weight: (/ 1 2) + x1 + x2
if_min(x1,x2,x3,x4)	weight: 0
if_minsort(x1,x2,x3)	weight: 0
minsort(x1,x2)	weight: 0
#min❆1_add(x1,x2)	weight: 0
minIter❆1_add(x1,x2,x3,x4)	weight: 0
    rm(x1,x2)	weight: 0
  #rm(x1,x2)	weight: (/ 1 4) + x2
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #6 #7 #13
Number of SCCs: 2, DPs: 8, edges: 10
	SCC { #12 #15 #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 3 4) + x1 + x2
 if_rm(x1,x2,x3)	weight: x3
     s(x1)	weight: (/ 1 8)
  #le(x1,x2)	weight: 0
#if_rm(x1,x2,x3)	weight: 0
minIter❆1_nil(x1,x2)	weight: (/ 1 4) + x1 + x2
minIter(x1,x2,x3)	weight: (/ 1 8)
#if_min(x1,x2,x3,x4)	weight: 0
#minIter❆1_add(x1,x2,x3,x4)	weight: 0
    eq(x1,x2)	weight: (/ 1 8) + x1
 false()	weight: 0
 #min(x1)	weight: 0
#head(x1)	weight: 0
#min❆1_nil()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
min❆1_add(x1,x2)	weight: (/ 1 8)
  tail(x1)	weight: 0
#minIter❆1_nil(x1,x2)	weight: 0
     0()	weight: 0
  null(x1)	weight: 0
   nil()	weight: 0
#tail(x1)	weight: 0
#minIter(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
#if_minsort(x1,x2,x3)	weight: x2 + x3
min❆1_nil()	weight: 0
   min(x1)	weight: 0
#null(x1)	weight: 0
  head(x1)	weight: 0
#minsort(x1,x2)	weight: x1 + x2
   add(x1,x2)	weight: (/ 1 4) + x1 + x2
if_min(x1,x2,x3,x4)	weight: x1 + x2 + x3
if_minsort(x1,x2,x3)	weight: 0
minsort(x1,x2)	weight: 0
#min❆1_add(x1,x2)	weight: 0
minIter❆1_add(x1,x2,x3,x4)	weight: (/ 5 8)
    rm(x1,x2)	weight: x2
  #rm(x1,x2)	weight: (/ 1 8)
   app(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { 8 9 21..24 }
    Removed DPs: #15
Number of SCCs: 2, DPs: 7, edges: 8
	SCC { #12 #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 3 4) + x1 + x2
 if_rm(x1,x2,x3)	weight: x3
     s(x1)	weight: (/ 1 8)
  #le(x1,x2)	weight: 0
#if_rm(x1,x2,x3)	weight: 0
minIter❆1_nil(x1,x2)	weight: (/ 1 4) + x1 + x2
minIter(x1,x2,x3)	weight: (/ 1 8)
#if_min(x1,x2,x3,x4)	weight: 0
#minIter❆1_add(x1,x2,x3,x4)	weight: 0
    eq(x1,x2)	weight: (/ 1 8) + x1
 false()	weight: 0
 #min(x1)	weight: 0
#head(x1)	weight: 0
#min❆1_nil()	weight: 0
  true()	weight: 0
  #eq(x1,x2)	weight: 0
min❆1_add(x1,x2)	weight: (/ 1 8)
  tail(x1)	weight: 0
#minIter❆1_nil(x1,x2)	weight: 0
     0()	weight: 0
  null(x1)	weight: 0
   nil()	weight: 0
#tail(x1)	weight: 0
#minIter(x1,x2,x3)	weight: 0
 #app(x1,x2)	weight: 0
#if_minsort(x1,x2,x3)	weight: x2
min❆1_nil()	weight: 0
   min(x1)	weight: 0
#null(x1)	weight: 0
  head(x1)	weight: 0
#minsort(x1,x2)	weight: (/ 1 8) + x1
   add(x1,x2)	weight: (/ 1 4) + x1 + x2
if_min(x1,x2,x3,x4)	weight: x1 + x2 + x3
if_minsort(x1,x2,x3)	weight: 0
minsort(x1,x2)	weight: 0
#min❆1_add(x1,x2)	weight: 0
minIter❆1_add(x1,x2,x3,x4)	weight: (/ 5 8)
    rm(x1,x2)	weight: x2
  #rm(x1,x2)	weight: (/ 1 8)
   app(x1,x2)	weight: (/ 1 8) + x1 + x2
    Usable rules: { }
    Removed DPs: #12 #19
Number of SCCs: 1, DPs: 5, edges: 6
	SCC { #2 #8 #9 #18 #22 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
