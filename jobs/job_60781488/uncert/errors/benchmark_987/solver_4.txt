Input TRS:
    1: a__terms(N) -> cons(recip(a__sqr(mark(N))),terms(s(N)))
    2: a__sqr(0()) -> 0()
    3: a__sqr(s(X)) -> s(a__add(a__sqr(mark(X)),a__dbl(mark(X))))
    4: a__dbl(0()) -> 0()
    5: a__dbl(s(X)) -> s(s(a__dbl(mark(X))))
    6: a__add(0(),X) -> mark(X)
    7: a__add(s(X),Y) -> s(a__add(mark(X),mark(Y)))
    8: a__first(0(),X) -> nil()
    9: a__first(s(X),cons(Y,Z)) -> cons(mark(Y),first(X,Z))
    10: mark(terms(X)) -> a__terms(mark(X))
    11: mark(sqr(X)) -> a__sqr(mark(X))
    12: mark(add(X1,X2)) -> a__add(mark(X1),mark(X2))
    13: mark(dbl(X)) -> a__dbl(mark(X))
    14: mark(first(X1,X2)) -> a__first(mark(X1),mark(X2))
    15: mark(cons(X1,X2)) -> cons(mark(X1),X2)
    16: mark(recip(X)) -> recip(mark(X))
    17: mark(s(X)) -> s(mark(X))
    18: mark(0()) -> 0()
    19: mark(nil()) -> nil()
    20: a__terms(X) -> terms(X)
    21: a__sqr(X) -> sqr(X)
    22: a__add(X1,X2) -> add(X1,X2)
    23: a__dbl(X) -> dbl(X)
    24: a__first(X1,X2) -> first(X1,X2)
Number of strict rules: 24
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #a__add(0(),X) -> #mark(X)
   #2: #mark(dbl(X)) -> #a__dbl(mark(X))
   #3: #mark(dbl(X)) -> #mark(X)
   #4: #a__first(s(X),cons(Y,Z)) -> #mark(Y)
   #5: #mark(sqr(X)) -> #a__sqr(mark(X))
   #6: #mark(sqr(X)) -> #mark(X)
   #7: #mark(add(X1,X2)) -> #a__add(mark(X1),mark(X2))
   #8: #mark(add(X1,X2)) -> #mark(X1)
   #9: #mark(add(X1,X2)) -> #mark(X2)
   #10: #mark(first(X1,X2)) -> #a__first(mark(X1),mark(X2))
   #11: #mark(first(X1,X2)) -> #mark(X1)
   #12: #mark(first(X1,X2)) -> #mark(X2)
   #13: #a__add(s(X),Y) -> #a__add(mark(X),mark(Y))
   #14: #a__add(s(X),Y) -> #mark(X)
   #15: #a__add(s(X),Y) -> #mark(Y)
   #16: #mark(terms(X)) -> #a__terms(mark(X))
   #17: #mark(terms(X)) -> #mark(X)
   #18: #a__dbl(s(X)) -> #a__dbl(mark(X))
   #19: #a__dbl(s(X)) -> #mark(X)
   #20: #mark(s(X)) -> #mark(X)
   #21: #mark(recip(X)) -> #mark(X)
   #22: #a__sqr(s(X)) -> #a__add(a__sqr(mark(X)),a__dbl(mark(X)))
   #23: #a__sqr(s(X)) -> #a__sqr(mark(X))
   #24: #a__sqr(s(X)) -> #mark(X)
   #25: #a__sqr(s(X)) -> #a__dbl(mark(X))
   #26: #a__sqr(s(X)) -> #mark(X)
   #27: #a__terms(N) -> #a__sqr(mark(N))
   #28: #a__terms(N) -> #mark(N)
   #29: #mark(cons(X1,X2)) -> #mark(X1)
Number of SCCs: 1, DPs: 29, edges: 306
	SCC { #1..29 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
     s(x1)	weight: x1
#a__first(x1,x2)	weight: max{0, (/ 3 8) + x2}
 recip(x1)	weight: (/ 1 8) + x1
   dbl(x1)	weight: (/ 1 4) + x1
#a__add(x1,x2)	weight: max{(/ 1 4) + x2, (/ 1 8) + x1}
a__add(x1,x2)	weight: max{(/ 1 4) + x2, x1}
a__dbl(x1)	weight: (/ 1 4) + x1
a__sqr(x1)	weight: (/ 1 2) + x1
#a__terms(x1)	weight: (/ 3 4) + x1
#mark(x1)	weight: (/ 1 8) + x1
     0()	weight: (/ 1 8)
   nil()	weight: (/ 3 8)
#a__dbl(x1)	weight: (/ 1 4) + x1
  mark(x1)	weight: x1
 first(x1,x2)	weight: max{(/ 3 8) + x2, (/ 1 8) + x1}
a__first(x1,x2)	weight: max{(/ 3 8) + x2, (/ 1 8) + x1}
  cons(x1,x2)	weight: max{0, (/ 1 2) + x1}
   add(x1,x2)	weight: max{(/ 1 4) + x2, x1}
   sqr(x1)	weight: (/ 1 2) + x1
a__terms(x1)	weight: (/ 9 8) + x1
#a__sqr(x1)	weight: (/ 5 8) + x1
 terms(x1)	weight: (/ 9 8) + x1
    Usable rules: { 1..24 }
    Removed DPs: #1..4 #6 #9..12 #15..17 #19 #21 #24..29
Number of SCCs: 2, DPs: 9, edges: 23
	SCC { #18 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above:
#a__first(x1,x2)	status: [x1]	precedence above:
 recip(x1)	status: []	precedence above:
   dbl(x1)	status: [x1]	precedence above: s a__dbl
#a__add(x1,x2)	status: []	precedence above:
a__add(x1,x2)	status: [x2,x1]	precedence above: s add
a__dbl(x1)	status: [x1]	precedence above: s dbl
a__sqr(x1)	status: [x1]	precedence above: s dbl a__add a__dbl add sqr
#a__terms(x1)	status: []	precedence above:
#mark(x1)	status: []	precedence above:
     0()	status: []	precedence above: nil mark
   nil()	status: []	precedence above:
#a__dbl(x1)	status: [x1]	precedence above:
  mark(x1)	status: x1
 first(x1,x2)	status: [x1,x2]	precedence above: a__first cons
a__first(x1,x2)	status: [x1,x2]	precedence above: first cons
  cons(x1,x2)	status: x2
   add(x1,x2)	status: [x2,x1]	precedence above: s a__add
   sqr(x1)	status: [x1]	precedence above: s dbl a__add a__dbl a__sqr add
a__terms(x1)	status: []	precedence above: terms
#a__sqr(x1)	status: []	precedence above:
 terms(x1)	status: []	precedence above: a__terms
    Usable rules: { 1..24 }
    Removed DPs: #18
Number of SCCs: 1, DPs: 8, edges: 22
	SCC { #5 #7 #8 #13 #14 #20 #22 #23 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above: #a__add #mark
#a__first(x1,x2)	status: [x1]	precedence above:
 recip(x1)	status: []	precedence above:
   dbl(x1)	status: [x1]	precedence above: s #a__add a__dbl #mark
#a__add(x1,x2)	status: [x1]	precedence above:
a__add(x1,x2)	status: [x1,x2]	precedence above: s #a__add #mark add
a__dbl(x1)	status: [x1]	precedence above: s dbl #a__add #mark
a__sqr(x1)	status: [x1]	precedence above: s dbl #a__add a__add a__dbl #mark add sqr #a__sqr
#a__terms(x1)	status: []	precedence above:
#mark(x1)	status: [x1]	precedence above: #a__add
     0()	status: []	precedence above: nil mark
   nil()	status: []	precedence above:
#a__dbl(x1)	status: [x1]	precedence above:
  mark(x1)	status: x1
 first(x1,x2)	status: [x1,x2]	precedence above: a__first cons
a__first(x1,x2)	status: [x1,x2]	precedence above: first cons
  cons(x1,x2)	status: x2
   add(x1,x2)	status: [x1,x2]	precedence above: s #a__add a__add #mark
   sqr(x1)	status: [x1]	precedence above: s dbl #a__add a__add a__dbl a__sqr #mark add #a__sqr
a__terms(x1)	status: []	precedence above: terms
#a__sqr(x1)	status: [x1]	precedence above: s dbl #a__add a__add a__dbl a__sqr #mark add sqr
 terms(x1)	status: []	precedence above: a__terms
    Usable rules: { 1..24 }
    Removed DPs: #5 #7 #8 #13 #14 #20 #22 #23
Number of SCCs: 0, DPs: 0, edges: 0
