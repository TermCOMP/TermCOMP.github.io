Input TRS:
    1: app(app(times(),x),app(app(plus(),y),app(s(),z))) -> app(app(plus(),app(app(times(),x),app(app(plus(),y),app(app(times(),app(s(),z)),0())))),app(app(times(),x),app(s(),z)))
    2: app(app(times(),x),0()) -> 0()
    3: app(app(times(),x),app(s(),y)) -> app(app(plus(),app(app(times(),x),y)),x)
    4: app(app(plus(),x),0()) -> x
    5: app(app(plus(),x),app(s(),y)) -> app(s(),app(app(plus(),x),y))
    6: app(app(map(),f),nil()) -> nil()
    7: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    8: app(app(filter(),f),nil()) -> nil()
    9: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    10: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    11: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_times(x,app❆2_plus(y,app❆1_s(z))) -> app❆2_plus(app❆2_times(x,app❆2_plus(y,app❆2_times(app❆1_s(z),0()))),app❆2_times(x,app❆1_s(z)))
2: app❆2_times(x,0()) -> 0()
3: app❆2_times(x,app❆1_s(y)) -> app❆2_plus(app❆2_times(x,y),x)
4: app❆2_plus(x,0()) -> x
5: app❆2_plus(x,app❆1_s(y)) -> app❆1_s(app❆2_plus(x,y))
6: app❆2_map(f,nil()) -> nil()
7: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
8: app❆2_filter(f,nil()) -> nil()
9: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
10: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
11: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
12: app(plus(),_1) ->= app❆1_plus(_1)
13: app(app❆1_plus(_1),_2) ->= app❆2_plus(_1,_2)
14: app(cons(),_1) ->= app❆1_cons(_1)
15: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
16: app(times(),_1) ->= app❆1_times(_1)
17: app(app❆1_times(_1),_2) ->= app❆2_times(_1,_2)
18: app(s(),_1) ->= app❆1_s(_1)
19: app(filter(),_1) ->= app❆1_filter(_1)
20: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
21: app(map(),_1) ->= app❆1_map(_1)
22: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
23: app(filter2(),_1) ->= app❆1_filter2(_1)
24: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
25: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
26: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 11
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(app❆1_plus(_1),_2) ->? #app❆2_plus(_1,_2)
   #2: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #3: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #4: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #5: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #6: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #7: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #8: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #9: #app❆2_plus(x,app❆1_s(y)) -> #app❆2_plus(x,y)
   #10: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #11: #app(app❆1_times(_1),_2) ->? #app❆2_times(_1,_2)
   #12: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #13: #app❆2_times(x,app❆1_s(y)) -> #app❆2_plus(app❆2_times(x,y),x)
   #14: #app❆2_times(x,app❆1_s(y)) -> #app❆2_times(x,y)
   #15: #app❆2_times(x,app❆2_plus(y,app❆1_s(z))) -> #app❆2_plus(app❆2_times(x,app❆2_plus(y,app❆2_times(app❆1_s(z),0()))),app❆2_times(x,app❆1_s(z)))
   #16: #app❆2_times(x,app❆2_plus(y,app❆1_s(z))) -> #app❆2_times(x,app❆2_plus(y,app❆2_times(app❆1_s(z),0())))
   #17: #app❆2_times(x,app❆2_plus(y,app❆1_s(z))) -> #app❆2_plus(y,app❆2_times(app❆1_s(z),0()))
   #18: #app❆2_times(x,app❆2_plus(y,app❆1_s(z))) -> #app❆2_times(app❆1_s(z),0())
   #19: #app❆2_times(x,app❆2_plus(y,app❆1_s(z))) -> #app❆2_times(x,app❆1_s(z))
Number of SCCs: 3, DPs: 13, edges: 28
	SCC { #9 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x2
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_times(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #9
Number of SCCs: 2, DPs: 12, edges: 27
	SCC { #14 #16 #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_plus(x1)	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_map(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_times(x1,x2)	weight: x2
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆2_times(x1,x2)	weight: (/ 1 4)
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
app❆1_times(x1)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { 2 4 5 }
    Removed DPs: #14 #16 #19
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #2..8 #10 #12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
#app❆2_map(x1,x2)	weight: (/ 1 16) + x2
     s()	weight: 0
app❆1_map(x1)	weight: (/ 3 8) + x1
app❆1_plus(x1)	weight: (/ 3 8) + x1
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 3 2) + x1 + x2 + x4
app❆2_plus(x1,x2)	weight: (/ 3 4) + x1
app❆2_map(x1,x2)	weight: (/ 3 4)
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 25 16) + x2
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
 times()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 3 8) + x1
 #app(x1,x2)	weight: (/ 1 8) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 16) + x4
app❆2_filter2(x1,x2)	weight: (/ 3 4) + x1 + x2
#app❆2_times(x1,x2)	weight: x2
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 16) + x1 + x2
app❆2_times(x1,x2)	weight: (/ 3 4) + x2
filter()	weight: 0
app❆1_s(x1)	weight: (/ 3 8)
app❆1_filter2(x1)	weight: (/ 3 8)
app❆1_cons(x1)	weight: (/ 3 8) + x1
app❆3_filter2(x1,x2,x3)	weight: (/ 9 8) + x3
app❆1_times(x1)	weight: (/ 3 8) + x1
   app(x1,x2)	weight: (/ 5 16) + x1
    Usable rules: { 2 4 5 }
    Removed DPs: #2..8 #10 #12
Number of SCCs: 0, DPs: 0, edges: 0
