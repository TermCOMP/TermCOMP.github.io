Input TRS:
    1: from(X) -> cons(X,from(s(X)))
    2: head(cons(X,XS)) -> X
    3: 2nd(cons(X,XS)) -> head(XS)
    4: take(0(),XS) -> nil()
    5: take(s(N),cons(X,XS)) -> cons(X,take(N,XS))
    6: sel(0(),cons(X,XS)) -> X
    7: sel(s(N),cons(X,XS)) -> sel(N,XS)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #sel(s(N),cons(X,XS)) -> #sel(N,XS)
   #2: #take(s(N),cons(X,XS)) -> #take(N,XS)
   #3: #2nd(cons(X,XS)) -> #head(XS)
   #4: #from(X) -> #from(s(X))
Number of SCCs: 3, DPs: 3, edges: 3
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#4->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
