Input TRS:
    1: digits() -> d(0())
    2: d(x) -> if(le(x,s(s(s(s(s(s(s(s(s(0())))))))))),x)
    3: if(true(),x) -> cons(x,d(s(x)))
    4: if(false(),x) -> nil()
    5: le(0(),y) -> true()
    6: le(s(x),0()) -> false()
    7: le(s(x),s(y)) -> le(x,y)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #d(x) -> #if(le(x,s(s(s(s(s(s(s(s(s(0())))))))))),x)
   #2: #d(x) -> #le(x,s(s(s(s(s(s(s(s(s(0()))))))))))
   #3: #le(s(x),s(y)) -> #le(x,y)
   #4: #if(true(),x) -> #d(s(x))
   #5: #digits() -> #d(0())
Number of SCCs: 2, DPs: 3, edges: 3
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     d(x1)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 false()	weight: 0
#digits()	weight: 0
  true()	weight: 0
     0()	weight: 0
    if(x1,x2)	weight: 0
   nil()	weight: 0
   #d(x1)	weight: 0
digits()	weight: 0
  cons(x1,x2)	weight: 0
  #if(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #1 #4 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... succeeded.
    le(x1,x2)	weight: max{0, (/ 3 8) + x2_1 + x1_2}; (- (/ 1 8))
     d(x1)	weight: 0; 0
     s(x1)	weight: max{0, (/ 5 8) + x1_1}; (- (/ 5 8)) + x1_2
  #le(x1,x2)	weight: 0; 0
 false()	weight: 0; (- (/ 1 8))
#digits()	weight: 0; 0
  true()	weight: (/ 1 4); (- (/ 1 8))
     0()	weight: (/ 1 8); (- (/ 1 8))
    if(x1,x2)	weight: 0; 0
   nil()	weight: 0; 0
   #d(x1)	weight: max{0, (/ 49 8) + x1_2}; x1_2
digits()	weight: 0; 0
  cons(x1,x2)	weight: 0; 0
  #if(x1,x2)	weight: max{0, (- (/ 1 8)) + x1_1, (/ 45 8) + x2_2}; x2_2
    Usable rules: { 5..7 }
    Removed DPs: #4
Number of SCCs: 0, DPs: 0, edges: 0
