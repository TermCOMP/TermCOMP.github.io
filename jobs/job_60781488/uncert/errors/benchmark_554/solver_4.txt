Input TRS:
    1: le(0(),Y) -> true()
    2: le(s(X),0()) -> false()
    3: le(s(X),s(Y)) -> le(X,Y)
    4: minus(0(),Y) -> 0()
    5: minus(s(X),Y) -> ifMinus(le(s(X),Y),s(X),Y)
    6: ifMinus(true(),s(X),Y) -> 0()
    7: ifMinus(false(),s(X),Y) -> s(minus(X,Y))
    8: quot(0(),s(Y)) -> 0()
    9: quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Freezing le
1: le❆1_0(Y) -> true()
2: le❆1_s(X,0()) -> false()
3: le❆1_s(X,s(Y)) -> le(X,Y)
4: minus(0(),Y) -> 0()
5: minus(s(X),Y) -> ifMinus(le❆1_s(X,Y),s(X),Y)
6: ifMinus(true(),s(X),Y) -> 0()
7: ifMinus(false(),s(X),Y) -> s(minus(X,Y))
8: quot(0(),s(Y)) -> 0()
9: quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
10: le(0(),_1) ->= le❆1_0(_1)
11: le(s(_1),_2) ->= le❆1_s(_1,_2)
Number of strict rules: 9
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #quot(s(X),s(Y)) -> #quot(minus(X,Y),s(Y))
   #2: #quot(s(X),s(Y)) -> #minus(X,Y)
   #3: #le(s(_1),_2) ->? #le❆1_s(_1,_2)
   #4: #ifMinus(false(),s(X),Y) -> #minus(X,Y)
   #5: #le(0(),_1) ->? #le❆1_0(_1)
   #6: #minus(s(X),Y) -> #ifMinus(le❆1_s(X,Y),s(X),Y)
   #7: #minus(s(X),Y) -> #le❆1_s(X,Y)
   #8: #le❆1_s(X,s(Y)) -> #le(X,Y)
Number of SCCs: 3, DPs: 5, edges: 5
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2) + x2
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4) + x1
ifMinus(x1,x2,x3)	weight: (/ 1 4) + x2
     0()	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#quot(x1,x2)	weight: x1
#ifMinus(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: (/ 3 4)
    Usable rules: { 4..7 }
    Removed DPs: #1
Number of SCCs: 2, DPs: 4, edges: 4
	SCC { #3 #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2) + x2
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: (/ 1 4) + x2
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4) + x1
ifMinus(x1,x2,x3)	weight: (/ 1 4) + x2
     0()	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: x2
#minus(x1,x2)	weight: 0
#quot(x1,x2)	weight: x1
#ifMinus(x1,x2,x3)	weight: 0
le❆1_0(x1)	weight: (/ 3 4)
    Usable rules: { }
    Removed DPs: #3 #8
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #4 #6 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: (/ 1 2) + x2
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: (/ 1 4)
 minus(x1,x2)	weight: (/ 1 4) + x1
 false()	weight: 0
  true()	weight: 0
#le❆1_0(x1)	weight: 0
le❆1_s(x1,x2)	weight: (/ 1 4) + x1
ifMinus(x1,x2,x3)	weight: (/ 1 4) + x2
     0()	weight: 0
  quot(x1,x2)	weight: 0
#le❆1_s(x1,x2)	weight: 0
#minus(x1,x2)	weight: (/ 1 4) + x1 + x2
#quot(x1,x2)	weight: x1
#ifMinus(x1,x2,x3)	weight: x2 + x3
le❆1_0(x1)	weight: (/ 3 4)
    Usable rules: { }
    Removed DPs: #4 #6
Number of SCCs: 0, DPs: 0, edges: 0
