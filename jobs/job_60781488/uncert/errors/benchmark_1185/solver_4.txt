Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: U11(tt(),V1) -> U12(isNatList(activate(V1)))
    3: U12(tt()) -> tt()
    4: U21(tt(),V1) -> U22(isNat(activate(V1)))
    5: U22(tt()) -> tt()
    6: U31(tt(),V) -> U32(isNatList(activate(V)))
    7: U32(tt()) -> tt()
    8: U41(tt(),V1,V2) -> U42(isNat(activate(V1)),activate(V2))
    9: U42(tt(),V2) -> U43(isNatIList(activate(V2)))
    10: U43(tt()) -> tt()
    11: U51(tt(),V1,V2) -> U52(isNat(activate(V1)),activate(V2))
    12: U52(tt(),V2) -> U53(isNatList(activate(V2)))
    13: U53(tt()) -> tt()
    14: U61(tt(),L) -> s(length(activate(L)))
    15: and(tt(),X) -> activate(X)
    16: isNat(n__0()) -> tt()
    17: isNat(n__length(V1)) -> U11(isNatIListKind(activate(V1)),activate(V1))
    18: isNat(n__s(V1)) -> U21(isNatKind(activate(V1)),activate(V1))
    19: isNatIList(V) -> U31(isNatIListKind(activate(V)),activate(V))
    20: isNatIList(n__zeros()) -> tt()
    21: isNatIList(n__cons(V1,V2)) -> U41(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
    22: isNatIListKind(n__nil()) -> tt()
    23: isNatIListKind(n__zeros()) -> tt()
    24: isNatIListKind(n__cons(V1,V2)) -> and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
    25: isNatKind(n__0()) -> tt()
    26: isNatKind(n__length(V1)) -> isNatIListKind(activate(V1))
    27: isNatKind(n__s(V1)) -> isNatKind(activate(V1))
    28: isNatList(n__nil()) -> tt()
    29: isNatList(n__cons(V1,V2)) -> U51(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
    30: length(nil()) -> 0()
    31: length(cons(N,L)) -> U61(and(and(isNatList(activate(L)),n__isNatIListKind(activate(L))),n__and(n__isNat(N),n__isNatKind(N))),activate(L))
    32: zeros() -> n__zeros()
    33: 0() -> n__0()
    34: length(X) -> n__length(X)
    35: s(X) -> n__s(X)
    36: cons(X1,X2) -> n__cons(X1,X2)
    37: isNatIListKind(X) -> n__isNatIListKind(X)
    38: nil() -> n__nil()
    39: and(X1,X2) -> n__and(X1,X2)
    40: isNat(X) -> n__isNat(X)
    41: isNatKind(X) -> n__isNatKind(X)
    42: activate(n__zeros()) -> zeros()
    43: activate(n__0()) -> 0()
    44: activate(n__length(X)) -> length(activate(X))
    45: activate(n__s(X)) -> s(activate(X))
    46: activate(n__cons(X1,X2)) -> cons(activate(X1),X2)
    47: activate(n__isNatIListKind(X)) -> isNatIListKind(X)
    48: activate(n__nil()) -> nil()
    49: activate(n__and(X1,X2)) -> and(activate(X1),X2)
    50: activate(n__isNat(X)) -> isNat(X)
    51: activate(n__isNatKind(X)) -> isNatKind(X)
    52: activate(X) -> X
Number of strict rules: 52
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #U11(tt(),V1) -> #U12(isNatList(activate(V1)))
   #2: #U11(tt(),V1) -> #isNatList(activate(V1))
   #3: #U11(tt(),V1) -> #activate(V1)
   #4: #activate(n__0()) -> #0()
   #5: #isNatList(n__cons(V1,V2)) -> #U51(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
   #6: #isNatList(n__cons(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #7: #isNatList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #8: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #9: #isNatList(n__cons(V1,V2)) -> #activate(V2)
   #10: #isNatList(n__cons(V1,V2)) -> #activate(V1)
   #11: #isNatList(n__cons(V1,V2)) -> #activate(V2)
   #12: #activate(n__cons(X1,X2)) -> #cons(activate(X1),X2)
   #13: #activate(n__cons(X1,X2)) -> #activate(X1)
   #14: #activate(n__zeros()) -> #zeros()
   #15: #activate(n__isNatIListKind(X)) -> #isNatIListKind(X)
   #16: #activate(n__nil()) -> #nil()
   #17: #U31(tt(),V) -> #U32(isNatList(activate(V)))
   #18: #U31(tt(),V) -> #isNatList(activate(V))
   #19: #U31(tt(),V) -> #activate(V)
   #20: #activate(n__isNatKind(X)) -> #isNatKind(X)
   #21: #U42(tt(),V2) -> #U43(isNatIList(activate(V2)))
   #22: #U42(tt(),V2) -> #isNatIList(activate(V2))
   #23: #U42(tt(),V2) -> #activate(V2)
   #24: #U51(tt(),V1,V2) -> #U52(isNat(activate(V1)),activate(V2))
   #25: #U51(tt(),V1,V2) -> #isNat(activate(V1))
   #26: #U51(tt(),V1,V2) -> #activate(V1)
   #27: #U51(tt(),V1,V2) -> #activate(V2)
   #28: #isNatIListKind(n__cons(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #29: #isNatIListKind(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #30: #isNatIListKind(n__cons(V1,V2)) -> #activate(V1)
   #31: #isNatIListKind(n__cons(V1,V2)) -> #activate(V2)
   #32: #activate(n__s(X)) -> #s(activate(X))
   #33: #activate(n__s(X)) -> #activate(X)
   #34: #U52(tt(),V2) -> #U53(isNatList(activate(V2)))
   #35: #U52(tt(),V2) -> #isNatList(activate(V2))
   #36: #U52(tt(),V2) -> #activate(V2)
   #37: #length(cons(N,L)) -> #U61(and(and(isNatList(activate(L)),n__isNatIListKind(activate(L))),n__and(n__isNat(N),n__isNatKind(N))),activate(L))
   #38: #length(cons(N,L)) -> #and(and(isNatList(activate(L)),n__isNatIListKind(activate(L))),n__and(n__isNat(N),n__isNatKind(N)))
   #39: #length(cons(N,L)) -> #and(isNatList(activate(L)),n__isNatIListKind(activate(L)))
   #40: #length(cons(N,L)) -> #isNatList(activate(L))
   #41: #length(cons(N,L)) -> #activate(L)
   #42: #length(cons(N,L)) -> #activate(L)
   #43: #length(cons(N,L)) -> #activate(L)
   #44: #U61(tt(),L) -> #s(length(activate(L)))
   #45: #U61(tt(),L) -> #length(activate(L))
   #46: #U61(tt(),L) -> #activate(L)
   #47: #length(nil()) -> #0()
   #48: #activate(n__and(X1,X2)) -> #and(activate(X1),X2)
   #49: #activate(n__and(X1,X2)) -> #activate(X1)
   #50: #activate(n__length(X)) -> #length(activate(X))
   #51: #activate(n__length(X)) -> #activate(X)
   #52: #isNatKind(n__s(V1)) -> #isNatKind(activate(V1))
   #53: #isNatKind(n__s(V1)) -> #activate(V1)
   #54: #isNat(n__length(V1)) -> #U11(isNatIListKind(activate(V1)),activate(V1))
   #55: #isNat(n__length(V1)) -> #isNatIListKind(activate(V1))
   #56: #isNat(n__length(V1)) -> #activate(V1)
   #57: #isNat(n__length(V1)) -> #activate(V1)
   #58: #isNatIList(V) -> #U31(isNatIListKind(activate(V)),activate(V))
   #59: #isNatIList(V) -> #isNatIListKind(activate(V))
   #60: #isNatIList(V) -> #activate(V)
   #61: #isNatIList(V) -> #activate(V)
   #62: #isNatKind(n__length(V1)) -> #isNatIListKind(activate(V1))
   #63: #isNatKind(n__length(V1)) -> #activate(V1)
   #64: #isNatIList(n__cons(V1,V2)) -> #U41(and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2))),activate(V1),activate(V2))
   #65: #isNatIList(n__cons(V1,V2)) -> #and(isNatKind(activate(V1)),n__isNatIListKind(activate(V2)))
   #66: #isNatIList(n__cons(V1,V2)) -> #isNatKind(activate(V1))
   #67: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #68: #isNatIList(n__cons(V1,V2)) -> #activate(V2)
   #69: #isNatIList(n__cons(V1,V2)) -> #activate(V1)
   #70: #isNatIList(n__cons(V1,V2)) -> #activate(V2)
   #71: #zeros() -> #cons(0(),n__zeros())
   #72: #zeros() -> #0()
   #73: #U41(tt(),V1,V2) -> #U42(isNat(activate(V1)),activate(V2))
   #74: #U41(tt(),V1,V2) -> #isNat(activate(V1))
   #75: #U41(tt(),V1,V2) -> #activate(V1)
   #76: #U41(tt(),V1,V2) -> #activate(V2)
   #77: #and(tt(),X) -> #activate(X)
   #78: #U21(tt(),V1) -> #U22(isNat(activate(V1)))
   #79: #U21(tt(),V1) -> #isNat(activate(V1))
   #80: #U21(tt(),V1) -> #activate(V1)
   #81: #activate(n__isNat(X)) -> #isNat(X)
   #82: #isNat(n__s(V1)) -> #U21(isNatKind(activate(V1)),activate(V1))
   #83: #isNat(n__s(V1)) -> #isNatKind(activate(V1))
   #84: #isNat(n__s(V1)) -> #activate(V1)
   #85: #isNat(n__s(V1)) -> #activate(V1)
Number of SCCs: 2, DPs: 55, edges: 345
	SCC { #22 #64 #73 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
