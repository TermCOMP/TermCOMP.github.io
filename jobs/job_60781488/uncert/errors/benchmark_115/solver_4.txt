Input TRS:
    1: app(D(),t()) -> 1()
    2: app(D(),constant()) -> 0()
    3: app(D(),app(app(+(),x),y)) -> app(app(+(),app(D(),x)),app(D(),y))
    4: app(D(),app(app(*(),x),y)) -> app(app(+(),app(app(*(),y),app(D(),x))),app(app(*(),x),app(D(),y)))
    5: app(D(),app(app(-(),x),y)) -> app(app(-(),app(D(),x)),app(D(),y))
    6: app(D(),app(minus(),x)) -> app(minus(),app(D(),x))
    7: app(D(),app(app(div(),x),y)) -> app(app(-(),app(app(div(),app(D(),x)),y)),app(app(div(),app(app(*(),x),app(D(),y))),app(app(pow(),y),2())))
    8: app(D(),app(ln(),x)) -> app(app(div(),app(D(),x)),x)
    9: app(D(),app(app(pow(),x),y)) -> app(app(+(),app(app(*(),app(app(*(),y),app(app(pow(),x),app(app(-(),y),1())))),app(D(),x))),app(app(*(),app(app(*(),app(app(pow(),x),y)),app(ln(),x))),app(D(),y)))
    10: app(app(map(),f),nil()) -> nil()
    11: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    12: app(app(filter(),f),nil()) -> nil()
    13: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    14: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    15: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 15
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆1_D(t()) -> 1()
2: app❆1_D(constant()) -> 0()
3: app❆1_D(app❆2_+(x,y)) -> app❆2_+(app❆1_D(x),app❆1_D(y))
4: app❆1_D(app❆2_*(x,y)) -> app❆2_+(app❆2_*(y,app❆1_D(x)),app❆2_*(x,app❆1_D(y)))
5: app❆1_D(app❆2_-(x,y)) -> app❆2_-(app❆1_D(x),app❆1_D(y))
6: app❆1_D(app❆1_minus(x)) -> app❆1_minus(app❆1_D(x))
7: app❆1_D(app❆2_div(x,y)) -> app❆2_-(app❆2_div(app❆1_D(x),y),app❆2_div(app❆2_*(x,app❆1_D(y)),app❆2_pow(y,2())))
8: app❆1_D(app❆1_ln(x)) -> app❆2_div(app❆1_D(x),x)
9: app❆1_D(app❆2_pow(x,y)) -> app❆2_+(app❆2_*(app❆2_*(y,app❆2_pow(x,app❆2_-(y,1()))),app❆1_D(x)),app❆2_*(app❆2_*(app❆2_pow(x,y),app❆1_ln(x)),app❆1_D(y)))
10: app❆2_map(f,nil()) -> nil()
11: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
12: app❆2_filter(f,nil()) -> nil()
13: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
14: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
15: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
16: app(cons(),_1) ->= app❆1_cons(_1)
17: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
18: app(div(),_1) ->= app❆1_div(_1)
19: app(app❆1_div(_1),_2) ->= app❆2_div(_1,_2)
20: app(ln(),_1) ->= app❆1_ln(_1)
21: app(filter(),_1) ->= app❆1_filter(_1)
22: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
23: app(+(),_1) ->= app❆1_+(_1)
24: app(app❆1_+(_1),_2) ->= app❆2_+(_1,_2)
25: app(-(),_1) ->= app❆1_-(_1)
26: app(app❆1_-(_1),_2) ->= app❆2_-(_1,_2)
27: app(map(),_1) ->= app❆1_map(_1)
28: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
29: app(minus(),_1) ->= app❆1_minus(_1)
30: app(D(),_1) ->= app❆1_D(_1)
31: app(pow(),_1) ->= app❆1_pow(_1)
32: app(app❆1_pow(_1),_2) ->= app❆2_pow(_1,_2)
33: app(filter2(),_1) ->= app❆1_filter2(_1)
34: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
35: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
36: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
37: app(*(),_1) ->= app❆1_*(_1)
38: app(app❆1_*(_1),_2) ->= app❆2_*(_1,_2)
Number of strict rules: 15
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆1_D(app❆1_minus(x)) -> #app❆1_D(x)
   #2: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #3: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #4: #app❆1_D(app❆2_pow(x,y)) -> #app❆1_D(x)
   #5: #app❆1_D(app❆2_pow(x,y)) -> #app❆1_D(y)
   #6: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #7: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #8: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #9: #app(D(),_1) ->? #app❆1_D(_1)
   #10: #app❆1_D(app❆2_div(x,y)) -> #app❆1_D(x)
   #11: #app❆1_D(app❆2_div(x,y)) -> #app❆1_D(y)
   #12: #app❆1_D(app❆2_-(x,y)) -> #app❆1_D(x)
   #13: #app❆1_D(app❆2_-(x,y)) -> #app❆1_D(y)
   #14: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #15: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #16: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #17: #app❆1_D(app❆2_+(x,y)) -> #app❆1_D(x)
   #18: #app❆1_D(app❆2_+(x,y)) -> #app❆1_D(y)
   #19: #app❆1_D(app❆1_ln(x)) -> #app❆1_D(x)
   #20: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #21: #app❆1_D(app❆2_*(x,y)) -> #app❆1_D(x)
   #22: #app❆1_D(app❆2_*(x,y)) -> #app❆1_D(y)
Number of SCCs: 2, DPs: 20, edges: 159
	SCC { #3 #6..8 #14..16 #20 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     1()	weight: 0
#app❆2_map(x1,x2)	weight: (/ 1 4) + x1
    ln()	weight: 0
app❆2_pow(x1,x2)	weight: 0
app❆1_map(x1)	weight: (/ 1 2) + x1
app❆1_minus(x1)	weight: 0
constant()	weight: 0
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
   pow()	weight: 0
app❆2_div(x1,x2)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
     t()	weight: 0
 false()	weight: 0
   div()	weight: 0
app❆1_D(x1)	weight: 0
app❆1_-(x1)	weight: 0
     D()	weight: 0
app❆2_-(x1,x2)	weight: 0
  true()	weight: 0
app❆1_pow(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2) + x1
     -()	weight: 0
 #app(x1,x2)	weight: x1
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2) + x2
#app❆1_D(x1)	weight: 0
app❆1_div(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4) + x1
     2()	weight: 0
app❆1_*(x1)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4)
filter()	weight: 0
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4) + x2
app❆1_ln(x1)	weight: 0
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #3 #6 #8 #14..16 #20
Number of SCCs: 2, DPs: 13, edges: 145
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     1()	weight: 0
#app❆2_map(x1,x2)	weight: (/ 1 4) + x2
    ln()	weight: 0
app❆2_pow(x1,x2)	weight: 0
app❆1_map(x1)	weight: (/ 1 2)
app❆1_minus(x1)	weight: 0
constant()	weight: 0
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
   pow()	weight: 0
app❆2_div(x1,x2)	weight: 0
app❆2_*(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
     t()	weight: 0
 false()	weight: 0
   div()	weight: 0
app❆1_D(x1)	weight: 0
app❆1_-(x1)	weight: 0
     D()	weight: 0
app❆2_-(x1,x2)	weight: 0
  true()	weight: 0
app❆1_pow(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2)
     -()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2)
#app❆1_D(x1)	weight: 0
app❆1_div(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4)
     2()	weight: 0
app❆1_*(x1)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4) + x2
filter()	weight: 0
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4)
app❆1_ln(x1)	weight: 0
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 1, DPs: 12, edges: 144
	SCC { #1 #4 #5 #10..13 #17..19 #21 #22 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     1()	weight: 0
#app❆2_map(x1,x2)	weight: (/ 1 4)
    ln()	weight: 0
app❆2_pow(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆1_map(x1)	weight: (/ 1 2)
app❆1_minus(x1)	weight: (/ 1 4) + x1
constant()	weight: 0
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
   pow()	weight: 0
app❆2_div(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_*(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_map(x1,x2)	weight: 0
     t()	weight: 0
 false()	weight: 0
   div()	weight: 0
app❆1_D(x1)	weight: 0
app❆1_-(x1)	weight: 0
     D()	weight: 0
app❆2_-(x1,x2)	weight: (/ 1 4) + x1 + x2
  true()	weight: 0
app❆1_pow(x1)	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
app❆2_+(x1,x2)	weight: (/ 1 4) + x1 + x2
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 2)
     -()	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 2)
#app❆1_D(x1)	weight: x1
app❆1_div(x1)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
#app❆2_filter(x1,x2)	weight: (/ 1 4)
     2()	weight: 0
app❆1_*(x1)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 1 4)
filter()	weight: 0
     +()	weight: 0
app❆1_+(x1)	weight: 0
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: (/ 3 4)
app❆1_ln(x1)	weight: (/ 1 4) + x1
     *()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1 #4 #5 #10..13 #17..19 #21 #22
Number of SCCs: 1, DPs: 0, edges: 0
