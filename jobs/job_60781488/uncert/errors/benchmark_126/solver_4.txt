Input TRS:
    1: app(app(minus(),x),0()) -> x
    2: app(app(minus(),app(s(),x)),app(s(),y)) -> app(app(minus(),x),y)
    3: app(double(),0()) -> 0()
    4: app(double(),app(s(),x)) -> app(s(),app(s(),app(double(),x)))
    5: app(app(plus(),0()),y) -> y
    6: app(app(plus(),app(s(),x)),y) -> app(s(),app(app(plus(),x),y))
    7: app(app(plus(),app(s(),x)),y) -> app(app(plus(),x),app(s(),y))
    8: app(app(plus(),app(s(),x)),y) -> app(s(),app(app(plus(),app(app(minus(),x),y)),app(double(),y)))
    9: app(app(map(),f),nil()) -> nil()
    10: app(app(map(),f),app(app(cons(),x),xs)) -> app(app(cons(),app(f,x)),app(app(map(),f),xs))
    11: app(app(filter(),f),nil()) -> nil()
    12: app(app(filter(),f),app(app(cons(),x),xs)) -> app(app(app(app(filter2(),app(f,x)),f),x),xs)
    13: app(app(app(app(filter2(),true()),f),x),xs) -> app(app(cons(),x),app(app(filter(),f),xs))
    14: app(app(app(app(filter2(),false()),f),x),xs) -> app(app(filter(),f),xs)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_minus(x,0()) -> x
2: app❆2_minus(app❆1_s(x),app❆1_s(y)) -> app❆2_minus(x,y)
3: app❆1_double(0()) -> 0()
4: app❆1_double(app❆1_s(x)) -> app❆1_s(app❆1_s(app❆1_double(x)))
5: app❆2_plus(0(),y) -> y
6: app❆2_plus(app❆1_s(x),y) -> app❆1_s(app❆2_plus(x,y))
7: app❆2_plus(app❆1_s(x),y) -> app❆2_plus(x,app❆1_s(y))
8: app❆2_plus(app❆1_s(x),y) -> app❆1_s(app❆2_plus(app❆2_minus(x,y),app❆1_double(y)))
9: app❆2_map(f,nil()) -> nil()
10: app❆2_map(f,app❆2_cons(x,xs)) -> app❆2_cons(app(f,x),app❆2_map(f,xs))
11: app❆2_filter(f,nil()) -> nil()
12: app❆2_filter(f,app❆2_cons(x,xs)) -> app❆4_filter2(app(f,x),f,x,xs)
13: app❆4_filter2(true(),f,x,xs) -> app❆2_cons(x,app❆2_filter(f,xs))
14: app❆4_filter2(false(),f,x,xs) -> app❆2_filter(f,xs)
15: app(plus(),_1) ->= app❆1_plus(_1)
16: app(app❆1_plus(_1),_2) ->= app❆2_plus(_1,_2)
17: app(cons(),_1) ->= app❆1_cons(_1)
18: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
19: app(double(),_1) ->= app❆1_double(_1)
20: app(s(),_1) ->= app❆1_s(_1)
21: app(filter(),_1) ->= app❆1_filter(_1)
22: app(app❆1_filter(_1),_2) ->= app❆2_filter(_1,_2)
23: app(map(),_1) ->= app❆1_map(_1)
24: app(app❆1_map(_1),_2) ->= app❆2_map(_1,_2)
25: app(minus(),_1) ->= app❆1_minus(_1)
26: app(app❆1_minus(_1),_2) ->= app❆2_minus(_1,_2)
27: app(filter2(),_1) ->= app❆1_filter2(_1)
28: app(app❆1_filter2(_1),_2) ->= app❆2_filter2(_1,_2)
29: app(app❆2_filter2(_1,_2),_3) ->= app❆3_filter2(_1,_2,_3)
30: app(app❆3_filter2(_1,_2,_3),_4) ->= app❆4_filter2(_1,_2,_3,_4)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_minus(app❆1_s(x),app❆1_s(y)) -> #app❆2_minus(x,y)
   #2: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(x,y)
   #3: #app❆4_filter2(true(),f,x,xs) -> #app❆2_filter(f,xs)
   #4: #app(app❆1_map(_1),_2) ->? #app❆2_map(_1,_2)
   #5: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app❆4_filter2(app(f,x),f,x,xs)
   #6: #app❆2_filter(f,app❆2_cons(x,xs)) -> #app(f,x)
   #7: #app❆4_filter2(false(),f,x,xs) -> #app❆2_filter(f,xs)
   #8: #app(app❆3_filter2(_1,_2,_3),_4) ->? #app❆4_filter2(_1,_2,_3,_4)
   #9: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(x,app❆1_s(y))
   #10: #app❆2_map(f,app❆2_cons(x,xs)) -> #app(f,x)
   #11: #app❆2_map(f,app❆2_cons(x,xs)) -> #app❆2_map(f,xs)
   #12: #app(app❆1_filter(_1),_2) ->? #app❆2_filter(_1,_2)
   #13: #app(double(),_1) ->? #app❆1_double(_1)
   #14: #app(app❆1_minus(_1),_2) ->? #app❆2_minus(_1,_2)
   #15: #app(app❆1_plus(_1),_2) ->? #app❆2_plus(_1,_2)
   #16: #app❆2_plus(app❆1_s(x),y) -> #app❆2_plus(app❆2_minus(x,y),app❆1_double(y))
   #17: #app❆2_plus(app❆1_s(x),y) -> #app❆2_minus(x,y)
   #18: #app❆2_plus(app❆1_s(x),y) -> #app❆1_double(y)
   #19: #app❆1_double(app❆1_s(x)) -> #app❆1_double(x)
Number of SCCs: 4, DPs: 14, edges: 31
	SCC { #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_minus(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
#app❆1_double(x1)	weight: x1
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_minus(x1)	weight: 0
app❆1_plus(x1)	weight: 0
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
#app❆2_minus(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
double()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆1_double(x1)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #19
Number of SCCs: 3, DPs: 13, edges: 30
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_minus(x1,x2)	weight: 0
#app❆2_map(x1,x2)	weight: 0
#app❆1_double(x1)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_minus(x1)	weight: 0
app❆1_plus(x1)	weight: 0
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
#app❆2_minus(x1,x2)	weight: x2
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: 0
double()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆1_double(x1)	weight: 0
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 12, edges: 29
	SCC { #2 #9 #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app❆2_map(x1,x2)	weight: 0
#app❆1_double(x1)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: 0
app❆1_minus(x1)	weight: 0
app❆1_plus(x1)	weight: 0
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_plus(x1,x2)	weight: 0
app❆2_map(x1,x2)	weight: 0
#app❆2_minus(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: 0
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x1
double()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: 0
 #app(x1,x2)	weight: 0
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: 0
app❆2_filter2(x1,x2)	weight: 0
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆1_double(x1)	weight: (/ 1 4)
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 2) + x1
app❆1_filter2(x1)	weight: 0
app❆1_cons(x1)	weight: 0
app❆3_filter2(x1,x2,x3)	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { 1 2 }
    Removed DPs: #2 #9 #16
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #3..8 #10..12 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app❆2_map(x1,x2)	weight: x2
#app❆1_double(x1)	weight: 0
     s()	weight: 0
app❆1_map(x1)	weight: (/ 1 4) + x1
app❆1_minus(x1)	weight: (/ 1 4) + x1
app❆1_plus(x1)	weight: (/ 1 4)
 minus()	weight: 0
app❆4_filter2(x1,x2,x3,x4)	weight: (/ 5 8) + x3 + x4
app❆2_plus(x1,x2)	weight: (/ 1 4) + x1 + x2
app❆2_map(x1,x2)	weight: (/ 1 4) + x1
#app❆2_minus(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
filter2()	weight: 0
app❆2_filter(x1,x2)	weight: (/ 1 4) + x1 + x2
     0()	weight: 0
#app❆2_plus(x1,x2)	weight: x1
double()	weight: 0
   nil()	weight: 0
app❆1_filter(x1)	weight: (/ 1 4) + x1
 #app(x1,x2)	weight: (/ 1 4) + x2
   map()	weight: 0
#app❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8) + x4
app❆2_filter2(x1,x2)	weight: (/ 1 4) + x2
  plus()	weight: 0
#app❆2_filter(x1,x2)	weight: x2
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: (/ 3 8) + x1 + x2
app❆1_double(x1)	weight: (/ 1 4)
filter()	weight: 0
app❆1_s(x1)	weight: (/ 1 4) + x1
app❆1_filter2(x1)	weight: (/ 1 4)
app❆1_cons(x1)	weight: (/ 1 4) + x1
app❆3_filter2(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
   app(x1,x2)	weight: (/ 1 8)
    Usable rules: { 1 2 11 }
    Removed DPs: #3..8 #10..12
Number of SCCs: 0, DPs: 0, edges: 0
