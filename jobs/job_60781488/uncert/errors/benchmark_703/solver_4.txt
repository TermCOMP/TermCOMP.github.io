Input TRS:
    1: merge(nil(),y) -> y
    2: merge(x,nil()) -> x
    3: merge(.(x,y),.(u,v)) -> if(<(x,u),.(x,merge(y,.(u,v))),.(u,merge(.(x,y),v)))
    4: ++(nil(),y) -> y
    5: ++(.(x,y),z) -> .(x,++(y,z))
    6: if(true(),x,y) -> x
    7: if(false(),x,y) -> x
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing if
1: merge(nil(),y) -> y
2: merge(x,nil()) -> x
3: merge(.(x,y),.(u,v)) -> if❆1_<(x,u,.(x,merge(y,.(u,v))),.(u,merge(.(x,y),v)))
4: ++(nil(),y) -> y
5: ++(.(x,y),z) -> .(x,++(y,z))
6: if❆1_true(x,y) -> x
7: if❆1_false(x,y) -> x
8: if(false(),_2,_3) ->= if❆1_false(_2,_3)
9: if(true(),_2,_3) ->= if❆1_true(_2,_3)
10: if(<(_1,_2),_4,_5) ->= if❆1_<(_1,_2,_4,_5)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #if(true(),_2,_3) ->? #if❆1_true(_2,_3)
   #2: #++(.(x,y),z) -> #++(y,z)
   #3: #merge(.(x,y),.(u,v)) -> #merge(y,.(u,v))
   #4: #merge(.(x,y),.(u,v)) -> #merge(.(x,y),v)
   #5: #if(false(),_2,_3) ->? #if❆1_false(_2,_3)
Number of SCCs: 2, DPs: 3, edges: 5
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 merge(x1,x2)	weight: 0
     <(x1,x2)	weight: 0
    ++(x1,x2)	weight: 0
 false()	weight: 0
if❆1_false(x1,x2)	weight: 0
#if❆1_false(x1,x2)	weight: 0
#merge(x1,x2)	weight: 0
  true()	weight: 0
    if(x1,x2,x3)	weight: 0
  #++(x1,x2)	weight: x1
   nil()	weight: 0
if❆1_true(x1,x2)	weight: 0
     .(x1,x2)	weight: (/ 1 2) + x2
  #if(x1,x2,x3)	weight: 0
#if❆1_true(x1,x2)	weight: 0
if❆1_<(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #2
Number of SCCs: 1, DPs: 2, edges: 4
	SCC { #3 #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 merge(x1,x2)	weight: 0
     <(x1,x2)	weight: 0
    ++(x1,x2)	weight: 0
 false()	weight: 0
if❆1_false(x1,x2)	weight: 0
#if❆1_false(x1,x2)	weight: 0
#merge(x1,x2)	weight: x2
  true()	weight: 0
    if(x1,x2,x3)	weight: 0
  #++(x1,x2)	weight: 0
   nil()	weight: 0
if❆1_true(x1,x2)	weight: 0
     .(x1,x2)	weight: (/ 1 2) + x1 + x2
  #if(x1,x2,x3)	weight: 0
#if❆1_true(x1,x2)	weight: 0
if❆1_<(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
 merge(x1,x2)	weight: 0
     <(x1,x2)	weight: 0
    ++(x1,x2)	weight: 0
 false()	weight: 0
if❆1_false(x1,x2)	weight: 0
#if❆1_false(x1,x2)	weight: 0
#merge(x1,x2)	weight: x1 + x2
  true()	weight: 0
    if(x1,x2,x3)	weight: 0
  #++(x1,x2)	weight: 0
   nil()	weight: 0
if❆1_true(x1,x2)	weight: 0
     .(x1,x2)	weight: (/ 1 2) + x1 + x2
  #if(x1,x2,x3)	weight: 0
#if❆1_true(x1,x2)	weight: 0
if❆1_<(x1,x2,x3,x4)	weight: 0
    Usable rules: { }
    Removed DPs: #3
Number of SCCs: 0, DPs: 0, edges: 0
