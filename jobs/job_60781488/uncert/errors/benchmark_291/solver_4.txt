Input TRS:
    1: f(tt(),x) -> f(isList(x),x)
    2: isList(Cons(x,xs())) -> isList(xs())
    3: isList(nil()) -> tt()
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Freezing isList
1: f(tt(),x) -> f(isList(x),x)
2: isList❆1_Cons(x,xs()) -> isList❆1_xs()
3: isList❆1_nil() -> tt()
4: isList(nil()) ->= isList❆1_nil()
5: isList(xs()) ->= isList❆1_xs()
6: isList(Cons(_1,_2)) ->= isList❆1_Cons(_1,_2)
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #isList(Cons(_1,_2)) ->? #isList❆1_Cons(_1,_2)
   #2: #f(tt(),x) -> #f(isList(x),x)
   #3: #f(tt(),x) -> #isList(x)
   #4: #isList(nil()) ->? #isList❆1_nil()
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #f(tt(),nil())	-#2->
  #f(isList(nil()),nil())	--->*
  #f(tt(),nil())
  Looping with: [ ]
