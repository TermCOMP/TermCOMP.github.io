Input TRS:
    1: zeros() -> cons(0(),n__zeros())
    2: U11(tt(),L) -> U12(tt(),activate(L))
    3: U12(tt(),L) -> s(length(activate(L)))
    4: length(nil()) -> 0()
    5: length(cons(N,L)) -> U11(tt(),activate(L))
    6: zeros() -> n__zeros()
    7: activate(n__zeros()) -> zeros()
    8: activate(X) -> X
Number of strict rules: 8
Direct Order(PosReal,>,Poly) ... removes: 4
   U11(x1,x2)	weight: (/ 1 4) + x1 + x2
     s(x1)	weight: x1
activate(x1)	weight: x1
n__zeros()	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 1 4) + x1 + x2
     0()	weight: 0
   nil()	weight: 0
  cons(x1,x2)	weight: x1 + x2
    tt()	weight: 0
length(x1)	weight: (/ 1 4) + x1
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing U12 U11
1: zeros() -> cons(0(),n__zeros())
2: U11❆1_tt(L) -> U12❆1_tt(activate(L))
3: U12❆1_tt(L) -> s(length(activate(L)))
5: length(cons(N,L)) -> U11❆1_tt(activate(L))
6: zeros() -> n__zeros()
7: activate(n__zeros()) -> zeros()
8: activate(X) -> X
9: U11(tt(),_1) ->= U11❆1_tt(_1)
10: U12(tt(),_1) ->= U12❆1_tt(_1)
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... removes: 10 9
   U11(x1,x2)	weight: (/ 1 2) + x1 + x2
     s(x1)	weight: x1
activate(x1)	weight: x1
n__zeros()	weight: 0
 zeros()	weight: 0
   U12(x1,x2)	weight: (/ 1 2) + x1 + x2
U11❆1_tt(x1)	weight: (/ 1 4) + x1
     0()	weight: 0
   nil()	weight: 0
  cons(x1,x2)	weight: x1 + 2 * x2
    tt()	weight: 0
U12❆1_tt(x1)	weight: (/ 1 4) + x1
length(x1)	weight: (/ 1 4) + x1
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #U11❆1_tt(L) -> #U12❆1_tt(activate(L))
   #2: #U11❆1_tt(L) -> #activate(L)
   #3: #activate(n__zeros()) -> #zeros()
   #4: #length(cons(N,L)) -> #U11❆1_tt(activate(L))
   #5: #length(cons(N,L)) -> #activate(L)
   #6: #U12❆1_tt(L) -> #length(activate(L))
   #7: #U12❆1_tt(L) -> #activate(L)
Number of SCCs: 1, DPs: 3, edges: 3
	SCC { #1 #4 #6 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #length(cons(N,n__zeros()))	-#4->
  #U11❆1_tt(activate(n__zeros()))	--->*
  #U11❆1_tt(activate(n__zeros()))	-#1->
  #U12❆1_tt(activate(activate(n__zeros())))	--->*
  #U12❆1_tt(activate(activate(n__zeros())))	-#6->
  #length(activate(activate(activate(n__zeros()))))	--->*
  #length(cons(0(),n__zeros()))
  Looping with: [ N := 0(); ]
