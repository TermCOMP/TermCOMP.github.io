Input TRS:
    1: nats() -> adx(zeros())
    2: zeros() -> cons(0(),zeros())
    3: incr(cons(X,Y)) -> cons(s(X),incr(Y))
    4: adx(cons(X,Y)) -> incr(cons(X,adx(Y)))
    5: hd(cons(X,Y)) -> X
    6: tl(cons(X,Y)) -> Y
Number of strict rules: 6
Direct Order(PosReal,>,Poly) ... removes: 5 6
  incr(x1)	weight: x1
    hd(x1)	weight: (/ 1 2) + x1
     s(x1)	weight: x1
   adx(x1)	weight: x1
 zeros()	weight: 0
     0()	weight: 0
    tl(x1)	weight: (/ 1 2) + x1
  nats()	weight: 0
  cons(x1,x2)	weight: 2 * x1 + x2
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... failed.
Freezing incr
1: nats() -> adx(zeros())
2: zeros() -> cons(0(),zeros())
3: incr❆1_cons(X,Y) -> cons(s(X),incr(Y))
4: adx(cons(X,Y)) -> incr❆1_cons(X,adx(Y))
7: incr(cons(_1,_2)) ->= incr❆1_cons(_1,_2)
Number of strict rules: 4
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #zeros() -> #zeros()
   #2: #incr(cons(_1,_2)) ->? #incr❆1_cons(_1,_2)
   #3: #incr❆1_cons(X,Y) -> #incr(Y)
   #4: #nats() -> #adx(zeros())
   #5: #nats() -> #zeros()
   #6: #adx(cons(X,Y)) -> #incr❆1_cons(X,adx(Y))
   #7: #adx(cons(X,Y)) -> #adx(Y)
Number of SCCs: 3, DPs: 4, edges: 4
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #zeros()	-#1->
  #zeros()	--->*
  #zeros()
  Looping with: [ ]
