Input TRS:
    1: terms(N) -> cons(recip(sqr(N)),n__terms(n__s(N)))
    2: sqr(0()) -> 0()
    3: sqr(s(X)) -> s(n__add(n__sqr(activate(X)),n__dbl(activate(X))))
    4: dbl(0()) -> 0()
    5: dbl(s(X)) -> s(n__s(n__dbl(activate(X))))
    6: add(0(),X) -> X
    7: add(s(X),Y) -> s(n__add(activate(X),Y))
    8: first(0(),X) -> nil()
    9: first(s(X),cons(Y,Z)) -> cons(Y,n__first(activate(X),activate(Z)))
    10: terms(X) -> n__terms(X)
    11: s(X) -> n__s(X)
    12: add(X1,X2) -> n__add(X1,X2)
    13: sqr(X) -> n__sqr(X)
    14: dbl(X) -> n__dbl(X)
    15: first(X1,X2) -> n__first(X1,X2)
    16: activate(n__terms(X)) -> terms(activate(X))
    17: activate(n__s(X)) -> s(X)
    18: activate(n__add(X1,X2)) -> add(activate(X1),activate(X2))
    19: activate(n__sqr(X)) -> sqr(activate(X))
    20: activate(n__dbl(X)) -> dbl(activate(X))
    21: activate(n__first(X1,X2)) -> first(activate(X1),activate(X2))
    22: activate(X) -> X
Number of strict rules: 22
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #first(s(X),cons(Y,Z)) -> #activate(X)
   #2: #first(s(X),cons(Y,Z)) -> #activate(Z)
   #3: #activate(n__dbl(X)) -> #dbl(activate(X))
   #4: #activate(n__dbl(X)) -> #activate(X)
   #5: #add(s(X),Y) -> #s(n__add(activate(X),Y))
   #6: #add(s(X),Y) -> #activate(X)
   #7: #dbl(s(X)) -> #s(n__s(n__dbl(activate(X))))
   #8: #dbl(s(X)) -> #activate(X)
   #9: #activate(n__s(X)) -> #s(X)
   #10: #activate(n__sqr(X)) -> #sqr(activate(X))
   #11: #activate(n__sqr(X)) -> #activate(X)
   #12: #activate(n__first(X1,X2)) -> #first(activate(X1),activate(X2))
   #13: #activate(n__first(X1,X2)) -> #activate(X1)
   #14: #activate(n__first(X1,X2)) -> #activate(X2)
   #15: #activate(n__terms(X)) -> #terms(activate(X))
   #16: #activate(n__terms(X)) -> #activate(X)
   #17: #sqr(s(X)) -> #s(n__add(n__sqr(activate(X)),n__dbl(activate(X))))
   #18: #sqr(s(X)) -> #activate(X)
   #19: #sqr(s(X)) -> #activate(X)
   #20: #terms(N) -> #sqr(N)
   #21: #activate(n__add(X1,X2)) -> #add(activate(X1),activate(X2))
   #22: #activate(n__add(X1,X2)) -> #activate(X1)
   #23: #activate(n__add(X1,X2)) -> #activate(X2)
Number of SCCs: 1, DPs: 19, edges: 165
	SCC { #1..4 #6 #8 #10..16 #18..23 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... succeeded.
     s(x1)	weight: x1
n__sqr(x1)	weight: (/ 3 16) + x1
n__first(x1,x2)	weight: max{(/ 1 4) + x2, (/ 1 8) + x1}
 recip(x1)	weight: x1
activate(x1)	weight: x1
   dbl(x1)	weight: (/ 1 8) + x1
 #dbl(x1)	weight: (/ 1 8) + x1
#terms(x1)	weight: (/ 3 16) + x1
#activate(x1)	weight: (/ 1 16) + x1
n__add(x1,x2)	weight: max{(/ 1 16) + x2, x1}
  n__s(x1)	weight: x1
 #sqr(x1)	weight: (/ 1 8) + x1
n__dbl(x1)	weight: (/ 1 8) + x1
     0()	weight: 0
   #s(x1)	weight: 0
#first(x1,x2)	weight: max{(/ 1 4) + x2, (/ 1 8) + x1}
   nil()	weight: (/ 1 4)
 first(x1,x2)	weight: max{(/ 1 4) + x2, (/ 1 8) + x1}
n__terms(x1)	weight: (/ 1 2) + x1
  cons(x1,x2)	weight: max{x2, (/ 5 16) + x1}
 #add(x1,x2)	weight: max{0, (/ 1 16) + x1}
   add(x1,x2)	weight: max{(/ 1 16) + x2, x1}
   sqr(x1)	weight: (/ 3 16) + x1
 terms(x1)	weight: (/ 1 2) + x1
    Usable rules: { 1..22 }
    Removed DPs: #1..4 #8 #10..16 #18..20 #23
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #6 #21 #22 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above: n__s
n__sqr(x1)	status: [x1]	precedence above: s activate dbl n__add n__s n__dbl 0 add sqr
n__first(x1,x2)	status: []	precedence above: nil first cons
 recip(x1)	status: []	precedence above:
activate(x1)	status: x1
   dbl(x1)	status: [x1]	precedence above: s activate n__add n__s n__dbl 0 add
 #dbl(x1)	status: []	precedence above:
#terms(x1)	status: []	precedence above:
#activate(x1)	status: [x1]	precedence above: #add
n__add(x1,x2)	status: [x1,x2]	precedence above: s n__s add
  n__s(x1)	status: [x1]	precedence above: s
 #sqr(x1)	status: []	precedence above:
n__dbl(x1)	status: [x1]	precedence above: s activate dbl n__add n__s 0 add
     0()	status: []	precedence above:
   #s(x1)	status: []	precedence above:
#first(x1,x2)	status: [x2,x1]	precedence above:
   nil()	status: []	precedence above:
 first(x1,x2)	status: []	precedence above: n__first nil cons
n__terms(x1)	status: [x1]	precedence above: cons terms
  cons(x1,x2)	status: []	precedence above:
 #add(x1,x2)	status: [x1]	precedence above: #activate
   add(x1,x2)	status: [x1,x2]	precedence above: s n__add n__s
   sqr(x1)	status: [x1]	precedence above: s n__sqr activate dbl n__add n__s n__dbl 0 add
 terms(x1)	status: [x1]	precedence above: n__terms cons
    Usable rules: { 1..22 }
    Removed DPs: #22
Number of SCCs: 1, DPs: 2, edges: 2
	SCC { #6 #21 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... succeeded.
     s(x1)	status: [x1]	precedence above: n__s
n__sqr(x1)	status: [x1]	precedence above: s activate dbl n__add n__s n__dbl 0 add sqr
n__first(x1,x2)	status: []	precedence above: nil first cons
 recip(x1)	status: []	precedence above:
activate(x1)	status: x1
   dbl(x1)	status: [x1]	precedence above: s activate n__add n__s n__dbl 0 add
 #dbl(x1)	status: []	precedence above:
#terms(x1)	status: []	precedence above:
#activate(x1)	status: [x1]	precedence above: #add
n__add(x1,x2)	status: [x1,x2]	precedence above: s n__s add
  n__s(x1)	status: [x1]	precedence above: s
 #sqr(x1)	status: []	precedence above:
n__dbl(x1)	status: [x1]	precedence above: s activate dbl n__add n__s 0 add
     0()	status: []	precedence above:
   #s(x1)	status: []	precedence above:
#first(x1,x2)	status: [x2,x1]	precedence above:
   nil()	status: []	precedence above:
 first(x1,x2)	status: []	precedence above: n__first nil cons
n__terms(x1)	status: [x1]	precedence above: cons terms
  cons(x1,x2)	status: []	precedence above:
 #add(x1,x2)	status: [x1]	precedence above: #activate
   add(x1,x2)	status: [x1,x2]	precedence above: s n__add n__s
   sqr(x1)	status: [x1]	precedence above: s n__sqr activate dbl n__add n__s n__dbl 0 add
 terms(x1)	status: [x1]	precedence above: n__terms cons
    Usable rules: { 1..22 }
    Removed DPs: #6
Number of SCCs: 0, DPs: 0, edges: 0
