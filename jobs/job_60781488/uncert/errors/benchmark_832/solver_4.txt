Input TRS:
    1: from(X) -> cons(X,from(s(X)))
    2: sel(0(),cons(X,XS)) -> X
    3: sel(s(N),cons(X,XS)) -> sel(N,XS)
    4: minus(X,0()) -> 0()
    5: minus(s(X),s(Y)) -> minus(X,Y)
    6: quot(0(),s(Y)) -> 0()
    7: quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
    8: zWquot(XS,nil()) -> nil()
    9: zWquot(nil(),XS) -> nil()
    10: zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
Number of strict rules: 10
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #quot(s(X),s(Y)) -> #quot(minus(X,Y),s(Y))
   #2: #quot(s(X),s(Y)) -> #minus(X,Y)
   #3: #zWquot(cons(X,XS),cons(Y,YS)) -> #quot(X,Y)
   #4: #zWquot(cons(X,XS),cons(Y,YS)) -> #zWquot(XS,YS)
   #5: #minus(s(X),s(Y)) -> #minus(X,Y)
   #6: #sel(s(N),cons(X,XS)) -> #sel(N,XS)
   #7: #from(X) -> #from(s(X))
Number of SCCs: 4, DPs: 4, edges: 4
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  found.
  #from(X)	-#7->
  #from(s(X))	--->*
  #from(s(X))
  Looping with: [ X := s(X); ]
