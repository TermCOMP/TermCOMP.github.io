Input TRS:
    1: app'(app'(minus(),x),0()) -> x
    2: app'(app'(minus(),app'(s(),x)),app'(s(),y)) -> app'(app'(minus(),x),y)
    3: app'(app'(quot(),0()),app'(s(),y)) -> 0()
    4: app'(app'(quot(),app'(s(),x)),app'(s(),y)) -> app'(s(),app'(app'(quot(),app'(app'(minus(),x),y)),app'(s(),y)))
    5: app'(app'(le(),0()),y) -> true()
    6: app'(app'(le(),app'(s(),x)),0()) -> false()
    7: app'(app'(le(),app'(s(),x)),app'(s(),y)) -> app'(app'(le(),x),y)
    8: app'(app'(app(),nil()),y) -> y
    9: app'(app'(app(),app'(app'(add(),n),x)),y) -> app'(app'(add(),n),app'(app'(app(),x),y))
    10: app'(app'(low(),n),nil()) -> nil()
    11: app'(app'(low(),n),app'(app'(add(),m),x)) -> app'(app'(app'(if_low(),app'(app'(le(),m),n)),n),app'(app'(add(),m),x))
    12: app'(app'(app'(if_low(),true()),n),app'(app'(add(),m),x)) -> app'(app'(add(),m),app'(app'(low(),n),x))
    13: app'(app'(app'(if_low(),false()),n),app'(app'(add(),m),x)) -> app'(app'(low(),n),x)
    14: app'(app'(high(),n),nil()) -> nil()
    15: app'(app'(high(),n),app'(app'(add(),m),x)) -> app'(app'(app'(if_high(),app'(app'(le(),m),n)),n),app'(app'(add(),m),x))
    16: app'(app'(app'(if_high(),true()),n),app'(app'(add(),m),x)) -> app'(app'(high(),n),x)
    17: app'(app'(app'(if_high(),false()),n),app'(app'(add(),m),x)) -> app'(app'(add(),m),app'(app'(high(),n),x))
    18: app'(quicksort(),nil()) -> nil()
    19: app'(quicksort(),app'(app'(add(),n),x)) -> app'(app'(app(),app'(quicksort(),app'(app'(low(),n),x))),app'(app'(add(),n),app'(quicksort(),app'(app'(high(),n),x))))
    20: app'(app'(map(),f),nil()) -> nil()
    21: app'(app'(map(),f),app'(app'(add(),x),xs)) -> app'(app'(add(),app'(f,x)),app'(app'(map(),f),xs))
    22: app'(app'(filter(),f),nil()) -> nil()
    23: app'(app'(filter(),f),app'(app'(add(),x),xs)) -> app'(app'(app'(app'(filter2(),app'(f,x)),f),x),xs)
    24: app'(app'(app'(app'(filter2(),true()),f),x),xs) -> app'(app'(add(),x),app'(app'(filter(),f),xs))
    25: app'(app'(app'(app'(filter2(),false()),f),x),xs) -> app'(app'(filter(),f),xs)
Number of strict rules: 25
Direct Order(PosReal,>,Poly) ... failed.
Freezing app'
1: app'❆2_minus(x,0()) -> x
2: app'❆2_minus(app'❆1_s(x),app'❆1_s(y)) -> app'❆2_minus(x,y)
3: app'❆2_quot(0(),app'❆1_s(y)) -> 0()
4: app'❆2_quot(app'❆1_s(x),app'❆1_s(y)) -> app'❆1_s(app'❆2_quot(app'❆2_minus(x,y),app'❆1_s(y)))
5: app'❆2_le(0(),y) -> true()
6: app'❆2_le(app'❆1_s(x),0()) -> false()
7: app'❆2_le(app'❆1_s(x),app'❆1_s(y)) -> app'❆2_le(x,y)
8: app'❆2_app(nil(),y) -> y
9: app'❆2_app(app'❆2_add(n,x),y) -> app'❆2_add(n,app'❆2_app(x,y))
10: app'❆2_low(n,nil()) -> nil()
11: app'❆2_low(n,app'❆2_add(m,x)) -> app'❆3_if_low(app'❆2_le(m,n),n,app'❆2_add(m,x))
12: app'❆3_if_low(true(),n,app'❆2_add(m,x)) -> app'❆2_add(m,app'❆2_low(n,x))
13: app'❆3_if_low(false(),n,app'❆2_add(m,x)) -> app'❆2_low(n,x)
14: app'❆2_high(n,nil()) -> nil()
15: app'❆2_high(n,app'❆2_add(m,x)) -> app'❆3_if_high(app'❆2_le(m,n),n,app'❆2_add(m,x))
16: app'❆3_if_high(true(),n,app'❆2_add(m,x)) -> app'❆2_high(n,x)
17: app'❆3_if_high(false(),n,app'❆2_add(m,x)) -> app'❆2_add(m,app'❆2_high(n,x))
18: app'❆1_quicksort(nil()) -> nil()
19: app'❆1_quicksort(app'❆2_add(n,x)) -> app'❆2_app(app'❆1_quicksort(app'❆2_low(n,x)),app'❆2_add(n,app'❆1_quicksort(app'❆2_high(n,x))))
20: app'❆2_map(f,nil()) -> nil()
21: app'❆2_map(f,app'❆2_add(x,xs)) -> app'❆2_add(app'(f,x),app'❆2_map(f,xs))
22: app'❆2_filter(f,nil()) -> nil()
23: app'❆2_filter(f,app'❆2_add(x,xs)) -> app'❆4_filter2(app'(f,x),f,x,xs)
24: app'❆4_filter2(true(),f,x,xs) -> app'❆2_add(x,app'❆2_filter(f,xs))
25: app'❆4_filter2(false(),f,x,xs) -> app'❆2_filter(f,xs)
26: app'(le(),_1) ->= app'❆1_le(_1)
27: app'(app'❆1_le(_1),_2) ->= app'❆2_le(_1,_2)
28: app'(quot(),_1) ->= app'❆1_quot(_1)
29: app'(app'❆1_quot(_1),_2) ->= app'❆2_quot(_1,_2)
30: app'(high(),_1) ->= app'❆1_high(_1)
31: app'(app'❆1_high(_1),_2) ->= app'❆2_high(_1,_2)
32: app'(add(),_1) ->= app'❆1_add(_1)
33: app'(app'❆1_add(_1),_2) ->= app'❆2_add(_1,_2)
34: app'(s(),_1) ->= app'❆1_s(_1)
35: app'(filter(),_1) ->= app'❆1_filter(_1)
36: app'(app'❆1_filter(_1),_2) ->= app'❆2_filter(_1,_2)
37: app'(if_low(),_1) ->= app'❆1_if_low(_1)
38: app'(app'❆1_if_low(_1),_2) ->= app'❆2_if_low(_1,_2)
39: app'(app'❆2_if_low(_1,_2),_3) ->= app'❆3_if_low(_1,_2,_3)
40: app'(map(),_1) ->= app'❆1_map(_1)
41: app'(app'❆1_map(_1),_2) ->= app'❆2_map(_1,_2)
42: app'(minus(),_1) ->= app'❆1_minus(_1)
43: app'(app'❆1_minus(_1),_2) ->= app'❆2_minus(_1,_2)
44: app'(quicksort(),_1) ->= app'❆1_quicksort(_1)
45: app'(if_high(),_1) ->= app'❆1_if_high(_1)
46: app'(app'❆1_if_high(_1),_2) ->= app'❆2_if_high(_1,_2)
47: app'(app'❆2_if_high(_1,_2),_3) ->= app'❆3_if_high(_1,_2,_3)
48: app'(filter2(),_1) ->= app'❆1_filter2(_1)
49: app'(app'❆1_filter2(_1),_2) ->= app'❆2_filter2(_1,_2)
50: app'(app'❆2_filter2(_1,_2),_3) ->= app'❆3_filter2(_1,_2,_3)
51: app'(app'❆3_filter2(_1,_2,_3),_4) ->= app'❆4_filter2(_1,_2,_3,_4)
52: app'(app(),_1) ->= app'❆1_app(_1)
53: app'(app'❆1_app(_1),_2) ->= app'❆2_app(_1,_2)
54: app'(low(),_1) ->= app'❆1_low(_1)
55: app'(app'❆1_low(_1),_2) ->= app'❆2_low(_1,_2)
Number of strict rules: 25
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app'❆2_minus(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_minus(x,y)
   #2: #app'(app'❆1_minus(_1),_2) ->? #app'❆2_minus(_1,_2)
   #3: #app'(app'❆1_quot(_1),_2) ->? #app'❆2_quot(_1,_2)
   #4: #app'(app'❆1_map(_1),_2) ->? #app'❆2_map(_1,_2)
   #5: #app'(app'❆2_if_high(_1,_2),_3) ->? #app'❆3_if_high(_1,_2,_3)
   #6: #app'(app'❆1_app(_1),_2) ->? #app'❆2_app(_1,_2)
   #7: #app'(app'❆1_low(_1),_2) ->? #app'❆2_low(_1,_2)
   #8: #app'(app'❆3_filter2(_1,_2,_3),_4) ->? #app'❆4_filter2(_1,_2,_3,_4)
   #9: #app'❆3_if_low(false(),n,app'❆2_add(m,x)) -> #app'❆2_low(n,x)
   #10: #app'❆2_app(app'❆2_add(n,x),y) -> #app'❆2_app(x,y)
   #11: #app'❆2_low(n,app'❆2_add(m,x)) -> #app'❆3_if_low(app'❆2_le(m,n),n,app'❆2_add(m,x))
   #12: #app'❆2_low(n,app'❆2_add(m,x)) -> #app'❆2_le(m,n)
   #13: #app'❆4_filter2(true(),f,x,xs) -> #app'❆2_filter(f,xs)
   #14: #app'❆2_filter(f,app'❆2_add(x,xs)) -> #app'❆4_filter2(app'(f,x),f,x,xs)
   #15: #app'❆2_filter(f,app'❆2_add(x,xs)) -> #app'(f,x)
   #16: #app'❆3_if_low(true(),n,app'❆2_add(m,x)) -> #app'❆2_low(n,x)
   #17: #app'(app'❆1_high(_1),_2) ->? #app'❆2_high(_1,_2)
   #18: #app'❆4_filter2(false(),f,x,xs) -> #app'❆2_filter(f,xs)
   #19: #app'❆2_le(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_le(x,y)
   #20: #app'(app'❆2_if_low(_1,_2),_3) ->? #app'❆3_if_low(_1,_2,_3)
   #21: #app'(quicksort(),_1) ->? #app'❆1_quicksort(_1)
   #22: #app'(app'❆1_le(_1),_2) ->? #app'❆2_le(_1,_2)
   #23: #app'❆3_if_high(false(),n,app'❆2_add(m,x)) -> #app'❆2_high(n,x)
   #24: #app'❆1_quicksort(app'❆2_add(n,x)) -> #app'❆2_app(app'❆1_quicksort(app'❆2_low(n,x)),app'❆2_add(n,app'❆1_quicksort(app'❆2_high(n,x))))
   #25: #app'❆1_quicksort(app'❆2_add(n,x)) -> #app'❆1_quicksort(app'❆2_low(n,x))
   #26: #app'❆1_quicksort(app'❆2_add(n,x)) -> #app'❆2_low(n,x)
   #27: #app'❆1_quicksort(app'❆2_add(n,x)) -> #app'❆1_quicksort(app'❆2_high(n,x))
   #28: #app'❆1_quicksort(app'❆2_add(n,x)) -> #app'❆2_high(n,x)
   #29: #app'(app'❆1_filter(_1),_2) ->? #app'❆2_filter(_1,_2)
   #30: #app'❆2_map(f,app'❆2_add(x,xs)) -> #app'(f,x)
   #31: #app'❆2_map(f,app'❆2_add(x,xs)) -> #app'❆2_map(f,xs)
   #32: #app'❆3_if_high(true(),n,app'❆2_add(m,x)) -> #app'❆2_high(n,x)
   #33: #app'❆2_high(n,app'❆2_add(m,x)) -> #app'❆3_if_high(app'❆2_le(m,n),n,app'❆2_add(m,x))
   #34: #app'❆2_high(n,app'❆2_add(m,x)) -> #app'❆2_le(m,n)
   #35: #app'❆2_quot(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_quot(app'❆2_minus(x,y),app'❆1_s(y))
   #36: #app'❆2_quot(app'❆1_s(x),app'❆1_s(y)) -> #app'❆2_minus(x,y)
Number of SCCs: 8, DPs: 21, edges: 36
	SCC { #19 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: 0
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: 0
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: 0
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: x2
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: 0
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: 0
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: 0
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #19
Number of SCCs: 7, DPs: 20, edges: 35
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: 0
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: 0
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: 0
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: x2
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: 0
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: 0
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: 0
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: 0
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 6, DPs: 19, edges: 34
	SCC { #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: 0
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: 0
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: 0
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: 0
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: x1
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: 0
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: 0
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: 0
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2) + x2
app'❆1_s(x1)	weight: (/ 1 2)
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: 0
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #10
Number of SCCs: 5, DPs: 18, edges: 33
	SCC { #35 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: 0
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: 0
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: 0
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: 0
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: 0
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: 0
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 4)
app'❆1_s(x1)	weight: (/ 1 2) + x1
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: 0
   app()	weight: 0
    Usable rules: { 1 2 }
    Removed DPs: #35
Number of SCCs: 4, DPs: 17, edges: 32
	SCC { #25 #27 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: 0
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: (/ 1 4) + x2
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 1 4)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: (/ 1 4) + x3
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: 0
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4) + x1
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: x1
   app()	weight: 0
    Usable rules: { 10..17 }
    Removed DPs: #25 #27
Number of SCCs: 3, DPs: 15, edges: 28
	SCC { #9 #11 #16 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: 0
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
#app'❆3_if_low(x1,x2,x3)	weight: x3
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: (/ 1 4) + x2
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 1 4)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: (/ 1 4) + x3
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: (/ 1 4) + x2
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4) + x1
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: x1
   app()	weight: 0
    Usable rules: { 5..7 }
    Removed DPs: #9 #11 #16
Number of SCCs: 2, DPs: 12, edges: 24
	SCC { #23 #32 #33 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: 0
app'❆4_filter2(x1,x2,x3,x4)	weight: 0
    le()	weight: 0
app'❆1_quicksort(x1)	weight: 0
app'❆1_filter2(x1)	weight: 0
     s()	weight: 0
app'❆1_map(x1)	weight: 0
#app'❆2_map(x1,x2)	weight: 0
#app'❆2_filter(x1,x2)	weight: 0
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: (/ 1 4) + x2
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1
#app'❆4_filter2(x1,x2,x3,x4)	weight: 0
app'❆2_high(x1,x2)	weight: (/ 1 4) + x2
#app'(x1,x2)	weight: 0
 false()	weight: 0
app'❆1_if_high(x1)	weight: 0
app'❆2_low(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_low(x1)	weight: 0
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: 0
#app'❆3_if_high(x1,x2,x3)	weight: x3
app'❆1_quot(x1)	weight: 0
app'❆1_add(x1)	weight: 0
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: 0
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: (/ 1 4)
  app'(x1,x2)	weight: 0
app'❆2_map(x1,x2)	weight: 0
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: 0
   nil()	weight: 0
app'❆1_low(x1)	weight: 0
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: 0
app'❆3_if_high(x1,x2,x3)	weight: (/ 1 4) + x3
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: 0
app'❆1_minus(x1)	weight: 0
app'❆2_filter2(x1,x2)	weight: 0
#app'❆2_quot(x1,x2)	weight: x1
app'❆2_if_low(x1,x2)	weight: 0
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: 0
#app'❆2_low(x1,x2)	weight: (/ 1 4)
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: 0
app'❆2_add(x1,x2)	weight: (/ 1 2) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4) + x1
app'❆1_filter(x1)	weight: 0
#app'❆1_quicksort(x1)	weight: x1
   app()	weight: 0
    Usable rules: { }
    Removed DPs: #23 #32 #33
Number of SCCs: 1, DPs: 9, edges: 20
	SCC { #4 #8 #13..15 #18 #29..31 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app'❆2_filter(x1,x2)	weight: (/ 3 8) + x1 + x2
app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 4)
    le()	weight: 0
app'❆1_quicksort(x1)	weight: (/ 1 4) + x1
app'❆1_filter2(x1)	weight: (/ 1 4) + x1
     s()	weight: 0
app'❆1_map(x1)	weight: (/ 1 4)
#app'❆2_map(x1,x2)	weight: x2
#app'❆2_filter(x1,x2)	weight: x2
 minus()	weight: 0
#app'❆2_high(x1,x2)	weight: (/ 1 8)
if_high()	weight: 0
app'❆3_if_low(x1,x2,x3)	weight: (/ 1 4) + x2 + x3
#app'❆3_if_low(x1,x2,x3)	weight: 0
app'❆2_minus(x1,x2)	weight: (/ 1 4) + x1 + x2
#app'❆4_filter2(x1,x2,x3,x4)	weight: (/ 1 8) + x4
app'❆2_high(x1,x2)	weight: (/ 1 4) + x2
#app'(x1,x2)	weight: (/ 1 4) + x2
 false()	weight: 0
app'❆1_if_high(x1)	weight: (/ 1 4) + x1
app'❆2_low(x1,x2)	weight: (/ 1 4) + x1 + x2
app'❆1_if_low(x1)	weight: (/ 1 4) + x1
#app'❆2_app(x1,x2)	weight: 0
app'❆2_app(x1,x2)	weight: (/ 1 4) + x2
#app'❆3_if_high(x1,x2,x3)	weight: 0
app'❆1_quot(x1)	weight: (/ 1 4)
app'❆1_add(x1)	weight: (/ 1 4) + x1
quicksort()	weight: 0
  true()	weight: 0
app'❆1_le(x1)	weight: (/ 1 4) + x1
filter2()	weight: 0
#app'❆2_le(x1,x2)	weight: 0
     0()	weight: 0
app'❆2_le(x1,x2)	weight: 0
  app'(x1,x2)	weight: (/ 1 8)
app'❆2_map(x1,x2)	weight: (/ 1 4) + x1
  quot()	weight: 0
  high()	weight: 0
app'❆2_if_high(x1,x2)	weight: (/ 1 4) + x1 + x2
   nil()	weight: 0
app'❆1_low(x1)	weight: (/ 1 4) + x1
#app'❆2_minus(x1,x2)	weight: 0
   map()	weight: 0
app'❆1_app(x1)	weight: (/ 1 4) + x1
app'❆3_if_high(x1,x2,x3)	weight: (/ 1 4) + x1 + x3
   low()	weight: 0
app'❆3_filter2(x1,x2,x3)	weight: (/ 1 4) + x1 + x2 + x3
app'❆1_minus(x1)	weight: (/ 1 4) + x1
app'❆2_filter2(x1,x2)	weight: (/ 1 4) + x1 + x2
#app'❆2_quot(x1,x2)	weight: x1
app'❆2_if_low(x1,x2)	weight: (/ 1 4) + x1
   add()	weight: 0
app'❆2_quot(x1,x2)	weight: (/ 1 4)
#app'❆2_low(x1,x2)	weight: (/ 1 8)
filter()	weight: 0
if_low()	weight: 0
app'❆1_high(x1)	weight: (/ 1 4) + x1
app'❆2_add(x1,x2)	weight: (/ 3 8) + x1 + x2
app'❆1_s(x1)	weight: (/ 1 4) + x1
app'❆1_filter(x1)	weight: (/ 1 4) + x1
#app'❆1_quicksort(x1)	weight: x1
   app()	weight: 0
    Usable rules: { 1..3 5..7 10..17 }
    Removed DPs: #4 #8 #13..15 #18 #29..31
Number of SCCs: 0, DPs: 0, edges: 0
