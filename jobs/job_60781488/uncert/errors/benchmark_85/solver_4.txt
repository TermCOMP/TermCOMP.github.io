Input TRS:
    1: app(app(fmap(),fnil()),x) -> nil()
    2: app(app(fmap(),app(app(fcons(),f),t)),x) -> app(app(cons(),app(f,x)),app(app(fmap(),t),x))
Number of strict rules: 2
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_fmap(fnil(),x) -> nil()
2: app❆2_fmap(app❆2_fcons(f,t),x) -> app❆2_cons(app(f,x),app❆2_fmap(t,x))
3: app(fmap(),_1) ->= app❆1_fmap(_1)
4: app(app❆1_fmap(_1),_2) ->= app❆2_fmap(_1,_2)
5: app(cons(),_1) ->= app❆1_cons(_1)
6: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
7: app(fcons(),_1) ->= app❆1_fcons(_1)
8: app(app❆1_fcons(_1),_2) ->= app❆2_fcons(_1,_2)
Number of strict rules: 2
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app❆2_fmap(app❆2_fcons(f,t),x) -> #app(f,x)
   #2: #app❆2_fmap(app❆2_fcons(f,t),x) -> #app❆2_fmap(t,x)
   #3: #app(app❆1_fmap(_1),_2) ->? #app❆2_fmap(_1,_2)
Number of SCCs: 1, DPs: 3, edges: 5
	SCC { #1..3 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
app❆2_fmap(x1,x2)	weight: 0
app❆1_fmap(x1)	weight: (/ 1 2) + x1
app❆1_fcons(x1)	weight: 0
  fmap()	weight: 0
app❆2_fcons(x1,x2)	weight: (/ 1 2) + x1 + x2
#app❆2_fmap(x1,x2)	weight: x1
   nil()	weight: 0
 #app(x1,x2)	weight: x1
  fnil()	weight: 0
  cons()	weight: 0
app❆2_cons(x1,x2)	weight: 0
app❆1_cons(x1)	weight: 0
 fcons()	weight: 0
   app(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1..3
Number of SCCs: 0, DPs: 0, edges: 0
