Input TRS:
    1: app(app(apply(),f_1),x) -> app(f_1,x)
    2: app(id(),x) -> x
    3: app(app(app(uncurry(),f_2),x),y) -> app(app(f_2,x),y)
    4: app(app(app(swap(),f_2),y),x) -> app(app(f_2,x),y)
    5: app(app(app(compose(),g_1),f_1),x) -> app(g_1,app(f_1,x))
    6: app(app(const(),x),y) -> x
    7: app(listify(),x) -> app(app(cons(),x),nil())
    8: app(app(app(app(fold(),f_3),g_2),x),nil()) -> x
    9: app(app(app(app(fold(),f_3),g_2),x),app(app(cons(),z),t)) -> app(app(f_3,app(g_2,z)),app(app(app(app(fold(),f_3),g_2),x),t))
    10: app(sum(),l) -> app(app(app(app(fold(),add()),id()),0()),l)
    11: app(app(uncurry(),app(app(fold(),cons()),id())),nil()) -> id()
    12: append() -> app(app(compose(),app(app(swap(),fold()),cons())),id())
    13: reverse() -> app(app(uncurry(),app(app(fold(),app(swap(),append())),listify())),nil())
    14: length() -> app(app(uncurry(),app(app(fold(),add()),app(cons(),1()))),0())
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing app
1: app❆2_apply(f_1,x) -> app(f_1,x)
2: app❆1_id(x) -> x
3: app(app❆2_uncurry(f_2,x),y) -> app(app(f_2,x),y)
4: app❆3_swap(f_2,y,x) -> app(app(f_2,x),y)
5: app❆3_compose(g_1,f_1,x) -> app(g_1,app(f_1,x))
6: app❆2_const(x,y) -> x
7: app❆1_listify(x) -> app❆2_cons(x,nil())
8: app❆4_fold(f_3,g_2,x,nil()) -> x
9: app❆4_fold(f_3,g_2,x,app❆2_cons(z,t)) -> app(app(f_3,app(g_2,z)),app❆4_fold(f_3,g_2,x,t))
10: app❆1_sum(l) -> app❆4_fold(add(),id(),0(),l)
11: app❆2_uncurry(app❆2_fold(cons(),id()),nil()) -> id()
12: append() -> app❆2_compose(app❆2_swap(fold(),cons()),id())
13: reverse() -> app❆2_uncurry(app❆2_fold(app❆1_swap(append()),listify()),nil())
14: length() -> app❆2_uncurry(app❆2_fold(add(),app❆1_cons(1())),0())
15: app(apply(),_1) ->= app❆1_apply(_1)
16: app(app❆1_apply(_1),_2) ->= app❆2_apply(_1,_2)
17: app(uncurry(),_1) ->= app❆1_uncurry(_1)
18: app(app❆1_uncurry(_1),_2) ->= app❆2_uncurry(_1,_2)
19: app(cons(),_1) ->= app❆1_cons(_1)
20: app(app❆1_cons(_1),_2) ->= app❆2_cons(_1,_2)
21: app(const(),_1) ->= app❆1_const(_1)
22: app(app❆1_const(_1),_2) ->= app❆2_const(_1,_2)
23: app(id(),_1) ->= app❆1_id(_1)
24: app(swap(),_1) ->= app❆1_swap(_1)
25: app(app❆1_swap(_1),_2) ->= app❆2_swap(_1,_2)
26: app(app❆2_swap(_1,_2),_3) ->= app❆3_swap(_1,_2,_3)
27: app(listify(),_1) ->= app❆1_listify(_1)
28: app(compose(),_1) ->= app❆1_compose(_1)
29: app(app❆1_compose(_1),_2) ->= app❆2_compose(_1,_2)
30: app(app❆2_compose(_1,_2),_3) ->= app❆3_compose(_1,_2,_3)
31: app(fold(),_1) ->= app❆1_fold(_1)
32: app(app❆1_fold(_1),_2) ->= app❆2_fold(_1,_2)
33: app(app❆2_fold(_1,_2),_3) ->= app❆3_fold(_1,_2,_3)
34: app(app❆3_fold(_1,_2,_3),_4) ->= app❆4_fold(_1,_2,_3,_4)
35: app(sum(),_1) ->= app❆1_sum(_1)
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Dependency Pairs:
   #1: #app(sum(),_1) ->? #app❆1_sum(_1)
   #2: #reverse() -> #app❆2_uncurry(app❆2_fold(app❆1_swap(append()),listify()),nil())
   #3: #reverse() -> #append()
   #4: #app❆4_fold(f_3,g_2,x,app❆2_cons(z,t)) -> #app(app(f_3,app(g_2,z)),app❆4_fold(f_3,g_2,x,t))
   #5: #app❆4_fold(f_3,g_2,x,app❆2_cons(z,t)) -> #app(f_3,app(g_2,z))
   #6: #app❆4_fold(f_3,g_2,x,app❆2_cons(z,t)) -> #app(g_2,z)
   #7: #app❆4_fold(f_3,g_2,x,app❆2_cons(z,t)) -> #app❆4_fold(f_3,g_2,x,t)
   #8: #app(id(),_1) ->? #app❆1_id(_1)
   #9: #length() -> #app❆2_uncurry(app❆2_fold(add(),app❆1_cons(1())),0())
   #10: #app(app❆2_compose(_1,_2),_3) ->? #app❆3_compose(_1,_2,_3)
   #11: #app❆1_sum(l) -> #app❆4_fold(add(),id(),0(),l)
   #12: #app❆3_compose(g_1,f_1,x) -> #app(g_1,app(f_1,x))
   #13: #app❆3_compose(g_1,f_1,x) -> #app(f_1,x)
   #14: #app(app❆1_const(_1),_2) ->? #app❆2_const(_1,_2)
   #15: #app(app❆3_fold(_1,_2,_3),_4) ->? #app❆4_fold(_1,_2,_3,_4)
   #16: #app(listify(),_1) ->? #app❆1_listify(_1)
   #17: #app(app❆2_swap(_1,_2),_3) ->? #app❆3_swap(_1,_2,_3)
   #18: #app(app❆1_apply(_1),_2) ->? #app❆2_apply(_1,_2)
   #19: #app(app❆2_uncurry(f_2,x),y) -> #app(app(f_2,x),y)
   #20: #app(app❆2_uncurry(f_2,x),y) -> #app(f_2,x)
   #21: #app❆2_apply(f_1,x) -> #app(f_1,x)
   #22: #app❆3_swap(f_2,y,x) -> #app(app(f_2,x),y)
   #23: #app❆3_swap(f_2,y,x) -> #app(f_2,x)
   #24: #app(app❆1_uncurry(_1),_2) ->? #app❆2_uncurry(_1,_2)
Number of SCCs: 1, DPs: 17, edges: 88
	SCC { #1 #4..7 #10..13 #15 #17..23 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
