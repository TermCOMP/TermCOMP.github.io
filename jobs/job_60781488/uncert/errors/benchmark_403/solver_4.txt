Input TRS:
    1: f(tt(),x) -> f(isList(x),Cons(tt(),x))
    2: isList(Cons(tt(),xs)) -> isList(xs)
    3: isList(nil()) -> tt()
Number of strict rules: 3
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #isList(Cons(tt(),xs)) -> #isList(xs)
   #2: #f(tt(),x) -> #f(isList(x),Cons(tt(),x))
   #3: #f(tt(),x) -> #isList(x)
Number of SCCs: 2, DPs: 2, edges: 2
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     f(x1,x2)	weight: 0
isList(x1)	weight: 0
   nil()	weight: 0
   #f(x1,x2)	weight: 0
#isList(x1)	weight: x1
    tt()	weight: 0
  Cons(x1,x2)	weight: (/ 1 2) + x2
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... Order(PosReal,>,MaxSum-Sum; NegReal,≥,Sum)... failed.
Removing edges: failed.
Finding a loop...  failed.
