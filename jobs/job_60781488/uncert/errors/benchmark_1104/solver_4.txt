Input TRS:
    1: from(X) -> cons(X,n__from(n__s(X)))
    2: head(cons(X,XS)) -> X
    3: 2nd(cons(X,XS)) -> head(activate(XS))
    4: take(0(),XS) -> nil()
    5: take(s(N),cons(X,XS)) -> cons(X,n__take(N,activate(XS)))
    6: sel(0(),cons(X,XS)) -> X
    7: sel(s(N),cons(X,XS)) -> sel(N,activate(XS))
    8: from(X) -> n__from(X)
    9: s(X) -> n__s(X)
    10: take(X1,X2) -> n__take(X1,X2)
    11: activate(n__from(X)) -> from(activate(X))
    12: activate(n__s(X)) -> s(activate(X))
    13: activate(n__take(X1,X2)) -> take(activate(X1),activate(X2))
    14: activate(X) -> X
Number of strict rules: 14
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #activate(n__take(X1,X2)) -> #take(activate(X1),activate(X2))
   #2: #activate(n__take(X1,X2)) -> #activate(X1)
   #3: #activate(n__take(X1,X2)) -> #activate(X2)
   #4: #activate(n__from(X)) -> #from(activate(X))
   #5: #activate(n__from(X)) -> #activate(X)
   #6: #activate(n__s(X)) -> #s(activate(X))
   #7: #activate(n__s(X)) -> #activate(X)
   #8: #sel(s(N),cons(X,XS)) -> #sel(N,activate(XS))
   #9: #sel(s(N),cons(X,XS)) -> #activate(XS)
   #10: #take(s(N),cons(X,XS)) -> #activate(XS)
   #11: #2nd(cons(X,XS)) -> #head(activate(XS))
   #12: #2nd(cons(X,XS)) -> #activate(XS)
Number of SCCs: 2, DPs: 7, edges: 27
	SCC { #8 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
#take(x1,x2)	weight: 0
activate(x1)	weight: (/ 1 8) + x1
  take(x1,x2)	weight: (/ 3 8)
n__from(x1)	weight: (/ 1 8) + x1
#activate(x1)	weight: 0
   2nd(x1)	weight: 0
#head(x1)	weight: 0
  n__s(x1)	weight: (/ 1 8)
     0()	weight: 0
n__take(x1,x2)	weight: (/ 1 8) + x1
 #sel(x1,x2)	weight: x1
  from(x1)	weight: 0
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
 #2nd(x1)	weight: 0
#from(x1)	weight: 0
  head(x1)	weight: 0
  cons(x1,x2)	weight: (/ 1 2)
    Usable rules: { }
    Removed DPs: #8
Number of SCCs: 1, DPs: 6, edges: 26
	SCC { #1..3 #5 #7 #10 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: x1
#take(x1,x2)	weight: (/ 1 4) + x2
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 2) + x1 + x2
n__from(x1)	weight: (/ 1 4) + x1
#activate(x1)	weight: x1
   2nd(x1)	weight: 0
#head(x1)	weight: 0
  n__s(x1)	weight: x1
     0()	weight: 0
n__take(x1,x2)	weight: (/ 1 2) + x1 + x2
 #sel(x1,x2)	weight: 0
  from(x1)	weight: (/ 1 4) + x1
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
 #2nd(x1)	weight: 0
#from(x1)	weight: 0
  head(x1)	weight: 0
  cons(x1,x2)	weight: x2
    Usable rules: { 1 4 5 8..14 }
    Removed DPs: #1..3 #5 #10
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #7 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
     s(x1)	weight: (/ 1 4) + x1
#take(x1,x2)	weight: (/ 1 4) + x2
activate(x1)	weight: x1
  take(x1,x2)	weight: (/ 1 2) + x1 + x2
n__from(x1)	weight: (/ 1 4)
#activate(x1)	weight: x1
   2nd(x1)	weight: 0
#head(x1)	weight: 0
  n__s(x1)	weight: (/ 1 4) + x1
     0()	weight: 0
n__take(x1,x2)	weight: (/ 1 2) + x1 + x2
 #sel(x1,x2)	weight: 0
  from(x1)	weight: (/ 1 4)
   sel(x1,x2)	weight: 0
   #s(x1)	weight: 0
   nil()	weight: 0
 #2nd(x1)	weight: 0
#from(x1)	weight: 0
  head(x1)	weight: 0
  cons(x1,x2)	weight: x2
    Usable rules: { }
    Removed DPs: #7
Number of SCCs: 0, DPs: 0, edges: 0
