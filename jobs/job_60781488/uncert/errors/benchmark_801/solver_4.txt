Input TRS:
    1: minus(x,0()) -> x
    2: minus(s(x),s(y)) -> minus(x,y)
    3: le(0(),y) -> true()
    4: le(s(x),0()) -> false()
    5: le(s(x),s(y)) -> le(x,y)
    6: quot(0(),s(y)) -> 0()
    7: quot(s(x),s(y)) -> s(quot(minus(s(x),s(y)),s(y)))
Number of strict rules: 7
Direct Order(PosReal,>,Poly) ... failed.
Freezing ... failed.
Dependency Pairs:
   #1: #minus(s(x),s(y)) -> #minus(x,y)
   #2: #quot(s(x),s(y)) -> #quot(minus(s(x),s(y)),s(y))
   #3: #quot(s(x),s(y)) -> #minus(s(x),s(y))
   #4: #le(s(x),s(y)) -> #le(x,y)
Number of SCCs: 3, DPs: 3, edges: 3
	SCC { #1 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: 0
 minus(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
#minus(x1,x2)	weight: x2
#quot(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #1
Number of SCCs: 2, DPs: 2, edges: 2
	SCC { #4 }
Removing DPs: Order(PosReal,>,Sum)... succeeded.
    le(x1,x2)	weight: 0
     s(x1)	weight: (/ 1 2) + x1
  #le(x1,x2)	weight: x2
 minus(x1,x2)	weight: 0
 false()	weight: 0
  true()	weight: 0
     0()	weight: 0
  quot(x1,x2)	weight: 0
#minus(x1,x2)	weight: 0
#quot(x1,x2)	weight: 0
    Usable rules: { }
    Removed DPs: #4
Number of SCCs: 1, DPs: 1, edges: 1
	SCC { #2 }
Removing DPs: Order(PosReal,>,Sum)... Order(PosReal,>,Max)... QLPOpS... Order(PosReal,>,MaxSum)... QWPOpS(PosReal,>,MaxSum)... Order(PosReal,>,Sum-Sum; PosReal,≥,Sum-Sum)... Order(PosReal,>,Sum-Sum; NegReal,≥,Sum)... succeeded.
    le(x1,x2)	weight: 0; 0
     s(x1)	weight: max{0, (/ 1 4) + x1_1}; (- (/ 1 4))
  #le(x1,x2)	weight: 0; 0
 minus(x1,x2)	weight: max{0, x2_2 + x1_1}; 0
 false()	weight: 0; 0
  true()	weight: 0; 0
     0()	weight: (/ 1 8); 0
  quot(x1,x2)	weight: 0; 0
#minus(x1,x2)	weight: 0; 0
#quot(x1,x2)	weight: max{0, (/ 1 8) + x1_1}; 0
    Usable rules: { 1 2 }
    Removed DPs: #2
Number of SCCs: 0, DPs: 0, edges: 0
