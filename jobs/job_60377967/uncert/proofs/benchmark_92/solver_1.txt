YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ouKih.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 81 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) IDP
(9) IDPNonInfProof [SOUND, 13 ms]
(10) IDP
(11) IDependencyGraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
mult(0, y) -> 0
mult(x, y) -> Cond_mult(x > 0, x, y)
Cond_mult(TRUE, x, y) -> mult(x - 1, y) + y
mult(x, y) -> Cond_mult1(0 > x, x, y)
Cond_mult1(TRUE, x, y) -> -(mult(-(x), y))
The set Q consists of the following terms:
mult(x0, x1)
Cond_mult(TRUE, x0, x1)
Cond_mult1(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
mult(0, y) -> 0
mult(x, y) -> Cond_mult(x > 0, x, y)
Cond_mult(TRUE, x, y) -> mult(x - 1, y) + y
mult(x, y) -> Cond_mult1(0 > x, x, y)
Cond_mult1(TRUE, x, y) -> -(mult(-(x), y))

The integer pair graph contains the following rules and edges:
(0): MULT(x[0], y[0]) -> COND_MULT(x[0] > 0, x[0], y[0])
(1): COND_MULT(TRUE, x[1], y[1]) -> MULT(x[1] - 1, y[1])
(2): MULT(x[2], y[2]) -> COND_MULT1(0 > x[2], x[2], y[2])
(3): COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3])

   (0) -> (1), if (x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2])
   (2) -> (3), if (0 > x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (-(x[3]) ->^* x[0] & y[3] ->^* y[0])
   (3) -> (2), if (-(x[3]) ->^* x[2] & y[3] ->^* y[2])

The set Q consists of the following terms:
mult(x0, x1)
Cond_mult(TRUE, x0, x1)
Cond_mult1(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): MULT(x[0], y[0]) -> COND_MULT(x[0] > 0, x[0], y[0])
(1): COND_MULT(TRUE, x[1], y[1]) -> MULT(x[1] - 1, y[1])
(2): MULT(x[2], y[2]) -> COND_MULT1(0 > x[2], x[2], y[2])
(3): COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3])

   (0) -> (1), if (x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2])
   (2) -> (3), if (0 > x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (-(x[3]) ->^* x[0] & y[3] ->^* y[0])
   (3) -> (2), if (-(x[3]) ->^* x[2] & y[3] ->^* y[2])

The set Q consists of the following terms:
mult(x0, x1)
Cond_mult(TRUE, x0, x1)
Cond_mult1(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@21b41bf6
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 3
Max Right Steps: 2



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair MULT(x, y) -> COND_MULT(>(x, 0), x, y) the following chains were created:
*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  MULT(x[0], y[0])_>=_NonInfC & MULT(x[0], y[0])_>=_COND_MULT(>(x[0], 0), x[0], y[0]) & (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE  ==>  MULT(x[0], y[0])_>=_NonInfC & MULT(x[0], y[0])_>=_COND_MULT(>(x[0], 0), x[0], y[0]) & (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_15] = 0 & [(-1)bni_15 + (-1)Bound*bni_15] >= 0 & [(-1)bso_16] >= 0)








For Pair COND_MULT(TRUE, x, y) -> MULT(-(x, 1), y) the following chains were created:
*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1 & >(x[0]1, 0)=TRUE & x[0]1=x[1]1 & y[0]1=y[1]1 & -(x[1]1, 1)=x[0]2 & y[1]1=y[0]2 & >(x[0]2, 0)=TRUE & x[0]2=x[1]2 & y[0]2=y[1]2  ==>  COND_MULT(TRUE, x[1]1, y[1]1)_>=_NonInfC & COND_MULT(TRUE, x[1]1, y[1]1)_>=_MULT(-(x[1]1, 1), y[1]1) & (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(-(x[0], 1), 0)=TRUE & >(-(-(x[0], 1), 1), 0)=TRUE  ==>  COND_MULT(TRUE, -(x[0], 1), y[0])_>=_NonInfC & COND_MULT(TRUE, -(x[0], 1), y[0])_>=_MULT(-(-(x[0], 1), 1), y[0]) & (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & x[0] + [-3] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[0] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & x[0] + [-3] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[0] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & x[0] + [-3] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[0] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & x[0] + [-3] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)




*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1 & >(x[0]1, 0)=TRUE & x[0]1=x[1]1 & y[0]1=y[1]1 & -(x[1]1, 1)=x[2] & y[1]1=y[2] & >(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  COND_MULT(TRUE, x[1]1, y[1]1)_>=_NonInfC & COND_MULT(TRUE, x[1]1, y[1]1)_>=_MULT(-(x[1]1, 1), y[1]1) & (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(-(x[0], 1), 0)=TRUE & >(0, -(-(x[0], 1), 1))=TRUE  ==>  COND_MULT(TRUE, -(x[0], 1), y[0])_>=_NonInfC & COND_MULT(TRUE, -(x[0], 1), y[0])_>=_MULT(-(-(x[0], 1), 1), y[0]) & (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[0] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[0] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[0] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)



We solved constraint (6) using rule (IDP_SMT_SPLIT).
*We consider the chain MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3])=x[0] & y[3]=y[0] & >(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1 & >(x[0]1, 0)=TRUE & x[0]1=x[1]1 & y[0]1=y[1]1  ==>  COND_MULT(TRUE, x[1], y[1])_>=_NonInfC & COND_MULT(TRUE, x[1], y[1])_>=_MULT(-(x[1], 1), y[1]) & (U^Increasing(MULT(-(x[1], 1), y[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(0, x[2])=TRUE & >(-(x[2]), 0)=TRUE & >(-(-(x[2]), 1), 0)=TRUE  ==>  COND_MULT(TRUE, -(x[2]), y[2])_>=_NonInfC & COND_MULT(TRUE, -(x[2]), y[2])_>=_MULT(-(-(x[2]), 1), y[2]) & (U^Increasing(MULT(-(x[1], 1), y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & [-2] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & [-2] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & [-2] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & [-2] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    ([-1] + x[2] >= 0 & [-1] + x[2] >= 0 & [-2] + x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)




*We consider the chain MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]) which results in the following constraint:

(1)    (>(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3])=x[0] & y[3]=y[0] & >(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[2]1 & y[1]=y[2]1 & >(0, x[2]1)=TRUE & x[2]1=x[3]1 & y[2]1=y[3]1  ==>  COND_MULT(TRUE, x[1], y[1])_>=_NonInfC & COND_MULT(TRUE, x[1], y[1])_>=_MULT(-(x[1], 1), y[1]) & (U^Increasing(MULT(-(x[1], 1), y[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(0, x[2])=TRUE & >(-(x[2]), 0)=TRUE & >(0, -(-(x[2]), 1))=TRUE  ==>  COND_MULT(TRUE, -(x[2]), y[2])_>=_NonInfC & COND_MULT(TRUE, -(x[2]), y[2])_>=_MULT(-(-(x[2]), 1), y[2]) & (U^Increasing(MULT(-(x[1], 1), y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]y[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1] + [-1]x[2] >= 0 & [-1] + [-1]x[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)



We solved constraint (6) using rule (IDP_SMT_SPLIT).




For Pair MULT(x, y) -> COND_MULT1(>(0, x), x, y) the following chains were created:
*We consider the chain MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]) which results in the following constraint:

(1)    (>(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  MULT(x[2], y[2])_>=_NonInfC & MULT(x[2], y[2])_>=_COND_MULT1(>(0, x[2]), x[2], y[2]) & (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(0, x[2])=TRUE  ==>  MULT(x[2], y[2])_>=_NonInfC & MULT(x[2], y[2])_>=_COND_MULT1(>(0, x[2]), x[2], y[2]) & (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[2] >= 0 & [(-1)bso_20] + [-2]x[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[2] >= 0 & [(-1)bso_20] + [-2]x[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[2] >= 0 & [(-1)bso_20] + [-2]x[2] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=) & [(-1)bni_19] = 0 & [(-1)bni_19 + (-1)Bound*bni_19] >= 0 & [(-1)bso_20] + [-2]x[2] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    ([-1] + x[2] >= 0  ==>  (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=) & [(-1)bni_19] = 0 & [(-1)bni_19 + (-1)Bound*bni_19] >= 0 & [(-1)bso_20] + [2]x[2] >= 0)








For Pair COND_MULT1(TRUE, x, y) -> MULT(-(x), y) the following chains were created:
*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[2] & y[1]=y[2] & >(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3])=x[0]1 & y[3]=y[0]1 & >(x[0]1, 0)=TRUE & x[0]1=x[1]1 & y[0]1=y[1]1  ==>  COND_MULT1(TRUE, x[3], y[3])_>=_NonInfC & COND_MULT1(TRUE, x[3], y[3])_>=_MULT(-(x[3]), y[3]) & (U^Increasing(MULT(-(x[3]), y[3])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(0, -(x[0], 1))=TRUE & >(-(-(x[0], 1)), 0)=TRUE  ==>  COND_MULT1(TRUE, -(x[0], 1), y[0])_>=_NonInfC & COND_MULT1(TRUE, -(x[0], 1), y[0])_>=_MULT(-(-(x[0], 1)), y[0]) & (U^Increasing(MULT(-(x[3]), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-3)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[0] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-3)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[0] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-3)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[0] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-1]x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-1)bni_21] = 0 & [(-3)bni_21 + (-1)Bound*bni_21] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We solved constraint (6) using rule (IDP_SMT_SPLIT).
*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[2] & y[1]=y[2] & >(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3])=x[2]1 & y[3]=y[2]1 & >(0, x[2]1)=TRUE & x[2]1=x[3]1 & y[2]1=y[3]1  ==>  COND_MULT1(TRUE, x[3], y[3])_>=_NonInfC & COND_MULT1(TRUE, x[3], y[3])_>=_MULT(-(x[3]), y[3]) & (U^Increasing(MULT(-(x[3]), y[3])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(0, -(x[0], 1))=TRUE & >(0, -(-(x[0], 1)))=TRUE  ==>  COND_MULT1(TRUE, -(x[0], 1), y[0])_>=_NonInfC & COND_MULT1(TRUE, -(x[0], 1), y[0])_>=_MULT(-(-(x[0], 1)), y[0]) & (U^Increasing(MULT(-(x[3]), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-2] + x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-3)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[0] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-2] + x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-3)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[0] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-2] + x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-3)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[0] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0 & [-1]x[0] >= 0 & [-2] + x[0] >= 0  ==>  (U^Increasing(MULT(-(x[3]), y[3])), >=) & [(-1)bni_21] = 0 & [(-3)bni_21 + (-1)Bound*bni_21] + [(2)bni_21]x[0] >= 0 & [-2 + (-1)bso_22] + [2]x[0] >= 0)



We solved constraint (6) using rule (IDP_SMT_SPLIT).
*We consider the chain MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3])=x[2]1 & y[3]=y[2]1 & >(0, x[2]1)=TRUE & x[2]1=x[3]1 & y[2]1=y[3]1 & -(x[3]1)=x[0] & y[3]1=y[0] & >(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  COND_MULT1(TRUE, x[3]1, y[3]1)_>=_NonInfC & COND_MULT1(TRUE, x[3]1, y[3]1)_>=_MULT(-(x[3]1), y[3]1) & (U^Increasing(MULT(-(x[3]1), y[3]1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(0, x[2])=TRUE & >(0, -(x[2]))=TRUE & >(-(-(x[2])), 0)=TRUE  ==>  COND_MULT1(TRUE, -(x[2]), y[2])_>=_NonInfC & COND_MULT1(TRUE, -(x[2]), y[2])_>=_MULT(-(-(x[2])), y[2]) & (U^Increasing(MULT(-(x[3]1), y[3]1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[2] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[2] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[2] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21] = 0 & [(-1)bni_21 + (-1)Bound*bni_21] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We solved constraint (6) using rule (IDP_SMT_SPLIT).
*We consider the chain MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]), MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2]), COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3]) which results in the following constraint:

(1)    (>(0, x[2])=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3])=x[2]1 & y[3]=y[2]1 & >(0, x[2]1)=TRUE & x[2]1=x[3]1 & y[2]1=y[3]1 & -(x[3]1)=x[2]2 & y[3]1=y[2]2 & >(0, x[2]2)=TRUE & x[2]2=x[3]2 & y[2]2=y[3]2  ==>  COND_MULT1(TRUE, x[3]1, y[3]1)_>=_NonInfC & COND_MULT1(TRUE, x[3]1, y[3]1)_>=_MULT(-(x[3]1), y[3]1) & (U^Increasing(MULT(-(x[3]1), y[3]1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(0, x[2])=TRUE & >(0, -(x[2]))=TRUE & >(0, -(-(x[2])))=TRUE  ==>  COND_MULT1(TRUE, -(x[2]), y[2])_>=_NonInfC & COND_MULT1(TRUE, -(x[2]), y[2])_>=_MULT(-(-(x[2])), y[2]) & (U^Increasing(MULT(-(x[3]1), y[3]1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[2] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[2] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]y[2] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1] + [-1]x[2] >= 0 & [-1] + x[2] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(MULT(-(x[3]1), y[3]1)), >=) & [(-1)bni_21] = 0 & [(-1)bni_21 + (-1)Bound*bni_21] + [(-2)bni_21]x[2] >= 0 & [(-1)bso_22] + [-2]x[2] >= 0)



We solved constraint (6) using rule (IDP_SMT_SPLIT).




To summarize, we get the following constraints P__>=_ for the following pairs.

*MULT(x, y) -> COND_MULT(>(x, 0), x, y)

*(x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_15] = 0 & [(-1)bni_15 + (-1)Bound*bni_15] >= 0 & [(-1)bso_16] >= 0)




*COND_MULT(TRUE, x, y) -> MULT(-(x, 1), y)

*(x[0] + [-1] >= 0 & x[0] + [-2] >= 0 & x[0] + [-3] >= 0  ==>  (U^Increasing(MULT(-(x[1]1, 1), y[1]1)), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)


*([-1] + x[2] >= 0 & [-1] + x[2] >= 0 & [-2] + x[2] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_17] = 0 & [(-1)bni_17 + (-1)Bound*bni_17] >= 0 & [(-1)bso_18] >= 0)




*MULT(x, y) -> COND_MULT1(>(0, x), x, y)

*([-1] + x[2] >= 0  ==>  (U^Increasing(COND_MULT1(>(0, x[2]), x[2], y[2])), >=) & [(-1)bni_19] = 0 & [(-1)bni_19 + (-1)Bound*bni_19] >= 0 & [(-1)bso_20] + [2]x[2] >= 0)




*COND_MULT1(TRUE, x, y) -> MULT(-(x), y)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = [2]
   POL(FALSE) = 0
   POL(MULT(x_1, x_2)) = [-1] + [-1]x_2
   POL(COND_MULT(x_1, x_2, x_3)) = [-1] + [-1]x_3
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_MULT1(x_1, x_2, x_3)) = [-1] + [-1]x_3 + [2]x_2
   POL(-(x_1)) = [-1]x_1


The following pairs are in P_>:


   MULT(x[2], y[2]) -> COND_MULT1(>(0, x[2]), x[2], y[2])
   COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3])


The following pairs are in P_bound:


   COND_MULT1(TRUE, x[3], y[3]) -> MULT(-(x[3]), y[3])


The following pairs are in P_>=:


   MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0])
   COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1])


There are no usable rules.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): MULT(x[0], y[0]) -> COND_MULT(x[0] > 0, x[0], y[0])
(1): COND_MULT(TRUE, x[1], y[1]) -> MULT(x[1] - 1, y[1])
(2): MULT(x[2], y[2]) -> COND_MULT1(0 > x[2], x[2], y[2])

   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0])
   (0) -> (1), if (x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2])

The set Q consists of the following terms:
mult(x0, x1)
Cond_mult(TRUE, x0, x1)
Cond_mult1(TRUE, x0, x1)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_MULT(TRUE, x[1], y[1]) -> MULT(x[1] - 1, y[1])
(0): MULT(x[0], y[0]) -> COND_MULT(x[0] > 0, x[0], y[0])

   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0])
   (0) -> (1), if (x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])

The set Q consists of the following terms:
mult(x0, x1)
Cond_mult(TRUE, x0, x1)
Cond_mult1(TRUE, x0, x1)

----------------------------------------

(9) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@591d4d86
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) the following chains were created:
*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]), MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1  ==>  COND_MULT(TRUE, x[1], y[1])_>=_NonInfC & COND_MULT(TRUE, x[1], y[1])_>=_MULT(-(x[1], 1), y[1]) & (U^Increasing(MULT(-(x[1], 1), y[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE  ==>  COND_MULT(TRUE, x[0], y[0])_>=_NonInfC & COND_MULT(TRUE, x[0], y[0])_>=_MULT(-(x[0], 1), y[0]) & (U^Increasing(MULT(-(x[1], 1), y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[0] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[0] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[0] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[0] >= 0 & [(-1)bso_12] >= 0)








For Pair MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]) the following chains were created:
*We consider the chain MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0]), COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  MULT(x[0], y[0])_>=_NonInfC & MULT(x[0], y[0])_>=_COND_MULT(>(x[0], 0), x[0], y[0]) & (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE  ==>  MULT(x[0], y[0])_>=_NonInfC & MULT(x[0], y[0])_>=_COND_MULT(>(x[0], 0), x[0], y[0]) & (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[0] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[0] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[0] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[0] >= 0 & [2 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1])

*(x[0] + [-1] >= 0  ==>  (U^Increasing(MULT(-(x[1], 1), y[1])), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[0] >= 0 & [(-1)bso_12] >= 0)




*MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0])

*(x[0] + [-1] >= 0  ==>  (U^Increasing(COND_MULT(>(x[0], 0), x[0], y[0])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[0] >= 0 & [2 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_MULT(x_1, x_2, x_3)) = [-1] + [2]x_2
   POL(MULT(x_1, x_2)) = [1] + [2]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(>(x_1, x_2)) = [2]
   POL(0) = 0


The following pairs are in P_>:


   MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0])


The following pairs are in P_bound:


   COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1])
   MULT(x[0], y[0]) -> COND_MULT(>(x[0], 0), x[0], y[0])


The following pairs are in P_>=:


   COND_MULT(TRUE, x[1], y[1]) -> MULT(-(x[1], 1), y[1])


There are no usable rules.
----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_MULT(TRUE, x[1], y[1]) -> MULT(x[1] - 1, y[1])


The set Q consists of the following terms:
mult(x0, x1)
Cond_mult(TRUE, x0, x1)
Cond_mult1(TRUE, x0, x1)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(12)
TRUE
