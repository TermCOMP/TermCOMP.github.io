YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/idlAW.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 61 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
div(x, y) -> Cond_div(0 >= y, x, y)
Cond_div(TRUE, x, y) -> 0
div(x, y) -> Cond_div1(y >= x, x, y)
Cond_div1(TRUE, x, y) -> 0
div(x, y) -> Cond_div2(x > y && y > 0, x, y)
Cond_div2(TRUE, x, y) -> div(x - y, y) + 1
The set Q consists of the following terms:
div(x0, x1)
Cond_div(TRUE, x0, x1)
Cond_div1(TRUE, x0, x1)
Cond_div2(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
div(x, y) -> Cond_div(0 >= y, x, y)
Cond_div(TRUE, x, y) -> 0
div(x, y) -> Cond_div1(y >= x, x, y)
Cond_div1(TRUE, x, y) -> 0
div(x, y) -> Cond_div2(x > y && y > 0, x, y)
Cond_div2(TRUE, x, y) -> div(x - y, y) + 1

The integer pair graph contains the following rules and edges:
(0): DIV(x[0], y[0]) -> COND_DIV(0 >= y[0], x[0], y[0])
(1): DIV(x[1], y[1]) -> COND_DIV1(y[1] >= x[1], x[1], y[1])
(2): DIV(x[2], y[2]) -> COND_DIV2(x[2] > y[2] && y[2] > 0, x[2], y[2])
(3): COND_DIV2(TRUE, x[3], y[3]) -> DIV(x[3] - y[3], y[3])

   (2) -> (3), if (x[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] - y[3] ->^* x[0] & y[3] ->^* y[0])
   (3) -> (1), if (x[3] - y[3] ->^* x[1] & y[3] ->^* y[1])
   (3) -> (2), if (x[3] - y[3] ->^* x[2] & y[3] ->^* y[2])

The set Q consists of the following terms:
div(x0, x1)
Cond_div(TRUE, x0, x1)
Cond_div1(TRUE, x0, x1)
Cond_div2(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): DIV(x[0], y[0]) -> COND_DIV(0 >= y[0], x[0], y[0])
(1): DIV(x[1], y[1]) -> COND_DIV1(y[1] >= x[1], x[1], y[1])
(2): DIV(x[2], y[2]) -> COND_DIV2(x[2] > y[2] && y[2] > 0, x[2], y[2])
(3): COND_DIV2(TRUE, x[3], y[3]) -> DIV(x[3] - y[3], y[3])

   (2) -> (3), if (x[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] - y[3] ->^* x[0] & y[3] ->^* y[0])
   (3) -> (1), if (x[3] - y[3] ->^* x[1] & y[3] ->^* y[1])
   (3) -> (2), if (x[3] - y[3] ->^* x[2] & y[3] ->^* y[2])

The set Q consists of the following terms:
div(x0, x1)
Cond_div(TRUE, x0, x1)
Cond_div1(TRUE, x0, x1)
Cond_div2(TRUE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_DIV2(TRUE, x[3], y[3]) -> DIV(x[3] - y[3], y[3])
(2): DIV(x[2], y[2]) -> COND_DIV2(x[2] > y[2] && y[2] > 0, x[2], y[2])

   (3) -> (2), if (x[3] - y[3] ->^* x[2] & y[3] ->^* y[2])
   (2) -> (3), if (x[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
div(x0, x1)
Cond_div(TRUE, x0, x1)
Cond_div1(TRUE, x0, x1)
Cond_div2(TRUE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@1ca39019
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_DIV2(TRUE, x[3], y[3]) -> DIV(-(x[3], y[3]), y[3]) the following chains were created:
*We consider the chain DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2]), COND_DIV2(TRUE, x[3], y[3]) -> DIV(-(x[3], y[3]), y[3]), DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2]) which results in the following constraint:

(1)    (&&(>(x[2], y[2]), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3], y[3])=x[2]1 & y[3]=y[2]1  ==>  COND_DIV2(TRUE, x[3], y[3])_>=_NonInfC & COND_DIV2(TRUE, x[3], y[3])_>=_DIV(-(x[3], y[3]), y[3]) & (U^Increasing(DIV(-(x[3], y[3]), y[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >(y[2], 0)=TRUE  ==>  COND_DIV2(TRUE, x[2], y[2])_>=_NonInfC & COND_DIV2(TRUE, x[2], y[2])_>=_DIV(-(x[2], y[2]), y[2]) & (U^Increasing(DIV(-(x[3], y[3]), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DIV(-(x[3], y[3]), y[3])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [(2)bni_12]x[2] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DIV(-(x[3], y[3]), y[3])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [(2)bni_12]x[2] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DIV(-(x[3], y[3]), y[3])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [(2)bni_12]x[2] >= 0 & [(-1)bso_13] >= 0)








For Pair DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2]) the following chains were created:
*We consider the chain DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2]), COND_DIV2(TRUE, x[3], y[3]) -> DIV(-(x[3], y[3]), y[3]) which results in the following constraint:

(1)    (&&(>(x[2], y[2]), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  DIV(x[2], y[2])_>=_NonInfC & DIV(x[2], y[2])_>=_COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2]) & (U^Increasing(COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >(y[2], 0)=TRUE  ==>  DIV(x[2], y[2])_>=_NonInfC & DIV(x[2], y[2])_>=_COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2]) & (U^Increasing(COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(2)bni_14]y[2] + [(2)bni_14]x[2] >= 0 & [(-1)bso_15] + [2]y[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(2)bni_14]y[2] + [(2)bni_14]x[2] >= 0 & [(-1)bso_15] + [2]y[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(2)bni_14]y[2] + [(2)bni_14]x[2] >= 0 & [(-1)bso_15] + [2]y[2] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_DIV2(TRUE, x[3], y[3]) -> DIV(-(x[3], y[3]), y[3])

*(x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DIV(-(x[3], y[3]), y[3])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [(2)bni_12]x[2] >= 0 & [(-1)bso_13] >= 0)




*DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])

*(x[2] + [-1] + [-1]y[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(2)bni_14]y[2] + [(2)bni_14]x[2] >= 0 & [(-1)bso_15] + [2]y[2] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = [1]
   POL(FALSE) = [3]
   POL(COND_DIV2(x_1, x_2, x_3)) = [2]x_2 + [-1]x_1
   POL(DIV(x_1, x_2)) = [-1] + [2]x_2 + [2]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(&&(x_1, x_2)) = [1]
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0


The following pairs are in P_>:


   DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])


The following pairs are in P_bound:


   COND_DIV2(TRUE, x[3], y[3]) -> DIV(-(x[3], y[3]), y[3])
   DIV(x[2], y[2]) -> COND_DIV2(&&(>(x[2], y[2]), >(y[2], 0)), x[2], y[2])


The following pairs are in P_>=:


   COND_DIV2(TRUE, x[3], y[3]) -> DIV(-(x[3], y[3]), y[3])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_DIV2(TRUE, x[3], y[3]) -> DIV(x[3] - y[3], y[3])


The set Q consists of the following terms:
div(x0, x1)
Cond_div(TRUE, x0, x1)
Cond_div1(TRUE, x0, x1)
Cond_div2(TRUE, x0, x1)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
