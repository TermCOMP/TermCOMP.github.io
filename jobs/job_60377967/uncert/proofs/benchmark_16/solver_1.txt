YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MoDWk.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 158 ms]
(6) AND
    (7) IDP
        (8) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (9) IDP
        (10) IDPNonInfProof [SOUND, 12 ms]
        (11) IDP
        (12) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (13) TRUE
    (14) IDP
        (15) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (16) IDP
        (17) IDPNonInfProof [SOUND, 11 ms]
        (18) IDP
        (19) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > 0, x, y)
Cond_eval(TRUE, x, y) -> eval(x - 1, y)
eval(x, y) -> Cond_eval1(y > 0 && x > 0, x, y)
Cond_eval1(TRUE, x, y) -> eval(x - 1, y)
eval(x, y) -> Cond_eval2(x > 0 && 0 >= x && y > 0, x, y)
Cond_eval2(TRUE, x, y) -> eval(x, y - 1)
eval(x, y) -> Cond_eval3(y > 0 && 0 >= x, x, y)
Cond_eval3(TRUE, x, y) -> eval(x, y - 1)
eval(x, y) -> Cond_eval4(x > 0 && 0 >= x && 0 >= y, x, y)
Cond_eval4(TRUE, x, y) -> eval(x, y)
eval(x, y) -> Cond_eval5(y > 0 && 0 >= x && 0 >= y, x, y)
Cond_eval5(TRUE, x, y) -> eval(x, y)
The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > 0, x, y)
Cond_eval(TRUE, x, y) -> eval(x - 1, y)
eval(x, y) -> Cond_eval1(y > 0 && x > 0, x, y)
Cond_eval1(TRUE, x, y) -> eval(x - 1, y)
eval(x, y) -> Cond_eval2(x > 0 && 0 >= x && y > 0, x, y)
Cond_eval2(TRUE, x, y) -> eval(x, y - 1)
eval(x, y) -> Cond_eval3(y > 0 && 0 >= x, x, y)
Cond_eval3(TRUE, x, y) -> eval(x, y - 1)
eval(x, y) -> Cond_eval4(x > 0 && 0 >= x && 0 >= y, x, y)
Cond_eval4(TRUE, x, y) -> eval(x, y)
eval(x, y) -> Cond_eval5(y > 0 && 0 >= x && 0 >= y, x, y)
Cond_eval5(TRUE, x, y) -> eval(x, y)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0, x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1] - 1, y[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] > 0 && x[2] > 0, x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3] - 1, y[3])
(4): EVAL(x[4], y[4]) -> COND_EVAL2(x[4] > 0 && 0 >= x[4] && y[4] > 0, x[4], y[4])
(5): COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5], y[5] - 1)
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], y[7] - 1)
(8): EVAL(x[8], y[8]) -> COND_EVAL4(x[8] > 0 && 0 >= x[8] && 0 >= y[8], x[8], y[8])
(9): COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9])
(10): EVAL(x[10], y[10]) -> COND_EVAL5(y[10] > 0 && 0 >= x[10] && 0 >= y[10], x[10], y[10])
(11): COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11])

   (0) -> (1), if (x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2])
   (1) -> (4), if (x[1] - 1 ->^* x[4] & y[1] ->^* y[4])
   (1) -> (6), if (x[1] - 1 ->^* x[6] & y[1] ->^* y[6])
   (1) -> (8), if (x[1] - 1 ->^* x[8] & y[1] ->^* y[8])
   (1) -> (10), if (x[1] - 1 ->^* x[10] & y[1] ->^* y[10])
   (2) -> (3), if (y[2] > 0 && x[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2])
   (3) -> (4), if (x[3] - 1 ->^* x[4] & y[3] ->^* y[4])
   (3) -> (6), if (x[3] - 1 ->^* x[6] & y[3] ->^* y[6])
   (3) -> (8), if (x[3] - 1 ->^* x[8] & y[3] ->^* y[8])
   (3) -> (10), if (x[3] - 1 ->^* x[10] & y[3] ->^* y[10])
   (4) -> (5), if (x[4] > 0 && 0 >= x[4] && y[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] - 1 ->^* y[0])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] - 1 ->^* y[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] - 1 ->^* y[4])
   (5) -> (6), if (x[5] ->^* x[6] & y[5] - 1 ->^* y[6])
   (5) -> (8), if (x[5] ->^* x[8] & y[5] - 1 ->^* y[8])
   (5) -> (10), if (x[5] ->^* x[10] & y[5] - 1 ->^* y[10])
   (6) -> (7), if (y[6] > 0 && 0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2])
   (7) -> (4), if (x[7] ->^* x[4] & y[7] - 1 ->^* y[4])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6])
   (7) -> (8), if (x[7] ->^* x[8] & y[7] - 1 ->^* y[8])
   (7) -> (10), if (x[7] ->^* x[10] & y[7] - 1 ->^* y[10])
   (8) -> (9), if (x[8] > 0 && 0 >= x[8] && 0 >= y[8]  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (9) -> (0), if (x[9] ->^* x[0] & y[9] ->^* y[0])
   (9) -> (2), if (x[9] ->^* x[2] & y[9] ->^* y[2])
   (9) -> (4), if (x[9] ->^* x[4] & y[9] ->^* y[4])
   (9) -> (6), if (x[9] ->^* x[6] & y[9] ->^* y[6])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] ->^* y[8])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] ->^* y[10])
   (10) -> (11), if (y[10] > 0 && 0 >= x[10] && 0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])
   (11) -> (4), if (x[11] ->^* x[4] & y[11] ->^* y[4])
   (11) -> (6), if (x[11] ->^* x[6] & y[11] ->^* y[6])
   (11) -> (8), if (x[11] ->^* x[8] & y[11] ->^* y[8])
   (11) -> (10), if (x[11] ->^* x[10] & y[11] ->^* y[10])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0, x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1] - 1, y[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] > 0 && x[2] > 0, x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3] - 1, y[3])
(4): EVAL(x[4], y[4]) -> COND_EVAL2(x[4] > 0 && 0 >= x[4] && y[4] > 0, x[4], y[4])
(5): COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5], y[5] - 1)
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], y[7] - 1)
(8): EVAL(x[8], y[8]) -> COND_EVAL4(x[8] > 0 && 0 >= x[8] && 0 >= y[8], x[8], y[8])
(9): COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9])
(10): EVAL(x[10], y[10]) -> COND_EVAL5(y[10] > 0 && 0 >= x[10] && 0 >= y[10], x[10], y[10])
(11): COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11])

   (0) -> (1), if (x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2])
   (1) -> (4), if (x[1] - 1 ->^* x[4] & y[1] ->^* y[4])
   (1) -> (6), if (x[1] - 1 ->^* x[6] & y[1] ->^* y[6])
   (1) -> (8), if (x[1] - 1 ->^* x[8] & y[1] ->^* y[8])
   (1) -> (10), if (x[1] - 1 ->^* x[10] & y[1] ->^* y[10])
   (2) -> (3), if (y[2] > 0 && x[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2])
   (3) -> (4), if (x[3] - 1 ->^* x[4] & y[3] ->^* y[4])
   (3) -> (6), if (x[3] - 1 ->^* x[6] & y[3] ->^* y[6])
   (3) -> (8), if (x[3] - 1 ->^* x[8] & y[3] ->^* y[8])
   (3) -> (10), if (x[3] - 1 ->^* x[10] & y[3] ->^* y[10])
   (4) -> (5), if (x[4] > 0 && 0 >= x[4] && y[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] - 1 ->^* y[0])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] - 1 ->^* y[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] - 1 ->^* y[4])
   (5) -> (6), if (x[5] ->^* x[6] & y[5] - 1 ->^* y[6])
   (5) -> (8), if (x[5] ->^* x[8] & y[5] - 1 ->^* y[8])
   (5) -> (10), if (x[5] ->^* x[10] & y[5] - 1 ->^* y[10])
   (6) -> (7), if (y[6] > 0 && 0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2])
   (7) -> (4), if (x[7] ->^* x[4] & y[7] - 1 ->^* y[4])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6])
   (7) -> (8), if (x[7] ->^* x[8] & y[7] - 1 ->^* y[8])
   (7) -> (10), if (x[7] ->^* x[10] & y[7] - 1 ->^* y[10])
   (8) -> (9), if (x[8] > 0 && 0 >= x[8] && 0 >= y[8]  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (9) -> (0), if (x[9] ->^* x[0] & y[9] ->^* y[0])
   (9) -> (2), if (x[9] ->^* x[2] & y[9] ->^* y[2])
   (9) -> (4), if (x[9] ->^* x[4] & y[9] ->^* y[4])
   (9) -> (6), if (x[9] ->^* x[6] & y[9] ->^* y[6])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] ->^* y[8])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] ->^* y[10])
   (10) -> (11), if (y[10] > 0 && 0 >= x[10] && 0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])
   (11) -> (4), if (x[11] ->^* x[4] & y[11] ->^* y[4])
   (11) -> (6), if (x[11] ->^* x[6] & y[11] ->^* y[6])
   (11) -> (8), if (x[11] ->^* x[8] & y[11] ->^* y[8])
   (11) -> (10), if (x[11] ->^* x[10] & y[11] ->^* y[10])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@165bfb69
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y) -> COND_EVAL(>(x, 0), x, y) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], 0), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], 0), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], 0), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [(-1)bso_34] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [(-1)bso_34] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [(-1)bso_34] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=) & 0 = 0 & [(-1)bni_33 + (-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [(-1)bso_34] >= 0)








For Pair COND_EVAL(TRUE, x, y) -> EVAL(-(x, 1), y) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], 0), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), y[1]) which results in the following constraint:

(1)    (>(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(-(x[1], 1), y[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1])), >=))



We simplified constraint (1) using rule (III) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0])_>=_EVAL(-(x[0], 1), y[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1])), >=) & 0 = 0 & [(-1)bni_35 + (-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [1 + (-1)bso_36] >= 0)








For Pair EVAL(x, y) -> COND_EVAL1(&&(>(y, 0), >(x, 0)), x, y) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]) which results in the following constraint:

(1)    (&&(>(y[2], 0), >(x[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(x[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])), >=) & [(-1)bni_37 + (-1)Bound*bni_37] + [bni_37]x[2] >= 0 & [(-1)bso_38] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])), >=) & [(-1)bni_37 + (-1)Bound*bni_37] + [bni_37]x[2] >= 0 & [(-1)bso_38] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])), >=) & [(-1)bni_37 + (-1)Bound*bni_37] + [bni_37]x[2] >= 0 & [(-1)bso_38] >= 0)








For Pair COND_EVAL1(TRUE, x, y) -> EVAL(-(x, 1), y) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]) which results in the following constraint:

(1)    (&&(>(y[2], 0), >(x[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(-(x[3], 1), y[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[2] >= 0 & [1 + (-1)bso_40] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[2] >= 0 & [1 + (-1)bso_40] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[2] >= 0 & [1 + (-1)bso_40] >= 0)








For Pair EVAL(x, y) -> COND_EVAL2(&&(&&(>(x, 0), >=(0, x)), >(y, 0)), x, y) the following chains were created:
*We consider the chain EVAL(x[4], y[4]) -> COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4]), COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5], -(y[5], 1)) which results in the following constraint:

(1)    (&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0))=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  EVAL(x[4], y[4])_>=_NonInfC & EVAL(x[4], y[4])_>=_COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4]) & (U^Increasing(COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], 0)=TRUE & >(x[4], 0)=TRUE & >=(0, x[4])=TRUE  ==>  EVAL(x[4], y[4])_>=_NonInfC & EVAL(x[4], y[4])_>=_COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4]) & (U^Increasing(COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] >= 0 & x[4] + [-1] >= 0 & [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])), >=) & [(-1)bni_41 + (-1)Bound*bni_41] + [bni_41]x[4] >= 0 & [-1 + (-1)bso_42] + y[4] + [2]x[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] >= 0 & x[4] + [-1] >= 0 & [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])), >=) & [(-1)bni_41 + (-1)Bound*bni_41] + [bni_41]x[4] >= 0 & [-1 + (-1)bso_42] + y[4] + [2]x[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] >= 0 & x[4] + [-1] >= 0 & [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])), >=) & [(-1)bni_41 + (-1)Bound*bni_41] + [bni_41]x[4] >= 0 & [-1 + (-1)bso_42] + y[4] + [2]x[4] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL2(TRUE, x, y) -> EVAL(x, -(y, 1)) the following chains were created:
*We consider the chain EVAL(x[4], y[4]) -> COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4]), COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5], -(y[5], 1)) which results in the following constraint:

(1)    (&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0))=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  COND_EVAL2(TRUE, x[5], y[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5])_>=_EVAL(x[5], -(y[5], 1)) & (U^Increasing(EVAL(x[5], -(y[5], 1))), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], 0)=TRUE & >(x[4], 0)=TRUE & >=(0, x[4])=TRUE  ==>  COND_EVAL2(TRUE, x[4], y[4])_>=_NonInfC & COND_EVAL2(TRUE, x[4], y[4])_>=_EVAL(x[4], -(y[4], 1)) & (U^Increasing(EVAL(x[5], -(y[5], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] >= 0 & x[4] + [-1] >= 0 & [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(x[5], -(y[5], 1))), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [(-1)bni_43]y[4] + [(-1)bni_43]x[4] >= 0 & [(-1)bso_44] + [-1]y[4] + [-2]x[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] >= 0 & x[4] + [-1] >= 0 & [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(x[5], -(y[5], 1))), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [(-1)bni_43]y[4] + [(-1)bni_43]x[4] >= 0 & [(-1)bso_44] + [-1]y[4] + [-2]x[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] >= 0 & x[4] + [-1] >= 0 & [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(x[5], -(y[5], 1))), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [(-1)bni_43]y[4] + [(-1)bni_43]x[4] >= 0 & [(-1)bso_44] + [-1]y[4] + [-2]x[4] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair EVAL(x, y) -> COND_EVAL3(&&(>(y, 0), >=(0, x)), x, y) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)) which results in the following constraint:

(1)    (&&(>(y[6], 0), >=(0, x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], 0)=TRUE & >=(0, x[6])=TRUE  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)bni_45 + (-1)Bound*bni_45] + [bni_45]x[6] >= 0 & [(-1)bso_46] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)bni_45 + (-1)Bound*bni_45] + [bni_45]x[6] >= 0 & [(-1)bso_46] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)bni_45 + (-1)Bound*bni_45] + [bni_45]x[6] >= 0 & [(-1)bso_46] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)bni_45 + (-1)Bound*bni_45] + [(-1)bni_45]x[6] >= 0 & [(-1)bso_46] >= 0)








For Pair COND_EVAL3(TRUE, x, y) -> EVAL(x, -(y, 1)) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)) which results in the following constraint:

(1)    (&&(>(y[6], 0), >=(0, x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  COND_EVAL3(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7])_>=_EVAL(x[7], -(y[7], 1)) & (U^Increasing(EVAL(x[7], -(y[7], 1))), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], 0)=TRUE & >=(0, x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6])_>=_EVAL(x[6], -(y[6], 1)) & (U^Increasing(EVAL(x[7], -(y[7], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)bni_47 + (-1)Bound*bni_47] + [bni_47]x[6] >= 0 & [(-1)bso_48] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)bni_47 + (-1)Bound*bni_47] + [bni_47]x[6] >= 0 & [(-1)bso_48] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)bni_47 + (-1)Bound*bni_47] + [bni_47]x[6] >= 0 & [(-1)bso_48] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)bni_47 + (-1)Bound*bni_47] + [(-1)bni_47]x[6] >= 0 & [(-1)bso_48] >= 0)








For Pair EVAL(x, y) -> COND_EVAL4(&&(&&(>(x, 0), >=(0, x)), >=(0, y)), x, y) the following chains were created:
*We consider the chain EVAL(x[8], y[8]) -> COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8]), COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]) which results in the following constraint:

(1)    (&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8]))=TRUE & x[8]=x[9] & y[8]=y[9]  ==>  EVAL(x[8], y[8])_>=_NonInfC & EVAL(x[8], y[8])_>=_COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8]) & (U^Increasing(COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(0, y[8])=TRUE & >(x[8], 0)=TRUE & >=(0, x[8])=TRUE  ==>  EVAL(x[8], y[8])_>=_NonInfC & EVAL(x[8], y[8])_>=_COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8]) & (U^Increasing(COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[8] >= 0 & x[8] + [-1] >= 0 & [-1]x[8] >= 0  ==>  (U^Increasing(COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] + [bni_49]x[8] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[8] >= 0 & x[8] + [-1] >= 0 & [-1]x[8] >= 0  ==>  (U^Increasing(COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] + [bni_49]x[8] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[8] >= 0 & x[8] + [-1] >= 0 & [-1]x[8] >= 0  ==>  (U^Increasing(COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] + [bni_49]x[8] >= 0 & [(-1)bso_50] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL4(TRUE, x, y) -> EVAL(x, y) the following chains were created:
*We consider the chain COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]), EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], 0), x[0], y[0]) which results in the following constraint:

(1)    (x[9]=x[0] & y[9]=y[0]  ==>  COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]), EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2]) which results in the following constraint:

(1)    (x[9]=x[2] & y[9]=y[2]  ==>  COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]), EVAL(x[4], y[4]) -> COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4]) which results in the following constraint:

(1)    (x[9]=x[4] & y[9]=y[4]  ==>  COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]), EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) which results in the following constraint:

(1)    (x[9]=x[6] & y[9]=y[6]  ==>  COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]), EVAL(x[8], y[8]) -> COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8]) which results in the following constraint:

(1)    (x[9]=x[8] & y[9]=y[8]  ==>  COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9]), EVAL(x[10], y[10]) -> COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10]) which results in the following constraint:

(1)    (x[9]=x[10] & y[9]=y[10]  ==>  COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9])_>=_EVAL(x[9], y[9]) & (U^Increasing(EVAL(x[9], y[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)








For Pair EVAL(x, y) -> COND_EVAL5(&&(&&(>(y, 0), >=(0, x)), >=(0, y)), x, y) the following chains were created:
*We consider the chain EVAL(x[10], y[10]) -> COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10]), COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]) which results in the following constraint:

(1)    (&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10]))=TRUE & x[10]=x[11] & y[10]=y[11]  ==>  EVAL(x[10], y[10])_>=_NonInfC & EVAL(x[10], y[10])_>=_COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10]) & (U^Increasing(COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(0, y[10])=TRUE & >(y[10], 0)=TRUE & >=(0, x[10])=TRUE  ==>  EVAL(x[10], y[10])_>=_NonInfC & EVAL(x[10], y[10])_>=_COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10]) & (U^Increasing(COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[10] >= 0 & y[10] + [-1] >= 0 & [-1]x[10] >= 0  ==>  (U^Increasing(COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])), >=) & [(-1)bni_53 + (-1)Bound*bni_53] + [bni_53]x[10] >= 0 & [-1 + (-1)bso_54] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[10] >= 0 & y[10] + [-1] >= 0 & [-1]x[10] >= 0  ==>  (U^Increasing(COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])), >=) & [(-1)bni_53 + (-1)Bound*bni_53] + [bni_53]x[10] >= 0 & [-1 + (-1)bso_54] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[10] >= 0 & y[10] + [-1] >= 0 & [-1]x[10] >= 0  ==>  (U^Increasing(COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])), >=) & [(-1)bni_53 + (-1)Bound*bni_53] + [bni_53]x[10] >= 0 & [-1 + (-1)bso_54] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL5(TRUE, x, y) -> EVAL(x, y) the following chains were created:
*We consider the chain COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]), EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], 0), x[0], y[0]) which results in the following constraint:

(1)    (x[11]=x[0] & y[11]=y[0]  ==>  COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]), EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2]) which results in the following constraint:

(1)    (x[11]=x[2] & y[11]=y[2]  ==>  COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]), EVAL(x[4], y[4]) -> COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4]) which results in the following constraint:

(1)    (x[11]=x[4] & y[11]=y[4]  ==>  COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]), EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) which results in the following constraint:

(1)    (x[11]=x[6] & y[11]=y[6]  ==>  COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]), EVAL(x[8], y[8]) -> COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8]) which results in the following constraint:

(1)    (x[11]=x[8] & y[11]=y[8]  ==>  COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11]), EVAL(x[10], y[10]) -> COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10]) which results in the following constraint:

(1)    (x[11]=x[10] & y[11]=y[10]  ==>  COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11])_>=_EVAL(x[11], y[11]) & (U^Increasing(EVAL(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y) -> COND_EVAL(>(x, 0), x, y)

*(x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], 0), x[0], y[0])), >=) & 0 = 0 & [(-1)bni_33 + (-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [(-1)bso_34] >= 0)




*COND_EVAL(TRUE, x, y) -> EVAL(-(x, 1), y)

*(x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1])), >=) & 0 = 0 & [(-1)bni_35 + (-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [1 + (-1)bso_36] >= 0)




*EVAL(x, y) -> COND_EVAL1(&&(>(y, 0), >(x, 0)), x, y)

*(y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])), >=) & [(-1)bni_37 + (-1)Bound*bni_37] + [bni_37]x[2] >= 0 & [(-1)bso_38] >= 0)




*COND_EVAL1(TRUE, x, y) -> EVAL(-(x, 1), y)

*(y[2] + [-1] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[2] >= 0 & [1 + (-1)bso_40] >= 0)




*EVAL(x, y) -> COND_EVAL2(&&(&&(>(x, 0), >=(0, x)), >(y, 0)), x, y)




*COND_EVAL2(TRUE, x, y) -> EVAL(x, -(y, 1))




*EVAL(x, y) -> COND_EVAL3(&&(>(y, 0), >=(0, x)), x, y)

*(y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)bni_45 + (-1)Bound*bni_45] + [(-1)bni_45]x[6] >= 0 & [(-1)bso_46] >= 0)




*COND_EVAL3(TRUE, x, y) -> EVAL(x, -(y, 1))

*(y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)bni_47 + (-1)Bound*bni_47] + [(-1)bni_47]x[6] >= 0 & [(-1)bso_48] >= 0)




*EVAL(x, y) -> COND_EVAL4(&&(&&(>(x, 0), >=(0, x)), >=(0, y)), x, y)




*COND_EVAL4(TRUE, x, y) -> EVAL(x, y)

*((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)


*((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)


*((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)


*((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)


*((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)


*((U^Increasing(EVAL(x[9], y[9])), >=) & [bni_51] = 0 & [2 + (-1)bso_52] >= 0)




*EVAL(x, y) -> COND_EVAL5(&&(&&(>(y, 0), >=(0, x)), >=(0, y)), x, y)




*COND_EVAL5(TRUE, x, y) -> EVAL(x, y)

*((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)


*((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)


*((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)


*((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)


*((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)


*((U^Increasing(EVAL(x[11], y[11])), >=) & [bni_55] = 0 & [3 + (-1)bso_56] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [2]
   POL(EVAL(x_1, x_2)) = [-1] + x_1
   POL(COND_EVAL(x_1, x_2, x_3)) = [-1] + x_2
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_EVAL1(x_1, x_2, x_3)) = [-1] + x_2
   POL(&&(x_1, x_2)) = [-1]
   POL(COND_EVAL2(x_1, x_2, x_3)) = [-1] + [-1]x_3 + [-1]x_2 + [-1]x_1
   POL(>=(x_1, x_2)) = [-1]
   POL(COND_EVAL3(x_1, x_2, x_3)) = [-1] + x_2
   POL(COND_EVAL4(x_1, x_2, x_3)) = [1] + x_2 + [2]x_1
   POL(COND_EVAL5(x_1, x_2, x_3)) = [2] + x_2 + [2]x_1


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), y[1])
   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3])
   EVAL(x[4], y[4]) -> COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])
   COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5], -(y[5], 1))
   EVAL(x[8], y[8]) -> COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])
   COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9])
   EVAL(x[10], y[10]) -> COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])
   COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11])


The following pairs are in P_bound:


   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], 0), x[0], y[0])
   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), y[1])
   EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])
   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3])
   EVAL(x[4], y[4]) -> COND_EVAL2(&&(&&(>(x[4], 0), >=(0, x[4])), >(y[4], 0)), x[4], y[4])
   COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5], -(y[5], 1))
   EVAL(x[8], y[8]) -> COND_EVAL4(&&(&&(>(x[8], 0), >=(0, x[8])), >=(0, y[8])), x[8], y[8])
   EVAL(x[10], y[10]) -> COND_EVAL5(&&(&&(>(y[10], 0), >=(0, x[10])), >=(0, y[10])), x[10], y[10])


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], 0), x[0], y[0])
   EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], 0), >(x[2], 0)), x[2], y[2])
   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])
   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0, x[0], y[0])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] > 0 && x[2] > 0, x[2], y[2])
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], y[7] - 1)

   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6])
   (6) -> (7), if (y[6] > 0 && 0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(8) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], y[7] - 1)
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])

   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6])
   (6) -> (7), if (y[6] > 0 && 0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(10) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@165bfb69
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)), EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) which results in the following constraint:

(1)    (&&(>(y[6], 0), >=(0, x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & x[7]=x[6]1 & -(y[7], 1)=y[6]1  ==>  COND_EVAL3(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7])_>=_EVAL(x[7], -(y[7], 1)) & (U^Increasing(EVAL(x[7], -(y[7], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], 0)=TRUE & >=(0, x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6])_>=_EVAL(x[6], -(y[6], 1)) & (U^Increasing(EVAL(x[7], -(y[7], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [(-1)bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [(-1)bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [(-1)bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)








For Pair EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)) which results in the following constraint:

(1)    (&&(>(y[6], 0), >=(0, x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], 0)=TRUE & >=(0, x[6])=TRUE  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [(-1)bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [(-1)bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [(-1)bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))

*(y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)




*EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])

*(y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(COND_EVAL3(x_1, x_2, x_3)) = x_3 + [-1]x_2
   POL(EVAL(x_1, x_2)) = x_2 + [-1]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = [-1]
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(>=(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))


The following pairs are in P_bound:


   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))
   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])


The following pairs are in P_>=:


   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1

----------------------------------------

(11)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(12) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(13)
TRUE

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], y[7] - 1)
(9): COND_EVAL4(TRUE, x[9], y[9]) -> EVAL(x[9], y[9])
(11): COND_EVAL5(TRUE, x[11], y[11]) -> EVAL(x[11], y[11])

   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6])
   (9) -> (6), if (x[9] ->^* x[6] & y[9] ->^* y[6])
   (11) -> (6), if (x[11] ->^* x[6] & y[11] ->^* y[6])
   (6) -> (7), if (y[6] > 0 && 0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(15) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(16)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], y[7] - 1)
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])

   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6])
   (6) -> (7), if (y[6] > 0 && 0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(17) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@165bfb69
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)), EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) which results in the following constraint:

(1)    (&&(>(y[6], 0), >=(0, x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & x[7]=x[6]1 & -(y[7], 1)=y[6]1  ==>  COND_EVAL3(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7])_>=_EVAL(x[7], -(y[7], 1)) & (U^Increasing(EVAL(x[7], -(y[7], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], 0)=TRUE & >=(0, x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6])_>=_EVAL(x[6], -(y[6], 1)) & (U^Increasing(EVAL(x[7], -(y[7], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [(-1)bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [(-1)bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [(-1)bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)








For Pair EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1)) which results in the following constraint:

(1)    (&&(>(y[6], 0), >=(0, x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], 0)=TRUE & >=(0, x[6])=TRUE  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [(-1)bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [(-1)bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] >= 0 & [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [(-1)bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))

*(y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1))), >=) & [(-1)Bound*bni_13] + [bni_13]y[6] + [bni_13]x[6] >= 0 & [1 + (-1)bso_14] >= 0)




*EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])

*(y[6] + [-1] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] + [bni_15]x[6] >= 0 & [(-1)bso_16] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL3(x_1, x_2, x_3)) = x_3 + [-1]x_2
   POL(EVAL(x_1, x_2)) = x_2 + [-1]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = [1]
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(>=(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))


The following pairs are in P_bound:


   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7], -(y[7], 1))
   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])


The following pairs are in P_>=:


   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], 0), >=(0, x[6])), x[6], y[6])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, FALSE)^1 -> FALSE^1
   &&(FALSE, TRUE)^1 -> FALSE^1
   &&(FALSE, FALSE)^1 -> FALSE^1

----------------------------------------

(18)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > 0 && 0 >= x[6], x[6], y[6])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)
Cond_eval4(TRUE, x0, x1)
Cond_eval5(TRUE, x0, x1)

----------------------------------------

(19) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(20)
TRUE
