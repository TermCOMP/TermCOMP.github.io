YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/9wRXG.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 96 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
f(x, y) -> if1(x > y, x, y)
h(x, y) -> if2(x > y, x, y)
if1(TRUE, x, y) -> h(x, y)
if1(FALSE, x, y) -> 0
if2(TRUE, x, y) -> 0
if2(FALSE, x, y) -> f(x, y)
The set Q consists of the following terms:
f(x0, x1)
h(x0, x1)
if1(TRUE, x0, x1)
if1(FALSE, x0, x1)
if2(TRUE, x0, x1)
if2(FALSE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
f(x, y) -> if1(x > y, x, y)
h(x, y) -> if2(x > y, x, y)
if1(TRUE, x, y) -> h(x, y)
if1(FALSE, x, y) -> 0
if2(TRUE, x, y) -> 0
if2(FALSE, x, y) -> f(x, y)

The integer pair graph contains the following rules and edges:
(0): F(x[0], y[0]) -> IF1(x[0] > y[0], x[0], y[0])
(1): H(x[1], y[1]) -> IF2(x[1] > y[1], x[1], y[1])
(2): IF1(TRUE, x[2], y[2]) -> H(x[2], y[2])
(3): IF2(FALSE, x[3], y[3]) -> F(x[3], y[3])

   (0) -> (2), if (x[0] > y[0]  & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (3), if (x[1] > y[1] ->^* FALSE & x[1] ->^* x[3] & y[1] ->^* y[3])
   (2) -> (1), if (x[2] ->^* x[1] & y[2] ->^* y[1])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] ->^* y[0])

The set Q consists of the following terms:
f(x0, x1)
h(x0, x1)
if1(TRUE, x0, x1)
if1(FALSE, x0, x1)
if2(TRUE, x0, x1)
if2(FALSE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): F(x[0], y[0]) -> IF1(x[0] > y[0], x[0], y[0])
(1): H(x[1], y[1]) -> IF2(x[1] > y[1], x[1], y[1])
(2): IF1(TRUE, x[2], y[2]) -> H(x[2], y[2])
(3): IF2(FALSE, x[3], y[3]) -> F(x[3], y[3])

   (0) -> (2), if (x[0] > y[0]  & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (3), if (x[1] > y[1] ->^* FALSE & x[1] ->^* x[3] & y[1] ->^* y[3])
   (2) -> (1), if (x[2] ->^* x[1] & y[2] ->^* y[1])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] ->^* y[0])

The set Q consists of the following terms:
f(x0, x1)
h(x0, x1)
if1(TRUE, x0, x1)
if1(FALSE, x0, x1)
if2(TRUE, x0, x1)
if2(FALSE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@12bb84b
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair F(x, y) -> IF1(>(x, y), x, y) the following chains were created:
*We consider the chain IF2(FALSE, x[3], y[3]) -> F(x[3], y[3]), F(x[0], y[0]) -> IF1(>(x[0], y[0]), x[0], y[0]), IF1(TRUE, x[2], y[2]) -> H(x[2], y[2]) which results in the following constraint:

(1)    (x[3]=x[0] & y[3]=y[0] & >(x[0], y[0])=TRUE & x[0]=x[2] & y[0]=y[2]  ==>  F(x[0], y[0])_>=_NonInfC & F(x[0], y[0])_>=_IF1(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  F(x[0], y[0])_>=_NonInfC & F(x[0], y[0])_>=_IF1(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(-1)bni_18]y[0] + [bni_18]x[0] >= 0 & [(-1)bso_19] + [-2]y[0] + [2]x[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(-1)bni_18]y[0] + [bni_18]x[0] >= 0 & [(-1)bso_19] + [-2]y[0] + [2]x[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(-1)bni_18]y[0] + [bni_18]x[0] >= 0 & [(-1)bso_19] + [-2]y[0] + [2]x[0] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_18] + [bni_18]x[0] >= 0 & [2 + (-1)bso_19] + [2]x[0] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_18] + [bni_18]x[0] >= 0 & [2 + (-1)bso_19] + [2]x[0] >= 0)

(8)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_18] + [bni_18]x[0] >= 0 & [2 + (-1)bso_19] + [2]x[0] >= 0)








For Pair H(x, y) -> IF2(>(x, y), x, y) the following chains were created:
*We consider the chain IF1(TRUE, x[2], y[2]) -> H(x[2], y[2]), H(x[1], y[1]) -> IF2(>(x[1], y[1]), x[1], y[1]), IF2(FALSE, x[3], y[3]) -> F(x[3], y[3]) which results in the following constraint:

(1)    (x[2]=x[1] & y[2]=y[1] & >(x[1], y[1])=FALSE & x[1]=x[3] & y[1]=y[3]  ==>  H(x[1], y[1])_>=_NonInfC & H(x[1], y[1])_>=_IF2(>(x[1], y[1]), x[1], y[1]) & (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[1], y[1])=FALSE  ==>  H(x[1], y[1])_>=_NonInfC & H(x[1], y[1])_>=_IF2(>(x[1], y[1]), x[1], y[1]) & (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[1] + [-1]x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] + [(-1)bni_20]x[1] >= 0 & [(-1)bso_21] + [2]y[1] + [-2]x[1] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[1] + [-1]x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] + [(-1)bni_20]x[1] >= 0 & [(-1)bso_21] + [2]y[1] + [-2]x[1] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[1] + [-1]x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] + [(-1)bni_20]x[1] >= 0 & [(-1)bso_21] + [2]y[1] + [-2]x[1] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [(-1)bso_21] + [2]y[1] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [(-1)bso_21] + [2]y[1] >= 0)

(8)    (y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [(-1)bso_21] + [2]y[1] >= 0)








For Pair IF1(TRUE, x, y) -> H(x, y) the following chains were created:
*We consider the chain F(x[0], y[0]) -> IF1(>(x[0], y[0]), x[0], y[0]), IF1(TRUE, x[2], y[2]) -> H(x[2], y[2]), H(x[1], y[1]) -> IF2(>(x[1], y[1]), x[1], y[1]) which results in the following constraint:

(1)    (>(x[0], y[0])=TRUE & x[0]=x[2] & y[0]=y[2] & x[2]=x[1] & y[2]=y[1]  ==>  IF1(TRUE, x[2], y[2])_>=_NonInfC & IF1(TRUE, x[2], y[2])_>=_H(x[2], y[2]) & (U^Increasing(H(x[2], y[2])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  IF1(TRUE, x[0], y[0])_>=_NonInfC & IF1(TRUE, x[0], y[0])_>=_H(x[0], y[0]) & (U^Increasing(H(x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [bni_22]y[0] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [bni_22]y[0] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [bni_22]y[0] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)

(8)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)








For Pair IF2(FALSE, x, y) -> F(x, y) the following chains were created:
*We consider the chain H(x[1], y[1]) -> IF2(>(x[1], y[1]), x[1], y[1]), IF2(FALSE, x[3], y[3]) -> F(x[3], y[3]), F(x[0], y[0]) -> IF1(>(x[0], y[0]), x[0], y[0]) which results in the following constraint:

(1)    (>(x[1], y[1])=FALSE & x[1]=x[3] & y[1]=y[3] & x[3]=x[0] & y[3]=y[0]  ==>  IF2(FALSE, x[3], y[3])_>=_NonInfC & IF2(FALSE, x[3], y[3])_>=_F(x[3], y[3]) & (U^Increasing(F(x[3], y[3])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[1], y[1])=FALSE  ==>  IF2(FALSE, x[1], y[1])_>=_NonInfC & IF2(FALSE, x[1], y[1])_>=_F(x[1], y[1]) & (U^Increasing(F(x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[1] + [-1]x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] + [bni_24]x[1] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[1] + [-1]x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] + [bni_24]x[1] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[1] + [-1]x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] + [bni_24]x[1] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] >= 0 & [(-1)bso_25] >= 0)

(8)    (y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] >= 0 & [(-1)bso_25] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*F(x, y) -> IF1(>(x, y), x, y)

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_18] + [bni_18]x[0] >= 0 & [2 + (-1)bso_19] + [2]x[0] >= 0)


*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(IF1(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_18] + [bni_18]x[0] >= 0 & [2 + (-1)bso_19] + [2]x[0] >= 0)




*H(x, y) -> IF2(>(x, y), x, y)

*(y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [(-1)bso_21] + [2]y[1] >= 0)


*(y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(IF2(>(x[1], y[1]), x[1], y[1])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [(-1)bso_21] + [2]y[1] >= 0)




*IF1(TRUE, x, y) -> H(x, y)

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)


*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(H(x[2], y[2])), >=) & [(-2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)




*IF2(FALSE, x, y) -> F(x, y)

*(y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] >= 0 & [(-1)bso_25] >= 0)


*(y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(F(x[3], y[3])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(-1)bni_24]y[1] >= 0 & [(-1)bso_25] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(F(x_1, x_2)) = [-1] + [-1]x_2 + x_1
   POL(IF1(x_1, x_2, x_3)) = [-1] + x_3 + [-1]x_2
   POL(>(x_1, x_2)) = [-1]
   POL(H(x_1, x_2)) = [-1] + x_2 + [-1]x_1
   POL(IF2(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2


The following pairs are in P_>:


   F(x[0], y[0]) -> IF1(>(x[0], y[0]), x[0], y[0])


The following pairs are in P_bound:


   F(x[0], y[0]) -> IF1(>(x[0], y[0]), x[0], y[0])
   H(x[1], y[1]) -> IF2(>(x[1], y[1]), x[1], y[1])


The following pairs are in P_>=:


   H(x[1], y[1]) -> IF2(>(x[1], y[1]), x[1], y[1])
   IF1(TRUE, x[2], y[2]) -> H(x[2], y[2])
   IF2(FALSE, x[3], y[3]) -> F(x[3], y[3])


There are no usable rules.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): H(x[1], y[1]) -> IF2(x[1] > y[1], x[1], y[1])
(2): IF1(TRUE, x[2], y[2]) -> H(x[2], y[2])
(3): IF2(FALSE, x[3], y[3]) -> F(x[3], y[3])

   (2) -> (1), if (x[2] ->^* x[1] & y[2] ->^* y[1])
   (1) -> (3), if (x[1] > y[1] ->^* FALSE & x[1] ->^* x[3] & y[1] ->^* y[3])

The set Q consists of the following terms:
f(x0, x1)
h(x0, x1)
if1(TRUE, x0, x1)
if1(FALSE, x0, x1)
if2(TRUE, x0, x1)
if2(FALSE, x0, x1)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 3 less nodes.
----------------------------------------

(8)
TRUE
