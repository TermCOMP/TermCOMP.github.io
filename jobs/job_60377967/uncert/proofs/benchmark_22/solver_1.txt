YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Dm6GV.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 8 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 196 ms]
(6) AND
    (7) IDP
        (8) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (9) AND
            (10) IDP
                (11) IDPNonInfProof [SOUND, 29 ms]
                (12) AND
                    (13) IDP
                        (14) IDependencyGraphProof [EQUIVALENT, 0 ms]
                        (15) IDP
                        (16) IDPNonInfProof [SOUND, 18 ms]
                        (17) IDP
                        (18) IDependencyGraphProof [EQUIVALENT, 0 ms]
                        (19) TRUE
                    (20) IDP
                        (21) IDependencyGraphProof [EQUIVALENT, 0 ms]
                        (22) IDP
                        (23) IDPNonInfProof [SOUND, 11 ms]
                        (24) IDP
                        (25) IDependencyGraphProof [EQUIVALENT, 0 ms]
                        (26) TRUE
            (27) IDP
                (28) IDPNonInfProof [SOUND, 12 ms]
                (29) IDP
                (30) IDependencyGraphProof [EQUIVALENT, 0 ms]
                (31) TRUE
    (32) IDP
        (33) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (34) IDP
        (35) IDPNonInfProof [SOUND, 8 ms]
        (36) IDP
        (37) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (38) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval_1(x, y) -> Cond_eval_1(x > 0 && y > 0 && x > y, x, y)
Cond_eval_1(TRUE, x, y) -> eval_2(x, y)
eval_1(x, y) -> Cond_eval_11(x > 0 && y > 0 && y >= x, x, y)
Cond_eval_11(TRUE, x, y) -> eval_3(x, y)
eval_2(x, y) -> Cond_eval_2(x > 0, x, y)
Cond_eval_2(TRUE, x, y) -> eval_2(x - 1, y)
eval_2(x, y) -> Cond_eval_21(0 >= x, x, y)
Cond_eval_21(TRUE, x, y) -> eval_1(x, y)
eval_3(x, y) -> Cond_eval_3(y > 0, x, y)
Cond_eval_3(TRUE, x, y) -> eval_3(x, y - 1)
eval_3(x, y) -> Cond_eval_31(0 >= y, x, y)
Cond_eval_31(TRUE, x, y) -> eval_1(x, y)
The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
eval_1(x, y) -> Cond_eval_1(x > 0 && y > 0 && x > y, x, y)
Cond_eval_1(TRUE, x, y) -> eval_2(x, y)
eval_1(x, y) -> Cond_eval_11(x > 0 && y > 0 && y >= x, x, y)
Cond_eval_11(TRUE, x, y) -> eval_3(x, y)
eval_2(x, y) -> Cond_eval_2(x > 0, x, y)
Cond_eval_2(TRUE, x, y) -> eval_2(x - 1, y)
eval_2(x, y) -> Cond_eval_21(0 >= x, x, y)
Cond_eval_21(TRUE, x, y) -> eval_1(x, y)
eval_3(x, y) -> Cond_eval_3(y > 0, x, y)
Cond_eval_3(TRUE, x, y) -> eval_3(x, y - 1)
eval_3(x, y) -> Cond_eval_31(0 >= y, x, y)
Cond_eval_31(TRUE, x, y) -> eval_1(x, y)

The integer pair graph contains the following rules and edges:
(0): EVAL_1(x[0], y[0]) -> COND_EVAL_1(x[0] > 0 && y[0] > 0 && x[0] > y[0], x[0], y[0])
(1): COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1])
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_2(x[4] > 0, x[4], y[4])
(5): COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(x[5] - 1, y[5])
(6): EVAL_2(x[6], y[6]) -> COND_EVAL_21(0 >= x[6], x[6], y[6])
(7): COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7])
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

   (0) -> (1), if (x[0] > 0 && y[0] > 0 && x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (4), if (x[1] ->^* x[4] & y[1] ->^* y[4])
   (1) -> (6), if (x[1] ->^* x[6] & y[1] ->^* y[6])
   (2) -> (3), if (x[2] > 0 && y[2] > 0 && y[2] >= x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (4) -> (5), if (x[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (4), if (x[5] - 1 ->^* x[4] & y[5] ->^* y[4])
   (5) -> (6), if (x[5] - 1 ->^* x[6] & y[5] ->^* y[6])
   (6) -> (7), if (0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] ->^* y[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] ->^* y[2])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] - 1 ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL_1(x[0], y[0]) -> COND_EVAL_1(x[0] > 0 && y[0] > 0 && x[0] > y[0], x[0], y[0])
(1): COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1])
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_2(x[4] > 0, x[4], y[4])
(5): COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(x[5] - 1, y[5])
(6): EVAL_2(x[6], y[6]) -> COND_EVAL_21(0 >= x[6], x[6], y[6])
(7): COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7])
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

   (0) -> (1), if (x[0] > 0 && y[0] > 0 && x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (4), if (x[1] ->^* x[4] & y[1] ->^* y[4])
   (1) -> (6), if (x[1] ->^* x[6] & y[1] ->^* y[6])
   (2) -> (3), if (x[2] > 0 && y[2] > 0 && y[2] >= x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (4) -> (5), if (x[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (4), if (x[5] - 1 ->^* x[4] & y[5] ->^* y[4])
   (5) -> (6), if (x[5] - 1 ->^* x[6] & y[5] ->^* y[6])
   (6) -> (7), if (0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] ->^* y[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] ->^* y[2])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] - 1 ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3d8b1986
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL_1(x, y) -> COND_EVAL_1(&&(&&(>(x, 0), >(y, 0)), >(x, y)), x, y) the following chains were created:
*We consider the chain EVAL_1(x[0], y[0]) -> COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0]), COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1]) which results in the following constraint:

(1)    (&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0]))=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL_1(x[0], y[0])_>=_NonInfC & EVAL_1(x[0], y[0])_>=_COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0]) & (U^Increasing(COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE & >(x[0], 0)=TRUE & >(y[0], 0)=TRUE  ==>  EVAL_1(x[0], y[0])_>=_NonInfC & EVAL_1(x[0], y[0])_>=_COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0]) & (U^Increasing(COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[0] >= 0 & [-1 + (-1)bso_40] + x[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[0] >= 0 & [-1 + (-1)bso_40] + x[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[0] >= 0 & [-1 + (-1)bso_40] + x[0] >= 0)








For Pair COND_EVAL_1(TRUE, x, y) -> EVAL_2(x, y) the following chains were created:
*We consider the chain COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1]), EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]) which results in the following constraint:

(1)    (x[1]=x[4] & y[1]=y[4]  ==>  COND_EVAL_1(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL_1(TRUE, x[1], y[1])_>=_EVAL_2(x[1], y[1]) & (U^Increasing(EVAL_2(x[1], y[1])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_1(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL_1(TRUE, x[1], y[1])_>=_EVAL_2(x[1], y[1]) & (U^Increasing(EVAL_2(x[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)




*We consider the chain COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1]), EVAL_2(x[6], y[6]) -> COND_EVAL_21(>=(0, x[6]), x[6], y[6]) which results in the following constraint:

(1)    (x[1]=x[6] & y[1]=y[6]  ==>  COND_EVAL_1(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL_1(TRUE, x[1], y[1])_>=_EVAL_2(x[1], y[1]) & (U^Increasing(EVAL_2(x[1], y[1])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_1(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL_1(TRUE, x[1], y[1])_>=_EVAL_2(x[1], y[1]) & (U^Increasing(EVAL_2(x[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)








For Pair EVAL_1(x, y) -> COND_EVAL_11(&&(&&(>(x, 0), >(y, 0)), >=(y, x)), x, y) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]), COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL_1(x[2], y[2])_>=_NonInfC & EVAL_1(x[2], y[2])_>=_COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[2], x[2])=TRUE & >(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  EVAL_1(x[2], y[2])_>=_NonInfC & EVAL_1(x[2], y[2])_>=_COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [bni_43]x[2] >= 0 & [(-1)bso_44] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [bni_43]x[2] >= 0 & [(-1)bso_44] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [bni_43]x[2] >= 0 & [(-1)bso_44] >= 0)








For Pair COND_EVAL_11(TRUE, x, y) -> EVAL_3(x, y) the following chains were created:
*We consider the chain COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]), EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) which results in the following constraint:

(1)    (x[3]=x[8] & y[3]=y[8]  ==>  COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)




*We consider the chain COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]), EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) which results in the following constraint:

(1)    (x[3]=x[10] & y[3]=y[10]  ==>  COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)








For Pair EVAL_2(x, y) -> COND_EVAL_2(>(x, 0), x, y) the following chains were created:
*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]), COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5]) which results in the following constraint:

(1)    (>(x[4], 0)=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  EVAL_2(x[4], y[4])_>=_NonInfC & EVAL_2(x[4], y[4])_>=_COND_EVAL_2(>(x[4], 0), x[4], y[4]) & (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[4], 0)=TRUE  ==>  EVAL_2(x[4], y[4])_>=_NonInfC & EVAL_2(x[4], y[4])_>=_COND_EVAL_2(>(x[4], 0), x[4], y[4]) & (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & [(-1)bni_47 + (-1)Bound*bni_47] >= 0 & [(-1)bso_48] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & [(-1)bni_47 + (-1)Bound*bni_47] >= 0 & [(-1)bso_48] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & [(-1)bni_47 + (-1)Bound*bni_47] >= 0 & [(-1)bso_48] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & 0 = 0 & [(-1)bni_47 + (-1)Bound*bni_47] >= 0 & [(-1)bso_48] >= 0)








For Pair COND_EVAL_2(TRUE, x, y) -> EVAL_2(-(x, 1), y) the following chains were created:
*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]), COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5]), EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]) which results in the following constraint:

(1)    (>(x[4], 0)=TRUE & x[4]=x[5] & y[4]=y[5] & -(x[5], 1)=x[4]1 & y[5]=y[4]1  ==>  COND_EVAL_2(TRUE, x[5], y[5])_>=_NonInfC & COND_EVAL_2(TRUE, x[5], y[5])_>=_EVAL_2(-(x[5], 1), y[5]) & (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[4], 0)=TRUE  ==>  COND_EVAL_2(TRUE, x[4], y[4])_>=_NonInfC & COND_EVAL_2(TRUE, x[4], y[4])_>=_EVAL_2(-(x[4], 1), y[4]) & (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & 0 = 0 & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)




*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]), COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5]), EVAL_2(x[6], y[6]) -> COND_EVAL_21(>=(0, x[6]), x[6], y[6]) which results in the following constraint:

(1)    (>(x[4], 0)=TRUE & x[4]=x[5] & y[4]=y[5] & -(x[5], 1)=x[6] & y[5]=y[6]  ==>  COND_EVAL_2(TRUE, x[5], y[5])_>=_NonInfC & COND_EVAL_2(TRUE, x[5], y[5])_>=_EVAL_2(-(x[5], 1), y[5]) & (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[4], 0)=TRUE  ==>  COND_EVAL_2(TRUE, x[4], y[4])_>=_NonInfC & COND_EVAL_2(TRUE, x[4], y[4])_>=_EVAL_2(-(x[4], 1), y[4]) & (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & 0 = 0 & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)








For Pair EVAL_2(x, y) -> COND_EVAL_21(>=(0, x), x, y) the following chains were created:
*We consider the chain EVAL_2(x[6], y[6]) -> COND_EVAL_21(>=(0, x[6]), x[6], y[6]), COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7]) which results in the following constraint:

(1)    (>=(0, x[6])=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  EVAL_2(x[6], y[6])_>=_NonInfC & EVAL_2(x[6], y[6])_>=_COND_EVAL_21(>=(0, x[6]), x[6], y[6]) & (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(0, x[6])=TRUE  ==>  EVAL_2(x[6], y[6])_>=_NonInfC & EVAL_2(x[6], y[6])_>=_COND_EVAL_21(>=(0, x[6]), x[6], y[6]) & (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=) & [(-1)bni_51 + (-1)Bound*bni_51] >= 0 & [(-1)bso_52] + [-1]x[6] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=) & [(-1)bni_51 + (-1)Bound*bni_51] >= 0 & [(-1)bso_52] + [-1]x[6] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=) & [(-1)bni_51 + (-1)Bound*bni_51] >= 0 & [(-1)bso_52] + [-1]x[6] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=) & 0 = 0 & [(-1)bni_51 + (-1)Bound*bni_51] >= 0 & [(-1)bso_52] + [-1]x[6] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[6] >= 0  ==>  (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=) & 0 = 0 & [(-1)bni_51 + (-1)Bound*bni_51] >= 0 & [(-1)bso_52] + x[6] >= 0)








For Pair COND_EVAL_21(TRUE, x, y) -> EVAL_1(x, y) the following chains were created:
*We consider the chain COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7]), EVAL_1(x[0], y[0]) -> COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0]) which results in the following constraint:

(1)    (x[7]=x[0] & y[7]=y[0]  ==>  COND_EVAL_21(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL_21(TRUE, x[7], y[7])_>=_EVAL_1(x[7], y[7]) & (U^Increasing(EVAL_1(x[7], y[7])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_21(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL_21(TRUE, x[7], y[7])_>=_EVAL_1(x[7], y[7]) & (U^Increasing(EVAL_1(x[7], y[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)




*We consider the chain COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7]), EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) which results in the following constraint:

(1)    (x[7]=x[2] & y[7]=y[2]  ==>  COND_EVAL_21(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL_21(TRUE, x[7], y[7])_>=_EVAL_1(x[7], y[7]) & (U^Increasing(EVAL_1(x[7], y[7])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_21(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL_21(TRUE, x[7], y[7])_>=_EVAL_1(x[7], y[7]) & (U^Increasing(EVAL_1(x[7], y[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)








For Pair EVAL_3(x, y) -> COND_EVAL_3(>(y, 0), x, y) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9]  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_55 + (-1)Bound*bni_55] + [bni_55]x[8] >= 0 & [(-1)bso_56] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_55 + (-1)Bound*bni_55] + [bni_55]x[8] >= 0 & [(-1)bso_56] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_55 + (-1)Bound*bni_55] + [bni_55]x[8] >= 0 & [(-1)bso_56] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [bni_55] = 0 & [(-1)bni_55 + (-1)Bound*bni_55] >= 0 & [(-1)bso_56] >= 0)








For Pair COND_EVAL_3(TRUE, x, y) -> EVAL_3(x, -(y, 1)) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)), EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9] & x[9]=x[8]1 & -(y[9], 1)=y[8]1  ==>  COND_EVAL_3(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL_3(TRUE, x[9], y[9])_>=_EVAL_3(x[9], -(y[9], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  COND_EVAL_3(TRUE, x[8], y[8])_>=_NonInfC & COND_EVAL_3(TRUE, x[8], y[8])_>=_EVAL_3(x[8], -(y[8], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_57 + (-1)Bound*bni_57] + [bni_57]x[8] >= 0 & [(-1)bso_58] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_57 + (-1)Bound*bni_57] + [bni_57]x[8] >= 0 & [(-1)bso_58] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_57 + (-1)Bound*bni_57] + [bni_57]x[8] >= 0 & [(-1)bso_58] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [bni_57] = 0 & [(-1)bni_57 + (-1)Bound*bni_57] >= 0 & [(-1)bso_58] >= 0)




*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)), EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9] & x[9]=x[10] & -(y[9], 1)=y[10]  ==>  COND_EVAL_3(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL_3(TRUE, x[9], y[9])_>=_EVAL_3(x[9], -(y[9], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  COND_EVAL_3(TRUE, x[8], y[8])_>=_NonInfC & COND_EVAL_3(TRUE, x[8], y[8])_>=_EVAL_3(x[8], -(y[8], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_57 + (-1)Bound*bni_57] + [bni_57]x[8] >= 0 & [(-1)bso_58] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_57 + (-1)Bound*bni_57] + [bni_57]x[8] >= 0 & [(-1)bso_58] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_57 + (-1)Bound*bni_57] + [bni_57]x[8] >= 0 & [(-1)bso_58] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [bni_57] = 0 & [(-1)bni_57 + (-1)Bound*bni_57] >= 0 & [(-1)bso_58] >= 0)








For Pair EVAL_3(x, y) -> COND_EVAL_31(>=(0, y), x, y) the following chains were created:
*We consider the chain EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]), COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]) which results in the following constraint:

(1)    (>=(0, y[10])=TRUE & x[10]=x[11] & y[10]=y[11]  ==>  EVAL_3(x[10], y[10])_>=_NonInfC & EVAL_3(x[10], y[10])_>=_COND_EVAL_31(>=(0, y[10]), x[10], y[10]) & (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(0, y[10])=TRUE  ==>  EVAL_3(x[10], y[10])_>=_NonInfC & EVAL_3(x[10], y[10])_>=_COND_EVAL_31(>=(0, y[10]), x[10], y[10]) & (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_59 + (-1)Bound*bni_59] + [bni_59]x[10] >= 0 & [(-1)bso_60] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_59 + (-1)Bound*bni_59] + [bni_59]x[10] >= 0 & [(-1)bso_60] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_59 + (-1)Bound*bni_59] + [bni_59]x[10] >= 0 & [(-1)bso_60] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [bni_59] = 0 & [(-1)bni_59 + (-1)Bound*bni_59] >= 0 & [(-1)bso_60] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [bni_59] = 0 & [(-1)bni_59 + (-1)Bound*bni_59] >= 0 & [(-1)bso_60] >= 0)








For Pair COND_EVAL_31(TRUE, x, y) -> EVAL_1(x, y) the following chains were created:
*We consider the chain COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]), EVAL_1(x[0], y[0]) -> COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0]) which results in the following constraint:

(1)    (x[11]=x[0] & y[11]=y[0]  ==>  COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)




*We consider the chain COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]), EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) which results in the following constraint:

(1)    (x[11]=x[2] & y[11]=y[2]  ==>  COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL_1(x, y) -> COND_EVAL_1(&&(&&(>(x, 0), >(y, 0)), >(x, y)), x, y)

*(x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [bni_39]x[0] >= 0 & [-1 + (-1)bso_40] + x[0] >= 0)




*COND_EVAL_1(TRUE, x, y) -> EVAL_2(x, y)

*((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)


*((U^Increasing(EVAL_2(x[1], y[1])), >=) & [bni_41] = 0 & [1 + (-1)bso_42] >= 0)




*EVAL_1(x, y) -> COND_EVAL_11(&&(&&(>(x, 0), >(y, 0)), >=(y, x)), x, y)

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_43 + (-1)Bound*bni_43] + [bni_43]x[2] >= 0 & [(-1)bso_44] >= 0)




*COND_EVAL_11(TRUE, x, y) -> EVAL_3(x, y)

*((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)


*((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_45] = 0 & [(-1)bso_46] >= 0)




*EVAL_2(x, y) -> COND_EVAL_2(>(x, 0), x, y)

*(x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & 0 = 0 & [(-1)bni_47 + (-1)Bound*bni_47] >= 0 & [(-1)bso_48] >= 0)




*COND_EVAL_2(TRUE, x, y) -> EVAL_2(-(x, 1), y)

*(x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & 0 = 0 & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)


*(x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & 0 = 0 & [(-1)bni_49 + (-1)Bound*bni_49] >= 0 & [(-1)bso_50] >= 0)




*EVAL_2(x, y) -> COND_EVAL_21(>=(0, x), x, y)

*(x[6] >= 0  ==>  (U^Increasing(COND_EVAL_21(>=(0, x[6]), x[6], y[6])), >=) & 0 = 0 & [(-1)bni_51 + (-1)Bound*bni_51] >= 0 & [(-1)bso_52] + x[6] >= 0)




*COND_EVAL_21(TRUE, x, y) -> EVAL_1(x, y)

*((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)


*((U^Increasing(EVAL_1(x[7], y[7])), >=) & [bni_53] = 0 & [(-1)bso_54] >= 0)




*EVAL_3(x, y) -> COND_EVAL_3(>(y, 0), x, y)

*(y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [bni_55] = 0 & [(-1)bni_55 + (-1)Bound*bni_55] >= 0 & [(-1)bso_56] >= 0)




*COND_EVAL_3(TRUE, x, y) -> EVAL_3(x, -(y, 1))

*(y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [bni_57] = 0 & [(-1)bni_57 + (-1)Bound*bni_57] >= 0 & [(-1)bso_58] >= 0)


*(y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [bni_57] = 0 & [(-1)bni_57 + (-1)Bound*bni_57] >= 0 & [(-1)bso_58] >= 0)




*EVAL_3(x, y) -> COND_EVAL_31(>=(0, y), x, y)

*(y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [bni_59] = 0 & [(-1)bni_59 + (-1)Bound*bni_59] >= 0 & [(-1)bso_60] >= 0)




*COND_EVAL_31(TRUE, x, y) -> EVAL_1(x, y)

*((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)


*((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_61] = 0 & [(-1)bso_62] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = [3]
   POL(FALSE) = [3]
   POL(EVAL_1(x_1, x_2)) = [-1] + x_1
   POL(COND_EVAL_1(x_1, x_2, x_3)) = 0
   POL(&&(x_1, x_2)) = [-1]
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(EVAL_2(x_1, x_2)) = [-1]
   POL(COND_EVAL_11(x_1, x_2, x_3)) = [-1] + x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(EVAL_3(x_1, x_2)) = [-1] + x_1
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_EVAL_21(x_1, x_2, x_3)) = [-1] + x_2
   POL(COND_EVAL_3(x_1, x_2, x_3)) = [-1] + x_2
   POL(COND_EVAL_31(x_1, x_2, x_3)) = [-1] + x_2


The following pairs are in P_>:


   EVAL_1(x[0], y[0]) -> COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])
   COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1])


The following pairs are in P_bound:


   EVAL_1(x[0], y[0]) -> COND_EVAL_1(&&(&&(>(x[0], 0), >(y[0], 0)), >(x[0], y[0])), x[0], y[0])
   EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])
   EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4])
   COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5])
   EVAL_2(x[6], y[6]) -> COND_EVAL_21(>=(0, x[6]), x[6], y[6])


The following pairs are in P_>=:


   EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])
   COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
   EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4])
   COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5])
   EVAL_2(x[6], y[6]) -> COND_EVAL_21(>=(0, x[6]), x[6], y[6])
   COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7])
   EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])
   COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))
   EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10])
   COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_2(x[4] > 0, x[4], y[4])
(5): COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(x[5] - 1, y[5])
(6): EVAL_2(x[6], y[6]) -> COND_EVAL_21(0 >= x[6], x[6], y[6])
(7): COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7])
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

   (7) -> (2), if (x[7] ->^* x[2] & y[7] ->^* y[2])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && y[2] > 0 && y[2] >= x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (5) -> (4), if (x[5] - 1 ->^* x[4] & y[5] ->^* y[4])
   (4) -> (5), if (x[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (6), if (x[5] - 1 ->^* x[6] & y[5] ->^* y[6])
   (6) -> (7), if (0 >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] - 1 ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(8) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(9)
Complex Obligation (AND)

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])

   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && y[2] > 0 && y[2] >= x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] - 1 ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(11) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3d8b1986
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]) the following chains were created:
*We consider the chain COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]), EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) which results in the following constraint:

(1)    (x[11]=x[2] & y[11]=y[2]  ==>  COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_24] = 0 & [(-1)bso_25] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_24] = 0 & [(-1)bso_25] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_24] = 0 & [(-1)bso_25] >= 0)








For Pair EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) the following chains were created:
*We consider the chain EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]), COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]) which results in the following constraint:

(1)    (>=(0, y[10])=TRUE & x[10]=x[11] & y[10]=y[11]  ==>  EVAL_3(x[10], y[10])_>=_NonInfC & EVAL_3(x[10], y[10])_>=_COND_EVAL_31(>=(0, y[10]), x[10], y[10]) & (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(0, y[10])=TRUE  ==>  EVAL_3(x[10], y[10])_>=_NonInfC & EVAL_3(x[10], y[10])_>=_COND_EVAL_31(>=(0, y[10]), x[10], y[10]) & (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]y[10] + [(-1)bni_26]x[10] >= 0 & [(-1)bso_27] + [-1]y[10] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]y[10] + [(-1)bni_26]x[10] >= 0 & [(-1)bso_27] + [-1]y[10] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]y[10] + [(-1)bni_26]x[10] >= 0 & [(-1)bso_27] + [-1]y[10] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_26] = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]y[10] >= 0 & [(-1)bso_27] + [-1]y[10] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_26] = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [(-1)bni_26]y[10] >= 0 & [(-1)bso_27] + y[10] >= 0)








For Pair COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)), EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9] & x[9]=x[8]1 & -(y[9], 1)=y[8]1  ==>  COND_EVAL_3(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL_3(TRUE, x[9], y[9])_>=_EVAL_3(x[9], -(y[9], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  COND_EVAL_3(TRUE, x[8], y[8])_>=_NonInfC & COND_EVAL_3(TRUE, x[8], y[8])_>=_EVAL_3(x[8], -(y[8], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] + [(-1)bni_28]x[8] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] + [(-1)bni_28]x[8] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] + [(-1)bni_28]x[8] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28] = 0 & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] >= 0 & [1 + (-1)bso_29] >= 0)




*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)), EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9] & x[9]=x[10] & -(y[9], 1)=y[10]  ==>  COND_EVAL_3(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL_3(TRUE, x[9], y[9])_>=_EVAL_3(x[9], -(y[9], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  COND_EVAL_3(TRUE, x[8], y[8])_>=_NonInfC & COND_EVAL_3(TRUE, x[8], y[8])_>=_EVAL_3(x[8], -(y[8], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] + [(-1)bni_28]x[8] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] + [(-1)bni_28]x[8] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] + [(-1)bni_28]x[8] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28] = 0 & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] >= 0 & [1 + (-1)bso_29] >= 0)








For Pair EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9]  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]y[8] + [(-1)bni_30]x[8] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]y[8] + [(-1)bni_30]x[8] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]y[8] + [(-1)bni_30]x[8] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_30] = 0 & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]y[8] >= 0 & [(-1)bso_31] >= 0)








For Pair COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]) the following chains were created:
*We consider the chain COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]), EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) which results in the following constraint:

(1)    (x[3]=x[8] & y[3]=y[8]  ==>  COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)




*We consider the chain COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]), EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) which results in the following constraint:

(1)    (x[3]=x[10] & y[3]=y[10]  ==>  COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)








For Pair EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]), COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL_1(x[2], y[2])_>=_NonInfC & EVAL_1(x[2], y[2])_>=_COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[2], x[2])=TRUE & >(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  EVAL_1(x[2], y[2])_>=_NonInfC & EVAL_1(x[2], y[2])_>=_COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [(2)bni_34]y[2] + [(-1)bni_34]x[2] >= 0 & [-1 + (-1)bso_35] + y[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [(2)bni_34]y[2] + [(-1)bni_34]x[2] >= 0 & [-1 + (-1)bso_35] + y[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [(2)bni_34]y[2] + [(-1)bni_34]x[2] >= 0 & [-1 + (-1)bso_35] + y[2] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

*((U^Increasing(EVAL_1(x[11], y[11])), >=) & [bni_24] = 0 & [(-1)bso_25] >= 0)




*EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10])

*(y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)bni_26] = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [(-1)bni_26]y[10] >= 0 & [(-1)bso_27] + y[10] >= 0)




*COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))

*(y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28] = 0 & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] >= 0 & [1 + (-1)bso_29] >= 0)


*(y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_28] = 0 & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]y[8] >= 0 & [1 + (-1)bso_29] >= 0)




*EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])

*(y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_30] = 0 & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]y[8] >= 0 & [(-1)bso_31] >= 0)




*COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])

*((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)


*((U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)




*EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [(2)bni_34]y[2] + [(-1)bni_34]x[2] >= 0 & [-1 + (-1)bso_35] + y[2] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL_31(x_1, x_2, x_3)) = [-1] + [2]x_3 + [-1]x_2
   POL(EVAL_1(x_1, x_2)) = [-1] + [2]x_2 + [-1]x_1
   POL(EVAL_3(x_1, x_2)) = [-1] + x_2 + [-1]x_1
   POL(>=(x_1, x_2)) = [2]
   POL(0) = 0
   POL(COND_EVAL_3(x_1, x_2, x_3)) = [-1] + x_3 + [-1]x_2
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(>(x_1, x_2)) = [-1]
   POL(COND_EVAL_11(x_1, x_2, x_3)) = [-1] + x_3 + [-1]x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))


The following pairs are in P_bound:


   EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])


The following pairs are in P_>=:


   COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])
   EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10])
   EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])
   COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
   EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])

   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && y[2] > 0 && y[2] >= x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(14) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(15)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && y[2] > 0 && y[2] >= x[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(16) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3d8b1986
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) the following chains were created:
*We consider the chain COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]), EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]), COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]) which results in the following constraint:

(1)    (x[3]=x[10] & y[3]=y[10] & >=(0, y[10])=TRUE & x[10]=x[11] & y[10]=y[11]  ==>  EVAL_3(x[10], y[10])_>=_NonInfC & EVAL_3(x[10], y[10])_>=_COND_EVAL_31(>=(0, y[10]), x[10], y[10]) & (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(0, y[10])=TRUE  ==>  EVAL_3(x[3], y[10])_>=_NonInfC & EVAL_3(x[3], y[10])_>=_COND_EVAL_31(>=(0, y[10]), x[3], y[10]) & (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)Bound*bni_20] + [(-1)bni_20]y[10] >= 0 & [1 + (-1)bso_21] + [-3]y[10] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)Bound*bni_20] + [(-1)bni_20]y[10] >= 0 & [1 + (-1)bso_21] + [-3]y[10] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & [(-1)Bound*bni_20] + [(-1)bni_20]y[10] >= 0 & [1 + (-1)bso_21] + [-3]y[10] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1]y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & 0 = 0 & [(-1)Bound*bni_20] + [(-1)bni_20]y[10] >= 0 & [1 + (-1)bso_21] + [-3]y[10] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & 0 = 0 & [(-1)Bound*bni_20] + [bni_20]y[10] >= 0 & [1 + (-1)bso_21] + [3]y[10] >= 0)








For Pair COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]), COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]), EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[10] & y[3]=y[10]  ==>  COND_EVAL_11(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_11(TRUE, x[3], y[3])_>=_EVAL_3(x[3], y[3]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[2], x[2])=TRUE & >(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  COND_EVAL_11(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL_11(TRUE, x[2], y[2])_>=_EVAL_3(x[2], y[2]) & (U^Increasing(EVAL_3(x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_22 + (-1)Bound*bni_22] + [bni_22]y[2] + [(-1)bni_22]x[2] >= 0 & [1 + (-1)bso_23] + [2]y[2] + [-1]x[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_22 + (-1)Bound*bni_22] + [bni_22]y[2] + [(-1)bni_22]x[2] >= 0 & [1 + (-1)bso_23] + [2]y[2] + [-1]x[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_22 + (-1)Bound*bni_22] + [bni_22]y[2] + [(-1)bni_22]x[2] >= 0 & [1 + (-1)bso_23] + [2]y[2] + [-1]x[2] >= 0)








For Pair EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) the following chains were created:
*We consider the chain COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]), EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]), COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3]) which results in the following constraint:

(1)    (x[11]=x[2] & y[11]=y[2] & &&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL_1(x[2], y[2])_>=_NonInfC & EVAL_1(x[2], y[2])_>=_COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[2], x[2])=TRUE & >(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  EVAL_1(x[2], y[2])_>=_NonInfC & EVAL_1(x[2], y[2])_>=_COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(2)bni_24]y[2] >= 0 & [-2 + (-1)bso_25] + y[2] + x[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(2)bni_24]y[2] >= 0 & [-2 + (-1)bso_25] + y[2] + x[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(2)bni_24]y[2] >= 0 & [-2 + (-1)bso_25] + y[2] + x[2] >= 0)








For Pair COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]) the following chains were created:
*We consider the chain EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10]), COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11]), EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2]) which results in the following constraint:

(1)    (>=(0, y[10])=TRUE & x[10]=x[11] & y[10]=y[11] & x[11]=x[2] & y[11]=y[2]  ==>  COND_EVAL_31(TRUE, x[11], y[11])_>=_NonInfC & COND_EVAL_31(TRUE, x[11], y[11])_>=_EVAL_1(x[11], y[11]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(0, y[10])=TRUE  ==>  COND_EVAL_31(TRUE, x[10], y[10])_>=_NonInfC & COND_EVAL_31(TRUE, x[10], y[10])_>=_EVAL_1(x[10], y[10]) & (U^Increasing(EVAL_1(x[11], y[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[10] >= 0  ==>  (U^Increasing(EVAL_1(x[11], y[11])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [(2)bni_26]y[10] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[10] >= 0  ==>  (U^Increasing(EVAL_1(x[11], y[11])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [(2)bni_26]y[10] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[10] >= 0  ==>  (U^Increasing(EVAL_1(x[11], y[11])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [(2)bni_26]y[10] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ([-1]y[10] >= 0  ==>  (U^Increasing(EVAL_1(x[11], y[11])), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [(2)bni_26]y[10] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[10] >= 0  ==>  (U^Increasing(EVAL_1(x[11], y[11])), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [(-2)bni_26]y[10] >= 0 & [(-1)bso_27] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10])

*(y[10] >= 0  ==>  (U^Increasing(COND_EVAL_31(>=(0, y[10]), x[10], y[10])), >=) & 0 = 0 & [(-1)Bound*bni_20] + [bni_20]y[10] >= 0 & [1 + (-1)bso_21] + [3]y[10] >= 0)




*COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[3], y[3])), >=) & [bni_22 + (-1)Bound*bni_22] + [bni_22]y[2] + [(-1)bni_22]x[2] >= 0 & [1 + (-1)bso_23] + [2]y[2] + [-1]x[2] >= 0)




*EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [(2)bni_24]y[2] >= 0 & [-2 + (-1)bso_25] + y[2] + x[2] >= 0)




*COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

*(y[10] >= 0  ==>  (U^Increasing(EVAL_1(x[11], y[11])), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [(-2)bni_26]y[10] >= 0 & [(-1)bso_27] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(EVAL_3(x_1, x_2)) = [-1]x_2
   POL(COND_EVAL_31(x_1, x_2, x_3)) = [-1] + [2]x_3
   POL(>=(x_1, x_2)) = 0
   POL(0) = 0
   POL(COND_EVAL_11(x_1, x_2, x_3)) = [1] + x_3 + [-1]x_2 + [-1]x_1
   POL(EVAL_1(x_1, x_2)) = [-1] + [2]x_2
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]


The following pairs are in P_>:


   EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10])
   COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])


The following pairs are in P_bound:


   EVAL_3(x[10], y[10]) -> COND_EVAL_31(>=(0, y[10]), x[10], y[10])
   COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
   EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])


The following pairs are in P_>=:


   EVAL_1(x[2], y[2]) -> COND_EVAL_11(&&(&&(>(x[2], 0), >(y[2], 0)), >=(y[2], x[2])), x[2], y[2])
   COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(17)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL_1(x[2], y[2]) -> COND_EVAL_11(x[2] > 0 && y[2] > 0 && y[2] >= x[2], x[2], y[2])
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(18) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(19)
TRUE

----------------------------------------

(20)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])

   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] - 1 ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(21) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(22)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)

   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(23) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3d8b1986
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9]  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)








For Pair COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)), EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9] & x[9]=x[8]1 & -(y[9], 1)=y[8]1  ==>  COND_EVAL_3(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL_3(TRUE, x[9], y[9])_>=_EVAL_3(x[9], -(y[9], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  COND_EVAL_3(TRUE, x[8], y[8])_>=_NonInfC & COND_EVAL_3(TRUE, x[8], y[8])_>=_EVAL_3(x[8], -(y[8], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]y[8] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]y[8] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]y[8] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & 0 = 0 & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]y[8] >= 0 & [1 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])

*(y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)




*COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))

*(y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & 0 = 0 & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]y[8] >= 0 & [1 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(EVAL_3(x_1, x_2)) = [-1] + x_2
   POL(COND_EVAL_3(x_1, x_2, x_3)) = [-1] + x_3
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]


The following pairs are in P_>:


   COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))


The following pairs are in P_bound:


   EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])
   COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))


The following pairs are in P_>=:


   EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])


There are no usable rules.
----------------------------------------

(24)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])


The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(25) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(26)
TRUE

----------------------------------------

(27)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(5): COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(x[5] - 1, y[5])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_2(x[4] > 0, x[4], y[4])

   (5) -> (4), if (x[5] - 1 ->^* x[4] & y[5] ->^* y[4])
   (4) -> (5), if (x[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(28) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3d8b1986
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5]) the following chains were created:
*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]), COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5]), EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]) which results in the following constraint:

(1)    (>(x[4], 0)=TRUE & x[4]=x[5] & y[4]=y[5] & -(x[5], 1)=x[4]1 & y[5]=y[4]1  ==>  COND_EVAL_2(TRUE, x[5], y[5])_>=_NonInfC & COND_EVAL_2(TRUE, x[5], y[5])_>=_EVAL_2(-(x[5], 1), y[5]) & (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[4], 0)=TRUE  ==>  COND_EVAL_2(TRUE, x[4], y[4])_>=_NonInfC & COND_EVAL_2(TRUE, x[4], y[4])_>=_EVAL_2(-(x[4], 1), y[4]) & (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[4] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[4] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[4] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[4] >= 0 & [(-1)bso_12] >= 0)








For Pair EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]) the following chains were created:
*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4]), COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5]) which results in the following constraint:

(1)    (>(x[4], 0)=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  EVAL_2(x[4], y[4])_>=_NonInfC & EVAL_2(x[4], y[4])_>=_COND_EVAL_2(>(x[4], 0), x[4], y[4]) & (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[4], 0)=TRUE  ==>  EVAL_2(x[4], y[4])_>=_NonInfC & EVAL_2(x[4], y[4])_>=_COND_EVAL_2(>(x[4], 0), x[4], y[4]) & (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[4] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[4] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[4] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[4] >= 0 & [2 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5])

*(x[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(-(x[5], 1), y[5])), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]x[4] >= 0 & [(-1)bso_12] >= 0)




*EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4])

*(x[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(>(x[4], 0), x[4], y[4])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]x[4] >= 0 & [2 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1] + [2]x_2
   POL(EVAL_2(x_1, x_2)) = [1] + [2]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(>(x_1, x_2)) = [2]
   POL(0) = 0


The following pairs are in P_>:


   EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4])


The following pairs are in P_bound:


   COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5])
   EVAL_2(x[4], y[4]) -> COND_EVAL_2(>(x[4], 0), x[4], y[4])


The following pairs are in P_>=:


   COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(-(x[5], 1), y[5])


There are no usable rules.
----------------------------------------

(29)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(5): COND_EVAL_2(TRUE, x[5], y[5]) -> EVAL_2(x[5] - 1, y[5])


The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(30) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(31)
TRUE

----------------------------------------

(32)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], y[1])
(3): COND_EVAL_11(TRUE, x[3], y[3]) -> EVAL_3(x[3], y[3])
(7): COND_EVAL_21(TRUE, x[7], y[7]) -> EVAL_1(x[7], y[7])
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(10): EVAL_3(x[10], y[10]) -> COND_EVAL_31(0 >= y[10], x[10], y[10])
(11): COND_EVAL_31(TRUE, x[11], y[11]) -> EVAL_1(x[11], y[11])

   (3) -> (8), if (x[3] ->^* x[8] & y[3] ->^* y[8])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])
   (3) -> (10), if (x[3] ->^* x[10] & y[3] ->^* y[10])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] - 1 ->^* y[10])
   (10) -> (11), if (0 >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(33) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(34)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)
(8): EVAL_3(x[8], y[8]) -> COND_EVAL_3(y[8] > 0, x[8], y[8])

   (9) -> (8), if (x[9] ->^* x[8] & y[9] - 1 ->^* y[8])
   (8) -> (9), if (y[8] > 0  & x[8] ->^* x[9] & y[8] ->^* y[9])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(35) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3d8b1986
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)), EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9] & x[9]=x[8]1 & -(y[9], 1)=y[8]1  ==>  COND_EVAL_3(TRUE, x[9], y[9])_>=_NonInfC & COND_EVAL_3(TRUE, x[9], y[9])_>=_EVAL_3(x[9], -(y[9], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  COND_EVAL_3(TRUE, x[8], y[8])_>=_NonInfC & COND_EVAL_3(TRUE, x[8], y[8])_>=_EVAL_3(x[8], -(y[8], 1)) & (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)








For Pair EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]) the following chains were created:
*We consider the chain EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8]), COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1)) which results in the following constraint:

(1)    (>(y[8], 0)=TRUE & x[8]=x[9] & y[8]=y[9]  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(y[8], 0)=TRUE  ==>  EVAL_3(x[8], y[8])_>=_NonInfC & EVAL_3(x[8], y[8])_>=_COND_EVAL_3(>(y[8], 0), x[8], y[8]) & (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[8] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[8] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[8] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[8] >= 0 & [2 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))

*(y[8] + [-1] >= 0  ==>  (U^Increasing(EVAL_3(x[9], -(y[9], 1))), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[8] >= 0 & [(-1)bso_12] >= 0)




*EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])

*(y[8] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_3(>(y[8], 0), x[8], y[8])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[8] >= 0 & [2 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL_3(x_1, x_2, x_3)) = [-1] + [2]x_3
   POL(EVAL_3(x_1, x_2)) = [1] + [2]x_2
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(>(x_1, x_2)) = [2]
   POL(0) = 0


The following pairs are in P_>:


   EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])


The following pairs are in P_bound:


   COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))
   EVAL_3(x[8], y[8]) -> COND_EVAL_3(>(y[8], 0), x[8], y[8])


The following pairs are in P_>=:


   COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], -(y[9], 1))


There are no usable rules.
----------------------------------------

(36)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(9): COND_EVAL_3(TRUE, x[9], y[9]) -> EVAL_3(x[9], y[9] - 1)


The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
Cond_eval_11(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)
eval_3(x0, x1)
Cond_eval_3(TRUE, x0, x1)
Cond_eval_31(TRUE, x0, x1)

----------------------------------------

(37) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(38)
TRUE
