YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zUmaN.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 183 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
log(1, y) -> Cond_log(y >= 2, 1, y)
Cond_log(TRUE, 1, y) -> 0
log(x, y) -> Cond_log1(x >= 2 && y >= 2, x, y)
Cond_log1(TRUE, x, y) -> 1 + log((x - y) / y, y)
The set Q consists of the following terms:
Cond_log(TRUE, 1, x0)
log(x0, x1)
Cond_log1(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
log(1, y) -> Cond_log(y >= 2, 1, y)
Cond_log(TRUE, 1, y) -> 0
log(x, y) -> Cond_log1(x >= 2 && y >= 2, x, y)
Cond_log1(TRUE, x, y) -> 1 + log((x - y) / y, y)

The integer pair graph contains the following rules and edges:
(0): LOG(1, y[0]) -> COND_LOG(y[0] >= 2, 1, y[0])
(1): LOG(x[1], y[1]) -> COND_LOG1(x[1] >= 2 && y[1] >= 2, x[1], y[1])
(2): COND_LOG1(TRUE, x[2], y[2]) -> LOG((x[2] - y[2]) / y[2], y[2])

   (1) -> (2), if (x[1] >= 2 && y[1] >= 2  & x[1] ->^* x[2] & y[1] ->^* y[2])
   (2) -> (0), if ((x[2] - y[2]) / y[2] ->^* 1 & y[2] ->^* y[0])
   (2) -> (1), if ((x[2] - y[2]) / y[2] ->^* x[1] & y[2] ->^* y[1])

The set Q consists of the following terms:
Cond_log(TRUE, 1, x0)
log(x0, x1)
Cond_log1(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): LOG(1, y[0]) -> COND_LOG(y[0] >= 2, 1, y[0])
(1): LOG(x[1], y[1]) -> COND_LOG1(x[1] >= 2 && y[1] >= 2, x[1], y[1])
(2): COND_LOG1(TRUE, x[2], y[2]) -> LOG((x[2] - y[2]) / y[2], y[2])

   (1) -> (2), if (x[1] >= 2 && y[1] >= 2  & x[1] ->^* x[2] & y[1] ->^* y[2])
   (2) -> (0), if ((x[2] - y[2]) / y[2] ->^* 1 & y[2] ->^* y[0])
   (2) -> (1), if ((x[2] - y[2]) / y[2] ->^* x[1] & y[2] ->^* y[1])

The set Q consists of the following terms:
Cond_log(TRUE, 1, x0)
log(x0, x1)
Cond_log1(TRUE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(2): COND_LOG1(TRUE, x[2], y[2]) -> LOG((x[2] - y[2]) / y[2], y[2])
(1): LOG(x[1], y[1]) -> COND_LOG1(x[1] >= 2 && y[1] >= 2, x[1], y[1])

   (2) -> (1), if ((x[2] - y[2]) / y[2] ->^* x[1] & y[2] ->^* y[1])
   (1) -> (2), if (x[1] >= 2 && y[1] >= 2  & x[1] ->^* x[2] & y[1] ->^* y[2])

The set Q consists of the following terms:
Cond_log(TRUE, 1, x0)
log(x0, x1)
Cond_log1(TRUE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@24f20d57
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_LOG1(TRUE, x[2], y[2]) -> LOG(/(-(x[2], y[2]), y[2]), y[2]) the following chains were created:
*We consider the chain LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1]), COND_LOG1(TRUE, x[2], y[2]) -> LOG(/(-(x[2], y[2]), y[2]), y[2]), LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1]) which results in the following constraint:

(1)    (&&(>=(x[1], 2), >=(y[1], 2))=TRUE & x[1]=x[2] & y[1]=y[2] & /(-(x[2], y[2]), y[2])=x[1]1 & y[2]=y[1]1  ==>  COND_LOG1(TRUE, x[2], y[2])_>=_NonInfC & COND_LOG1(TRUE, x[2], y[2])_>=_LOG(/(-(x[2], y[2]), y[2]), y[2]) & (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(x[1], 2)=TRUE & >=(y[1], 2)=TRUE  ==>  COND_LOG1(TRUE, x[1], y[1])_>=_NonInfC & COND_LOG1(TRUE, x[1], y[1])_>=_LOG(/(-(x[1], y[1]), y[1]), y[1]) & (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [(-1)bso_16] + x[1] + [-1]max{x[1] + [-1]y[1], [-1]x[1] + y[1]} + min{max{y[1], [-1]y[1]} + [-1], max{x[1] + [-1]y[1], [-1]x[1] + y[1]}} >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [(-1)bso_16] + x[1] + [-1]max{x[1] + [-1]y[1], [-1]x[1] + y[1]} + min{max{y[1], [-1]y[1]} + [-1], max{x[1] + [-1]y[1], [-1]x[1] + y[1]}} >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraints:

(5)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & [2]x[1] + [-2]y[1] >= 0 & [2]y[1] >= 0 & x[1] + [-2]y[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [-1 + (-1)bso_16] + [2]y[1] >= 0)

(6)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & [2]x[1] + [-2]y[1] >= 0 & [2]y[1] >= 0 & [2]y[1] + [-1] + [-1]x[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [(-1)bso_16] + x[1] >= 0)

(7)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & [-2]x[1] + [-1] + [2]y[1] >= 0 & [2]y[1] >= 0 & [-1] + x[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [(-1)bso_16] + x[1] >= 0)



We simplified constraint (5) using rule (IDP_POLY_GCD) which results in the following new constraint:

(8)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & x[1] + [-2]y[1] >= 0 & x[1] + [-1]y[1] >= 0 & y[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [-1 + (-1)bso_16] + [2]y[1] >= 0)








For Pair LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1]) the following chains were created:
*We consider the chain LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1]), COND_LOG1(TRUE, x[2], y[2]) -> LOG(/(-(x[2], y[2]), y[2]), y[2]) which results in the following constraint:

(1)    (&&(>=(x[1], 2), >=(y[1], 2))=TRUE & x[1]=x[2] & y[1]=y[2]  ==>  LOG(x[1], y[1])_>=_NonInfC & LOG(x[1], y[1])_>=_COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1]) & (U^Increasing(COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(x[1], 2)=TRUE & >=(y[1], 2)=TRUE  ==>  LOG(x[1], y[1])_>=_NonInfC & LOG(x[1], y[1])_>=_COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1]) & (U^Increasing(COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0  ==>  (U^Increasing(COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[1] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0  ==>  (U^Increasing(COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[1] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[1] + [-2] >= 0 & y[1] + [-2] >= 0  ==>  (U^Increasing(COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[1] >= 0 & [(-1)bso_18] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_LOG1(TRUE, x[2], y[2]) -> LOG(/(-(x[2], y[2]), y[2]), y[2])

*(x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & [2]x[1] + [-2]y[1] >= 0 & [2]y[1] >= 0 & [2]y[1] + [-1] + [-1]x[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [(-1)bso_16] + x[1] >= 0)


*(x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & [-2]x[1] + [-1] + [2]y[1] >= 0 & [2]y[1] >= 0 & [-1] + x[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [(-1)bso_16] + x[1] >= 0)


*(x[1] + [-2] >= 0 & y[1] + [-2] >= 0 & x[1] + [-2]y[1] >= 0 & x[1] + [-1]y[1] >= 0 & y[1] >= 0  ==>  (U^Increasing(LOG(/(-(x[2], y[2]), y[2]), y[2])), >=) & [(-1)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] >= 0 & [-1 + (-1)bso_16] + [2]y[1] >= 0)




*LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])

*(x[1] + [-2] >= 0 & y[1] + [-2] >= 0  ==>  (U^Increasing(COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[1] >= 0 & [(-1)bso_18] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(COND_LOG1(x_1, x_2, x_3)) = [-1] + x_2 + [-1]x_1
   POL(LOG(x_1, x_2)) = [-1] + x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(&&(x_1, x_2)) = 0
   POL(>=(x_1, x_2)) = [-1]
   POL(2) = [2]
   
   Polynomial Interpretations with Context Sensitive Arithemetic Replacement
   POL(Term^CSAR-Mode @ Context)
   
   POL(/(x_1, y[1])^1 @ {LOG_2/0}) = max{x_1, [-1]x_1} + [-1]min{max{x_2, [-1]x_2} + [-1], max{x_1, [-1]x_1}}


The following pairs are in P_>:


   COND_LOG1(TRUE, x[2], y[2]) -> LOG(/(-(x[2], y[2]), y[2]), y[2])


The following pairs are in P_bound:


   COND_LOG1(TRUE, x[2], y[2]) -> LOG(/(-(x[2], y[2]), y[2]), y[2])
   LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])


The following pairs are in P_>=:


   LOG(x[1], y[1]) -> COND_LOG1(&&(>=(x[1], 2), >=(y[1], 2)), x[1], y[1])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   /^1 ->
   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): LOG(x[1], y[1]) -> COND_LOG1(x[1] >= 2 && y[1] >= 2, x[1], y[1])


The set Q consists of the following terms:
Cond_log(TRUE, 1, x0)
log(x0, x1)
Cond_log1(TRUE, x0, x1)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
