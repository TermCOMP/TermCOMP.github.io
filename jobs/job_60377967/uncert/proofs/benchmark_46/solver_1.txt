YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nBWlg.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 99 ms]
(8) AND
    (9) IDP
        (10) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (11) TRUE
    (12) IDP
        (13) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (14) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
div(x, y) -> divNat(x >= 0 && y >= 1, x, y)
divNat(TRUE, x, y) -> d(x, y, 0)
d(x, y, z) -> dNat(x >= 0 && y >= 1 && z >= 0, x, y, z)
dNat(TRUE, x, y, z) -> cond(x >= z, x, y - 1, z)
cond(TRUE, x, y, z) -> 1 + d(x, y + 1, y + 1 + z)
cond(FALSE, x, y, z) -> 0
The set Q consists of the following terms:
div(x0, x1)
divNat(TRUE, x0, x1)
d(x0, x1, x2)
dNat(TRUE, x0, x1, x2)
cond(TRUE, x0, x1, x2)
cond(FALSE, x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
div(x, y) -> divNat(x >= 0 && y >= 1, x, y)
divNat(TRUE, x, y) -> d(x, y, 0)
d(x, y, z) -> dNat(x >= 0 && y >= 1 && z >= 0, x, y, z)
dNat(TRUE, x, y, z) -> cond(x >= z, x, y - 1, z)
cond(TRUE, x, y, z) -> 1 + d(x, y + 1, y + 1 + z)
cond(FALSE, x, y, z) -> 0

The integer pair graph contains the following rules and edges:
(0): DIV(x[0], y[0]) -> DIVNAT(x[0] >= 0 && y[0] >= 1, x[0], y[0])
(1): DIVNAT(TRUE, x[1], y[1]) -> D(x[1], y[1], 0)
(2): D(x[2], y[2], z[2]) -> DNAT(x[2] >= 0 && y[2] >= 1 && z[2] >= 0, x[2], y[2], z[2])
(3): DNAT(TRUE, x[3], y[3], z[3]) -> COND(x[3] >= z[3], x[3], y[3] - 1, z[3])
(4): COND(TRUE, x[4], y[4], z[4]) -> D(x[4], y[4] + 1, y[4] + 1 + z[4])

   (0) -> (1), if (x[0] >= 0 && y[0] >= 1  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] ->^* y[2] & 0 ->^* z[2])
   (2) -> (3), if (x[2] >= 0 && y[2] >= 1 && z[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (4), if (x[3] >= z[3]  & x[3] ->^* x[4] & y[3] - 1 ->^* y[4] & z[3] ->^* z[4])
   (4) -> (2), if (x[4] ->^* x[2] & y[4] + 1 ->^* y[2] & y[4] + 1 + z[4] ->^* z[2])

The set Q consists of the following terms:
div(x0, x1)
divNat(TRUE, x0, x1)
d(x0, x1, x2)
dNat(TRUE, x0, x1, x2)
cond(TRUE, x0, x1, x2)
cond(FALSE, x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): DIV(x[0], y[0]) -> DIVNAT(x[0] >= 0 && y[0] >= 1, x[0], y[0])
(1): DIVNAT(TRUE, x[1], y[1]) -> D(x[1], y[1], 0)
(2): D(x[2], y[2], z[2]) -> DNAT(x[2] >= 0 && y[2] >= 1 && z[2] >= 0, x[2], y[2], z[2])
(3): DNAT(TRUE, x[3], y[3], z[3]) -> COND(x[3] >= z[3], x[3], y[3] - 1, z[3])
(4): COND(TRUE, x[4], y[4], z[4]) -> D(x[4], y[4] + 1, y[4] + 1 + z[4])

   (0) -> (1), if (x[0] >= 0 && y[0] >= 1  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] ->^* y[2] & 0 ->^* z[2])
   (2) -> (3), if (x[2] >= 0 && y[2] >= 1 && z[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (4), if (x[3] >= z[3]  & x[3] ->^* x[4] & y[3] - 1 ->^* y[4] & z[3] ->^* z[4])
   (4) -> (2), if (x[4] ->^* x[2] & y[4] + 1 ->^* y[2] & y[4] + 1 + z[4] ->^* z[2])

The set Q consists of the following terms:
div(x0, x1)
divNat(TRUE, x0, x1)
d(x0, x1, x2)
dNat(TRUE, x0, x1, x2)
cond(TRUE, x0, x1, x2)
cond(FALSE, x0, x1, x2)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(4): COND(TRUE, x[4], y[4], z[4]) -> D(x[4], y[4] + 1, y[4] + 1 + z[4])
(3): DNAT(TRUE, x[3], y[3], z[3]) -> COND(x[3] >= z[3], x[3], y[3] - 1, z[3])
(2): D(x[2], y[2], z[2]) -> DNAT(x[2] >= 0 && y[2] >= 1 && z[2] >= 0, x[2], y[2], z[2])

   (4) -> (2), if (x[4] ->^* x[2] & y[4] + 1 ->^* y[2] & y[4] + 1 + z[4] ->^* z[2])
   (2) -> (3), if (x[2] >= 0 && y[2] >= 1 && z[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (4), if (x[3] >= z[3]  & x[3] ->^* x[4] & y[3] - 1 ->^* y[4] & z[3] ->^* z[4])

The set Q consists of the following terms:
div(x0, x1)
divNat(TRUE, x0, x1)
d(x0, x1, x2)
dNat(TRUE, x0, x1, x2)
cond(TRUE, x0, x1, x2)
cond(FALSE, x0, x1, x2)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3b09e61a
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND(TRUE, x[4], y[4], z[4]) -> D(x[4], +(y[4], 1), +(+(y[4], 1), z[4])) the following chains were created:
*We consider the chain DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3]), COND(TRUE, x[4], y[4], z[4]) -> D(x[4], +(y[4], 1), +(+(y[4], 1), z[4])), D(x[2], y[2], z[2]) -> DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (>=(x[3], z[3])=TRUE & x[3]=x[4] & -(y[3], 1)=y[4] & z[3]=z[4] & x[4]=x[2] & +(y[4], 1)=y[2] & +(+(y[4], 1), z[4])=z[2]  ==>  COND(TRUE, x[4], y[4], z[4])_>=_NonInfC & COND(TRUE, x[4], y[4], z[4])_>=_D(x[4], +(y[4], 1), +(+(y[4], 1), z[4])) & (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(x[3], z[3])=TRUE  ==>  COND(TRUE, x[3], -(y[3], 1), z[3])_>=_NonInfC & COND(TRUE, x[3], -(y[3], 1), z[3])_>=_D(x[3], +(-(y[3], 1), 1), +(+(-(y[3], 1), 1), z[3])) & (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[3] + [-1]z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)Bound*bni_19] + [(-1)bni_19]z[3] + [(-1)bni_19]y[3] + [bni_19]x[3] >= 0 & [1 + (-1)bso_20] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[3] + [-1]z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)Bound*bni_19] + [(-1)bni_19]z[3] + [(-1)bni_19]y[3] + [bni_19]x[3] >= 0 & [1 + (-1)bso_20] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[3] + [-1]z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)Bound*bni_19] + [(-1)bni_19]z[3] + [(-1)bni_19]y[3] + [bni_19]x[3] >= 0 & [1 + (-1)bso_20] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[3] + [-1]z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)bni_19] = 0 & [(-1)Bound*bni_19] + [(-1)bni_19]z[3] + [bni_19]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_20] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)bni_19] = 0 & [(-1)Bound*bni_19] + [bni_19]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_20] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[3] >= 0 & z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)bni_19] = 0 & [(-1)Bound*bni_19] + [bni_19]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_20] >= 0)

(9)    (x[3] >= 0 & z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)bni_19] = 0 & [(-1)Bound*bni_19] + [bni_19]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_20] >= 0)








For Pair DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3]) the following chains were created:
*We consider the chain D(x[2], y[2], z[2]) -> DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2]), DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3]), COND(TRUE, x[4], y[4], z[4]) -> D(x[4], +(y[4], 1), +(+(y[4], 1), z[4])) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & >=(x[3], z[3])=TRUE & x[3]=x[4] & -(y[3], 1)=y[4] & z[3]=z[4]  ==>  DNAT(TRUE, x[3], y[3], z[3])_>=_NonInfC & DNAT(TRUE, x[3], y[3], z[3])_>=_COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3]) & (U^Increasing(COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(x[2], z[2])=TRUE & >=(z[2], 0)=TRUE & >=(x[2], 0)=TRUE & >=(y[2], 1)=TRUE  ==>  DNAT(TRUE, x[2], y[2], z[2])_>=_NonInfC & DNAT(TRUE, x[2], y[2], z[2])_>=_COND(>=(x[2], z[2]), x[2], -(y[2], 1), z[2]) & (U^Increasing(COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1]z[2] >= 0 & z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[2] + [bni_21]x[2] >= 0 & [-1 + (-1)bso_22] + y[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1]z[2] >= 0 & z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[2] + [bni_21]x[2] >= 0 & [-1 + (-1)bso_22] + y[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1]z[2] >= 0 & z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[2] + [bni_21]x[2] >= 0 & [-1 + (-1)bso_22] + y[2] >= 0)








For Pair D(x[2], y[2], z[2]) -> DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2]) the following chains were created:
*We consider the chain D(x[2], y[2], z[2]) -> DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2]), DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3]) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  D(x[2], y[2], z[2])_>=_NonInfC & D(x[2], y[2], z[2])_>=_DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2]) & (U^Increasing(DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(z[2], 0)=TRUE & >=(x[2], 0)=TRUE & >=(y[2], 1)=TRUE  ==>  D(x[2], y[2], z[2])_>=_NonInfC & D(x[2], y[2], z[2])_>=_DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2]) & (U^Increasing(DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND(TRUE, x[4], y[4], z[4]) -> D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))

*(x[3] >= 0 & z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)bni_19] = 0 & [(-1)Bound*bni_19] + [bni_19]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_20] >= 0)


*(x[3] >= 0 & z[3] >= 0  ==>  (U^Increasing(D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))), >=) & [(-1)bni_19] = 0 & [(-1)Bound*bni_19] + [bni_19]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_20] >= 0)




*DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])

*(x[2] + [-1]z[2] >= 0 & z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[2] + [bni_21]x[2] >= 0 & [-1 + (-1)bso_22] + y[2] >= 0)




*D(x[2], y[2], z[2]) -> DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])

*(z[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(COND(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + [-1]x_3 + x_2
   POL(D(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(DNAT(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2 + [-1]x_1
   POL(>=(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(&&(x_1, x_2)) = 0
   POL(0) = 0


The following pairs are in P_>:


   COND(TRUE, x[4], y[4], z[4]) -> D(x[4], +(y[4], 1), +(+(y[4], 1), z[4]))


The following pairs are in P_bound:


   DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])


The following pairs are in P_>=:


   DNAT(TRUE, x[3], y[3], z[3]) -> COND(>=(x[3], z[3]), x[3], -(y[3], 1), z[3])
   D(x[2], y[2], z[2]) -> DNAT(&&(&&(>=(x[2], 0), >=(y[2], 1)), >=(z[2], 0)), x[2], y[2], z[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): DNAT(TRUE, x[3], y[3], z[3]) -> COND(x[3] >= z[3], x[3], y[3] - 1, z[3])
(2): D(x[2], y[2], z[2]) -> DNAT(x[2] >= 0 && y[2] >= 1 && z[2] >= 0, x[2], y[2], z[2])

   (2) -> (3), if (x[2] >= 0 && y[2] >= 1 && z[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])

The set Q consists of the following terms:
div(x0, x1)
divNat(TRUE, x0, x1)
d(x0, x1, x2)
dNat(TRUE, x0, x1, x2)
cond(TRUE, x0, x1, x2)
cond(FALSE, x0, x1, x2)

----------------------------------------

(10) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(11)
TRUE

----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(4): COND(TRUE, x[4], y[4], z[4]) -> D(x[4], y[4] + 1, y[4] + 1 + z[4])
(2): D(x[2], y[2], z[2]) -> DNAT(x[2] >= 0 && y[2] >= 1 && z[2] >= 0, x[2], y[2], z[2])

   (4) -> (2), if (x[4] ->^* x[2] & y[4] + 1 ->^* y[2] & y[4] + 1 + z[4] ->^* z[2])

The set Q consists of the following terms:
div(x0, x1)
divNat(TRUE, x0, x1)
d(x0, x1, x2)
dNat(TRUE, x0, x1, x2)
cond(TRUE, x0, x1, x2)
cond(FALSE, x0, x1, x2)

----------------------------------------

(13) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(14)
TRUE
