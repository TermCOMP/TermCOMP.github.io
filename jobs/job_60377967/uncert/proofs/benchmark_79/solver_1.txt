YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nAfnH.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 70 ms]
(8) IDP
(9) PisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
f(TRUE, x) -> ft(TRUE, x, y)
ft(TRUE, x, y) -> ft(y >= x, x + 1, y)
The set Q consists of the following terms:
f(TRUE, x0)
ft(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
f(TRUE, x) -> ft(TRUE, x, y)
ft(TRUE, x, y) -> ft(y >= x, x + 1, y)

The integer pair graph contains the following rules and edges:
(0): F(TRUE, x[0]) -> FT(TRUE, x[0], y[0])
(1): FT(TRUE, x[1], y[1]) -> FT(y[1] >= x[1], x[1] + 1, y[1])

   (0) -> (1), if (x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (1), if (y[1] >= x[1]  & x[1] + 1 ->^* x[1]' & y[1] ->^* y[1]')

The set Q consists of the following terms:
f(TRUE, x0)
ft(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): F(TRUE, x[0]) -> FT(TRUE, x[0], y[0])
(1): FT(TRUE, x[1], y[1]) -> FT(y[1] >= x[1], x[1] + 1, y[1])

   (0) -> (1), if (x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (1), if (y[1] >= x[1]  & x[1] + 1 ->^* x[1]' & y[1] ->^* y[1]')

The set Q consists of the following terms:
f(TRUE, x0)
ft(TRUE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): FT(TRUE, x[1], y[1]) -> FT(y[1] >= x[1], x[1] + 1, y[1])

   (1) -> (1), if (y[1] >= x[1]  & x[1] + 1 ->^* x[1]' & y[1] ->^* y[1]')

The set Q consists of the following terms:
f(TRUE, x0)
ft(TRUE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@763bce86
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1]) the following chains were created:
*We consider the chain FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1]), FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1]), FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1]) which results in the following constraint:

(1)    (>=(y[1], x[1])=TRUE & +(x[1], 1)=x[1]1 & y[1]=y[1]1 & >=(y[1]1, x[1]1)=TRUE & +(x[1]1, 1)=x[1]2 & y[1]1=y[1]2  ==>  FT(TRUE, x[1]1, y[1]1)_>=_NonInfC & FT(TRUE, x[1]1, y[1]1)_>=_FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1) & (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(y[1], x[1])=TRUE & >=(y[1], +(x[1], 1))=TRUE  ==>  FT(TRUE, +(x[1], 1), y[1])_>=_NonInfC & FT(TRUE, +(x[1], 1), y[1])_>=_FT(>=(y[1], +(x[1], 1)), +(+(x[1], 1), 1), y[1]) & (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[1] + [-1]x[1] >= 0 & y[1] + [-1] + [-1]x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] + [(-1)bni_8]x[1] >= 0 & [1 + (-1)bso_9] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[1] + [-1]x[1] >= 0 & y[1] + [-1] + [-1]x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] + [(-1)bni_8]x[1] >= 0 & [1 + (-1)bso_9] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[1] + [-1]x[1] >= 0 & y[1] + [-1] + [-1]x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] + [(-1)bni_8]x[1] >= 0 & [1 + (-1)bso_9] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[1] >= 0 & [-1] + y[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] >= 0 & [1 + (-1)bso_9] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[1] >= 0 & [-1] + y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] >= 0 & [1 + (-1)bso_9] >= 0)

(8)    (y[1] >= 0 & [-1] + y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] >= 0 & [1 + (-1)bso_9] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1])

*(y[1] >= 0 & [-1] + y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] >= 0 & [1 + (-1)bso_9] >= 0)


*(y[1] >= 0 & [-1] + y[1] >= 0 & x[1] >= 0  ==>  (U^Increasing(FT(>=(y[1]1, x[1]1), +(x[1]1, 1), y[1]1)), >=) & [bni_8 + (-1)Bound*bni_8] + [bni_8]y[1] >= 0 & [1 + (-1)bso_9] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(FT(x_1, x_2, x_3)) = [2] + x_3 + [-1]x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]


The following pairs are in P_>:


   FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1])


The following pairs are in P_bound:


   FT(TRUE, x[1], y[1]) -> FT(>=(y[1], x[1]), +(x[1], 1), y[1])


The following pairs are in P_>=:

none


There are no usable rules.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
none

R is empty.

The integer pair graph is empty.

The set Q consists of the following terms:
f(TRUE, x0)
ft(TRUE, x0, x1)

----------------------------------------

(9) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(10)
YES
