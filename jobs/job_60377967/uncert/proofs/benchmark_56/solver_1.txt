YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/d0G1v.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 137 ms]
(8) AND
    (9) IDP
        (10) IDPNonInfProof [SOUND, 21 ms]
        (11) IDP
        (12) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (13) TRUE
    (14) IDP
        (15) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (16) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval_0(x, y, z) -> Cond_eval_0(y > 0, x, y, z)
Cond_eval_0(TRUE, x, y, z) -> eval_1(x, y, z)
eval_1(x, y, z) -> Cond_eval_1(y > x && z > y && y > 0, x, y, z)
Cond_eval_1(TRUE, x, y, z) -> eval_1(x + y, y, z)
eval_1(x, y, z) -> Cond_eval_11(y > x && z > y && y > 0, x, y, z)
Cond_eval_11(TRUE, x, y, z) -> eval_1(x, y, x - y)
The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
eval_0(x, y, z) -> Cond_eval_0(y > 0, x, y, z)
Cond_eval_0(TRUE, x, y, z) -> eval_1(x, y, z)
eval_1(x, y, z) -> Cond_eval_1(y > x && z > y && y > 0, x, y, z)
Cond_eval_1(TRUE, x, y, z) -> eval_1(x + y, y, z)
eval_1(x, y, z) -> Cond_eval_11(y > x && z > y && y > 0, x, y, z)
Cond_eval_11(TRUE, x, y, z) -> eval_1(x, y, x - y)

The integer pair graph contains the following rules and edges:
(0): EVAL_0(x[0], y[0], z[0]) -> COND_EVAL_0(y[0] > 0, x[0], y[0], z[0])
(1): COND_EVAL_0(TRUE, x[1], y[1], z[1]) -> EVAL_1(x[1], y[1], z[1])
(2): EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(y[2] > x[2] && z[2] > y[2] && y[2] > 0, x[2], y[2], z[2])
(3): COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(x[3] + y[3], y[3], z[3])
(4): EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(y[4] > x[4] && z[4] > y[4] && y[4] > 0, x[4], y[4], z[4])
(5): COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], x[5] - y[5])

   (0) -> (1), if (y[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (1) -> (4), if (x[1] ->^* x[4] & y[1] ->^* y[4] & z[1] ->^* z[4])
   (2) -> (3), if (y[2] > x[2] && z[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (2), if (x[3] + y[3] ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (3) -> (4), if (x[3] + y[3] ->^* x[4] & y[3] ->^* y[4] & z[3] ->^* z[4])
   (4) -> (5), if (y[4] > x[4] && z[4] > y[4] && y[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] ->^* y[2] & x[5] - y[5] ->^* z[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] ->^* y[4] & x[5] - y[5] ->^* z[4])

The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL_0(x[0], y[0], z[0]) -> COND_EVAL_0(y[0] > 0, x[0], y[0], z[0])
(1): COND_EVAL_0(TRUE, x[1], y[1], z[1]) -> EVAL_1(x[1], y[1], z[1])
(2): EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(y[2] > x[2] && z[2] > y[2] && y[2] > 0, x[2], y[2], z[2])
(3): COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(x[3] + y[3], y[3], z[3])
(4): EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(y[4] > x[4] && z[4] > y[4] && y[4] > 0, x[4], y[4], z[4])
(5): COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], x[5] - y[5])

   (0) -> (1), if (y[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (1) -> (4), if (x[1] ->^* x[4] & y[1] ->^* y[4] & z[1] ->^* z[4])
   (2) -> (3), if (y[2] > x[2] && z[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (2), if (x[3] + y[3] ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (3) -> (4), if (x[3] + y[3] ->^* x[4] & y[3] ->^* y[4] & z[3] ->^* z[4])
   (4) -> (5), if (y[4] > x[4] && z[4] > y[4] && y[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] ->^* y[2] & x[5] - y[5] ->^* z[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] ->^* y[4] & x[5] - y[5] ->^* z[4])

The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(5): COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], x[5] - y[5])
(4): EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(y[4] > x[4] && z[4] > y[4] && y[4] > 0, x[4], y[4], z[4])
(3): COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(x[3] + y[3], y[3], z[3])
(2): EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(y[2] > x[2] && z[2] > y[2] && y[2] > 0, x[2], y[2], z[2])

   (3) -> (2), if (x[3] + y[3] ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] ->^* y[2] & x[5] - y[5] ->^* z[2])
   (2) -> (3), if (y[2] > x[2] && z[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (4), if (x[3] + y[3] ->^* x[4] & y[3] ->^* y[4] & z[3] ->^* z[4])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] ->^* y[4] & x[5] - y[5] ->^* z[4])
   (4) -> (5), if (y[4] > x[4] && z[4] > y[4] && y[4] > 0  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])

The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@61581de4
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], -(x[5], y[5])) the following chains were created:
*We consider the chain EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]), COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], -(x[5], y[5])), EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0))=TRUE & x[4]=x[5] & y[4]=y[5] & z[4]=z[5] & x[5]=x[2] & y[5]=y[2] & -(x[5], y[5])=z[2]  ==>  COND_EVAL_11(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL_11(TRUE, x[5], y[5], z[5])_>=_EVAL_1(x[5], y[5], -(x[5], y[5])) & (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], 0)=TRUE & >(y[4], x[4])=TRUE & >(z[4], y[4])=TRUE  ==>  COND_EVAL_11(TRUE, x[4], y[4], z[4])_>=_NonInfC & COND_EVAL_11(TRUE, x[4], y[4], z[4])_>=_EVAL_1(x[4], y[4], -(x[4], y[4])) & (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[4] + [-1] >= 0 & y[4] + [-1] + x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [(-1)bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)

(7)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)




*We consider the chain EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]), COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], -(x[5], y[5])), EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]) which results in the following constraint:

(1)    (&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0))=TRUE & x[4]=x[5] & y[4]=y[5] & z[4]=z[5] & x[5]=x[4]1 & y[5]=y[4]1 & -(x[5], y[5])=z[4]1  ==>  COND_EVAL_11(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL_11(TRUE, x[5], y[5], z[5])_>=_EVAL_1(x[5], y[5], -(x[5], y[5])) & (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], 0)=TRUE & >(y[4], x[4])=TRUE & >(z[4], y[4])=TRUE  ==>  COND_EVAL_11(TRUE, x[4], y[4], z[4])_>=_NonInfC & COND_EVAL_11(TRUE, x[4], y[4], z[4])_>=_EVAL_1(x[4], y[4], -(x[4], y[4])) & (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)

(7)    (y[4] + [-1] >= 0 & y[4] + [-1] + x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [(-1)bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)








For Pair EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]) the following chains were created:
*We consider the chain EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]), COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], -(x[5], y[5])) which results in the following constraint:

(1)    (&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0))=TRUE & x[4]=x[5] & y[4]=y[5] & z[4]=z[5]  ==>  EVAL_1(x[4], y[4], z[4])_>=_NonInfC & EVAL_1(x[4], y[4], z[4])_>=_COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]) & (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], 0)=TRUE & >(y[4], x[4])=TRUE & >(z[4], y[4])=TRUE  ==>  EVAL_1(x[4], y[4], z[4])_>=_NonInfC & EVAL_1(x[4], y[4], z[4])_>=_COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]) & (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + [-1]x[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + [-1]x[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + [-1]x[4] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[4] + [-1] >= 0 & y[4] + [-1] + x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + x[4] >= 0)

(7)    (y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + [-1]x[4] >= 0)








For Pair COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]), EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & +(x[3], y[3])=x[2]1 & y[3]=y[2]1 & z[3]=z[2]1  ==>  COND_EVAL_1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL_1(TRUE, x[3], y[3], z[3])_>=_EVAL_1(+(x[3], y[3]), y[3], z[3]) & (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(y[2], x[2])=TRUE & >(z[2], y[2])=TRUE  ==>  COND_EVAL_1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL_1(TRUE, x[2], y[2], z[2])_>=_EVAL_1(+(x[2], y[2]), y[2], z[2]) & (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)

(7)    (y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)




*We consider the chain EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]), EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4]) which results in the following constraint:

(1)    (&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & +(x[3], y[3])=x[4] & y[3]=y[4] & z[3]=z[4]  ==>  COND_EVAL_1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL_1(TRUE, x[3], y[3], z[3])_>=_EVAL_1(+(x[3], y[3]), y[3], z[3]) & (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(y[2], x[2])=TRUE & >(z[2], y[2])=TRUE  ==>  COND_EVAL_1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL_1(TRUE, x[2], y[2], z[2])_>=_EVAL_1(+(x[2], y[2]), y[2], z[2]) & (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)

(7)    (y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)








For Pair EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]) which results in the following constraint:

(1)    (&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL_1(x[2], y[2], z[2])_>=_NonInfC & EVAL_1(x[2], y[2], z[2])_>=_COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(y[2], x[2])=TRUE & >(z[2], y[2])=TRUE  ==>  EVAL_1(x[2], y[2], z[2])_>=_NonInfC & EVAL_1(x[2], y[2], z[2])_>=_COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)

(7)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], -(x[5], y[5]))

*(y[4] + [-1] >= 0 & y[4] + [-1] + x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [(-1)bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)


*(y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)


*(y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)


*(y[4] + [-1] >= 0 & y[4] + [-1] + x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(EVAL_1(x[5], y[5], -(x[5], y[5]))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[4] + [(-1)bni_19]x[4] >= 0 & [(-1)bso_20] + y[4] >= 0)




*EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])

*(y[4] + [-1] >= 0 & y[4] + [-1] + x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + x[4] >= 0)


*(y[4] + [-1] >= 0 & y[4] + [-1] + [-1]x[4] >= 0 & z[4] + [-1] + [-1]y[4] >= 0 & x[4] >= 0  ==>  (U^Increasing(COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]z[4] + [(-1)bni_21]y[4] >= 0 & [(-1)bso_22] + z[4] + [-1]x[4] >= 0)




*COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3])

*(y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)


*(y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)


*(y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)


*(y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]z[2] + [(-1)bni_23]y[2] >= 0 & [(-1)bso_24] >= 0)




*EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])

*(y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)


*(y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]z[2] + [(-1)bni_25]y[2] >= 0 & [(-1)bso_26] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(COND_EVAL_11(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_3 + x_2 + [-1]x_1
   POL(EVAL_1(x_1, x_2, x_3)) = [-1] + x_3 + [-1]x_2
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(COND_EVAL_1(x_1, x_2, x_3, x_4)) = [-1] + x_4 + [-1]x_3 + [-1]x_1
   POL(+(x_1, x_2)) = x_1 + x_2


The following pairs are in P_>:


   COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], -(x[5], y[5]))
   EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])


The following pairs are in P_bound:


   EVAL_1(x[4], y[4], z[4]) -> COND_EVAL_11(&&(&&(>(y[4], x[4]), >(z[4], y[4])), >(y[4], 0)), x[4], y[4], z[4])
   COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3])
   EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])


The following pairs are in P_>=:


   COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3])
   EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(x[3] + y[3], y[3], z[3])
(2): EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(y[2] > x[2] && z[2] > y[2] && y[2] > 0, x[2], y[2], z[2])

   (3) -> (2), if (x[3] + y[3] ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (2) -> (3), if (y[2] > x[2] && z[2] > y[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])

The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(10) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@61581de4
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]), EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & +(x[3], y[3])=x[2]1 & y[3]=y[2]1 & z[3]=z[2]1  ==>  COND_EVAL_1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL_1(TRUE, x[3], y[3], z[3])_>=_EVAL_1(+(x[3], y[3]), y[3], z[3]) & (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(y[2], x[2])=TRUE & >(z[2], y[2])=TRUE  ==>  COND_EVAL_1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL_1(TRUE, x[2], y[2], z[2])_>=_EVAL_1(+(x[2], y[2]), y[2], z[2]) & (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [(-1)bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [(-1)bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [(-1)bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [(-1)bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)

(7)    (y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)








For Pair EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) the following chains were created:
*We consider the chain EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3]) which results in the following constraint:

(1)    (&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL_1(x[2], y[2], z[2])_>=_NonInfC & EVAL_1(x[2], y[2], z[2])_>=_COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >(y[2], x[2])=TRUE & >(z[2], y[2])=TRUE  ==>  EVAL_1(x[2], y[2], z[2])_>=_NonInfC & EVAL_1(x[2], y[2], z[2])_>=_COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [(-1)bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [(-1)bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [(-1)bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [(-1)bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)

(7)    (y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3])

*(y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [(-1)bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)


*(y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL_1(+(x[3], y[3]), y[3], z[3])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]z[2] + [(-1)bni_14]y[2] + [bni_14]x[2] >= 0 & [(-1)bso_15] >= 0)




*EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])

*(y[2] + [-1] >= 0 & y[2] + [-1] + [-1]x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [(-1)bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)


*(y[2] + [-1] >= 0 & y[2] + [-1] + x[2] >= 0 & z[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]z[2] + [bni_16]x[2] >= 0 & [(-1)bso_17] + y[2] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [2]
   POL(COND_EVAL_1(x_1, x_2, x_3, x_4)) = [-1] + x_4 + [-1]x_3 + [-1]x_2 + [-1]x_1
   POL(EVAL_1(x_1, x_2, x_3)) = [-1] + x_3 + [-1]x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0


The following pairs are in P_>:


   EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])


The following pairs are in P_bound:


   EVAL_1(x[2], y[2], z[2]) -> COND_EVAL_1(&&(&&(>(y[2], x[2]), >(z[2], y[2])), >(y[2], 0)), x[2], y[2], z[2])


The following pairs are in P_>=:


   COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(+(x[3], y[3]), y[3], z[3])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(11)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL_1(TRUE, x[3], y[3], z[3]) -> EVAL_1(x[3] + y[3], y[3], z[3])


The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(12) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(13)
TRUE

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(5): COND_EVAL_11(TRUE, x[5], y[5], z[5]) -> EVAL_1(x[5], y[5], x[5] - y[5])


The set Q consists of the following terms:
eval_0(x0, x1, x2)
Cond_eval_0(TRUE, x0, x1, x2)
eval_1(x0, x1, x2)
Cond_eval_1(TRUE, x0, x1, x2)
Cond_eval_11(TRUE, x0, x1, x2)

----------------------------------------

(15) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(16)
TRUE
