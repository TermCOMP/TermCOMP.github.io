YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/PxrO5.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 0 ms]
(6) IDP
(7) PisEmptyProof [EQUIVALENT, 0 ms]
(8) YES


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	Sub: (Integer, Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x) -> Cond_eval(x >= 0, x)
Cond_eval(TRUE, x) -> eval(-(2) * x + 10)
The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	Sub: (Integer, Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
eval(x) -> Cond_eval(x >= 0, x)
Cond_eval(TRUE, x) -> eval(-(2) * x + 10)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0]) -> COND_EVAL(x[0] >= 0, x[0])
(1): COND_EVAL(TRUE, x[1]) -> EVAL(-(2) * x[1] + 10)

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1])
   (1) -> (0), if (-(2) * x[1] + 10 ->^* x[0])

The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	Sub: (Integer, Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0]) -> COND_EVAL(x[0] >= 0, x[0])
(1): COND_EVAL(TRUE, x[1]) -> EVAL(-(2) * x[1] + 10)

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1])
   (1) -> (0), if (-(2) * x[1] + 10 ->^* x[0])

The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@1244505c
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 8
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x) -> COND_EVAL(>=(x, 0), x) the following chains were created:
*We consider the chain EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10)) which results in the following constraint:

(1)    (>=(x[0], 0)=TRUE & x[0]=x[1]  ==>  EVAL(x[0])_>=_NonInfC & EVAL(x[0])_>=_COND_EVAL(>=(x[0], 0), x[0]) & (U^Increasing(COND_EVAL(>=(x[0], 0), x[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  EVAL(x[0])_>=_NonInfC & EVAL(x[0])_>=_COND_EVAL(>=(x[0], 0), x[0]) & (U^Increasing(COND_EVAL(>=(x[0], 0), x[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0])), >=) & [bni_9 + (-1)Bound*bni_9] + [(2)bni_9]x[0] >= 0 & [2 + (-1)bso_10] + [2]x[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0])), >=) & [bni_9 + (-1)Bound*bni_9] + [(2)bni_9]x[0] >= 0 & [2 + (-1)bso_10] + [2]x[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0])), >=) & [bni_9 + (-1)Bound*bni_9] + [(2)bni_9]x[0] >= 0 & [2 + (-1)bso_10] + [2]x[0] >= 0)








For Pair COND_EVAL(TRUE, x) -> EVAL(+(*(-(2), x), 10)) the following chains were created:
*We consider the chain COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10)), EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10)), EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10)), EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10)), EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10)), EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0]) which results in the following constraint:

(1)    (+(*(-(2), x[1]), 10)=x[0] & >=(x[0], 0)=TRUE & x[0]=x[1]1 & +(*(-(2), x[1]1), 10)=x[0]1 & >=(x[0]1, 0)=TRUE & x[0]1=x[1]2 & +(*(-(2), x[1]2), 10)=x[0]2 & >=(x[0]2, 0)=TRUE & x[0]2=x[1]3 & +(*(-(2), x[1]3), 10)=x[0]3 & >=(x[0]3, 0)=TRUE & x[0]3=x[1]4 & +(*(-(2), x[1]4), 10)=x[0]4  ==>  COND_EVAL(TRUE, x[1]4)_>=_NonInfC & COND_EVAL(TRUE, x[1]4)_>=_EVAL(+(*(-(2), x[1]4), 10)) & (U^Increasing(EVAL(+(*(-(2), x[1]4), 10))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_CONSTANT_FOLD) which results in the following new constraint:

(2)    (>=(+(*(-2, x[1]), 10), 0)=TRUE & >=(+(*(-2, +(*(-2, x[1]), 10)), 10), 0)=TRUE & >=(+(*(-2, +(*(-2, +(*(-2, x[1]), 10)), 10)), 10), 0)=TRUE & >=(+(*(-2, +(*(-2, +(*(-2, +(*(-2, x[1]), 10)), 10)), 10)), 10), 0)=TRUE  ==>  COND_EVAL(TRUE, +(*(-2, +(*(-2, +(*(-2, +(*(-2, x[1]), 10)), 10)), 10)), 10))_>=_NonInfC & COND_EVAL(TRUE, +(*(-2, +(*(-2, +(*(-2, +(*(-2, x[1]), 10)), 10)), 10)), 10))_>=_EVAL(+(*(-(2), +(*(-2, +(*(-2, +(*(-2, +(*(-2, x[1]), 10)), 10)), 10)), 10)), 10)) & (U^Increasing(EVAL(+(*(-(2), x[1]4), 10))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-2]x[1] + [10] >= 0 & [4]x[1] + [-10] >= 0 & [-8]x[1] + [30] >= 0 & [16]x[1] + [-50] >= 0  ==>  (U^Increasing(EVAL(+(*(-(2), x[1]4), 10))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] >= 0 & [-222 + (-1)bso_12] + [64]x[1] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-2]x[1] + [10] >= 0 & [4]x[1] + [-10] >= 0 & [-8]x[1] + [30] >= 0 & [16]x[1] + [-50] >= 0  ==>  (U^Increasing(EVAL(+(*(-(2), x[1]4), 10))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] >= 0 & [-222 + (-1)bso_12] + [64]x[1] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-2]x[1] + [10] >= 0 & [4]x[1] + [-10] >= 0 & [-8]x[1] + [30] >= 0 & [16]x[1] + [-50] >= 0  ==>  (U^Increasing(EVAL(+(*(-(2), x[1]4), 10))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] >= 0 & [-222 + (-1)bso_12] + [64]x[1] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x) -> COND_EVAL(>=(x, 0), x)

*(x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0])), >=) & [bni_9 + (-1)Bound*bni_9] + [(2)bni_9]x[0] >= 0 & [2 + (-1)bso_10] + [2]x[0] >= 0)




*COND_EVAL(TRUE, x) -> EVAL(+(*(-(2), x), 10))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(EVAL(x_1)) = [1] + [2]x_1
   POL(COND_EVAL(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [2]
   POL(0) = 0
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(*(x_1, x_2)) = x_1*x_2
   POL(-(x_1)) = [-1]x_1
   POL(2) = [2]
   POL(10) = [10]
   POL(-2) = [-2]


The following pairs are in P_>:


   EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0])
   COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10))


The following pairs are in P_bound:


   EVAL(x[0]) -> COND_EVAL(>=(x[0], 0), x[0])
   COND_EVAL(TRUE, x[1]) -> EVAL(+(*(-(2), x[1]), 10))


The following pairs are in P_>=:

none


There are no usable rules.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	Sub: (Integer, Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	UnaryMinus: (Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
none

R is empty.

The integer pair graph is empty.

The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)

----------------------------------------

(7) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(8)
YES
