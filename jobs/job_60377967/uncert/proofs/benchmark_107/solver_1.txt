YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ABRK2.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 105 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
random(x) -> Cond_random(x >= 0, x)
Cond_random(TRUE, x) -> rand(x, 0)
rand(x, y) -> Cond_rand(x = 0, x, y)
Cond_rand(TRUE, x, y) -> y
rand(x, y) -> Cond_rand1(x > 0, x, y)
Cond_rand1(TRUE, x, y) -> rand(x - 1, id_inc(y))
id_inc(x) -> x
id_inc(x) -> x + 1
The set Q consists of the following terms:
random(x0)
Cond_random(TRUE, x0)
rand(x0, x1)
Cond_rand(TRUE, x0, x1)
Cond_rand1(TRUE, x0, x1)
id_inc(x0)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
random(x) -> Cond_random(x >= 0, x)
Cond_random(TRUE, x) -> rand(x, 0)
rand(x, y) -> Cond_rand(x = 0, x, y)
Cond_rand(TRUE, x, y) -> y
rand(x, y) -> Cond_rand1(x > 0, x, y)
Cond_rand1(TRUE, x, y) -> rand(x - 1, id_inc(y))
id_inc(x) -> x
id_inc(x) -> x + 1

The integer pair graph contains the following rules and edges:
(0): RANDOM(x[0]) -> COND_RANDOM(x[0] >= 0, x[0])
(1): COND_RANDOM(TRUE, x[1]) -> RAND(x[1], 0)
(2): RAND(x[2], y[2]) -> COND_RAND(x[2] = 0, x[2], y[2])
(3): RAND(x[3], y[3]) -> COND_RAND1(x[3] > 0, x[3], y[3])
(4): COND_RAND1(TRUE, x[4], y[4]) -> RAND(x[4] - 1, id_inc(y[4]))
(5): COND_RAND1(TRUE, x[5], y[5]) -> ID_INC(y[5])

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1])
   (1) -> (2), if (x[1] ->^* x[2] & 0 ->^* y[2])
   (1) -> (3), if (x[1] ->^* x[3] & 0 ->^* y[3])
   (3) -> (4), if (x[3] > 0  & x[3] ->^* x[4] & y[3] ->^* y[4])
   (3) -> (5), if (x[3] > 0  & x[3] ->^* x[5] & y[3] ->^* y[5])
   (4) -> (2), if (x[4] - 1 ->^* x[2] & id_inc(y[4]) ->^* y[2])
   (4) -> (3), if (x[4] - 1 ->^* x[3] & id_inc(y[4]) ->^* y[3])

The set Q consists of the following terms:
random(x0)
Cond_random(TRUE, x0)
rand(x0, x1)
Cond_rand(TRUE, x0, x1)
Cond_rand1(TRUE, x0, x1)
id_inc(x0)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
id_inc(x) -> x
id_inc(x) -> x + 1

The integer pair graph contains the following rules and edges:
(0): RANDOM(x[0]) -> COND_RANDOM(x[0] >= 0, x[0])
(1): COND_RANDOM(TRUE, x[1]) -> RAND(x[1], 0)
(2): RAND(x[2], y[2]) -> COND_RAND(x[2] = 0, x[2], y[2])
(3): RAND(x[3], y[3]) -> COND_RAND1(x[3] > 0, x[3], y[3])
(4): COND_RAND1(TRUE, x[4], y[4]) -> RAND(x[4] - 1, id_inc(y[4]))
(5): COND_RAND1(TRUE, x[5], y[5]) -> ID_INC(y[5])

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1])
   (1) -> (2), if (x[1] ->^* x[2] & 0 ->^* y[2])
   (1) -> (3), if (x[1] ->^* x[3] & 0 ->^* y[3])
   (3) -> (4), if (x[3] > 0  & x[3] ->^* x[4] & y[3] ->^* y[4])
   (3) -> (5), if (x[3] > 0  & x[3] ->^* x[5] & y[3] ->^* y[5])
   (4) -> (2), if (x[4] - 1 ->^* x[2] & id_inc(y[4]) ->^* y[2])
   (4) -> (3), if (x[4] - 1 ->^* x[3] & id_inc(y[4]) ->^* y[3])

The set Q consists of the following terms:
random(x0)
Cond_random(TRUE, x0)
rand(x0, x1)
Cond_rand(TRUE, x0, x1)
Cond_rand1(TRUE, x0, x1)
id_inc(x0)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
id_inc(x) -> x
id_inc(x) -> x + 1

The integer pair graph contains the following rules and edges:
(4): COND_RAND1(TRUE, x[4], y[4]) -> RAND(x[4] - 1, id_inc(y[4]))
(3): RAND(x[3], y[3]) -> COND_RAND1(x[3] > 0, x[3], y[3])

   (4) -> (3), if (x[4] - 1 ->^* x[3] & id_inc(y[4]) ->^* y[3])
   (3) -> (4), if (x[3] > 0  & x[3] ->^* x[4] & y[3] ->^* y[4])

The set Q consists of the following terms:
random(x0)
Cond_random(TRUE, x0)
rand(x0, x1)
Cond_rand(TRUE, x0, x1)
Cond_rand1(TRUE, x0, x1)
id_inc(x0)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@5e14e673
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_RAND1(TRUE, x[4], y[4]) -> RAND(-(x[4], 1), id_inc(y[4])) the following chains were created:
*We consider the chain RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3]), COND_RAND1(TRUE, x[4], y[4]) -> RAND(-(x[4], 1), id_inc(y[4])), RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3]) which results in the following constraint:

(1)    (>(x[3], 0)=TRUE & x[3]=x[4] & y[3]=y[4] & -(x[4], 1)=x[3]1 & id_inc(y[4])=y[3]1  ==>  COND_RAND1(TRUE, x[4], y[4])_>=_NonInfC & COND_RAND1(TRUE, x[4], y[4])_>=_RAND(-(x[4], 1), id_inc(y[4])) & (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[3], 0)=TRUE  ==>  COND_RAND1(TRUE, x[3], y[3])_>=_NonInfC & COND_RAND1(TRUE, x[3], y[3])_>=_RAND(-(x[3], 1), id_inc(y[3])) & (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[3] + [-1] >= 0  ==>  (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]x[3] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[3] + [-1] >= 0  ==>  (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]x[3] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[3] + [-1] >= 0  ==>  (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]x[3] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[3] + [-1] >= 0  ==>  (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=) & 0 = 0 & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_14] >= 0)








For Pair RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3]) the following chains were created:
*We consider the chain RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3]), COND_RAND1(TRUE, x[4], y[4]) -> RAND(-(x[4], 1), id_inc(y[4])) which results in the following constraint:

(1)    (>(x[3], 0)=TRUE & x[3]=x[4] & y[3]=y[4]  ==>  RAND(x[3], y[3])_>=_NonInfC & RAND(x[3], y[3])_>=_COND_RAND1(>(x[3], 0), x[3], y[3]) & (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[3], 0)=TRUE  ==>  RAND(x[3], y[3])_>=_NonInfC & RAND(x[3], y[3])_>=_COND_RAND1(>(x[3], 0), x[3], y[3]) & (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[3] + [-1] >= 0  ==>  (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[3] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[3] + [-1] >= 0  ==>  (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[3] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[3] + [-1] >= 0  ==>  (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[3] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[3] + [-1] >= 0  ==>  (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=) & 0 = 0 & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[3] >= 0 & [(-1)bso_16] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_RAND1(TRUE, x[4], y[4]) -> RAND(-(x[4], 1), id_inc(y[4]))

*(x[3] + [-1] >= 0  ==>  (U^Increasing(RAND(-(x[4], 1), id_inc(y[4]))), >=) & 0 = 0 & [(-1)bni_13 + (-1)Bound*bni_13] + [bni_13]x[3] >= 0 & 0 = 0 & [1 + (-1)bso_14] >= 0)




*RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3])

*(x[3] + [-1] >= 0  ==>  (U^Increasing(COND_RAND1(>(x[3], 0), x[3], y[3])), >=) & 0 = 0 & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[3] >= 0 & [(-1)bso_16] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = [2]
   POL(FALSE) = 0
   POL(id_inc(x_1)) = x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(COND_RAND1(x_1, x_2, x_3)) = [-1] + x_2
   POL(RAND(x_1, x_2)) = [-1] + x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0


The following pairs are in P_>:


   COND_RAND1(TRUE, x[4], y[4]) -> RAND(-(x[4], 1), id_inc(y[4]))


The following pairs are in P_bound:


   COND_RAND1(TRUE, x[4], y[4]) -> RAND(-(x[4], 1), id_inc(y[4]))
   RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3])


The following pairs are in P_>=:


   RAND(x[3], y[3]) -> COND_RAND1(>(x[3], 0), x[3], y[3])


There are no usable rules.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
id_inc(x) -> x
id_inc(x) -> x + 1

The integer pair graph contains the following rules and edges:
(3): RAND(x[3], y[3]) -> COND_RAND1(x[3] > 0, x[3], y[3])


The set Q consists of the following terms:
random(x0)
Cond_random(TRUE, x0)
rand(x0, x1)
Cond_rand(TRUE, x0, x1)
Cond_rand1(TRUE, x0, x1)
id_inc(x0)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
