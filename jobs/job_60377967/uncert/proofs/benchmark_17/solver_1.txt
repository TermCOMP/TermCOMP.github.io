YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JZnoq.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 186 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) IDP
(9) IDPNonInfProof [SOUND, 120 ms]
(10) IDP
(11) IDependencyGraphProof [EQUIVALENT, 0 ms]
(12) IDP
(13) IDPNonInfProof [SOUND, 0 ms]
(14) IDP
(15) IDependencyGraphProof [EQUIVALENT, 0 ms]
(16) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y, z) -> Cond_eval(x > z, x, y, z)
Cond_eval(TRUE, x, y, z) -> eval(x - 1, y, z)
eval(x, y, z) -> Cond_eval1(y > z && x > z, x, y, z)
Cond_eval1(TRUE, x, y, z) -> eval(x - 1, y, z)
eval(x, y, z) -> Cond_eval2(x > z && z >= x && y > z, x, y, z)
Cond_eval2(TRUE, x, y, z) -> eval(x, y - 1, z)
eval(x, y, z) -> Cond_eval3(y > z && z >= x, x, y, z)
Cond_eval3(TRUE, x, y, z) -> eval(x, y - 1, z)
eval(x, y, z) -> Cond_eval4(x > z && z >= x && z >= y, x, y, z)
Cond_eval4(TRUE, x, y, z) -> eval(x, y, z)
eval(x, y, z) -> Cond_eval5(y > z && z >= x && z >= y, x, y, z)
Cond_eval5(TRUE, x, y, z) -> eval(x, y, z)
The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
eval(x, y, z) -> Cond_eval(x > z, x, y, z)
Cond_eval(TRUE, x, y, z) -> eval(x - 1, y, z)
eval(x, y, z) -> Cond_eval1(y > z && x > z, x, y, z)
Cond_eval1(TRUE, x, y, z) -> eval(x - 1, y, z)
eval(x, y, z) -> Cond_eval2(x > z && z >= x && y > z, x, y, z)
Cond_eval2(TRUE, x, y, z) -> eval(x, y - 1, z)
eval(x, y, z) -> Cond_eval3(y > z && z >= x, x, y, z)
Cond_eval3(TRUE, x, y, z) -> eval(x, y - 1, z)
eval(x, y, z) -> Cond_eval4(x > z && z >= x && z >= y, x, y, z)
Cond_eval4(TRUE, x, y, z) -> eval(x, y, z)
eval(x, y, z) -> Cond_eval5(y > z && z >= x && z >= y, x, y, z)
Cond_eval5(TRUE, x, y, z) -> eval(x, y, z)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] > z[0], x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(y[2] > z[2] && x[2] > z[2], x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3] - 1, y[3], z[3])
(4): EVAL(x[4], y[4], z[4]) -> COND_EVAL2(x[4] > z[4] && z[4] >= x[4] && y[4] > z[4], x[4], y[4], z[4])
(5): COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5] - 1, z[5])
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])
(7): COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], y[7] - 1, z[7])
(8): EVAL(x[8], y[8], z[8]) -> COND_EVAL4(x[8] > z[8] && z[8] >= x[8] && z[8] >= y[8], x[8], y[8], z[8])
(9): COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9])
(10): EVAL(x[10], y[10], z[10]) -> COND_EVAL5(y[10] > z[10] && z[10] >= x[10] && z[10] >= y[10], x[10], y[10], z[10])
(11): COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11])

   (0) -> (1), if (x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (1) -> (4), if (x[1] - 1 ->^* x[4] & y[1] ->^* y[4] & z[1] ->^* z[4])
   (1) -> (6), if (x[1] - 1 ->^* x[6] & y[1] ->^* y[6] & z[1] ->^* z[6])
   (1) -> (8), if (x[1] - 1 ->^* x[8] & y[1] ->^* y[8] & z[1] ->^* z[8])
   (1) -> (10), if (x[1] - 1 ->^* x[10] & y[1] ->^* y[10] & z[1] ->^* z[10])
   (2) -> (3), if (y[2] > z[2] && x[2] > z[2]  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0] & z[3] ->^* z[0])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (3) -> (4), if (x[3] - 1 ->^* x[4] & y[3] ->^* y[4] & z[3] ->^* z[4])
   (3) -> (6), if (x[3] - 1 ->^* x[6] & y[3] ->^* y[6] & z[3] ->^* z[6])
   (3) -> (8), if (x[3] - 1 ->^* x[8] & y[3] ->^* y[8] & z[3] ->^* z[8])
   (3) -> (10), if (x[3] - 1 ->^* x[10] & y[3] ->^* y[10] & z[3] ->^* z[10])
   (4) -> (5), if (x[4] > z[4] && z[4] >= x[4] && y[4] > z[4]  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] - 1 ->^* y[0] & z[5] ->^* z[0])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] - 1 ->^* y[2] & z[5] ->^* z[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] - 1 ->^* y[4] & z[5] ->^* z[4])
   (5) -> (6), if (x[5] ->^* x[6] & y[5] - 1 ->^* y[6] & z[5] ->^* z[6])
   (5) -> (8), if (x[5] ->^* x[8] & y[5] - 1 ->^* y[8] & z[5] ->^* z[8])
   (5) -> (10), if (x[5] ->^* x[10] & y[5] - 1 ->^* y[10] & z[5] ->^* z[10])
   (6) -> (7), if (y[6] > z[6] && z[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7] & z[6] ->^* z[7])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0] & z[7] ->^* z[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2] & z[7] ->^* z[2])
   (7) -> (4), if (x[7] ->^* x[4] & y[7] - 1 ->^* y[4] & z[7] ->^* z[4])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6] & z[7] ->^* z[6])
   (7) -> (8), if (x[7] ->^* x[8] & y[7] - 1 ->^* y[8] & z[7] ->^* z[8])
   (7) -> (10), if (x[7] ->^* x[10] & y[7] - 1 ->^* y[10] & z[7] ->^* z[10])
   (8) -> (9), if (x[8] > z[8] && z[8] >= x[8] && z[8] >= y[8]  & x[8] ->^* x[9] & y[8] ->^* y[9] & z[8] ->^* z[9])
   (9) -> (0), if (x[9] ->^* x[0] & y[9] ->^* y[0] & z[9] ->^* z[0])
   (9) -> (2), if (x[9] ->^* x[2] & y[9] ->^* y[2] & z[9] ->^* z[2])
   (9) -> (4), if (x[9] ->^* x[4] & y[9] ->^* y[4] & z[9] ->^* z[4])
   (9) -> (6), if (x[9] ->^* x[6] & y[9] ->^* y[6] & z[9] ->^* z[6])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] ->^* y[8] & z[9] ->^* z[8])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] ->^* y[10] & z[9] ->^* z[10])
   (10) -> (11), if (y[10] > z[10] && z[10] >= x[10] && z[10] >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11] & z[10] ->^* z[11])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0] & z[11] ->^* z[0])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2] & z[11] ->^* z[2])
   (11) -> (4), if (x[11] ->^* x[4] & y[11] ->^* y[4] & z[11] ->^* z[4])
   (11) -> (6), if (x[11] ->^* x[6] & y[11] ->^* y[6] & z[11] ->^* z[6])
   (11) -> (8), if (x[11] ->^* x[8] & y[11] ->^* y[8] & z[11] ->^* z[8])
   (11) -> (10), if (x[11] ->^* x[10] & y[11] ->^* y[10] & z[11] ->^* z[10])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] > z[0], x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(y[2] > z[2] && x[2] > z[2], x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3] - 1, y[3], z[3])
(4): EVAL(x[4], y[4], z[4]) -> COND_EVAL2(x[4] > z[4] && z[4] >= x[4] && y[4] > z[4], x[4], y[4], z[4])
(5): COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5] - 1, z[5])
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])
(7): COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], y[7] - 1, z[7])
(8): EVAL(x[8], y[8], z[8]) -> COND_EVAL4(x[8] > z[8] && z[8] >= x[8] && z[8] >= y[8], x[8], y[8], z[8])
(9): COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9])
(10): EVAL(x[10], y[10], z[10]) -> COND_EVAL5(y[10] > z[10] && z[10] >= x[10] && z[10] >= y[10], x[10], y[10], z[10])
(11): COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11])

   (0) -> (1), if (x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (1) -> (4), if (x[1] - 1 ->^* x[4] & y[1] ->^* y[4] & z[1] ->^* z[4])
   (1) -> (6), if (x[1] - 1 ->^* x[6] & y[1] ->^* y[6] & z[1] ->^* z[6])
   (1) -> (8), if (x[1] - 1 ->^* x[8] & y[1] ->^* y[8] & z[1] ->^* z[8])
   (1) -> (10), if (x[1] - 1 ->^* x[10] & y[1] ->^* y[10] & z[1] ->^* z[10])
   (2) -> (3), if (y[2] > z[2] && x[2] > z[2]  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0] & z[3] ->^* z[0])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (3) -> (4), if (x[3] - 1 ->^* x[4] & y[3] ->^* y[4] & z[3] ->^* z[4])
   (3) -> (6), if (x[3] - 1 ->^* x[6] & y[3] ->^* y[6] & z[3] ->^* z[6])
   (3) -> (8), if (x[3] - 1 ->^* x[8] & y[3] ->^* y[8] & z[3] ->^* z[8])
   (3) -> (10), if (x[3] - 1 ->^* x[10] & y[3] ->^* y[10] & z[3] ->^* z[10])
   (4) -> (5), if (x[4] > z[4] && z[4] >= x[4] && y[4] > z[4]  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] - 1 ->^* y[0] & z[5] ->^* z[0])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] - 1 ->^* y[2] & z[5] ->^* z[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] - 1 ->^* y[4] & z[5] ->^* z[4])
   (5) -> (6), if (x[5] ->^* x[6] & y[5] - 1 ->^* y[6] & z[5] ->^* z[6])
   (5) -> (8), if (x[5] ->^* x[8] & y[5] - 1 ->^* y[8] & z[5] ->^* z[8])
   (5) -> (10), if (x[5] ->^* x[10] & y[5] - 1 ->^* y[10] & z[5] ->^* z[10])
   (6) -> (7), if (y[6] > z[6] && z[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7] & z[6] ->^* z[7])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0] & z[7] ->^* z[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2] & z[7] ->^* z[2])
   (7) -> (4), if (x[7] ->^* x[4] & y[7] - 1 ->^* y[4] & z[7] ->^* z[4])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6] & z[7] ->^* z[6])
   (7) -> (8), if (x[7] ->^* x[8] & y[7] - 1 ->^* y[8] & z[7] ->^* z[8])
   (7) -> (10), if (x[7] ->^* x[10] & y[7] - 1 ->^* y[10] & z[7] ->^* z[10])
   (8) -> (9), if (x[8] > z[8] && z[8] >= x[8] && z[8] >= y[8]  & x[8] ->^* x[9] & y[8] ->^* y[9] & z[8] ->^* z[9])
   (9) -> (0), if (x[9] ->^* x[0] & y[9] ->^* y[0] & z[9] ->^* z[0])
   (9) -> (2), if (x[9] ->^* x[2] & y[9] ->^* y[2] & z[9] ->^* z[2])
   (9) -> (4), if (x[9] ->^* x[4] & y[9] ->^* y[4] & z[9] ->^* z[4])
   (9) -> (6), if (x[9] ->^* x[6] & y[9] ->^* y[6] & z[9] ->^* z[6])
   (9) -> (8), if (x[9] ->^* x[8] & y[9] ->^* y[8] & z[9] ->^* z[8])
   (9) -> (10), if (x[9] ->^* x[10] & y[9] ->^* y[10] & z[9] ->^* z[10])
   (10) -> (11), if (y[10] > z[10] && z[10] >= x[10] && z[10] >= y[10]  & x[10] ->^* x[11] & y[10] ->^* y[11] & z[10] ->^* z[11])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0] & z[11] ->^* z[0])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2] & z[11] ->^* z[2])
   (11) -> (4), if (x[11] ->^* x[4] & y[11] ->^* y[4] & z[11] ->^* z[4])
   (11) -> (6), if (x[11] ->^* x[6] & y[11] ->^* y[6] & z[11] ->^* z[6])
   (11) -> (8), if (x[11] ->^* x[8] & y[11] ->^* y[8] & z[11] ->^* z[8])
   (11) -> (10), if (x[11] ->^* x[10] & y[11] ->^* y[10] & z[11] ->^* z[10])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@274152c8
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y, z) -> COND_EVAL(>(x, z), x, y, z) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) which results in the following constraint:

(1)    (>(x[0], z[0])=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], z[0])=TRUE  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & [(-1)bni_40 + (-1)Bound*bni_40] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & [(-1)bni_40 + (-1)Bound*bni_40] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & [(-1)bni_40 + (-1)Bound*bni_40] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)bni_40 + (-1)Bound*bni_40] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [bni_40 + (-1)Bound*bni_40] + [(2)bni_40]z[0] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [bni_40 + (-1)Bound*bni_40] + [(-2)bni_40]z[0] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [bni_40 + (-1)Bound*bni_40] + [(2)bni_40]z[0] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)








For Pair COND_EVAL(TRUE, x, y, z) -> EVAL(-(x, 1), y, z) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) which results in the following constraint:

(1)    (>(x[0], z[0])=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rule (III) which results in the following new constraint:

(2)    (>(x[0], z[0])=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_42 + (-1)Bound*bni_42] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_42 + (-1)Bound*bni_42] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_42 + (-1)Bound*bni_42] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)bni_42 + (-1)Bound*bni_42] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [bni_42 + (-1)Bound*bni_42] + [(2)bni_42]z[0] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [bni_42 + (-1)Bound*bni_42] + [(-2)bni_42]z[0] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [bni_42 + (-1)Bound*bni_42] + [(2)bni_42]z[0] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)








For Pair EVAL(x, y, z) -> COND_EVAL1(&&(>(y, z), >(x, z)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]) which results in the following constraint:

(1)    (&&(>(y[2], z[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], z[2])=TRUE & >(x[2], z[2])=TRUE  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)

(9)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(-2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)








For Pair COND_EVAL1(TRUE, x, y, z) -> EVAL(-(x, 1), y, z) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]) which results in the following constraint:

(1)    (&&(>(y[2], z[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(-(x[3], 1), y[3], z[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], z[2])=TRUE & >(x[2], z[2])=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(-(x[2], 1), y[2], z[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(-2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)

(9)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)








For Pair EVAL(x, y, z) -> COND_EVAL2(&&(&&(>(x, z), >=(z, x)), >(y, z)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4]), COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], -(y[5], 1), z[5]) which results in the following constraint:

(1)    (&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4]))=TRUE & x[4]=x[5] & y[4]=y[5] & z[4]=z[5]  ==>  EVAL(x[4], y[4], z[4])_>=_NonInfC & EVAL(x[4], y[4], z[4])_>=_COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4]) & (U^Increasing(COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], z[4])=TRUE & >(x[4], z[4])=TRUE & >=(z[4], x[4])=TRUE  ==>  EVAL(x[4], y[4], z[4])_>=_NonInfC & EVAL(x[4], y[4], z[4])_>=_COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4]) & (U^Increasing(COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] + [-1]z[4] >= 0 & x[4] + [-1] + [-1]z[4] >= 0 & z[4] + [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])), >=) & [(-1)bni_48 + (-1)Bound*bni_48] + [(2)bni_48]x[4] >= 0 & [(-1)bso_49] + z[4] + y[4] + [3]x[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] + [-1]z[4] >= 0 & x[4] + [-1] + [-1]z[4] >= 0 & z[4] + [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])), >=) & [(-1)bni_48 + (-1)Bound*bni_48] + [(2)bni_48]x[4] >= 0 & [(-1)bso_49] + z[4] + y[4] + [3]x[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] + [-1]z[4] >= 0 & x[4] + [-1] + [-1]z[4] >= 0 & z[4] + [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])), >=) & [(-1)bni_48 + (-1)Bound*bni_48] + [(2)bni_48]x[4] >= 0 & [(-1)bso_49] + z[4] + y[4] + [3]x[4] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL2(TRUE, x, y, z) -> EVAL(x, -(y, 1), z) the following chains were created:
*We consider the chain EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4]), COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], -(y[5], 1), z[5]) which results in the following constraint:

(1)    (&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4]))=TRUE & x[4]=x[5] & y[4]=y[5] & z[4]=z[5]  ==>  COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], -(y[5], 1), z[5]) & (U^Increasing(EVAL(x[5], -(y[5], 1), z[5])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[4], z[4])=TRUE & >(x[4], z[4])=TRUE & >=(z[4], x[4])=TRUE  ==>  COND_EVAL2(TRUE, x[4], y[4], z[4])_>=_NonInfC & COND_EVAL2(TRUE, x[4], y[4], z[4])_>=_EVAL(x[4], -(y[4], 1), z[4]) & (U^Increasing(EVAL(x[5], -(y[5], 1), z[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1] + [-1]z[4] >= 0 & x[4] + [-1] + [-1]z[4] >= 0 & z[4] + [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(x[5], -(y[5], 1), z[5])), >=) & [(-1)bni_50 + (-1)Bound*bni_50] + [(-1)bni_50]z[4] + [(-1)bni_50]y[4] + [(-1)bni_50]x[4] >= 0 & [(-1)bso_51] + [-1]z[4] + [-1]y[4] + [-3]x[4] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1] + [-1]z[4] >= 0 & x[4] + [-1] + [-1]z[4] >= 0 & z[4] + [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(x[5], -(y[5], 1), z[5])), >=) & [(-1)bni_50 + (-1)Bound*bni_50] + [(-1)bni_50]z[4] + [(-1)bni_50]y[4] + [(-1)bni_50]x[4] >= 0 & [(-1)bso_51] + [-1]z[4] + [-1]y[4] + [-3]x[4] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1] + [-1]z[4] >= 0 & x[4] + [-1] + [-1]z[4] >= 0 & z[4] + [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(x[5], -(y[5], 1), z[5])), >=) & [(-1)bni_50 + (-1)Bound*bni_50] + [(-1)bni_50]z[4] + [(-1)bni_50]y[4] + [(-1)bni_50]x[4] >= 0 & [(-1)bso_51] + [-1]z[4] + [-1]y[4] + [-3]x[4] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair EVAL(x, y, z) -> COND_EVAL3(&&(>(y, z), >=(z, x)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7]  ==>  EVAL(x[6], y[6], z[6])_>=_NonInfC & EVAL(x[6], y[6], z[6])_>=_COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  EVAL(x[6], y[6], z[6])_>=_NonInfC & EVAL(x[6], y[6], z[6])_>=_COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(-2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)








For Pair COND_EVAL3(TRUE, x, y, z) -> EVAL(x, -(y, 1), z) the following chains were created:
*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7]  ==>  COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_EVAL(x[7], -(y[7], 1), z[7]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_EVAL(x[6], -(y[6], 1), z[6]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(-2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)








For Pair EVAL(x, y, z) -> COND_EVAL4(&&(&&(>(x, z), >=(z, x)), >=(z, y)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[8], y[8], z[8]) -> COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8]), COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]) which results in the following constraint:

(1)    (&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8]))=TRUE & x[8]=x[9] & y[8]=y[9] & z[8]=z[9]  ==>  EVAL(x[8], y[8], z[8])_>=_NonInfC & EVAL(x[8], y[8], z[8])_>=_COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8]) & (U^Increasing(COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(z[8], y[8])=TRUE & >(x[8], z[8])=TRUE & >=(z[8], x[8])=TRUE  ==>  EVAL(x[8], y[8], z[8])_>=_NonInfC & EVAL(x[8], y[8], z[8])_>=_COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8]) & (U^Increasing(COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (z[8] + [-1]y[8] >= 0 & x[8] + [-1] + [-1]z[8] >= 0 & z[8] + [-1]x[8] >= 0  ==>  (U^Increasing(COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])), >=) & [(-1)bni_56 + (-1)Bound*bni_56] + [(2)bni_56]x[8] >= 0 & [-1 + (-1)bso_57] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (z[8] + [-1]y[8] >= 0 & x[8] + [-1] + [-1]z[8] >= 0 & z[8] + [-1]x[8] >= 0  ==>  (U^Increasing(COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])), >=) & [(-1)bni_56 + (-1)Bound*bni_56] + [(2)bni_56]x[8] >= 0 & [-1 + (-1)bso_57] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (z[8] + [-1]y[8] >= 0 & x[8] + [-1] + [-1]z[8] >= 0 & z[8] + [-1]x[8] >= 0  ==>  (U^Increasing(COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])), >=) & [(-1)bni_56 + (-1)Bound*bni_56] + [(2)bni_56]x[8] >= 0 & [-1 + (-1)bso_57] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL4(TRUE, x, y, z) -> EVAL(x, y, z) the following chains were created:
*We consider the chain COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) which results in the following constraint:

(1)    (x[9]=x[0] & y[9]=y[0] & z[9]=z[0]  ==>  COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (x[9]=x[2] & y[9]=y[2] & z[9]=z[2]  ==>  COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]), EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4]) which results in the following constraint:

(1)    (x[9]=x[4] & y[9]=y[4] & z[9]=z[4]  ==>  COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]), EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) which results in the following constraint:

(1)    (x[9]=x[6] & y[9]=y[6] & z[9]=z[6]  ==>  COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]), EVAL(x[8], y[8], z[8]) -> COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8]) which results in the following constraint:

(1)    (x[9]=x[8] & y[9]=y[8] & z[9]=z[8]  ==>  COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)




*We consider the chain COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9]), EVAL(x[10], y[10], z[10]) -> COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10]) which results in the following constraint:

(1)    (x[9]=x[10] & y[9]=y[10] & z[9]=z[10]  ==>  COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_NonInfC & COND_EVAL4(TRUE, x[9], y[9], z[9])_>=_EVAL(x[9], y[9], z[9]) & (U^Increasing(EVAL(x[9], y[9], z[9])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)








For Pair EVAL(x, y, z) -> COND_EVAL5(&&(&&(>(y, z), >=(z, x)), >=(z, y)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[10], y[10], z[10]) -> COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10]), COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]) which results in the following constraint:

(1)    (&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10]))=TRUE & x[10]=x[11] & y[10]=y[11] & z[10]=z[11]  ==>  EVAL(x[10], y[10], z[10])_>=_NonInfC & EVAL(x[10], y[10], z[10])_>=_COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10]) & (U^Increasing(COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(z[10], y[10])=TRUE & >(y[10], z[10])=TRUE & >=(z[10], x[10])=TRUE  ==>  EVAL(x[10], y[10], z[10])_>=_NonInfC & EVAL(x[10], y[10], z[10])_>=_COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10]) & (U^Increasing(COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (z[10] + [-1]y[10] >= 0 & y[10] + [-1] + [-1]z[10] >= 0 & z[10] + [-1]x[10] >= 0  ==>  (U^Increasing(COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])), >=) & [(-1)bni_60 + (-1)Bound*bni_60] + [(2)bni_60]x[10] >= 0 & [-1 + (-1)bso_61] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (z[10] + [-1]y[10] >= 0 & y[10] + [-1] + [-1]z[10] >= 0 & z[10] + [-1]x[10] >= 0  ==>  (U^Increasing(COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])), >=) & [(-1)bni_60 + (-1)Bound*bni_60] + [(2)bni_60]x[10] >= 0 & [-1 + (-1)bso_61] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (z[10] + [-1]y[10] >= 0 & y[10] + [-1] + [-1]z[10] >= 0 & z[10] + [-1]x[10] >= 0  ==>  (U^Increasing(COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])), >=) & [(-1)bni_60 + (-1)Bound*bni_60] + [(2)bni_60]x[10] >= 0 & [-1 + (-1)bso_61] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL5(TRUE, x, y, z) -> EVAL(x, y, z) the following chains were created:
*We consider the chain COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) which results in the following constraint:

(1)    (x[11]=x[0] & y[11]=y[0] & z[11]=z[0]  ==>  COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (x[11]=x[2] & y[11]=y[2] & z[11]=z[2]  ==>  COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]), EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4]) which results in the following constraint:

(1)    (x[11]=x[4] & y[11]=y[4] & z[11]=z[4]  ==>  COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]), EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) which results in the following constraint:

(1)    (x[11]=x[6] & y[11]=y[6] & z[11]=z[6]  ==>  COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]), EVAL(x[8], y[8], z[8]) -> COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8]) which results in the following constraint:

(1)    (x[11]=x[8] & y[11]=y[8] & z[11]=z[8]  ==>  COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)




*We consider the chain COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11]), EVAL(x[10], y[10], z[10]) -> COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10]) which results in the following constraint:

(1)    (x[11]=x[10] & y[11]=y[10] & z[11]=z[10]  ==>  COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_NonInfC & COND_EVAL5(TRUE, x[11], y[11], z[11])_>=_EVAL(x[11], y[11], z[11]) & (U^Increasing(EVAL(x[11], y[11], z[11])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y, z) -> COND_EVAL(>(x, z), x, y, z)

*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [bni_40 + (-1)Bound*bni_40] + [(-2)bni_40]z[0] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [bni_40 + (-1)Bound*bni_40] + [(2)bni_40]z[0] + [(2)bni_40]x[0] >= 0 & [(-1)bso_41] >= 0)




*COND_EVAL(TRUE, x, y, z) -> EVAL(-(x, 1), y, z)

*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [bni_42 + (-1)Bound*bni_42] + [(-2)bni_42]z[0] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [bni_42 + (-1)Bound*bni_42] + [(2)bni_42]z[0] + [(2)bni_42]x[0] >= 0 & [2 + (-1)bso_43] >= 0)




*EVAL(x, y, z) -> COND_EVAL1(&&(>(y, z), >(x, z)), x, y, z)

*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_44 + (-1)Bound*bni_44] + [(-2)bni_44]x[2] >= 0 & [(-1)bso_45] >= 0)




*COND_EVAL1(TRUE, x, y, z) -> EVAL(-(x, 1), y, z)

*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(-2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_46 + (-1)Bound*bni_46] + [(2)bni_46]x[2] >= 0 & [2 + (-1)bso_47] >= 0)




*EVAL(x, y, z) -> COND_EVAL2(&&(&&(>(x, z), >=(z, x)), >(y, z)), x, y, z)




*COND_EVAL2(TRUE, x, y, z) -> EVAL(x, -(y, 1), z)




*EVAL(x, y, z) -> COND_EVAL3(&&(>(y, z), >=(z, x)), x, y, z)

*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_52 + (-1)Bound*bni_52] + [(-2)bni_52]x[6] >= 0 & [(-1)bso_53] >= 0)




*COND_EVAL3(TRUE, x, y, z) -> EVAL(x, -(y, 1), z)

*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(-2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_54 + (-1)Bound*bni_54] + [(2)bni_54]x[6] >= 0 & [(-1)bso_55] >= 0)




*EVAL(x, y, z) -> COND_EVAL4(&&(&&(>(x, z), >=(z, x)), >=(z, y)), x, y, z)




*COND_EVAL4(TRUE, x, y, z) -> EVAL(x, y, z)

*((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)


*((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)


*((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)


*((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)


*((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)


*((U^Increasing(EVAL(x[9], y[9], z[9])), >=) & [bni_58] = 0 & [1 + (-1)bso_59] >= 0)




*EVAL(x, y, z) -> COND_EVAL5(&&(&&(>(y, z), >=(z, x)), >=(z, y)), x, y, z)




*COND_EVAL5(TRUE, x, y, z) -> EVAL(x, y, z)

*((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)


*((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)


*((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)


*((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)


*((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)


*((U^Increasing(EVAL(x[11], y[11], z[11])), >=) & [bni_62] = 0 & [1 + (-1)bso_63] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(EVAL(x_1, x_2, x_3)) = [-1] + [2]x_1
   POL(COND_EVAL(x_1, x_2, x_3, x_4)) = [-1] + [2]x_2
   POL(>(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_EVAL1(x_1, x_2, x_3, x_4)) = [-1] + [2]x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(COND_EVAL2(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + [-1]x_3 + [-1]x_2 + [-1]x_1
   POL(>=(x_1, x_2)) = [-1]
   POL(COND_EVAL3(x_1, x_2, x_3, x_4)) = [-1] + [2]x_2 + [-1]x_1
   POL(COND_EVAL4(x_1, x_2, x_3, x_4)) = [2]x_2 + [2]x_1
   POL(COND_EVAL5(x_1, x_2, x_3, x_4)) = [2]x_2 + [2]x_1


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])
   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3])
   EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])
   COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], -(y[5], 1), z[5])
   EVAL(x[8], y[8], z[8]) -> COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])
   COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9])
   EVAL(x[10], y[10], z[10]) -> COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])
   COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11])


The following pairs are in P_bound:


   EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(>(x[4], z[4]), >=(z[4], x[4])), >(y[4], z[4])), x[4], y[4], z[4])
   COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], -(y[5], 1), z[5])
   EVAL(x[8], y[8], z[8]) -> COND_EVAL4(&&(&&(>(x[8], z[8]), >=(z[8], x[8])), >=(z[8], y[8])), x[8], y[8], z[8])
   EVAL(x[10], y[10], z[10]) -> COND_EVAL5(&&(&&(>(y[10], z[10]), >=(z[10], x[10])), >=(z[10], y[10])), x[10], y[10], z[10])


The following pairs are in P_>=:


   EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])
   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])
   EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])
   COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] > z[0], x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(y[2] > z[2] && x[2] > z[2], x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3] - 1, y[3], z[3])
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])
(7): COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], y[7] - 1, z[7])
(9): COND_EVAL4(TRUE, x[9], y[9], z[9]) -> EVAL(x[9], y[9], z[9])
(11): COND_EVAL5(TRUE, x[11], y[11], z[11]) -> EVAL(x[11], y[11], z[11])

   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0] & z[3] ->^* z[0])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0] & z[7] ->^* z[0])
   (9) -> (0), if (x[9] ->^* x[0] & y[9] ->^* y[0] & z[9] ->^* z[0])
   (11) -> (0), if (x[11] ->^* x[0] & y[11] ->^* y[0] & z[11] ->^* z[0])
   (0) -> (1), if (x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2] & z[7] ->^* z[2])
   (9) -> (2), if (x[9] ->^* x[2] & y[9] ->^* y[2] & z[9] ->^* z[2])
   (11) -> (2), if (x[11] ->^* x[2] & y[11] ->^* y[2] & z[11] ->^* z[2])
   (2) -> (3), if (y[2] > z[2] && x[2] > z[2]  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (1) -> (6), if (x[1] - 1 ->^* x[6] & y[1] ->^* y[6] & z[1] ->^* z[6])
   (3) -> (6), if (x[3] - 1 ->^* x[6] & y[3] ->^* y[6] & z[3] ->^* z[6])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6] & z[7] ->^* z[6])
   (9) -> (6), if (x[9] ->^* x[6] & y[9] ->^* y[6] & z[9] ->^* z[6])
   (11) -> (6), if (x[11] ->^* x[6] & y[11] ->^* y[6] & z[11] ->^* z[6])
   (6) -> (7), if (y[6] > z[6] && z[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7] & z[6] ->^* z[7])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(7): COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], y[7] - 1, z[7])
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3] - 1, y[3], z[3])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(y[2] > z[2] && x[2] > z[2], x[2], y[2], z[2])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] > z[0], x[0], y[0], z[0])

   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0] & z[3] ->^* z[0])
   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0] & z[7] ->^* z[0])
   (0) -> (1), if (x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2] & z[3] ->^* z[2])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2] & z[7] ->^* z[2])
   (2) -> (3), if (y[2] > z[2] && x[2] > z[2]  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (1) -> (6), if (x[1] - 1 ->^* x[6] & y[1] ->^* y[6] & z[1] ->^* z[6])
   (3) -> (6), if (x[3] - 1 ->^* x[6] & y[3] ->^* y[6] & z[3] ->^* z[6])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6] & z[7] ->^* z[6])
   (6) -> (7), if (y[6] > z[6] && z[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7] & z[6] ->^* z[7])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(9) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@274152c8
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]) the following chains were created:
*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7] & x[7]=x[0] & -(y[7], 1)=y[0] & z[7]=z[0]  ==>  COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_EVAL(x[7], -(y[7], 1), z[7]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_EVAL(x[6], -(y[6], 1), z[6]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)




*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7] & x[7]=x[2] & -(y[7], 1)=y[2] & z[7]=z[2]  ==>  COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_EVAL(x[7], -(y[7], 1), z[7]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_EVAL(x[6], -(y[6], 1), z[6]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)




*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]), EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7] & x[7]=x[6]1 & -(y[7], 1)=y[6]1 & z[7]=z[6]1  ==>  COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_EVAL(x[7], -(y[7], 1), z[7]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_EVAL(x[6], -(y[6], 1), z[6]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] + [bni_25]x[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)








For Pair EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) the following chains were created:
*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7]  ==>  EVAL(x[6], y[6], z[6])_>=_NonInfC & EVAL(x[6], y[6], z[6])_>=_COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  EVAL(x[6], y[6], z[6])_>=_NonInfC & EVAL(x[6], y[6], z[6])_>=_COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] + [bni_27]x[6] >= 0 & [(-1)bso_28] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] + [bni_27]x[6] >= 0 & [(-1)bso_28] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] + [bni_27]x[6] >= 0 & [(-1)bso_28] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] + [bni_27]x[6] >= 0 & [(-1)bso_28] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] >= 0 & [(-1)bso_28] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] >= 0 & [(-1)bso_28] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] >= 0 & [(-1)bso_28] >= 0)








For Pair COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(>(y[2], z[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & -(x[3], 1)=x[0] & y[3]=y[0] & z[3]=z[0]  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(-(x[3], 1), y[3], z[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], z[2])=TRUE & >(x[2], z[2])=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(-(x[2], 1), y[2], z[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)

(9)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)




*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(>(y[2], z[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & -(x[3], 1)=x[2]1 & y[3]=y[2]1 & z[3]=z[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(-(x[3], 1), y[3], z[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], z[2])=TRUE & >(x[2], z[2])=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(-(x[2], 1), y[2], z[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)

(9)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)




*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]), EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) which results in the following constraint:

(1)    (&&(>(y[2], z[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & -(x[3], 1)=x[6] & y[3]=y[6] & z[3]=z[6]  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(-(x[3], 1), y[3], z[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], z[2])=TRUE & >(x[2], z[2])=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(-(x[2], 1), y[2], z[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)

(9)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)








For Pair EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3]) which results in the following constraint:

(1)    (&&(>(y[2], z[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], z[2])=TRUE & >(x[2], z[2])=TRUE  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]z[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_31] + [bni_31]z[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_31] + [bni_31]z[2] >= 0 & [(-1)bso_32] >= 0)

(9)    (y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_31] + [bni_31]z[2] >= 0 & [(-1)bso_32] >= 0)








For Pair COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) which results in the following constraint:

(1)    (>(x[0], z[0])=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1 & z[1]=z[0]1  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], z[0])=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)




*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (>(x[0], z[0])=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[2] & y[1]=y[2] & z[1]=z[2]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], z[0])=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)




*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) which results in the following constraint:

(1)    (>(x[0], z[0])=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[6] & y[1]=y[6] & z[1]=z[6]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], z[0])=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[0] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)








For Pair EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) which results in the following constraint:

(1)    (>(x[0], z[0])=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], z[0])=TRUE  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]z[0] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]z[0] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]z[0] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]z[0] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7])

*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[6] >= 0 & [(-1)bso_26] >= 0)




*EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])

*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] >= 0 & [(-1)bso_28] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[6] >= 0 & [(-1)bso_28] >= 0)




*COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3])

*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3], z[3])), >=) & [(-1)Bound*bni_29] + [bni_29]z[2] >= 0 & [1 + (-1)bso_30] >= 0)




*EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])

*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_31] + [bni_31]z[2] >= 0 & [(-1)bso_32] >= 0)


*(y[2] >= 0 & z[2] >= 0 & x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_31] + [bni_31]z[2] >= 0 & [(-1)bso_32] >= 0)




*COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])

*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & 0 = 0 & [(-1)Bound*bni_33] + [bni_33]x[0] >= 0 & [1 + (-1)bso_34] >= 0)




*EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])

*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)


*(x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)Bound*bni_35] + [bni_35]x[0] >= 0 & [(-1)bso_36] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(COND_EVAL3(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2 + [-1]x_1
   POL(EVAL(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]
   POL(COND_EVAL1(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2 + [-1]x_1
   POL(COND_EVAL(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2


The following pairs are in P_>:


   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3])
   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])


The following pairs are in P_bound:


   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(-(x[3], 1), y[3], z[3])
   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])
   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])
   EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])


The following pairs are in P_>=:


   COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7])
   EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])
   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(>(y[2], z[2]), >(x[2], z[2])), x[2], y[2], z[2])
   EVAL(x[0], y[0], z[0]) -> COND_EVAL(>(x[0], z[0]), x[0], y[0], z[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(7): COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], y[7] - 1, z[7])
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(y[2] > z[2] && x[2] > z[2], x[2], y[2], z[2])
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] > z[0], x[0], y[0], z[0])

   (7) -> (0), if (x[7] ->^* x[0] & y[7] - 1 ->^* y[0] & z[7] ->^* z[0])
   (7) -> (2), if (x[7] ->^* x[2] & y[7] - 1 ->^* y[2] & z[7] ->^* z[2])
   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6] & z[7] ->^* z[6])
   (6) -> (7), if (y[6] > z[6] && z[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7] & z[6] ->^* z[7])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])
(7): COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], y[7] - 1, z[7])

   (7) -> (6), if (x[7] ->^* x[6] & y[7] - 1 ->^* y[6] & z[7] ->^* z[6])
   (6) -> (7), if (y[6] > z[6] && z[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7] & z[6] ->^* z[7])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(13) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@274152c8
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) the following chains were created:
*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7]  ==>  EVAL(x[6], y[6], z[6])_>=_NonInfC & EVAL(x[6], y[6], z[6])_>=_COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  EVAL(x[6], y[6], z[6])_>=_NonInfC & EVAL(x[6], y[6], z[6])_>=_COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[6] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[6] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[6] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)








For Pair COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]) the following chains were created:
*We consider the chain EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]), COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7]), EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6]) which results in the following constraint:

(1)    (&&(>(y[6], z[6]), >=(z[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7] & z[6]=z[7] & x[7]=x[6]1 & -(y[7], 1)=y[6]1 & z[7]=z[6]1  ==>  COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7], z[7])_>=_EVAL(x[7], -(y[7], 1), z[7]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], z[6])=TRUE & >=(z[6], x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6], z[6])_>=_EVAL(x[6], -(y[6], 1), z[6]) & (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[6] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[6] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]z[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[6] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & z[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)Bound*bni_17] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & z[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)Bound*bni_17] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)Bound*bni_17] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)

(9)    (y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)Bound*bni_17] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])

*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])), >=) & [(-1)Bound*bni_15] + [bni_15]y[6] >= 0 & [(-1)bso_16] >= 0)




*COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7])

*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)Bound*bni_17] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)


*(y[6] >= 0 & z[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(x[7], -(y[7], 1), z[7])), >=) & [(-1)Bound*bni_17] + [bni_17]y[6] >= 0 & [1 + (-1)bso_18] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [2]
   POL(EVAL(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2
   POL(COND_EVAL3(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_3 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]


The following pairs are in P_>:


   COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7])


The following pairs are in P_bound:


   EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])
   COND_EVAL3(TRUE, x[7], y[7], z[7]) -> EVAL(x[7], -(y[7], 1), z[7])


The following pairs are in P_>=:


   EVAL(x[6], y[6], z[6]) -> COND_EVAL3(&&(>(y[6], z[6]), >=(z[6], x[6])), x[6], y[6], z[6])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(6): EVAL(x[6], y[6], z[6]) -> COND_EVAL3(y[6] > z[6] && z[6] >= x[6], x[6], y[6], z[6])


The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)
Cond_eval3(TRUE, x0, x1, x2)
Cond_eval4(TRUE, x0, x1, x2)
Cond_eval5(TRUE, x0, x1, x2)

----------------------------------------

(15) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(16)
TRUE
