YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/AZVXO.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 109 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
sqrt(x) -> f(x, 0, 1, 1)
f(x, z, u, w) -> Cond_f(x >= w && u >= 0, x, z, u, w)
Cond_f(TRUE, x, z, u, w) -> f(x, z + 1, u + 2, w + u + 2)
f(x, z, u, w) -> Cond_f1(w > x, x, z, u, w)
Cond_f1(TRUE, x, z, u, w) -> z
The set Q consists of the following terms:
sqrt(x0)
f(x0, x1, x2, x3)
Cond_f(TRUE, x0, x1, x2, x3)
Cond_f1(TRUE, x0, x1, x2, x3)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
sqrt(x) -> f(x, 0, 1, 1)
f(x, z, u, w) -> Cond_f(x >= w && u >= 0, x, z, u, w)
Cond_f(TRUE, x, z, u, w) -> f(x, z + 1, u + 2, w + u + 2)
f(x, z, u, w) -> Cond_f1(w > x, x, z, u, w)
Cond_f1(TRUE, x, z, u, w) -> z

The integer pair graph contains the following rules and edges:
(0): SQRT(x[0]) -> F(x[0], 0, 1, 1)
(1): F(x[1], z[1], u[1], w[1]) -> COND_F(x[1] >= w[1] && u[1] >= 0, x[1], z[1], u[1], w[1])
(2): COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], z[2] + 1, u[2] + 2, w[2] + u[2] + 2)
(3): F(x[3], z[3], u[3], w[3]) -> COND_F1(w[3] > x[3], x[3], z[3], u[3], w[3])

   (0) -> (1), if (x[0] ->^* x[1] & 0 ->^* z[1] & 1 ->^* u[1] & 1 ->^* w[1])
   (0) -> (3), if (x[0] ->^* x[3] & 0 ->^* z[3] & 1 ->^* u[3] & 1 ->^* w[3])
   (1) -> (2), if (x[1] >= w[1] && u[1] >= 0  & x[1] ->^* x[2] & z[1] ->^* z[2] & u[1] ->^* u[2] & w[1] ->^* w[2])
   (2) -> (1), if (x[2] ->^* x[1] & z[2] + 1 ->^* z[1] & u[2] + 2 ->^* u[1] & w[2] + u[2] + 2 ->^* w[1])
   (2) -> (3), if (x[2] ->^* x[3] & z[2] + 1 ->^* z[3] & u[2] + 2 ->^* u[3] & w[2] + u[2] + 2 ->^* w[3])

The set Q consists of the following terms:
sqrt(x0)
f(x0, x1, x2, x3)
Cond_f(TRUE, x0, x1, x2, x3)
Cond_f1(TRUE, x0, x1, x2, x3)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): SQRT(x[0]) -> F(x[0], 0, 1, 1)
(1): F(x[1], z[1], u[1], w[1]) -> COND_F(x[1] >= w[1] && u[1] >= 0, x[1], z[1], u[1], w[1])
(2): COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], z[2] + 1, u[2] + 2, w[2] + u[2] + 2)
(3): F(x[3], z[3], u[3], w[3]) -> COND_F1(w[3] > x[3], x[3], z[3], u[3], w[3])

   (0) -> (1), if (x[0] ->^* x[1] & 0 ->^* z[1] & 1 ->^* u[1] & 1 ->^* w[1])
   (0) -> (3), if (x[0] ->^* x[3] & 0 ->^* z[3] & 1 ->^* u[3] & 1 ->^* w[3])
   (1) -> (2), if (x[1] >= w[1] && u[1] >= 0  & x[1] ->^* x[2] & z[1] ->^* z[2] & u[1] ->^* u[2] & w[1] ->^* w[2])
   (2) -> (1), if (x[2] ->^* x[1] & z[2] + 1 ->^* z[1] & u[2] + 2 ->^* u[1] & w[2] + u[2] + 2 ->^* w[1])
   (2) -> (3), if (x[2] ->^* x[3] & z[2] + 1 ->^* z[3] & u[2] + 2 ->^* u[3] & w[2] + u[2] + 2 ->^* w[3])

The set Q consists of the following terms:
sqrt(x0)
f(x0, x1, x2, x3)
Cond_f(TRUE, x0, x1, x2, x3)
Cond_f1(TRUE, x0, x1, x2, x3)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(2): COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], z[2] + 1, u[2] + 2, w[2] + u[2] + 2)
(1): F(x[1], z[1], u[1], w[1]) -> COND_F(x[1] >= w[1] && u[1] >= 0, x[1], z[1], u[1], w[1])

   (2) -> (1), if (x[2] ->^* x[1] & z[2] + 1 ->^* z[1] & u[2] + 2 ->^* u[1] & w[2] + u[2] + 2 ->^* w[1])
   (1) -> (2), if (x[1] >= w[1] && u[1] >= 0  & x[1] ->^* x[2] & z[1] ->^* z[2] & u[1] ->^* u[2] & w[1] ->^* w[2])

The set Q consists of the following terms:
sqrt(x0)
f(x0, x1, x2, x3)
Cond_f(TRUE, x0, x1, x2, x3)
Cond_f1(TRUE, x0, x1, x2, x3)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@4ed2fb66
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2)) the following chains were created:
*We consider the chain F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1]), COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2)), F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1]) which results in the following constraint:

(1)    (&&(>=(x[1], w[1]), >=(u[1], 0))=TRUE & x[1]=x[2] & z[1]=z[2] & u[1]=u[2] & w[1]=w[2] & x[2]=x[1]1 & +(z[2], 1)=z[1]1 & +(u[2], 2)=u[1]1 & +(+(w[2], u[2]), 2)=w[1]1  ==>  COND_F(TRUE, x[2], z[2], u[2], w[2])_>=_NonInfC & COND_F(TRUE, x[2], z[2], u[2], w[2])_>=_F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2)) & (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(x[1], w[1])=TRUE & >=(u[1], 0)=TRUE  ==>  COND_F(TRUE, x[1], z[1], u[1], w[1])_>=_NonInfC & COND_F(TRUE, x[1], z[1], u[1], w[1])_>=_F(x[1], +(z[1], 1), +(u[1], 2), +(+(w[1], u[1]), 2)) & (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]w[1] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]w[1] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]w[1] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]w[1] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)

(9)    (x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)








For Pair F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1]) the following chains were created:
*We consider the chain F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1]), COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2)) which results in the following constraint:

(1)    (&&(>=(x[1], w[1]), >=(u[1], 0))=TRUE & x[1]=x[2] & z[1]=z[2] & u[1]=u[2] & w[1]=w[2]  ==>  F(x[1], z[1], u[1], w[1])_>=_NonInfC & F(x[1], z[1], u[1], w[1])_>=_COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1]) & (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(x[1], w[1])=TRUE & >=(u[1], 0)=TRUE  ==>  F(x[1], z[1], u[1], w[1])_>=_NonInfC & F(x[1], z[1], u[1], w[1])_>=_COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1]) & (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & [(-1)Bound*bni_18] + [(-1)bni_18]w[1] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & [(-1)Bound*bni_18] + [(-1)bni_18]w[1] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & [(-1)Bound*bni_18] + [(-1)bni_18]w[1] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[1] + [-1]w[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & 0 = 0 & [(-1)Bound*bni_18] + [(-1)bni_18]w[1] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[1] >= 0 & u[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & 0 = 0 & [(-1)Bound*bni_18] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & 0 = 0 & [(-1)Bound*bni_18] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)

(9)    (x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & 0 = 0 & [(-1)Bound*bni_18] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))

*(x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)


*(x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]x[1] >= 0 & [1 + (-1)bso_17] + u[1] >= 0)




*F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])

*(x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & 0 = 0 & [(-1)Bound*bni_18] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)


*(x[1] >= 0 & u[1] >= 0 & w[1] >= 0  ==>  (U^Increasing(COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])), >=) & 0 = 0 & [(-1)Bound*bni_18] + [bni_18]x[1] >= 0 & [(-1)bso_19] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_F(x_1, x_2, x_3, x_4, x_5)) = [-1] + [-1]x_5 + x_2 + [-1]x_1
   POL(F(x_1, x_2, x_3, x_4)) = [-1]x_4 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(2) = [2]
   POL(&&(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0


The following pairs are in P_>:


   COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))


The following pairs are in P_bound:


   COND_F(TRUE, x[2], z[2], u[2], w[2]) -> F(x[2], +(z[2], 1), +(u[2], 2), +(+(w[2], u[2]), 2))
   F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])


The following pairs are in P_>=:


   F(x[1], z[1], u[1], w[1]) -> COND_F(&&(>=(x[1], w[1]), >=(u[1], 0)), x[1], z[1], u[1], w[1])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): F(x[1], z[1], u[1], w[1]) -> COND_F(x[1] >= w[1] && u[1] >= 0, x[1], z[1], u[1], w[1])


The set Q consists of the following terms:
sqrt(x0)
f(x0, x1, x2, x3)
Cond_f(TRUE, x0, x1, x2, x3)
Cond_f1(TRUE, x0, x1, x2, x3)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
