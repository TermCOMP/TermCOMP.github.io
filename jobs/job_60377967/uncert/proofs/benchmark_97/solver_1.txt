YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/iMnZ0.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 94 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
pow(b, e) -> condLoop(e > 0, b, e, 1)
condLoop(FALSE, b, e, r) -> r
condLoop(TRUE, b, e, r) -> condMod(e % 2 = 1, b, e, r)
condMod(FALSE, b, e, r) -> sqBase(b, e, r)
condMod(TRUE, b, e, r) -> sqBase(b, e, r * b)
sqBase(b, e, r) -> halfExp(b * b, e, r)
halfExp(b, e, r) -> condLoop(e > 0, b, e / 2, r)
The set Q consists of the following terms:
pow(x0, x1)
condLoop(FALSE, x0, x1, x2)
condLoop(TRUE, x0, x1, x2)
condMod(FALSE, x0, x1, x2)
condMod(TRUE, x0, x1, x2)
sqBase(x0, x1, x2)
halfExp(x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
pow(b, e) -> condLoop(e > 0, b, e, 1)
condLoop(FALSE, b, e, r) -> r
condLoop(TRUE, b, e, r) -> condMod(e % 2 = 1, b, e, r)
condMod(FALSE, b, e, r) -> sqBase(b, e, r)
condMod(TRUE, b, e, r) -> sqBase(b, e, r * b)
sqBase(b, e, r) -> halfExp(b * b, e, r)
halfExp(b, e, r) -> condLoop(e > 0, b, e / 2, r)

The integer pair graph contains the following rules and edges:
(0): POW(b[0], e[0]) -> CONDLOOP(e[0] > 0, b[0], e[0], 1)
(1): CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(e[1] % 2 = 1, b[1], e[1], r[1])
(2): CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2])
(3): CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], r[3] * b[3])
(4): SQBASE(b[4], e[4], r[4]) -> HALFEXP(b[4] * b[4], e[4], r[4])
(5): HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(e[5] > 0, b[5], e[5] / 2, r[5])

   (0) -> (1), if (e[0] > 0  & b[0] ->^* b[1] & e[0] ->^* e[1] & 1 ->^* r[1])
   (1) -> (2), if (e[1] % 2 = 1 ->^* FALSE & b[1] ->^* b[2] & e[1] ->^* e[2] & r[1] ->^* r[2])
   (1) -> (3), if (e[1] % 2 = 1  & b[1] ->^* b[3] & e[1] ->^* e[3] & r[1] ->^* r[3])
   (2) -> (4), if (b[2] ->^* b[4] & e[2] ->^* e[4] & r[2] ->^* r[4])
   (3) -> (4), if (b[3] ->^* b[4] & e[3] ->^* e[4] & r[3] * b[3] ->^* r[4])
   (4) -> (5), if (b[4] * b[4] ->^* b[5] & e[4] ->^* e[5] & r[4] ->^* r[5])
   (5) -> (1), if (e[5] > 0  & b[5] ->^* b[1] & e[5] / 2 ->^* e[1] & r[5] ->^* r[1])

The set Q consists of the following terms:
pow(x0, x1)
condLoop(FALSE, x0, x1, x2)
condLoop(TRUE, x0, x1, x2)
condMod(FALSE, x0, x1, x2)
condMod(TRUE, x0, x1, x2)
sqBase(x0, x1, x2)
halfExp(x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): POW(b[0], e[0]) -> CONDLOOP(e[0] > 0, b[0], e[0], 1)
(1): CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(e[1] % 2 = 1, b[1], e[1], r[1])
(2): CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2])
(3): CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], r[3] * b[3])
(4): SQBASE(b[4], e[4], r[4]) -> HALFEXP(b[4] * b[4], e[4], r[4])
(5): HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(e[5] > 0, b[5], e[5] / 2, r[5])

   (0) -> (1), if (e[0] > 0  & b[0] ->^* b[1] & e[0] ->^* e[1] & 1 ->^* r[1])
   (1) -> (2), if (e[1] % 2 = 1 ->^* FALSE & b[1] ->^* b[2] & e[1] ->^* e[2] & r[1] ->^* r[2])
   (1) -> (3), if (e[1] % 2 = 1  & b[1] ->^* b[3] & e[1] ->^* e[3] & r[1] ->^* r[3])
   (2) -> (4), if (b[2] ->^* b[4] & e[2] ->^* e[4] & r[2] ->^* r[4])
   (3) -> (4), if (b[3] ->^* b[4] & e[3] ->^* e[4] & r[3] * b[3] ->^* r[4])
   (4) -> (5), if (b[4] * b[4] ->^* b[5] & e[4] ->^* e[5] & r[4] ->^* r[5])
   (5) -> (1), if (e[5] > 0  & b[5] ->^* b[1] & e[5] / 2 ->^* e[1] & r[5] ->^* r[1])

The set Q consists of the following terms:
pow(x0, x1)
condLoop(FALSE, x0, x1, x2)
condLoop(TRUE, x0, x1, x2)
condMod(FALSE, x0, x1, x2)
condMod(TRUE, x0, x1, x2)
sqBase(x0, x1, x2)
halfExp(x0, x1, x2)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], r[3] * b[3])
(5): HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(e[5] > 0, b[5], e[5] / 2, r[5])
(4): SQBASE(b[4], e[4], r[4]) -> HALFEXP(b[4] * b[4], e[4], r[4])
(2): CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2])
(1): CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(e[1] % 2 = 1, b[1], e[1], r[1])

   (5) -> (1), if (e[5] > 0  & b[5] ->^* b[1] & e[5] / 2 ->^* e[1] & r[5] ->^* r[1])
   (1) -> (2), if (e[1] % 2 = 1 ->^* FALSE & b[1] ->^* b[2] & e[1] ->^* e[2] & r[1] ->^* r[2])
   (1) -> (3), if (e[1] % 2 = 1  & b[1] ->^* b[3] & e[1] ->^* e[3] & r[1] ->^* r[3])
   (2) -> (4), if (b[2] ->^* b[4] & e[2] ->^* e[4] & r[2] ->^* r[4])
   (3) -> (4), if (b[3] ->^* b[4] & e[3] ->^* e[4] & r[3] * b[3] ->^* r[4])
   (4) -> (5), if (b[4] * b[4] ->^* b[5] & e[4] ->^* e[5] & r[4] ->^* r[5])

The set Q consists of the following terms:
pow(x0, x1)
condLoop(FALSE, x0, x1, x2)
condLoop(TRUE, x0, x1, x2)
condMod(FALSE, x0, x1, x2)
condMod(TRUE, x0, x1, x2)
sqBase(x0, x1, x2)
halfExp(x0, x1, x2)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@12bb84b
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], *(r[3], b[3])) the following chains were created:
*We consider the chain CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]), CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], *(r[3], b[3])), SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4]) which results in the following constraint:

(1)    (=(%(e[1], 2), 1)=TRUE & b[1]=b[3] & e[1]=e[3] & r[1]=r[3] & b[3]=b[4] & e[3]=e[4] & *(r[3], b[3])=r[4]  ==>  CONDMOD(TRUE, b[3], e[3], r[3])_>=_NonInfC & CONDMOD(TRUE, b[3], e[3], r[3])_>=_SQBASE(b[3], e[3], *(r[3], b[3])) & (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(%(e[1], 2), 1)=TRUE & <=(%(e[1], 2), 1)=TRUE  ==>  CONDMOD(TRUE, b[1], e[1], r[1])_>=_NonInfC & CONDMOD(TRUE, b[1], e[1], r[1])_>=_SQBASE(b[1], e[1], *(r[1], b[1])) & (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (max{[2], [-2]} + [-1] >= 0 & [1] + [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]e[1] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (max{[2], [-2]} + [-1] >= 0 & [1] + [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]e[1] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([4] >= 0 & [1] >= 0 & [3] >= 0  ==>  (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [bni_23]e[1] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (5) using rules (IDP_UNRESTRICTED_VARS), (IDP_POLY_GCD) which results in the following new constraint:

(6)    ([1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=) & 0 = 0 & [bni_23] = 0 & 0 = 0 & [(-1)bni_23 + (-1)Bound*bni_23] >= 0 & 0 = 0 & 0 = 0 & [(-1)bso_24] >= 0)








For Pair HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5]) the following chains were created:
*We consider the chain SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4]), HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5]), CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) which results in the following constraint:

(1)    (*(b[4], b[4])=b[5] & e[4]=e[5] & r[4]=r[5] & >(e[5], 0)=TRUE & b[5]=b[1] & /(e[5], 2)=e[1] & r[5]=r[1]  ==>  HALFEXP(b[5], e[5], r[5])_>=_NonInfC & HALFEXP(b[5], e[5], r[5])_>=_CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5]) & (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(e[5], 0)=TRUE  ==>  HALFEXP(*(b[4], b[4]), e[5], r[4])_>=_NonInfC & HALFEXP(*(b[4], b[4]), e[5], r[4])_>=_CONDLOOP(>(e[5], 0), *(b[4], b[4]), /(e[5], 2), r[4]) & (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (e[5] + [-1] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] + e[5] + [-1]max{e[5], [-1]e[5]} >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (e[5] + [-1] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] + e[5] + [-1]max{e[5], [-1]e[5]} >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (e[5] + [-1] >= 0 & [2]e[5] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (e[5] + [-1] >= 0 & [2]e[5] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (e[5] + [-1] >= 0 & [2]e[5] >= 0 & b[4] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)

(8)    (e[5] + [-1] >= 0 & [2]e[5] >= 0 & b[4] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (7) using rule (IDP_POLY_GCD) which results in the following new constraint:

(9)    (e[5] + [-1] >= 0 & b[4] >= 0 & e[5] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)



We simplified constraint (8) using rule (IDP_POLY_GCD) which results in the following new constraint:

(10)    (e[5] + [-1] >= 0 & b[4] >= 0 & e[5] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)








For Pair SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4]) the following chains were created:
*We consider the chain CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2]), SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4]), HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5]) which results in the following constraint:

(1)    (b[2]=b[4] & e[2]=e[4] & r[2]=r[4] & *(b[4], b[4])=b[5] & e[4]=e[5] & r[4]=r[5]  ==>  SQBASE(b[4], e[4], r[4])_>=_NonInfC & SQBASE(b[4], e[4], r[4])_>=_HALFEXP(*(b[4], b[4]), e[4], r[4]) & (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (SQBASE(b[2], e[2], r[2])_>=_NonInfC & SQBASE(b[2], e[2], r[2])_>=_HALFEXP(*(b[2], b[2]), e[2], r[2]) & (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & [(-1)bso_31] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (b[2] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)

(8)    (b[2] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)




*We consider the chain CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], *(r[3], b[3])), SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4]), HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5]) which results in the following constraint:

(1)    (b[3]=b[4] & e[3]=e[4] & *(r[3], b[3])=r[4] & *(b[4], b[4])=b[5] & e[4]=e[5] & r[4]=r[5]  ==>  SQBASE(b[4], e[4], r[4])_>=_NonInfC & SQBASE(b[4], e[4], r[4])_>=_HALFEXP(*(b[4], b[4]), e[4], r[4]) & (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (SQBASE(b[3], e[3], *(r[3], b[3]))_>=_NonInfC & SQBASE(b[3], e[3], *(r[3], b[3]))_>=_HALFEXP(*(b[3], b[3]), e[3], *(r[3], b[3])) & (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & [(-1)bso_31] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ((U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (b[3] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)

(8)    (b[3] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)








For Pair CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2]) the following chains were created:
*We consider the chain CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2]), SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4]) which results in the following constraint:

(1)    (b[2]=b[4] & e[2]=e[4] & r[2]=r[4]  ==>  CONDMOD(FALSE, b[2], e[2], r[2])_>=_NonInfC & CONDMOD(FALSE, b[2], e[2], r[2])_>=_SQBASE(b[2], e[2], r[2]) & (U^Increasing(SQBASE(b[2], e[2], r[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (CONDMOD(FALSE, b[2], e[2], r[2])_>=_NonInfC & CONDMOD(FALSE, b[2], e[2], r[2])_>=_SQBASE(b[2], e[2], r[2]) & (U^Increasing(SQBASE(b[2], e[2], r[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(SQBASE(b[2], e[2], r[2])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(SQBASE(b[2], e[2], r[2])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(SQBASE(b[2], e[2], r[2])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)








For Pair CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) the following chains were created:
*We consider the chain CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]), CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2]) which results in the following constraint:

(1)    (=(%(e[1], 2), 1)=FALSE & b[1]=b[2] & e[1]=e[2] & r[1]=r[2]  ==>  CONDLOOP(TRUE, b[1], e[1], r[1])_>=_NonInfC & CONDLOOP(TRUE, b[1], e[1], r[1])_>=_CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) & (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (<(%(e[1], 2), 1)=TRUE  ==>  CONDLOOP(TRUE, b[1], e[1], r[1])_>=_NonInfC & CONDLOOP(TRUE, b[1], e[1], r[1])_>=_CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) & (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=))

(3)    (>(%(e[1], 2), 1)=TRUE  ==>  CONDLOOP(TRUE, b[1], e[1], r[1])_>=_NonInfC & CONDLOOP(TRUE, b[1], e[1], r[1])_>=_CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) & (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    ([-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (max{[2], [-2]} + [-2] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    ([-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (max{[2], [-2]} + [-2] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    ([4] >= 0 & [2] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    ([4] >= 0 & 0 >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (8) using rules (IDP_UNRESTRICTED_VARS), (IDP_POLY_GCD) which results in the following new constraint:

(10)    ([1] >= 0 & [1] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & 0 = 0 & [bni_34] = 0 & 0 = 0 & [(-1)bni_34 + (-1)Bound*bni_34] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (9) using rules (IDP_UNRESTRICTED_VARS), (IDP_POLY_GCD) which results in the following new constraint:

(11)    (0 >= 0 & [1] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & 0 = 0 & [bni_34] = 0 & 0 = 0 & [(-1)bni_34 + (-1)Bound*bni_34] >= 0 & [(-1)bso_35] >= 0)




*We consider the chain CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]), CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], *(r[3], b[3])) which results in the following constraint:

(1)    (=(%(e[1], 2), 1)=TRUE & b[1]=b[3] & e[1]=e[3] & r[1]=r[3]  ==>  CONDLOOP(TRUE, b[1], e[1], r[1])_>=_NonInfC & CONDLOOP(TRUE, b[1], e[1], r[1])_>=_CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) & (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(%(e[1], 2), 1)=TRUE & <=(%(e[1], 2), 1)=TRUE  ==>  CONDLOOP(TRUE, b[1], e[1], r[1])_>=_NonInfC & CONDLOOP(TRUE, b[1], e[1], r[1])_>=_CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1]) & (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (max{[2], [-2]} + [-1] >= 0 & [1] + [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (max{[2], [-2]} + [-1] >= 0 & [1] + [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([4] >= 0 & [1] >= 0 & [3] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]e[1] >= 0 & [(-1)bso_35] >= 0)



We simplified constraint (5) using rules (IDP_UNRESTRICTED_VARS), (IDP_POLY_GCD) which results in the following new constraint:

(6)    ([1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & 0 = 0 & [bni_34] = 0 & 0 = 0 & [(-1)bni_34 + (-1)Bound*bni_34] >= 0 & [(-1)bso_35] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], *(r[3], b[3]))

*([1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(SQBASE(b[3], e[3], *(r[3], b[3]))), >=) & 0 = 0 & [bni_23] = 0 & 0 = 0 & [(-1)bni_23 + (-1)Bound*bni_23] >= 0 & 0 = 0 & 0 = 0 & [(-1)bso_24] >= 0)




*HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])

*(e[5] + [-1] >= 0 & b[4] >= 0 & e[5] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)


*(e[5] + [-1] >= 0 & b[4] >= 0 & e[5] >= 0  ==>  (U^Increasing(CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])), >=) & 0 = 0 & [(-1)bni_25 + (-1)Bound*bni_25] + [bni_25]e[5] >= 0 & [1 + (-1)bso_29] >= 0)




*SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4])

*(b[2] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)


*(b[2] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)


*(b[3] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)


*(b[3] >= 0  ==>  (U^Increasing(HALFEXP(*(b[4], b[4]), e[4], r[4])), >=) & [bni_30] = 0 & 0 = 0 & [(-1)bso_31] >= 0)




*CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2])

*((U^Increasing(SQBASE(b[2], e[2], r[2])), >=) & [bni_32] = 0 & [(-1)bso_33] >= 0)




*CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])

*([1] >= 0 & [1] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & 0 = 0 & [bni_34] = 0 & 0 = 0 & [(-1)bni_34 + (-1)Bound*bni_34] >= 0 & [(-1)bso_35] >= 0)


*(0 >= 0 & [1] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & 0 = 0 & [bni_34] = 0 & 0 = 0 & [(-1)bni_34 + (-1)Bound*bni_34] >= 0 & [(-1)bso_35] >= 0)


*([1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])), >=) & 0 = 0 & [bni_34] = 0 & 0 = 0 & [(-1)bni_34 + (-1)Bound*bni_34] >= 0 & [(-1)bso_35] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(CONDMOD(x_1, x_2, x_3, x_4)) = [-1] + x_3
   POL(SQBASE(x_1, x_2, x_3)) = [-1] + x_2
   POL(*(x_1, x_2)) = x_1*x_2
   POL(HALFEXP(x_1, x_2, x_3)) = [-1] + x_2
   POL(CONDLOOP(x_1, x_2, x_3, x_4)) = [-1] + x_3
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(2) = [2]
   POL(=(x_1, x_2)) = [-1]
   POL(1) = [1]
   
   Polynomial Interpretations with Context Sensitive Arithemetic Replacement
   POL(Term^CSAR-Mode @ Context)
   
   POL(%(x_1, 2)^1 @ {}) = max{x_2, [-1]x_2}
   POL(%(x_1, 2)^-1 @ {}) = min{x_2, [-1]x_2}
   POL(/(x_1, 2)^1 @ {CONDLOOP_4/2}) = max{x_1, [-1]x_1} + [-1]


The following pairs are in P_>:


   HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])


The following pairs are in P_bound:


   HALFEXP(b[5], e[5], r[5]) -> CONDLOOP(>(e[5], 0), b[5], /(e[5], 2), r[5])


The following pairs are in P_>=:


   CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], *(r[3], b[3]))
   SQBASE(b[4], e[4], r[4]) -> HALFEXP(*(b[4], b[4]), e[4], r[4])
   CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2])
   CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(=(%(e[1], 2), 1), b[1], e[1], r[1])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   /^1 ->
   %^1 ->

----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): CONDMOD(TRUE, b[3], e[3], r[3]) -> SQBASE(b[3], e[3], r[3] * b[3])
(4): SQBASE(b[4], e[4], r[4]) -> HALFEXP(b[4] * b[4], e[4], r[4])
(2): CONDMOD(FALSE, b[2], e[2], r[2]) -> SQBASE(b[2], e[2], r[2])
(1): CONDLOOP(TRUE, b[1], e[1], r[1]) -> CONDMOD(e[1] % 2 = 1, b[1], e[1], r[1])

   (1) -> (2), if (e[1] % 2 = 1 ->^* FALSE & b[1] ->^* b[2] & e[1] ->^* e[2] & r[1] ->^* r[2])
   (1) -> (3), if (e[1] % 2 = 1  & b[1] ->^* b[3] & e[1] ->^* e[3] & r[1] ->^* r[3])
   (2) -> (4), if (b[2] ->^* b[4] & e[2] ->^* e[4] & r[2] ->^* r[4])
   (3) -> (4), if (b[3] ->^* b[4] & e[3] ->^* e[4] & r[3] * b[3] ->^* r[4])

The set Q consists of the following terms:
pow(x0, x1)
condLoop(FALSE, x0, x1, x2)
condLoop(TRUE, x0, x1, x2)
condMod(FALSE, x0, x1, x2)
condMod(TRUE, x0, x1, x2)
sqBase(x0, x1, x2)
halfExp(x0, x1, x2)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 4 less nodes.
----------------------------------------

(10)
TRUE
