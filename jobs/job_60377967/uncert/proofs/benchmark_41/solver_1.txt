YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3dOiP.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 125 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 1273 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) IDP
(11) IDPNonInfProof [SOUND, 0 ms]
(12) IDP
(13) IDependencyGraphProof [EQUIVALENT, 0 ms]
(14) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > y, x, y)
Cond_eval(TRUE, x, y) -> eval(x, y + 1)
eval(x, y) -> Cond_eval1(y > x && x > y, x, y)
Cond_eval1(TRUE, x, y) -> eval(x, y + 1)
eval(x, y) -> Cond_eval2(x > y && y >= x, x, y)
Cond_eval2(TRUE, x, y) -> eval(x + 1, y)
eval(x, y) -> Cond_eval3(y > x && y >= x, x, y)
Cond_eval3(TRUE, x, y) -> eval(x + 1, y)
The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > y, x, y)
Cond_eval(TRUE, x, y) -> eval(x, y + 1)
eval(x, y) -> Cond_eval1(y > x && x > y, x, y)
Cond_eval1(TRUE, x, y) -> eval(x, y + 1)
eval(x, y) -> Cond_eval2(x > y && y >= x, x, y)
Cond_eval2(TRUE, x, y) -> eval(x + 1, y)
eval(x, y) -> Cond_eval3(y > x && y >= x, x, y)
Cond_eval3(TRUE, x, y) -> eval(x + 1, y)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > y[0], x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], y[1] + 1)
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] > x[2] && x[2] > y[2], x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], y[3] + 1)
(4): EVAL(x[4], y[4]) -> COND_EVAL2(x[4] > y[4] && y[4] >= x[4], x[4], y[4])
(5): COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5] + 1, y[5])
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > x[6] && y[6] >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7] + 1, y[7])

   (0) -> (1), if (x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] + 1 ->^* y[2])
   (1) -> (4), if (x[1] ->^* x[4] & y[1] + 1 ->^* y[4])
   (1) -> (6), if (x[1] ->^* x[6] & y[1] + 1 ->^* y[6])
   (2) -> (3), if (y[2] > x[2] && x[2] > y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] + 1 ->^* y[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] + 1 ->^* y[2])
   (3) -> (4), if (x[3] ->^* x[4] & y[3] + 1 ->^* y[4])
   (3) -> (6), if (x[3] ->^* x[6] & y[3] + 1 ->^* y[6])
   (4) -> (5), if (x[4] > y[4] && y[4] >= x[4]  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (0), if (x[5] + 1 ->^* x[0] & y[5] ->^* y[0])
   (5) -> (2), if (x[5] + 1 ->^* x[2] & y[5] ->^* y[2])
   (5) -> (4), if (x[5] + 1 ->^* x[4] & y[5] ->^* y[4])
   (5) -> (6), if (x[5] + 1 ->^* x[6] & y[5] ->^* y[6])
   (6) -> (7), if (y[6] > x[6] && y[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (7) -> (0), if (x[7] + 1 ->^* x[0] & y[7] ->^* y[0])
   (7) -> (2), if (x[7] + 1 ->^* x[2] & y[7] ->^* y[2])
   (7) -> (4), if (x[7] + 1 ->^* x[4] & y[7] ->^* y[4])
   (7) -> (6), if (x[7] + 1 ->^* x[6] & y[7] ->^* y[6])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > y[0], x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], y[1] + 1)
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] > x[2] && x[2] > y[2], x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], y[3] + 1)
(4): EVAL(x[4], y[4]) -> COND_EVAL2(x[4] > y[4] && y[4] >= x[4], x[4], y[4])
(5): COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(x[5] + 1, y[5])
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > x[6] && y[6] >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7] + 1, y[7])

   (0) -> (1), if (x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] + 1 ->^* y[2])
   (1) -> (4), if (x[1] ->^* x[4] & y[1] + 1 ->^* y[4])
   (1) -> (6), if (x[1] ->^* x[6] & y[1] + 1 ->^* y[6])
   (2) -> (3), if (y[2] > x[2] && x[2] > y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] + 1 ->^* y[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] + 1 ->^* y[2])
   (3) -> (4), if (x[3] ->^* x[4] & y[3] + 1 ->^* y[4])
   (3) -> (6), if (x[3] ->^* x[6] & y[3] + 1 ->^* y[6])
   (4) -> (5), if (x[4] > y[4] && y[4] >= x[4]  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (0), if (x[5] + 1 ->^* x[0] & y[5] ->^* y[0])
   (5) -> (2), if (x[5] + 1 ->^* x[2] & y[5] ->^* y[2])
   (5) -> (4), if (x[5] + 1 ->^* x[4] & y[5] ->^* y[4])
   (5) -> (6), if (x[5] + 1 ->^* x[6] & y[5] ->^* y[6])
   (6) -> (7), if (y[6] > x[6] && y[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])
   (7) -> (0), if (x[7] + 1 ->^* x[0] & y[7] ->^* y[0])
   (7) -> (2), if (x[7] + 1 ->^* x[2] & y[7] ->^* y[2])
   (7) -> (4), if (x[7] + 1 ->^* x[4] & y[7] ->^* y[4])
   (7) -> (6), if (x[7] + 1 ->^* x[6] & y[7] ->^* y[6])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@38e21d18
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y) -> COND_EVAL(>(x, y), x, y) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) which results in the following constraint:

(1)    (>(x[0], y[0])=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25] + [(-1)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25] + [(-1)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25] + [(-1)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25 + (-1)bni_25] + [(-2)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25 + (-1)bni_25] + [(-2)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)

(8)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25 + (-1)bni_25] + [(2)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)








For Pair COND_EVAL(TRUE, x, y) -> EVAL(x, +(y, 1)) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) which results in the following constraint:

(1)    (>(x[0], y[0])=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(x[1], +(y[1], 1)) & (U^Increasing(EVAL(x[1], +(y[1], 1))), >=))



We simplified constraint (1) using rule (III) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0])_>=_EVAL(x[0], +(y[0], 1)) & (U^Increasing(EVAL(x[1], +(y[1], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27] + [(-1)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27] + [(-1)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27] + [(-1)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27 + (-1)bni_27] + [(-2)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27 + (-1)bni_27] + [(-2)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)

(8)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27 + (-1)bni_27] + [(2)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)








For Pair EVAL(x, y) -> COND_EVAL1(&&(>(y, x), >(x, y)), x, y) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], +(y[3], 1)) which results in the following constraint:

(1)    (&&(>(y[2], x[2]), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], x[2])=TRUE & >(x[2], y[2])=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]x[2] >= 0 & x[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)Bound*bni_29] + [(-1)bni_29]y[2] + [(-1)bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]x[2] >= 0 & x[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)Bound*bni_29] + [(-1)bni_29]y[2] + [(-1)bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]x[2] >= 0 & x[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)Bound*bni_29] + [(-1)bni_29]y[2] + [(-1)bni_29]x[2] >= 0 & [1 + (-1)bso_30] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL1(TRUE, x, y) -> EVAL(x, +(y, 1)) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], +(y[3], 1)) which results in the following constraint:

(1)    (&&(>(y[2], x[2]), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(x[3], +(y[3], 1)) & (U^Increasing(EVAL(x[3], +(y[3], 1))), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], x[2])=TRUE & >(x[2], y[2])=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(x[2], +(y[2], 1)) & (U^Increasing(EVAL(x[3], +(y[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] + [-1]x[2] >= 0 & x[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], +(y[3], 1))), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]y[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] + [-1]x[2] >= 0 & x[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], +(y[3], 1))), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]y[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] + [-1]x[2] >= 0 & x[2] + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], +(y[3], 1))), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]y[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair EVAL(x, y) -> COND_EVAL2(&&(>(x, y), >=(y, x)), x, y) the following chains were created:
*We consider the chain EVAL(x[4], y[4]) -> COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4]), COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(+(x[5], 1), y[5]) which results in the following constraint:

(1)    (&&(>(x[4], y[4]), >=(y[4], x[4]))=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  EVAL(x[4], y[4])_>=_NonInfC & EVAL(x[4], y[4])_>=_COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4]) & (U^Increasing(COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[4], y[4])=TRUE & >=(y[4], x[4])=TRUE  ==>  EVAL(x[4], y[4])_>=_NonInfC & EVAL(x[4], y[4])_>=_COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4]) & (U^Increasing(COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] + [-1]y[4] >= 0 & y[4] + [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)Bound*bni_33] + [(-1)bni_33]y[4] + [(-1)bni_33]x[4] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] + [-1]y[4] >= 0 & y[4] + [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)Bound*bni_33] + [(-1)bni_33]y[4] + [(-1)bni_33]x[4] >= 0 & [1 + (-1)bso_34] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] + [-1]y[4] >= 0 & y[4] + [-1]x[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)Bound*bni_33] + [(-1)bni_33]y[4] + [(-1)bni_33]x[4] >= 0 & [1 + (-1)bso_34] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL2(TRUE, x, y) -> EVAL(+(x, 1), y) the following chains were created:
*We consider the chain EVAL(x[4], y[4]) -> COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4]), COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(+(x[5], 1), y[5]) which results in the following constraint:

(1)    (&&(>(x[4], y[4]), >=(y[4], x[4]))=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  COND_EVAL2(TRUE, x[5], y[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5])_>=_EVAL(+(x[5], 1), y[5]) & (U^Increasing(EVAL(+(x[5], 1), y[5])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[4], y[4])=TRUE & >=(y[4], x[4])=TRUE  ==>  COND_EVAL2(TRUE, x[4], y[4])_>=_NonInfC & COND_EVAL2(TRUE, x[4], y[4])_>=_EVAL(+(x[4], 1), y[4]) & (U^Increasing(EVAL(+(x[5], 1), y[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[4] + [-1] + [-1]y[4] >= 0 & y[4] + [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(+(x[5], 1), y[5])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]y[4] + [(-1)bni_35]x[4] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[4] + [-1] + [-1]y[4] >= 0 & y[4] + [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(+(x[5], 1), y[5])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]y[4] + [(-1)bni_35]x[4] >= 0 & [(-1)bso_36] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[4] + [-1] + [-1]y[4] >= 0 & y[4] + [-1]x[4] >= 0  ==>  (U^Increasing(EVAL(+(x[5], 1), y[5])), >=) & [(-1)bni_35 + (-1)Bound*bni_35] + [(-1)bni_35]y[4] + [(-1)bni_35]x[4] >= 0 & [(-1)bso_36] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair EVAL(x, y) -> COND_EVAL3(&&(>(y, x), >=(y, x)), x, y) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]) which results in the following constraint:

(1)    (&&(>(y[6], x[6]), >=(y[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], x[6])=TRUE & >=(y[6], x[6])=TRUE  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37] + [(-1)bni_37]y[6] + [(-1)bni_37]x[6] >= 0 & [1 + (-1)bso_38] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37] + [(-1)bni_37]y[6] + [(-1)bni_37]x[6] >= 0 & [1 + (-1)bso_38] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37] + [(-1)bni_37]y[6] + [(-1)bni_37]x[6] >= 0 & [1 + (-1)bso_38] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & [1] + y[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37 + (-1)bni_37] + [(-2)bni_37]x[6] + [(-1)bni_37]y[6] >= 0 & [1 + (-1)bso_38] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37 + (-1)bni_37] + [(-2)bni_37]x[6] + [(-1)bni_37]y[6] >= 0 & [1 + (-1)bso_38] >= 0)

(8)    (y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37 + (-1)bni_37] + [(2)bni_37]x[6] + [(-1)bni_37]y[6] >= 0 & [1 + (-1)bso_38] >= 0)








For Pair COND_EVAL3(TRUE, x, y) -> EVAL(+(x, 1), y) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]) which results in the following constraint:

(1)    (&&(>(y[6], x[6]), >=(y[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  COND_EVAL3(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7])_>=_EVAL(+(x[7], 1), y[7]) & (U^Increasing(EVAL(+(x[7], 1), y[7])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], x[6])=TRUE & >=(y[6], x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], y[6])_>=_NonInfC & COND_EVAL3(TRUE, x[6], y[6])_>=_EVAL(+(x[6], 1), y[6]) & (U^Increasing(EVAL(+(x[7], 1), y[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [(-1)bni_39]y[6] + [(-1)bni_39]x[6] >= 0 & [(-1)bso_40] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [(-1)bni_39]y[6] + [(-1)bni_39]x[6] >= 0 & [(-1)bso_40] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)bni_39 + (-1)Bound*bni_39] + [(-1)bni_39]y[6] + [(-1)bni_39]x[6] >= 0 & [(-1)bso_40] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & [1] + y[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-2)bni_39 + (-1)Bound*bni_39] + [(-2)bni_39]x[6] + [(-1)bni_39]y[6] >= 0 & [(-1)bso_40] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-2)bni_39 + (-1)Bound*bni_39] + [(2)bni_39]x[6] + [(-1)bni_39]y[6] >= 0 & [(-1)bso_40] >= 0)

(8)    (y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-2)bni_39 + (-1)Bound*bni_39] + [(-2)bni_39]x[6] + [(-1)bni_39]y[6] >= 0 & [(-1)bso_40] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y) -> COND_EVAL(>(x, y), x, y)

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25 + (-1)bni_25] + [(-2)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)


*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_25 + (-1)bni_25] + [(2)bni_25]y[0] + [(-1)bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)




*COND_EVAL(TRUE, x, y) -> EVAL(x, +(y, 1))

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27 + (-1)bni_27] + [(-2)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)


*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_27 + (-1)bni_27] + [(2)bni_27]y[0] + [(-1)bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)




*EVAL(x, y) -> COND_EVAL1(&&(>(y, x), >(x, y)), x, y)




*COND_EVAL1(TRUE, x, y) -> EVAL(x, +(y, 1))




*EVAL(x, y) -> COND_EVAL2(&&(>(x, y), >=(y, x)), x, y)




*COND_EVAL2(TRUE, x, y) -> EVAL(+(x, 1), y)




*EVAL(x, y) -> COND_EVAL3(&&(>(y, x), >=(y, x)), x, y)

*(y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37 + (-1)bni_37] + [(-2)bni_37]x[6] + [(-1)bni_37]y[6] >= 0 & [1 + (-1)bso_38] >= 0)


*(y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_37 + (-1)bni_37] + [(2)bni_37]x[6] + [(-1)bni_37]y[6] >= 0 & [1 + (-1)bso_38] >= 0)




*COND_EVAL3(TRUE, x, y) -> EVAL(+(x, 1), y)

*(y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-2)bni_39 + (-1)Bound*bni_39] + [(2)bni_39]x[6] + [(-1)bni_39]y[6] >= 0 & [(-1)bso_40] >= 0)


*(y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-2)bni_39 + (-1)Bound*bni_39] + [(-2)bni_39]x[6] + [(-1)bni_39]y[6] >= 0 & [(-1)bso_40] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(EVAL(x_1, x_2)) = [-1]x_2 + [-1]x_1
   POL(COND_EVAL(x_1, x_2, x_3)) = [-1]x_3 + [-1]x_2
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(COND_EVAL1(x_1, x_2, x_3)) = [-1] + [-1]x_3 + [-1]x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(COND_EVAL2(x_1, x_2, x_3)) = [-1] + [-1]x_3 + [-1]x_2 + [-1]x_1
   POL(>=(x_1, x_2)) = [-1]
   POL(COND_EVAL3(x_1, x_2, x_3)) = [-1] + [-1]x_3 + [-1]x_2 + [-1]x_1


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))
   EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])
   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], +(y[3], 1))
   EVAL(x[4], y[4]) -> COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])
   COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(+(x[5], 1), y[5])
   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])


The following pairs are in P_bound:


   EVAL(x[2], y[2]) -> COND_EVAL1(&&(>(y[2], x[2]), >(x[2], y[2])), x[2], y[2])
   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], +(y[3], 1))
   EVAL(x[4], y[4]) -> COND_EVAL2(&&(>(x[4], y[4]), >=(y[4], x[4])), x[4], y[4])
   COND_EVAL2(TRUE, x[5], y[5]) -> EVAL(+(x[5], 1), y[5])


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])
   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > y[0], x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], y[1] + 1)
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > x[6] && y[6] >= x[6], x[6], y[6])
(7): COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(x[7] + 1, y[7])

   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0])
   (7) -> (0), if (x[7] + 1 ->^* x[0] & y[7] ->^* y[0])
   (0) -> (1), if (x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (6), if (x[1] ->^* x[6] & y[1] + 1 ->^* y[6])
   (7) -> (6), if (x[7] + 1 ->^* x[6] & y[7] ->^* y[6])
   (6) -> (7), if (y[6] > x[6] && y[6] >= x[6]  & x[6] ->^* x[7] & y[6] ->^* y[7])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpCand1ShapeHeuristic@423d205c
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 2
Max Right Steps: 0



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) which results in the following constraint:

(1)    (>(x[0], y[0])=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]max{0, y[0] + [-1]x[0]} >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [bni_14]max{0, y[0] + [-1]x[0]} >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & [-1]y[0] + x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & [1] + x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] >= 0 & [(-1)bso_15] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & [1] + x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] >= 0 & [(-1)bso_15] >= 0)

(8)    (x[0] >= 0 & [1] + x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] >= 0 & [(-1)bso_15] >= 0)








For Pair COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) the following chains were created:
*We consider the chain COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)), EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) which results in the following constraint:

(1)    (x[1]=x[0] & +(y[1], 1)=y[0] & >(x[0], y[0])=TRUE & x[0]=x[1]1 & y[0]=y[1]1  ==>  COND_EVAL(TRUE, x[1]1, y[1]1)_>=_NonInfC & COND_EVAL(TRUE, x[1]1, y[1]1)_>=_EVAL(x[1]1, +(y[1]1, 1)) & (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=))



We simplified constraint (1) using rule (III) which results in the following new constraint:

(2)    (>(x[0], +(y[1], 1))=TRUE  ==>  COND_EVAL(TRUE, x[0], +(y[1], 1))_>=_NonInfC & COND_EVAL(TRUE, x[0], +(y[1], 1))_>=_EVAL(x[0], +(+(y[1], 1), 1)) & (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-2] + [-1]y[1] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]max{0, y[1] + [1] + [-1]x[0]} >= 0 & [(-1)bso_17] + max{0, y[1] + [1] + [-1]x[0]} + [-1]max{0, y[1] + [2] + [-1]x[0]} >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-2] + [-1]y[1] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]max{0, y[1] + [1] + [-1]x[0]} >= 0 & [(-1)bso_17] + max{0, y[1] + [1] + [-1]x[0]} + [-1]max{0, y[1] + [2] + [-1]x[0]} >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-2] + [-1]y[1] >= 0 & [-1]y[1] + [-1] + x[0] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & [1] + x[0] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & [1] + x[0] >= 0 & y[1] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)

(8)    (x[0] >= 0 & [1] + x[0] >= 0 & y[1] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)




*We consider the chain COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]), EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) which results in the following constraint:

(1)    (+(x[7], 1)=x[0] & y[7]=y[0] & >(x[0], y[0])=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(x[1], +(y[1], 1)) & (U^Increasing(EVAL(x[1], +(y[1], 1))), >=))



We simplified constraint (1) using rule (III) which results in the following new constraint:

(2)    (>(+(x[7], 1), y[0])=TRUE  ==>  COND_EVAL(TRUE, +(x[7], 1), y[0])_>=_NonInfC & COND_EVAL(TRUE, +(x[7], 1), y[0])_>=_EVAL(+(x[7], 1), +(y[0], 1)) & (U^Increasing(EVAL(x[1], +(y[1], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[7] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]max{0, y[0] + [-1] + [-1]x[7]} >= 0 & [(-1)bso_17] + max{0, y[0] + [-1] + [-1]x[7]} + [-1]max{0, y[0] + [-1]x[7]} >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[7] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [bni_16]max{0, y[0] + [-1] + [-1]x[7]} >= 0 & [(-1)bso_17] + max{0, y[0] + [-1] + [-1]x[7]} + [-1]max{0, y[0] + [-1]x[7]} >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[7] + [-1]y[0] >= 0 & [-1]y[0] + [1] + x[7] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[7] >= 0 & [1] + x[7] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[7] >= 0 & [1] + x[7] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)

(8)    (x[7] >= 0 & [1] + x[7] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)








For Pair EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]) the following chains were created:
*We consider the chain EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]) which results in the following constraint:

(1)    (&&(>(y[6], x[6]), >=(y[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], x[6])=TRUE & >=(y[6], x[6])=TRUE  ==>  EVAL(x[6], y[6])_>=_NonInfC & EVAL(x[6], y[6])_>=_COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]) & (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [bni_18]max{0, y[6] + [-1]x[6]} >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [bni_18]max{0, y[6] + [-1]x[6]} >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[6] + [-1] + [-1]x[6] >= 0 & y[6] + [-1]x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [bni_18]y[6] + [(-1)bni_18]x[6] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[6] >= 0 & [1] + y[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_18] + [bni_18]y[6] >= 0 & [(-1)bso_19] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_18] + [bni_18]y[6] >= 0 & [(-1)bso_19] >= 0)

(8)    (y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_18] + [bni_18]y[6] >= 0 & [(-1)bso_19] >= 0)








For Pair COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]) the following chains were created:
*We consider the chain COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)), EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]) which results in the following constraint:

(1)    (x[1]=x[6] & +(y[1], 1)=y[6] & &&(>(y[6], x[6]), >=(y[6], x[6]))=TRUE & x[6]=x[7] & y[6]=y[7]  ==>  COND_EVAL3(TRUE, x[7], y[7])_>=_NonInfC & COND_EVAL3(TRUE, x[7], y[7])_>=_EVAL(+(x[7], 1), y[7]) & (U^Increasing(EVAL(+(x[7], 1), y[7])), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(+(y[1], 1), x[6])=TRUE & >=(+(y[1], 1), x[6])=TRUE  ==>  COND_EVAL3(TRUE, x[6], +(y[1], 1))_>=_NonInfC & COND_EVAL3(TRUE, x[6], +(y[1], 1))_>=_EVAL(+(x[6], 1), +(y[1], 1)) & (U^Increasing(EVAL(+(x[7], 1), y[7])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[1] + [-1]x[6] >= 0 & y[1] + [1] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]max{0, y[1] + [1] + [-1]x[6]} >= 0 & [(-1)bso_21] + max{0, y[1] + [1] + [-1]x[6]} + [-1]max{0, y[1] + [-1]x[6]} >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[1] + [-1]x[6] >= 0 & y[1] + [1] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]max{0, y[1] + [1] + [-1]x[6]} >= 0 & [(-1)bso_21] + max{0, y[1] + [1] + [-1]x[6]} + [-1]max{0, y[1] + [-1]x[6]} >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraints:

(5)    (y[1] + [-1]x[6] >= 0 & y[1] + [1] + [-1]x[6] >= 0 & [-1]y[1] + x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] + [(-1)bni_20]x[6] >= 0 & [1 + (-1)bso_21] + y[1] + [-1]x[6] >= 0)

(6)    (y[1] + [-1]x[6] >= 0 & y[1] + [1] + [-1]x[6] >= 0 & y[1] + [-1] + [-1]x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] + [(-1)bni_20]x[6] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[1] >= 0 & [1] + y[1] >= 0 & [-1]y[1] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [1 + (-1)bso_21] + y[1] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(8)    (y[1] >= 0 & [1] + y[1] >= 0 & [-1] + y[1] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(9)    (0 >= 0 & [1] >= 0 & 0 >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (9) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(10)    (0 >= 0 & [1] >= 0 & 0 >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)

(11)    (0 >= 0 & [1] >= 0 & 0 >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (8) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(12)    (y[1] >= 0 & [1] + y[1] >= 0 & [-1] + y[1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [1 + (-1)bso_21] >= 0)

(13)    (y[1] >= 0 & [1] + y[1] >= 0 & [-1] + y[1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [1 + (-1)bso_21] >= 0)




*We consider the chain COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]), EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6]), COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7]) which results in the following constraint:

(1)    (+(x[7], 1)=x[6] & y[7]=y[6] & &&(>(y[6], x[6]), >=(y[6], x[6]))=TRUE & x[6]=x[7]1 & y[6]=y[7]1  ==>  COND_EVAL3(TRUE, x[7]1, y[7]1)_>=_NonInfC & COND_EVAL3(TRUE, x[7]1, y[7]1)_>=_EVAL(+(x[7]1, 1), y[7]1) & (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[6], +(x[7], 1))=TRUE & >=(y[6], +(x[7], 1))=TRUE  ==>  COND_EVAL3(TRUE, +(x[7], 1), y[6])_>=_NonInfC & COND_EVAL3(TRUE, +(x[7], 1), y[6])_>=_EVAL(+(+(x[7], 1), 1), y[6]) & (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[6] + [-2] + [-1]x[7] >= 0 & y[6] + [-1] + [-1]x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]max{0, y[6] + [-1] + [-1]x[7]} >= 0 & [(-1)bso_21] + max{0, y[6] + [-1] + [-1]x[7]} + [-1]max{0, y[6] + [-2] + [-1]x[7]} >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[6] + [-2] + [-1]x[7] >= 0 & y[6] + [-1] + [-1]x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]max{0, y[6] + [-1] + [-1]x[7]} >= 0 & [(-1)bso_21] + max{0, y[6] + [-1] + [-1]x[7]} + [-1]max{0, y[6] + [-2] + [-1]x[7]} >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraints:

(5)    (y[6] + [-2] + [-1]x[7] >= 0 & y[6] + [-1] + [-1]x[7] >= 0 & [-1]y[6] + [2] + x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-2)bni_20 + (-1)Bound*bni_20] + [bni_20]y[6] + [(-1)bni_20]x[7] >= 0 & [-1 + (-1)bso_21] + y[6] + [-1]x[7] >= 0)

(6)    (y[6] + [-2] + [-1]x[7] >= 0 & y[6] + [-1] + [-1]x[7] >= 0 & y[6] + [-3] + [-1]x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-2)bni_20 + (-1)Bound*bni_20] + [bni_20]y[6] + [(-1)bni_20]x[7] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[6] >= 0 & [1] + y[6] >= 0 & [-1]y[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] + [bni_20]y[6] >= 0 & [1 + (-1)bso_21] + y[6] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(8)    (y[6] >= 0 & [1] + y[6] >= 0 & [-1] + y[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] + [bni_20]y[6] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(9)    (0 >= 0 & [1] >= 0 & 0 >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (9) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(10)    (0 >= 0 & [1] >= 0 & 0 >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)

(11)    (0 >= 0 & [1] >= 0 & 0 >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)



We simplified constraint (8) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(12)    (y[6] >= 0 & [1] + y[6] >= 0 & [-1] + y[6] >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] + [bni_20]y[6] >= 0 & [1 + (-1)bso_21] >= 0)

(13)    (y[6] >= 0 & [1] + y[6] >= 0 & [-1] + y[6] >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] + [bni_20]y[6] >= 0 & [1 + (-1)bso_21] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])

*(x[0] >= 0 & [1] + x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] >= 0 & [(-1)bso_15] >= 0)


*(x[0] >= 0 & [1] + x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] >= 0 & [(-1)bso_15] >= 0)




*COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))

*(x[0] >= 0 & [1] + x[0] >= 0 & y[1] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)


*(x[0] >= 0 & [1] + x[0] >= 0 & y[1] >= 0  ==>  (U^Increasing(EVAL(x[1]1, +(y[1]1, 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)


*(x[7] >= 0 & [1] + x[7] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)


*(x[7] >= 0 & [1] + x[7] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_16 + (-1)Bound*bni_16] >= 0 & [(-1)bso_17] >= 0)




*EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])

*(y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_18] + [bni_18]y[6] >= 0 & [(-1)bso_19] >= 0)


*(y[6] >= 0 & [1] + y[6] >= 0 & x[6] >= 0  ==>  (U^Increasing(COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])), >=) & [(-1)Bound*bni_18] + [bni_18]y[6] >= 0 & [(-1)bso_19] >= 0)




*COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7])

*(0 >= 0 & [1] >= 0 & 0 >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)


*(0 >= 0 & [1] >= 0 & 0 >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)


*(y[1] >= 0 & [1] + y[1] >= 0 & [-1] + y[1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [1 + (-1)bso_21] >= 0)


*(y[1] >= 0 & [1] + y[1] >= 0 & [-1] + y[1] >= 0 & x[6] >= 0  ==>  (U^Increasing(EVAL(+(x[7], 1), y[7])), >=) & [(-1)Bound*bni_20] + [bni_20]y[1] >= 0 & [1 + (-1)bso_21] >= 0)


*(0 >= 0 & [1] >= 0 & 0 >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)


*(0 >= 0 & [1] >= 0 & 0 >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] >= 0 & [1 + (-1)bso_21] >= 0)


*(y[6] >= 0 & [1] + y[6] >= 0 & [-1] + y[6] >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] + [bni_20]y[6] >= 0 & [1 + (-1)bso_21] >= 0)


*(y[6] >= 0 & [1] + y[6] >= 0 & [-1] + y[6] >= 0 & x[7] >= 0  ==>  (U^Increasing(EVAL(+(x[7]1, 1), y[7]1)), >=) & [(-1)Bound*bni_20] + [bni_20]y[6] >= 0 & [1 + (-1)bso_21] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(EVAL(x_1, x_2)) = [-1] + max{0, x_2 + [-1]x_1}
   POL(COND_EVAL(x_1, x_2, x_3)) = [-1] + max{0, x_3 + [-1]x_2}
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(COND_EVAL3(x_1, x_2, x_3)) = [-1] + max{0, x_3 + [-1]x_2}
   POL(&&(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7])


The following pairs are in P_bound:


   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])
   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))
   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])
   COND_EVAL3(TRUE, x[7], y[7]) -> EVAL(+(x[7], 1), y[7])


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])
   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))
   EVAL(x[6], y[6]) -> COND_EVAL3(&&(>(y[6], x[6]), >=(y[6], x[6])), x[6], y[6])


There are no usable rules.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > y[0], x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], y[1] + 1)
(6): EVAL(x[6], y[6]) -> COND_EVAL3(y[6] > x[6] && y[6] >= x[6], x[6], y[6])

   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0])
   (0) -> (1), if (x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (6), if (x[1] ->^* x[6] & y[1] + 1 ->^* y[6])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], y[1] + 1)
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > y[0], x[0], y[0])

   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0])
   (0) -> (1), if (x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(11) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@38e21d18
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)), EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]) which results in the following constraint:

(1)    (>(x[0], y[0])=TRUE & x[0]=x[1] & y[0]=y[1] & x[1]=x[0]1 & +(y[1], 1)=y[0]1  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(x[1], +(y[1], 1)) & (U^Increasing(EVAL(x[1], +(y[1], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0])_>=_EVAL(x[0], +(y[0], 1)) & (U^Increasing(EVAL(x[1], +(y[1], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]y[0] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]y[0] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]y[0] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)

(8)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)








For Pair EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1)) which results in the following constraint:

(1)    (>(x[0], y[0])=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[0] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[0] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[0] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_13] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_13] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)

(8)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_13] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)


*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(x[1], +(y[1], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]x[0] >= 0 & [1 + (-1)bso_12] >= 0)




*EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_13] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)


*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(>(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_13] + [bni_13]x[0] >= 0 & [(-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2
   POL(EVAL(x_1, x_2)) = [-1] + [-1]x_2 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(>(x_1, x_2)) = 0


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))


The following pairs are in P_bound:


   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1], +(y[1], 1))
   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(>(x[0], y[0]), x[0], y[0])


There are no usable rules.
----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > y[0], x[0], y[0])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)
Cond_eval2(TRUE, x0, x1)
Cond_eval3(TRUE, x0, x1)

----------------------------------------

(13) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(14)
TRUE
