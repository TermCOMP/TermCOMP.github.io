YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5gF9y.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 115 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) IDP
(9) IDPNonInfProof [SOUND, 0 ms]
(10) IDP
(11) IDependencyGraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval_1(x, y) -> Cond_eval_1(x >= 0, x, y)
Cond_eval_1(TRUE, x, y) -> eval_2(x, 1)
eval_2(x, y) -> Cond_eval_2(x >= 0 && y > 0 && x > y, x, y)
Cond_eval_2(TRUE, x, y) -> eval_2(x, 2 * y)
eval_2(x, y) -> Cond_eval_21(x >= 0 && y > 0 && y >= x, x, y)
Cond_eval_21(TRUE, x, y) -> eval_1(x - 1, y)
The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
eval_1(x, y) -> Cond_eval_1(x >= 0, x, y)
Cond_eval_1(TRUE, x, y) -> eval_2(x, 1)
eval_2(x, y) -> Cond_eval_2(x >= 0 && y > 0 && x > y, x, y)
Cond_eval_2(TRUE, x, y) -> eval_2(x, 2 * y)
eval_2(x, y) -> Cond_eval_21(x >= 0 && y > 0 && y >= x, x, y)
Cond_eval_21(TRUE, x, y) -> eval_1(x - 1, y)

The integer pair graph contains the following rules and edges:
(0): EVAL_1(x[0], y[0]) -> COND_EVAL_1(x[0] >= 0, x[0], y[0])
(1): COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1)
(2): EVAL_2(x[2], y[2]) -> COND_EVAL_2(x[2] >= 0 && y[2] > 0 && x[2] > y[2], x[2], y[2])
(3): COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], 2 * y[3])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_21(x[4] >= 0 && y[4] > 0 && y[4] >= x[4], x[4], y[4])
(5): COND_EVAL_21(TRUE, x[5], y[5]) -> EVAL_1(x[5] - 1, y[5])

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (2), if (x[1] ->^* x[2] & 1 ->^* y[2])
   (1) -> (4), if (x[1] ->^* x[4] & 1 ->^* y[4])
   (2) -> (3), if (x[2] >= 0 && y[2] > 0 && x[2] > y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (2), if (x[3] ->^* x[2] & 2 * y[3] ->^* y[2])
   (3) -> (4), if (x[3] ->^* x[4] & 2 * y[3] ->^* y[4])
   (4) -> (5), if (x[4] >= 0 && y[4] > 0 && y[4] >= x[4]  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (0), if (x[5] - 1 ->^* x[0] & y[5] ->^* y[0])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL_1(x[0], y[0]) -> COND_EVAL_1(x[0] >= 0, x[0], y[0])
(1): COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1)
(2): EVAL_2(x[2], y[2]) -> COND_EVAL_2(x[2] >= 0 && y[2] > 0 && x[2] > y[2], x[2], y[2])
(3): COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], 2 * y[3])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_21(x[4] >= 0 && y[4] > 0 && y[4] >= x[4], x[4], y[4])
(5): COND_EVAL_21(TRUE, x[5], y[5]) -> EVAL_1(x[5] - 1, y[5])

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (2), if (x[1] ->^* x[2] & 1 ->^* y[2])
   (1) -> (4), if (x[1] ->^* x[4] & 1 ->^* y[4])
   (2) -> (3), if (x[2] >= 0 && y[2] > 0 && x[2] > y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (2), if (x[3] ->^* x[2] & 2 * y[3] ->^* y[2])
   (3) -> (4), if (x[3] ->^* x[4] & 2 * y[3] ->^* y[4])
   (4) -> (5), if (x[4] >= 0 && y[4] > 0 && y[4] >= x[4]  & x[4] ->^* x[5] & y[4] ->^* y[5])
   (5) -> (0), if (x[5] - 1 ->^* x[0] & y[5] ->^* y[0])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@12647dfd
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL_1(x, y) -> COND_EVAL_1(>=(x, 0), x, y) the following chains were created:
*We consider the chain EVAL_1(x[0], y[0]) -> COND_EVAL_1(>=(x[0], 0), x[0], y[0]), COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1) which results in the following constraint:

(1)    (>=(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL_1(x[0], y[0])_>=_NonInfC & EVAL_1(x[0], y[0])_>=_COND_EVAL_1(>=(x[0], 0), x[0], y[0]) & (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  EVAL_1(x[0], y[0])_>=_NonInfC & EVAL_1(x[0], y[0])_>=_COND_EVAL_1(>=(x[0], 0), x[0], y[0]) & (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=) & 0 = 0 & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [(-1)bso_25] >= 0)








For Pair COND_EVAL_1(TRUE, x, y) -> EVAL_2(x, 1) the following chains were created:
*We consider the chain EVAL_1(x[0], y[0]) -> COND_EVAL_1(>=(x[0], 0), x[0], y[0]), COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1), EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) which results in the following constraint:

(1)    (>=(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & x[1]=x[2] & 1=y[2]  ==>  COND_EVAL_1(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL_1(TRUE, x[1], y[1])_>=_EVAL_2(x[1], 1) & (U^Increasing(EVAL_2(x[1], 1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  COND_EVAL_1(TRUE, x[0], y[0])_>=_NonInfC & COND_EVAL_1(TRUE, x[0], y[0])_>=_EVAL_2(x[0], 1) & (U^Increasing(EVAL_2(x[1], 1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)




*We consider the chain EVAL_1(x[0], y[0]) -> COND_EVAL_1(>=(x[0], 0), x[0], y[0]), COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1), EVAL_2(x[4], y[4]) -> COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4]) which results in the following constraint:

(1)    (>=(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & x[1]=x[4] & 1=y[4]  ==>  COND_EVAL_1(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL_1(TRUE, x[1], y[1])_>=_EVAL_2(x[1], 1) & (U^Increasing(EVAL_2(x[1], 1)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  COND_EVAL_1(TRUE, x[0], y[0])_>=_NonInfC & COND_EVAL_1(TRUE, x[0], y[0])_>=_EVAL_2(x[0], 1) & (U^Increasing(EVAL_2(x[1], 1)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)








For Pair EVAL_2(x, y) -> COND_EVAL_2(&&(&&(>=(x, 0), >(y, 0)), >(x, y)), x, y) the following chains were created:
*We consider the chain EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]), COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3])) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL_2(x[2], y[2])_>=_NonInfC & EVAL_2(x[2], y[2])_>=_COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >=(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  EVAL_2(x[2], y[2])_>=_NonInfC & EVAL_2(x[2], y[2])_>=_COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]x[2] >= 0 & [(-1)bso_29] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]x[2] >= 0 & [(-1)bso_29] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]x[2] >= 0 & [(-1)bso_29] >= 0)








For Pair COND_EVAL_2(TRUE, x, y) -> EVAL_2(x, *(2, y)) the following chains were created:
*We consider the chain EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]), COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3])), EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[2]1 & *(2, y[3])=y[2]1  ==>  COND_EVAL_2(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_2(TRUE, x[3], y[3])_>=_EVAL_2(x[3], *(2, y[3])) & (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >=(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  COND_EVAL_2(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL_2(TRUE, x[2], y[2])_>=_EVAL_2(x[2], *(2, y[2])) & (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)




*We consider the chain EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]), COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3])), EVAL_2(x[4], y[4]) -> COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4]) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[4] & *(2, y[3])=y[4]  ==>  COND_EVAL_2(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_2(TRUE, x[3], y[3])_>=_EVAL_2(x[3], *(2, y[3])) & (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >=(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  COND_EVAL_2(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL_2(TRUE, x[2], y[2])_>=_EVAL_2(x[2], *(2, y[2])) & (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)








For Pair EVAL_2(x, y) -> COND_EVAL_21(&&(&&(>=(x, 0), >(y, 0)), >=(y, x)), x, y) the following chains were created:
*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4]), COND_EVAL_21(TRUE, x[5], y[5]) -> EVAL_1(-(x[5], 1), y[5]) which results in the following constraint:

(1)    (&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4]))=TRUE & x[4]=x[5] & y[4]=y[5]  ==>  EVAL_2(x[4], y[4])_>=_NonInfC & EVAL_2(x[4], y[4])_>=_COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4]) & (U^Increasing(COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[4], x[4])=TRUE & >=(x[4], 0)=TRUE & >(y[4], 0)=TRUE  ==>  EVAL_2(x[4], y[4])_>=_NonInfC & EVAL_2(x[4], y[4])_>=_COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4]) & (U^Increasing(COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]x[4] >= 0 & [(-1)bso_33] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]x[4] >= 0 & [(-1)bso_33] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]x[4] >= 0 & [(-1)bso_33] >= 0)








For Pair COND_EVAL_21(TRUE, x, y) -> EVAL_1(-(x, 1), y) the following chains were created:
*We consider the chain EVAL_2(x[4], y[4]) -> COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4]), COND_EVAL_21(TRUE, x[5], y[5]) -> EVAL_1(-(x[5], 1), y[5]), EVAL_1(x[0], y[0]) -> COND_EVAL_1(>=(x[0], 0), x[0], y[0]) which results in the following constraint:

(1)    (&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4]))=TRUE & x[4]=x[5] & y[4]=y[5] & -(x[5], 1)=x[0] & y[5]=y[0]  ==>  COND_EVAL_21(TRUE, x[5], y[5])_>=_NonInfC & COND_EVAL_21(TRUE, x[5], y[5])_>=_EVAL_1(-(x[5], 1), y[5]) & (U^Increasing(EVAL_1(-(x[5], 1), y[5])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[4], x[4])=TRUE & >=(x[4], 0)=TRUE & >(y[4], 0)=TRUE  ==>  COND_EVAL_21(TRUE, x[4], y[4])_>=_NonInfC & COND_EVAL_21(TRUE, x[4], y[4])_>=_EVAL_1(-(x[4], 1), y[4]) & (U^Increasing(EVAL_1(-(x[5], 1), y[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_1(-(x[5], 1), y[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]x[4] >= 0 & [1 + (-1)bso_35] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_1(-(x[5], 1), y[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]x[4] >= 0 & [1 + (-1)bso_35] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_1(-(x[5], 1), y[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]x[4] >= 0 & [1 + (-1)bso_35] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL_1(x, y) -> COND_EVAL_1(>=(x, 0), x, y)

*(x[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(x[0], 0), x[0], y[0])), >=) & 0 = 0 & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [(-1)bso_25] >= 0)




*COND_EVAL_1(TRUE, x, y) -> EVAL_2(x, 1)

*(x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)


*(x[0] >= 0  ==>  (U^Increasing(EVAL_2(x[1], 1)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)




*EVAL_2(x, y) -> COND_EVAL_2(&&(&&(>=(x, 0), >(y, 0)), >(x, y)), x, y)

*(x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]x[2] >= 0 & [(-1)bso_29] >= 0)




*COND_EVAL_2(TRUE, x, y) -> EVAL_2(x, *(2, y))

*(x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)


*(x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]x[2] >= 0 & [(-1)bso_31] >= 0)




*EVAL_2(x, y) -> COND_EVAL_21(&&(&&(>=(x, 0), >(y, 0)), >=(y, x)), x, y)

*(y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]x[4] >= 0 & [(-1)bso_33] >= 0)




*COND_EVAL_21(TRUE, x, y) -> EVAL_1(-(x, 1), y)

*(y[4] + [-1]x[4] >= 0 & x[4] >= 0 & y[4] + [-1] >= 0  ==>  (U^Increasing(EVAL_1(-(x[5], 1), y[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]x[4] >= 0 & [1 + (-1)bso_35] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [2]
   POL(EVAL_1(x_1, x_2)) = [-1] + x_1
   POL(COND_EVAL_1(x_1, x_2, x_3)) = [-1] + x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(EVAL_2(x_1, x_2)) = [-1] + x_1
   POL(1) = [1]
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1] + x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(*(x_1, x_2)) = x_1*x_2
   POL(2) = [2]
   POL(COND_EVAL_21(x_1, x_2, x_3)) = [-1] + x_2 + [-1]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2


The following pairs are in P_>:


   COND_EVAL_21(TRUE, x[5], y[5]) -> EVAL_1(-(x[5], 1), y[5])


The following pairs are in P_bound:


   EVAL_1(x[0], y[0]) -> COND_EVAL_1(>=(x[0], 0), x[0], y[0])
   COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1)
   EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])
   COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3]))
   EVAL_2(x[4], y[4]) -> COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])
   COND_EVAL_21(TRUE, x[5], y[5]) -> EVAL_1(-(x[5], 1), y[5])


The following pairs are in P_>=:


   EVAL_1(x[0], y[0]) -> COND_EVAL_1(>=(x[0], 0), x[0], y[0])
   COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1)
   EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])
   COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3]))
   EVAL_2(x[4], y[4]) -> COND_EVAL_21(&&(&&(>=(x[4], 0), >(y[4], 0)), >=(y[4], x[4])), x[4], y[4])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL_1(x[0], y[0]) -> COND_EVAL_1(x[0] >= 0, x[0], y[0])
(1): COND_EVAL_1(TRUE, x[1], y[1]) -> EVAL_2(x[1], 1)
(2): EVAL_2(x[2], y[2]) -> COND_EVAL_2(x[2] >= 0 && y[2] > 0 && x[2] > y[2], x[2], y[2])
(3): COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], 2 * y[3])
(4): EVAL_2(x[4], y[4]) -> COND_EVAL_21(x[4] >= 0 && y[4] > 0 && y[4] >= x[4], x[4], y[4])

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (2), if (x[1] ->^* x[2] & 1 ->^* y[2])
   (3) -> (2), if (x[3] ->^* x[2] & 2 * y[3] ->^* y[2])
   (2) -> (3), if (x[2] >= 0 && y[2] > 0 && x[2] > y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (1) -> (4), if (x[1] ->^* x[4] & 1 ->^* y[4])
   (3) -> (4), if (x[3] ->^* x[4] & 2 * y[3] ->^* y[4])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], 2 * y[3])
(2): EVAL_2(x[2], y[2]) -> COND_EVAL_2(x[2] >= 0 && y[2] > 0 && x[2] > y[2], x[2], y[2])

   (3) -> (2), if (x[3] ->^* x[2] & 2 * y[3] ->^* y[2])
   (2) -> (3), if (x[2] >= 0 && y[2] > 0 && x[2] > y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(9) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@12647dfd
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3])) the following chains were created:
*We consider the chain EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]), COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3])), EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[2]1 & *(2, y[3])=y[2]1  ==>  COND_EVAL_2(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL_2(TRUE, x[3], y[3])_>=_EVAL_2(x[3], *(2, y[3])) & (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >=(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  COND_EVAL_2(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL_2(TRUE, x[2], y[2])_>=_EVAL_2(x[2], *(2, y[2])) & (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[2] + [bni_13]x[2] >= 0 & [(-1)bso_14] + y[2] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[2] + [bni_13]x[2] >= 0 & [(-1)bso_14] + y[2] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[2] + [bni_13]x[2] >= 0 & [(-1)bso_14] + y[2] >= 0)








For Pair EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) the following chains were created:
*We consider the chain EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]), COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3])) which results in the following constraint:

(1)    (&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL_2(x[2], y[2])_>=_NonInfC & EVAL_2(x[2], y[2])_>=_COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >=(x[2], 0)=TRUE & >(y[2], 0)=TRUE  ==>  EVAL_2(x[2], y[2])_>=_NonInfC & EVAL_2(x[2], y[2])_>=_COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[2] + [bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[2] + [bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[2] + [bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3]))

*(x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(EVAL_2(x[3], *(2, y[3]))), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]y[2] + [bni_13]x[2] >= 0 & [(-1)bso_14] + y[2] >= 0)




*EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])

*(x[2] + [-1] + [-1]y[2] >= 0 & x[2] >= 0 & y[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]y[2] + [bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2 + [-1]x_1
   POL(EVAL_2(x_1, x_2)) = [-1] + [-1]x_2 + x_1
   POL(*(x_1, x_2)) = x_1*x_2
   POL(2) = [2]
   POL(&&(x_1, x_2)) = 0
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(>(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3]))


The following pairs are in P_bound:


   COND_EVAL_2(TRUE, x[3], y[3]) -> EVAL_2(x[3], *(2, y[3]))
   EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])


The following pairs are in P_>=:


   EVAL_2(x[2], y[2]) -> COND_EVAL_2(&&(&&(>=(x[2], 0), >(y[2], 0)), >(x[2], y[2])), x[2], y[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL_2(x[2], y[2]) -> COND_EVAL_2(x[2] >= 0 && y[2] > 0 && x[2] > y[2], x[2], y[2])


The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(12)
TRUE
