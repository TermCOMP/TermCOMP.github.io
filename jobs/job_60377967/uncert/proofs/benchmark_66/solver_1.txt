YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/slLfD.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 4 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) IDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) IDP
        (10) IDPNonInfProof [SOUND, 103 ms]
        (11) IDP
        (12) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (13) TRUE
    (14) IDP
        (15) IDPNonInfProof [SOUND, 19 ms]
        (16) IDP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
cu(TRUE, x) -> cu(x < exp(10, 2), x + 1)
exp(x, y) -> if(y > 0, x, y)
if(TRUE, x, y) -> x * exp(x, y - 1)
if(FALSE, x, y) -> 1
The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
cu(TRUE, x) -> cu(x < exp(10, 2), x + 1)
exp(x, y) -> if(y > 0, x, y)
if(TRUE, x, y) -> x * exp(x, y - 1)
if(FALSE, x, y) -> 1

The integer pair graph contains the following rules and edges:
(0): CU(TRUE, x[0]) -> CU(x[0] < exp(10, 2), x[0] + 1)
(1): CU(TRUE, x[1]) -> EXP(10, 2)
(2): EXP(x[2], y[2]) -> IF(y[2] > 0, x[2], y[2])
(3): IF(TRUE, x[3], y[3]) -> EXP(x[3], y[3] - 1)

   (0) -> (0), if (x[0] < exp(10, 2)  & x[0] + 1 ->^* x[0]')
   (0) -> (1), if (x[0] < exp(10, 2)  & x[0] + 1 ->^* x[1])
   (1) -> (2), if (10 ->^* x[2] & 2 ->^* y[2])
   (2) -> (3), if (y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])

The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
exp(x, y) -> if(y > 0, x, y)
if(TRUE, x, y) -> x * exp(x, y - 1)
if(FALSE, x, y) -> 1

The integer pair graph contains the following rules and edges:
(0): CU(TRUE, x[0]) -> CU(x[0] < exp(10, 2), x[0] + 1)
(1): CU(TRUE, x[1]) -> EXP(10, 2)
(2): EXP(x[2], y[2]) -> IF(y[2] > 0, x[2], y[2])
(3): IF(TRUE, x[3], y[3]) -> EXP(x[3], y[3] - 1)

   (0) -> (0), if (x[0] < exp(10, 2)  & x[0] + 1 ->^* x[0]')
   (0) -> (1), if (x[0] < exp(10, 2)  & x[0] + 1 ->^* x[1])
   (1) -> (2), if (10 ->^* x[2] & 2 ->^* y[2])
   (2) -> (3), if (y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])

The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
exp(x, y) -> if(y > 0, x, y)
if(TRUE, x, y) -> x * exp(x, y - 1)
if(FALSE, x, y) -> 1

The integer pair graph contains the following rules and edges:
(3): IF(TRUE, x[3], y[3]) -> EXP(x[3], y[3] - 1)
(2): EXP(x[2], y[2]) -> IF(y[2] > 0, x[2], y[2])

   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])
   (2) -> (3), if (y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): IF(TRUE, x[3], y[3]) -> EXP(x[3], y[3] - 1)
(2): EXP(x[2], y[2]) -> IF(y[2] > 0, x[2], y[2])

   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])
   (2) -> (3), if (y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(10) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@5f3134ae
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IF(TRUE, x[3], y[3]) -> EXP(x[3], -(y[3], 1)) the following chains were created:
*We consider the chain EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2]), IF(TRUE, x[3], y[3]) -> EXP(x[3], -(y[3], 1)), EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2]) which results in the following constraint:

(1)    (>(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[2]1 & -(y[3], 1)=y[2]1  ==>  IF(TRUE, x[3], y[3])_>=_NonInfC & IF(TRUE, x[3], y[3])_>=_EXP(x[3], -(y[3], 1)) & (U^Increasing(EXP(x[3], -(y[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE  ==>  IF(TRUE, x[2], y[2])_>=_NonInfC & IF(TRUE, x[2], y[2])_>=_EXP(x[2], -(y[2], 1)) & (U^Increasing(EXP(x[3], -(y[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0  ==>  (U^Increasing(EXP(x[3], -(y[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0  ==>  (U^Increasing(EXP(x[3], -(y[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0  ==>  (U^Increasing(EXP(x[3], -(y[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0  ==>  (U^Increasing(EXP(x[3], -(y[3], 1))), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [(-1)bso_12] >= 0)








For Pair EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2]) the following chains were created:
*We consider the chain EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2]), IF(TRUE, x[3], y[3]) -> EXP(x[3], -(y[3], 1)) which results in the following constraint:

(1)    (>(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EXP(x[2], y[2])_>=_NonInfC & EXP(x[2], y[2])_>=_IF(>(y[2], 0), x[2], y[2]) & (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE  ==>  EXP(x[2], y[2])_>=_NonInfC & EXP(x[2], y[2])_>=_IF(>(y[2], 0), x[2], y[2]) & (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0  ==>  (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0  ==>  (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0  ==>  (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=) & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [2 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0  ==>  (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [2 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*IF(TRUE, x[3], y[3]) -> EXP(x[3], -(y[3], 1))

*(y[2] + [-1] >= 0  ==>  (U^Increasing(EXP(x[3], -(y[3], 1))), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [(-1)bso_12] >= 0)




*EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2])

*(y[2] + [-1] >= 0  ==>  (U^Increasing(IF(>(y[2], 0), x[2], y[2])), >=) & 0 = 0 & [bni_13 + (-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [2 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(IF(x_1, x_2, x_3)) = [-1] + [2]x_3
   POL(EXP(x_1, x_2)) = [1] + [2]x_2
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(>(x_1, x_2)) = [2]
   POL(0) = 0


The following pairs are in P_>:


   EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2])


The following pairs are in P_bound:


   IF(TRUE, x[3], y[3]) -> EXP(x[3], -(y[3], 1))
   EXP(x[2], y[2]) -> IF(>(y[2], 0), x[2], y[2])


The following pairs are in P_>=:


   IF(TRUE, x[3], y[3]) -> EXP(x[3], -(y[3], 1))


There are no usable rules.
----------------------------------------

(11)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): IF(TRUE, x[3], y[3]) -> EXP(x[3], y[3] - 1)


The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(12) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(13)
TRUE

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
exp(x, y) -> if(y > 0, x, y)
if(TRUE, x, y) -> x * exp(x, y - 1)
if(FALSE, x, y) -> 1

The integer pair graph contains the following rules and edges:
(0): CU(TRUE, x[0]) -> CU(x[0] < exp(10, 2), x[0] + 1)

   (0) -> (0), if (x[0] < exp(10, 2)  & x[0] + 1 ->^* x[0]')

The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(15) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@5f3134ae
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1)) the following chains were created:
*We consider the chain CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1)), CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1)), CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1)) which results in the following constraint:

(1)    (<(x[0], exp(10, 2))=TRUE & +(x[0], 1)=x[0]1 & <(x[0]1, exp(10, 2))=TRUE & +(x[0]1, 1)=x[0]2  ==>  CU(TRUE, x[0]1)_>=_NonInfC & CU(TRUE, x[0]1)_>=_CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1)) & (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_CONSTANT_FOLD), (REWRITING) which results in the following new constraint:

(2)    (<(x[0], 100)=TRUE & <(+(x[0], 1), 100)=TRUE  ==>  CU(TRUE, +(x[0], 1))_>=_NonInfC & CU(TRUE, +(x[0], 1))_>=_CU(<(+(x[0], 1), exp(10, 2)), +(+(x[0], 1), 1)) & (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([99] + [-1]x[0] >= 0 & [98] + [-1]x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([99] + [-1]x[0] >= 0 & [98] + [-1]x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([99] + [-1]x[0] >= 0 & [98] + [-1]x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    ([99] + [-1]x[0] >= 0 & [98] + [-1]x[0] >= 0 & x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)

(7)    ([99] + x[0] >= 0 & [98] + x[0] >= 0 & x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1))

*([99] + [-1]x[0] >= 0 & [98] + [-1]x[0] >= 0 & x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)


*([99] + x[0] >= 0 & [98] + x[0] >= 0 & x[0] >= 0  ==>  (U^Increasing(CU(<(x[0]1, exp(10, 2)), +(x[0]1, 1))), >=) & [bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [1 + (-1)bso_16] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = [1]
   POL(FALSE) = 0
   POL(exp(x_1, x_2)) = [-1] + [-1]x_2 + [-1]x_1
   POL(if(x_1, x_2, x_3)) = [-1] + [-1]x_3 + [-1]x_2 + [-1]x_1
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(*(x_1, x_2)) = x_1*x_2
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(CU(x_1, x_2)) = [2] + [-1]x_2
   POL(<(x_1, x_2)) = [-1]
   POL(10) = [10]
   POL(2) = [2]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(100) = [100]


The following pairs are in P_>:


   CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1))


The following pairs are in P_bound:


   CU(TRUE, x[0]) -> CU(<(x[0], exp(10, 2)), +(x[0], 1))


The following pairs are in P_>=:

none


There are no usable rules.
----------------------------------------

(16)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
exp(x, y) -> if(y > 0, x, y)
if(TRUE, x, y) -> x * exp(x, y - 1)
if(FALSE, x, y) -> 1

The integer pair graph is empty.

The set Q consists of the following terms:
cu(TRUE, x0)
exp(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(18)
YES
