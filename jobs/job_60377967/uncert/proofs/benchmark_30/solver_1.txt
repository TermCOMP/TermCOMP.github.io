YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qKd2v.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 96 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
minus(x, x) -> 0
minus(x, y) -> cond(min(x, y), x, y)
cond(y, x, y) -> 1 + minus(x, y + 1)
min(u, v) -> if(u < v, u, v)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v
The set Q consists of the following terms:
minus(x0, x1)
cond(x0, x1, x0)
min(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
minus(x, x) -> 0
minus(x, y) -> cond(min(x, y), x, y)
cond(y, x, y) -> 1 + minus(x, y + 1)
min(u, v) -> if(u < v, u, v)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])
(1): MINUS(x[1], y[1]) -> MIN(x[1], y[1])
(2): COND(y[2], x[2], y[2]) -> MINUS(x[2], y[2] + 1)
(3): MIN(u[3], v[3]) -> IF(u[3] < v[3], u[3], v[3])

   (0) -> (2), if (min(x[0], y[0]) ->^* y[2] & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (3), if (x[1] ->^* u[3] & y[1] ->^* v[3])
   (2) -> (0), if (x[2] ->^* x[0] & y[2] + 1 ->^* y[0])
   (2) -> (1), if (x[2] ->^* x[1] & y[2] + 1 ->^* y[1])

The set Q consists of the following terms:
minus(x0, x1)
cond(x0, x1, x0)
min(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
min(u, v) -> if(u < v, u, v)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])
(1): MINUS(x[1], y[1]) -> MIN(x[1], y[1])
(2): COND(y[2], x[2], y[2]) -> MINUS(x[2], y[2] + 1)
(3): MIN(u[3], v[3]) -> IF(u[3] < v[3], u[3], v[3])

   (0) -> (2), if (min(x[0], y[0]) ->^* y[2] & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (3), if (x[1] ->^* u[3] & y[1] ->^* v[3])
   (2) -> (0), if (x[2] ->^* x[0] & y[2] + 1 ->^* y[0])
   (2) -> (1), if (x[2] ->^* x[1] & y[2] + 1 ->^* y[1])

The set Q consists of the following terms:
minus(x0, x1)
cond(x0, x1, x0)
min(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
min(u, v) -> if(u < v, u, v)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(2): COND(y[2], x[2], y[2]) -> MINUS(x[2], y[2] + 1)
(0): MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])

   (2) -> (0), if (x[2] ->^* x[0] & y[2] + 1 ->^* y[0])
   (0) -> (2), if (min(x[0], y[0]) ->^* y[2] & x[0] ->^* x[2] & y[0] ->^* y[2])

The set Q consists of the following terms:
minus(x0, x1)
cond(x0, x1, x0)
min(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@3f3cabd2
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1)) the following chains were created:
*We consider the chain MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0]), COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1)), MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0]) which results in the following constraint:

(1)    (min(x[0], y[0])=y[2] & x[0]=x[2] & y[0]=y[2] & x[2]=x[0]1 & +(y[2], 1)=y[0]1  ==>  COND(y[2], x[2], y[2])_>=_NonInfC & COND(y[2], x[2], y[2])_>=_MINUS(x[2], +(y[2], 1)) & (U^Increasing(MINUS(x[2], +(y[2], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (VII), (REWRITING) which results in the following new constraint:

(2)    (<(x[0], y[0])=x0 & if(x0, x[0], y[0])=y[0]  ==>  COND(y[0], x[0], y[0])_>=_NonInfC & COND(y[0], x[0], y[0])_>=_MINUS(x[0], +(y[0], 1)) & (U^Increasing(MINUS(x[2], +(y[2], 1))), >=))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on if(x0, x[0], y[0])=y[0] which results in the following new constraints:

(3)    (x2=x1 & <(x2, x1)=TRUE  ==>  COND(x1, x2, x1)_>=_NonInfC & COND(x1, x2, x1)_>=_MINUS(x2, +(x1, 1)) & (U^Increasing(MINUS(x[2], +(y[2], 1))), >=))

(4)    (x3=x3 & <(x4, x3)=FALSE  ==>  COND(x3, x4, x3)_>=_NonInfC & COND(x3, x4, x3)_>=_MINUS(x4, +(x3, 1)) & (U^Increasing(MINUS(x[2], +(y[2], 1))), >=))



We simplified constraint (3) using rule (III) which results in the following new constraint:

(5)    (<(x1, x1)=TRUE  ==>  COND(x1, x1, x1)_>=_NonInfC & COND(x1, x1, x1)_>=_MINUS(x1, +(x1, 1)) & (U^Increasing(MINUS(x[2], +(y[2], 1))), >=))



We simplified constraint (4) using rule (DELETE_TRIVIAL_REDUCESTO) which results in the following new constraint:

(6)    (<(x4, x3)=FALSE  ==>  COND(x3, x4, x3)_>=_NonInfC & COND(x3, x4, x3)_>=_MINUS(x4, +(x3, 1)) & (U^Increasing(MINUS(x[2], +(y[2], 1))), >=))



We simplified constraint (5) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(7)    ([-1] >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] >= 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (6) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(8)    (x4 + [-1]x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [(-1)bni_18]x3 + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (7) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(9)    ([-1] >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] >= 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (8) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(10)    (x4 + [-1]x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [(-1)bni_18]x3 + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (9) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(11)    ([-1] >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] >= 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (10) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(12)    (x4 + [-1]x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [(-1)bni_18]x3 + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (11) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(13)    ([-1] >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & 0 = 0 & [(-1)Bound*bni_18] >= 0 & 0 = 0 & [1 + (-1)bso_19] >= 0)



We simplified constraint (12) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(14)    (x4 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)



We solved constraint (13) using rule (IDP_SMT_SPLIT).We simplified constraint (14) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(15)    (x4 >= 0 & x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)

(16)    (x4 >= 0 & x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)








For Pair MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0]) the following chains were created:
*We consider the chain COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1)), MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0]), COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1)) which results in the following constraint:

(1)    (x[2]=x[0] & +(y[2], 1)=y[0] & min(x[0], y[0])=y[2]1 & x[0]=x[2]1 & y[0]=y[2]1  ==>  MINUS(x[0], y[0])_>=_NonInfC & MINUS(x[0], y[0])_>=_COND(min(x[0], y[0]), x[0], y[0]) & (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (1) using rules (III), (IV), (VII), (REWRITING) which results in the following new constraint:

(2)    (<(x[0], +(y[2], 1))=x5 & +(y[2], 1)=x6 & if(x5, x[0], x6)=+(y[2], 1)  ==>  MINUS(x[0], +(y[2], 1))_>=_NonInfC & MINUS(x[0], +(y[2], 1))_>=_COND(min(x[0], +(y[2], 1)), x[0], +(y[2], 1)) & (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on if(x5, x[0], x6)=+(y[2], 1) which results in the following new constraints:

(3)    (x8=+(y[2], 1) & <(x8, +(y[2], 1))=TRUE & +(y[2], 1)=x7  ==>  MINUS(x8, +(y[2], 1))_>=_NonInfC & MINUS(x8, +(y[2], 1))_>=_COND(min(x8, +(y[2], 1)), x8, +(y[2], 1)) & (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=))

(4)    (x9=+(y[2], 1) & <(x10, +(y[2], 1))=FALSE & +(y[2], 1)=x9  ==>  MINUS(x10, +(y[2], 1))_>=_NonInfC & MINUS(x10, +(y[2], 1))_>=_COND(min(x10, +(y[2], 1)), x10, +(y[2], 1)) & (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (3) using rules (III), (IV) which results in the following new constraint:

(5)    (<(+(y[2], 1), +(y[2], 1))=TRUE  ==>  MINUS(+(y[2], 1), +(y[2], 1))_>=_NonInfC & MINUS(+(y[2], 1), +(y[2], 1))_>=_COND(min(+(y[2], 1), +(y[2], 1)), +(y[2], 1), +(y[2], 1)) & (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (4) using rules (III), (DELETE_TRIVIAL_REDUCESTO) which results in the following new constraint:

(6)    (<(x10, +(y[2], 1))=FALSE  ==>  MINUS(x10, +(y[2], 1))_>=_NonInfC & MINUS(x10, +(y[2], 1))_>=_COND(min(x10, +(y[2], 1)), x10, +(y[2], 1)) & (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=))



We simplified constraint (5) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(7)    ([-1] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (6) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(8)    (x10 + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[2] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (8) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(9)    (x10 + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[2] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (7) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(10)    ([-1] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (9) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(11)    (x10 + [-1] + [-1]y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[2] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (10) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(12)    ([-1] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (11) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(13)    (x10 >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (12) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(14)    ([-1] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & 0 = 0 & [(-1)Bound*bni_20] >= 0 & 0 = 0 & [(-1)bso_21] >= 0)



We simplified constraint (13) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(15)    (x10 >= 0 & y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)

(16)    (x10 >= 0 & y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)



We solved constraint (14) using rule (IDP_SMT_SPLIT).




To summarize, we get the following constraints P__>=_ for the following pairs.

*COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1))

*(x4 >= 0 & x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)


*(x4 >= 0 & x3 >= 0  ==>  (U^Increasing(MINUS(x[2], +(y[2], 1))), >=) & [(-1)Bound*bni_18] + [bni_18]x4 >= 0 & [1 + (-1)bso_19] >= 0)




*MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])

*(x10 >= 0 & y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)


*(x10 >= 0 & y[2] >= 0  ==>  (U^Increasing(COND(min(x[0], y[0]), x[0], y[0])), >=) & [(-1)Bound*bni_20] + [bni_20]x10 >= 0 & [(-1)bso_21] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = [3]
   POL(FALSE) = [3]
   POL(min(x_1, x_2)) = [-1] + x_2 + [-1]x_1
   POL(if(x_1, x_2, x_3)) = [2] + x_3 + [-1]x_2 + x_1
   POL(<(x_1, x_2)) = [2]
   POL(COND(x_1, x_2, x_3)) = [-1]x_3 + x_2
   POL(MINUS(x_1, x_2)) = [-1]x_2 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]


The following pairs are in P_>:


   COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1))


The following pairs are in P_bound:


   COND(y[2], x[2], y[2]) -> MINUS(x[2], +(y[2], 1))
   MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])


The following pairs are in P_>=:


   MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   if(<(u, v), u, v)^1 -> min(u, v)^1

----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
min(u, v) -> if(u < v, u, v)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): MINUS(x[0], y[0]) -> COND(min(x[0], y[0]), x[0], y[0])


The set Q consists of the following terms:
minus(x0, x1)
cond(x0, x1, x0)
min(x0, x1)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
