YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/0VNm6.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 30 ms]
(8) AND
    (9) IDP
        (10) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (11) TRUE
    (12) IDP
        (13) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (14) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
sqrt(x) -> sqrtAcc(x, 0)
sqrtAcc(x, y) -> condAcc(y * y >= x || y < 0, x, y)
condAcc(TRUE, x, y) -> y
condAcc(FALSE, x, y) -> sqrtAcc(x, y + 1)
The set Q consists of the following terms:
sqrt(x0)
sqrtAcc(x0, x1)
condAcc(TRUE, x0, x1)
condAcc(FALSE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
sqrt(x) -> sqrtAcc(x, 0)
sqrtAcc(x, y) -> condAcc(y * y >= x || y < 0, x, y)
condAcc(TRUE, x, y) -> y
condAcc(FALSE, x, y) -> sqrtAcc(x, y + 1)

The integer pair graph contains the following rules and edges:
(0): SQRT(x[0]) -> SQRTACC(x[0], 0)
(1): SQRTACC(x[1], y[1]) -> CONDACC(y[1] * y[1] >= x[1] || y[1] < 0, x[1], y[1])
(2): CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], y[2] + 1)

   (0) -> (1), if (x[0] ->^* x[1] & 0 ->^* y[1])
   (1) -> (2), if (y[1] * y[1] >= x[1] || y[1] < 0 ->^* FALSE & x[1] ->^* x[2] & y[1] ->^* y[2])
   (2) -> (1), if (x[2] ->^* x[1] & y[2] + 1 ->^* y[1])

The set Q consists of the following terms:
sqrt(x0)
sqrtAcc(x0, x1)
condAcc(TRUE, x0, x1)
condAcc(FALSE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): SQRT(x[0]) -> SQRTACC(x[0], 0)
(1): SQRTACC(x[1], y[1]) -> CONDACC(y[1] * y[1] >= x[1] || y[1] < 0, x[1], y[1])
(2): CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], y[2] + 1)

   (0) -> (1), if (x[0] ->^* x[1] & 0 ->^* y[1])
   (1) -> (2), if (y[1] * y[1] >= x[1] || y[1] < 0 ->^* FALSE & x[1] ->^* x[2] & y[1] ->^* y[2])
   (2) -> (1), if (x[2] ->^* x[1] & y[2] + 1 ->^* y[1])

The set Q consists of the following terms:
sqrt(x0)
sqrtAcc(x0, x1)
condAcc(TRUE, x0, x1)
condAcc(FALSE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(2): CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], y[2] + 1)
(1): SQRTACC(x[1], y[1]) -> CONDACC(y[1] * y[1] >= x[1] || y[1] < 0, x[1], y[1])

   (2) -> (1), if (x[2] ->^* x[1] & y[2] + 1 ->^* y[1])
   (1) -> (2), if (y[1] * y[1] >= x[1] || y[1] < 0 ->^* FALSE & x[1] ->^* x[2] & y[1] ->^* y[2])

The set Q consists of the following terms:
sqrt(x0)
sqrtAcc(x0, x1)
condAcc(TRUE, x0, x1)
condAcc(FALSE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpCand1ShapeHeuristic@a808a77
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 2
Max Right Steps: 0



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1)) the following chains were created:
*We consider the chain CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1)), SQRTACC(x[1], y[1]) -> CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1]), CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1)) which results in the following constraint:

(1)    (x[2]=x[1] & +(y[2], 1)=y[1] & ||(>=(*(y[1], y[1]), x[1]), <(y[1], 0))=FALSE & x[1]=x[2]1 & y[1]=y[2]1  ==>  CONDACC(FALSE, x[2]1, y[2]1)_>=_NonInfC & CONDACC(FALSE, x[2]1, y[2]1)_>=_SQRTACC(x[2]1, +(y[2]1, 1)) & (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(*(+(y[2], 1), +(y[2], 1)), x[1])=FALSE & <(+(y[2], 1), 0)=FALSE  ==>  CONDACC(FALSE, x[1], +(y[2], 1))_>=_NonInfC & CONDACC(FALSE, x[1], +(y[2], 1))_>=_SQRTACC(x[1], +(+(y[2], 1), 1)) & (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-2] + [-1]y[2]^2 + [-2]y[2] >= 0 & y[2] + [1] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-2)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] + [(-1)bni_12]y[2] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-2] + [-1]y[2]^2 + [-2]y[2] >= 0 & y[2] + [1] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-2)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] + [(-1)bni_12]y[2] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [1] >= 0 & x[1] + [-2] + [-1]y[2]^2 + [-2]y[2] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-2)bni_12 + (-1)Bound*bni_12] + [bni_12]x[1] + [(-1)bni_12]y[2] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [1] >= 0 & x[1] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-1)Bound*bni_12] + [bni_12]y[2]^2 + [bni_12]y[2] + [bni_12]x[1] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (y[2] + [1] >= 0 & x[1] >= 0 & y[2] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-1)Bound*bni_12] + [bni_12]y[2]^2 + [bni_12]y[2] + [bni_12]x[1] >= 0 & [(-1)bso_13] >= 0)

(8)    ([-1]y[2] + [1] >= 0 & x[1] >= 0 & y[2] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-1)Bound*bni_12] + [bni_12]y[2]^2 + [(-1)bni_12]y[2] + [bni_12]x[1] >= 0 & [(-1)bso_13] >= 0)








For Pair SQRTACC(x[1], y[1]) -> CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1]) the following chains were created:
*We consider the chain SQRTACC(x[1], y[1]) -> CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1]), CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1)) which results in the following constraint:

(1)    (||(>=(*(y[1], y[1]), x[1]), <(y[1], 0))=FALSE & x[1]=x[2] & y[1]=y[2]  ==>  SQRTACC(x[1], y[1])_>=_NonInfC & SQRTACC(x[1], y[1])_>=_CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1]) & (U^Increasing(CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(*(y[1], y[1]), x[1])=FALSE & <(y[1], 0)=FALSE  ==>  SQRTACC(x[1], y[1])_>=_NonInfC & SQRTACC(x[1], y[1])_>=_CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1]) & (U^Increasing(CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-1] + [-1]y[1]^2 >= 0 & y[1] >= 0  ==>  (U^Increasing(CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[1] + [(-1)bni_14]y[1] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-1] + [-1]y[1]^2 >= 0 & y[1] >= 0  ==>  (U^Increasing(CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[1] + [(-1)bni_14]y[1] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[1] >= 0 & x[1] + [-1] + [-1]y[1]^2 >= 0  ==>  (U^Increasing(CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[1] + [(-1)bni_14]y[1] >= 0 & [1 + (-1)bso_15] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1))

*(y[2] + [1] >= 0 & x[1] >= 0 & y[2] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-1)Bound*bni_12] + [bni_12]y[2]^2 + [bni_12]y[2] + [bni_12]x[1] >= 0 & [(-1)bso_13] >= 0)


*([-1]y[2] + [1] >= 0 & x[1] >= 0 & y[2] >= 0  ==>  (U^Increasing(SQRTACC(x[2]1, +(y[2]1, 1))), >=) & [(-1)Bound*bni_12] + [bni_12]y[2]^2 + [(-1)bni_12]y[2] + [bni_12]x[1] >= 0 & [(-1)bso_13] >= 0)




*SQRTACC(x[1], y[1]) -> CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])

*(y[1] >= 0 & x[1] + [-1] + [-1]y[1]^2 >= 0  ==>  (U^Increasing(CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[1] + [(-1)bni_14]y[1] >= 0 & [1 + (-1)bso_15] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(CONDACC(x_1, x_2, x_3)) = [-1] + x_2 + [-1]x_3
   POL(SQRTACC(x_1, x_2)) = x_1 + [-1]x_2
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(||(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]
   POL(*(x_1, x_2)) = x_1*x_2
   POL(<(x_1, x_2)) = [-1]
   POL(0) = 0


The following pairs are in P_>:


   SQRTACC(x[1], y[1]) -> CONDACC(||(>=(*(y[1], y[1]), x[1]), <(y[1], 0)), x[1], y[1])


The following pairs are in P_bound:


   CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1))


The following pairs are in P_>=:


   CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], +(y[2], 1))


There are no usable rules.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): CONDACC(FALSE, x[2], y[2]) -> SQRTACC(x[2], y[2] + 1)


The set Q consists of the following terms:
sqrt(x0)
sqrtAcc(x0, x1)
condAcc(TRUE, x0, x1)
condAcc(FALSE, x0, x1)

----------------------------------------

(10) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(11)
TRUE

----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): SQRTACC(x[1], y[1]) -> CONDACC(y[1] * y[1] >= x[1] || y[1] < 0, x[1], y[1])


The set Q consists of the following terms:
sqrt(x0)
sqrtAcc(x0, x1)
condAcc(TRUE, x0, x1)
condAcc(FALSE, x0, x1)

----------------------------------------

(13) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(14)
TRUE
