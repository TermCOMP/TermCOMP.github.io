YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qFf77.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 265 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) IDP
(9) IDPNonInfProof [SOUND, 47 ms]
(10) IDP
(11) IDependencyGraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
f(x, y, z) -> Cond_f(x > y && x > z, x, y, z)
Cond_f(TRUE, x, y, z) -> f(x, y + 1, z)
f(x, y, z) -> Cond_f1(x > y && x > z, x, y, z)
Cond_f1(TRUE, x, y, z) -> f(x, y, z + 1)
The set Q consists of the following terms:
f(x0, x1, x2)
Cond_f(TRUE, x0, x1, x2)
Cond_f1(TRUE, x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
f(x, y, z) -> Cond_f(x > y && x > z, x, y, z)
Cond_f(TRUE, x, y, z) -> f(x, y + 1, z)
f(x, y, z) -> Cond_f1(x > y && x > z, x, y, z)
Cond_f1(TRUE, x, y, z) -> f(x, y, z + 1)

The integer pair graph contains the following rules and edges:
(0): F(x[0], y[0], z[0]) -> COND_F(x[0] > y[0] && x[0] > z[0], x[0], y[0], z[0])
(1): COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], y[1] + 1, z[1])
(2): F(x[2], y[2], z[2]) -> COND_F1(x[2] > y[2] && x[2] > z[2], x[2], y[2], z[2])
(3): COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], z[3] + 1)

   (0) -> (1), if (x[0] > y[0] && x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0] & z[1] ->^* z[0])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] + 1 ->^* y[2] & z[1] ->^* z[2])
   (2) -> (3), if (x[2] > y[2] && x[2] > z[2]  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] ->^* y[0] & z[3] + 1 ->^* z[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] ->^* y[2] & z[3] + 1 ->^* z[2])

The set Q consists of the following terms:
f(x0, x1, x2)
Cond_f(TRUE, x0, x1, x2)
Cond_f1(TRUE, x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): F(x[0], y[0], z[0]) -> COND_F(x[0] > y[0] && x[0] > z[0], x[0], y[0], z[0])
(1): COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], y[1] + 1, z[1])
(2): F(x[2], y[2], z[2]) -> COND_F1(x[2] > y[2] && x[2] > z[2], x[2], y[2], z[2])
(3): COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], z[3] + 1)

   (0) -> (1), if (x[0] > y[0] && x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0] & z[1] ->^* z[0])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] + 1 ->^* y[2] & z[1] ->^* z[2])
   (2) -> (3), if (x[2] > y[2] && x[2] > z[2]  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] ->^* y[0] & z[3] + 1 ->^* z[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] ->^* y[2] & z[3] + 1 ->^* z[2])

The set Q consists of the following terms:
f(x0, x1, x2)
Cond_f(TRUE, x0, x1, x2)
Cond_f1(TRUE, x0, x1, x2)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@304ecb8b
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair F(x, y, z) -> COND_F(&&(>(x, y), >(x, z)), x, y, z) the following chains were created:
*We consider the chain F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]), COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1]) which results in the following constraint:

(1)    (&&(>(x[0], y[0]), >(x[0], z[0]))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  F(x[0], y[0], z[0])_>=_NonInfC & F(x[0], y[0], z[0])_>=_COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) & (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE & >(x[0], z[0])=TRUE  ==>  F(x[0], y[0], z[0])_>=_NonInfC & F(x[0], y[0], z[0])_>=_COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) & (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]z[0] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]z[0] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]z[0] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & y[0] + x[0] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_19] + [(-1)bni_19]z[0] + [bni_19]y[0] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_19] + [bni_19]z[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_19] + [bni_19]z[0] >= 0 & [(-1)bso_20] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_19] + [bni_19]z[0] >= 0 & [(-1)bso_20] >= 0)








For Pair COND_F(TRUE, x, y, z) -> F(x, +(y, 1), z) the following chains were created:
*We consider the chain F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]), COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1]), F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(>(x[0], y[0]), >(x[0], z[0]))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & x[1]=x[0]1 & +(y[1], 1)=y[0]1 & z[1]=z[0]1  ==>  COND_F(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_F(TRUE, x[1], y[1], z[1])_>=_F(x[1], +(y[1], 1), z[1]) & (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE & >(x[0], z[0])=TRUE  ==>  COND_F(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_F(TRUE, x[0], y[0], z[0])_>=_F(x[0], +(y[0], 1), z[0]) & (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & y[0] + x[0] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]y[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)




*We consider the chain F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]), COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1]), F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(>(x[0], y[0]), >(x[0], z[0]))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & x[1]=x[2] & +(y[1], 1)=y[2] & z[1]=z[2]  ==>  COND_F(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_F(TRUE, x[1], y[1], z[1])_>=_F(x[1], +(y[1], 1), z[1]) & (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE & >(x[0], z[0])=TRUE  ==>  COND_F(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_F(TRUE, x[0], y[0], z[0])_>=_F(x[0], +(y[0], 1), z[0]) & (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & y[0] + x[0] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [(-1)bni_21]z[0] + [bni_21]y[0] + [bni_21]x[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)








For Pair F(x, y, z) -> COND_F1(&&(>(x, y), >(x, z)), x, y, z) the following chains were created:
*We consider the chain F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], +(z[3], 1)) which results in the following constraint:

(1)    (&&(>(x[2], y[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  F(x[2], y[2], z[2])_>=_NonInfC & F(x[2], y[2], z[2])_>=_COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]) & (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >(x[2], z[2])=TRUE  ==>  F(x[2], y[2], z[2])_>=_NonInfC & F(x[2], y[2], z[2])_>=_COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]) & (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[2] >= 0 & y[2] + x[2] + [-1]z[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_23] + [(-1)bni_23]z[2] + [bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_23] + [bni_23]z[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_23] + [bni_23]z[2] >= 0 & [(-1)bso_24] >= 0)

(9)    (x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_23] + [bni_23]z[2] >= 0 & [(-1)bso_24] >= 0)








For Pair COND_F1(TRUE, x, y, z) -> F(x, y, +(z, 1)) the following chains were created:
*We consider the chain F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], +(z[3], 1)), F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(>(x[2], y[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[0] & y[3]=y[0] & +(z[3], 1)=z[0]  ==>  COND_F1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_F1(TRUE, x[3], y[3], z[3])_>=_F(x[3], y[3], +(z[3], 1)) & (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >(x[2], z[2])=TRUE  ==>  COND_F1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_F1(TRUE, x[2], y[2], z[2])_>=_F(x[2], y[2], +(z[2], 1)) & (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[2] >= 0 & y[2] + x[2] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)

(9)    (x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)




*We consider the chain F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]), COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], +(z[3], 1)), F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(>(x[2], y[2]), >(x[2], z[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[2]1 & y[3]=y[2]1 & +(z[3], 1)=z[2]1  ==>  COND_F1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_F1(TRUE, x[3], y[3], z[3])_>=_F(x[3], y[3], +(z[3], 1)) & (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[2], y[2])=TRUE & >(x[2], z[2])=TRUE  ==>  COND_F1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_F1(TRUE, x[2], y[2], z[2])_>=_F(x[2], y[2], +(z[2], 1)) & (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[2] + [-1] + [-1]y[2] >= 0 & x[2] + [-1] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[2] >= 0 & y[2] + x[2] + [-1]z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [(-1)bni_25]z[2] + [bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)

(9)    (x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*F(x, y, z) -> COND_F(&&(>(x, y), >(x, z)), x, y, z)

*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_19] + [bni_19]z[0] >= 0 & [(-1)bso_20] >= 0)


*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_19] + [bni_19]z[0] >= 0 & [(-1)bso_20] >= 0)




*COND_F(TRUE, x, y, z) -> F(x, +(y, 1), z)

*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)


*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)


*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)


*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_21] + [bni_21]z[0] >= 0 & [(-1)bso_22] >= 0)




*F(x, y, z) -> COND_F1(&&(>(x, y), >(x, z)), x, y, z)

*(x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_23] + [bni_23]z[2] >= 0 & [(-1)bso_24] >= 0)


*(x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])), >=) & [(-1)Bound*bni_23] + [bni_23]z[2] >= 0 & [(-1)bso_24] >= 0)




*COND_F1(TRUE, x, y, z) -> F(x, y, +(z, 1))

*(x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)


*(x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)


*(x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)


*(x[2] >= 0 & z[2] >= 0 & y[2] >= 0  ==>  (U^Increasing(F(x[3], y[3], +(z[3], 1))), >=) & [(-1)Bound*bni_25] + [bni_25]z[2] >= 0 & [1 + (-1)bso_26] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(F(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_1
   POL(COND_F(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2
   POL(&&(x_1, x_2)) = [-1]
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(COND_F1(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2


The following pairs are in P_>:


   COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], +(z[3], 1))


The following pairs are in P_bound:


   F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])
   COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1])
   F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])
   COND_F1(TRUE, x[3], y[3], z[3]) -> F(x[3], y[3], +(z[3], 1))


The following pairs are in P_>=:


   F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])
   COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1])
   F(x[2], y[2], z[2]) -> COND_F1(&&(>(x[2], y[2]), >(x[2], z[2])), x[2], y[2], z[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): F(x[0], y[0], z[0]) -> COND_F(x[0] > y[0] && x[0] > z[0], x[0], y[0], z[0])
(1): COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], y[1] + 1, z[1])
(2): F(x[2], y[2], z[2]) -> COND_F1(x[2] > y[2] && x[2] > z[2], x[2], y[2], z[2])

   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0] & z[1] ->^* z[0])
   (0) -> (1), if (x[0] > y[0] && x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] ->^* x[2] & y[1] + 1 ->^* y[2] & z[1] ->^* z[2])

The set Q consists of the following terms:
f(x0, x1, x2)
Cond_f(TRUE, x0, x1, x2)
Cond_f1(TRUE, x0, x1, x2)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], y[1] + 1, z[1])
(0): F(x[0], y[0], z[0]) -> COND_F(x[0] > y[0] && x[0] > z[0], x[0], y[0], z[0])

   (1) -> (0), if (x[1] ->^* x[0] & y[1] + 1 ->^* y[0] & z[1] ->^* z[0])
   (0) -> (1), if (x[0] > y[0] && x[0] > z[0]  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])

The set Q consists of the following terms:
f(x0, x1, x2)
Cond_f(TRUE, x0, x1, x2)
Cond_f1(TRUE, x0, x1, x2)

----------------------------------------

(9) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@304ecb8b
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1]) the following chains were created:
*We consider the chain F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]), COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1]), F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(>(x[0], y[0]), >(x[0], z[0]))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & x[1]=x[0]1 & +(y[1], 1)=y[0]1 & z[1]=z[0]1  ==>  COND_F(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_F(TRUE, x[1], y[1], z[1])_>=_F(x[1], +(y[1], 1), z[1]) & (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE & >(x[0], z[0])=TRUE  ==>  COND_F(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_F(TRUE, x[0], y[0], z[0])_>=_F(x[0], +(y[0], 1), z[0]) & (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(-1)bni_14]y[0] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(-1)bni_14]y[0] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)bni_14 + (-1)Bound*bni_14] + [(-1)bni_14]y[0] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & y[0] + x[0] + [-1]z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)








For Pair F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) the following chains were created:
*We consider the chain F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]), COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1]) which results in the following constraint:

(1)    (&&(>(x[0], y[0]), >(x[0], z[0]))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  F(x[0], y[0], z[0])_>=_NonInfC & F(x[0], y[0], z[0])_>=_COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) & (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], y[0])=TRUE & >(x[0], z[0])=TRUE  ==>  F(x[0], y[0], z[0])_>=_NonInfC & F(x[0], y[0], z[0])_>=_COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0]) & (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]y[0] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]y[0] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(-1)bni_16]y[0] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (x[0] >= 0 & y[0] + x[0] + [-1]z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_16] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (x[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_16] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(8)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_16] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)

(9)    (x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_16] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1])

*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)


*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(F(x[1], +(y[1], 1), z[1])), >=) & [(-1)Bound*bni_14] + [bni_14]x[0] >= 0 & [1 + (-1)bso_15] >= 0)




*F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])

*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_16] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)


*(x[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])), >=) & [(-1)Bound*bni_16] + [bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(COND_F(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_3 + x_2 + [-1]x_1
   POL(F(x_1, x_2, x_3)) = [-1] + [-1]x_2 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1])


The following pairs are in P_bound:


   COND_F(TRUE, x[1], y[1], z[1]) -> F(x[1], +(y[1], 1), z[1])
   F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])


The following pairs are in P_>=:


   F(x[0], y[0], z[0]) -> COND_F(&&(>(x[0], y[0]), >(x[0], z[0])), x[0], y[0], z[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): F(x[0], y[0], z[0]) -> COND_F(x[0] > y[0] && x[0] > z[0], x[0], y[0], z[0])


The set Q consists of the following terms:
f(x0, x1, x2)
Cond_f(TRUE, x0, x1, x2)
Cond_f1(TRUE, x0, x1, x2)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(12)
TRUE
