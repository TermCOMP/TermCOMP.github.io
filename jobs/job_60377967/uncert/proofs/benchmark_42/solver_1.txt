YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nqAJb.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 146 ms]
(8) AND
    (9) IDP
        (10) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (11) TRUE
    (12) IDP
        (13) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (14) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
f(TRUE, x, y) -> fNat(x >= 0 && y >= 0, x, y)
fNat(TRUE, x, y) -> f(x > y, trunc(x), y + 1)
trunc(x) -> if(x % 2 = 0, x, x - 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v
The set Q consists of the following terms:
f(TRUE, x0, x1)
fNat(TRUE, x0, x1)
trunc(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
f(TRUE, x, y) -> fNat(x >= 0 && y >= 0, x, y)
fNat(TRUE, x, y) -> f(x > y, trunc(x), y + 1)
trunc(x) -> if(x % 2 = 0, x, x - 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): F(TRUE, x[0], y[0]) -> FNAT(x[0] >= 0 && y[0] >= 0, x[0], y[0])
(1): FNAT(TRUE, x[1], y[1]) -> F(x[1] > y[1], trunc(x[1]), y[1] + 1)
(2): FNAT(TRUE, x[2], y[2]) -> TRUNC(x[2])
(3): TRUNC(x[3]) -> IF(x[3] % 2 = 0, x[3], x[3] - 1)

   (0) -> (1), if (x[0] >= 0 && y[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (0) -> (2), if (x[0] >= 0 && y[0] >= 0  & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (0), if (x[1] > y[1]  & trunc(x[1]) ->^* x[0] & y[1] + 1 ->^* y[0])
   (2) -> (3), if (x[2] ->^* x[3])

The set Q consists of the following terms:
f(TRUE, x0, x1)
fNat(TRUE, x0, x1)
trunc(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
trunc(x) -> if(x % 2 = 0, x, x - 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): F(TRUE, x[0], y[0]) -> FNAT(x[0] >= 0 && y[0] >= 0, x[0], y[0])
(1): FNAT(TRUE, x[1], y[1]) -> F(x[1] > y[1], trunc(x[1]), y[1] + 1)
(2): FNAT(TRUE, x[2], y[2]) -> TRUNC(x[2])
(3): TRUNC(x[3]) -> IF(x[3] % 2 = 0, x[3], x[3] - 1)

   (0) -> (1), if (x[0] >= 0 && y[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (0) -> (2), if (x[0] >= 0 && y[0] >= 0  & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (0), if (x[1] > y[1]  & trunc(x[1]) ->^* x[0] & y[1] + 1 ->^* y[0])
   (2) -> (3), if (x[2] ->^* x[3])

The set Q consists of the following terms:
f(TRUE, x0, x1)
fNat(TRUE, x0, x1)
trunc(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
trunc(x) -> if(x % 2 = 0, x, x - 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(1): FNAT(TRUE, x[1], y[1]) -> F(x[1] > y[1], trunc(x[1]), y[1] + 1)
(0): F(TRUE, x[0], y[0]) -> FNAT(x[0] >= 0 && y[0] >= 0, x[0], y[0])

   (1) -> (0), if (x[1] > y[1]  & trunc(x[1]) ->^* x[0] & y[1] + 1 ->^* y[0])
   (0) -> (1), if (x[0] >= 0 && y[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1])

The set Q consists of the following terms:
f(TRUE, x0, x1)
fNat(TRUE, x0, x1)
trunc(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpCand1ShapeHeuristic@2929728e
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 2
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1)) the following chains were created:
*We consider the chain FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1)), F(TRUE, x[0], y[0]) -> FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0]), FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1)), F(TRUE, x[0], y[0]) -> FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0]) which results in the following constraint:

(1)    (>(x[1], y[1])=TRUE & trunc(x[1])=x[0] & +(y[1], 1)=y[0] & &&(>=(x[0], 0), >=(y[0], 0))=TRUE & x[0]=x[1]1 & y[0]=y[1]1 & >(x[1]1, y[1]1)=TRUE & trunc(x[1]1)=x[0]1 & +(y[1]1, 1)=y[0]1  ==>  FNAT(TRUE, x[1]1, y[1]1)_>=_NonInfC & FNAT(TRUE, x[1]1, y[1]1)_>=_F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1)) & (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN), (REWRITING) which results in the following new constraint:

(2)    (>(x[1], y[1])=TRUE & >(x[0], +(y[1], 1))=TRUE & if(=(%(x[1], 2), 0), x[1], -(x[1], 1))=x[0] & >=(x[0], 0)=TRUE & >=(+(y[1], 1), 0)=TRUE  ==>  FNAT(TRUE, x[0], +(y[1], 1))_>=_NonInfC & FNAT(TRUE, x[0], +(y[1], 1))_>=_F(>(x[0], +(y[1], 1)), trunc(x[0]), +(+(y[1], 1), 1)) & (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-1] + [-1]y[1] >= 0 & x[0] + [-2] + [-1]y[1] >= 0 & x[0] >= 0 & y[1] + [1] >= 0  ==>  (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=) & [(-2)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[1] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-1] + [-1]y[1] >= 0 & x[0] + [-2] + [-1]y[1] >= 0 & x[0] >= 0 & y[1] + [1] >= 0  ==>  (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=) & [(-2)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[1] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[1] + [-1] + [-1]y[1] >= 0 & x[0] + [-2] + [-1]y[1] >= 0 & x[0] >= 0 & y[1] + [1] >= 0  ==>  (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=) & [(-2)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[1] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[1] >= 0 & x[0] + [-1] + [-1]x[1] + y[1] >= 0 & x[0] >= 0 & x[1] + [-1]y[1] >= 0  ==>  (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]x[1] + [bni_19]y[1] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)








For Pair F(TRUE, x[0], y[0]) -> FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0]) the following chains were created:
*We consider the chain F(TRUE, x[0], y[0]) -> FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0]), FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1)) which results in the following constraint:

(1)    (&&(>=(x[0], 0), >=(y[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  F(TRUE, x[0], y[0])_>=_NonInfC & F(TRUE, x[0], y[0])_>=_FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0]) & (U^Increasing(FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE & >=(y[0], 0)=TRUE  ==>  F(TRUE, x[0], y[0])_>=_NonInfC & F(TRUE, x[0], y[0])_>=_FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0]) & (U^Increasing(FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])), >=) & [(-1)Bound*bni_21] + [(-1)bni_21]y[0] + [bni_21]x[0] >= 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])), >=) & [(-1)Bound*bni_21] + [(-1)bni_21]y[0] + [bni_21]x[0] >= 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])), >=) & [(-1)Bound*bni_21] + [(-1)bni_21]y[0] + [bni_21]x[0] >= 0 & [1 + (-1)bso_22] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1))

*(y[1] >= 0 & x[0] + [-1] + [-1]x[1] + y[1] >= 0 & x[0] >= 0 & x[1] + [-1]y[1] >= 0  ==>  (U^Increasing(F(>(x[1]1, y[1]1), trunc(x[1]1), +(y[1]1, 1))), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]x[1] + [bni_19]y[1] + [bni_19]x[0] >= 0 & [(-1)bso_20] >= 0)




*F(TRUE, x[0], y[0]) -> FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])

*(x[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])), >=) & [(-1)Bound*bni_21] + [(-1)bni_21]y[0] + [bni_21]x[0] >= 0 & [1 + (-1)bso_22] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(trunc(x_1)) = x_1
   POL(if(x_1, x_2, x_3)) = max{x_3, x_2}
   POL(=(x_1, x_2)) = [-1]
   POL(2) = [2]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(FNAT(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2
   POL(F(x_1, x_2, x_3)) = [-1]x_3 + x_2
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(&&(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]


The following pairs are in P_>:


   F(TRUE, x[0], y[0]) -> FNAT(&&(>=(x[0], 0), >=(y[0], 0)), x[0], y[0])


The following pairs are in P_bound:


   FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1))


The following pairs are in P_>=:


   FNAT(TRUE, x[1], y[1]) -> F(>(x[1], y[1]), trunc(x[1]), +(y[1], 1))


At least the following rules have been oriented under context sensitive arithmetic replacement:

   trunc(x)^1 -> if(=(%(x, 2), 0), x, -(x, 1))^1
   if(TRUE, u, v)^1 -> u^1
   if(FALSE, u, v)^1 -> v^1

----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
trunc(x) -> if(x % 2 = 0, x, x - 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(1): FNAT(TRUE, x[1], y[1]) -> F(x[1] > y[1], trunc(x[1]), y[1] + 1)


The set Q consists of the following terms:
f(TRUE, x0, x1)
fNat(TRUE, x0, x1)
trunc(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(10) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(11)
TRUE

----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
trunc(x) -> if(x % 2 = 0, x, x - 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): F(TRUE, x[0], y[0]) -> FNAT(x[0] >= 0 && y[0] >= 0, x[0], y[0])


The set Q consists of the following terms:
f(TRUE, x0, x1)
fNat(TRUE, x0, x1)
trunc(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(13) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(14)
TRUE
