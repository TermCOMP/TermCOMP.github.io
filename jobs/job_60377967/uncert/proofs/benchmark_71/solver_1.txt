YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zhBZv.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 69 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
b10(sv14_14, sv23_37, sv24_38) -> b14(sv14_14, sv23_37, sv24_38)
Cond_b14(TRUE, sv14_14, sv23_37, sv24_38) -> b15(sv14_14, sv23_37, sv24_38)
b15(sv14_14, sv23_37, sv24_38) -> b10(sv14_14, sv23_37 - sv14_14, sv24_38 + 1)
b14(sv14_14, sv23_37, sv24_38) -> Cond_b14(sv23_37 >= sv14_14 && 1 < sv14_14, sv14_14, sv23_37, sv24_38)
The set Q consists of the following terms:
b10(x0, x1, x2)
Cond_b14(TRUE, x0, x1, x2)
b15(x0, x1, x2)
b14(x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
b10(sv14_14, sv23_37, sv24_38) -> b14(sv14_14, sv23_37, sv24_38)
Cond_b14(TRUE, sv14_14, sv23_37, sv24_38) -> b15(sv14_14, sv23_37, sv24_38)
b15(sv14_14, sv23_37, sv24_38) -> b10(sv14_14, sv23_37 - sv14_14, sv24_38 + 1)
b14(sv14_14, sv23_37, sv24_38) -> Cond_b14(sv23_37 >= sv14_14 && 1 < sv14_14, sv14_14, sv23_37, sv24_38)

The integer pair graph contains the following rules and edges:
(0): B10(sv14_14[0], sv23_37[0], sv24_38[0]) -> B14(sv14_14[0], sv23_37[0], sv24_38[0])
(1): COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1])
(2): B15(sv14_14[2], sv23_37[2], sv24_38[2]) -> B10(sv14_14[2], sv23_37[2] - sv14_14[2], sv24_38[2] + 1)
(3): B14(sv14_14[3], sv23_37[3], sv24_38[3]) -> COND_B14(sv23_37[3] >= sv14_14[3] && 1 < sv14_14[3], sv14_14[3], sv23_37[3], sv24_38[3])

   (0) -> (3), if (sv14_14[0] ->^* sv14_14[3] & sv23_37[0] ->^* sv23_37[3] & sv24_38[0] ->^* sv24_38[3])
   (1) -> (2), if (sv14_14[1] ->^* sv14_14[2] & sv23_37[1] ->^* sv23_37[2] & sv24_38[1] ->^* sv24_38[2])
   (2) -> (0), if (sv14_14[2] ->^* sv14_14[0] & sv23_37[2] - sv14_14[2] ->^* sv23_37[0] & sv24_38[2] + 1 ->^* sv24_38[0])
   (3) -> (1), if (sv23_37[3] >= sv14_14[3] && 1 < sv14_14[3]  & sv14_14[3] ->^* sv14_14[1] & sv23_37[3] ->^* sv23_37[1] & sv24_38[3] ->^* sv24_38[1])

The set Q consists of the following terms:
b10(x0, x1, x2)
Cond_b14(TRUE, x0, x1, x2)
b15(x0, x1, x2)
b14(x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(0): B10(sv14_14[0], sv23_37[0], sv24_38[0]) -> B14(sv14_14[0], sv23_37[0], sv24_38[0])
(1): COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1])
(2): B15(sv14_14[2], sv23_37[2], sv24_38[2]) -> B10(sv14_14[2], sv23_37[2] - sv14_14[2], sv24_38[2] + 1)
(3): B14(sv14_14[3], sv23_37[3], sv24_38[3]) -> COND_B14(sv23_37[3] >= sv14_14[3] && 1 < sv14_14[3], sv14_14[3], sv23_37[3], sv24_38[3])

   (0) -> (3), if (sv14_14[0] ->^* sv14_14[3] & sv23_37[0] ->^* sv23_37[3] & sv24_38[0] ->^* sv24_38[3])
   (1) -> (2), if (sv14_14[1] ->^* sv14_14[2] & sv23_37[1] ->^* sv23_37[2] & sv24_38[1] ->^* sv24_38[2])
   (2) -> (0), if (sv14_14[2] ->^* sv14_14[0] & sv23_37[2] - sv14_14[2] ->^* sv23_37[0] & sv24_38[2] + 1 ->^* sv24_38[0])
   (3) -> (1), if (sv23_37[3] >= sv14_14[3] && 1 < sv14_14[3]  & sv14_14[3] ->^* sv14_14[1] & sv23_37[3] ->^* sv23_37[1] & sv24_38[3] ->^* sv24_38[1])

The set Q consists of the following terms:
b10(x0, x1, x2)
Cond_b14(TRUE, x0, x1, x2)
b15(x0, x1, x2)
b14(x0, x1, x2)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@d5dcb7a
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair B10(sv14_14, sv23_37, sv24_38) -> B14(sv14_14, sv23_37, sv24_38) the following chains were created:
*We consider the chain B10(sv14_14[0], sv23_37[0], sv24_38[0]) -> B14(sv14_14[0], sv23_37[0], sv24_38[0]), B14(sv14_14[3], sv23_37[3], sv24_38[3]) -> COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3]) which results in the following constraint:

(1)    (sv14_14[0]=sv14_14[3] & sv23_37[0]=sv23_37[3] & sv24_38[0]=sv24_38[3]  ==>  B10(sv14_14[0], sv23_37[0], sv24_38[0])_>=_NonInfC & B10(sv14_14[0], sv23_37[0], sv24_38[0])_>=_B14(sv14_14[0], sv23_37[0], sv24_38[0]) & (U^Increasing(B14(sv14_14[0], sv23_37[0], sv24_38[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (B10(sv14_14[0], sv23_37[0], sv24_38[0])_>=_NonInfC & B10(sv14_14[0], sv23_37[0], sv24_38[0])_>=_B14(sv14_14[0], sv23_37[0], sv24_38[0]) & (U^Increasing(B14(sv14_14[0], sv23_37[0], sv24_38[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(B14(sv14_14[0], sv23_37[0], sv24_38[0])), >=) & [bni_23] = 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(B14(sv14_14[0], sv23_37[0], sv24_38[0])), >=) & [bni_23] = 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(B14(sv14_14[0], sv23_37[0], sv24_38[0])), >=) & [bni_23] = 0 & [(-1)bso_24] >= 0)








For Pair COND_B14(TRUE, sv14_14, sv23_37, sv24_38) -> B15(sv14_14, sv23_37, sv24_38) the following chains were created:
*We consider the chain COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1]), B15(sv14_14[2], sv23_37[2], sv24_38[2]) -> B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1)) which results in the following constraint:

(1)    (sv14_14[1]=sv14_14[2] & sv23_37[1]=sv23_37[2] & sv24_38[1]=sv24_38[2]  ==>  COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1])_>=_NonInfC & COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1])_>=_B15(sv14_14[1], sv23_37[1], sv24_38[1]) & (U^Increasing(B15(sv14_14[1], sv23_37[1], sv24_38[1])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1])_>=_NonInfC & COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1])_>=_B15(sv14_14[1], sv23_37[1], sv24_38[1]) & (U^Increasing(B15(sv14_14[1], sv23_37[1], sv24_38[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(B15(sv14_14[1], sv23_37[1], sv24_38[1])), >=) & [bni_25] = 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(B15(sv14_14[1], sv23_37[1], sv24_38[1])), >=) & [bni_25] = 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(B15(sv14_14[1], sv23_37[1], sv24_38[1])), >=) & [bni_25] = 0 & [(-1)bso_26] >= 0)








For Pair B15(sv14_14, sv23_37, sv24_38) -> B10(sv14_14, -(sv23_37, sv14_14), +(sv24_38, 1)) the following chains were created:
*We consider the chain COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1]), B15(sv14_14[2], sv23_37[2], sv24_38[2]) -> B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1)), B10(sv14_14[0], sv23_37[0], sv24_38[0]) -> B14(sv14_14[0], sv23_37[0], sv24_38[0]) which results in the following constraint:

(1)    (sv14_14[1]=sv14_14[2] & sv23_37[1]=sv23_37[2] & sv24_38[1]=sv24_38[2] & sv14_14[2]=sv14_14[0] & -(sv23_37[2], sv14_14[2])=sv23_37[0] & +(sv24_38[2], 1)=sv24_38[0]  ==>  B15(sv14_14[2], sv23_37[2], sv24_38[2])_>=_NonInfC & B15(sv14_14[2], sv23_37[2], sv24_38[2])_>=_B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1)) & (U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (B15(sv14_14[1], sv23_37[1], sv24_38[1])_>=_NonInfC & B15(sv14_14[1], sv23_37[1], sv24_38[1])_>=_B10(sv14_14[1], -(sv23_37[1], sv14_14[1]), +(sv24_38[1], 1)) & (U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=) & [bni_27] = 0 & [(-1)bso_28] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=) & [bni_27] = 0 & [(-1)bso_28] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=) & [bni_27] = 0 & [(-1)bso_28] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ((U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=) & [bni_27] = 0 & 0 = 0 & [(-1)bso_28] >= 0)








For Pair B14(sv14_14, sv23_37, sv24_38) -> COND_B14(&&(>=(sv23_37, sv14_14), <(1, sv14_14)), sv14_14, sv23_37, sv24_38) the following chains were created:
*We consider the chain B14(sv14_14[3], sv23_37[3], sv24_38[3]) -> COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3]), COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1]) which results in the following constraint:

(1)    (&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3]))=TRUE & sv14_14[3]=sv14_14[1] & sv23_37[3]=sv23_37[1] & sv24_38[3]=sv24_38[1]  ==>  B14(sv14_14[3], sv23_37[3], sv24_38[3])_>=_NonInfC & B14(sv14_14[3], sv23_37[3], sv24_38[3])_>=_COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3]) & (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(sv23_37[3], sv14_14[3])=TRUE & <(1, sv14_14[3])=TRUE  ==>  B14(sv14_14[3], sv23_37[3], sv24_38[3])_>=_NonInfC & B14(sv14_14[3], sv23_37[3], sv24_38[3])_>=_COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3]) & (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (sv23_37[3] + [-1]sv14_14[3] >= 0 & sv14_14[3] + [-2] >= 0  ==>  (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [bni_29]sv23_37[3] >= 0 & [(-1)bso_30] + sv14_14[3] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (sv23_37[3] + [-1]sv14_14[3] >= 0 & sv14_14[3] + [-2] >= 0  ==>  (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [bni_29]sv23_37[3] >= 0 & [(-1)bso_30] + sv14_14[3] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (sv23_37[3] + [-1]sv14_14[3] >= 0 & sv14_14[3] + [-2] >= 0  ==>  (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [bni_29]sv23_37[3] >= 0 & [(-1)bso_30] + sv14_14[3] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (sv23_37[3] + [-1]sv14_14[3] >= 0 & sv14_14[3] + [-2] >= 0  ==>  (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=) & 0 = 0 & [(-1)bni_29 + (-1)Bound*bni_29] + [bni_29]sv23_37[3] >= 0 & [(-1)bso_30] + sv14_14[3] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*B10(sv14_14, sv23_37, sv24_38) -> B14(sv14_14, sv23_37, sv24_38)

*((U^Increasing(B14(sv14_14[0], sv23_37[0], sv24_38[0])), >=) & [bni_23] = 0 & [(-1)bso_24] >= 0)




*COND_B14(TRUE, sv14_14, sv23_37, sv24_38) -> B15(sv14_14, sv23_37, sv24_38)

*((U^Increasing(B15(sv14_14[1], sv23_37[1], sv24_38[1])), >=) & [bni_25] = 0 & [(-1)bso_26] >= 0)




*B15(sv14_14, sv23_37, sv24_38) -> B10(sv14_14, -(sv23_37, sv14_14), +(sv24_38, 1))

*((U^Increasing(B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))), >=) & [bni_27] = 0 & 0 = 0 & [(-1)bso_28] >= 0)




*B14(sv14_14, sv23_37, sv24_38) -> COND_B14(&&(>=(sv23_37, sv14_14), <(1, sv14_14)), sv14_14, sv23_37, sv24_38)

*(sv23_37[3] + [-1]sv14_14[3] >= 0 & sv14_14[3] + [-2] >= 0  ==>  (U^Increasing(COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])), >=) & 0 = 0 & [(-1)bni_29 + (-1)Bound*bni_29] + [bni_29]sv23_37[3] >= 0 & [(-1)bso_30] + sv14_14[3] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(B10(x_1, x_2, x_3)) = [-1] + x_2
   POL(B14(x_1, x_2, x_3)) = [-1] + x_2
   POL(COND_B14(x_1, x_2, x_3, x_4)) = [-1] + x_3 + [-1]x_2 + [-1]x_1
   POL(B15(x_1, x_2, x_3)) = [-1] + x_2 + [-1]x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = 0
   POL(>=(x_1, x_2)) = [-1]
   POL(<(x_1, x_2)) = [-1]


The following pairs are in P_>:


   B14(sv14_14[3], sv23_37[3], sv24_38[3]) -> COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])


The following pairs are in P_bound:


   B14(sv14_14[3], sv23_37[3], sv24_38[3]) -> COND_B14(&&(>=(sv23_37[3], sv14_14[3]), <(1, sv14_14[3])), sv14_14[3], sv23_37[3], sv24_38[3])


The following pairs are in P_>=:


   B10(sv14_14[0], sv23_37[0], sv24_38[0]) -> B14(sv14_14[0], sv23_37[0], sv24_38[0])
   COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1])
   B15(sv14_14[2], sv23_37[2], sv24_38[2]) -> B10(sv14_14[2], -(sv23_37[2], sv14_14[2]), +(sv24_38[2], 1))


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): B10(sv14_14[0], sv23_37[0], sv24_38[0]) -> B14(sv14_14[0], sv23_37[0], sv24_38[0])
(1): COND_B14(TRUE, sv14_14[1], sv23_37[1], sv24_38[1]) -> B15(sv14_14[1], sv23_37[1], sv24_38[1])
(2): B15(sv14_14[2], sv23_37[2], sv24_38[2]) -> B10(sv14_14[2], sv23_37[2] - sv14_14[2], sv24_38[2] + 1)

   (2) -> (0), if (sv14_14[2] ->^* sv14_14[0] & sv23_37[2] - sv14_14[2] ->^* sv23_37[0] & sv24_38[2] + 1 ->^* sv24_38[0])
   (1) -> (2), if (sv14_14[1] ->^* sv14_14[2] & sv23_37[1] ->^* sv23_37[2] & sv24_38[1] ->^* sv24_38[2])

The set Q consists of the following terms:
b10(x0, x1, x2)
Cond_b14(TRUE, x0, x1, x2)
b15(x0, x1, x2)
b14(x0, x1, x2)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 3 less nodes.
----------------------------------------

(8)
TRUE
