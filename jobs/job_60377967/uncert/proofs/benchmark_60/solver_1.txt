YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/v4bwN.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 159 ms]
(6) AND
    (7) IDP
        (8) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (9) TRUE
    (10) IDP
        (11) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (12) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(i, j) -> Cond_eval(i - j >= 1 && nat >= 0 && pos > 0, i, j, nat, pos)
Cond_eval(TRUE, i, j, nat, pos) -> eval(i - nat, j + pos)
The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2, x3)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
eval(i, j) -> Cond_eval(i - j >= 1 && nat >= 0 && pos > 0, i, j, nat, pos)
Cond_eval(TRUE, i, j, nat, pos) -> eval(i - nat, j + pos)

The integer pair graph contains the following rules and edges:
(0): EVAL(i[0], j[0]) -> COND_EVAL(i[0] - j[0] >= 1 && nat[0] >= 0 && pos[0] > 0, i[0], j[0], nat[0], pos[0])
(1): COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(i[1] - nat[1], j[1] + pos[1])

   (0) -> (1), if (i[0] - j[0] >= 1 && nat[0] >= 0 && pos[0] > 0  & i[0] ->^* i[1] & j[0] ->^* j[1] & nat[0] ->^* nat[1] & pos[0] ->^* pos[1])
   (1) -> (0), if (i[1] - nat[1] ->^* i[0] & j[1] + pos[1] ->^* j[0])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2, x3)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(i[0], j[0]) -> COND_EVAL(i[0] - j[0] >= 1 && nat[0] >= 0 && pos[0] > 0, i[0], j[0], nat[0], pos[0])
(1): COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(i[1] - nat[1], j[1] + pos[1])

   (0) -> (1), if (i[0] - j[0] >= 1 && nat[0] >= 0 && pos[0] > 0  & i[0] ->^* i[1] & j[0] ->^* j[1] & nat[0] ->^* nat[1] & pos[0] ->^* pos[1])
   (1) -> (0), if (i[1] - nat[1] ->^* i[0] & j[1] + pos[1] ->^* j[0])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2, x3)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@4b5dbf8c
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(i, j) -> COND_EVAL(&&(&&(>=(-(i, j), 1), >=(nat, 0)), >(pos, 0)), i, j, nat, pos) the following chains were created:
*We consider the chain COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(-(i[1], nat[1]), +(j[1], pos[1])), EVAL(i[0], j[0]) -> COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0]), COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(-(i[1], nat[1]), +(j[1], pos[1])) which results in the following constraint:

(1)    (-(i[1], nat[1])=i[0] & +(j[1], pos[1])=j[0] & &&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0))=TRUE & i[0]=i[1]1 & j[0]=j[1]1 & nat[0]=nat[1]1 & pos[0]=pos[1]1  ==>  EVAL(i[0], j[0])_>=_NonInfC & EVAL(i[0], j[0])_>=_COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0]) & (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(pos[0], 0)=TRUE & >=(-(-(i[1], nat[1]), +(j[1], pos[1])), 1)=TRUE & >=(nat[0], 0)=TRUE  ==>  EVAL(-(i[1], nat[1]), +(j[1], pos[1]))_>=_NonInfC & EVAL(-(i[1], nat[1]), +(j[1], pos[1]))_>=_COND_EVAL(&&(&&(>=(-(-(i[1], nat[1]), +(j[1], pos[1])), 1), >=(nat[0], 0)), >(pos[0], 0)), -(i[1], nat[1]), +(j[1], pos[1]), nat[0], pos[0]) & (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (pos[0] + [-1] >= 0 & i[1] + [-1] + [-1]nat[1] + [-1]j[1] + [-1]pos[1] >= 0 & nat[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]j[1] + [(-1)bni_15]pos[1] + [bni_15]i[1] + [(-1)bni_15]nat[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (pos[0] + [-1] >= 0 & i[1] + [-1] + [-1]nat[1] + [-1]j[1] + [-1]pos[1] >= 0 & nat[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]j[1] + [(-1)bni_15]pos[1] + [bni_15]i[1] + [(-1)bni_15]nat[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (pos[0] + [-1] >= 0 & i[1] + [-1] + [-1]nat[1] + [-1]j[1] + [-1]pos[1] >= 0 & nat[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]j[1] + [(-1)bni_15]pos[1] + [bni_15]i[1] + [(-1)bni_15]nat[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(8)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (7) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(9)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(10)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (8) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(11)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(12)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (9) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(13)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(14)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (10) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(15)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(16)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (11) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(17)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(18)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)



We simplified constraint (12) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(19)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)

(20)    (pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)








For Pair COND_EVAL(TRUE, i, j, nat, pos) -> EVAL(-(i, nat), +(j, pos)) the following chains were created:
*We consider the chain EVAL(i[0], j[0]) -> COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0]), COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(-(i[1], nat[1]), +(j[1], pos[1])), EVAL(i[0], j[0]) -> COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0]) which results in the following constraint:

(1)    (&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0))=TRUE & i[0]=i[1] & j[0]=j[1] & nat[0]=nat[1] & pos[0]=pos[1] & -(i[1], nat[1])=i[0]1 & +(j[1], pos[1])=j[0]1  ==>  COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1])_>=_NonInfC & COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1])_>=_EVAL(-(i[1], nat[1]), +(j[1], pos[1])) & (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(pos[0], 0)=TRUE & >=(-(i[0], j[0]), 1)=TRUE & >=(nat[0], 0)=TRUE  ==>  COND_EVAL(TRUE, i[0], j[0], nat[0], pos[0])_>=_NonInfC & COND_EVAL(TRUE, i[0], j[0], nat[0], pos[0])_>=_EVAL(-(i[0], nat[0]), +(j[0], pos[0])) & (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (pos[0] + [-1] >= 0 & i[0] + [-1] + [-1]j[0] >= 0 & nat[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [(-1)bni_17]j[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (pos[0] + [-1] >= 0 & i[0] + [-1] + [-1]j[0] >= 0 & nat[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [(-1)bni_17]j[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (pos[0] + [-1] >= 0 & i[0] + [-1] + [-1]j[0] >= 0 & nat[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [(-1)bni_17]j[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (pos[0] + [-1] >= 0 & i[0] >= 0 & nat[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (pos[0] + [-1] >= 0 & i[0] >= 0 & nat[0] >= 0 & j[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)

(8)    (pos[0] + [-1] >= 0 & i[0] >= 0 & nat[0] >= 0 & j[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(i, j) -> COND_EVAL(&&(&&(>=(-(i, j), 1), >=(nat, 0)), >(pos, 0)), i, j, nat, pos)

*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)


*(pos[0] + [-1] >= 0 & i[1] >= 0 & nat[0] >= 0 & nat[1] >= 0 & j[1] >= 0 & pos[1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])), >=) & [(-1)Bound*bni_15] + [bni_15]i[1] >= 0 & [(-1)bso_16] + nat[0] >= 0)




*COND_EVAL(TRUE, i, j, nat, pos) -> EVAL(-(i, nat), +(j, pos))

*(pos[0] + [-1] >= 0 & i[0] >= 0 & nat[0] >= 0 & j[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)


*(pos[0] + [-1] >= 0 & i[0] >= 0 & nat[0] >= 0 & j[0] >= 0  ==>  (U^Increasing(EVAL(-(i[1], nat[1]), +(j[1], pos[1]))), >=) & [(-1)Bound*bni_17] + [(-1)bni_17]nat[0] + [bni_17]i[0] >= 0 & [(-1)bso_18] + pos[0] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [2]
   POL(EVAL(x_1, x_2)) = [-1] + [-1]x_2 + x_1
   POL(COND_EVAL(x_1, x_2, x_3, x_4, x_5)) = [-1] + [-1]x_4 + [-1]x_3 + x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(>=(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(0) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2


The following pairs are in P_>:


   COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(-(i[1], nat[1]), +(j[1], pos[1]))


The following pairs are in P_bound:


   EVAL(i[0], j[0]) -> COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])


The following pairs are in P_>=:


   EVAL(i[0], j[0]) -> COND_EVAL(&&(&&(>=(-(i[0], j[0]), 1), >=(nat[0], 0)), >(pos[0], 0)), i[0], j[0], nat[0], pos[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(i[0], j[0]) -> COND_EVAL(i[0] - j[0] >= 1 && nat[0] >= 0 && pos[0] > 0, i[0], j[0], nat[0], pos[0])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2, x3)

----------------------------------------

(8) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(9)
TRUE

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_EVAL(TRUE, i[1], j[1], nat[1], pos[1]) -> EVAL(i[1] - nat[1], j[1] + pos[1])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2, x3)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(12)
TRUE
