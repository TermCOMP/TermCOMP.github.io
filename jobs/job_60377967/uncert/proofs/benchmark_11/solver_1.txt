YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/tErm3.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 107 ms]
(6) AND
    (7) IDP
        (8) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (9) TRUE
    (10) IDP
        (11) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (12) IDP
        (13) IDPNonInfProof [SOUND, 3 ms]
        (14) IDP
        (15) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (16) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > 0 && !(x = 0) && x > y, x, y)
Cond_eval(TRUE, x, y) -> eval(y, y)
eval(x, y) -> Cond_eval1(x > 0 && !(x = 0) && x <= y, x, y)
Cond_eval1(TRUE, x, y) -> eval(x - 1, y)
The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > 0 && !(x = 0) && x > y, x, y)
Cond_eval(TRUE, x, y) -> eval(y, y)
eval(x, y) -> Cond_eval1(x > 0 && !(x = 0) && x <= y, x, y)
Cond_eval1(TRUE, x, y) -> eval(x - 1, y)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0 && !(x[0] = 0) && x[0] > y[0], x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] <= y[2], x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3] - 1, y[3])

   (0) -> (1), if (x[0] > 0 && !(x[0] = 0) && x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (y[1] ->^* x[0] & y[1] ->^* y[0])
   (1) -> (2), if (y[1] ->^* x[2] & y[1] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && !(x[2] = 0) && x[2] <= y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0 && !(x[0] = 0) && x[0] > y[0], x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] <= y[2], x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3] - 1, y[3])

   (0) -> (1), if (x[0] > 0 && !(x[0] = 0) && x[0] > y[0]  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (y[1] ->^* x[0] & y[1] ->^* y[0])
   (1) -> (2), if (y[1] ->^* x[2] & y[1] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && !(x[2] = 0) && x[2] <= y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] - 1 ->^* x[0] & y[3] ->^* y[0])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@23ce3896
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y) -> COND_EVAL(&&(&&(>(x, 0), !(=(x, 0))), >(x, y)), x, y) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1]) which results in the following constraint:

(1)    (&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0]))=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0]) & (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (>(x[0], y[0])=TRUE & >(x[0], 0)=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0]) & (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=))

(3)    (>(x[0], y[0])=TRUE & >(x[0], 0)=TRUE & <(x[0], 0)=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0]) & (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)



We simplified constraint (8) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(10)    (x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)

(11)    (x[0] + [-1] + y[0] >= 0 & x[0] + [-1] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + y[0] + x[0] >= 0)



We solved constraint (9) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL(TRUE, x, y) -> EVAL(y, y) the following chains were created:
*We consider the chain COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1]), EVAL(x[0], y[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0]) which results in the following constraint:

(1)    (y[1]=x[0] & y[1]=y[0]  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(y[1], y[1]) & (U^Increasing(EVAL(y[1], y[1])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(y[1], y[1]) & (U^Increasing(EVAL(y[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & 0 = 0 & 0 = 0 & [1 + (-1)bso_22] >= 0)




*We consider the chain COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1]), EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) which results in the following constraint:

(1)    (y[1]=x[2] & y[1]=y[2]  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(y[1], y[1]) & (U^Increasing(EVAL(y[1], y[1])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(y[1], y[1]) & (U^Increasing(EVAL(y[1], y[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & [1 + (-1)bso_22] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    ((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & 0 = 0 & 0 = 0 & [1 + (-1)bso_22] >= 0)








For Pair EVAL(x, y) -> COND_EVAL1(&&(&&(>(x, 0), !(=(x, 0))), <=(x, y)), x, y) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=))

(3)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE & <(x[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)



We solved constraint (9) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL1(TRUE, x, y) -> EVAL(-(x, 1), y) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]), EVAL(x[0], y[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3], 1)=x[0] & y[3]=y[0]  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(-(x[3], 1), y[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))

(3)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE & <(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We solved constraint (9) using rule (IDP_SMT_SPLIT).
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]), EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3], 1)=x[2]1 & y[3]=y[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(-(x[3], 1), y[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))

(3)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE & <(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)



We solved constraint (9) using rule (IDP_SMT_SPLIT).




To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y) -> COND_EVAL(&&(&&(>(x, 0), !(=(x, 0))), >(x, y)), x, y)

*(x[0] + [-1] + [-1]y[0] >= 0 & x[0] + [-1] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [(-1)bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + [-1]y[0] + x[0] >= 0)


*(x[0] + [-1] + y[0] >= 0 & x[0] + [-1] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]y[0] + [bni_19]x[0] >= 0 & [-1 + (-1)bso_20] + y[0] + x[0] >= 0)




*COND_EVAL(TRUE, x, y) -> EVAL(y, y)

*((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & 0 = 0 & 0 = 0 & [1 + (-1)bso_22] >= 0)


*((U^Increasing(EVAL(y[1], y[1])), >=) & [bni_21] = 0 & 0 = 0 & 0 = 0 & [1 + (-1)bso_22] >= 0)




*EVAL(x, y) -> COND_EVAL1(&&(&&(>(x, 0), !(=(x, 0))), <=(x, y)), x, y)

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_23 + (-1)Bound*bni_23] + [(-1)bni_23]y[2] + [bni_23]x[2] >= 0 & [(-1)bso_24] >= 0)




*COND_EVAL1(TRUE, x, y) -> EVAL(-(x, 1), y)

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)


*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]y[2] + [bni_25]x[2] >= 0 & [1 + (-1)bso_26] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(EVAL(x_1, x_2)) = [-1] + [-1]x_2 + x_1
   POL(COND_EVAL(x_1, x_2, x_3)) = 0
   POL(&&(x_1, x_2)) = [-1]
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(!(x_1)) = [-1]
   POL(=(x_1, x_2)) = [-1]
   POL(COND_EVAL1(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2
   POL(<=(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1])
   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3])


The following pairs are in P_bound:


   EVAL(x[0], y[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(x[0], y[0])), x[0], y[0])
   EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0 && !(x[0] = 0) && x[0] > y[0], x[0], y[0])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] <= y[2], x[2], y[2])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(8) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(9)
TRUE

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(y[1], y[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] <= y[2], x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3] - 1, y[3])

   (1) -> (2), if (y[1] ->^* x[2] & y[1] ->^* y[2])
   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && !(x[2] = 0) && x[2] <= y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3] - 1, y[3])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] <= y[2], x[2], y[2])

   (3) -> (2), if (x[3] - 1 ->^* x[2] & y[3] ->^* y[2])
   (2) -> (3), if (x[2] > 0 && !(x[2] = 0) && x[2] <= y[2]  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(13) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@23ce3896
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]), EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3] & -(x[3], 1)=x[2]1 & y[3]=y[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(-(x[3], 1), y[3]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))

(3)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE & <(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(-(x[2], 1), y[2]) & (U^Increasing(EVAL(-(x[3], 1), y[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)



We solved constraint (9) using rule (IDP_SMT_SPLIT).




For Pair EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3]) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2]))=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=))

(3)    (<=(x[2], y[2])=TRUE & >(x[2], 0)=TRUE & <(x[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)



We simplified constraint (7) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(9)    (y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)



We solved constraint (9) using rule (IDP_SMT_SPLIT).




To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3])

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[3], 1), y[3])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[2] >= 0 & [1 + (-1)bso_16] >= 0)




*EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])

*(y[2] + [-1]x[2] >= 0 & x[2] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[2] >= 0 & [(-1)bso_18] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(COND_EVAL1(x_1, x_2, x_3)) = [-1] + x_2 + [-1]x_1
   POL(EVAL(x_1, x_2)) = [-1] + x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(!(x_1)) = [-1]
   POL(=(x_1, x_2)) = [-1]
   POL(<=(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3])


The following pairs are in P_bound:


   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(-(x[3], 1), y[3])
   EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])


The following pairs are in P_>=:


   EVAL(x[2], y[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), <=(x[2], y[2])), x[2], y[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL(x[2], y[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] <= y[2], x[2], y[2])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(15) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(16)
TRUE
