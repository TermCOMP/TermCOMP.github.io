YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/cqLr4.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 104 ms]
(6) AND
    (7) IDP
        (8) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (9) IDP
        (10) IDPNonInfProof [SOUND, 2 ms]
        (11) IDP
        (12) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (13) TRUE
    (14) IDP
        (15) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (16) IDP
        (17) IDPNonInfProof [SOUND, 2 ms]
        (18) IDP
        (19) IDependencyGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval_1(i, j) -> Cond_eval_1(i >= 0, i, j)
Cond_eval_1(TRUE, i, j) -> eval_2(i, 0)
eval_2(i, j) -> Cond_eval_2(j <= i - 1, i, j)
Cond_eval_2(TRUE, i, j) -> eval_2(i, j + 1)
eval_2(i, j) -> Cond_eval_21(j > i - 1, i, j)
Cond_eval_21(TRUE, i, j) -> eval_1(i - 1, j)
The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
eval_1(i, j) -> Cond_eval_1(i >= 0, i, j)
Cond_eval_1(TRUE, i, j) -> eval_2(i, 0)
eval_2(i, j) -> Cond_eval_2(j <= i - 1, i, j)
Cond_eval_2(TRUE, i, j) -> eval_2(i, j + 1)
eval_2(i, j) -> Cond_eval_21(j > i - 1, i, j)
Cond_eval_21(TRUE, i, j) -> eval_1(i - 1, j)

The integer pair graph contains the following rules and edges:
(0): EVAL_1(i[0], j[0]) -> COND_EVAL_1(i[0] >= 0, i[0], j[0])
(1): COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0)
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)
(4): EVAL_2(i[4], j[4]) -> COND_EVAL_21(j[4] > i[4] - 1, i[4], j[4])
(5): COND_EVAL_21(TRUE, i[5], j[5]) -> EVAL_1(i[5] - 1, j[5])

   (0) -> (1), if (i[0] >= 0  & i[0] ->^* i[1] & j[0] ->^* j[1])
   (1) -> (2), if (i[1] ->^* i[2] & 0 ->^* j[2])
   (1) -> (4), if (i[1] ->^* i[4] & 0 ->^* j[4])
   (2) -> (3), if (j[2] <= i[2] - 1  & i[2] ->^* i[3] & j[2] ->^* j[3])
   (3) -> (2), if (i[3] ->^* i[2] & j[3] + 1 ->^* j[2])
   (3) -> (4), if (i[3] ->^* i[4] & j[3] + 1 ->^* j[4])
   (4) -> (5), if (j[4] > i[4] - 1  & i[4] ->^* i[5] & j[4] ->^* j[5])
   (5) -> (0), if (i[5] - 1 ->^* i[0] & j[5] ->^* j[0])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL_1(i[0], j[0]) -> COND_EVAL_1(i[0] >= 0, i[0], j[0])
(1): COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0)
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)
(4): EVAL_2(i[4], j[4]) -> COND_EVAL_21(j[4] > i[4] - 1, i[4], j[4])
(5): COND_EVAL_21(TRUE, i[5], j[5]) -> EVAL_1(i[5] - 1, j[5])

   (0) -> (1), if (i[0] >= 0  & i[0] ->^* i[1] & j[0] ->^* j[1])
   (1) -> (2), if (i[1] ->^* i[2] & 0 ->^* j[2])
   (1) -> (4), if (i[1] ->^* i[4] & 0 ->^* j[4])
   (2) -> (3), if (j[2] <= i[2] - 1  & i[2] ->^* i[3] & j[2] ->^* j[3])
   (3) -> (2), if (i[3] ->^* i[2] & j[3] + 1 ->^* j[2])
   (3) -> (4), if (i[3] ->^* i[4] & j[3] + 1 ->^* j[4])
   (4) -> (5), if (j[4] > i[4] - 1  & i[4] ->^* i[5] & j[4] ->^* j[5])
   (5) -> (0), if (i[5] - 1 ->^* i[0] & j[5] ->^* j[0])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@6b58e326
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL_1(i, j) -> COND_EVAL_1(>=(i, 0), i, j) the following chains were created:
*We consider the chain EVAL_1(i[0], j[0]) -> COND_EVAL_1(>=(i[0], 0), i[0], j[0]), COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0) which results in the following constraint:

(1)    (>=(i[0], 0)=TRUE & i[0]=i[1] & j[0]=j[1]  ==>  EVAL_1(i[0], j[0])_>=_NonInfC & EVAL_1(i[0], j[0])_>=_COND_EVAL_1(>=(i[0], 0), i[0], j[0]) & (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(i[0], 0)=TRUE  ==>  EVAL_1(i[0], j[0])_>=_NonInfC & EVAL_1(i[0], j[0])_>=_COND_EVAL_1(>=(i[0], 0), i[0], j[0]) & (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]i[0] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]i[0] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]i[0] >= 0 & [(-1)bso_25] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (i[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=) & 0 = 0 & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]i[0] >= 0 & [(-1)bso_25] >= 0)








For Pair COND_EVAL_1(TRUE, i, j) -> EVAL_2(i, 0) the following chains were created:
*We consider the chain EVAL_1(i[0], j[0]) -> COND_EVAL_1(>=(i[0], 0), i[0], j[0]), COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0), EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) which results in the following constraint:

(1)    (>=(i[0], 0)=TRUE & i[0]=i[1] & j[0]=j[1] & i[1]=i[2] & 0=j[2]  ==>  COND_EVAL_1(TRUE, i[1], j[1])_>=_NonInfC & COND_EVAL_1(TRUE, i[1], j[1])_>=_EVAL_2(i[1], 0) & (U^Increasing(EVAL_2(i[1], 0)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(i[0], 0)=TRUE  ==>  COND_EVAL_1(TRUE, i[0], j[0])_>=_NonInfC & COND_EVAL_1(TRUE, i[0], j[0])_>=_EVAL_2(i[0], 0) & (U^Increasing(EVAL_2(i[1], 0)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)




*We consider the chain EVAL_1(i[0], j[0]) -> COND_EVAL_1(>=(i[0], 0), i[0], j[0]), COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0), EVAL_2(i[4], j[4]) -> COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4]) which results in the following constraint:

(1)    (>=(i[0], 0)=TRUE & i[0]=i[1] & j[0]=j[1] & i[1]=i[4] & 0=j[4]  ==>  COND_EVAL_1(TRUE, i[1], j[1])_>=_NonInfC & COND_EVAL_1(TRUE, i[1], j[1])_>=_EVAL_2(i[1], 0) & (U^Increasing(EVAL_2(i[1], 0)), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(i[0], 0)=TRUE  ==>  COND_EVAL_1(TRUE, i[0], j[0])_>=_NonInfC & COND_EVAL_1(TRUE, i[0], j[0])_>=_EVAL_2(i[0], 0) & (U^Increasing(EVAL_2(i[1], 0)), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)








For Pair EVAL_2(i, j) -> COND_EVAL_2(<=(j, -(i, 1)), i, j) the following chains were created:
*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3]  ==>  EVAL_2(i[2], j[2])_>=_NonInfC & EVAL_2(i[2], j[2])_>=_COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) & (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  EVAL_2(i[2], j[2])_>=_NonInfC & EVAL_2(i[2], j[2])_>=_COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) & (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)bni_28 + (-1)Bound*bni_28] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_28] + [bni_28]j[2] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_28] + [(-1)bni_28]j[2] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_28] + [bni_28]j[2] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)








For Pair COND_EVAL_2(TRUE, i, j) -> EVAL_2(i, +(j, 1)) the following chains were created:
*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)), EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3] & i[3]=i[2]1 & +(j[3], 1)=j[2]1  ==>  COND_EVAL_2(TRUE, i[3], j[3])_>=_NonInfC & COND_EVAL_2(TRUE, i[3], j[3])_>=_EVAL_2(i[3], +(j[3], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  COND_EVAL_2(TRUE, i[2], j[2])_>=_NonInfC & COND_EVAL_2(TRUE, i[2], j[2])_>=_EVAL_2(i[2], +(j[2], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [(-1)bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)




*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)), EVAL_2(i[4], j[4]) -> COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4]) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3] & i[3]=i[4] & +(j[3], 1)=j[4]  ==>  COND_EVAL_2(TRUE, i[3], j[3])_>=_NonInfC & COND_EVAL_2(TRUE, i[3], j[3])_>=_EVAL_2(i[3], +(j[3], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  COND_EVAL_2(TRUE, i[2], j[2])_>=_NonInfC & COND_EVAL_2(TRUE, i[2], j[2])_>=_EVAL_2(i[2], +(j[2], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_30 + (-1)Bound*bni_30] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [(-1)bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)








For Pair EVAL_2(i, j) -> COND_EVAL_21(>(j, -(i, 1)), i, j) the following chains were created:
*We consider the chain EVAL_2(i[4], j[4]) -> COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4]), COND_EVAL_21(TRUE, i[5], j[5]) -> EVAL_1(-(i[5], 1), j[5]) which results in the following constraint:

(1)    (>(j[4], -(i[4], 1))=TRUE & i[4]=i[5] & j[4]=j[5]  ==>  EVAL_2(i[4], j[4])_>=_NonInfC & EVAL_2(i[4], j[4])_>=_COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4]) & (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>(j[4], -(i[4], 1))=TRUE  ==>  EVAL_2(i[4], j[4])_>=_NonInfC & EVAL_2(i[4], j[4])_>=_COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4]) & (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (j[4] + [-1]i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (j[4] + [-1]i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (j[4] + [-1]i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (j[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [(-1)bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)

(8)    (j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)








For Pair COND_EVAL_21(TRUE, i, j) -> EVAL_1(-(i, 1), j) the following chains were created:
*We consider the chain EVAL_2(i[4], j[4]) -> COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4]), COND_EVAL_21(TRUE, i[5], j[5]) -> EVAL_1(-(i[5], 1), j[5]), EVAL_1(i[0], j[0]) -> COND_EVAL_1(>=(i[0], 0), i[0], j[0]) which results in the following constraint:

(1)    (>(j[4], -(i[4], 1))=TRUE & i[4]=i[5] & j[4]=j[5] & -(i[5], 1)=i[0] & j[5]=j[0]  ==>  COND_EVAL_21(TRUE, i[5], j[5])_>=_NonInfC & COND_EVAL_21(TRUE, i[5], j[5])_>=_EVAL_1(-(i[5], 1), j[5]) & (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>(j[4], -(i[4], 1))=TRUE  ==>  COND_EVAL_21(TRUE, i[4], j[4])_>=_NonInfC & COND_EVAL_21(TRUE, i[4], j[4])_>=_EVAL_1(-(i[4], 1), j[4]) & (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (j[4] + [-1]i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (j[4] + [-1]i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (j[4] + [-1]i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (j[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [(-1)bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)

(8)    (j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL_1(i, j) -> COND_EVAL_1(>=(i, 0), i, j)

*(i[0] >= 0  ==>  (U^Increasing(COND_EVAL_1(>=(i[0], 0), i[0], j[0])), >=) & 0 = 0 & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]i[0] >= 0 & [(-1)bso_25] >= 0)




*COND_EVAL_1(TRUE, i, j) -> EVAL_2(i, 0)

*(i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)


*(i[0] >= 0  ==>  (U^Increasing(EVAL_2(i[1], 0)), >=) & 0 = 0 & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]i[0] >= 0 & 0 = 0 & [(-1)bso_27] >= 0)




*EVAL_2(i, j) -> COND_EVAL_2(<=(j, -(i, 1)), i, j)

*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_28] + [(-1)bni_28]j[2] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_28] + [bni_28]j[2] + [bni_28]i[2] >= 0 & [(-1)bso_29] >= 0)




*COND_EVAL_2(TRUE, i, j) -> EVAL_2(i, +(j, 1))

*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [(-1)bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_30] + [(-1)bni_30]j[2] + [bni_30]i[2] >= 0 & [(-1)bso_31] >= 0)




*EVAL_2(i, j) -> COND_EVAL_21(>(j, -(i, 1)), i, j)

*(j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [(-1)bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)


*(j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])), >=) & [(-1)bni_32 + (-1)Bound*bni_32] + [bni_32]i[4] >= 0 & [(-1)bso_33] >= 0)




*COND_EVAL_21(TRUE, i, j) -> EVAL_1(-(i, 1), j)

*(j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [(-1)bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)


*(j[4] >= 0 & i[4] >= 0  ==>  (U^Increasing(EVAL_1(-(i[5], 1), j[5])), >=) & [(-1)bni_34 + (-1)Bound*bni_34] + [bni_34]i[4] >= 0 & [1 + (-1)bso_35] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(EVAL_1(x_1, x_2)) = [-1] + x_1
   POL(COND_EVAL_1(x_1, x_2, x_3)) = [-1] + x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(EVAL_2(x_1, x_2)) = [-1] + x_1
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1] + x_2
   POL(<=(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(COND_EVAL_21(x_1, x_2, x_3)) = [-1] + x_2
   POL(>(x_1, x_2)) = [-1]


The following pairs are in P_>:


   COND_EVAL_21(TRUE, i[5], j[5]) -> EVAL_1(-(i[5], 1), j[5])


The following pairs are in P_bound:


   EVAL_1(i[0], j[0]) -> COND_EVAL_1(>=(i[0], 0), i[0], j[0])
   COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0)


The following pairs are in P_>=:


   EVAL_1(i[0], j[0]) -> COND_EVAL_1(>=(i[0], 0), i[0], j[0])
   COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0)
   EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])
   COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))
   EVAL_2(i[4], j[4]) -> COND_EVAL_21(>(j[4], -(i[4], 1)), i[4], j[4])


There are no usable rules.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL_1(i[0], j[0]) -> COND_EVAL_1(i[0] >= 0, i[0], j[0])
(1): COND_EVAL_1(TRUE, i[1], j[1]) -> EVAL_2(i[1], 0)
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)
(4): EVAL_2(i[4], j[4]) -> COND_EVAL_21(j[4] > i[4] - 1, i[4], j[4])

   (0) -> (1), if (i[0] >= 0  & i[0] ->^* i[1] & j[0] ->^* j[1])
   (1) -> (2), if (i[1] ->^* i[2] & 0 ->^* j[2])
   (3) -> (2), if (i[3] ->^* i[2] & j[3] + 1 ->^* j[2])
   (2) -> (3), if (j[2] <= i[2] - 1  & i[2] ->^* i[3] & j[2] ->^* j[3])
   (1) -> (4), if (i[1] ->^* i[4] & 0 ->^* j[4])
   (3) -> (4), if (i[3] ->^* i[4] & j[3] + 1 ->^* j[4])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(8) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(9)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])

   (3) -> (2), if (i[3] ->^* i[2] & j[3] + 1 ->^* j[2])
   (2) -> (3), if (j[2] <= i[2] - 1  & i[2] ->^* i[3] & j[2] ->^* j[3])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(10) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@6b58e326
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)) the following chains were created:
*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)), EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3] & i[3]=i[2]1 & +(j[3], 1)=j[2]1  ==>  COND_EVAL_2(TRUE, i[3], j[3])_>=_NonInfC & COND_EVAL_2(TRUE, i[3], j[3])_>=_EVAL_2(i[3], +(j[3], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  COND_EVAL_2(TRUE, i[2], j[2])_>=_NonInfC & COND_EVAL_2(TRUE, i[2], j[2])_>=_EVAL_2(i[2], +(j[2], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]j[2] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]j[2] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]j[2] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)








For Pair EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) the following chains were created:
*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3]  ==>  EVAL_2(i[2], j[2])_>=_NonInfC & EVAL_2(i[2], j[2])_>=_COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) & (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  EVAL_2(i[2], j[2])_>=_NonInfC & EVAL_2(i[2], j[2])_>=_COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) & (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [(-1)bni_13]j[2] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [(-1)bni_13]j[2] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [(-1)bni_13]j[2] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13 + bni_13] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13 + bni_13] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13 + bni_13] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))

*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [(-1)bso_12] >= 0)




*EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])

*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13 + bni_13] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13 + bni_13] + [bni_13]i[2] >= 0 & [1 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2
   POL(EVAL_2(x_1, x_2)) = [-1]x_2 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(<=(x_1, x_2)) = [-1]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2


The following pairs are in P_>:


   EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])


The following pairs are in P_bound:


   COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))
   EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])


The following pairs are in P_>=:


   COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))


There are no usable rules.
----------------------------------------

(11)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)


The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(12) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(13)
TRUE

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)
(4): EVAL_2(i[4], j[4]) -> COND_EVAL_21(j[4] > i[4] - 1, i[4], j[4])
(5): COND_EVAL_21(TRUE, i[5], j[5]) -> EVAL_1(i[5] - 1, j[5])

   (3) -> (2), if (i[3] ->^* i[2] & j[3] + 1 ->^* j[2])
   (2) -> (3), if (j[2] <= i[2] - 1  & i[2] ->^* i[3] & j[2] ->^* j[3])
   (3) -> (4), if (i[3] ->^* i[4] & j[3] + 1 ->^* j[4])
   (4) -> (5), if (j[4] > i[4] - 1  & i[4] ->^* i[5] & j[4] ->^* j[5])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(15) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(16)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], j[3] + 1)
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])

   (3) -> (2), if (i[3] ->^* i[2] & j[3] + 1 ->^* j[2])
   (2) -> (3), if (j[2] <= i[2] - 1  & i[2] ->^* i[3] & j[2] ->^* j[3])

The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(17) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@6b58e326
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)) the following chains were created:
*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)), EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3] & i[3]=i[2]1 & +(j[3], 1)=j[2]1  ==>  COND_EVAL_2(TRUE, i[3], j[3])_>=_NonInfC & COND_EVAL_2(TRUE, i[3], j[3])_>=_EVAL_2(i[3], +(j[3], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  COND_EVAL_2(TRUE, i[2], j[2])_>=_NonInfC & COND_EVAL_2(TRUE, i[2], j[2])_>=_EVAL_2(i[2], +(j[2], 1)) & (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]j[2] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]j[2] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(-1)bni_11]j[2] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)








For Pair EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) the following chains were created:
*We consider the chain EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]), COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1)) which results in the following constraint:

(1)    (<=(j[2], -(i[2], 1))=TRUE & i[2]=i[3] & j[2]=j[3]  ==>  EVAL_2(i[2], j[2])_>=_NonInfC & EVAL_2(i[2], j[2])_>=_COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) & (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (<=(j[2], -(i[2], 1))=TRUE  ==>  EVAL_2(i[2], j[2])_>=_NonInfC & EVAL_2(i[2], j[2])_>=_COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2]) & (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]j[2] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]j[2] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (i[2] + [-1] + [-1]j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)bni_13 + (-1)Bound*bni_13] + [(-1)bni_13]j[2] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (i[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(7)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)

(8)    (i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))

*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(EVAL_2(i[3], +(j[3], 1))), >=) & [(-1)Bound*bni_11] + [bni_11]i[2] >= 0 & [1 + (-1)bso_12] >= 0)




*EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])

*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)


*(i[2] >= 0 & j[2] >= 0  ==>  (U^Increasing(COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])), >=) & [(-1)Bound*bni_13] + [bni_13]i[2] >= 0 & [(-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL_2(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2
   POL(EVAL_2(x_1, x_2)) = [-1] + [-1]x_2 + x_1
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(<=(x_1, x_2)) = [2]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2


The following pairs are in P_>:


   COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))


The following pairs are in P_bound:


   COND_EVAL_2(TRUE, i[3], j[3]) -> EVAL_2(i[3], +(j[3], 1))
   EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])


The following pairs are in P_>=:


   EVAL_2(i[2], j[2]) -> COND_EVAL_2(<=(j[2], -(i[2], 1)), i[2], j[2])


There are no usable rules.
----------------------------------------

(18)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL_2(i[2], j[2]) -> COND_EVAL_2(j[2] <= i[2] - 1, i[2], j[2])


The set Q consists of the following terms:
eval_1(x0, x1)
Cond_eval_1(TRUE, x0, x1)
eval_2(x0, x1)
Cond_eval_2(TRUE, x0, x1)
Cond_eval_21(TRUE, x0, x1)

----------------------------------------

(19) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(20)
TRUE
