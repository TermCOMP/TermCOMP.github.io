YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/7zI8u.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 107 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > 0 && y > 0, x, y)
Cond_eval(TRUE, x, y) -> eval(x - 1, y - 1)
The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
eval(x, y) -> Cond_eval(x > 0 && y > 0, x, y)
Cond_eval(TRUE, x, y) -> eval(x - 1, y - 1)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0 && y[0] > 0, x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1] - 1, y[1] - 1)

   (0) -> (1), if (x[0] > 0 && y[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] - 1 ->^* y[0])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0 && y[0] > 0, x[0], y[0])
(1): COND_EVAL(TRUE, x[1], y[1]) -> EVAL(x[1] - 1, y[1] - 1)

   (0) -> (1), if (x[0] > 0 && y[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] - 1 ->^* y[0])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@54e8b123
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y) -> COND_EVAL(&&(>(x, 0), >(y, 0)), x, y) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), -(y[1], 1)) which results in the following constraint:

(1)    (&&(>(x[0], 0), >(y[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0]) & (U^Increasing(COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(y[0], 0)=TRUE  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0]) & (U^Increasing(COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])), >=) & [(2)bni_12 + (-1)Bound*bni_12] + [bni_12]y[0] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])), >=) & [(2)bni_12 + (-1)Bound*bni_12] + [bni_12]y[0] >= 0 & [(-1)bso_13] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])), >=) & [(2)bni_12 + (-1)Bound*bni_12] + [bni_12]y[0] >= 0 & [(-1)bso_13] >= 0)








For Pair COND_EVAL(TRUE, x, y) -> EVAL(-(x, 1), -(y, 1)) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0]), COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), -(y[1], 1)), EVAL(x[0], y[0]) -> COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0]) which results in the following constraint:

(1)    (&&(>(x[0], 0), >(y[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & -(x[1], 1)=x[0]1 & -(y[1], 1)=y[0]1  ==>  COND_EVAL(TRUE, x[1], y[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1])_>=_EVAL(-(x[1], 1), -(y[1], 1)) & (U^Increasing(EVAL(-(x[1], 1), -(y[1], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(y[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0])_>=_EVAL(-(x[0], 1), -(y[0], 1)) & (U^Increasing(EVAL(-(x[1], 1), -(y[1], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), -(y[1], 1))), >=) & [(2)bni_14 + (-1)Bound*bni_14] + [bni_14]y[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), -(y[1], 1))), >=) & [(2)bni_14 + (-1)Bound*bni_14] + [bni_14]y[0] >= 0 & [1 + (-1)bso_15] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), -(y[1], 1))), >=) & [(2)bni_14 + (-1)Bound*bni_14] + [bni_14]y[0] >= 0 & [1 + (-1)bso_15] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y) -> COND_EVAL(&&(>(x, 0), >(y, 0)), x, y)

*(x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])), >=) & [(2)bni_12 + (-1)Bound*bni_12] + [bni_12]y[0] >= 0 & [(-1)bso_13] >= 0)




*COND_EVAL(TRUE, x, y) -> EVAL(-(x, 1), -(y, 1))

*(x[0] + [-1] >= 0 & y[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), -(y[1], 1))), >=) & [(2)bni_14 + (-1)Bound*bni_14] + [bni_14]y[0] >= 0 & [1 + (-1)bso_15] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(EVAL(x_1, x_2)) = [2] + x_2
   POL(COND_EVAL(x_1, x_2, x_3)) = [2] + x_3 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), -(y[1], 1))


The following pairs are in P_bound:


   EVAL(x[0], y[0]) -> COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])
   COND_EVAL(TRUE, x[1], y[1]) -> EVAL(-(x[1], 1), -(y[1], 1))


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(&&(>(x[0], 0), >(y[0], 0)), x[0], y[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] > 0 && y[0] > 0, x[0], y[0])


The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(8)
TRUE
