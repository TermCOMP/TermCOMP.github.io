YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ECyDi.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 128 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x) -> Cond_eval(x > 0 && !(x = 0) && x % 2 > 0, x)
Cond_eval(TRUE, x) -> eval(x - 1)
eval(x) -> Cond_eval1(x > 0 && !(x = 0) && x % 2 = 0, x)
Cond_eval1(TRUE, x) -> eval(x / 2)
The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)
Cond_eval1(TRUE, x0)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
eval(x) -> Cond_eval(x > 0 && !(x = 0) && x % 2 > 0, x)
Cond_eval(TRUE, x) -> eval(x - 1)
eval(x) -> Cond_eval1(x > 0 && !(x = 0) && x % 2 = 0, x)
Cond_eval1(TRUE, x) -> eval(x / 2)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0]) -> COND_EVAL(x[0] > 0 && !(x[0] = 0) && x[0] % 2 > 0, x[0])
(1): COND_EVAL(TRUE, x[1]) -> EVAL(x[1] - 1)
(2): EVAL(x[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] % 2 = 0, x[2])
(3): COND_EVAL1(TRUE, x[3]) -> EVAL(x[3] / 2)

   (0) -> (1), if (x[0] > 0 && !(x[0] = 0) && x[0] % 2 > 0  & x[0] ->^* x[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2])
   (2) -> (3), if (x[2] > 0 && !(x[2] = 0) && x[2] % 2 = 0  & x[2] ->^* x[3])
   (3) -> (0), if (x[3] / 2 ->^* x[0])
   (3) -> (2), if (x[3] / 2 ->^* x[2])

The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)
Cond_eval1(TRUE, x0)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0]) -> COND_EVAL(x[0] > 0 && !(x[0] = 0) && x[0] % 2 > 0, x[0])
(1): COND_EVAL(TRUE, x[1]) -> EVAL(x[1] - 1)
(2): EVAL(x[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] % 2 = 0, x[2])
(3): COND_EVAL1(TRUE, x[3]) -> EVAL(x[3] / 2)

   (0) -> (1), if (x[0] > 0 && !(x[0] = 0) && x[0] % 2 > 0  & x[0] ->^* x[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2])
   (2) -> (3), if (x[2] > 0 && !(x[2] = 0) && x[2] % 2 = 0  & x[2] ->^* x[3])
   (3) -> (0), if (x[3] / 2 ->^* x[0])
   (3) -> (2), if (x[3] / 2 ->^* x[2])

The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)
Cond_eval1(TRUE, x0)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@6b08ed82
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x) -> COND_EVAL(&&(&&(>(x, 0), !(=(x, 0))), >(%(x, 2), 0)), x) the following chains were created:
*We consider the chain EVAL(x[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(-(x[1], 1)) which results in the following constraint:

(1)    (&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0))=TRUE & x[0]=x[1]  ==>  EVAL(x[0])_>=_NonInfC & EVAL(x[0])_>=_COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]) & (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (>(%(x[0], 2), 0)=TRUE & >(x[0], 0)=TRUE  ==>  EVAL(x[0])_>=_NonInfC & EVAL(x[0])_>=_COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]) & (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=))

(3)    (>(%(x[0], 2), 0)=TRUE & >(x[0], 0)=TRUE & <(x[0], 0)=TRUE  ==>  EVAL(x[0])_>=_NonInfC & EVAL(x[0])_>=_COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]) & (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (x[0] + [-1] >= 0 & [4] >= 0 & [1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)



We solved constraint (7) using rule (POLY_REMOVE_MIN_MAX).We simplified constraint (8) using rule (IDP_POLY_GCD) which results in the following new constraint:

(9)    (x[0] + [-1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)








For Pair COND_EVAL(TRUE, x) -> EVAL(-(x, 1)) the following chains were created:
*We consider the chain EVAL(x[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(-(x[1], 1)), EVAL(x[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]) which results in the following constraint:

(1)    (&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0))=TRUE & x[0]=x[1] & -(x[1], 1)=x[0]1  ==>  COND_EVAL(TRUE, x[1])_>=_NonInfC & COND_EVAL(TRUE, x[1])_>=_EVAL(-(x[1], 1)) & (U^Increasing(EVAL(-(x[1], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (>(%(x[0], 2), 0)=TRUE & >(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0])_>=_NonInfC & COND_EVAL(TRUE, x[0])_>=_EVAL(-(x[0], 1)) & (U^Increasing(EVAL(-(x[1], 1))), >=))

(3)    (>(%(x[0], 2), 0)=TRUE & >(x[0], 0)=TRUE & <(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0])_>=_NonInfC & COND_EVAL(TRUE, x[0])_>=_EVAL(-(x[0], 1)) & (U^Increasing(EVAL(-(x[1], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (x[0] + [-1] >= 0 & [4] >= 0 & [1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We solved constraint (7) using rule (POLY_REMOVE_MIN_MAX).We simplified constraint (8) using rule (IDP_POLY_GCD) which results in the following new constraint:

(9)    (x[0] + [-1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)




*We consider the chain EVAL(x[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0]), COND_EVAL(TRUE, x[1]) -> EVAL(-(x[1], 1)), EVAL(x[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2]) which results in the following constraint:

(1)    (&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0))=TRUE & x[0]=x[1] & -(x[1], 1)=x[2]  ==>  COND_EVAL(TRUE, x[1])_>=_NonInfC & COND_EVAL(TRUE, x[1])_>=_EVAL(-(x[1], 1)) & (U^Increasing(EVAL(-(x[1], 1))), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (>(%(x[0], 2), 0)=TRUE & >(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0])_>=_NonInfC & COND_EVAL(TRUE, x[0])_>=_EVAL(-(x[0], 1)) & (U^Increasing(EVAL(-(x[1], 1))), >=))

(3)    (>(%(x[0], 2), 0)=TRUE & >(x[0], 0)=TRUE & <(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0])_>=_NonInfC & COND_EVAL(TRUE, x[0])_>=_EVAL(-(x[0], 1)) & (U^Increasing(EVAL(-(x[1], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (max{[2], [-2]} + [-1] >= 0 & x[0] + [-1] >= 0 & [-1] + [-1]x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (x[0] + [-1] >= 0 & [4] >= 0 & [1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)



We solved constraint (7) using rule (POLY_REMOVE_MIN_MAX).We simplified constraint (8) using rule (IDP_POLY_GCD) which results in the following new constraint:

(9)    (x[0] + [-1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)








For Pair EVAL(x) -> COND_EVAL1(&&(&&(>(x, 0), !(=(x, 0))), =(%(x, 2), 0)), x) the following chains were created:
*We consider the chain EVAL(x[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2]), COND_EVAL1(TRUE, x[3]) -> EVAL(/(x[3], 2)) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0))=TRUE & x[2]=x[3]  ==>  EVAL(x[2])_>=_NonInfC & EVAL(x[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (>(x[2], 0)=TRUE & >=(%(x[2], 2), 0)=TRUE & <=(%(x[2], 2), 0)=TRUE  ==>  EVAL(x[2])_>=_NonInfC & EVAL(x[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=))

(3)    (>(x[2], 0)=TRUE & >=(%(x[2], 2), 0)=TRUE & <=(%(x[2], 2), 0)=TRUE & <(x[2], 0)=TRUE  ==>  EVAL(x[2])_>=_NonInfC & EVAL(x[2])_>=_COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2]) & (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (x[2] + [-1] >= 0 & [4] >= 0 & [2] >= 0 & [2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)



We solved constraint (7) using rule (POLY_REMOVE_MIN_MAX).We simplified constraint (8) using rule (IDP_POLY_GCD) which results in the following new constraint:

(9)    (x[2] + [-1] >= 0 & [1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)








For Pair COND_EVAL1(TRUE, x) -> EVAL(/(x, 2)) the following chains were created:
*We consider the chain EVAL(x[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2]), COND_EVAL1(TRUE, x[3]) -> EVAL(/(x[3], 2)) which results in the following constraint:

(1)    (&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0))=TRUE & x[2]=x[3]  ==>  COND_EVAL1(TRUE, x[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3])_>=_EVAL(/(x[3], 2)) & (U^Increasing(EVAL(/(x[3], 2))), >=))



We simplified constraint (1) using rules (III), (IDP_BOOLEAN) which results in the following new constraints:

(2)    (>(x[2], 0)=TRUE & >=(%(x[2], 2), 0)=TRUE & <=(%(x[2], 2), 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2])_>=_EVAL(/(x[2], 2)) & (U^Increasing(EVAL(/(x[3], 2))), >=))

(3)    (>(x[2], 0)=TRUE & >=(%(x[2], 2), 0)=TRUE & <=(%(x[2], 2), 0)=TRUE & <(x[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2])_>=_EVAL(/(x[2], 2)) & (U^Increasing(EVAL(/(x[3], 2))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(4)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] + x[2] + [-1]max{x[2], [-1]x[2]} >= 0)



We simplified constraint (3) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(5)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] + x[2] + [-1]max{x[2], [-1]x[2]} >= 0)



We simplified constraint (4) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(6)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] + x[2] + [-1]max{x[2], [-1]x[2]} >= 0)



We simplified constraint (5) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(7)    (x[2] + [-1] >= 0 & max{[2], [-2]} >= 0 & [-1]min{[2], [-2]} >= 0 & [-1] + [-1]x[2] >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] + x[2] + [-1]max{x[2], [-1]x[2]} >= 0)



We simplified constraint (6) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(8)    (x[2] + [-1] >= 0 & [4] >= 0 & [2] >= 0 & [2] >= 0 & [2]x[2] >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] >= 0)



We solved constraint (7) using rule (POLY_REMOVE_MIN_MAX).We simplified constraint (8) using rule (IDP_POLY_GCD) which results in the following new constraint:

(9)    (x[2] + [-1] >= 0 & [1] >= 0 & [1] >= 0 & [1] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x) -> COND_EVAL(&&(&&(>(x, 0), !(=(x, 0))), >(%(x, 2), 0)), x)

*(x[0] + [-1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [bni_15]x[0] >= 0 & [(-1)bso_16] >= 0)




*COND_EVAL(TRUE, x) -> EVAL(-(x, 1))

*(x[0] + [-1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)


*(x[0] + [-1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1))), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [bni_17]x[0] >= 0 & [1 + (-1)bso_18] >= 0)




*EVAL(x) -> COND_EVAL1(&&(&&(>(x, 0), !(=(x, 0))), =(%(x, 2), 0)), x)

*(x[2] + [-1] >= 0 & [1] >= 0 & [1] >= 0 & [1] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])), >=) & [(-1)bni_19 + (-1)Bound*bni_19] + [bni_19]x[2] >= 0 & [(-1)bso_20] >= 0)




*COND_EVAL1(TRUE, x) -> EVAL(/(x, 2))

*(x[2] + [-1] >= 0 & [1] >= 0 & [1] >= 0 & [1] >= 0 & x[2] >= 0  ==>  (U^Increasing(EVAL(/(x[3], 2))), >=) & [(-1)bni_21 + (-1)Bound*bni_21] + [bni_21]x[2] >= 0 & [1 + (-1)bso_25] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(EVAL(x_1)) = [-1] + x_1
   POL(COND_EVAL(x_1, x_2)) = [-1] + x_2
   POL(&&(x_1, x_2)) = [-1]
   POL(>(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(!(x_1)) = [-1]
   POL(=(x_1, x_2)) = [-1]
   POL(2) = [2]
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_EVAL1(x_1, x_2)) = [-1] + x_2
   
   Polynomial Interpretations with Context Sensitive Arithemetic Replacement
   POL(Term^CSAR-Mode @ Context)
   
   POL(%(x_1, 2)^1 @ {}) = max{x_2, [-1]x_2}
   POL(%(x_1, 2)^-1 @ {}) = min{x_2, [-1]x_2}
   POL(/(x_1, 2)^1 @ {EVAL_1/0}) = max{x_1, [-1]x_1} + [-1]


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1]) -> EVAL(-(x[1], 1))
   COND_EVAL1(TRUE, x[3]) -> EVAL(/(x[3], 2))


The following pairs are in P_bound:


   EVAL(x[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])
   COND_EVAL(TRUE, x[1]) -> EVAL(-(x[1], 1))
   EVAL(x[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])
   COND_EVAL1(TRUE, x[3]) -> EVAL(/(x[3], 2))


The following pairs are in P_>=:


   EVAL(x[0]) -> COND_EVAL(&&(&&(>(x[0], 0), !(=(x[0], 0))), >(%(x[0], 2), 0)), x[0])
   EVAL(x[2]) -> COND_EVAL1(&&(&&(>(x[2], 0), !(=(x[2], 0))), =(%(x[2], 2), 0)), x[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1
   /^1 ->

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 / 	~ 	Div: (Integer, Integer) -> Integer
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0]) -> COND_EVAL(x[0] > 0 && !(x[0] = 0) && x[0] % 2 > 0, x[0])
(2): EVAL(x[2]) -> COND_EVAL1(x[2] > 0 && !(x[2] = 0) && x[2] % 2 = 0, x[2])


The set Q consists of the following terms:
eval(x0)
Cond_eval(TRUE, x0)
Cond_eval1(TRUE, x0)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(8)
TRUE
