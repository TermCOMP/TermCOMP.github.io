YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TojuJ.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDependencyGraphProof [EQUIVALENT, 0 ms]
(6) IDP
(7) IDPNonInfProof [SOUND, 109 ms]
(8) IDP
(9) IDependencyGraphProof [EQUIVALENT, 0 ms]
(10) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
minus(x, y) -> minusNat(y >= 0 && x = y + 1, x, y)
minusNat(TRUE, x, y) -> minus(x, round(x))
round(x) -> if(x % 2 = 0, x, x + 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v
The set Q consists of the following terms:
minus(x0, x1)
minusNat(TRUE, x0, x1)
round(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
minus(x, y) -> minusNat(y >= 0 && x = y + 1, x, y)
minusNat(TRUE, x, y) -> minus(x, round(x))
round(x) -> if(x % 2 = 0, x, x + 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): MINUS(x[0], y[0]) -> MINUSNAT(y[0] >= 0 && x[0] = y[0] + 1, x[0], y[0])
(1): MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1]))
(2): MINUSNAT(TRUE, x[2], y[2]) -> ROUND(x[2])
(3): ROUND(x[3]) -> IF(x[3] % 2 = 0, x[3], x[3] + 1)

   (0) -> (1), if (y[0] >= 0 && x[0] = y[0] + 1  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (0) -> (2), if (y[0] >= 0 && x[0] = y[0] + 1  & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (0), if (x[1] ->^* x[0] & round(x[1]) ->^* y[0])
   (2) -> (3), if (x[2] ->^* x[3])

The set Q consists of the following terms:
minus(x0, x1)
minusNat(TRUE, x0, x1)
round(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
round(x) -> if(x % 2 = 0, x, x + 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): MINUS(x[0], y[0]) -> MINUSNAT(y[0] >= 0 && x[0] = y[0] + 1, x[0], y[0])
(1): MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1]))
(2): MINUSNAT(TRUE, x[2], y[2]) -> ROUND(x[2])
(3): ROUND(x[3]) -> IF(x[3] % 2 = 0, x[3], x[3] + 1)

   (0) -> (1), if (y[0] >= 0 && x[0] = y[0] + 1  & x[0] ->^* x[1] & y[0] ->^* y[1])
   (0) -> (2), if (y[0] >= 0 && x[0] = y[0] + 1  & x[0] ->^* x[2] & y[0] ->^* y[2])
   (1) -> (0), if (x[1] ->^* x[0] & round(x[1]) ->^* y[0])
   (2) -> (3), if (x[2] ->^* x[3])

The set Q consists of the following terms:
minus(x0, x1)
minusNat(TRUE, x0, x1)
round(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(5) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
round(x) -> if(x % 2 = 0, x, x + 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(1): MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1]))
(0): MINUS(x[0], y[0]) -> MINUSNAT(y[0] >= 0 && x[0] = y[0] + 1, x[0], y[0])

   (1) -> (0), if (x[1] ->^* x[0] & round(x[1]) ->^* y[0])
   (0) -> (1), if (y[0] >= 0 && x[0] = y[0] + 1  & x[0] ->^* x[1] & y[0] ->^* y[1])

The set Q consists of the following terms:
minus(x0, x1)
minusNat(TRUE, x0, x1)
round(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(7) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpCand1ShapeHeuristic@50f518f3
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 2
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1])) the following chains were created:
*We consider the chain MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1])), MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0]), MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1])), MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0]) which results in the following constraint:

(1)    (x[1]=x[0] & round(x[1])=y[0] & &&(>=(y[0], 0), =(x[0], +(y[0], 1)))=TRUE & x[0]=x[1]1 & y[0]=y[1]1 & x[1]1=x[0]1 & round(x[1]1)=y[0]1  ==>  MINUSNAT(TRUE, x[1]1, y[1]1)_>=_NonInfC & MINUSNAT(TRUE, x[1]1, y[1]1)_>=_MINUS(x[1]1, round(x[1]1)) & (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=))



We simplified constraint (1) using rules (III), (IV), (VII), (IDP_BOOLEAN), (REWRITING) which results in the following new constraint:

(2)    (=(%(x[1], 2), 0)=x0 & +(x[1], 1)=x1 & if(x0, x[1], x1)=y[0] & >=(y[0], 0)=TRUE & >=(x[1], +(y[0], 1))=TRUE & <=(x[1], +(y[0], 1))=TRUE  ==>  MINUSNAT(TRUE, x[1], y[0])_>=_NonInfC & MINUSNAT(TRUE, x[1], y[0])_>=_MINUS(x[1], round(x[1])) & (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1] + [-1]x0 >= 0 & x[1] + [1] + [-1]x1 >= 0 & y[0] >= 0 & x[1] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[1] >= 0  ==>  (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=) & [(2)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[0] + [bni_20]x[1] >= 0 & [(-1)bso_21] + [-1]y[0] + x[1] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1] + [-1]x0 >= 0 & x[1] + [1] + [-1]x1 >= 0 & y[0] >= 0 & x[1] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[1] >= 0  ==>  (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=) & [(2)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[0] + [bni_20]x[1] >= 0 & [(-1)bso_21] + [-1]y[0] + x[1] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1] + [-1]x0 >= 0 & x[1] + [1] + [-1]x1 >= 0 & y[0] >= 0 & x[1] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[1] >= 0  ==>  (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=) & [(2)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[0] + [bni_20]x[1] >= 0 & [(-1)bso_21] + [-1]y[0] + x[1] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    ([-1] + x0 >= 0 & x[1] + [1] + [-1]x1 >= 0 & y[0] >= 0 & x[1] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[1] >= 0  ==>  (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=) & [(2)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[0] + [bni_20]x[1] >= 0 & [(-1)bso_21] + [-1]y[0] + x[1] >= 0)



We simplified constraint (6) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(7)    (y[0] >= 0 & x[1] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[1] >= 0  ==>  (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=) & [(2)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[0] + [bni_20]x[1] >= 0 & [(-1)bso_21] + [-1]y[0] + x[1] >= 0)








For Pair MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0]) the following chains were created:
*We consider the chain MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0]), MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1])) which results in the following constraint:

(1)    (&&(>=(y[0], 0), =(x[0], +(y[0], 1)))=TRUE & x[0]=x[1] & y[0]=y[1]  ==>  MINUS(x[0], y[0])_>=_NonInfC & MINUS(x[0], y[0])_>=_MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0]) & (U^Increasing(MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(y[0], 0)=TRUE & >=(x[0], +(y[0], 1))=TRUE & <=(x[0], +(y[0], 1))=TRUE  ==>  MINUS(x[0], y[0])_>=_NonInfC & MINUS(x[0], y[0])_>=_MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0]) & (U^Increasing(MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[0] >= 0 & x[0] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])), >=) & [(2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]y[0] + [bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[0] >= 0 & x[0] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])), >=) & [(2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]y[0] + [bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[0] >= 0 & x[0] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])), >=) & [(2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]y[0] + [bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1]))

*(y[0] >= 0 & x[1] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[1] >= 0  ==>  (U^Increasing(MINUS(x[1]1, round(x[1]1))), >=) & [(2)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]y[0] + [bni_20]x[1] >= 0 & [(-1)bso_21] + [-1]y[0] + x[1] >= 0)




*MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])

*(y[0] >= 0 & x[0] + [-1] + [-1]y[0] >= 0 & y[0] + [1] + [-1]x[0] >= 0  ==>  (U^Increasing(MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])), >=) & [(2)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]y[0] + [bni_22]x[0] >= 0 & [(-1)bso_23] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(round(x_1)) = x_1
   POL(if(x_1, x_2, x_3)) = [-1]max{[-1]x_3, [-1]x_2}
   POL(=(x_1, x_2)) = [-1]
   POL(2) = [2]
   POL(0) = 0
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(1) = [1]
   POL(MINUSNAT(x_1, x_2, x_3)) = [2] + [-1]x_3 + x_2
   POL(MINUS(x_1, x_2)) = [2] + [-1]x_2 + x_1
   POL(&&(x_1, x_2)) = [-1]
   POL(>=(x_1, x_2)) = [-1]


The following pairs are in P_>:


   MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1]))


The following pairs are in P_bound:


   MINUSNAT(TRUE, x[1], y[1]) -> MINUS(x[1], round(x[1]))
   MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])


The following pairs are in P_>=:


   MINUS(x[0], y[0]) -> MINUSNAT(&&(>=(y[0], 0), =(x[0], +(y[0], 1))), x[0], y[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   if(=(%(x, 2), 0), x, +(x, 1))^1 -> round(x)^1
   u^1 -> if(TRUE, u, v)^1
   v^1 -> if(FALSE, u, v)^1

----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

The ITRS R consists of the following rules:
round(x) -> if(x % 2 = 0, x, x + 1)
if(TRUE, u, v) -> u
if(FALSE, u, v) -> v

The integer pair graph contains the following rules and edges:
(0): MINUS(x[0], y[0]) -> MINUSNAT(y[0] >= 0 && x[0] = y[0] + 1, x[0], y[0])


The set Q consists of the following terms:
minus(x0, x1)
minusNat(TRUE, x0, x1)
round(x0)
if(TRUE, x0, x1)
if(FALSE, x0, x1)

----------------------------------------

(9) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(10)
TRUE
