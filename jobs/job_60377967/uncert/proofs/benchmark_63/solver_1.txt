YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WbT5F.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 171 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) IDP
(9) IDPNonInfProof [SOUND, 0 ms]
(10) IDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y) -> Cond_eval(x >= 0, x, y, z)
Cond_eval(TRUE, x, y, z) -> eval(x - 1, z)
eval(x, y) -> Cond_eval1(y >= 0, x, y)
Cond_eval1(TRUE, x, y) -> eval(x, y - 1)
The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

The ITRS R consists of the following rules:
eval(x, y) -> Cond_eval(x >= 0, x, y, z)
Cond_eval(TRUE, x, y, z) -> eval(x - 1, z)
eval(x, y) -> Cond_eval1(y >= 0, x, y)
Cond_eval1(TRUE, x, y) -> eval(x, y - 1)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] >= 0, x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, z[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] >= 0, x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], y[3] - 1)

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & z[1] ->^* y[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & z[1] ->^* y[2])
   (2) -> (3), if (y[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] >= 0, x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, z[1])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] >= 0, x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], y[3] - 1)

   (0) -> (1), if (x[0] >= 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & z[1] ->^* y[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & z[1] ->^* y[2])
   (2) -> (3), if (y[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@1b12460a
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y) -> COND_EVAL(>=(x, 0), x, y, z) the following chains were created:
*We consider the chain COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1]), EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1]) which results in the following constraint:

(1)    (-(x[1], 1)=x[0] & z[1]=y[0] & >=(x[0], 0)=TRUE & x[0]=x[1]1 & y[0]=y[1]1 & z[0]=z[1]1  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(-(x[1], 1), 0)=TRUE  ==>  EVAL(-(x[1], 1), z[1])_>=_NonInfC & EVAL(-(x[1], 1), z[1])_>=_COND_EVAL(>=(-(x[1], 1), 0), -(x[1], 1), z[1], z[0]) & (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[1] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & [(-3)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[1] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[1] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & [(-3)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[1] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[1] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & [(-3)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[1] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[1] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & 0 = 0 & [(-3)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[1] >= 0 & 0 = 0 & [(-1)bso_17] >= 0)




*We consider the chain COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)), EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1]) which results in the following constraint:

(1)    (x[3]=x[0] & -(y[3], 1)=y[0] & >=(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  EVAL(x[0], y[0])_>=_NonInfC & EVAL(x[0], y[0])_>=_COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  EVAL(x[0], -(y[3], 1))_>=_NonInfC & EVAL(x[0], -(y[3], 1))_>=_COND_EVAL(>=(x[0], 0), x[0], -(y[3], 1), z[0]) & (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & [(-1)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[0] >= 0 & [(-1)bso_17] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[0] >= 0 & 0 = 0 & [(-1)bso_17] >= 0)








For Pair COND_EVAL(TRUE, x, y, z) -> EVAL(-(x, 1), z) the following chains were created:
*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1]), EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]) which results in the following constraint:

(1)    (>=(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[0]1 & z[1]=y[0]1  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), z[1]) & (U^Increasing(EVAL(-(x[1], 1), z[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), z[0]) & (U^Increasing(EVAL(-(x[1], 1), z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & [2 + (-1)bso_19] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & [2 + (-1)bso_19] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & [2 + (-1)bso_19] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & 0 = 0 & 0 = 0 & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & 0 = 0 & [2 + (-1)bso_19] >= 0)




*We consider the chain EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1]), EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]) which results in the following constraint:

(1)    (>=(x[0], 0)=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[2] & z[1]=y[2]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), z[1]) & (U^Increasing(EVAL(-(x[1], 1), z[1])), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(x[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), z[0]) & (U^Increasing(EVAL(-(x[1], 1), z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & [2 + (-1)bso_19] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & [2 + (-1)bso_19] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & [2 + (-1)bso_19] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & 0 = 0 & 0 = 0 & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & 0 = 0 & [2 + (-1)bso_19] >= 0)








For Pair EVAL(x, y) -> COND_EVAL1(>=(y, 0), x, y) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)) which results in the following constraint:

(1)    (>=(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(>=(y[2], 0), x[2], y[2]) & (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(y[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(>=(y[2], 0), x[2], y[2]) & (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(2)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(2)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(2)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(2)bni_20] = 0 & [(-1)bni_20 + (-1)Bound*bni_20] >= 0 & [(-1)bso_21] >= 0)








For Pair COND_EVAL1(TRUE, x, y) -> EVAL(x, -(y, 1)) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)), EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0]) which results in the following constraint:

(1)    (>=(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[0] & -(y[3], 1)=y[0]  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(x[3], -(y[3], 1)) & (U^Increasing(EVAL(x[3], -(y[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(y[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(x[2], -(y[2], 1)) & (U^Increasing(EVAL(x[3], -(y[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(2)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(2)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(2)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(2)bni_22] = 0 & [(-1)bni_22 + (-1)Bound*bni_22] >= 0 & [(-1)bso_23] >= 0)




*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)), EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]) which results in the following constraint:

(1)    (>=(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[2]1 & -(y[3], 1)=y[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(x[3], -(y[3], 1)) & (U^Increasing(EVAL(x[3], -(y[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(y[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(x[2], -(y[2], 1)) & (U^Increasing(EVAL(x[3], -(y[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(2)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(2)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(2)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(2)bni_22] = 0 & [(-1)bni_22 + (-1)Bound*bni_22] >= 0 & [(-1)bso_23] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y) -> COND_EVAL(>=(x, 0), x, y, z)

*(x[1] + [-1] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & 0 = 0 & [(-3)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[1] >= 0 & 0 = 0 & [(-1)bso_17] >= 0)


*(x[0] >= 0  ==>  (U^Increasing(COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])), >=) & 0 = 0 & [(-1)bni_16 + (-1)Bound*bni_16] + [(2)bni_16]x[0] >= 0 & 0 = 0 & [(-1)bso_17] >= 0)




*COND_EVAL(TRUE, x, y, z) -> EVAL(-(x, 1), z)

*(x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & 0 = 0 & 0 = 0 & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & 0 = 0 & [2 + (-1)bso_19] >= 0)


*(x[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), z[1])), >=) & 0 = 0 & 0 = 0 & [(-1)bni_18 + (-1)Bound*bni_18] + [(2)bni_18]x[0] >= 0 & 0 = 0 & [2 + (-1)bso_19] >= 0)




*EVAL(x, y) -> COND_EVAL1(>=(y, 0), x, y)

*(y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(2)bni_20] = 0 & [(-1)bni_20 + (-1)Bound*bni_20] >= 0 & [(-1)bso_21] >= 0)




*COND_EVAL1(TRUE, x, y) -> EVAL(x, -(y, 1))

*(y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(2)bni_22] = 0 & [(-1)bni_22 + (-1)Bound*bni_22] >= 0 & [(-1)bso_23] >= 0)


*(y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(2)bni_22] = 0 & [(-1)bni_22 + (-1)Bound*bni_22] >= 0 & [(-1)bso_23] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(EVAL(x_1, x_2)) = [-1] + [2]x_1
   POL(COND_EVAL(x_1, x_2, x_3, x_4)) = [-1] + [2]x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_EVAL1(x_1, x_2, x_3)) = [-1] + [2]x_2


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1])


The following pairs are in P_bound:


   EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])
   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), z[1])


The following pairs are in P_>=:


   EVAL(x[0], y[0]) -> COND_EVAL(>=(x[0], 0), x[0], y[0], z[0])
   EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2])
   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1))


There are no usable rules.
----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0]) -> COND_EVAL(x[0] >= 0, x[0], y[0], z[0])
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] >= 0, x[2], y[2])
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], y[3] - 1)

   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])
   (2) -> (3), if (y[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], y[3] - 1)
(2): EVAL(x[2], y[2]) -> COND_EVAL1(y[2] >= 0, x[2], y[2])

   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2])
   (2) -> (3), if (y[2] >= 0  & x[2] ->^* x[3] & y[2] ->^* y[3])

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(9) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@1b12460a
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)), EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]) which results in the following constraint:

(1)    (>=(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3] & x[3]=x[2]1 & -(y[3], 1)=y[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3])_>=_EVAL(x[3], -(y[3], 1)) & (U^Increasing(EVAL(x[3], -(y[3], 1))), >=))



We simplified constraint (1) using rules (III), (IV) which results in the following new constraint:

(2)    (>=(y[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2])_>=_EVAL(x[2], -(y[2], 1)) & (U^Increasing(EVAL(x[3], -(y[3], 1))), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [1 + (-1)bso_12] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [1 + (-1)bso_12] >= 0)








For Pair EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]) the following chains were created:
*We consider the chain EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2]), COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1)) which results in the following constraint:

(1)    (>=(y[2], 0)=TRUE & x[2]=x[3] & y[2]=y[3]  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(>=(y[2], 0), x[2], y[2]) & (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (>=(y[2], 0)=TRUE  ==>  EVAL(x[2], y[2])_>=_NonInfC & EVAL(x[2], y[2])_>=_COND_EVAL1(>=(y[2], 0), x[2], y[2]) & (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & [(-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [1 + (-1)bso_14] >= 0)



We simplified constraint (5) using rule (IDP_UNRESTRICTED_VARS) which results in the following new constraint:

(6)    (y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & 0 = 0 & [(-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [1 + (-1)bso_14] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1))

*(y[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1))), >=) & 0 = 0 & [(-1)bni_11 + (-1)Bound*bni_11] + [(2)bni_11]y[2] >= 0 & [1 + (-1)bso_12] >= 0)




*EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2])

*(y[2] >= 0  ==>  (U^Increasing(COND_EVAL1(>=(y[2], 0), x[2], y[2])), >=) & 0 = 0 & [(-1)Bound*bni_13] + [(2)bni_13]y[2] >= 0 & [1 + (-1)bso_14] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = 0
   POL(COND_EVAL1(x_1, x_2, x_3)) = [-1] + [2]x_3
   POL(EVAL(x_1, x_2)) = [2]x_2
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0


The following pairs are in P_>:


   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1))
   EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2])


The following pairs are in P_bound:


   COND_EVAL1(TRUE, x[3], y[3]) -> EVAL(x[3], -(y[3], 1))
   EVAL(x[2], y[2]) -> COND_EVAL1(>=(y[2], 0), x[2], y[2])


The following pairs are in P_>=:

none


There are no usable rules.
----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 + 	~ 	Add: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
none

R is empty.

The integer pair graph is empty.

The set Q consists of the following terms:
eval(x0, x1)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1)

----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
