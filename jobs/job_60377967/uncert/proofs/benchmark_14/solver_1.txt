YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/goZYB.itrs
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given ITRS could be proven:

(0) ITRS
(1) ITRStoIDPProof [EQUIVALENT, 0 ms]
(2) IDP
(3) UsableRulesProof [EQUIVALENT, 0 ms]
(4) IDP
(5) IDPNonInfProof [SOUND, 254 ms]
(6) IDP
(7) IDependencyGraphProof [EQUIVALENT, 0 ms]
(8) IDP
(9) IDPNonInfProof [SOUND, 75 ms]
(10) IDP
(11) IDependencyGraphProof [EQUIVALENT, 0 ms]
(12) IDP
(13) IDPNonInfProof [SOUND, 18 ms]
(14) IDP
(15) IDependencyGraphProof [EQUIVALENT, 0 ms]
(16) TRUE


----------------------------------------

(0)
Obligation:
ITRS problem:

The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>

The TRS R consists of the following rules:
eval(x, y, z) -> Cond_eval(x + y > z && z >= 0 && x > 0, x, y, z)
Cond_eval(TRUE, x, y, z) -> eval(x - 1, y, z)
eval(x, y, z) -> Cond_eval1(x + y > z && z >= 0 && 0 >= x && y > 0, x, y, z)
Cond_eval1(TRUE, x, y, z) -> eval(x, y - 1, z)
eval(x, y, z) -> Cond_eval2(x + y > z && z >= 0 && 0 >= x && 0 >= y, x, y, z)
Cond_eval2(TRUE, x, y, z) -> eval(x, y, z)
The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(1) ITRStoIDPProof (EQUIVALENT)
Added dependency pairs
----------------------------------------

(2)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

The ITRS R consists of the following rules:
eval(x, y, z) -> Cond_eval(x + y > z && z >= 0 && x > 0, x, y, z)
Cond_eval(TRUE, x, y, z) -> eval(x - 1, y, z)
eval(x, y, z) -> Cond_eval1(x + y > z && z >= 0 && 0 >= x && y > 0, x, y, z)
Cond_eval1(TRUE, x, y, z) -> eval(x, y - 1, z)
eval(x, y, z) -> Cond_eval2(x + y > z && z >= 0 && 0 >= x && 0 >= y, x, y, z)
Cond_eval2(TRUE, x, y, z) -> eval(x, y, z)

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0, x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], y[3] - 1, z[3])
(4): EVAL(x[4], y[4], z[4]) -> COND_EVAL2(x[4] + y[4] > z[4] && z[4] >= 0 && 0 >= x[4] && 0 >= y[4], x[4], y[4], z[4])
(5): COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5])

   (0) -> (1), if (x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (1) -> (4), if (x[1] - 1 ->^* x[4] & y[1] ->^* y[4] & z[1] ->^* z[4])
   (2) -> (3), if (x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0] & z[3] ->^* z[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2] & z[3] ->^* z[2])
   (3) -> (4), if (x[3] ->^* x[4] & y[3] - 1 ->^* y[4] & z[3] ->^* z[4])
   (4) -> (5), if (x[4] + y[4] > z[4] && z[4] >= 0 && 0 >= x[4] && 0 >= y[4]  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] ->^* y[0] & z[5] ->^* z[0])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] ->^* y[2] & z[5] ->^* z[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] ->^* y[4] & z[5] ->^* z[4])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(3) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(4)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0, x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], y[3] - 1, z[3])
(4): EVAL(x[4], y[4], z[4]) -> COND_EVAL2(x[4] + y[4] > z[4] && z[4] >= 0 && 0 >= x[4] && 0 >= y[4], x[4], y[4], z[4])
(5): COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5])

   (0) -> (1), if (x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (1) -> (4), if (x[1] - 1 ->^* x[4] & y[1] ->^* y[4] & z[1] ->^* z[4])
   (2) -> (3), if (x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0] & z[3] ->^* z[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2] & z[3] ->^* z[2])
   (3) -> (4), if (x[3] ->^* x[4] & y[3] - 1 ->^* y[4] & z[3] ->^* z[4])
   (4) -> (5), if (x[4] + y[4] > z[4] && z[4] >= 0 && 0 >= x[4] && 0 >= y[4]  & x[4] ->^* x[5] & y[4] ->^* y[5] & z[4] ->^* z[5])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] ->^* y[0] & z[5] ->^* z[0])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] ->^* y[2] & z[5] ->^* z[2])
   (5) -> (4), if (x[5] ->^* x[4] & y[5] ->^* y[4] & z[5] ->^* z[4])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(5) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@368830ec
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x, y, z) -> COND_EVAL(&&(&&(>(+(x, y), z), >=(z, 0)), >(x, 0)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)








For Pair COND_EVAL(TRUE, x, y, z) -> EVAL(-(x, 1), y, z) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1 & z[1]=z[0]1  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)




*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[2] & y[1]=y[2] & z[1]=z[2]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)




*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[4] & y[1]=y[4] & z[1]=z[4]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)








For Pair EVAL(x, y, z) -> COND_EVAL1(&&(&&(&&(>(+(x, y), z), >=(z, 0)), >=(0, x)), >(y, 0)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [(-1)bso_30] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [(-1)bso_30] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [bni_29]x[2] >= 0 & [(-1)bso_30] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [(-1)bni_29]x[2] >= 0 & [(-1)bso_30] >= 0)








For Pair COND_EVAL1(TRUE, x, y, z) -> EVAL(x, -(y, 1), z) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[0] & -(y[3], 1)=y[0] & z[3]=z[0]  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(x[3], -(y[3], 1), z[3]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(x[2], -(y[2], 1), z[2]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)




*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[2]1 & -(y[3], 1)=y[2]1 & z[3]=z[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(x[3], -(y[3], 1), z[3]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(x[2], -(y[2], 1), z[2]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)




*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]), EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[4] & -(y[3], 1)=y[4] & z[3]=z[4]  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(x[3], -(y[3], 1), z[3]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(x[2], -(y[2], 1), z[2]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)








For Pair EVAL(x, y, z) -> COND_EVAL2(&&(&&(&&(>(+(x, y), z), >=(z, 0)), >=(0, x)), >=(0, y)), x, y, z) the following chains were created:
*We consider the chain EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4]), COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4]))=TRUE & x[4]=x[5] & y[4]=y[5] & z[4]=z[5]  ==>  EVAL(x[4], y[4], z[4])_>=_NonInfC & EVAL(x[4], y[4], z[4])_>=_COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4]) & (U^Increasing(COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>=(0, y[4])=TRUE & >=(0, x[4])=TRUE & >(+(x[4], y[4]), z[4])=TRUE & >=(z[4], 0)=TRUE  ==>  EVAL(x[4], y[4], z[4])_>=_NonInfC & EVAL(x[4], y[4], z[4])_>=_COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4]) & (U^Increasing(COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ([-1]y[4] >= 0 & [-1]x[4] >= 0 & x[4] + [-1] + y[4] + [-1]z[4] >= 0 & z[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[4] + [bni_33]x[4] >= 0 & [-1 + (-1)bso_34] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ([-1]y[4] >= 0 & [-1]x[4] >= 0 & x[4] + [-1] + y[4] + [-1]z[4] >= 0 & z[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[4] + [bni_33]x[4] >= 0 & [-1 + (-1)bso_34] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ([-1]y[4] >= 0 & [-1]x[4] >= 0 & x[4] + [-1] + y[4] + [-1]z[4] >= 0 & z[4] >= 0  ==>  (U^Increasing(COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])), >=) & [(-1)bni_33 + (-1)Bound*bni_33] + [(-1)bni_33]z[4] + [bni_33]x[4] >= 0 & [-1 + (-1)bso_34] >= 0)



We solved constraint (5) using rule (IDP_SMT_SPLIT).




For Pair COND_EVAL2(TRUE, x, y, z) -> EVAL(x, y, z) the following chains were created:
*We consider the chain COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) which results in the following constraint:

(1)    (x[5]=x[0] & y[5]=y[0] & z[5]=z[0]  ==>  COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], y[5], z[5]) & (U^Increasing(EVAL(x[5], y[5], z[5])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], y[5], z[5]) & (U^Increasing(EVAL(x[5], y[5], z[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)




*We consider the chain COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (x[5]=x[2] & y[5]=y[2] & z[5]=z[2]  ==>  COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], y[5], z[5]) & (U^Increasing(EVAL(x[5], y[5], z[5])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], y[5], z[5]) & (U^Increasing(EVAL(x[5], y[5], z[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)




*We consider the chain COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5]), EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4]) which results in the following constraint:

(1)    (x[5]=x[4] & y[5]=y[4] & z[5]=z[4]  ==>  COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], y[5], z[5]) & (U^Increasing(EVAL(x[5], y[5], z[5])), >=))



We simplified constraint (1) using rule (IV) which results in the following new constraint:

(2)    (COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_NonInfC & COND_EVAL2(TRUE, x[5], y[5], z[5])_>=_EVAL(x[5], y[5], z[5]) & (U^Increasing(EVAL(x[5], y[5], z[5])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    ((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x, y, z) -> COND_EVAL(&&(&&(>(+(x, y), z), >=(z, 0)), >(x, 0)), x, y, z)

*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_25 + (-1)Bound*bni_25] + [(-1)bni_25]z[0] + [bni_25]x[0] >= 0 & [(-1)bso_26] >= 0)




*COND_EVAL(TRUE, x, y, z) -> EVAL(-(x, 1), y, z)

*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_27 + (-1)Bound*bni_27] + [(-1)bni_27]z[0] + [bni_27]x[0] >= 0 & [1 + (-1)bso_28] >= 0)




*EVAL(x, y, z) -> COND_EVAL1(&&(&&(&&(>(+(x, y), z), >=(z, 0)), >=(0, x)), >(y, 0)), x, y, z)

*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_29 + (-1)Bound*bni_29] + [(-1)bni_29]z[2] + [(-1)bni_29]x[2] >= 0 & [(-1)bso_30] >= 0)




*COND_EVAL1(TRUE, x, y, z) -> EVAL(x, -(y, 1), z)

*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)


*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)


*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_31 + (-1)Bound*bni_31] + [(-1)bni_31]z[2] + [(-1)bni_31]x[2] >= 0 & [(-1)bso_32] >= 0)




*EVAL(x, y, z) -> COND_EVAL2(&&(&&(&&(>(+(x, y), z), >=(z, 0)), >=(0, x)), >=(0, y)), x, y, z)




*COND_EVAL2(TRUE, x, y, z) -> EVAL(x, y, z)

*((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)


*((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)


*((U^Increasing(EVAL(x[5], y[5], z[5])), >=) & [bni_35] = 0 & [1 + (-1)bso_36] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(EVAL(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_1
   POL(COND_EVAL(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(COND_EVAL1(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_2 + [-1]x_1
   POL(COND_EVAL2(x_1, x_2, x_3, x_4)) = [-1]x_4 + x_2 + [2]x_1


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])
   EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])
   COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5])


The following pairs are in P_bound:


   EVAL(x[4], y[4], z[4]) -> COND_EVAL2(&&(&&(&&(>(+(x[4], y[4]), z[4]), >=(z[4], 0)), >=(0, x[4])), >=(0, y[4])), x[4], y[4], z[4])


The following pairs are in P_>=:


   EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])
   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])
   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   &&(TRUE, TRUE)^1 <-> TRUE^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(6)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0, x[0], y[0], z[0])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], y[3] - 1, z[3])
(5): COND_EVAL2(TRUE, x[5], y[5], z[5]) -> EVAL(x[5], y[5], z[5])

   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0] & z[3] ->^* z[0])
   (5) -> (0), if (x[5] ->^* x[0] & y[5] ->^* y[0] & z[5] ->^* z[0])
   (0) -> (1), if (x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2] & z[3] ->^* z[2])
   (5) -> (2), if (x[5] ->^* x[2] & y[5] ->^* y[2] & z[5] ->^* z[2])
   (2) -> (3), if (x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(7) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], y[3] - 1, z[3])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])
(1): COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(x[1] - 1, y[1], z[1])
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0, x[0], y[0], z[0])

   (1) -> (0), if (x[1] - 1 ->^* x[0] & y[1] ->^* y[0] & z[1] ->^* z[0])
   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0] & z[3] ->^* z[0])
   (0) -> (1), if (x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0  & x[0] ->^* x[1] & y[0] ->^* y[1] & z[0] ->^* z[1])
   (1) -> (2), if (x[1] - 1 ->^* x[2] & y[1] ->^* y[2] & z[1] ->^* z[2])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2] & z[3] ->^* z[2])
   (2) -> (3), if (x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(9) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@368830ec
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[0] & -(y[3], 1)=y[0] & z[3]=z[0]  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(x[3], -(y[3], 1), z[3]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(x[2], -(y[2], 1), z[2]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)




*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[2]1 & -(y[3], 1)=y[2]1 & z[3]=z[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(x[3], -(y[3], 1), z[3]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(x[2], -(y[2], 1), z[2]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)








For Pair EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)








For Pair COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[0]1 & y[1]=y[0]1 & z[1]=z[0]1  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)




*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1] & -(x[1], 1)=x[2] & y[1]=y[2] & z[1]=z[2]  ==>  COND_EVAL(TRUE, x[1], y[1], z[1])_>=_NonInfC & COND_EVAL(TRUE, x[1], y[1], z[1])_>=_EVAL(-(x[1], 1), y[1], z[1]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  COND_EVAL(TRUE, x[0], y[0], z[0])_>=_NonInfC & COND_EVAL(TRUE, x[0], y[0], z[0])_>=_EVAL(-(x[0], 1), y[0], z[0]) & (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)








For Pair EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) the following chains were created:
*We consider the chain EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]), COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1]) which results in the following constraint:

(1)    (&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0))=TRUE & x[0]=x[1] & y[0]=y[1] & z[0]=z[1]  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(x[0], 0)=TRUE & >(+(x[0], y[0]), z[0])=TRUE & >=(z[0], 0)=TRUE  ==>  EVAL(x[0], y[0], z[0])_>=_NonInfC & EVAL(x[0], y[0], z[0])_>=_COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0]) & (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraints:

(6)    (x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)

(7)    (x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3])

*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)


*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_20 + (-1)Bound*bni_20] + [(-1)bni_20]x[2] >= 0 & [(-1)bso_21] >= 0)




*EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])

*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_22 + (-1)Bound*bni_22] + [(-1)bni_22]x[2] >= 0 & [(-1)bso_23] >= 0)




*COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])

*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(EVAL(-(x[1], 1), y[1], z[1])), >=) & [(-1)bni_24 + (-1)Bound*bni_24] + [bni_24]x[0] >= 0 & [1 + (-1)bso_25] >= 0)




*EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])

*(x[0] + [-1] >= 0 & x[0] + [-1] + y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)


*(x[0] + [-1] >= 0 & x[0] + [-1] + [-1]y[0] + [-1]z[0] >= 0 & z[0] >= 0 & y[0] >= 0  ==>  (U^Increasing(COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])), >=) & [(-1)bni_26 + (-1)Bound*bni_26] + [bni_26]x[0] >= 0 & [(-1)bso_27] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [3]
   POL(COND_EVAL1(x_1, x_2, x_3, x_4)) = [-1] + x_2
   POL(EVAL(x_1, x_2, x_3)) = [-1] + x_1
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]
   POL(&&(x_1, x_2)) = [-1]
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(COND_EVAL(x_1, x_2, x_3, x_4)) = [-1] + x_2


The following pairs are in P_>:


   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])


The following pairs are in P_bound:


   COND_EVAL(TRUE, x[1], y[1], z[1]) -> EVAL(-(x[1], 1), y[1], z[1])
   EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])


The following pairs are in P_>=:


   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3])
   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])
   EVAL(x[0], y[0], z[0]) -> COND_EVAL(&&(&&(>(+(x[0], y[0]), z[0]), >=(z[0], 0)), >(x[0], 0)), x[0], y[0], z[0])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(10)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Integer, Boolean

R is empty.

The integer pair graph contains the following rules and edges:
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], y[3] - 1, z[3])
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])
(0): EVAL(x[0], y[0], z[0]) -> COND_EVAL(x[0] + y[0] > z[0] && z[0] >= 0 && x[0] > 0, x[0], y[0], z[0])

   (3) -> (0), if (x[3] ->^* x[0] & y[3] - 1 ->^* y[0] & z[3] ->^* z[0])
   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2] & z[3] ->^* z[2])
   (2) -> (3), if (x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(11) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(12)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])
(3): COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], y[3] - 1, z[3])

   (3) -> (2), if (x[3] ->^* x[2] & y[3] - 1 ->^* y[2] & z[3] ->^* z[2])
   (2) -> (3), if (x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0  & x[2] ->^* x[3] & y[2] ->^* y[3] & z[2] ->^* z[3])

The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(13) IDPNonInfProof (SOUND)
Used the following options for this NonInfProof:

IDPGPoloSolver:
Range: [(-1,2)]
IsNat: false
Interpretation Shape Heuristic: aprove.DPFramework.IDPProblem.Processors.nonInf.poly.IdpDefaultShapeHeuristic@368830ec
Constraint Generator: NonInfConstraintGenerator:
PathGenerator: MetricPathGenerator:
Max Left Steps: 1
Max Right Steps: 1



The constraints were generated the following way:

The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3]  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (1) using rules (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  EVAL(x[2], y[2], z[2])_>=_NonInfC & EVAL(x[2], y[2], z[2])_>=_COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) & (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[2] + [bni_15]y[2] + [(-1)bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[2] + [bni_15]y[2] + [(-1)bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[2] + [bni_15]y[2] + [(-1)bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[2] + [bni_15]y[2] + [bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)








For Pair COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]) the following chains were created:
*We consider the chain EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]), COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3]), EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2]) which results in the following constraint:

(1)    (&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0))=TRUE & x[2]=x[3] & y[2]=y[3] & z[2]=z[3] & x[3]=x[2]1 & -(y[3], 1)=y[2]1 & z[3]=z[2]1  ==>  COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_NonInfC & COND_EVAL1(TRUE, x[3], y[3], z[3])_>=_EVAL(x[3], -(y[3], 1), z[3]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (1) using rules (III), (IV), (IDP_BOOLEAN) which results in the following new constraint:

(2)    (>(y[2], 0)=TRUE & >=(0, x[2])=TRUE & >(+(x[2], y[2]), z[2])=TRUE & >=(z[2], 0)=TRUE  ==>  COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_NonInfC & COND_EVAL1(TRUE, x[2], y[2], z[2])_>=_EVAL(x[2], -(y[2], 1), z[2]) & (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=))



We simplified constraint (2) using rule (POLY_CONSTRAINTS) which results in the following new constraint:

(3)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[2] + [bni_17]y[2] + [(-1)bni_17]x[2] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (3) using rule (IDP_POLY_SIMPLIFY) which results in the following new constraint:

(4)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[2] + [bni_17]y[2] + [(-1)bni_17]x[2] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (4) using rule (POLY_REMOVE_MIN_MAX) which results in the following new constraint:

(5)    (y[2] + [-1] >= 0 & [-1]x[2] >= 0 & x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[2] + [bni_17]y[2] + [(-1)bni_17]x[2] >= 0 & [1 + (-1)bso_18] >= 0)



We simplified constraint (5) using rule (IDP_SMT_SPLIT) which results in the following new constraint:

(6)    (y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[2] + [bni_17]y[2] + [bni_17]x[2] >= 0 & [1 + (-1)bso_18] >= 0)








To summarize, we get the following constraints P__>=_ for the following pairs.

*EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])

*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])), >=) & [(-1)bni_15 + (-1)Bound*bni_15] + [(-1)bni_15]z[2] + [bni_15]y[2] + [bni_15]x[2] >= 0 & [(-1)bso_16] >= 0)




*COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3])

*(y[2] + [-1] >= 0 & x[2] >= 0 & [-1]x[2] + [-1] + y[2] + [-1]z[2] >= 0 & z[2] >= 0  ==>  (U^Increasing(EVAL(x[3], -(y[3], 1), z[3])), >=) & [(-1)bni_17 + (-1)Bound*bni_17] + [(-1)bni_17]z[2] + [bni_17]y[2] + [bni_17]x[2] >= 0 & [1 + (-1)bso_18] >= 0)








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation over integers[POLO]:

   POL(TRUE) = 0
   POL(FALSE) = [1]
   POL(EVAL(x_1, x_2, x_3)) = [-1] + [-1]x_3 + x_2 + [-1]x_1
   POL(COND_EVAL1(x_1, x_2, x_3, x_4)) = [-1] + [-1]x_4 + x_3 + [-1]x_2 + [-1]x_1
   POL(&&(x_1, x_2)) = 0
   POL(>(x_1, x_2)) = [-1]
   POL(+(x_1, x_2)) = x_1 + x_2
   POL(>=(x_1, x_2)) = [-1]
   POL(0) = 0
   POL(-(x_1, x_2)) = x_1 + [-1]x_2
   POL(1) = [1]


The following pairs are in P_>:


   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3])


The following pairs are in P_bound:


   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])
   COND_EVAL1(TRUE, x[3], y[3], z[3]) -> EVAL(x[3], -(y[3], 1), z[3])


The following pairs are in P_>=:


   EVAL(x[2], y[2], z[2]) -> COND_EVAL1(&&(&&(&&(>(+(x[2], y[2]), z[2]), >=(z[2], 0)), >=(0, x[2])), >(y[2], 0)), x[2], y[2], z[2])


At least the following rules have been oriented under context sensitive arithmetic replacement:

   TRUE^1 -> &&(TRUE, TRUE)^1
   FALSE^1 -> &&(TRUE, FALSE)^1
   FALSE^1 -> &&(FALSE, TRUE)^1
   FALSE^1 -> &&(FALSE, FALSE)^1

----------------------------------------

(14)
Obligation:
IDP problem:
The following function symbols are pre-defined:
<<<
 & 	~ 	Bwand: (Integer, Integer) -> Integer
 >= 	~ 	Ge: (Integer, Integer) -> Boolean
 | 	~ 	Bwor: (Integer, Integer) -> Integer
 / 	~ 	Div: (Integer, Integer) -> Integer
 != 	~ 	Neq: (Integer, Integer) -> Boolean
 && 	~ 	Land: (Boolean, Boolean) -> Boolean
 ! 	~ 	Lnot: (Boolean) -> Boolean
 = 	~ 	Eq: (Integer, Integer) -> Boolean
 <= 	~ 	Le: (Integer, Integer) -> Boolean
 ^ 	~ 	Bwxor: (Integer, Integer) -> Integer
 % 	~ 	Mod: (Integer, Integer) -> Integer
 > 	~ 	Gt: (Integer, Integer) -> Boolean
 + 	~ 	Add: (Integer, Integer) -> Integer
 -1 	~ 	UnaryMinus: (Integer) -> Integer
 < 	~ 	Lt: (Integer, Integer) -> Boolean
 || 	~ 	Lor: (Boolean, Boolean) -> Boolean
 - 	~ 	Sub: (Integer, Integer) -> Integer
 ~ 	~ 	Bwnot: (Integer) -> Integer
 * 	~ 	Mul: (Integer, Integer) -> Integer
>>>


The following domains are used:
   Boolean, Integer

R is empty.

The integer pair graph contains the following rules and edges:
(2): EVAL(x[2], y[2], z[2]) -> COND_EVAL1(x[2] + y[2] > z[2] && z[2] >= 0 && 0 >= x[2] && y[2] > 0, x[2], y[2], z[2])


The set Q consists of the following terms:
eval(x0, x1, x2)
Cond_eval(TRUE, x0, x1, x2)
Cond_eval1(TRUE, x0, x1, x2)
Cond_eval2(TRUE, x0, x1, x2)

----------------------------------------

(15) IDependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(16)
TRUE
