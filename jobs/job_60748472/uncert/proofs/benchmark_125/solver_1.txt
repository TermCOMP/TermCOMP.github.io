AST
proof of /home/ff862203/input_KYpYuXYr2J.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) ADP
        (15) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (16) ADP
        (17) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) ADP
        (24) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (25) ADP
        (26) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QReductionProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   start, times(s(x), y), plus(s(x), y), plus(O, y), times(O, y), geo(x)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

And Q contains the following terms:
   start, times(s(x0), x1), plus(s(x0), x1), plus(O, x0), times(O, x0), geo(x0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   START -> 1 : PLUS(GEO(O), GEO(O))
   TIMES(s(x), y) -> 1 : PLUS(TIMES(x, y), y)
   PLUS(s(x), y) -> 1 : s(PLUS(x, y))
   PLUS(O, y) -> 1 : y
   TIMES(O, y) -> 1 : O
   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(10) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(GEO(x_1)) = 1 + x_1
   POL(s(x_1)) = 1 + 2*x_1

----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(15) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(17) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   start
   times(s(x0), x1)
   plus(s(x0), x1)
   plus(O, x0)
   times(O, x0)
   geo(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   start
   times(s(x0), x1)
   plus(s(x0), x1)
   plus(O, x0)
   times(O, x0)
   geo(x0)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   TIMES(s(x), y) -> 1 : PLUS(TIMES(x, y), y)


----------------------------------------

(24) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[PLUS(times(x, y), y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start -> 1 : plus(geo(O), geo(O))
   times(s(x), y) -> 1 : plus(times(x, y), y)
   plus(s(x), y) -> 1 : s(plus(x, y))
   plus(O, y) -> 1 : y
   times(O, y) -> 1 : O
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   TIMES(s(x), y) -> 1 : plus(TIMES(x, y), y)


----------------------------------------

(26) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   TIMES(s(x), y) -> 1 : plus(TIMES(x, y), y)


----------------------------------------

(28) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
The set Q consists of the following terms:

   start
   times(s(x0), x1)
   plus(s(x0), x1)
   plus(O, x0)
   times(O, x0)
   geo(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   start
   times(s(x0), x1)
   plus(s(x0), x1)
   plus(O, x0)
   times(O, x0)
   geo(x0)


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES(s(x), y) -> TIMES(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES(s(x), y) -> TIMES(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(33)
YES
