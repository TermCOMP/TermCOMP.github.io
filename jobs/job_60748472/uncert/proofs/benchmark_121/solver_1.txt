AST
proof of /home/ff862203/input_xYYAdP500B.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) ADP
        (15) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (16) ADP
        (17) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   start(x, y) -> 1 : q(geo(x), y, y)
   q(O, s(y), s(z)) -> 1 : O
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   start(x, y), q(O, s(y), s(z)), q(s(x), s(y), z), q(x, O, s(z)), geo(x)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   start(x, y) -> 1 : q(geo(x), y, y)
   q(O, s(y), s(z)) -> 1 : O
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

And Q contains the following terms:
   start(x0, x1), q(O, s(x0), s(x1)), q(s(x0), s(x1), x2), q(x0, O, s(x1)), geo(x0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start(x, y) -> 1 : q(geo(x), y, y)
   q(O, s(y), s(z)) -> 1 : O
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   START(x, y) -> 1 : Q(GEO(x), y, y)
   Q(O, s(y), s(z)) -> 1 : O
   Q(s(x), s(y), z) -> 1 : Q(x, y, z)
   Q(x, O, s(z)) -> 1 : s(Q(x, s(z), s(z)))
   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start(x, y) -> 1 : q(geo(x), y, y)
   q(O, s(y), s(z)) -> 1 : O
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x


----------------------------------------

(10) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   GEO(x) -> 1 / 2 : GEO(s(x)) || 1 / 2 : x

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(GEO(x_1)) = 1 + x_1
   POL(s(x_1)) = 1 + 2*x_1

----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   start(x, y) -> 1 : q(geo(x), y, y)
   q(O, s(y), s(z)) -> 1 : O
   q(s(x), s(y), z) -> 1 : q(x, y, z)
   q(x, O, s(z)) -> 1 : s(q(x, s(z), s(z)))
   geo(x) -> 1 / 2 : geo(s(x)) || 1 / 2 : x

The ADP Problem has the following rules with annotations:

   Q(x, O, s(z)) -> 1 : s(Q(x, s(z), s(z)))
   Q(s(x), s(y), z) -> 1 : Q(x, y, z)


----------------------------------------

(15) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   Q(x, O, s(z)) -> 1 : s(Q(x, s(z), s(z)))
   Q(s(x), s(y), z) -> 1 : Q(x, y, z)


----------------------------------------

(17) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   Q(x, O, s(z)) -> Q(x, s(z), s(z))
   Q(s(x), s(y), z) -> Q(x, y, z)

R is empty.
The set Q consists of the following terms:

   start(x0, x1)
   q(O, s(x0), s(x1))
   q(s(x0), s(x1), x2)
   q(x0, O, s(x1))
   geo(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   start(x0, x1)
   q(O, s(x0), s(x1))
   q(s(x0), s(x1), x2)
   q(x0, O, s(x1))
   geo(x0)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   Q(x, O, s(z)) -> Q(x, s(z), s(z))
   Q(s(x), s(y), z) -> Q(x, y, z)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*Q(s(x), s(y), z) -> Q(x, y, z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*Q(x, O, s(z)) -> Q(x, s(z), s(z))
The graph contains the following edges 1 >= 1, 3 >= 2, 3 >= 3


----------------------------------------

(22)
YES
