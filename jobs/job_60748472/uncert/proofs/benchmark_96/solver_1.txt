AST
proof of /home/ff862203/input_404QPyyVPe.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) ADP
        (24) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (25) ADP
        (26) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (33) ADP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   rn(x), f(s(0)), id(s(x)), id(0)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

And Q contains the following terms:
   rn(x0), f(s(0)), id(s(x0)), id(0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

The ADP Problem has the following rules with annotations:

   RN(x) -> 1 / 2 : x || 1 / 2 : s(RN(x))
   F(s(0)) -> 1 : c(F(RN(0)), F(RN(0)))
   ID(s(x)) -> 1 : s(ID(x))
   ID(0) -> 1 : 0


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 1 less node.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

The ADP Problem has the following rules with annotations:

   ID(s(x)) -> 1 : s(ID(x))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   ID(s(x)) -> 1 : s(ID(x))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ID(s(x)) -> ID(x)

R is empty.
The set Q consists of the following terms:

   rn(x0)
   f(s(0))
   id(s(x0))
   id(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   rn(x0)
   f(s(0))
   id(s(x0))
   id(0)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ID(s(x)) -> ID(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ID(s(x)) -> ID(x)
The graph contains the following edges 1 > 1


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

The ADP Problem has the following rules with annotations:

   RN(x) -> 1 / 2 : x || 1 / 2 : s(RN(x))


----------------------------------------

(17) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   RN(x) -> 1 / 2 : x || 1 / 2 : s(RN(x))


----------------------------------------

(19) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   RN(x) -> 1 / 2 : x || 1 / 2 : s(RN(x))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(RN(x_1)) = 1
   POL(s(x_1)) = 0

----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

The ADP Problem has the following rules with annotations:

   F(s(0)) -> 1 : c(F(RN(0)), F(RN(0)))


----------------------------------------

(24) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[RN(0)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))
   f(s(0)) -> 1 : c(f(rn(0)), f(rn(0)))
   id(s(x)) -> 1 : s(id(x))
   id(0) -> 1 : 0

The ADP Problem has the following rules with annotations:

   F(s(0)) -> 1 : c(F(rn(0)), F(rn(0)))


----------------------------------------

(26) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))

The ADP Problem has the following rules with annotations:

   F(s(0)) -> 1 : c(F(rn(0)), F(rn(0)))


----------------------------------------

(28) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(s(0)) -> 1 : c(F(rn(0)), F(rn(0))) at position [0,0] we obtained the following new ADPs :

   F(s(0)) -> 1 / 2 : c(F(0), F(rn(0))) || 1 / 2 : c(F(s(rn(0))), F(rn(0)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))

The ADP Problem has the following rules with annotations:

   F(s(0)) -> 1 / 2 : c(F(0), F(rn(0))) || 1 / 2 : c(F(s(rn(0))), F(rn(0)))


----------------------------------------

(30) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(0)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))

The ADP Problem has the following rules with annotations:

   F(s(0)) -> 1 / 2 : c(f(0), F(rn(0))) || 1 / 2 : c(F(s(rn(0))), F(rn(0)))


----------------------------------------

(32) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(s(0)) -> 1 / 2 : c(f(0), F(rn(0))) || 1 / 2 : c(F(s(rn(0))), F(rn(0)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(F(x_1)) = 2*x_1
   POL(c(x_1, x_2)) = 0
   POL(f(x_1)) = 0
   POL(rn(x_1)) = 1 + x_1
   POL(s(x_1)) = 2

----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rn(x) -> 1 / 2 : x || 1 / 2 : s(rn(x))

The set of rules with annotations is empty.

----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(35)
YES
