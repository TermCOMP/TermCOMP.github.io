AST
proof of /home/ff862203/input_NtmDxAScNz.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (33) ADP
        (34) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (35) ADP
        (36) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (37) ADP
        (38) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (39) ADP
        (40) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (41) ADP
        (42) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (43) ADP
        (44) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (45) ADP
        (46) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (47) ADP
        (48) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (49) ADP
        (50) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (51) ADP
        (52) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (53) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   gt(s(x), 0), if(false, x), minus(0, y), if(true, x), gt(0, 0), loop(x), minus(x, 0), gt(0, s(y)), gt(s(x), s(y)), minus(s(x), s(y))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

And Q contains the following terms:
   gt(s(x0), 0), if(false, x0), minus(0, x0), if(true, x0), gt(0, 0), loop(x0), minus(x0, 0), gt(0, s(x0)), gt(s(x0), s(x1)), minus(s(x0), s(x1))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   GT(s(x), 0) -> 1 : true
   IF(false, x) -> 1 : stop
   MINUS(0, y) -> 1 : 0
   IF(true, x) -> 1 / 2 : LOOP(MINUS(x, s(0))) || 1 / 2 : LOOP(s(x))
   GT(0, 0) -> 1 : false
   LOOP(x) -> 1 : IF(GT(x, 0), x)
   MINUS(x, 0) -> 1 : x
   GT(0, s(y)) -> 1 : false
   GT(s(x), s(y)) -> 1 : GT(x, y)
   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   MINUS(s(x), s(y)) -> 1 : MINUS(x, y)


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
The set Q consists of the following terms:

   gt(s(x0), 0)
   if(false, x0)
   minus(0, x0)
   if(true, x0)
   gt(0, 0)
   loop(x0)
   minus(x0, 0)
   gt(0, s(x0))
   gt(s(x0), s(x1))
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   gt(s(x0), 0)
   if(false, x0)
   minus(0, x0)
   if(true, x0)
   gt(0, 0)
   loop(x0)
   minus(x0, 0)
   gt(0, s(x0))
   gt(s(x0), s(x1))
   minus(s(x0), s(x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINUS(s(x), s(y)) -> MINUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MINUS(s(x), s(y)) -> MINUS(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   GT(s(x), s(y)) -> 1 : GT(x, y)


----------------------------------------

(17) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   GT(s(x), s(y)) -> 1 : GT(x, y)


----------------------------------------

(19) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
The set Q consists of the following terms:

   gt(s(x0), 0)
   if(false, x0)
   minus(0, x0)
   if(true, x0)
   gt(0, 0)
   loop(x0)
   minus(x0, 0)
   gt(0, s(x0))
   gt(s(x0), s(x1))
   minus(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   gt(s(x0), 0)
   if(false, x0)
   minus(0, x0)
   if(true, x0)
   gt(0, 0)
   loop(x0)
   minus(x0, 0)
   gt(0, s(x0))
   gt(s(x0), s(x1))
   minus(s(x0), s(x1))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT(s(x), s(y)) -> GT(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT(s(x), s(y)) -> GT(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   IF(true, x) -> 1 / 2 : LOOP(MINUS(x, s(0))) || 1 / 2 : LOOP(s(x))
   LOOP(x) -> 1 : IF(GT(x, 0), x)


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[GT(x, 0), MINUS(x, s(0))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   if(false, x) -> 1 : stop
   minus(0, y) -> 1 : 0
   if(true, x) -> 1 / 2 : loop(minus(x, s(0))) || 1 / 2 : loop(s(x))
   gt(0, 0) -> 1 : false
   loop(x) -> 1 : if(gt(x, 0), x)
   minus(x, 0) -> 1 : x
   gt(0, s(y)) -> 1 : false
   gt(s(x), s(y)) -> 1 : gt(x, y)
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))
   LOOP(x) -> 1 : IF(gt(x, 0), x)


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   gt(0, 0) -> 1 : false
   minus(0, y) -> 1 : 0
   minus(s(x), s(y)) -> 1 : minus(x, y)
   minus(x, 0) -> 1 : x

The ADP Problem has the following rules with annotations:

   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))
   LOOP(x) -> 1 : IF(gt(x, 0), x)


----------------------------------------

(30) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule LOOP(x) -> 1 : IF(gt(x, 0), x) we obtained the following new ADPs :

   LOOP(s(y0)) -> 1 : IF(gt(s(y0), 0), s(y0))
   LOOP(0) -> 1 : IF(gt(0, 0), 0)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   minus(0, y) -> 1 : 0
   gt(0, 0) -> 1 : false
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))
   LOOP(s(y0)) -> 1 : IF(gt(s(y0), 0), s(y0))
   LOOP(0) -> 1 : IF(gt(0, 0), 0)


----------------------------------------

(32) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   minus(0, y) -> 1 : 0
   gt(0, 0) -> 1 : false
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(gt(s(y0), 0), s(y0))
   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))


----------------------------------------

(34) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(35)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(s(x), s(y)) -> 1 : minus(x, y)
   minus(x, 0) -> 1 : x
   gt(s(x), 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(gt(s(y0), 0), s(y0))
   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))


----------------------------------------

(36) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule LOOP(s(y0)) -> 1 : IF(gt(s(y0), 0), s(y0)) at position [0] we obtained the following new ADPs :

   LOOP(s(y0)) -> 1 : IF(true, s(y0))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(37)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   gt(s(x), 0) -> 1 : true
   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))
   LOOP(s(y0)) -> 1 : IF(true, s(y0))


----------------------------------------

(38) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(39)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(s(x), s(y)) -> 1 : minus(x, y)
   minus(x, 0) -> 1 : x

The ADP Problem has the following rules with annotations:

   IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x))
   LOOP(s(y0)) -> 1 : IF(true, s(y0))


----------------------------------------

(40) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule IF(true, x) -> 1 / 2 : LOOP(minus(x, s(0))) || 1 / 2 : LOOP(s(x)) we obtained the following new ADPs :

   IF(true, 0) -> 1 / 2 : LOOP(minus(0, s(0))) || 1 / 2 : LOOP(s(0))
   IF(true, s(y0)) -> 1 / 2 : LOOP(minus(s(y0), s(0))) || 1 / 2 : LOOP(s(s(y0)))
   IF(true, x0) -> 1 / 2 : loop(minus(x0, s(0))) || 1 / 2 : LOOP(s(x0))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(41)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))
   IF(true, 0) -> 1 / 2 : LOOP(minus(0, s(0))) || 1 / 2 : LOOP(s(0))
   IF(true, s(y0)) -> 1 / 2 : LOOP(minus(s(y0), s(0))) || 1 / 2 : LOOP(s(s(y0)))
   IF(true, x0) -> 1 / 2 : loop(minus(x0, s(0))) || 1 / 2 : LOOP(s(x0))


----------------------------------------

(42) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(43)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   IF(true, s(y0)) -> 1 / 2 : LOOP(minus(s(y0), s(0))) || 1 / 2 : LOOP(s(s(y0)))
   LOOP(s(y0)) -> 1 : IF(true, s(y0))
   IF(true, x0) -> 1 / 2 : loop(minus(x0, s(0))) || 1 / 2 : LOOP(s(x0))


----------------------------------------

(44) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IF(true, x0) -> 1 / 2 : loop(minus(x0, s(0))) || 1 / 2 : LOOP(s(x0))

The remaining pairs can at least be oriented weakly:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))
   IF(true, s(y0)) -> 1 / 2 : LOOP(minus(s(y0), s(0))) || 1 / 2 : LOOP(s(s(y0)))

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF(x_1, x_2)) = 1 + 2*x_1 + 2*x_1*x_2
   POL(LOOP(x_1)) = 1
   POL(loop(x_1)) = 0
   POL(minus(x_1, x_2)) = 2*x_1
   POL(s(x_1)) = 2*x_1
   POL(true) = 0

----------------------------------------

(45)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))
   IF(true, s(y0)) -> 1 / 2 : LOOP(minus(s(y0), s(0))) || 1 / 2 : LOOP(s(s(y0)))


----------------------------------------

(46) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule IF(true, s(y0)) -> 1 / 2 : LOOP(minus(s(y0), s(0))) || 1 / 2 : LOOP(s(s(y0))) at position [0] we obtained the following new ADPs :

   IF(true, s(y0)) -> 1 / 2 : LOOP(s(s(y0))) || 1 / 2 : LOOP(minus(y0, 0))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(47)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x
   minus(s(x), s(y)) -> 1 : minus(x, y)

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))
   IF(true, s(y0)) -> 1 / 2 : LOOP(s(s(y0))) || 1 / 2 : LOOP(minus(y0, 0))


----------------------------------------

(48) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(49)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))
   IF(true, s(y0)) -> 1 / 2 : LOOP(s(s(y0))) || 1 / 2 : LOOP(minus(y0, 0))


----------------------------------------

(50) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IF(true, s(y0)) -> 1 / 2 : LOOP(s(s(y0))) || 1 / 2 : LOOP(minus(y0, 0))

The remaining pairs can at least be oriented weakly:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(LOOP(x_1)) = 1 + x_1
   POL(minus(x_1, x_2)) = x_1 + 2*x_1*x_2 + 2*x_2
   POL(s(x_1)) = 2 + x_1
   POL(true) = 0

----------------------------------------

(51)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   minus(0, y) -> 1 : 0
   minus(x, 0) -> 1 : x

The ADP Problem has the following rules with annotations:

   LOOP(s(y0)) -> 1 : IF(true, s(y0))


----------------------------------------

(52) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(53)
TRUE
