AST
proof of /home/ff862203/input_o9voLAhxcu.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QReductionProof [EQUIVALENT, 0 ms]
(10) QDP
(11) TransformationProof [EQUIVALENT, 0 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) QDP
(15) UsableRulesProof [EQUIVALENT, 0 ms]
(16) QDP
(17) QReductionProof [EQUIVALENT, 0 ms]
(18) QDP
(19) TransformationProof [EQUIVALENT, 0 ms]
(20) QDP
(21) DependencyGraphProof [EQUIVALENT, 0 ms]
(22) QDP
(23) UsableRulesProof [EQUIVALENT, 0 ms]
(24) QDP
(25) QReductionProof [EQUIVALENT, 0 ms]
(26) QDP
(27) TransformationProof [EQUIVALENT, 0 ms]
(28) QDP
(29) UsableRulesProof [EQUIVALENT, 0 ms]
(30) QDP
(31) QReductionProof [EQUIVALENT, 0 ms]
(32) QDP
(33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(34) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   p(s(x)) -> 1 : x
   if(true, x, y) -> 1 : rand(p(x), rand_inc(y))
   random(x) -> 1 : rand(x, 0)
   rand_inc(x) -> 1 / 5 : s(s(x)) || 3 / 5 : s(s(s(s(x)))) || 1 / 5 : s(s(s(s(s(s(s(s(x))))))))
   p(0) -> 1 : 0
   nonZero(0) -> 1 : false
   nonZero(s(x)) -> 1 : true
   rand(x, y) -> 1 : if(nonZero(x), x, y)
   if(false, x, y) -> 1 : y

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoQTRSProof (SOUND)
A PTRS R is terminating if the TRS NonProb(R) is terminating
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   p(0) -> 0
   nonZero(s(x)) -> true
   if(true, x, y) -> rand(p(x), rand_inc(y))
   p(s(x)) -> x
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   rand(x, y) -> if(nonZero(x), x, y)
   random(x) -> rand(x, 0)
   nonZero(0) -> false
   if(false, x, y) -> y

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   if(true, x0, x1)
   p(s(x0))
   rand(x0, x1)
   random(x0)
   nonZero(0)
   if(false, x0, x1)


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> RAND(p(x), rand_inc(y))
   IF(true, x, y) -> P(x)
   IF(true, x, y) -> RAND_INC(y)
   RAND(x, y) -> IF(nonZero(x), x, y)
   RAND(x, y) -> NONZERO(x)
   RANDOM(x) -> RAND(x, 0)

The TRS R consists of the following rules:

   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   p(0) -> 0
   nonZero(s(x)) -> true
   if(true, x, y) -> rand(p(x), rand_inc(y))
   p(s(x)) -> x
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   rand(x, y) -> if(nonZero(x), x, y)
   random(x) -> rand(x, 0)
   nonZero(0) -> false
   if(false, x, y) -> y

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   if(true, x0, x1)
   p(s(x0))
   rand(x0, x1)
   random(x0)
   nonZero(0)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(x, y) -> IF(nonZero(x), x, y)
   IF(true, x, y) -> RAND(p(x), rand_inc(y))

The TRS R consists of the following rules:

   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   p(0) -> 0
   nonZero(s(x)) -> true
   if(true, x, y) -> rand(p(x), rand_inc(y))
   p(s(x)) -> x
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   rand(x, y) -> if(nonZero(x), x, y)
   random(x) -> rand(x, 0)
   nonZero(0) -> false
   if(false, x, y) -> y

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   if(true, x0, x1)
   p(s(x0))
   rand(x0, x1)
   random(x0)
   nonZero(0)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(x, y) -> IF(nonZero(x), x, y)
   IF(true, x, y) -> RAND(p(x), rand_inc(y))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   nonZero(s(x)) -> true
   nonZero(0) -> false

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   if(true, x0, x1)
   p(s(x0))
   rand(x0, x1)
   random(x0)
   nonZero(0)
   if(false, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   if(true, x0, x1)
   rand(x0, x1)
   random(x0)
   if(false, x0, x1)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(x, y) -> IF(nonZero(x), x, y)
   IF(true, x, y) -> RAND(p(x), rand_inc(y))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   nonZero(s(x)) -> true
   nonZero(0) -> false

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   p(s(x0))
   nonZero(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule RAND(x, y) -> IF(nonZero(x), x, y) at position [0] we obtained the following new rules [LPAR04]:

   (RAND(s(x0), y1) -> IF(true, s(x0), y1),RAND(s(x0), y1) -> IF(true, s(x0), y1))
   (RAND(0, y1) -> IF(false, 0, y1),RAND(0, y1) -> IF(false, 0, y1))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, x, y) -> RAND(p(x), rand_inc(y))
   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   RAND(0, y1) -> IF(false, 0, y1)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   nonZero(s(x)) -> true
   nonZero(0) -> false

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   p(s(x0))
   nonZero(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, x, y) -> RAND(p(x), rand_inc(y))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))
   nonZero(s(x)) -> true
   nonZero(0) -> false

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   p(s(x0))
   nonZero(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, x, y) -> RAND(p(x), rand_inc(y))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   nonZero(s(x0))
   p(s(x0))
   nonZero(0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   nonZero(s(x0))
   nonZero(0)


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, x, y) -> RAND(p(x), rand_inc(y))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(true, x, y) -> RAND(p(x), rand_inc(y)) at position [0] we obtained the following new rules [LPAR04]:

   (IF(true, 0, y1) -> RAND(0, rand_inc(y1)),IF(true, 0, y1) -> RAND(0, rand_inc(y1)))
   (IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1)),IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1)))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, 0, y1) -> RAND(0, rand_inc(y1))
   IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1))

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1))
   RAND(s(x0), y1) -> IF(true, s(x0), y1)

The TRS R consists of the following rules:

   p(0) -> 0
   p(s(x)) -> x
   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1))
   RAND(s(x0), y1) -> IF(true, s(x0), y1)

The TRS R consists of the following rules:

   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)
   p(0)
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p(0)
   p(s(x0))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1))
   RAND(s(x0), y1) -> IF(true, s(x0), y1)

The TRS R consists of the following rules:

   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By narrowing [LPAR04] the rule IF(true, s(x0), y1) -> RAND(x0, rand_inc(y1)) at position [1] we obtained the following new rules [LPAR04]:

   (IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(s(s(s(s(x0))))))))),IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(s(s(s(s(x0))))))))))
   (IF(true, s(y0), x0) -> RAND(y0, s(s(x0))),IF(true, s(y0), x0) -> RAND(y0, s(s(x0))))
   (IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(x0))))),IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(x0))))))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(s(s(s(s(x0)))))))))
   IF(true, s(y0), x0) -> RAND(y0, s(s(x0)))
   IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(x0)))))

The TRS R consists of the following rules:

   rand_inc(x) -> s(s(s(s(s(s(s(s(x))))))))
   rand_inc(x) -> s(s(x))
   rand_inc(x) -> s(s(s(s(x))))

The set Q consists of the following terms:

   rand_inc(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(s(s(s(s(x0)))))))))
   IF(true, s(y0), x0) -> RAND(y0, s(s(x0)))
   IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(x0)))))

R is empty.
The set Q consists of the following terms:

   rand_inc(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   rand_inc(x0)


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RAND(s(x0), y1) -> IF(true, s(x0), y1)
   IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(s(s(s(s(x0)))))))))
   IF(true, s(y0), x0) -> RAND(y0, s(s(x0)))
   IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(x0)))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*RAND(s(x0), y1) -> IF(true, s(x0), y1)
The graph contains the following edges 1 >= 2, 2 >= 3


*IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(s(s(s(s(x0)))))))))
The graph contains the following edges 2 > 1


*IF(true, s(y0), x0) -> RAND(y0, s(s(x0)))
The graph contains the following edges 2 > 1


*IF(true, s(y0), x0) -> RAND(y0, s(s(s(s(x0)))))
The graph contains the following edges 2 > 1


----------------------------------------

(34)
YES
