AST
proof of /home/ff862203/input_0TmTjklWg4.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES
    (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES
    (34) ADP
        (35) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (36) ADP
        (37) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (38) ADP
        (39) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (40) ADP
        (41) PisEmptyProof [EQUIVALENT, 0 ms]
        (42) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   numR, sumAll(NodeTwo(x, y, n)), sumAll(Leaf), sumAll(NodeOne(x, n)), simplify(NodeTwo(x, x, n)), plus(0, y), plus(s(x), y), createT
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

And Q contains the following terms:
   numR, sumAll(NodeTwo(x0, x1, x2)), sumAll(Leaf), sumAll(NodeOne(x0, x1)), simplify(NodeTwo(x0, x0, x1)), plus(0, x0), plus(s(x0), x1), createT

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)
   SUMALL(NodeTwo(x, y, n)) -> 1 : PLUS(n, PLUS(SUMALL(x), SUMALL(y)))
   SUMALL(Leaf) -> 1 : 0
   SUMALL(NodeOne(x, n)) -> 1 : PLUS(n, SUMALL(x))
   SIMPLIFY(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   PLUS(0, y) -> 1 : y
   PLUS(s(x), y) -> 1 : s(PLUS(x, y))
   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, NUMR) || 1 / 3 : NodeTwo(CREATET, CREATET, NUMR)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   numR
   sumAll(NodeTwo(x0, x1, x2))
   sumAll(Leaf)
   sumAll(NodeOne(x0, x1))
   simplify(NodeTwo(x0, x0, x1))
   plus(0, x0)
   plus(s(x0), x1)
   createT

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   numR
   sumAll(NodeTwo(x0, x1, x2))
   sumAll(Leaf)
   sumAll(NodeOne(x0, x1))
   simplify(NodeTwo(x0, x0, x1))
   plus(0, x0)
   plus(s(x0), x1)
   createT


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   SUMALL(NodeOne(x, n)) -> 1 : PLUS(n, SUMALL(x))
   SUMALL(NodeTwo(x, y, n)) -> 1 : PLUS(n, PLUS(SUMALL(x), SUMALL(y)))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[PLUS(sumAll(x), sumAll(y)), PLUS(n, plus(sumAll(x), sumAll(y))), PLUS(n, sumAll(x))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   SUMALL(NodeOne(x, n)) -> 1 : plus(n, SUMALL(x))
   SUMALL(NodeTwo(x, y, n)) -> 1 : plus(n, plus(SUMALL(x), SUMALL(y)))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   SUMALL(NodeOne(x, n)) -> 1 : plus(n, SUMALL(x))
   SUMALL(NodeTwo(x, y, n)) -> 1 : plus(n, plus(SUMALL(x), SUMALL(y)))


----------------------------------------

(21) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUMALL(NodeTwo(x, y, n)) -> SUMALL(x)
   SUMALL(NodeTwo(x, y, n)) -> SUMALL(y)
   SUMALL(NodeOne(x, n)) -> SUMALL(x)

R is empty.
The set Q consists of the following terms:

   numR
   sumAll(NodeTwo(x0, x1, x2))
   sumAll(Leaf)
   sumAll(NodeOne(x0, x1))
   simplify(NodeTwo(x0, x0, x1))
   plus(0, x0)
   plus(s(x0), x1)
   createT

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   numR
   sumAll(NodeTwo(x0, x1, x2))
   sumAll(Leaf)
   sumAll(NodeOne(x0, x1))
   simplify(NodeTwo(x0, x0, x1))
   plus(0, x0)
   plus(s(x0), x1)
   createT


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUMALL(NodeTwo(x, y, n)) -> SUMALL(x)
   SUMALL(NodeTwo(x, y, n)) -> SUMALL(y)
   SUMALL(NodeOne(x, n)) -> SUMALL(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUMALL(NodeTwo(x, y, n)) -> SUMALL(x)
The graph contains the following edges 1 > 1


*SUMALL(NodeTwo(x, y, n)) -> SUMALL(y)
The graph contains the following edges 1 > 1


*SUMALL(NodeOne(x, n)) -> SUMALL(x)
The graph contains the following edges 1 > 1


----------------------------------------

(26)
YES

----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(30) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(NUMR) = 2
   POL(s(x_1)) = 0

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(33)
YES

----------------------------------------

(34)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, NUMR) || 1 / 3 : NodeTwo(CREATET, CREATET, NUMR)


----------------------------------------

(35) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[NUMR]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(36)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   sumAll(NodeTwo(x, y, n)) -> 1 : plus(n, plus(sumAll(x), sumAll(y)))
   sumAll(Leaf) -> 1 : 0
   sumAll(NodeOne(x, n)) -> 1 : plus(n, sumAll(x))
   simplify(NodeTwo(x, x, n)) -> 1 : NodeOne(x, n)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, numR) || 1 / 3 : NodeTwo(CREATET, CREATET, numR)


----------------------------------------

(37) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(38)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, numR) || 1 / 3 : NodeTwo(CREATET, CREATET, numR)


----------------------------------------

(39) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, numR) || 1 / 3 : NodeTwo(CREATET, CREATET, numR)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(CREATET) = 2
   POL(Leaf) = 0
   POL(NodeOne(x_1, x_2)) = 0
   POL(NodeTwo(x_1, x_2, x_3)) = 0
   POL(numR) = 0

----------------------------------------

(40)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(41) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(42)
YES
