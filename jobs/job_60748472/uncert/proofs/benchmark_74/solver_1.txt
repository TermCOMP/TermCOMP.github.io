AST
proof of /home/ff862203/input_vXzov0VmeS.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(14) ADP
(15) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(16) ADP
(17) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(18) ADP
(19) AST_ADPTransformationProof [EQUIVALENT, 1 ms]
(20) ADP
(21) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(22) ADP
(23) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(24) ADP
(25) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(26) ADP
(27) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(28) ADP
(29) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(30) ADP
(31) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(32) ADP
(33) PisEmptyProof [EQUIVALENT, 0 ms]
(34) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(b1, d1) -> 1 : f(a, e)
   e -> 1 : d1
   e -> 1 : d2
   f(b2, d2) -> 1 : f(a, e)
   a -> 1 / 2 : b1 || 1 / 2 : b2

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   f(b1, d1), e, f(b2, d2), a
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   f(b1, d1) -> 1 : f(a, e)
   e -> 1 : d1
   e -> 1 : d2
   f(b2, d2) -> 1 : f(a, e)
   a -> 1 / 2 : b1 || 1 / 2 : b2

And Q contains the following terms:
   f(b1, d1), e, f(b2, d2), a

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(b1, d1) -> 1 : f(a, e)
   e -> 1 : d1
   e -> 1 : d2
   f(b2, d2) -> 1 : f(a, e)
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 : F(A, E)
   E -> 1 : d1
   E -> 1 : d2
   F(b2, d2) -> 1 : F(A, E)
   A -> 1 / 2 : b1 || 1 / 2 : b2


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(b1, d1) -> 1 : f(a, e)
   e -> 1 : d1
   e -> 1 : d2
   f(b2, d2) -> 1 : f(a, e)
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(b2, d2) -> 1 : F(A, E)
   F(b1, d1) -> 1 : F(A, E)


----------------------------------------

(7) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[A, E]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(b1, d1) -> 1 : f(a, e)
   e -> 1 : d1
   e -> 1 : d2
   f(b2, d2) -> 1 : f(a, e)
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(b2, d2) -> 1 : F(a, e)
   F(b1, d1) -> 1 : F(a, e)


----------------------------------------

(9) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : b1 || 1 / 2 : b2
   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b2, d2) -> 1 : F(a, e)
   F(b1, d1) -> 1 : F(a, e)


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(b2, d2) -> 1 : F(a, e) at position [0] we obtained the following new ADPs :

   F(b2, d2) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 : F(a, e)
   F(b2, d2) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)


----------------------------------------

(13) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(b1, d1) -> 1 : F(a, e) at position [0] we obtained the following new ADPs :

   F(b1, d1) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2
   a -> 1 / 2 : b1 || 1 / 2 : b2

The ADP Problem has the following rules with annotations:

   F(b2, d2) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)
   F(b1, d1) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)


----------------------------------------

(15) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b2, d2) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)
   F(b1, d1) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)


----------------------------------------

(17) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(b2, d2) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e) at position [1] we obtained the following new ADPs :

   F(b2, d2) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e)
   F(b2, d2) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)


----------------------------------------

(19) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(b1, d1) -> 1 / 2 : F(b1, e) || 1 / 2 : F(b2, e) at position [1] we obtained the following new ADPs :

   F(b1, d1) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b2, d2) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)
   F(b1, d1) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)


----------------------------------------

(21) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(b2, d2) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1) at position [1] we obtained the following new ADPs :

   F(b2, d2) -> 1 / 2 : F(b1, d1) || 1 / 2 : F(b2, d1)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)
   F(b2, d2) -> 1 / 2 : F(b1, d1) || 1 / 2 : F(b2, d1)


----------------------------------------

(23) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(b2, d1)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)
   F(b2, d2) -> 1 / 2 : F(b1, d1) || 1 / 2 : f(b2, d1)


----------------------------------------

(25) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(b2, d2) -> 1 / 2 : F(b1, d1) || 1 / 2 : f(b2, d1)

The remaining pairs can at least be oriented weakly:

   F(b1, d1) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = 2
   POL(b1) = 0
   POL(b2) = 0
   POL(d1) = 0
   POL(d2) = 0
   POL(e) = 0
   POL(f(x_1, x_2)) = 0

----------------------------------------

(26)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 / 2 : F(b2, e) || 1 / 2 : F(b1, d1)


----------------------------------------

(27) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(b2, e)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(28)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   e -> 1 : d1
   e -> 1 : d2

The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 / 2 : f(b2, e) || 1 / 2 : F(b1, d1)


----------------------------------------

(29) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(30)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(b1, d1) -> 1 / 2 : f(b2, e) || 1 / 2 : F(b1, d1)


----------------------------------------

(31) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(b1, d1) -> 1 / 2 : f(b2, e) || 1 / 2 : F(b1, d1)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = 1 + 2*x_1 + 2*x_1*x_2 + x_2
   POL(b1) = 0
   POL(b2) = 0
   POL(d1) = 0
   POL(e) = 0
   POL(f(x_1, x_2)) = 0

----------------------------------------

(32)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(33) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(34)
YES
