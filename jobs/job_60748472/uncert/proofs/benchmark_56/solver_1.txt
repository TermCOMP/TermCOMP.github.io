AST
proof of /home/ff862203/input_GMFQvZS6ls.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QReductionProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QReductionProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   rw(tree(x, y)) -> 1 / 2 : rw(tree_dup(tree(x, y))) || 1 / 2 : rw(x)
   tree_inc(pair(x, y)) -> 1 : pair(tree(x, y), tree(x, y))
   tree_dup(tree(x, y)) -> 1 : tree_inc(pair(tree_dup(x), tree_dup(y)))
   tree_dup(leaf) -> 1 : pair(leaf, leaf)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoQTRSProof (SOUND)
A PTRS R is terminating if the TRS NonProb(R) is terminating
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   tree_dup(leaf) -> pair(leaf, leaf)
   tree_inc(pair(x, y)) -> pair(tree(x, y), tree(x, y))
   tree_dup(tree(x, y)) -> tree_inc(pair(tree_dup(x), tree_dup(y)))
   rw(tree(x, y)) -> rw(tree_dup(tree(x, y)))
   rw(tree(x, y)) -> rw(x)

The set Q consists of the following terms:

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))


----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TREE_DUP(tree(x, y)) -> TREE_INC(pair(tree_dup(x), tree_dup(y)))
   TREE_DUP(tree(x, y)) -> TREE_DUP(x)
   TREE_DUP(tree(x, y)) -> TREE_DUP(y)
   RW(tree(x, y)) -> RW(tree_dup(tree(x, y)))
   RW(tree(x, y)) -> TREE_DUP(tree(x, y))
   RW(tree(x, y)) -> RW(x)

The TRS R consists of the following rules:

   tree_dup(leaf) -> pair(leaf, leaf)
   tree_inc(pair(x, y)) -> pair(tree(x, y), tree(x, y))
   tree_dup(tree(x, y)) -> tree_inc(pair(tree_dup(x), tree_dup(y)))
   rw(tree(x, y)) -> rw(tree_dup(tree(x, y)))
   rw(tree(x, y)) -> rw(x)

The set Q consists of the following terms:

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TREE_DUP(tree(x, y)) -> TREE_DUP(y)
   TREE_DUP(tree(x, y)) -> TREE_DUP(x)

The TRS R consists of the following rules:

   tree_dup(leaf) -> pair(leaf, leaf)
   tree_inc(pair(x, y)) -> pair(tree(x, y), tree(x, y))
   tree_dup(tree(x, y)) -> tree_inc(pair(tree_dup(x), tree_dup(y)))
   rw(tree(x, y)) -> rw(tree_dup(tree(x, y)))
   rw(tree(x, y)) -> rw(x)

The set Q consists of the following terms:

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TREE_DUP(tree(x, y)) -> TREE_DUP(y)
   TREE_DUP(tree(x, y)) -> TREE_DUP(x)

R is empty.
The set Q consists of the following terms:

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TREE_DUP(tree(x, y)) -> TREE_DUP(y)
   TREE_DUP(tree(x, y)) -> TREE_DUP(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TREE_DUP(tree(x, y)) -> TREE_DUP(y)
The graph contains the following edges 1 > 1


*TREE_DUP(tree(x, y)) -> TREE_DUP(x)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RW(tree(x, y)) -> RW(x)

The TRS R consists of the following rules:

   tree_dup(leaf) -> pair(leaf, leaf)
   tree_inc(pair(x, y)) -> pair(tree(x, y), tree(x, y))
   tree_dup(tree(x, y)) -> tree_inc(pair(tree_dup(x), tree_dup(y)))
   rw(tree(x, y)) -> rw(tree_dup(tree(x, y)))
   rw(tree(x, y)) -> rw(x)

The set Q consists of the following terms:

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RW(tree(x, y)) -> RW(x)

R is empty.
The set Q consists of the following terms:

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   tree_dup(leaf)
   tree_inc(pair(x0, x1))
   tree_dup(tree(x0, x1))
   rw(tree(x0, x1))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RW(tree(x, y)) -> RW(x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*RW(tree(x, y)) -> RW(x)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
