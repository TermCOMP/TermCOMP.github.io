AST
proof of /home/ff862203/input_vBbc3TXif4.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(14) AND
    (15) ADP
        (16) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (17) ADP
        (18) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (19) ADP
        (20) PisEmptyProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) ADP
        (23) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (24) ADP
        (25) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (26) ADP
        (27) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (28) ADP
        (29) PisEmptyProof [EQUIVALENT, 0 ms]
        (30) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))
   f(singleton(x)) -> 1 / 2 : c(f(g(x)), f(g(x))) || 1 / 2 : c(f(h(x)), f(h(x)))

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   g(0), h(s(x)), f(singleton(x))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))
   f(singleton(x)) -> 1 / 2 : c(f(g(x)), f(g(x))) || 1 / 2 : c(f(h(x)), f(h(x)))

And Q contains the following terms:
   g(0), h(s(x0)), f(singleton(x0))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))
   f(singleton(x)) -> 1 / 2 : c(f(g(x)), f(g(x))) || 1 / 2 : c(f(h(x)), f(h(x)))

The ADP Problem has the following rules with annotations:

   G(0) -> 1 : singleton(0)
   H(s(x)) -> 1 : singleton(s(x))
   F(singleton(x)) -> 1 / 2 : c(F(G(x)), F(G(x))) || 1 / 2 : c(F(H(x)), F(H(x)))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))
   f(singleton(x)) -> 1 / 2 : c(f(g(x)), f(g(x))) || 1 / 2 : c(f(h(x)), f(h(x)))

The ADP Problem has the following rules with annotations:

   F(singleton(x)) -> 1 / 2 : c(F(G(x)), F(G(x))) || 1 / 2 : c(F(H(x)), F(H(x)))


----------------------------------------

(7) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[H(x), G(x)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))
   f(singleton(x)) -> 1 / 2 : c(f(g(x)), f(g(x))) || 1 / 2 : c(f(h(x)), f(h(x)))

The ADP Problem has the following rules with annotations:

   F(singleton(x)) -> 1 / 2 : c(F(g(x)), F(g(x))) || 1 / 2 : c(F(h(x)), F(h(x)))


----------------------------------------

(9) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))

The ADP Problem has the following rules with annotations:

   F(singleton(x)) -> 1 / 2 : c(F(g(x)), F(g(x))) || 1 / 2 : c(F(h(x)), F(h(x)))


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule F(singleton(x)) -> 1 / 2 : c(F(g(x)), F(g(x))) || 1 / 2 : c(F(h(x)), F(h(x))) we obtained the following new ADPs :

   F(singleton(0)) -> 1 / 2 : c(F(g(0)), F(g(0))) || 1 / 2 : c(F(h(0)), F(h(0)))
   F(singleton(x0)) -> 1 / 2 : c(f(g(x0)), f(g(x0))) || 1 / 2 : c(F(h(x0)), F(h(x0)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))

The ADP Problem has the following rules with annotations:

   F(singleton(0)) -> 1 / 2 : c(F(g(0)), F(g(0))) || 1 / 2 : c(F(h(0)), F(h(0)))
   F(singleton(x0)) -> 1 / 2 : c(f(g(x0)), f(g(x0))) || 1 / 2 : c(F(h(x0)), F(h(x0)))


----------------------------------------

(13) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))

The ADP Problem has the following rules with annotations:

   F(singleton(x0)) -> 1 / 2 : c(f(g(x0)), f(g(x0))) || 1 / 2 : c(F(h(x0)), F(h(x0)))


----------------------------------------

(16) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(17)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   h(s(x)) -> 1 : singleton(s(x))

The ADP Problem has the following rules with annotations:

   F(singleton(x0)) -> 1 / 2 : c(f(g(x0)), f(g(x0))) || 1 / 2 : c(F(h(x0)), F(h(x0)))


----------------------------------------

(18) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(singleton(x0)) -> 1 / 2 : c(f(g(x0)), f(g(x0))) || 1 / 2 : c(F(h(x0)), F(h(x0)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1)) = 1 + x_1
   POL(c(x_1, x_2)) = 0
   POL(f(x_1)) = 0
   POL(g(x_1)) = 0
   POL(h(x_1)) = 2*x_1
   POL(s(x_1)) = 0
   POL(singleton(x_1)) = 2*x_1

----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   h(s(x)) -> 1 : singleton(s(x))

The set of rules with annotations is empty.

----------------------------------------

(20) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))

The ADP Problem has the following rules with annotations:

   F(singleton(0)) -> 1 / 2 : c(F(g(0)), F(g(0))) || 1 / 2 : c(F(h(0)), F(h(0)))


----------------------------------------

(23) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(h(0))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)
   h(s(x)) -> 1 : singleton(s(x))

The ADP Problem has the following rules with annotations:

   F(singleton(0)) -> 1 / 2 : c(F(g(0)), F(g(0))) || 1 / 2 : c(f(h(0)), f(h(0)))


----------------------------------------

(25) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(26)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)

The ADP Problem has the following rules with annotations:

   F(singleton(0)) -> 1 / 2 : c(F(g(0)), F(g(0))) || 1 / 2 : c(f(h(0)), f(h(0)))


----------------------------------------

(27) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(singleton(0)) -> 1 / 2 : c(F(g(0)), F(g(0))) || 1 / 2 : c(f(h(0)), f(h(0)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(F(x_1)) = 2*x_1
   POL(c(x_1, x_2)) = 0
   POL(f(x_1)) = 0
   POL(g(x_1)) = x_1
   POL(h(x_1)) = 0
   POL(singleton(x_1)) = x_1

----------------------------------------

(28)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   g(0) -> 1 : singleton(0)

The set of rules with annotations is empty.

----------------------------------------

(29) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(30)
YES
