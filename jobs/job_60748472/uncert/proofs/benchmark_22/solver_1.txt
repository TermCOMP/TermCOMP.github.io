AST
proof of /home/ff862203/input_vvC1ghpfwk.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   loop2(s(y)) -> 1 : loop2(y)
   loop2(0) -> 1 : stop
   loop(0, y) -> 1 : loop2(y)
   loop(s(x), y) -> 1 / 2 : loop(s(s(x)), s(y)) || 1 / 2 : loop(x, s(y))

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   loop2(s(y)), loop2(0), loop(0, y), loop(s(x), y)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   loop2(s(y)) -> 1 : loop2(y)
   loop2(0) -> 1 : stop
   loop(0, y) -> 1 : loop2(y)
   loop(s(x), y) -> 1 / 2 : loop(s(s(x)), s(y)) || 1 / 2 : loop(x, s(y))

And Q contains the following terms:
   loop2(s(x0)), loop2(0), loop(0, x0), loop(s(x0), x1)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop2(s(y)) -> 1 : loop2(y)
   loop2(0) -> 1 : stop
   loop(0, y) -> 1 : loop2(y)
   loop(s(x), y) -> 1 / 2 : loop(s(s(x)), s(y)) || 1 / 2 : loop(x, s(y))

The ADP Problem has the following rules with annotations:

   LOOP2(s(y)) -> 1 : LOOP2(y)
   LOOP2(0) -> 1 : stop
   LOOP(0, y) -> 1 : LOOP2(y)
   LOOP(s(x), y) -> 1 / 2 : LOOP(s(s(x)), s(y)) || 1 / 2 : LOOP(x, s(y))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop2(s(y)) -> 1 : loop2(y)
   loop2(0) -> 1 : stop
   loop(0, y) -> 1 : loop2(y)
   loop(s(x), y) -> 1 / 2 : loop(s(s(x)), s(y)) || 1 / 2 : loop(x, s(y))

The ADP Problem has the following rules with annotations:

   LOOP2(s(y)) -> 1 : LOOP2(y)


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   LOOP2(s(y)) -> 1 : LOOP2(y)


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP2(s(y)) -> LOOP2(y)

R is empty.
The set Q consists of the following terms:

   loop2(s(x0))
   loop2(0)
   loop(0, x0)
   loop(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   loop2(s(x0))
   loop2(0)
   loop(0, x0)
   loop(s(x0), x1)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP2(s(y)) -> LOOP2(y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LOOP2(s(y)) -> LOOP2(y)
The graph contains the following edges 1 > 1


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop2(s(y)) -> 1 : loop2(y)
   loop2(0) -> 1 : stop
   loop(0, y) -> 1 : loop2(y)
   loop(s(x), y) -> 1 / 2 : loop(s(s(x)), s(y)) || 1 / 2 : loop(x, s(y))

The ADP Problem has the following rules with annotations:

   LOOP(s(x), y) -> 1 / 2 : LOOP(s(s(x)), s(y)) || 1 / 2 : LOOP(x, s(y))


----------------------------------------

(17) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   LOOP(s(x), y) -> 1 / 2 : LOOP(s(s(x)), s(y)) || 1 / 2 : LOOP(x, s(y))


----------------------------------------

(19) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   LOOP(s(x), y) -> 1 / 2 : LOOP(s(s(x)), s(y)) || 1 / 2 : LOOP(x, s(y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(LOOP(x_1, x_2)) = 2*x_1
   POL(s(x_1)) = 1 + x_1

----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(22)
YES
