AST
proof of /home/ff862203/input_5rh6qLNTIZ.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(14) AND
    (15) ADP
        (16) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (17) ADP
        (18) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (19) ADP
        (20) PisEmptyProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) ADP
        (23) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (24) ADP
        (25) PisEmptyProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   a -> 1 : c2
   f(c1, d1) -> 1 : f(a, b)
   b -> 1 / 2 : d1 || 1 / 2 : d2
   f(c2, d2) -> 1 : f(a, b)
   a -> 1 : c1

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   a, f(c1, d1), b, f(c2, d2)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   a -> 1 : c2
   f(c1, d1) -> 1 : f(a, b)
   b -> 1 / 2 : d1 || 1 / 2 : d2
   f(c2, d2) -> 1 : f(a, b)
   a -> 1 : c1

And Q contains the following terms:
   a, f(c1, d1), b, f(c2, d2)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   f(c1, d1) -> 1 : f(a, b)
   b -> 1 / 2 : d1 || 1 / 2 : d2
   f(c2, d2) -> 1 : f(a, b)
   a -> 1 : c1

The ADP Problem has the following rules with annotations:

   A -> 1 : c2
   F(c1, d1) -> 1 : F(A, B)
   B -> 1 / 2 : d1 || 1 / 2 : d2
   F(c2, d2) -> 1 : F(A, B)
   A -> 1 : c1


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   f(c1, d1) -> 1 : f(a, b)
   b -> 1 / 2 : d1 || 1 / 2 : d2
   f(c2, d2) -> 1 : f(a, b)
   a -> 1 : c1

The ADP Problem has the following rules with annotations:

   F(c2, d2) -> 1 : F(A, B)
   F(c1, d1) -> 1 : F(A, B)


----------------------------------------

(7) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[A, B]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   f(c1, d1) -> 1 : f(a, b)
   b -> 1 / 2 : d1 || 1 / 2 : d2
   f(c2, d2) -> 1 : f(a, b)
   a -> 1 : c1

The ADP Problem has the following rules with annotations:

   F(c2, d2) -> 1 : F(a, b)
   F(c1, d1) -> 1 : F(a, b)


----------------------------------------

(9) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   a -> 1 : c1
   b -> 1 / 2 : d1 || 1 / 2 : d2

The ADP Problem has the following rules with annotations:

   F(c2, d2) -> 1 : F(a, b)
   F(c1, d1) -> 1 : F(a, b)


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule F(c2, d2) -> 1 : F(a, b) at position [0] we obtained the following new ADPs :

   F(c2, d2) -> 1 : F(c2, b)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   b -> 1 / 2 : d1 || 1 / 2 : d2
   a -> 1 : c1

The ADP Problem has the following rules with annotations:

   F(c1, d1) -> 1 : F(a, b)
   F(c2, d2) -> 1 : F(c2, b)


----------------------------------------

(13) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   b -> 1 / 2 : d1 || 1 / 2 : d2
   a -> 1 : c1

The ADP Problem has the following rules with annotations:

   F(c2, d2) -> 1 : F(c2, b)


----------------------------------------

(16) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(17)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   b -> 1 / 2 : d1 || 1 / 2 : d2

The ADP Problem has the following rules with annotations:

   F(c2, d2) -> 1 : F(c2, b)


----------------------------------------

(18) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(c2, d2) -> 1 : F(c2, b)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = x_1*x_2
   POL(b) = 1
   POL(c2) = 1
   POL(d1) = 0
   POL(d2) = 2

----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   b -> 1 / 2 : d1 || 1 / 2 : d2

The set of rules with annotations is empty.

----------------------------------------

(20) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   b -> 1 / 2 : d1 || 1 / 2 : d2
   a -> 1 : c1

The ADP Problem has the following rules with annotations:

   F(c1, d1) -> 1 : F(a, b)


----------------------------------------

(23) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(c1, d1) -> 1 : F(a, b)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = x_1*x_2 + 2*x_2
   POL(a) = 2
   POL(b) = 1
   POL(c1) = 2
   POL(c2) = 2
   POL(d1) = 2
   POL(d2) = 0

----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 : c2
   b -> 1 / 2 : d1 || 1 / 2 : d2
   a -> 1 : c1

The set of rules with annotations is empty.

----------------------------------------

(25) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(26)
YES
