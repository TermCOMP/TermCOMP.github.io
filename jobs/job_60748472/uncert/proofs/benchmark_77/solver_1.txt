AST
proof of /home/ff862203/input_Kg1uWKOif0.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 5 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (33) ADP
        (34) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (35) ADP
        (36) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (37) ADP
        (38) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (39) ADP
        (40) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (41) ADP
        (42) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (43) ADP
        (44) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (45) ADP
        (46) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (47) ADP
        (48) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (49) ADP
        (50) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (51) ADP
        (52) PisEmptyProof [EQUIVALENT, 0 ms]
        (53) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   app(cons(x, xs), ys), head(cons(x, xs)), shuffle(xs), rotate(nil), isempty(cons(x, xs)), if(true, x, xs), app(nil, ys), if(false, x, xs), tail(cons(x, xs)), isempty(nil), rotate(cons(x, xs))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

And Q contains the following terms:
   app(cons(x0, x1), x2), head(cons(x0, x1)), shuffle(x0), rotate(nil), isempty(cons(x0, x1)), if(true, x0, x1), app(nil, x0), if(false, x0, x1), tail(cons(x0, x1)), isempty(nil), rotate(cons(x0, x1))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))
   HEAD(cons(x, xs)) -> 1 : x
   SHUFFLE(xs) -> 1 : IF(ISEMPTY(xs), HEAD(xs), ROTATE(TAIL(xs)))
   ROTATE(nil) -> 1 : nil
   ISEMPTY(cons(x, xs)) -> 1 : false
   IF(true, x, xs) -> 1 : nil
   APP(nil, ys) -> 1 : ys
   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 2 : SHUFFLE(ROTATE(cons(x, xs)))
   TAIL(cons(x, xs)) -> 1 : xs
   ISEMPTY(nil) -> 1 : true
   ROTATE(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : ROTATE(APP(xs, cons(x, nil)))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

R is empty.
The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   head(cons(x0, x1))
   shuffle(x0)
   rotate(nil)
   isempty(cons(x0, x1))
   if(true, x0, x1)
   app(nil, x0)
   if(false, x0, x1)
   tail(cons(x0, x1))
   isempty(nil)
   rotate(cons(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(cons(x0, x1), x2)
   head(cons(x0, x1))
   shuffle(x0)
   rotate(nil)
   isempty(cons(x0, x1))
   if(true, x0, x1)
   app(nil, x0)
   if(false, x0, x1)
   tail(cons(x0, x1))
   isempty(nil)
   rotate(cons(x0, x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, xs), ys) -> APP(xs, ys)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(x, xs), ys) -> APP(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   ROTATE(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : ROTATE(APP(xs, cons(x, nil)))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[APP(xs, cons(x, nil))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   ROTATE(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : ROTATE(app(xs, cons(x, nil)))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The ADP Problem has the following rules with annotations:

   ROTATE(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : ROTATE(app(xs, cons(x, nil)))


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   ROTATE(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : ROTATE(app(xs, cons(x, nil)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(ROTATE(x_1)) = 1 + 2*x_1
   POL(app(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(nil) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 2 : SHUFFLE(ROTATE(cons(x, xs)))
   SHUFFLE(xs) -> 1 : IF(ISEMPTY(xs), HEAD(xs), ROTATE(TAIL(xs)))


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[TAIL(xs), ROTATE(cons(x, xs)), ISEMPTY(xs), HEAD(xs), ROTATE(tail(xs))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   shuffle(xs) -> 1 : if(isempty(xs), head(xs), rotate(tail(xs)))
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   if(true, x, xs) -> 1 : nil
   app(nil, ys) -> 1 : ys
   if(false, x, xs) -> 1 / 2 : cons(x, shuffle(xs)) || 1 / 2 : shuffle(rotate(cons(x, xs)))
   tail(cons(x, xs)) -> 1 : xs
   isempty(nil) -> 1 : true
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 2 : SHUFFLE(rotate(cons(x, xs)))
   SHUFFLE(xs) -> 1 : IF(isempty(xs), head(xs), rotate(tail(xs)))


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs
   rotate(nil) -> 1 : nil
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 2 : SHUFFLE(rotate(cons(x, xs)))
   SHUFFLE(xs) -> 1 : IF(isempty(xs), head(xs), rotate(tail(xs)))


----------------------------------------

(30) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 2 : SHUFFLE(rotate(cons(x, xs))) at position [0] we obtained the following new ADPs :

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   isempty(cons(x, xs)) -> 1 : false
   rotate(nil) -> 1 : nil
   app(nil, ys) -> 1 : ys
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   SHUFFLE(xs) -> 1 : IF(isempty(xs), head(xs), rotate(tail(xs)))
   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))


----------------------------------------

(32) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule SHUFFLE(xs) -> 1 : IF(isempty(xs), head(xs), rotate(tail(xs))) we obtained the following new ADPs :

   SHUFFLE(cons(y0, y1)) -> 1 : IF(isempty(cons(y0, y1)), head(cons(y0, y1)), rotate(tail(cons(y0, y1))))
   SHUFFLE(nil) -> 1 : IF(isempty(nil), head(nil), rotate(tail(nil)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   isempty(cons(x, xs)) -> 1 : false
   rotate(nil) -> 1 : nil
   app(nil, ys) -> 1 : ys
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(isempty(cons(y0, y1)), head(cons(y0, y1)), rotate(tail(cons(y0, y1))))
   SHUFFLE(nil) -> 1 : IF(isempty(nil), head(nil), rotate(tail(nil)))


----------------------------------------

(34) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(35)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   isempty(cons(x, xs)) -> 1 : false
   rotate(nil) -> 1 : nil
   app(nil, ys) -> 1 : ys
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   SHUFFLE(cons(y0, y1)) -> 1 : IF(isempty(cons(y0, y1)), head(cons(y0, y1)), rotate(tail(cons(y0, y1))))
   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))


----------------------------------------

(36) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(37)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys
   rotate(nil) -> 1 : nil
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs

The ADP Problem has the following rules with annotations:

   SHUFFLE(cons(y0, y1)) -> 1 : IF(isempty(cons(y0, y1)), head(cons(y0, y1)), rotate(tail(cons(y0, y1))))
   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))


----------------------------------------

(38) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule SHUFFLE(cons(y0, y1)) -> 1 : IF(isempty(cons(y0, y1)), head(cons(y0, y1)), rotate(tail(cons(y0, y1)))) at position [0] we obtained the following new ADPs :

   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, head(cons(y0, y1)), rotate(tail(cons(y0, y1))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(39)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   head(cons(x, xs)) -> 1 : x
   rotate(nil) -> 1 : nil
   isempty(cons(x, xs)) -> 1 : false
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, head(cons(y0, y1)), rotate(tail(cons(y0, y1))))


----------------------------------------

(40) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(41)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   tail(cons(x, xs)) -> 1 : xs
   rotate(nil) -> 1 : nil
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, head(cons(y0, y1)), rotate(tail(cons(y0, y1))))


----------------------------------------

(42) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule SHUFFLE(cons(y0, y1)) -> 1 : IF(false, head(cons(y0, y1)), rotate(tail(cons(y0, y1)))) at position [1] we obtained the following new ADPs :

   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(tail(cons(y0, y1))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(43)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   rotate(nil) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(tail(cons(y0, y1))))


----------------------------------------

(44) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(45)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   tail(cons(x, xs)) -> 1 : xs
   rotate(nil) -> 1 : nil
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(tail(cons(y0, y1))))


----------------------------------------

(46) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(tail(cons(y0, y1)))) at position [2,0] we obtained the following new ADPs :

   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(y1))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(47)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   rotate(nil) -> 1 : nil
   app(nil, ys) -> 1 : ys
   tail(cons(x, xs)) -> 1 : xs
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(y1))


----------------------------------------

(48) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(49)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rotate(nil) -> 1 : nil
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The ADP Problem has the following rules with annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(y1))


----------------------------------------

(50) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IF(false, x, xs) -> 1 / 2 : cons(x, SHUFFLE(xs)) || 1 / 4 : SHUFFLE(cons(x, xs)) || 1 / 4 : SHUFFLE(rotate(app(xs, cons(x, nil))))
   SHUFFLE(cons(y0, y1)) -> 1 : IF(false, y0, rotate(y1))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(IF(x_1, x_2, x_3)) = x_1 + x_1*x_2 + 2*x_1*x_2*x_3 + 2*x_1*x_3 + x_2 + 2*x_3
   POL(SHUFFLE(x_1)) = 2*x_1
   POL(app(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(cons(x_1, x_2)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(false) = 1
   POL(nil) = 0
   POL(rotate(x_1)) = x_1

----------------------------------------

(51)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rotate(nil) -> 1 : nil
   rotate(cons(x, xs)) -> 1 / 2 : cons(x, xs) || 1 / 2 : rotate(app(xs, cons(x, nil)))
   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys

The set of rules with annotations is empty.

----------------------------------------

(52) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(53)
YES
