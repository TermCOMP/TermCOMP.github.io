AST
proof of /home/ff862203/input_fubQATBTy3.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) ADP
        (15) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (16) ADP
        (17) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES
    (23) ADP
        (24) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (25) ADP
        (26) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (27) QDP
        (28) QReductionProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (31) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   app(cons(x, xs), ys), init(xs), createL(xs), addNum(x, xs), app(nil, ys), app(xs, app(ys, zs))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

And Q contains the following terms:
   app(cons(x0, x1), x2), init(x0), createL(x0), addNum(x0, x1), app(nil, x0), app(x0, app(x1, x2))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

The ADP Problem has the following rules with annotations:

   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))
   INIT(xs) -> 1 : APP(xs, CREATEL(nil))
   CREATEL(xs) -> 1 / 2 : ADDNUM(0, xs) || 1 / 2 : CREATEL(ADDNUM(0, xs))
   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)
   APP(nil, ys) -> 1 : ys
   APP(xs, app(ys, zs)) -> 1 : APP(APP(xs, ys), zs)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

The ADP Problem has the following rules with annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)


----------------------------------------

(10) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(ADDNUM(x_1, x_2)) = 2 + 2*x_1 + x_1*x_2 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + 2*x_1

----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : ADDNUM(0, xs) || 1 / 2 : CREATEL(ADDNUM(0, xs))


----------------------------------------

(15) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[ADDNUM(0, xs)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))


----------------------------------------

(17) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))


----------------------------------------

(19) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CREATEL(x_1)) = 1
   POL(addNum(x_1, x_2)) = 0
   POL(cons(x_1, x_2)) = 0
   POL(s(x_1)) = 0

----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)

The set of rules with annotations is empty.

----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   init(xs) -> 1 : app(xs, createL(nil))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

The ADP Problem has the following rules with annotations:

   APP(xs, app(ys, zs)) -> 1 : APP(APP(xs, ys), zs)
   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))


----------------------------------------

(24) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, xs), ys) -> 1 : cons(x, app(xs, ys))
   app(nil, ys) -> 1 : ys
   app(xs, app(ys, zs)) -> 1 : app(app(xs, ys), zs)

The ADP Problem has the following rules with annotations:

   APP(xs, app(ys, zs)) -> 1 : APP(APP(xs, ys), zs)
   APP(cons(x, xs), ys) -> 1 : cons(x, APP(xs, ys))


----------------------------------------

(26) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(xs, app(ys, zs)) -> APP(app(xs, ys), zs)
   APP(cons(x, xs), ys) -> APP(xs, ys)
   APP(xs, app(ys, zs)) -> APP(xs, ys)

The TRS R consists of the following rules:

   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   app(xs, app(ys, zs)) -> app(app(xs, ys), zs)
   app(nil, ys) -> ys

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   init(x0)
   createL(x0)
   addNum(x0, x1)
   app(nil, x0)
   app(x0, app(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   init(x0)
   createL(x0)
   addNum(x0, x1)


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(xs, app(ys, zs)) -> APP(app(xs, ys), zs)
   APP(cons(x, xs), ys) -> APP(xs, ys)
   APP(xs, app(ys, zs)) -> APP(xs, ys)

The TRS R consists of the following rules:

   app(cons(x, xs), ys) -> cons(x, app(xs, ys))
   app(xs, app(ys, zs)) -> app(app(xs, ys), zs)
   app(nil, ys) -> ys

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   app(nil, x0)
   app(x0, app(x1, x2))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(x, xs), ys) -> APP(xs, ys)
The graph contains the following edges 1 > 1, 2 >= 2


*APP(xs, app(ys, zs)) -> APP(xs, ys)
The graph contains the following edges 1 >= 1, 2 > 2


*APP(xs, app(ys, zs)) -> APP(app(xs, ys), zs)
The graph contains the following edges 2 > 2


----------------------------------------

(31)
YES
