AST
proof of /home/ff862203/input_91Gvwi016g.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   numR, search(NodeTwo(t1, t2, y), x), or(true, false), or(false, true), or(true, true), eq(x, x), search(Leaf, x), search(NodeOne(t, y), x), createT
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

And Q contains the following terms:
   numR, search(NodeTwo(x0, x1, x2), x3), or(true, false), or(false, true), or(true, true), eq(x0, x0), search(Leaf, x0), search(NodeOne(x0, x1), x2), createT

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)
   SEARCH(NodeTwo(t1, t2, y), x) -> 1 : OR(EQ(y, x), OR(SEARCH(t1, x), SEARCH(t2, x)))
   OR(true, false) -> 1 : true
   OR(false, true) -> 1 : true
   OR(true, true) -> 1 : true
   EQ(x, x) -> 1 : true
   SEARCH(Leaf, x) -> 1 : false
   SEARCH(NodeOne(t, y), x) -> 1 : OR(EQ(y, x), SEARCH(t, x))
   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, NUMR) || 1 / 3 : NodeTwo(CREATET, CREATET, NUMR)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   SEARCH(NodeOne(t, y), x) -> 1 : OR(EQ(y, x), SEARCH(t, x))
   SEARCH(NodeTwo(t1, t2, y), x) -> 1 : OR(EQ(y, x), OR(SEARCH(t1, x), SEARCH(t2, x)))


----------------------------------------

(8) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[OR(eq(y, x), search(t, x)), EQ(y, x), OR(eq(y, x), or(search(t1, x), search(t2, x))), OR(search(t1, x), search(t2, x))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   SEARCH(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(SEARCH(t1, x), SEARCH(t2, x)))
   SEARCH(NodeOne(t, y), x) -> 1 : or(eq(y, x), SEARCH(t, x))


----------------------------------------

(10) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   SEARCH(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(SEARCH(t1, x), SEARCH(t2, x)))
   SEARCH(NodeOne(t, y), x) -> 1 : or(eq(y, x), SEARCH(t, x))


----------------------------------------

(12) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEARCH(NodeOne(t, y), x) -> SEARCH(t, x)
   SEARCH(NodeTwo(t1, t2, y), x) -> SEARCH(t1, x)
   SEARCH(NodeTwo(t1, t2, y), x) -> SEARCH(t2, x)

R is empty.
The set Q consists of the following terms:

   numR
   search(NodeTwo(x0, x1, x2), x3)
   or(true, false)
   or(false, true)
   or(true, true)
   eq(x0, x0)
   search(Leaf, x0)
   search(NodeOne(x0, x1), x2)
   createT

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   numR
   search(NodeTwo(x0, x1, x2), x3)
   or(true, false)
   or(false, true)
   or(true, true)
   eq(x0, x0)
   search(Leaf, x0)
   search(NodeOne(x0, x1), x2)
   createT


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SEARCH(NodeOne(t, y), x) -> SEARCH(t, x)
   SEARCH(NodeTwo(t1, t2, y), x) -> SEARCH(t1, x)
   SEARCH(NodeTwo(t1, t2, y), x) -> SEARCH(t2, x)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SEARCH(NodeOne(t, y), x) -> SEARCH(t, x)
The graph contains the following edges 1 > 1, 2 >= 2


*SEARCH(NodeTwo(t1, t2, y), x) -> SEARCH(t1, x)
The graph contains the following edges 1 > 1, 2 >= 2


*SEARCH(NodeTwo(t1, t2, y), x) -> SEARCH(t2, x)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(NUMR) = 2
   POL(s(x_1)) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, NUMR) || 1 / 3 : NodeTwo(CREATET, CREATET, NUMR)


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[NUMR]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)
   search(NodeTwo(t1, t2, y), x) -> 1 : or(eq(y, x), or(search(t1, x), search(t2, x)))
   or(true, false) -> 1 : true
   or(false, true) -> 1 : true
   or(true, true) -> 1 : true
   eq(x, x) -> 1 : true
   search(Leaf, x) -> 1 : false
   search(NodeOne(t, y), x) -> 1 : or(eq(y, x), search(t, x))
   createT -> 1 / 3 : Leaf || 1 / 3 : NodeOne(createT, numR) || 1 / 3 : NodeTwo(createT, createT, numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, numR) || 1 / 3 : NodeTwo(CREATET, CREATET, numR)


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, numR) || 1 / 3 : NodeTwo(CREATET, CREATET, numR)


----------------------------------------

(30) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   CREATET -> 1 / 3 : Leaf || 1 / 3 : NodeOne(CREATET, numR) || 1 / 3 : NodeTwo(CREATET, CREATET, numR)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(CREATET) = 2
   POL(Leaf) = 0
   POL(NodeOne(x_1, x_2)) = 0
   POL(NodeTwo(x_1, x_2, x_3)) = 0
   POL(numR) = 0

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(33)
YES
