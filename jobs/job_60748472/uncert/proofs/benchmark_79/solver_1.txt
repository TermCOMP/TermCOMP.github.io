AST
proof of /home/ff862203/input_uNEDq4cEHb.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(14) ADP
(15) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(16) ADP
(17) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(18) ADP
(19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(20) ADP
(21) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(22) ADP
(23) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(24) ADP
(25) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(26) ADP
(27) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(28) ADP
(29) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(30) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   traverse_rand(x) -> 1 : if_traverse(isLeaf(x), x)
   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   if_traverse(false, x) -> 1 / 3 : cons(head(x), traverse_rand(x)) || 1 / 3 : cons(head(x), traverse_rand(leftchild(x))) || 1 / 3 : cons(head(x), traverse_rand(rightchild(x)))
   isLeaf(tree(n, x, y)) -> 1 : false
   head(tree(n, x, y)) -> 1 : n
   rightchild(tree(n, x, y)) -> 1 : y
   if_traverse(true, x) -> 1 : nil

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   traverse_rand(x), isLeaf(leaf), leftchild(tree(n, x, y)), if_traverse(false, x), isLeaf(tree(n, x, y)), head(tree(n, x, y)), rightchild(tree(n, x, y)), if_traverse(true, x)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   traverse_rand(x) -> 1 : if_traverse(isLeaf(x), x)
   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   if_traverse(false, x) -> 1 / 3 : cons(head(x), traverse_rand(x)) || 1 / 3 : cons(head(x), traverse_rand(leftchild(x))) || 1 / 3 : cons(head(x), traverse_rand(rightchild(x)))
   isLeaf(tree(n, x, y)) -> 1 : false
   head(tree(n, x, y)) -> 1 : n
   rightchild(tree(n, x, y)) -> 1 : y
   if_traverse(true, x) -> 1 : nil

And Q contains the following terms:
   traverse_rand(x0), isLeaf(leaf), leftchild(tree(x0, x1, x2)), if_traverse(false, x0), isLeaf(tree(x0, x1, x2)), head(tree(x0, x1, x2)), rightchild(tree(x0, x1, x2)), if_traverse(true, x0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   traverse_rand(x) -> 1 : if_traverse(isLeaf(x), x)
   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   if_traverse(false, x) -> 1 / 3 : cons(head(x), traverse_rand(x)) || 1 / 3 : cons(head(x), traverse_rand(leftchild(x))) || 1 / 3 : cons(head(x), traverse_rand(rightchild(x)))
   isLeaf(tree(n, x, y)) -> 1 : false
   head(tree(n, x, y)) -> 1 : n
   rightchild(tree(n, x, y)) -> 1 : y
   if_traverse(true, x) -> 1 : nil

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(x) -> 1 : IF_TRAVERSE(ISLEAF(x), x)
   ISLEAF(leaf) -> 1 : true
   LEFTCHILD(tree(n, x, y)) -> 1 : x
   IF_TRAVERSE(false, x) -> 1 / 3 : cons(HEAD(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(HEAD(x), TRAVERSE_RAND(LEFTCHILD(x))) || 1 / 3 : cons(HEAD(x), TRAVERSE_RAND(RIGHTCHILD(x)))
   ISLEAF(tree(n, x, y)) -> 1 : false
   HEAD(tree(n, x, y)) -> 1 : n
   RIGHTCHILD(tree(n, x, y)) -> 1 : y
   IF_TRAVERSE(true, x) -> 1 : nil


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 6 less nodes.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   traverse_rand(x) -> 1 : if_traverse(isLeaf(x), x)
   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   if_traverse(false, x) -> 1 / 3 : cons(head(x), traverse_rand(x)) || 1 / 3 : cons(head(x), traverse_rand(leftchild(x))) || 1 / 3 : cons(head(x), traverse_rand(rightchild(x)))
   isLeaf(tree(n, x, y)) -> 1 : false
   head(tree(n, x, y)) -> 1 : n
   rightchild(tree(n, x, y)) -> 1 : y
   if_traverse(true, x) -> 1 : nil

The ADP Problem has the following rules with annotations:

   IF_TRAVERSE(false, x) -> 1 / 3 : cons(HEAD(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(HEAD(x), TRAVERSE_RAND(LEFTCHILD(x))) || 1 / 3 : cons(HEAD(x), TRAVERSE_RAND(RIGHTCHILD(x)))
   TRAVERSE_RAND(x) -> 1 : IF_TRAVERSE(ISLEAF(x), x)


----------------------------------------

(7) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[HEAD(x), RIGHTCHILD(x), ISLEAF(x), LEFTCHILD(x)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   traverse_rand(x) -> 1 : if_traverse(isLeaf(x), x)
   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   if_traverse(false, x) -> 1 / 3 : cons(head(x), traverse_rand(x)) || 1 / 3 : cons(head(x), traverse_rand(leftchild(x))) || 1 / 3 : cons(head(x), traverse_rand(rightchild(x)))
   isLeaf(tree(n, x, y)) -> 1 : false
   head(tree(n, x, y)) -> 1 : n
   rightchild(tree(n, x, y)) -> 1 : y
   if_traverse(true, x) -> 1 : nil

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(x) -> 1 : IF_TRAVERSE(isLeaf(x), x)
   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))


----------------------------------------

(9) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leftchild(tree(n, x, y)) -> 1 : x
   rightchild(tree(n, x, y)) -> 1 : y
   isLeaf(leaf) -> 1 : true
   isLeaf(tree(n, x, y)) -> 1 : false

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(x) -> 1 : IF_TRAVERSE(isLeaf(x), x)
   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule TRAVERSE_RAND(x) -> 1 : IF_TRAVERSE(isLeaf(x), x) we obtained the following new ADPs :

   TRAVERSE_RAND(leaf) -> 1 : IF_TRAVERSE(isLeaf(leaf), leaf)
   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(isLeaf(tree(y0, y1, y2)), tree(y0, y1, y2))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   isLeaf(tree(n, x, y)) -> 1 : false
   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))
   TRAVERSE_RAND(leaf) -> 1 : IF_TRAVERSE(isLeaf(leaf), leaf)
   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(isLeaf(tree(y0, y1, y2)), tree(y0, y1, y2))


----------------------------------------

(13) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isLeaf(leaf) -> 1 : true
   leftchild(tree(n, x, y)) -> 1 : x
   isLeaf(tree(n, x, y)) -> 1 : false
   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(isLeaf(tree(y0, y1, y2)), tree(y0, y1, y2))
   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))


----------------------------------------

(15) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leftchild(tree(n, x, y)) -> 1 : x
   rightchild(tree(n, x, y)) -> 1 : y
   isLeaf(tree(n, x, y)) -> 1 : false

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(isLeaf(tree(y0, y1, y2)), tree(y0, y1, y2))
   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))


----------------------------------------

(17) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(isLeaf(tree(y0, y1, y2)), tree(y0, y1, y2)) at position [0] we obtained the following new ADPs :

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leftchild(tree(n, x, y)) -> 1 : x
   isLeaf(tree(n, x, y)) -> 1 : false
   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))
   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leftchild(tree(n, x, y)) -> 1 : x
   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x)))
   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))


----------------------------------------

(21) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule IF_TRAVERSE(false, x) -> 1 / 3 : cons(head(x), TRAVERSE_RAND(x)) || 1 / 3 : cons(head(x), TRAVERSE_RAND(leftchild(x))) || 1 / 3 : cons(head(x), TRAVERSE_RAND(rightchild(x))) we obtained the following new ADPs :

   IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(leftchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leftchild(tree(n, x, y)) -> 1 : x
   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))
   IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(leftchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2))))


----------------------------------------

(23) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(leftchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2)))) at position [1,0] we obtained the following new ADPs :

   IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(y1))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   leftchild(tree(n, x, y)) -> 1 : x
   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))
   IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(y1))


----------------------------------------

(25) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(26)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))
   IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(y1))


----------------------------------------

(27) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IF_TRAVERSE(false, tree(y0, y1, y2)) -> 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(tree(y0, y1, y2))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(rightchild(tree(y0, y1, y2)))) || 1 / 3 : cons(head(tree(y0, y1, y2)), TRAVERSE_RAND(y1))

The remaining pairs can at least be oriented weakly:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))

Used ordering:  Polynomial interpretation [POLO]:

   POL(IF_TRAVERSE(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(TRAVERSE_RAND(x_1)) = 1 + x_1
   POL(cons(x_1, x_2)) = 0
   POL(false) = 0
   POL(head(x_1)) = 0
   POL(rightchild(x_1)) = x_1
   POL(tree(x_1, x_2, x_3)) = 1 + 2*x_2 + x_3

----------------------------------------

(28)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rightchild(tree(n, x, y)) -> 1 : y

The ADP Problem has the following rules with annotations:

   TRAVERSE_RAND(tree(y0, y1, y2)) -> 1 : IF_TRAVERSE(false, tree(y0, y1, y2))


----------------------------------------

(29) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(30)
TRUE
