AST
proof of /home/ff862203/input_TV7rBzD5hO.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 3 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (33) ADP
        (34) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (35) ADP
        (36) AST_ADPReductionPairProof [EQUIVALENT, 365 ms]
        (37) ADP
        (38) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (39) ADP
        (40) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (41) ADP
        (42) AST_ADPReductionPairProof [EQUIVALENT, 48 ms]
        (43) ADP
        (44) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (45) ADP
        (46) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (47) ADP
        (48) AST_ADPReductionPairProof [EQUIVALENT, 16 ms]
        (49) ADP
        (50) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
        (51) ADP
        (52) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (53) ADP
        (54) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (55) ADP
        (56) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (57) ADP
        (58) AST_ADPReductionPairProof [EQUIVALENT, 10 ms]
        (59) ADP
        (60) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (61) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   head(cons(x, xs)), pickR(cons(x, xs)), isempty(cons(x, xs)), fst(pair(x, y)), app(nil, y), ifNoneEmptyZip(true, xs, ys), tail(cons(x, xs)), or(true, x), or(x, true), zip(xs, ys), app(cons(n, x), y), help(xs, ys), and(false, x), and(x, false), isempty(nil), snd(pair(x, y)), and(true, true), ifNoneEmptyZip(false, xs, ys), or(false, false)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

And Q contains the following terms:
   head(cons(x0, x1)), pickR(cons(x0, x1)), isempty(cons(x0, x1)), fst(pair(x0, x1)), app(nil, x0), ifNoneEmptyZip(true, x0, x1), tail(cons(x0, x1)), or(true, x0), or(x0, true), zip(x0, x1), app(cons(n, x0), x1), help(x0, x1), and(false, x0), and(x0, false), isempty(nil), snd(pair(x0, x1)), and(true, true), ifNoneEmptyZip(false, x0, x1), or(false, false)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   HEAD(cons(x, xs)) -> 1 : x
   PICKR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : PICKR(APP(xs, cons(x, nil)))
   ISEMPTY(cons(x, xs)) -> 1 : false
   FST(pair(x, y)) -> 1 : x
   APP(nil, y) -> 1 : y
   IFNONEEMPTYZIP(true, xs, ys) -> 1 : nil
   TAIL(cons(x, xs)) -> 1 : xs
   OR(true, x) -> 1 : true
   OR(x, true) -> 1 : true
   ZIP(xs, ys) -> 1 : IFNONEEMPTYZIP(OR(ISEMPTY(xs), ISEMPTY(ys)), xs, ys)
   APP(cons(n, x), y) -> 1 : cons(n, APP(x, y))
   HELP(xs, ys) -> 1 : cons(pair(HEAD(xs), FST(ys)), ZIP(TAIL(xs), SND(ys)))
   AND(false, x) -> 1 : false
   AND(x, false) -> 1 : false
   ISEMPTY(nil) -> 1 : true
   SND(pair(x, y)) -> 1 : y
   AND(true, true) -> 1 : true
   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, PICKR(ys))
   OR(false, false) -> 1 : false


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 14 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   APP(cons(n, x), y) -> 1 : cons(n, APP(x, y))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   APP(cons(n, x), y) -> 1 : cons(n, APP(x, y))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(n, x), y) -> APP(x, y)

R is empty.
The set Q consists of the following terms:

   head(cons(x0, x1))
   pickR(cons(x0, x1))
   isempty(cons(x0, x1))
   fst(pair(x0, x1))
   app(nil, x0)
   ifNoneEmptyZip(true, x0, x1)
   tail(cons(x0, x1))
   or(true, x0)
   or(x0, true)
   zip(x0, x1)
   app(cons(n, x0), x1)
   help(x0, x1)
   and(false, x0)
   and(x0, false)
   isempty(nil)
   snd(pair(x0, x1))
   and(true, true)
   ifNoneEmptyZip(false, x0, x1)
   or(false, false)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   head(cons(x0, x1))
   pickR(cons(x0, x1))
   isempty(cons(x0, x1))
   fst(pair(x0, x1))
   app(nil, x0)
   ifNoneEmptyZip(true, x0, x1)
   tail(cons(x0, x1))
   or(true, x0)
   or(x0, true)
   zip(x0, x1)
   app(cons(n, x0), x1)
   help(x0, x1)
   and(false, x0)
   and(x0, false)
   isempty(nil)
   snd(pair(x0, x1))
   and(true, true)
   ifNoneEmptyZip(false, x0, x1)
   or(false, false)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(n, x), y) -> APP(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(n, x), y) -> APP(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   PICKR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : PICKR(APP(xs, cons(x, nil)))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[APP(xs, cons(x, nil))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   PICKR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : PICKR(app(xs, cons(x, nil)))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(nil, y) -> 1 : y
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))

The ADP Problem has the following rules with annotations:

   PICKR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : PICKR(app(xs, cons(x, nil)))


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   PICKR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : PICKR(app(xs, cons(x, nil)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(PICKR(x_1)) = 1 + 2*x_1
   POL(app(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(n) = 0
   POL(nil) = 0
   POL(pair(x_1, x_2)) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(nil, y) -> 1 : y
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))

The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   ZIP(xs, ys) -> 1 : IFNONEEMPTYZIP(OR(ISEMPTY(xs), ISEMPTY(ys)), xs, ys)
   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, PICKR(ys))
   HELP(xs, ys) -> 1 : cons(pair(HEAD(xs), FST(ys)), ZIP(TAIL(xs), SND(ys)))


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[OR(isempty(xs), isempty(ys)), TAIL(xs), ISEMPTY(ys), FST(ys), SND(ys), ISEMPTY(xs), PICKR(ys), HEAD(xs)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   head(cons(x, xs)) -> 1 : x
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   fst(pair(x, y)) -> 1 : x
   app(nil, y) -> 1 : y
   ifNoneEmptyZip(true, xs, ys) -> 1 : nil
   tail(cons(x, xs)) -> 1 : xs
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   zip(xs, ys) -> 1 : ifNoneEmptyZip(or(isempty(xs), isempty(ys)), xs, ys)
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   help(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), zip(tail(xs), snd(ys)))
   and(false, x) -> 1 : false
   and(x, false) -> 1 : false
   isempty(nil) -> 1 : true
   snd(pair(x, y)) -> 1 : y
   and(true, true) -> 1 : true
   ifNoneEmptyZip(false, xs, ys) -> 1 : help(xs, pickR(ys))
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(xs, ys) -> 1 : IFNONEEMPTYZIP(or(isempty(xs), isempty(ys)), xs, ys)


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   app(nil, y) -> 1 : y
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(xs, ys) -> 1 : IFNONEEMPTYZIP(or(isempty(xs), isempty(ys)), xs, ys)


----------------------------------------

(30) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule ZIP(xs, ys) -> 1 : IFNONEEMPTYZIP(or(isempty(xs), isempty(ys)), xs, ys) we obtained the following new ADPs :

   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(isempty(cons(y0, y1)), isempty(x1)), cons(y0, y1), x1)
   ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(isempty(nil), isempty(x1)), nil, x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(isempty(cons(y0, y1)), isempty(x1)), cons(y0, y1), x1)
   ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(isempty(nil), isempty(x1)), nil, x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)


----------------------------------------

(32) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(isempty(cons(y0, y1)), isempty(x1)), cons(y0, y1), x1) at position [0,0] we obtained the following new ADPs :

   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(isempty(nil), isempty(x1)), nil, x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)


----------------------------------------

(34) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(isempty(nil), isempty(x1)), nil, x1) at position [0,0] we obtained the following new ADPs :

   ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(true, isempty(x1)), nil, x1)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(35)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(true, isempty(x1)), nil, x1)


----------------------------------------

(36) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   ZIP(nil, x1) -> 1 : IFNONEEMPTYZIP(or(true, isempty(x1)), nil, x1)

The remaining pairs can at least be oriented weakly:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)

Used ordering:  Polynomial interpretation [POLO]:

   POL(HELP(x_1, x_2)) = 2
   POL(IFNONEEMPTYZIP(x_1, x_2, x_3)) = 2*x_1
   POL(ZIP(x_1, x_2)) = 2
   POL(app(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + x_1*x_2 + 2*x_2
   POL(false) = 1
   POL(fst(x_1)) = 0
   POL(head(x_1)) = 0
   POL(isempty(x_1)) = 1
   POL(n) = 1
   POL(nil) = 0
   POL(or(x_1, x_2)) = x_1*x_2
   POL(pair(x_1, x_2)) = 2*x_2
   POL(pickR(x_1)) = 2*x_1
   POL(snd(x_1)) = 2*x_1
   POL(tail(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(37)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)


----------------------------------------

(38) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(cons(y0, y1))), x0, cons(y0, y1)) at position [0,1] we obtained the following new ADPs :

   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(39)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil)
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))


----------------------------------------

(40) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), isempty(nil)), x0, nil) at position [0,1] we obtained the following new ADPs :

   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), true), x0, nil)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(41)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))
   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), true), x0, nil)


----------------------------------------

(42) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   ZIP(x0, nil) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), true), x0, nil)

The remaining pairs can at least be oriented weakly:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))

Used ordering:  Polynomial interpretation [POLO]:

   POL(HELP(x_1, x_2)) = 2
   POL(IFNONEEMPTYZIP(x_1, x_2, x_3)) = 2*x_1
   POL(ZIP(x_1, x_2)) = 2
   POL(app(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(false) = 1
   POL(fst(x_1)) = 0
   POL(head(x_1)) = 0
   POL(isempty(x_1)) = 1
   POL(n) = 2
   POL(nil) = 0
   POL(or(x_1, x_2)) = x_1*x_2
   POL(pair(x_1, x_2)) = x_2
   POL(pickR(x_1)) = 2*x_1
   POL(snd(x_1)) = x_1
   POL(tail(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(43)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys)))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))


----------------------------------------

(44) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule HELP(xs, ys) -> 1 : cons(pair(head(xs), fst(ys)), ZIP(tail(xs), snd(ys))) we obtained the following new ADPs :

   HELP(cons(y0, y1), x1) -> 1 : cons(pair(head(cons(y0, y1)), fst(x1)), ZIP(tail(cons(y0, y1)), snd(x1)))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), snd(pair(y0, y1))))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(45)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))
   HELP(cons(y0, y1), x1) -> 1 : cons(pair(head(cons(y0, y1)), fst(x1)), ZIP(tail(cons(y0, y1)), snd(x1)))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), snd(pair(y0, y1))))


----------------------------------------

(46) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule HELP(cons(y0, y1), x1) -> 1 : cons(pair(head(cons(y0, y1)), fst(x1)), ZIP(tail(cons(y0, y1)), snd(x1))) at position [1,0] we obtained the following new ADPs :

   HELP(cons(y0, y1), x1) -> 1 : cons(pair(head(cons(y0, y1)), fst(x1)), ZIP(y1, snd(x1)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(47)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), snd(pair(y0, y1))))
   HELP(cons(y0, y1), x1) -> 1 : cons(pair(head(cons(y0, y1)), fst(x1)), ZIP(y1, snd(x1)))


----------------------------------------

(48) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   HELP(cons(y0, y1), x1) -> 1 : cons(pair(head(cons(y0, y1)), fst(x1)), ZIP(y1, snd(x1)))

The remaining pairs can at least be oriented weakly:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), snd(pair(y0, y1))))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))

Used ordering:  Polynomial interpretation [POLO]:

   POL(HELP(x_1, x_2)) = x_1
   POL(IFNONEEMPTYZIP(x_1, x_2, x_3)) = x_2
   POL(ZIP(x_1, x_2)) = x_1
   POL(app(x_1, x_2)) = x_1 + x_1*x_2 + 2*x_2
   POL(cons(x_1, x_2)) = 2 + 2*x_2
   POL(false) = 0
   POL(fst(x_1)) = 0
   POL(head(x_1)) = 0
   POL(isempty(x_1)) = 0
   POL(n) = 0
   POL(nil) = 0
   POL(or(x_1, x_2)) = 0
   POL(pair(x_1, x_2)) = x_2
   POL(pickR(x_1)) = 2 + 2*x_1
   POL(snd(x_1)) = 2*x_1
   POL(tail(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(49)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), snd(pair(y0, y1))))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))


----------------------------------------

(50) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), snd(pair(y0, y1)))) at position [1,1] we obtained the following new ADPs :

   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(51)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   isempty(cons(x, xs)) -> 1 : false
   app(nil, y) -> 1 : y
   isempty(nil) -> 1 : true
   tail(cons(x, xs)) -> 1 : xs
   snd(pair(x, y)) -> 1 : y
   or(true, x) -> 1 : true
   or(x, true) -> 1 : true
   or(false, false) -> 1 : false

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))


----------------------------------------

(52) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(53)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   tail(cons(x, xs)) -> 1 : xs
   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   or(true, x) -> 1 : true
   or(false, false) -> 1 : false
   or(x, true) -> 1 : true
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   app(nil, y) -> 1 : y

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))


----------------------------------------

(54) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   ZIP(cons(y0, y1), x1) -> 1 : IFNONEEMPTYZIP(or(false, isempty(x1)), cons(y0, y1), x1)

The remaining pairs can at least be oriented weakly:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))

Used ordering:  Polynomial interpretation [POLO]:

   POL(HELP(x_1, x_2)) = x_1*x_2
   POL(IFNONEEMPTYZIP(x_1, x_2, x_3)) = 2*x_2*x_3
   POL(ZIP(x_1, x_2)) = 2*x_1 + 2*x_1*x_2
   POL(app(x_1, x_2)) = 1 + x_1 + x_2
   POL(cons(x_1, x_2)) = 2 + x_2
   POL(false) = 0
   POL(fst(x_1)) = 0
   POL(head(x_1)) = 0
   POL(isempty(x_1)) = 0
   POL(n) = 0
   POL(nil) = 0
   POL(or(x_1, x_2)) = 0
   POL(pair(x_1, x_2)) = 2 + 2*x_2
   POL(pickR(x_1)) = 2*x_1
   POL(tail(x_1)) = x_1
   POL(true) = 0

----------------------------------------

(55)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   tail(cons(x, xs)) -> 1 : xs
   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   or(true, x) -> 1 : true
   or(false, false) -> 1 : false
   or(x, true) -> 1 : true
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   app(nil, y) -> 1 : y

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))


----------------------------------------

(56) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(57)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   or(true, x) -> 1 : true
   or(false, false) -> 1 : false
   tail(cons(x, xs)) -> 1 : xs
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   app(nil, y) -> 1 : y

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))


----------------------------------------

(58) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   HELP(x0, pair(y0, y1)) -> 1 : cons(pair(head(x0), fst(pair(y0, y1))), ZIP(tail(x0), y1))

The remaining pairs can at least be oriented weakly:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))

Used ordering:  Polynomial interpretation [POLO]:

   POL(HELP(x_1, x_2)) = x_2
   POL(IFNONEEMPTYZIP(x_1, x_2, x_3)) = 2*x_3
   POL(ZIP(x_1, x_2)) = 2*x_2
   POL(app(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(cons(x_1, x_2)) = 2 + 2*x_2
   POL(false) = 0
   POL(fst(x_1)) = 0
   POL(head(x_1)) = 0
   POL(isempty(x_1)) = 0
   POL(n) = 0
   POL(nil) = 0
   POL(or(x_1, x_2)) = 0
   POL(pair(x_1, x_2)) = 1 + 2*x_2
   POL(pickR(x_1)) = 2*x_1
   POL(tail(x_1)) = 2*x_1
   POL(true) = 0

----------------------------------------

(59)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   isempty(cons(x, xs)) -> 1 : false
   isempty(nil) -> 1 : true
   or(true, x) -> 1 : true
   or(false, false) -> 1 : false
   tail(cons(x, xs)) -> 1 : xs
   pickR(cons(x, xs)) -> 1 / 2 : pair(x, xs) || 1 / 2 : pickR(app(xs, cons(x, nil)))
   app(cons(n, x), y) -> 1 : cons(n, app(x, y))
   app(nil, y) -> 1 : y

The ADP Problem has the following rules with annotations:

   IFNONEEMPTYZIP(false, xs, ys) -> 1 : HELP(xs, pickR(ys))
   ZIP(x0, cons(y0, y1)) -> 1 : IFNONEEMPTYZIP(or(isempty(x0), false), x0, cons(y0, y1))


----------------------------------------

(60) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(61)
TRUE
