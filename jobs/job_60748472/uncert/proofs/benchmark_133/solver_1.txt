AST
proof of /home/ff862203/input_IC2Ob6lXov.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 11 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) PisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) ADP
        (30) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (33) ADP
        (34) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (35) ADP
        (36) PisEmptyProof [EQUIVALENT, 0 ms]
        (37) YES
    (38) ADP
        (39) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (40) ADP
        (41) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (42) ADP
        (43) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (44) ADP
        (45) PisEmptyProof [EQUIVALENT, 0 ms]
        (46) YES
    (47) ADP
        (48) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (49) ADP
        (50) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (51) QDP
        (52) QReductionProof [EQUIVALENT, 0 ms]
        (53) QDP
        (54) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (55) YES
    (56) ADP
        (57) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (58) ADP
        (59) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (60) ADP
        (61) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) QReductionProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (66) QDP
        (67) MRRProof [EQUIVALENT, 0 ms]
        (68) QDP
        (69) MRRProof [EQUIVALENT, 0 ms]
        (70) QDP
        (71) DependencyGraphProof [EQUIVALENT, 0 ms]
        (72) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   app(cons(x, l), k), addNum(x, xs), createL(xs), sum(cons(x, cons(y, l))), plus(0, y), init, plus(s(x), y), app(nil, k), app(l, nil), sum(app(l, cons(x, cons(y, k)))), sum(cons(x, nil))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

And Q contains the following terms:
   app(cons(x0, x1), x2), addNum(x0, x1), createL(x0), sum(cons(x0, cons(x1, x2))), plus(0, x0), init, plus(s(x0), x1), app(nil, x0), app(x0, nil), sum(app(x0, cons(x1, cons(x2, x3)))), sum(cons(x0, nil))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   APP(cons(x, l), k) -> 1 : cons(x, APP(l, k))
   ADDNUM(x, xs) -> 1 / 2 : cons(PLUS(x, x), xs) || 1 / 2 : ADDNUM(s(x), xs)
   CREATEL(xs) -> 1 / 2 : ADDNUM(0, xs) || 1 / 2 : CREATEL(ADDNUM(0, xs))
   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(PLUS(x, y), l))
   PLUS(0, y) -> 1 : y
   INIT -> 1 : SUM(CREATEL(nil))
   PLUS(s(x), y) -> 1 : s(PLUS(x, y))
   APP(nil, k) -> 1 : k
   APP(l, nil) -> 1 : l
   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(APP(l, SUM(cons(x, cons(y, k)))))
   SUM(cons(x, nil)) -> 1 : cons(x, nil)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   init
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   init
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS(s(x), y) -> PLUS(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS(s(x), y) -> PLUS(x, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(PLUS(x, y), l))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[PLUS(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(plus(x, y), l))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))

The ADP Problem has the following rules with annotations:

   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(plus(x, y), l))


----------------------------------------

(21) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))

The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))
   plus(0, y) -> y

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   init
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   init
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))

The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))
   plus(0, y) -> y

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   SUM(cons(x, cons(y, l))) -> SUM(cons(plus(x, y), l))
The following rules are removed from R:

   plus(0, y) -> y
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(SUM(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1


----------------------------------------

(26)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))

The set Q consists of the following terms:

   plus(0, x0)
   plus(s(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(PLUS(x, x), xs) || 1 / 2 : ADDNUM(s(x), xs)


----------------------------------------

(30) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[PLUS(x, x)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : ADDNUM(s(x), xs)


----------------------------------------

(32) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : ADDNUM(s(x), xs)


----------------------------------------

(34) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : ADDNUM(s(x), xs)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(ADDNUM(x_1, x_2)) = 2 + x_1 + x_1*x_2 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = 0
   POL(s(x_1)) = 2 + 2*x_1

----------------------------------------

(35)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(36) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(37)
YES

----------------------------------------

(38)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : ADDNUM(0, xs) || 1 / 2 : CREATEL(ADDNUM(0, xs))


----------------------------------------

(39) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[ADDNUM(0, xs)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(40)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))


----------------------------------------

(41) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(42)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))


----------------------------------------

(43) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CREATEL(x_1)) = 1
   POL(addNum(x_1, x_2)) = 0
   POL(cons(x_1, x_2)) = 0
   POL(plus(x_1, x_2)) = x_2
   POL(s(x_1)) = 0

----------------------------------------

(44)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))

The set of rules with annotations is empty.

----------------------------------------

(45) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   APP(cons(x, l), k) -> 1 : cons(x, APP(l, k))


----------------------------------------

(48) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(49)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   APP(cons(x, l), k) -> 1 : cons(x, APP(l, k))


----------------------------------------

(50) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, l), k) -> APP(l, k)

R is empty.
The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   init
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   init
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP(cons(x, l), k) -> APP(l, k)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP(cons(x, l), k) -> APP(l, k)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(55)
YES

----------------------------------------

(56)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(APP(l, SUM(cons(x, cons(y, k)))))


----------------------------------------

(57) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[APP(l, sum(cons(x, cons(y, k)))), SUM(cons(x, cons(y, k)))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(58)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   addNum(x, xs) -> 1 / 2 : cons(plus(x, x), xs) || 1 / 2 : addNum(s(x), xs)
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(app(l, sum(cons(x, cons(y, k)))))


----------------------------------------

(59) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(60)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   app(l, nil) -> 1 : l
   plus(0, y) -> 1 : y
   plus(s(x), y) -> 1 : s(plus(x, y))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(app(l, sum(cons(x, cons(y, k)))))


----------------------------------------

(61) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)
   app(l, nil) -> l
   plus(0, y) -> y
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   addNum(x0, x1)
   createL(x0)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   init
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   addNum(x0, x1)
   createL(x0)
   init


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)
   app(l, nil) -> l
   plus(0, y) -> y
   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   plus(0, y) -> y
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(SUM(x_1)) = 2*x_1
   POL(app(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(sum(x_1)) = x_1


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

The TRS R consists of the following rules:

   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   app(l, nil) -> l
   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   app(l, nil) -> l

Used ordering: Polynomial interpretation [POLO]:

   POL(SUM(x_1)) = 2*x_1
   POL(app(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(sum(x_1)) = x_1


----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

The TRS R consists of the following rules:

   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))
   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   sum(cons(x, cons(y, l))) -> sum(cons(plus(x, y), l))

Used ordering: Polynomial interpretation [POLO]:

   POL(SUM(x_1)) = 2*x_1
   POL(app(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(sum(x_1)) = x_1


----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM(app(l, cons(x, cons(y, k)))) -> SUM(app(l, sum(cons(x, cons(y, k)))))

The TRS R consists of the following rules:

   plus(s(x), y) -> s(plus(x, y))
   sum(cons(x, nil)) -> cons(x, nil)

The set Q consists of the following terms:

   app(cons(x0, x1), x2)
   sum(cons(x0, cons(x1, x2)))
   plus(0, x0)
   plus(s(x0), x1)
   app(nil, x0)
   app(x0, nil)
   sum(app(x0, cons(x1, cons(x2, x3))))
   sum(cons(x0, nil))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(71) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(72)
TRUE
