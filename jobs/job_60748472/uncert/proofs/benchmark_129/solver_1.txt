AST
proof of /home/ff862203/input_BDxmGWr4Wx.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) PisEmptyProof [EQUIVALENT, 0 ms]
        (28) YES
    (29) ADP
        (30) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (33) ADP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   createT(xs), less_leaves(x, leaf), concat(tree(u, v), y), concat(leaf, y), less_leaves(tree(u, v), tree(x, y)), init, less_leaves(leaf, tree(x, y))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

And Q contains the following terms:
   createT(x0), less_leaves(x0, leaf), concat(tree(x0, x1), x2), concat(leaf, x0), less_leaves(tree(x0, x1), tree(x2, x3)), init, less_leaves(leaf, tree(x0, x1))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))
   CREATET(xs) -> 1 : xs
   LESS_LEAVES(x, leaf) -> 1 : false
   CONCAT(tree(u, v), y) -> 1 : tree(u, CONCAT(v, y))
   CONCAT(leaf, y) -> 1 : y
   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(CONCAT(u, v), CONCAT(x, y))
   INIT -> 1 : LESS_LEAVES(CREATET(leaf), CREATET(leaf))
   LESS_LEAVES(leaf, tree(x, y)) -> 1 : true


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   CONCAT(tree(u, v), y) -> 1 : tree(u, CONCAT(v, y))


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   CONCAT(tree(u, v), y) -> 1 : tree(u, CONCAT(v, y))


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(tree(u, v), y) -> CONCAT(v, y)

R is empty.
The set Q consists of the following terms:

   createT(x0)
   less_leaves(x0, leaf)
   concat(tree(x0, x1), x2)
   concat(leaf, x0)
   less_leaves(tree(x0, x1), tree(x2, x3))
   init
   less_leaves(leaf, tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   createT(x0)
   less_leaves(x0, leaf)
   concat(tree(x0, x1), x2)
   concat(leaf, x0)
   less_leaves(tree(x0, x1), tree(x2, x3))
   init
   less_leaves(leaf, tree(x0, x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CONCAT(tree(u, v), y) -> CONCAT(v, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*CONCAT(tree(u, v), y) -> CONCAT(v, y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(CONCAT(u, v), CONCAT(x, y))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[CONCAT(u, v), CONCAT(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(concat(u, v), concat(x, y))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y

The ADP Problem has the following rules with annotations:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(concat(u, v), concat(x, y))


----------------------------------------

(21) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> LESS_LEAVES(concat(u, v), concat(x, y))

The TRS R consists of the following rules:

   concat(leaf, y) -> y
   concat(tree(u, v), y) -> tree(u, concat(v, y))

The set Q consists of the following terms:

   createT(x0)
   less_leaves(x0, leaf)
   concat(tree(x0, x1), x2)
   concat(leaf, x0)
   less_leaves(tree(x0, x1), tree(x2, x3))
   init
   less_leaves(leaf, tree(x0, x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   createT(x0)
   less_leaves(x0, leaf)
   less_leaves(tree(x0, x1), tree(x2, x3))
   init
   less_leaves(leaf, tree(x0, x1))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> LESS_LEAVES(concat(u, v), concat(x, y))

The TRS R consists of the following rules:

   concat(leaf, y) -> y
   concat(tree(u, v), y) -> tree(u, concat(v, y))

The set Q consists of the following terms:

   concat(tree(x0, x1), x2)
   concat(leaf, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> LESS_LEAVES(concat(u, v), concat(x, y))
The following rules are removed from R:

   concat(leaf, y) -> y
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(LESS_LEAVES(x_1, x_2)) = x_1 + x_2
   POL(concat(x_1, x_2)) = x_1 + x_2
   POL(leaf) = 0
   POL(tree(x_1, x_2)) = 1 + 2*x_1 + x_2


----------------------------------------

(26)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   concat(tree(u, v), y) -> tree(u, concat(v, y))

The set Q consists of the following terms:

   concat(tree(x0, x1), x2)
   concat(leaf, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))


----------------------------------------

(30) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))


----------------------------------------

(32) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(CREATET(x_1)) = 2 + 2*x_1
   POL(leaf) = 0
   POL(tree(x_1, x_2)) = 0

----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(35)
YES
