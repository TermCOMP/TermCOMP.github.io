AST
proof of /home/ff862203/input_amohGxwhTj.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPUsableTermsProof [EQUIVALENT, 6 ms]
(6) ADP
(7) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) ADP
        (14) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (15) ADP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) ADP
        (19) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(a, f(x, a)) -> 1 / 3 : f(a, f(f(a, a), x)) || 1 / 3 : f(a, f(x, f(a, a))) || 1 / 3 : f(a, f(a, f(x, a)))

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   f(a, f(x, a))
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   f(a, f(x, a)) -> 1 / 3 : f(a, f(f(a, a), x)) || 1 / 3 : f(a, f(x, f(a, a))) || 1 / 3 : f(a, f(a, f(x, a)))

And Q contains the following terms:
   f(a, f(x0, a))

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(a, f(x, a)) -> 1 / 3 : f(a, f(f(a, a), x)) || 1 / 3 : f(a, f(x, f(a, a))) || 1 / 3 : f(a, f(a, f(x, a)))

The ADP Problem has the following rules with annotations:

   F(a, f(x, a)) -> 1 / 3 : F(a, F(F(a, a), x)) || 1 / 3 : F(a, F(x, F(a, a))) || 1 / 3 : F(a, F(a, F(x, a)))


----------------------------------------

(5) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(a, f(x, f(a, a))), F(a, a), F(x, a), F(a, f(a, f(x, a))), F(f(a, a), x)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(a, f(x, a)) -> 1 / 3 : f(a, f(f(a, a), x)) || 1 / 3 : f(a, f(x, f(a, a))) || 1 / 3 : f(a, f(a, f(x, a)))

The ADP Problem has the following rules with annotations:

   F(a, f(x, a)) -> 1 / 3 : F(a, f(f(a, a), x)) || 1 / 3 : f(a, F(x, f(a, a))) || 1 / 3 : f(a, F(a, f(x, a)))


----------------------------------------

(7) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(a, f(x, a)) -> 1 / 3 : F(a, f(f(a, a), x)) || 1 / 3 : f(a, F(x, f(a, a))) || 1 / 3 : f(a, F(a, f(x, a)))


----------------------------------------

(9) AST_ADPTransformationProof (EQUIVALENT)
By rule overlap instantiation [FLOPS24] for the rule F(a, f(x, a)) -> 1 / 3 : F(a, f(f(a, a), x)) || 1 / 3 : f(a, F(x, f(a, a))) || 1 / 3 : f(a, F(a, f(x, a))) we obtained the following new ADPs :

   F(a, f(a, a)) -> 1 / 3 : F(a, f(f(a, a), a)) || 1 / 3 : f(a, F(a, f(a, a))) || 1 / 3 : f(a, F(a, f(a, a)))
   F(a, f(x0, a)) -> 1 / 3 : F(a, f(f(a, a), x0)) || 1 / 3 : f(a, f(x0, f(a, a))) || 1 / 3 : f(a, f(a, f(x0, a)))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(a, f(a, a)) -> 1 / 3 : F(a, f(f(a, a), a)) || 1 / 3 : f(a, F(a, f(a, a))) || 1 / 3 : f(a, F(a, f(a, a)))
   F(a, f(x0, a)) -> 1 / 3 : F(a, f(f(a, a), x0)) || 1 / 3 : f(a, f(x0, f(a, a))) || 1 / 3 : f(a, f(a, f(x0, a)))


----------------------------------------

(11) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(a, f(x0, a)) -> 1 / 3 : F(a, f(f(a, a), x0)) || 1 / 3 : f(a, f(x0, f(a, a))) || 1 / 3 : f(a, f(a, f(x0, a)))


----------------------------------------

(14) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(a, f(x0, a)) -> 1 / 3 : F(a, f(f(a, a), x0)) || 1 / 3 : f(a, f(x0, f(a, a))) || 1 / 3 : f(a, f(a, f(x0, a)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = x_1
   POL(a) = 2
   POL(f(x_1, x_2)) = 0

----------------------------------------

(15)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(a, f(a, a)) -> 1 / 3 : F(a, f(f(a, a), a)) || 1 / 3 : f(a, F(a, f(a, a))) || 1 / 3 : f(a, F(a, f(a, a)))


----------------------------------------

(19) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[F(a, f(f(a, a), a))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   F(a, f(a, a)) -> 1 / 3 : f(a, f(f(a, a), a)) || 1 / 3 : f(a, F(a, f(a, a))) || 1 / 3 : f(a, F(a, f(a, a)))


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   F(a, f(a, a)) -> 1 / 3 : f(a, f(f(a, a), a)) || 1 / 3 : f(a, F(a, f(a, a))) || 1 / 3 : f(a, F(a, f(a, a)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(F(x_1, x_2)) = x_1*x_2 + x_2
   POL(a) = 1
   POL(f(x_1, x_2)) = x_1

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES
