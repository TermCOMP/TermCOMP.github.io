AST
proof of /home/ff862203/input_hYyM4UNnSL.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Innermost AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 1 ms]
(6) AND
    (7) ADP
        (8) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (9) ADP
        (10) AST_ADPProbabilityRemovalProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE
    (25) ADP
        (26) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (27) ADP
        (28) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (29) ADP
        (30) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (31) ADP
        (32) PisEmptyProof [EQUIVALENT, 0 ms]
        (33) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

and uses the innermost rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   purge(cons(x, xs)), if(false, x, y, xs), remove(x, cons(y, xs)), if(true, x, y, xs), purge(nil), eq(0, s(y)), eq(s(x), 0), eq(s(x), s(y)), eq(0, 0)
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

And Q contains the following terms:
   purge(cons(x0, x1)), if(false, x0, x1, x2), remove(x0, cons(x1, x2)), if(true, x0, x1, x2), purge(nil), eq(0, s(x0)), eq(s(x0), 0), eq(s(x0), s(x1)), eq(0, 0)

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   PURGE(cons(x, xs)) -> 1 : cons(x, PURGE(REMOVE(x, xs)))
   IF(false, x, y, xs) -> 1 : cons(y, REMOVE(x, xs))
   REMOVE(x, cons(y, xs)) -> 1 : IF(EQ(x, y), x, y, xs)
   IF(true, x, y, xs) -> 1 / 2 : REMOVE(x, xs) || 1 / 2 : REMOVE(x, cons(x, cons(x, xs)))
   PURGE(nil) -> 1 : nil
   EQ(0, s(y)) -> 1 : false
   EQ(s(x), 0) -> 1 : false
   EQ(s(x), s(y)) -> 1 : EQ(x, y)
   EQ(0, 0) -> 1 : true


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   EQ(s(x), s(y)) -> 1 : EQ(x, y)


----------------------------------------

(8) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   EQ(s(x), s(y)) -> 1 : EQ(x, y)


----------------------------------------

(10) AST_ADPProbabilityRemovalProof (EQUIVALENT)


We use the probability removal processor [FLOPS24].
As all rules have a trivial probability (1:r), we can transform it into a non-probabilistic DP problem
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
The set Q consists of the following terms:

   purge(cons(x0, x1))
   if(false, x0, x1, x2)
   remove(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   purge(nil)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   eq(0, 0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   purge(cons(x0, x1))
   if(false, x0, x1, x2)
   remove(x0, cons(x1, x2))
   if(true, x0, x1, x2)
   purge(nil)
   eq(0, s(x0))
   eq(s(x0), 0)
   eq(s(x0), s(x1))
   eq(0, 0)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EQ(s(x), s(y)) -> EQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EQ(s(x), s(y)) -> EQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   REMOVE(x, cons(y, xs)) -> 1 : IF(EQ(x, y), x, y, xs)
   IF(false, x, y, xs) -> 1 : cons(y, REMOVE(x, xs))
   IF(true, x, y, xs) -> 1 / 2 : REMOVE(x, xs) || 1 / 2 : REMOVE(x, cons(x, cons(x, xs)))


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[EQ(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   IF(false, x, y, xs) -> 1 : cons(y, REMOVE(x, xs))
   IF(true, x, y, xs) -> 1 / 2 : REMOVE(x, xs) || 1 / 2 : REMOVE(x, cons(x, cons(x, xs)))
   REMOVE(x, cons(y, xs)) -> 1 : IF(eq(x, y), x, y, xs)


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   IF(false, x, y, xs) -> 1 : cons(y, REMOVE(x, xs))
   IF(true, x, y, xs) -> 1 / 2 : REMOVE(x, xs) || 1 / 2 : REMOVE(x, cons(x, cons(x, xs)))
   REMOVE(x, cons(y, xs)) -> 1 : IF(eq(x, y), x, y, xs)


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   IF(false, x, y, xs) -> 1 : cons(y, REMOVE(x, xs))
   IF(true, x, y, xs) -> 1 / 2 : REMOVE(x, xs) || 1 / 2 : REMOVE(x, cons(x, cons(x, xs)))

The remaining pairs can at least be oriented weakly:

   REMOVE(x, cons(y, xs)) -> 1 : IF(eq(x, y), x, y, xs)

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(IF(x_1, x_2, x_3, x_4)) = 1 + x_4
   POL(REMOVE(x_1, x_2)) = x_2
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(s(x_1)) = 0
   POL(true) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   REMOVE(x, cons(y, xs)) -> 1 : IF(eq(x, y), x, y, xs)


----------------------------------------

(23) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE

----------------------------------------

(25)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   PURGE(cons(x, xs)) -> 1 : cons(x, PURGE(REMOVE(x, xs)))


----------------------------------------

(26) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[REMOVE(x, xs)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(27)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   purge(cons(x, xs)) -> 1 : cons(x, purge(remove(x, xs)))
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   purge(nil) -> 1 : nil
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true

The ADP Problem has the following rules with annotations:

   PURGE(cons(x, xs)) -> 1 : cons(x, PURGE(remove(x, xs)))


----------------------------------------

(28) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(29)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))

The ADP Problem has the following rules with annotations:

   PURGE(cons(x, xs)) -> 1 : cons(x, PURGE(remove(x, xs)))


----------------------------------------

(30) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   PURGE(cons(x, xs)) -> 1 : cons(x, PURGE(remove(x, xs)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(PURGE(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(eq(x_1, x_2)) = 0
   POL(false) = 0
   POL(if(x_1, x_2, x_3, x_4)) = 1 + x_4
   POL(remove(x_1, x_2)) = x_2
   POL(s(x_1)) = 0
   POL(true) = 0

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   if(true, x, y, xs) -> 1 / 2 : remove(x, xs) || 1 / 2 : remove(x, cons(x, cons(x, xs)))
   remove(x, cons(y, xs)) -> 1 : if(eq(x, y), x, y, xs)
   eq(0, s(y)) -> 1 : false
   eq(s(x), 0) -> 1 : false
   eq(s(x), s(y)) -> 1 : eq(x, y)
   eq(0, 0) -> 1 : true
   if(false, x, y, xs) -> 1 : cons(y, remove(x, xs))

The set of rules with annotations is empty.

----------------------------------------

(32) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(33)
YES
